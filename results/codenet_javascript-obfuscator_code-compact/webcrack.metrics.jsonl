{"filename": "p02288_1", "type": "JavaScript", "obfuscated": "(function main(){const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');lines['shift']();const arr=lines['shift']()['split']('\\x20')['map'](Number);buildMaxHeap(arr);console['log'](arr['reduce']((s,e)=>s+='\\x20'+e,''));}());function buildMaxHeap(arr){const n=arr['length'];const maxHeapify=i=>{let left,right,largest;left=0x2*i+0x1;right=0x2*i+0x2;largest=left<n&&arr[left]>arr[i]?left:i;if(right<n&&arr[right]>arr[largest])largest=right;if(largest!=i){arr[largest]=[arr[i],arr[i]=arr[largest]][0x0];maxHeapify(largest);}};for(let i=Math['floor'](arr['length']/0x2);i>=0x0;i--)maxHeapify(i);}", "test_cases": [["10\n4 1 3 2 16 9 10 14 8 7", "16 14 10 8 7 9 3 2 4 1"]], "original": "(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  lines.shift();\n  const arr = lines.shift().split(' ').map(Number);\n  buildMaxHeap(arr);\n  console.log(arr.reduce((s, e) => s += ` ${e}`, ''));\n})();\n\nfunction buildMaxHeap(arr) {\n  const n = arr.length;\n  const maxHeapify = (i) => {\n    let left, right, largest;\n    left = 2 * i + 1;\n    right = 2 * i + 2;\n    largest = left < n && arr[left] > arr[i] ? left : i;\n    if (right < n && arr[right] > arr[largest]) largest = right;\n    if (largest != i) {\n      arr[largest] = [arr[i], arr[i] = arr[largest]][0];\n      maxHeapify(largest);\n    }\n  };\n\n  for (let i = Math.floor(arr.length / 2); i >= 0; i--) maxHeapify(i);\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 0, "deobfuscated": "(function main() {\n  const lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  lines.shift();\n  const arr = lines.shift().split(\" \").map(Number);\n  buildMaxHeap(arr);\n  console.log(arr.reduce((s, e) => s += \" \" + e, \"\"));\n})();\nfunction buildMaxHeap(arr) {\n  const n = arr.length;\n  const maxHeapify = i => {\n    let left;\n    let right;\n    let largest;\n    left = i * 2 + 1;\n    right = i * 2 + 2;\n    largest = left < n && arr[left] > arr[i] ? left : i;\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n    if (largest != i) {\n      arr[largest] = [arr[i], arr[i] = arr[largest]][0];\n      maxHeapify(largest);\n    }\n  };\n  for (let i = Math.floor(arr.length / 2); i >= 0; i--) {\n    maxHeapify(i);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6734716626032344, "ngram_match_score": 0.6319362940262006, "weighted_ngram_match_score": 0.6919676408115499, "syntax_match_score": 0.7480314960629921, "dataflow_match_score": 0.6219512195121951}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02772_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const N=input['shift']();const A=input['map'](v=>parseInt(v));f=![];for(i=0x0;i<A['length'];i++){if(A[i]%0x2==0x0){if(A[i]%0x3!=0x0&&A[i]%0x5!=0x0){f=!![];}}}if(f){console['log']('DENIED');}else{console['log']('APPROVED');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n6 7 9 10 31", "APPROVED"], ["3\n28 27 24", "DENIED"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const N = input.shift();\n  const A = input.map(v => parseInt(v));\n  f = false;\n  for (i = 0; i < A.length; i++) {\n    if (A[i] % 2 == 0) {\n      if (A[i] % 3 != 0 && A[i] % 5 != 0) {\n        f = true;\n      }\n    }\n  }\n  if (f) {\n    console.log(\"DENIED\");\n  } else {\n    console.log(\"APPROVED\");\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = input.shift();\n  const A = input.map(v => parseInt(v));\n  f = false;\n  for (i = 0; i < A.length; i++) {\n    if (A[i] % 2 == 0) {\n      if (A[i] % 3 != 0 && A[i] % 5 != 0) {\n        f = true;\n      }\n    }\n  }\n  if (f) {\n    console.log(\"DENIED\");\n  } else {\n    console.log(\"APPROVED\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.969211482724353, "ngram_match_score": 0.9367554885154544, "weighted_ngram_match_score": 0.9400904423819575, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00909058735919488, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.053763440860215006, "new_decrease_halstead_effort": 0.2091810920799505}}
{"filename": "p02755_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const A=parseInt(arg[0x0]['split']('\\x20')[0x0]);const B=parseInt(arg[0x0]['split']('\\x20')[0x1]);for(let i=0x1;i<=0x2710;i++){const temp1=Math['floor'](i*0.08);const temp2=Math['floor'](i*0.1);if(temp1===A&&temp2===B){console['log'](i);return;}}console['log'](-0x1);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2", "25"], ["8 10", "100"], ["19 99", "-1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const A = parseInt(arg[0].split(\" \")[0]);\n    const B = parseInt(arg[0].split(\" \")[1]);\n    \n    // X * 0.08 = A;\n    // X * 0.1  = B;\n    \n    // const X = A / 0.08;\n    \n    // if(X % 1 !== 0) {\n    //     console.log(-1);\n    //     return;\n    // }\n    \n    // const temp1 = Math.floor(X * 0.08);\n    // const temp2 = Math.floor(X * 0.1);\n    \n    // console.log(temp2)\n    \n    // if(temp1 === A && temp2 === B) {\n    //     console.log(X);\n    //     return;\n    // }\n    \n    // console.log(-1);\n\n    for(let i=1; i<=10000; i++) {\n        const temp1 = Math.floor(i * 0.08);\n        const temp2 = Math.floor(i * 0.1);\n        \n        if(temp1 === A && temp2 === B) {\n            console.log(i);\n            return;\n        }\n    }\n    \n    console.log(-1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 2, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const A = parseInt(arg[0].split(\" \")[0]);\n  const B = parseInt(arg[0].split(\" \")[1]);\n  for (let i = 1; i <= 10000; i++) {\n    const temp1 = Math.floor(i * 0.08);\n    const temp2 = Math.floor(i * 0.1);\n    if (temp1 === A && temp2 === B) {\n      console.log(i);\n      return;\n    }\n  }\n  console.log(-1);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6539299140455093, "ngram_match_score": 0.2595438778296253, "weighted_ngram_match_score": 0.35617577835241165, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02888_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=input[0x0];var L=input[0x1]['split']('\\x20')['map'](Number);var sum=0x0;L['sort'](function(a,b){return b-a;});for(var i=0x0;i<N-0x1;i++){for(var j=i+0x1;j<N;j++){var tag=L[i]-L[j];var arr=L['slice'](0x0,L['length']);arr['splice'](0x0,j+0x1);arr['reverse']();sum+=arr['length']-caninsert(arr,tag);}}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function caninsert(array,value){value+=0.1;var lower=0x0;var upper=array['length'];while(lower<upper){var mid=Math['floor'](lower+(upper-lower)/0x2);if(array[mid]<=value){lower=mid+0x1;}else{upper=mid;}}return lower;};", "test_cases": [["4\n3 4 2 1", "1"], ["3\n1 1000 1", "0"], ["7\n218 786 704 233 645 728 389", "23"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0];\n  var L = input[1].split(\" \").map(Number);\n  var sum = 0;\n  L.sort(function(a,b){return b-a;});\n  for(var i=0;i<N-1;i++){\n    for(var j=i+1;j<N;j++){\n      var tag = L[i]-L[j];\n      var arr = L.slice(0,L.length);\n      arr.splice(0,j+1);\n      arr.reverse();\n      sum += arr.length-caninsert(arr,tag);\n    //  console.log(tag,caninsert(arr,tag),arr)\n    }\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n//以下写経。C++なら関数が用意されてるし多少はね…？\nfunction caninsert(array, value){\n  value += 0.1\n    var lower = 0;\n    var upper = array.length;\n\n    while ( lower < upper ) {\n\n        var mid = Math.floor(lower + (upper - lower) / 2);\n\n        if ( array[mid] <= value ) {\n            lower = mid + 1;\n        } else {\n            upper = mid;\n        }\n\n    }\n    return lower;\n\n};", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 3, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0];\n  var L = input[1].split(\" \").map(Number);\n  var sum = 0;\n  L.sort(function (a, b) {\n    return b - a;\n  });\n  for (var i = 0; i < N - 1; i++) {\n    for (var j = i + 1; j < N; j++) {\n      var tag = L[i] - L[j];\n      var arr = L.slice(0, L.length);\n      arr.splice(0, j + 1);\n      arr.reverse();\n      sum += arr.length - caninsert(arr, tag);\n    }\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction caninsert(array, value) {\n  value += 0.1;\n  var lower = 0;\n  var upper = array.length;\n  while (lower < upper) {\n    var mid = Math.floor(lower + (upper - lower) / 2);\n    if (array[mid] <= value) {\n      lower = mid + 1;\n    } else {\n      upper = mid;\n    }\n  }\n  return lower;\n}\n;\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7696212267797343, "ngram_match_score": 0.45959107351915596, "weighted_ngram_match_score": 0.6188938335997815, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02917_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const list=lines[0x1]['split']('\\x20')['map'](v=>v-0x0);let ans=0x0;for(let i=0x0;i<list['length']-0x1;i++){ans+=Math['min'](list[i],list[i+0x1]);}ans+=list[list['length']-0x1]+list[0x0];console['log'](ans);});", "test_cases": [["3\n2 5", "9"], ["2\n3", "6"], ["6\n0 153 10 10 23", "53"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const list = lines[1].split(\" \").map(v=>v-0);\n    let ans = 0;\n    for(let i=0;i<list.length-1;i++){\n        ans+=Math.min(list[i],list[i+1])\n    }\n    ans += list[list.length-1] + list[0];\n    console.log(ans);\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 4, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  const list = lines[1].split(\" \").map(v => v - 0);\n  let ans = 0;\n  for (let i = 0; i < list.length - 1; i++) {\n    ans += Math.min(list[i], list[i + 1]);\n  }\n  ans += list[list.length - 1] + list[0];\n  console.log(ans);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6948676671387604, "ngram_match_score": 0.34522865416372817, "weighted_ngram_match_score": 0.5213168443232857, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 0.9795918367346939}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02405_1", "type": "JavaScript", "obfuscated": "(function(){var max,max_log2,series,col,j,str,i,line,hw,even,odd;max=0x12c;max_log2=max['toString'](0x2)['length']-0x1;series=[0x1,0x2];col=['#','#.'];j=0x2;str='#.';for(i=0x2;i<=max_log2;i++){series['push'](j*=0x2);col['push'](str=str+str);}series['push'](series[series['length']-0x1]*0x2);function get_column(w){var i,res;res='';for(i=0x1;i<series['length'];i++){if(w<series[i])break;if(w%series[i+0x1]>=series[i])res=res+col[i];}if(w%0x2===0x1)res=res+'#';return res;}line=require('fs')['readFileSync']('/dev/stdin','ascii')['split']('\\x0a');for(i in line){if(line[i]==='0\\x200')break;hw=line[i]['split']('\\x20')['map'](Number);even=get_column(hw[0x1]);odd=even['slice'](0x1)+(hw[0x1]%0x2===0x0?'#':'.');for(j=0x0;j<hw[0x0];j++){if(j%0x2===0x0)console['log'](even);else console['log'](odd);}console['log']('');}}());", "test_cases": [["3 4\n5 6\n3 3\n2 2\n1 1\n0 0", "#.#.\n.#.#\n#.#.\n\n#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n#.#.#.\n\n#.#\n.#.\n#.#\n\n#.\n.#\n\n#"]], "original": "(function () {\n\tvar max, max_log2, series, col, j, str, i, line, hw, even, odd;\n\t\n\tmax = 300;\n\tmax_log2 = max.toString(2).length - 1;\n\n\tseries = [1, 2];\n\tcol = ['#', '#.'];\n\tj = 2;\n\tstr = '#.';\n\tfor (i = 2; i <= max_log2; i++) {\n\t\tseries.push(j *= 2);\n\t\tcol.push(str = str + str);\n\t}\n\tseries.push(series[series.length-1] * 2);\n\n\tfunction get_column(w) {\n\t\tvar i, res;\n\t\tres = \"\";\n\t\tfor (i = 1; i < series.length; i++) {\n\t\t\tif (w < series[i]) break;\n\t\t\tif (w % series[i+1] >= series[i])\n\t\t\t\tres = res + col[i];\n\t\t}\n\t\tif (w % 2 === 1) res = res + '#';\n\t\treturn res;\n\t}\n\n\tline = require('fs').readFileSync('/dev/stdin', 'ascii').split('\\n');\n\tfor (i in line) {\n\t\tif (line[i] === '0 0') break;\n\t\thw = line[i].split(' ').map(Number);\n\t\teven = get_column(hw[1]);\n\t\todd = even.slice(1) + ((hw[1] % 2 === 0) ? '#' : '.');\n\t\tfor (j = 0; j < hw[0]; j++) {\n\t\t\tif (j % 2 === 0) console.log(even);\n\t\t\telse console.log(odd);\n\t\t}\n\t\tconsole.log(\"\");\n\t}\n}) ();", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 5, "deobfuscated": "(function () {\n  var max;\n  var max_log2;\n  var series;\n  var col;\n  var j;\n  var str;\n  var i;\n  var line;\n  var hw;\n  var even;\n  var odd;\n  max = 300;\n  max_log2 = max.toString(2).length - 1;\n  series = [1, 2];\n  col = [\"#\", \"#.\"];\n  j = 2;\n  str = \"#.\";\n  for (i = 2; i <= max_log2; i++) {\n    series.push(j *= 2);\n    col.push(str = str + str);\n  }\n  series.push(series[series.length - 1] * 2);\n  function get_column(w) {\n    var i;\n    var res;\n    res = \"\";\n    for (i = 1; i < series.length; i++) {\n      if (w < series[i]) {\n        break;\n      }\n      if (w % series[i + 1] >= series[i]) {\n        res = res + col[i];\n      }\n    }\n    if (w % 2 === 1) {\n      res = res + \"#\";\n    }\n    return res;\n  }\n  line = require(\"fs\").readFileSync(\"/dev/stdin\", \"ascii\").split(\"\\n\");\n  for (i in line) {\n    if (line[i] === \"0 0\") {\n      break;\n    }\n    hw = line[i].split(\" \").map(Number);\n    even = get_column(hw[1]);\n    odd = even.slice(1) + (hw[1] % 2 === 0 ? \"#\" : \".\");\n    for (j = 0; j < hw[0]; j++) {\n      if (j % 2 === 0) {\n        console.log(even);\n      } else {\n        console.log(odd);\n      }\n    }\n    console.log(\"\");\n  }\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7582253873902682, "ngram_match_score": 0.5436987025474473, "weighted_ngram_match_score": 0.6389354673344814, "syntax_match_score": 0.8502673796791443, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0019440654871001328, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.046025104602510414, "new_decrease_halstead_effort": -0.046025104602510414}}
{"filename": "p02602_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['replace'](/\\n/g,'\\x20');input=input['split']('\\x20');var A=Number(input[0x0]);var B=Number(input[0x1]);input=input['slice'](0x2);for(var i=0x0;i<input['length']-B;i++){if(Number(input[i])<Number(input[i+B])){console['log']('Yes');}else{console['log']('No');}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n96 98 95 100 20", "Yes\nNo"], ["3 2\n1001 869120 1001", "No"], ["15 7\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9", "Yes\nYes\nNo\nYes\nYes\nNo\nYes\nYes"]], "original": "function Main(input) {\n  input = input.replace(/\\n/g, ' ');\n  input = input.split(\" \");\n  var A = Number(input[0]);\n  var B = Number(input[1]);\n  input = input.slice(2)\n  for(var i=0;i<input.length-B;i++){\n    if(Number(input[i])<Number(input[i+B])){\n      console.log(\"Yes\");\n    }else{\n      console.log(\"No\");\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 6, "deobfuscated": "function Main(input) {\n  input = input.replace(/\\n/g, \" \");\n  input = input.split(\" \");\n  var A = Number(input[0]);\n  var B = Number(input[1]);\n  input = input.slice(2);\n  for (var i = 0; i < input.length - B; i++) {\n    if (Number(input[i]) < Number(input[i + B])) {\n      console.log(\"Yes\");\n    } else {\n      console.log(\"No\");\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7738557286194137, "ngram_match_score": 0.4245782359387557, "weighted_ngram_match_score": 0.6708446785388988, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02607_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){let a=arg['trim']()['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);let N=a['length'];let ans=0x0;for(let i=0x0;i<N;i++){if((i+0x1)%0x2===0x0){continue;}if(a[i]%0x2===0x0){continue;}ans++;}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 3 4 5 7", "2"], ["15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14", "3"]], "original": "\"use strict\"\nfunction main(arg) {\n    let a = arg.trim().split(\"\\n\")[1].split(\" \").map(Number)\n    let N = a.length\n    let ans = 0\n    for (let i = 0; i < N; i++) {\n        if ((i+1) % 2 === 0) {\n            continue\n        }\n        if (a[i] % 2 === 0) {\n            continue\n        }\n        ans++\n        // console.log(i)\n    }\n    console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 7, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  let a = arg.trim().split(\"\\n\")[1].split(\" \").map(Number);\n  let N = a.length;\n  let ans = 0;\n  for (let i = 0; i < N; i++) {\n    if ((i + 1) % 2 === 0) {\n      continue;\n    }\n    if (a[i] % 2 === 0) {\n      continue;\n    }\n    ans++;\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7645540367752304, "ngram_match_score": 0.5277983599779509, "weighted_ngram_match_score": 0.5304177871229707, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02683_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['trim']()['split']('\\x0a');const [N,M,X]=splitN(lines[0x0]);const costs=[];const options=[...Array(N)['keys']()];select(options);function select(options,cost=0x0,aList=[]){for(let i=0x0;i<options['length'];i++){const _options=[...options],[s]=_options['splice'](i,0x1),[c,...a]=splitN(lines[s+0x1]),_cost=cost+c,_aList=a['map']((v,i)=>v+(aList[i]||0x0));if(_aList['every'](v=>v>=X)){costs['push'](_cost);continue;}select(_options,_cost,_aList);}}console['log'](costs['length']?Math['min'](...costs):-0x1);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));function splitN(s){return s['split']('\\x20')['map'](Number);}", "test_cases": [["3 3 10\n60 2 2 4\n70 8 7 9\n50 2 3 9", "120"], ["3 3 10\n100 3 1 4\n100 1 5 9\n100 2 6 5", "-1"], ["8 5 22\n100 3 7 5 3 1\n164 4 5 2 7 8\n334 7 2 7 2 9\n234 4 7 2 8 2\n541 5 4 3 3 6\n235 4 8 6 9 7\n394 3 6 1 6 2\n872 8 4 3 7 2", "1067"]], "original": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  const [N, M, X] = splitN(lines[0]);\n\n  const costs = [];\n  const options = [...Array(N).keys()];\n  select(options);\n\n  function select(options, cost = 0, aList = []) {\n    for (let i = 0; i < options.length; i++) {\n      const\n        _options = [...options],\n        [s] = _options.splice(i, 1),\n        [c, ...a] = splitN(lines[s+1]),\n        _cost = cost + c,\n        _aList = a.map((v, i) => v + (aList[i] || 0));\n      \n      if (_aList.every(v => v >= X)) {\n        costs.push(_cost);\n        continue;\n      }\n      select(_options, _cost, _aList);\n    }\n  }\n\n  console.log(costs.length ? Math.min(...costs) : -1);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n\nfunction splitN(s) {\n  return s.split(' ').map(Number);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 8, "deobfuscated": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  const [N, M, X] = splitN(lines[0]);\n  const costs = [];\n  const options = [...Array(N).keys()];\n  select(options);\n  function select(options, cost = 0, aList = []) {\n    for (let i = 0; i < options.length; i++) {\n      const _options = [...options];\n      const [s] = _options.splice(i, 1);\n      const [c, ...a] = splitN(lines[s + 1]);\n      const _cost = cost + c;\n      const _aList = a.map((v, i) => v + (aList[i] || 0));\n      if (_aList.every(v => v >= X)) {\n        costs.push(_cost);\n        continue;\n      }\n      select(_options, _cost, _aList);\n    }\n  }\n  console.log(costs.length ? Math.min(...costs) : -1);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction splitN(s) {\n  return s.split(\" \").map(Number);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9052945903760774, "ngram_match_score": 0.8150761681064923, "weighted_ngram_match_score": 0.8701021933978175, "syntax_match_score": 0.936, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0013152923252827131, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03007518796992481, "new_decrease_halstead_effort": -0.03007518796992481}}
{"filename": "p02691_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;var myOut=main();if(myOut!==undefined)console['log'](myOut);function main(){let n=+cin['shift']();let B={};let C={};cin['forEach']((v,i)=>{let x=+v;B[String(i+x)]=B[String(i+x)]+0x1||0x1;C[String(i-x)]=C[String(i-x)]+0x1||0x1;});let keys=Object['keys'](B);let ans=0x0;keys['forEach'](i=>{ans+=B[i]*C[i]||0x0;});return ans;}", "test_cases": [["6\n2 3 3 1 3 1", "3"], ["6\n5 2 4 2 8 8", "0"], ["32\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5", "22"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/), cid = 0;\n\nvar myOut = main();\nif (myOut !== undefined) console.log(myOut);\n\nfunction main() {\n    //console.log(cin);\n    //   cin = cin.map(i => +i);\n    let n = +cin.shift();\n    let B = {};\n    let C = {};\n    cin.forEach((v, i) => {\n        let x = +v;\n        B[String(i + x)] = B[String(i + x)] + 1 || 1;\n        C[String(i - x)] = C[String(i - x)] + 1 || 1;\n    });\n    //console.log({ B, C })\n    let keys = Object.keys(B);\n    let ans = 0;\n    keys.forEach(i => {\n        ans += (B[i] * C[i] || 0);\n        //console.log(i, B[i], C[i]);\n    });\n\n\n    return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 9, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(myOut);\n}\nfunction main() {\n  let n = +cin.shift();\n  let B = {};\n  let C = {};\n  cin.forEach((v, i) => {\n    let x = +v;\n    B[String(i + x)] = B[String(i + x)] + 1 || 1;\n    C[String(i - x)] = C[String(i - x)] + 1 || 1;\n  });\n  let keys = Object.keys(B);\n  let ans = 0;\n  keys.forEach(i => {\n    ans += B[i] * C[i] || 0;\n  });\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8303464976579601, "ngram_match_score": 0.7174320284567416, "weighted_ngram_match_score": 0.7326668334622276, "syntax_match_score": 0.8712871287128713, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002052920977742567, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.012658227848101333, "new_decrease_halstead_effort": -0.04389697423112482}}
{"filename": "p02696_1", "type": "JavaScript", "obfuscated": "const Main=input=>{ABN=input['split']('\\x20')['map'](item=>parseInt(item));console['log'](F(ABN[0x0],ABN[0x1],ABN[0x2]));};const F=(A,B,N)=>{max=0x0;count=0x0;count0=0x0;for(x=0x0;x<=N;x++){result=Math['floor'](A*x/B)-A*Math['floor'](x/B);if(result==0x0){count0++;}if(count0>0x2){break;}if(result>max){max=result;count=x;}}return max;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 7 4", "2"], ["11 10 9", "9"]], "original": "const Main = (input) => {\n    // array = input.split('\\n')\n    // ABN = array.shift().split(' ').map(item => parseInt(item))\n    ABN = input.split(' ').map(item => parseInt(item))\n    // array.pop()\n    // console.log(array)\n    // arrayInt = array.map(item => item.split(' ').map(value => parseInt(value)))\n    // console.log(arrayInt)\n    // arrayInt = array.map(item => parseInt(item))\n    console.log(F(ABN[0], ABN[1], ABN[2]))\n}\n\nconst F = (A, B, N) => {\n    max = 0\n    count = 0\n    count0 = 0\n    for (x = 0; x <= N; x++) {\n        result = Math.floor(A * x / B) - A * Math.floor(x / B)\n        if (result == 0) {\n            count0++\n        }\n        if (count0 > 2) {\n            break\n        }\n        // console.log(x, result, max)\n        if (result > max) {\n            max = result\n            count = x\n        }\n    }\n    return max\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 10, "deobfuscated": "const Main = input => {\n  ABN = input.split(\" \").map(item => parseInt(item));\n  console.log(F(ABN[0], ABN[1], ABN[2]));\n};\nconst F = (A, B, N) => {\n  max = 0;\n  count = 0;\n  count0 = 0;\n  for (x = 0; x <= N; x++) {\n    result = Math.floor(A * x / B) - A * Math.floor(x / B);\n    if (result == 0) {\n      count0++;\n    }\n    if (count0 > 2) {\n      break;\n    }\n    if (result > max) {\n      max = result;\n      count = x;\n    }\n  }\n  return max;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6449383369999739, "ngram_match_score": 0.3692682957150994, "weighted_ngram_match_score": 0.4045958620484537, "syntax_match_score": 0.9438202247191011, "dataflow_match_score": 0.8620689655172413}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02743_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');l=inp['shift']()['split']('\\x20');a=l['shift']()*0x1;b=l['shift']()*0x1;c=l['shift']()*0x1;console['log'](Math['sqrt'](a)+Math['sqrt'](b)<Math['sqrt'](c)?'Yes':'No');", "test_cases": [["2 3 9", "No"], ["2 3 10", "Yes"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\na = l.shift() * 1\nb = l.shift() * 1 \nc = l.shift() * 1 \nconsole.log(Math.sqrt(a)+Math.sqrt(b)<Math.sqrt(c) ? \"Yes\": \"No\")", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 11, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nl = inp.shift().split(\" \");\na = l.shift() * 1;\nb = l.shift() * 1;\nc = l.shift() * 1;\nconsole.log(Math.sqrt(a) + Math.sqrt(b) < Math.sqrt(c) ? \"Yes\" : \"No\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6372231143051575, "ngram_match_score": 0.24990261274203432, "weighted_ngram_match_score": 0.29898984447859595, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02924_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0],0xa);var count=0x0;if(n!=0x1){for(var i=0x1;i<n;i++){count+=i%(i+0x1);}}console['log']('%s',count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2", "1"], ["13", "78"], ["1", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0], 10);\n    var count = 0;\n    if (n != 1) {\n        for (var i = 1; i < n; i++ ) {\n            count += i % (i + 1);\n        }\n    }\n    //出力\n    console.log('%s',count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 12, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var count = 0;\n  if (n != 1) {\n    for (var i = 1; i < n; i++) {\n      count += i % (i + 1);\n    }\n  }\n  console.log(\"%s\", count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8403124625790026, "ngram_match_score": 0.6713629655600007, "weighted_ngram_match_score": 0.6898868847560098, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02975_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=input[0x0];var a=input[0x1]['split']('\\x20');var flag=!![];a=a['map'](x=>parseInt(x));for(var i=0x0;i<N-0x2;i++){var x=i===0x0?N-0x1:i-0x1;if((a[i+0x1]^a[x])!==a[i]){flag=![];break;}}var str=flag===!![]?'Yes':'No';console['log']('%s',str);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2 3", "Yes"], ["4\n1 2 4 8", "No"]], "original": "function Main(input) {\n  input = input.split('\\n')\n  var N = input[0]\n  var a = input[1].split(' ')\n  var flag = true\n  a = a.map(x => parseInt(x))\n\n  for (var i = 0; i < N - 2; i++) {\n    var x = i === 0 ? N - 1 : i - 1\n    if ((a[i + 1] ^ a[x]) !== a[i]) {\n      flag = false\n      break\n    }\n  }\n\n  var str = flag === true ? 'Yes' : 'No'\n\n  console.log('%s', str)\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 13, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0];\n  var a = input[1].split(\" \");\n  var flag = true;\n  a = a.map(x => parseInt(x));\n  for (var i = 0; i < N - 2; i++) {\n    var x = i === 0 ? N - 1 : i - 1;\n    if ((a[i + 1] ^ a[x]) !== a[i]) {\n      flag = false;\n      break;\n    }\n  }\n  var str = flag === true ? \"Yes\" : \"No\";\n  console.log(\"%s\", str);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8220883451782335, "ngram_match_score": 0.6445906865137165, "weighted_ngram_match_score": 0.6437626941992172, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009312821396998405, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0714285714285714, "new_decrease_halstead_effort": 0.21000211774789368}}
{"filename": "p02988_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=arg=>{let input=arg['trim']()['split']('\\x0a');let n=parseInt(input[0x0]);let pArr=input[0x1]['split']('\\x20')['map'](Number);let count=0x0;for(let i=0x1;i-0x1<n;i++){if(pArr[i-0x1]<pArr[i]&&pArr[i]<pArr[i+0x1]||pArr[i+0x1]<pArr[i]&&pArr[i]<pArr[i-0x1]){count+=0x1;}}console['log'](count);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 3 5 4 2", "2"], ["9\n9 6 3 2 5 8 7 4 1", "5"]], "original": "'use strict'\nconst Main = (arg) => {\n  let input = arg.trim().split('\\n');\n  let n = parseInt(input[0]);\n  let pArr = input[1].split(' ').map(Number);\n  // console.log({ n, pArr });\n  let count = 0;\n  for (let i = 1; i - 1 < n; i++) {\n    if ((pArr[i - 1] < pArr[i] && pArr[i] < pArr[i + 1])\n      || (pArr[i + 1] < pArr[i] && pArr[i] < pArr[i - 1])) {\n      count += 1;\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 14, "deobfuscated": "'use strict';\n\nconst Main = arg => {\n  let input = arg.trim().split(\"\\n\");\n  let n = parseInt(input[0]);\n  let pArr = input[1].split(\" \").map(Number);\n  let count = 0;\n  for (let i = 1; i - 1 < n; i++) {\n    if (pArr[i - 1] < pArr[i] && pArr[i] < pArr[i + 1] || pArr[i + 1] < pArr[i] && pArr[i] < pArr[i - 1]) {\n      count += 1;\n    }\n  }\n  console.log(count);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6259870660703966, "ngram_match_score": 0.6333703137233214, "weighted_ngram_match_score": 0.6425890719669766, "syntax_match_score": 0.8433734939759037, "dataflow_match_score": 0.38461538461538464}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03037_1", "type": "JavaScript", "obfuscated": "'use strict';function main(stdin){const input=stdin['split']('\\x0a');const N=input['shift']()['split']('\\x20')['map'](v=>parseInt(v,0xa))[0x0];const gates=input['map'](g=>g['split']('\\x20')['map'](v=>parseInt(v,0xa)));const cards=new Array(N)['fill'](!![]);gates['forEach'](g=>{for(let i=0x0;i<g[0x0]-0x1;++i){cards[i]=![];}for(let i=g[0x1];i<N;++i){cards[i]=![];}});console['log'](cards['filter'](c=>c)['length']);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 2\n1 3\n2 4", "2"], ["10 3\n3 6\n5 7\n6 9", "1"], ["100000 1\n1 100000", "100000"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  const N = input.shift().split(' ').map(v => parseInt(v, 10))[0];\n  const gates = input.map(g => g.split(' ').map(v => parseInt(v, 10)));\n  const cards = new Array(N).fill(true);\n\n  gates.forEach(g => {\n    for (let i = 0; i < g[0] - 1; ++i) {\n      cards[i] = false;\n    }\n\n    for (let i = g[1]; i < N; ++i) {\n      cards[i] = false;\n    }\n  });\n\n  console.log(cards.filter(c => c).length);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 15, "deobfuscated": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split(\"\\n\");\n  const N = input.shift().split(\" \").map(v => parseInt(v, 10))[0];\n  const gates = input.map(g => g.split(\" \").map(v => parseInt(v, 10)));\n  const cards = new Array(N).fill(true);\n  gates.forEach(g => {\n    for (let i = 0; i < g[0] - 1; ++i) {\n      cards[i] = false;\n    }\n    for (let i = g[1]; i < N; ++i) {\n      cards[i] = false;\n    }\n  });\n  console.log(cards.filter(c => c).length);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8680675754311168, "ngram_match_score": 0.8345723368173741, "weighted_ngram_match_score": 0.8414016686107969, "syntax_match_score": 1.0, "dataflow_match_score": 0.7962962962962963}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.012062180504862852, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04166666666666663, "new_decrease_halstead_effort": 0.293606634163294}}
{"filename": "p03073_1", "type": "JavaScript", "obfuscated": "function Main(input){var cnt=0x0;for(var i=0x0;i<input['length'];i++){if(parseInt(input[i])!=i%0x2)cnt++;}console['log'](parseInt(Math['min'](cnt,input['length']-cnt)));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["000", "1"], ["10010010", "3"], ["0", "0"]], "original": "function Main(input) {\n  var cnt = 0;\n  for(var i=0; i<input.length; i++){\n  \tif(parseInt(input[i])!=i%2)cnt++;\n  }\n  console.log(parseInt(Math.min(cnt, input.length-cnt)));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 16, "deobfuscated": "function Main(input) {\n  var cnt = 0;\n  for (var i = 0; i < input.length; i++) {\n    if (parseInt(input[i]) != i % 2) {\n      cnt++;\n    }\n  }\n  console.log(parseInt(Math.min(cnt, input.length - cnt)));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6338915660164475, "ngram_match_score": 0.2196760025169154, "weighted_ngram_match_score": 0.4492235948822076, "syntax_match_score": 0.8666666666666667, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03147_1", "type": "JavaScript", "obfuscated": "function search(h){var is_start=![];for(var i=0x0;i<h['length'];i++){if(is_start){if(h[i]==0x0){break;}h[i]-=0x1;}else{if(h[i]==0x0){continue;}is_start=!![];h[i]-=0x1;}}return h;}function main(arg){var h=arg['split']('\\x0a')[0x1]['split']('\\x20')['map'](e=>Number(e));var arr=[];var i=0x0;for(i=0x1;;i++){h=search(h);if(h[0x0]==0x0){var b=h['filter']((x,i,self)=>self['indexOf'](x)===i);if(b['length']==0x1){break;}}}console['log'](i);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 2 2 1", "2"], ["5\n3 1 2 3 1", "5"], ["8\n4 23 75 0 23 96 50 100", "221"]], "original": "function search(h) {\n    var is_start = false;\n    for (var i = 0; i < h.length; i++) {\n        if (is_start) {\n            if (h[i] == 0) {\n                break\n            }\n            h[i] -= 1\n\n        } else {\n            if (h[i] == 0) {\n                continue;\n            }\n\n            is_start = true;\n            h[i] -= 1\n        }\n    }\n    return h\n}\n\nfunction main(arg) {\n\tvar h = arg.split(\"\\n\")[1].split(\" \").map(e => Number(e))\n\tvar arr = []\n\n    var i = 0;\n\n    for (i = 1;;i++) {\n        h = search(h)\n        if (h[0] == 0) {\n            var b = h.filter((x, i, self) => self.indexOf(x) === i);\n            if (b.length == 1) {\n                break\n            }\n        }\n    }\n\t console.log(i)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 17, "deobfuscated": "function search(h) {\n  var is_start = false;\n  for (var i = 0; i < h.length; i++) {\n    if (is_start) {\n      if (h[i] == 0) {\n        break;\n      }\n      h[i] -= 1;\n    } else {\n      if (h[i] == 0) {\n        continue;\n      }\n      is_start = true;\n      h[i] -= 1;\n    }\n  }\n  return h;\n}\nfunction main(arg) {\n  var h = arg.split(\"\\n\")[1].split(\" \").map(e => Number(e));\n  var arr = [];\n  var i = 0;\n  for (i = 1;; i++) {\n    h = search(h);\n    if (h[0] == 0) {\n      var b = h.filter((x, i, self) => self.indexOf(x) === i);\n      if (b.length == 1) {\n        break;\n      }\n    }\n  }\n  console.log(i);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8673301114351271, "ngram_match_score": 0.7309940039546005, "weighted_ngram_match_score": 0.7383264417859077, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008582768071970115, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03816793893129766, "new_decrease_halstead_effort": 0.15895882434145414}}
{"filename": "p03240_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x0a');const N=parseInt(input[0x0]);let X=[];let Y=[];let Z=[];input['slice'](0x1,N+0x1)['forEach'](v=>{let tmp=v['split']('\\x20')['map'](j=>parseInt(j));X['push'](tmp[0x0]);Y['push'](tmp[0x1]);Z['push'](tmp[0x2]);});const MAX=0x64;for(let y=0x0;y<=MAX;y++){for(let x=0x0;x<=MAX;x++){let needH=-0x1;for(let i=0x0;i<N;i++){let tmp=Z[i]+Math['abs'](Y[i]-y)+Math['abs'](X[i]-x);if(needH===-0x1){needH=tmp;}else if(needH!==tmp){needH=-0x2;break;}}if(needH===-0x2)continue;console['log']('%d\\x20%d\\x20%d',x,y,needH);}}};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["4\n2 3 5\n2 1 5\n1 2 5\n3 2 5", "2 2 6"], ["2\n0 0 100\n1 1 98", "0 0 100"], ["3\n99 1 191\n100 1 192\n99 0 192", "100 0 193"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0])\n    let X = []\n    let Y = []\n    let Z = []\n    input.slice(1, N + 1).forEach(v => {\n        let tmp = v.split(' ').map(j => parseInt(j))\n        X.push(tmp[0])\n        Y.push(tmp[1])\n        Z.push(tmp[2])\n    })\n\n    const MAX = 100\n    for(let y = 0; y <= MAX; y++){\n        for(let x = 0; x <= MAX; x++){\n            let needH = -1\n            for(let i = 0; i < N; i++){\n                let tmp = Z[i] + Math.abs(Y[i] - y) + Math.abs(X[i] - x)\n                if(needH === -1){\n                    needH = tmp\n                }else if(needH !== tmp){\n                    needH = -2\n                    break\n                }\n            }\n            if(needH === -2) continue\n            console.log('%d %d %d', x, y, needH)\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 18, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0]);\n  let X = [];\n  let Y = [];\n  let Z = [];\n  input.slice(1, N + 1).forEach(v => {\n    let tmp = v.split(\" \").map(j => parseInt(j));\n    X.push(tmp[0]);\n    Y.push(tmp[1]);\n    Z.push(tmp[2]);\n  });\n  const MAX = 100;\n  for (let y = 0; y <= MAX; y++) {\n    for (let x = 0; x <= MAX; x++) {\n      let needH = -1;\n      for (let i = 0; i < N; i++) {\n        let tmp = Z[i] + Math.abs(Y[i] - y) + Math.abs(X[i] - x);\n        if (needH === -1) {\n          needH = tmp;\n        } else if (needH !== tmp) {\n          needH = -2;\n          break;\n        }\n      }\n      if (needH === -2) {\n        continue;\n      }\n      console.log(\"%d %d %d\", x, y, needH);\n    }\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5607937741760614, "ngram_match_score": 0.3406916172814768, "weighted_ngram_match_score": 0.38638330053189196, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 0.5930232558139535}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03324_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const D=parseInt(arg[0x0]['split']('\\x20')[0x0]);const N=parseInt(arg[0x0]['split']('\\x20')[0x1]);let temp=[...Array(D*0x2)]['fill'](0x0);let answer=parseInt(N+String(temp['join']('')));let plus=parseInt(0x1+String(temp['join']('')));console['log'](N!==0x64?answer:answer+plus);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["0 5", "5"], ["1 11", "1100"], ["2 85", "850000"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const D = parseInt(arg[0].split(\" \")[0]);\n    const N = parseInt(arg[0].split(\" \")[1]);\n    \n    let temp = [...Array(D * 2)].fill(0);\n    let answer = parseInt(N + String(temp.join(\"\")));\n    let plus  = parseInt(1 + String(temp.join(\"\")));\n    \n    console.log(N !== 100 ? answer : answer + plus);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 19, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const D = parseInt(arg[0].split(\" \")[0]);\n  const N = parseInt(arg[0].split(\" \")[1]);\n  let temp = [...Array(D * 2)].fill(0);\n  let answer = parseInt(N + String(temp.join(\"\")));\n  let plus = parseInt(1 + String(temp.join(\"\")));\n  console.log(N !== 100 ? answer : answer + plus);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.951396934994551, "ngram_match_score": 0.8989354241697113, "weighted_ngram_match_score": 0.9066523158084928, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02289_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};line=require('fs')['readFileSync'](config['input'],'ascii')['split'](config['newline']);S=[];for(i in line){ary=line[i]['split']('\\x20');if(ary[0x0]==='insert')S['push'](parseInt(ary[0x1],0xa));else if(ary[0x0]==='extract'){S['sort'](function(a,b){return a-b;});console['log'](S['pop']());}}", "test_cases": [["insert 8\ninsert 2\nextract\ninsert 10\nextract\ninsert 11\nextract\nextract\nend", "8\n10\n11\n2"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline);\n\nS = [];\n\nfor (i in line) {\n  ary = line[i].split(' ');\n  if (ary[0] === 'insert') S.push(parseInt(ary[1], 10));\n  else if (ary[0] === 'extract') {\n    S.sort(function (a, b) { return a - b; });\n    console.log(S.pop());\n  }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 20, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nline = require(\"fs\").readFileSync(config.input, \"ascii\").split(config.newline);\nS = [];\nfor (i in line) {\n  ary = line[i].split(\" \");\n  if (ary[0] === \"insert\") {\n    S.push(parseInt(ary[1], 10));\n  } else if (ary[0] === \"extract\") {\n    S.sort(function (a, b) {\n      return a - b;\n    });\n    console.log(S.pop());\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7194290923771431, "ngram_match_score": 0.4566742428134612, "weighted_ngram_match_score": 0.4790131411878648, "syntax_match_score": 0.9420289855072463, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02406_1", "type": "JavaScript", "obfuscated": "var readable=process['stdin'];readable['resume']();readable['setEncoding']('utf-8');readable['on']('data',function(chunk){var n=parseInt(chunk);var i=0x1;var output=[];do{var x=i;if(0x0==x%0x3){output['push']('\\x20'+i);}else{do{if(0x3==x%0xa){output['push']('\\x20'+i);break;}else{x/=0xa;}}while(x);}}while(++i<=n);console['log'](output['join'](''));});", "test_cases": [["30", "3 6 9 12 13 15 18 21 23 24 27 30"]], "original": "var readable = process.stdin;\nreadable.resume();\nreadable.setEncoding( 'utf-8' );\nreadable.on( 'data', function( chunk ) {\n  var n = parseInt( chunk );\n  var i = 1;\n  var output = [];\n  do{\n    var x = i;\n    if( 0 == x%3 ) {\n      output.push( \" \"+i );\n    } else {\n      do {\n        if( 3 == x%10 ) {\n          output.push( \" \"+i );\n          break;\n        } else {\n          x /= 10;\n        }\n      } while( x );\n    }\n  } while( ++i <= n );\n  \n  console.log( output.join( '' ) );\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 21, "deobfuscated": "var readable = process.stdin;\nreadable.resume();\nreadable.setEncoding(\"utf-8\");\nreadable.on(\"data\", function (chunk) {\n  var n = parseInt(chunk);\n  var i = 1;\n  var output = [];\n  do {\n    var x = i;\n    if (x % 3 == 0) {\n      output.push(\" \" + i);\n    } else {\n      do {\n        if (x % 10 == 3) {\n          output.push(\" \" + i);\n          break;\n        } else {\n          x /= 10;\n        }\n      } while (x);\n    }\n  } while (++i <= n);\n  console.log(output.join(\"\"));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6131761099473964, "ngram_match_score": 0.3337859986421467, "weighted_ngram_match_score": 0.35268467491367245, "syntax_match_score": 0.7662337662337663, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02546_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input=input[0x0];const last=input['slice'](-0x1);const sufix=last==='s'?'es':'s';console['log'](''+input+sufix);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["apple", "apples"], ["bus", "buses"], ["box", "boxs"]], "original": "function Main(input) {\n    // 最後の文字を取得\n    input = input.split(\"\\n\");\n    input = input[0];\n    const last = input.slice(-1) ;\n    const sufix = last === \"s\" ? \"es\" : \"s\";\n\t//出力\n\tconsole.log(`${input}${sufix}`);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 22, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input = input[0];\n  const last = input.slice(-1);\n  const sufix = last === \"s\" ? \"es\" : \"s\";\n  console.log(\"\" + input + sufix);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7463560697674876, "ngram_match_score": 0.5898466143484524, "weighted_ngram_match_score": 0.6001231192669527, "syntax_match_score": 0.7954545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02642_1", "type": "JavaScript", "obfuscated": "function main(input){var a=input[0x1]['trim']()['split']('\\x20')['map'](e=>parseInt(e,0xa));var a_max=0xa**0x6+0x1;var dp=new Array(a_max+0x1)['fill'](0x0);for(var i of a){dp[i]++;}for(var i=0x1;i<=a_max;i++){if(dp[i]===0x0){continue;}for(var j=i+i;j<=a_max;j+=i){if(dp[j]!==0x0){dp[j]=0x0;}}}console['log'](dp['filter'](function(x){return x==0x1;})['length']);}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["5\n24 11 8 3 16", "3"], ["4\n5 5 5 5", "0"], ["10\n33 18 45 28 8 19 89 86 2 4", "5"]], "original": "function main(input) {\n  var a = input[1].trim().split(\" \").map(e => parseInt(e, 10));\n  var a_max = 10**6+1;\n  var dp = new Array(a_max+1).fill(0);\n  for(var i of a){\n    dp[i]++;\n  }\n \n  for(var i=1;i<=a_max;i++){\n    if(dp[i]===0){ \n      continue;\n    }\n    for(var j=i+i;j<=a_max;j+=i){\n      if(dp[j]!==0){\n        dp[j]=0;\n      }\n    }\n  }\n  console.log(dp.filter(function(x){return x==1}).length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 23, "deobfuscated": "function main(input) {\n  var a = input[1].trim().split(\" \").map(e => parseInt(e, 10));\n  var a_max = 1000001;\n  var dp = new Array(a_max + 1).fill(0);\n  for (var i of a) {\n    dp[i]++;\n  }\n  for (var i = 1; i <= a_max; i++) {\n    if (dp[i] === 0) {\n      continue;\n    }\n    for (var j = i + i; j <= a_max; j += i) {\n      if (dp[j] !== 0) {\n        dp[j] = 0;\n      }\n    }\n  }\n  console.log(dp.filter(function (x) {\n    return x == 1;\n  }).length);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6347154663697901, "ngram_match_score": 0.2213327704323052, "weighted_ngram_match_score": 0.4521940435004636, "syntax_match_score": 0.9278350515463918, "dataflow_match_score": 0.9375}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0037223270238377903, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03508771929824561, "new_decrease_halstead_effort": 0.09898661323775504}}
{"filename": "p02646_1", "type": "JavaScript", "obfuscated": "function Main(input){const arr=input['trim']()['split']('\\x0a');const AV=arr[0x0]['split']('\\x20')['map'](Number);const BW=arr[0x1]['split']('\\x20')['map'](Number);const T=Number(arr[0x2]);if(Math['abs'](AV[0x0]-BW[0x0])<T*(AV[0x1]-BW[0x1])){console['log']('YES');}else{console['log']('NO');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 2\n3 1\n3", "YES"], ["1 2\n3 2\n3", "NO"], ["1 2\n3 3\n3", "NO"]], "original": "function Main(input){\n    const arr = input.trim().split(\"\\n\");\n    const AV = arr[0].split(\" \").map(Number);\n    const BW = arr[1].split(\" \").map(Number);\n    const T  = Number(arr[2]);\n    if(Math.abs(AV[0]-BW[0]) < T*(AV[1] - BW[1])){\n        console.log(\"YES\");\n    } else{\n        console.log(\"NO\");\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 24, "deobfuscated": "function Main(input) {\n  const arr = input.trim().split(\"\\n\");\n  const AV = arr[0].split(\" \").map(Number);\n  const BW = arr[1].split(\" \").map(Number);\n  const T = Number(arr[2]);\n  if (Math.abs(AV[0] - BW[0]) < T * (AV[1] - BW[1])) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8042074095102195, "ngram_match_score": 0.5349002436285021, "weighted_ngram_match_score": 0.6819293944123761, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02687_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{if(input==='ABC'){console['log']('ARC');}else{console['log']('ABC');}};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["ABC", "ARC"]], "original": "\"use strict\";\nconst Main = input => {\n    if(input === \"ABC\") {\n        console.log(\"ARC\");\n    } else {\n        console.log(\"ABC\");\n    }\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 25, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  if (input === \"ABC\") {\n    console.log(\"ARC\");\n  } else {\n    console.log(\"ABC\");\n  }\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8129393037195535, "ngram_match_score": 0.6052665103345164, "weighted_ngram_match_score": 0.6464907045436976, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02689_1", "type": "JavaScript", "obfuscated": "'use strict';const inputs=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');inputs['shift']();const heights=inputs['shift']()['split']('\\x20')['map'](v=>parseInt(v,0xa));const towers=new Array(heights['length'])['fill']()['map'](_=>new Array());inputs['forEach'](v=>{const splited=v['split']('\\x20')['map'](w=>parseInt(w,0xa)-0x1);towers[splited[0x0]]['push'](splited[0x1]);towers[splited[0x1]]['push'](splited[0x0]);});let result=0x0;towers['forEach']((t,i)=>{let good=!![];if(t['length']){t['forEach'](t2=>{if(heights[i]<=heights[t2]){good=![];}});}if(good){++result;}});console['log'](result);", "test_cases": [["4 3\n1 2 3 4\n1 3\n2 3\n2 4", "2"], ["6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6", "3"]], "original": "'use strict';\n\nconst inputs = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n');\ninputs.shift();\n\nconst heights = inputs.shift().split(' ').map(v => parseInt(v, 10));\nconst towers = new Array(heights.length).fill().map(_ => new Array());\n\ninputs.forEach(v => {\n  const splited = v.split(' ').map(w => parseInt(w, 10) - 1);\n\n  towers[splited[0]].push(splited[1]);\n  towers[splited[1]].push(splited[0]);\n});\n\nlet result = 0;\ntowers.forEach((t, i) => {\n  let good = true;\n\n  if (t.length) {\n    t.forEach(t2 => {\n      if (heights[i] <= heights[t2]) {\n        good = false;\n      }\n    });\n  }\n\n  if (good) {\n    ++result;\n  }\n});\nconsole.log(result);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 26, "deobfuscated": "'use strict';\n\nconst inputs = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\ninputs.shift();\nconst heights = inputs.shift().split(\" \").map(v => parseInt(v, 10));\nconst towers = new Array(heights.length).fill().map(_ => new Array());\ninputs.forEach(v => {\n  const splited = v.split(\" \").map(w => parseInt(w, 10) - 1);\n  towers[splited[0]].push(splited[1]);\n  towers[splited[1]].push(splited[0]);\n});\nlet result = 0;\ntowers.forEach((t, i) => {\n  let good = true;\n  if (t.length) {\n    t.forEach(t2 => {\n      if (heights[i] <= heights[t2]) {\n        good = false;\n      }\n    });\n  }\n  if (good) {\n    ++result;\n  }\n});\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8892072780420539, "ngram_match_score": 0.8570537426616118, "weighted_ngram_match_score": 0.8637097957361122, "syntax_match_score": 1.0, "dataflow_match_score": 0.8360655737704918}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02766_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){let line=input['split'](/\\r?\\n/g);let arr=line[0x0]['split']('\\x20');const N=parseInt(arr[0x0]),K=parseInt(arr[0x1]);let cnt=0x1;while(K**cnt<N)cnt++;console['log'](cnt);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["11 2", "4"], ["1010101 10", "7"], ["314159265 3", "18"]], "original": "\"use strict\";\nfunction main(input) {\n    let line = input.split(/\\r?\\n/g);\n    let arr = line[0].split(\" \");\n    const N = parseInt(arr[0]), K = parseInt(arr[1]);\n    let cnt = 1;\n    while (K ** cnt < N) cnt++;\n    console.log(cnt);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 27, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  let line = input.split(/\\r?\\n/g);\n  let arr = line[0].split(\" \");\n  const N = parseInt(arr[0]);\n  const K = parseInt(arr[1]);\n  let cnt = 1;\n  while (K ** cnt < N) {\n    cnt++;\n  }\n  console.log(cnt);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8373349187346281, "ngram_match_score": 0.6878626650756018, "weighted_ngram_match_score": 0.7595162255491851, "syntax_match_score": 0.9019607843137255, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005974535288038041, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.015625, "new_decrease_halstead_effort": -0.015624999999999778}}
{"filename": "p02778_1", "type": "JavaScript", "obfuscated": "function main(input){var x='x';var output=Array(input['length'])['fill'](x);console['log'](output['join'](''));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["sardine", "xxxxxxx"], ["xxxx", "xxxx"], ["gone", "xxxx"]], "original": "function main(input) \n{\n    var x = \"x\";\n    var output = Array(input.length).fill(x);\n    console.log(output.join(\"\"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 28, "deobfuscated": "function main(input) {\n  var x = \"x\";\n  var output = Array(input.length).fill(x);\n  console.log(output.join(\"\"));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9289125095509694, "ngram_match_score": 0.8507331335123524, "weighted_ngram_match_score": 0.8649169046915252, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03000_1", "type": "JavaScript", "obfuscated": "function Main(input){lines=input['split']('\\x0a');firstLine=lines[0x0]['split']('\\x20');N=+firstLine[0x0];X=+firstLine[0x1];secondLine=lines[0x1]['split']('\\x20');distanceTravelled=0x0;numBounces=0x1;for(i=0x0;i<N;i++){distanceTravelled+=+secondLine[i];if(distanceTravelled<=X){numBounces+=0x1;}}console['log'](numBounces);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 6\n3 4 5", "2"], ["4 9\n3 3 3 3", "4"]], "original": "function Main(input) {\n  //入力から変数を全て定義\n  lines = input.split(\"\\n\");\n  firstLine = lines[0].split(\" \");\n  N = +firstLine[0];\n  X = +firstLine[1];\n  secondLine = lines[1].split(\" \");\n  \n  //跳ねた距離がX以下かどうか判定するための変数\n  distanceTravelled = 0;\n  //跳ねた回数を記録するための変数（初期値が１なのは、最初に０地点でバウンスするのを先に含めているから）\n  numBounces= 1;\n  \n  //distanceTravelledに毎回バウンスする距離を足していき、\n  //もし跳ねた先がまだX以下の距離ならカウントを足す。これをN回やる。\n  for(i=0;i<N; i++){\n    distanceTravelled += +secondLine[i];\n    \n    if(distanceTravelled <= X){\n      numBounces += 1;\n    }\n  }\n  \n  console.log(numBounces);\n  \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 29, "deobfuscated": "function Main(input) {\n  lines = input.split(\"\\n\");\n  firstLine = lines[0].split(\" \");\n  N = +firstLine[0];\n  X = +firstLine[1];\n  secondLine = lines[1].split(\" \");\n  distanceTravelled = 0;\n  numBounces = 1;\n  for (i = 0; i < N; i++) {\n    distanceTravelled += +secondLine[i];\n    if (distanceTravelled <= X) {\n      numBounces += 1;\n    }\n  }\n  console.log(numBounces);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7859570047971942, "ngram_match_score": 0.5406153152045351, "weighted_ngram_match_score": 0.603212703984242, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03038_1", "type": "JavaScript", "obfuscated": "var lines=[];var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',x=>{lines['push'](x);});var A;rl['on']('close',()=>{var N=Number(lines[0x0]['split']('\\x20')[0x0]);var M=Number(lines[0x0]['split']('\\x20')[0x1]);A=lines[0x1]['split']('\\x20')['map'](i=>Number(i));lines['shift']();lines['shift']();var BC=lines['map'](i=>i['split']('\\x20')['map'](i=>Number(i)));A['sort']((a,b)=>a-b);BC['sort']((a,b)=>b[0x1]-a[0x1]);var k=0x0;var ans=0x0;for(var i=0x0;i<M;i++){var b=BC[i][0x0];var c=BC[i][0x1];var cnt=0x1;for(var j=k;j<N;j++){if(b<cnt){k=j;break;}if(A[j]<c){ans+=c;}else{for(var x=j;x<N;x++){ans+=A[x];}console['log'](ans);return 0x0;}cnt++;}}for(var x=j;x<N;x++){ans+=A[x];}console['log'](ans);});", "test_cases": [["3 2\n5 1 4\n2 3\n1 5", "14"], ["10 3\n1 8 5 7 100 4 52 33 13 5\n3 10\n4 30\n1 4", "338"], ["3 2\n100 100 100\n3 99\n3 99", "300"], ["11 3\n1 1 1 1 1 1 1 1 1 1 1\n3 1000000000\n4 1000000000\n3 1000000000", "10000000001"]], "original": "var lines = [];\n\nvar readline = require('readline')\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\n\nrl.on('line', (x) => {\n    lines.push(x)\n});\n\nvar A;\nrl.on('close', () => {\n    var N = Number(lines[0].split(\" \")[0])\n    var M = Number(lines[0].split(\" \")[1])\n    A = lines[1].split(\" \").map(i => Number(i));\n\n    lines.shift(); lines.shift()\n\n    var BC = lines.map(i => i.split(\" \").map(i => Number(i)));\n\n    A.sort((a, b) => a - b);\n    BC.sort((a, b) => b[1] - a[1]);\n\n    var k = 0; var ans = 0;\n    for (var i = 0; i < M; i++) {\n        var b = BC[i][0]; var c = BC[i][1];\n        var cnt = 1;\n\n        for (var j = k; j < N; j++) {\n            if (b < cnt) { k = j; break; }\n\n            if (A[j] < c) { ans += c; }\n            else { for (var x = j; x < N; x++) { ans += A[x] } console.log(ans); return (0) }\n\n            cnt++;\n        }\n    }\n    for (var x = j; x < N; x++) { ans += A[x] } console.log(ans);\n\n});\n\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 30, "deobfuscated": "var lines = [];\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", x => {\n  lines.push(x);\n});\nvar A;\nrl.on(\"close\", () => {\n  var N = Number(lines[0].split(\" \")[0]);\n  var M = Number(lines[0].split(\" \")[1]);\n  A = lines[1].split(\" \").map(i => Number(i));\n  lines.shift();\n  lines.shift();\n  var BC = lines.map(i => i.split(\" \").map(i => Number(i)));\n  A.sort((a, b) => a - b);\n  BC.sort((a, b) => b[1] - a[1]);\n  var k = 0;\n  var ans = 0;\n  for (var i = 0; i < M; i++) {\n    var b = BC[i][0];\n    var c = BC[i][1];\n    var cnt = 1;\n    for (var j = k; j < N; j++) {\n      if (b < cnt) {\n        k = j;\n        break;\n      }\n      if (A[j] < c) {\n        ans += c;\n      } else {\n        for (var x = j; x < N; x++) {\n          ans += A[x];\n        }\n        console.log(ans);\n        return 0;\n      }\n      cnt++;\n    }\n  }\n  for (var x = j; x < N; x++) {\n    ans += A[x];\n  }\n  console.log(ans);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8897300711453208, "ngram_match_score": 0.8294888672165255, "weighted_ngram_match_score": 0.8346945752594942, "syntax_match_score": 0.8947368421052632, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03072_1", "type": "JavaScript", "obfuscated": "input=require('fs')['readFileSync']('/dev/stdin','utf8');lines=input['split']('\\x0a');N=lines['shift']()*0x1;A=lines['shift']()['split']('\\x20');h=0x0;cnt=0x0;for(i=0x0;i<N;i++){if(h<=A[i]){cnt++;h=A[i];}}console['log'](cnt);", "test_cases": [["4\n6 5 6 8", "3"], ["5\n4 5 3 5 4", "3"], ["5\n9 5 6 8 4", "1"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nA = lines.shift().split(' ')\n\nh = 0\ncnt = 0\nfor (i=0; i<N; i++) {\n    if (h<=A[i]) {\n        cnt++\n        h = A[i]\n    }\n}\nconsole.log(cnt)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 31, "deobfuscated": "input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlines = input.split(\"\\n\");\nN = lines.shift() * 1;\nA = lines.shift().split(\" \");\nh = 0;\ncnt = 0;\nfor (i = 0; i < N; i++) {\n  if (h <= A[i]) {\n    cnt++;\n    h = A[i];\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5711048494460504, "ngram_match_score": 0.129305555894931, "weighted_ngram_match_score": 0.155113841889271, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03109_1", "type": "JavaScript", "obfuscated": "let lines=[];let reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){lines['push'](line);});reader['on']('close',function(){if(lines['length']===0x1){let date_int=lines[0x0]['replace'](/\\//g,'');if(date_int<=0x13414de){console['log']('Heisei');return;}}console['log']('TBD');});", "test_cases": [["2019/04/30", "Heisei"], ["2019/11/01", "TBD"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nreader.on('line', function (line) {\n    lines.push(line);\n});\n\nreader.on('close', function () {\n    if (lines.length === 1) {\n        let date_int = lines[0].replace(/\\//g, '');\n        if (date_int <= 20190430) {\n            console.log('Heisei');\n            return;\n        }\n    }\n    console.log('TBD');\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 32, "deobfuscated": "let lines = [];\nlet reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  lines.push(line);\n});\nreader.on(\"close\", function () {\n  if (lines.length === 1) {\n    let date_int = lines[0].replace(/\\//g, \"\");\n    if (date_int <= 20190430) {\n      console.log(\"Heisei\");\n      return;\n    }\n  }\n  console.log(\"TBD\");\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8156728322917401, "ngram_match_score": 0.643755800481342, "weighted_ngram_match_score": 0.6534182873063084, "syntax_match_score": 1.0, "dataflow_match_score": 0.9655172413793104}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03127_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));function gcd(a,b){return b?gcd(b,a%b):a;}console['log'](main());function main(){var n=o['a']();var a=o['l']();var ans=a[0x0];for(var i=0x1;i<n;i++){ans=gcd(ans,a[i]);}return ans;}", "test_cases": [["4\n2 10 8 40", "2"], ["4\n5 13 8 1000000000", "1"], ["3\n1000000000 1000000000 1000000000", "1000000000"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\nfunction gcd(a,b){return b?gcd(b,a%b):a;}\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var a = o.l();\n  var ans = a[0];\n  for(var i = 1; i < n; i++){\n    ans = gcd(ans, a[i]);\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 33, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction gcd(a, b) {\n  if (b) {\n    return gcd(b, a % b);\n  } else {\n    return a;\n  }\n}\nconsole.log(main());\nfunction main() {\n  var n = o.a();\n  var a = o.l();\n  var ans = a[0];\n  for (var i = 1; i < n; i++) {\n    ans = gcd(ans, a[i]);\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5915400981595904, "ngram_match_score": 0.10688228519787027, "weighted_ngram_match_score": 0.43520403336641716, "syntax_match_score": 0.8240740740740741, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.3846153846153846, "length_score": -0.3846153846153846, "increase_maintainability": -0.051085496345375736, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.042553191489361764, "new_decrease_halstead_effort": -0.08561679236609798}}
{"filename": "p03200_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const inputs=input['split']('\\x0a')['filter'](x=>x!=='');const s=inputs[0x0];const result=s['split']('')['map']((input,index)=>input==='W'?index:-0x1)['filter'](x=>x!==-0x1)['reduce']((acc,cur,index)=>acc+cur-index,0x0);console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["BBW", "2"], ["BWBWBW", "6"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n  const s = inputs[0];\n\n  const result = s\n    .split(\"\")\n    .map((input, index) => (input === \"W\" ? index : -1))\n    .filter(x => x !== -1)\n    .reduce((acc, cur, index) => acc + cur - index, 0);\n\n  console.log(result);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 34, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n  const s = inputs[0];\n  const result = s.split(\"\").map((input, index) => input === \"W\" ? index : -1).filter(x => x !== -1).reduce((acc, cur, index) => acc + cur - index, 0);\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.789109907214963, "ngram_match_score": 0.6731494594733615, "weighted_ngram_match_score": 0.6832901693864906, "syntax_match_score": 0.8, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03244_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let lines=input['split']('\\x0a');let N=lines['shift']()-0x0;let V=lines['shift']()['split'](/\\s/)['map'](v=>v-0x0);let ans=0x0;for(let n=0x0;n<N-0x2;n++){if(V[n]==V[n+0x1])ans+=0x1;if(V[n]!=V[n+0x2])ans+=0x1;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n3 1 3 2", "1"], ["6\n105 119 105 119 105 119", "0"], ["4\n1 1 1 1", "2"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let N = lines.shift() - 0;\n    let V = lines.shift().split(/\\s/).map((v) => v - 0);\n    let ans = 0;\n    for (let n = 0; n < N - 2; n++) {\n        if (V[n] == V[n+1]) ans += 1;\n        if (V[n] != V[n+2]) ans += 1;\n    }\n    console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 35, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let N = lines.shift() - 0;\n  let V = lines.shift().split(/\\s/).map(v => v - 0);\n  let ans = 0;\n  for (let n = 0; n < N - 2; n++) {\n    if (V[n] == V[n + 1]) {\n      ans += 1;\n    }\n    if (V[n] != V[n + 2]) {\n      ans += 1;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.828754483932314, "ngram_match_score": 0.6867090495550191, "weighted_ngram_match_score": 0.7904710483363991, "syntax_match_score": 0.8378378378378378, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03250_1", "type": "JavaScript", "obfuscated": "function main(input){abc=input['split']('\\x20');abc=abc['sort']();a='';a+=abc[0x2];a+=abc[0x1];a=parseInt(a,0xa);b=parseInt(abc[0x0],0xa);console['log'](a+b);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 5 2", "53"], ["9 9 9", "108"], ["6 6 7", "82"]], "original": "\nfunction main(input){\n    abc=input.split(' ');\n    abc=abc.sort()\n    a=''\n    a+=abc[2]\n    a+=abc[1]\n    a=parseInt(a,10)\n    b=parseInt(abc[0],10)\n    console.log(a+b)\n    \n\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 36, "deobfuscated": "function main(input) {\n  abc = input.split(\" \");\n  abc = abc.sort();\n  a = \"\";\n  a += abc[2];\n  a += abc[1];\n  a = parseInt(a, 10);\n  b = parseInt(abc[0], 10);\n  console.log(a + b);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5069278673450771, "ngram_match_score": 0.0067177027389942, "weighted_ngram_match_score": 0.020993766641314134, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03274_1", "type": "JavaScript", "obfuscated": "function get_run_length(min,max){var result=0x0;if(max>Math['abs'](min)){result=Math['abs'](min*0x2)+max;}else{result=Math['abs'](min)+max*0x2;}if(min>=0x0){result=max;}if(max<=0x0){result=Math['abs'](min);}return result;}function main(input){const lines=input['split']('\\x0a');const N=parseInt(lines[0x0]['split']('\\x20')[0x0]);const K=parseInt(lines[0x0]['split']('\\x20')[0x1]);const Xs=lines[0x1]['split']('\\x20')['map'](x=>parseInt(x));var result=0x989680;for(var i=0x0;i<N-K+0x1;i++){var min=Xs[i];var max=Xs[i+K-0x1];var tmp=get_run_length(min,max);result=Math['min'](tmp,result);}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n-30 -10 10 20 50", "40"], ["3 2\n10 20 30", "20"], ["1 1\n0", "0"], ["8 5\n-9 -7 -4 -3 1 2 3 4", "10"]], "original": "function get_run_length(min, max){\n  var result = 0;\n\n  if(max > Math.abs(min)){\n    result = Math.abs(min*2) + max;\n  }else{\n    result = Math.abs(min) + max*2;\n  }\n\n  if(min>=0){result = max;}\n  if(max<=0){result = Math.abs(min);}\n\n  return result;\n}\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = parseInt(lines[0].split(' ')[0]);\n  const K = parseInt(lines[0].split(' ')[1]);\n  const Xs = lines[1].split(' ').map(x => parseInt(x))\n\n  var result = 1e7;\n  for(var i=0;i<N-K+1;i++){\n    var min = Xs[i];\n    var max = Xs[i+K-1];\n\n   var tmp = get_run_length(min, max);\n    result = Math.min(tmp, result);\n    //console.log([i,result,min,max]);\n  }\n\n  console.log(result);\n}\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 37, "deobfuscated": "function get_run_length(min, max) {\n  var result = 0;\n  if (max > Math.abs(min)) {\n    result = Math.abs(min * 2) + max;\n  } else {\n    result = Math.abs(min) + max * 2;\n  }\n  if (min >= 0) {\n    result = max;\n  }\n  if (max <= 0) {\n    result = Math.abs(min);\n  }\n  return result;\n}\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const N = parseInt(lines[0].split(\" \")[0]);\n  const K = parseInt(lines[0].split(\" \")[1]);\n  const Xs = lines[1].split(\" \").map(x => parseInt(x));\n  var result = 10000000;\n  for (var i = 0; i < N - K + 1; i++) {\n    var min = Xs[i];\n    var max = Xs[i + K - 1];\n    var tmp = get_run_length(min, max);\n    result = Math.min(tmp, result);\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6300397749994204, "ngram_match_score": 0.24196594280336833, "weighted_ngram_match_score": 0.3656931571943132, "syntax_match_score": 1.0, "dataflow_match_score": 0.9125}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005893816733912871, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.027858620950928614}}
{"filename": "p03338_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const S=arg[0x1]['split']('');const charset=new Set(S);const chars=[...charset];let answer=0x0;for(let i in S){const first=S['slice'](0x0,i);const last=S['slice'](i,S['length']);let temp=0x0;for(let j in chars){if(first['indexOf'](chars[j])!==-0x1&&last['indexOf'](chars[j])!==-0x1){temp++;}}answer=Math['max'](answer,temp);}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\naabbca", "2"], ["10\naaaaaaaaaa", "1"], ["45\ntgxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir", "9"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const S = arg[1].split(\"\");\n    \n    const charset = new Set(S);\n    const chars = [...charset];\n    \n    let answer = 0;\n    \n    for(let i in S) {\n        const first = S.slice(0, i);\n        const last  = S.slice(i, S.length);\n        \n        let temp = 0;\n        \n        for(let j in chars) {\n            if(first.indexOf(chars[j]) !== -1 && last.indexOf(chars[j]) !== -1) {\n                temp++;\n            } \n        }\n        \n        // console.log(first);\n        // console.log(last);\n        // console.log(\"---\");\n        answer = Math.max(answer, temp);\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 38, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const S = arg[1].split(\"\");\n  const charset = new Set(S);\n  const chars = [...charset];\n  let answer = 0;\n  for (let i in S) {\n    const first = S.slice(0, i);\n    const last = S.slice(i, S.length);\n    let temp = 0;\n    for (let j in chars) {\n      if (first.indexOf(chars[j]) !== -1 && last.indexOf(chars[j]) !== -1) {\n        temp++;\n      }\n    }\n    answer = Math.max(answer, temp);\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8791708071279445, "ngram_match_score": 0.751548590160101, "weighted_ngram_match_score": 0.7651346383516769, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03495_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){s=s['split']('\\x0a');const K=Number(s[0x0]['split']('\\x20')[0x1]);const balls=s[0x1]['split']('\\x20')['map'](el=>Number(el));const countBucket=[...Array(0x30d41)]['fill'](0x0);for(const num of balls){countBucket[num]+=0x1;}countBucket['sort']((a,b)=>b-a);const answer=countBucket['slice'](K)['reduce']((a,b)=>a+b);console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2\n1 1 2 2 5", "1"], ["4 4\n1 1 2 2", "0"], ["10 3\n5 1 3 2 4 1 1 2 3 4", "3"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n  const K = Number(s[0].split(' ')[1]);\n  const balls = s[1].split(' ').map(el => Number(el));\n  const countBucket = [...Array(200001)].fill(0);\n\n  for (const num of balls) {\n    countBucket[num] += 1;\n  }\n\n  countBucket.sort((a, b) => b - a);\n\n  const answer = countBucket.slice(K).reduce((a, b) => a + b);\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 39, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  s = s.split(\"\\n\");\n  const K = Number(s[0].split(\" \")[1]);\n  const balls = s[1].split(\" \").map(el => Number(el));\n  const countBucket = [...Array(200001)].fill(0);\n  for (const num of balls) {\n    countBucket[num] += 1;\n  }\n  countBucket.sort((a, b) => b - a);\n  const answer = countBucket.slice(K).reduce((a, b) => a + b);\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8622009708798842, "ngram_match_score": 0.7761534049947284, "weighted_ngram_match_score": 0.7837615896359195, "syntax_match_score": 1.0, "dataflow_match_score": 0.8888888888888888}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03962_1", "type": "JavaScript", "obfuscated": "'use strict';const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('');if(lines[0x0]===lines[0x1]&&lines[0x1]===lines[0x2]){console['log'](0x1);}if(lines[0x0]===lines[0x1]&&lines[0x1]!==lines[0x2]){console['log'](0x2);}if(lines[0x0]===lines[0x2]&&lines[0x0]!==lines[0x1]){console['log'](0x2);}if(lines[0x1]===lines[0x2]&&lines[0x0]!==lines[0x1]){console['log'](0x2);}if(lines[0x0]!==lines[0x1]&&lines[0x1]!==lines[0x2]&&lines[0x2]!==lines[0x0]){console['log'](0x3);}", "test_cases": [["3 1 4", "3"], ["3 3 33", "2"]], "original": "'use strict';\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\");\n\nif (lines[0]===lines[1] && lines[1]===lines[2]){\n  console.log(1);\n}\nif (lines[0]===lines[1] && lines[1]!==lines[2]){\n  console.log(2);\n}\nif (lines[0]===lines[2] && lines[0]!==lines[1]){\n  console.log(2);\n}\nif (lines[1]===lines[2] && lines[0]!==lines[1]){\n  console.log(2);\n}\nif (lines[0]!==lines[1] && lines[1]!==lines[2] && lines[2]!==lines[0]) {\n  console.log(3);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 40, "deobfuscated": "'use strict';\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\");\nif (lines[0] === lines[1] && lines[1] === lines[2]) {\n  console.log(1);\n}\nif (lines[0] === lines[1] && lines[1] !== lines[2]) {\n  console.log(2);\n}\nif (lines[0] === lines[2] && lines[0] !== lines[1]) {\n  console.log(2);\n}\nif (lines[1] === lines[2] && lines[0] !== lines[1]) {\n  console.log(2);\n}\nif (lines[0] !== lines[1] && lines[1] !== lines[2] && lines[2] !== lines[0]) {\n  console.log(3);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6359244166646822, "ngram_match_score": 0.1989793227172862, "weighted_ngram_match_score": 0.34471834394144263, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02623_1", "type": "JavaScript", "obfuscated": "function compareFunc(a,b){return a-b;}function main(input){let args=input['split'](/\\n/);let books=[...args[0x1]['split'](/\\s/),...args[0x2]['split'](/\\s/)];let time=args[0x0]['split'](/\\s/)[0x2];let result=0x0;books['sort'](compareFunc);for(let i=0x0;i<books['length'];i++){if(time>=books[i]*0x1){time-=books[i];result++;}}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4 240\n60 90 120\n80 150 80 150", "3"], ["3 4 730\n60 90 120\n80 150 80 150", "7"], ["5 4 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n1000000000 1000000000 1000000000 1000000000", "0"]], "original": "function compareFunc(a, b) {\n  return a - b;\n}\n\nfunction main(input) {\n  let args = input.split(/\\n/);\n  let books = [...args[1].split(/\\s/), ...args[2].split(/\\s/)];\n  let time = args[0].split(/\\s/)[2];\n  let result = 0;\n  books.sort(compareFunc);\n  for (let i = 0;i < books.length;i++) {\n    if (time >= books[i] * 1) {\n      time -= books[i];\n      result++;\n    }\n  }\n  console.log(result);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 41, "deobfuscated": "function compareFunc(a, b) {\n  return a - b;\n}\nfunction main(input) {\n  let args = input.split(/\\n/);\n  let books = [...args[1].split(/\\s/), ...args[2].split(/\\s/)];\n  let time = args[0].split(/\\s/)[2];\n  let result = 0;\n  books.sort(compareFunc);\n  for (let i = 0; i < books.length; i++) {\n    if (time >= books[i] * 1) {\n      time -= books[i];\n      result++;\n    }\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9347696349552652, "ngram_match_score": 0.8502578444538368, "weighted_ngram_match_score": 0.888820695367224, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02732_1", "type": "JavaScript", "obfuscated": "'use strict';const combi=function(n){return n*(n-0x1)/0x2;};const main=arg=>{const input=arg['trim']()['split']('\\x0a');const N=parseInt(input[0x0]['split']('\\x20')[0x0]);const A=input[0x1]['split']('\\x20')['map'](n=>parseInt(n));let m={};for(let i=0x0;i<A['length'];i++){if(!m[A[i]])m[A[i]]=0x1;else m[A[i]]++;}let orgCnt=0x0;let keys=Object['keys'](m);for(let i=0x0;i<keys['length'];i++){orgCnt=orgCnt+combi(m[keys[i]]);}for(let i=0x0;i<A['length'];i++){let num=m[A[i]];const diff=combi(num)-combi(num-0x1);console['log'](orgCnt-diff);}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 1 2 1 2", "2\n2\n3\n2\n3"], ["4\n1 2 3 4", "0\n0\n0\n0"], ["5\n3 3 3 3 3", "6\n6\n6\n6\n6"], ["8\n1 2 1 4 2 1 4 1", "5\n7\n5\n7\n7\n5\n7\n5"]], "original": "\"use strict\";\nconst combi = function(n){\n    return n*(n-1)/2\n}\n\nconst main = arg => {\n    const input = arg.trim().split(\"\\n\");\n\n    const N = parseInt(input[0].split(\" \")[0]);\n    const A = input[1].split(\" \").map(n => parseInt(n));\n\n    let m = {}\n    for(let i = 0; i<A.length; i++){\n        if(!m[A[i]]) m[A[i]] = 1\n        else m[A[i]]++\n    }\n    let orgCnt = 0\n    let keys = Object.keys(m)\n    for(let i = 0; i<keys.length; i++){\n        orgCnt = orgCnt + combi(m[keys[i]])\n    }\n\n    for(let i = 0; i<A.length; i++){\n        let num = m[A[i]]\n        const diff = combi(num) - combi(num-1)\n        console.log(orgCnt-diff)\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 42, "deobfuscated": "'use strict';\n\nconst combi = function (n) {\n  return n * (n - 1) / 2;\n};\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  const N = parseInt(input[0].split(\" \")[0]);\n  const A = input[1].split(\" \").map(n => parseInt(n));\n  let m = {};\n  for (let i = 0; i < A.length; i++) {\n    if (!m[A[i]]) {\n      m[A[i]] = 1;\n    } else {\n      m[A[i]]++;\n    }\n  }\n  let orgCnt = 0;\n  let keys = Object.keys(m);\n  for (let i = 0; i < keys.length; i++) {\n    orgCnt = orgCnt + combi(m[keys[i]]);\n  }\n  for (let i = 0; i < A.length; i++) {\n    let num = m[A[i]];\n    const diff = combi(num) - combi(num - 1);\n    console.log(orgCnt - diff);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6928230944656306, "ngram_match_score": 0.3534828438765842, "weighted_ngram_match_score": 0.4859913521677567, "syntax_match_score": 0.9318181818181818, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02767_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var inputs=input[0x1]['split']('\\x20');function avg(args){var num=0x0;for(var n of args){num+=Number(n);}return num/args['length'];}var average=Math['round'](avg(inputs));var useStamina=0x0;for(var point of inputs){useStamina+=Math['pow'](average-point,0x2);}console['log'](useStamina);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 4", "5"], ["7\n14 14 2 13 56 2 37", "2354"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  var inputs = input[1].split(\" \");\n\n  // argsは配列\n  function avg(args) {\n    var num = 0;\n    for(var n of args) {\n      num += Number(n);\n    }\n    return num / args.length;\n  }\n  var average = Math.round(avg(inputs));\n  // console.log(average);\n\n  var useStamina = 0;\n  for(var point of inputs) {\n    useStamina += Math.pow(average - point, 2);\n  }\n  console.log(useStamina);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main('2\\n1 4');\n// Main('7\\n14 14 2 13 56 2 37');\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 43, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var inputs = input[1].split(\" \");\n  function avg(args) {\n    var num = 0;\n    for (var n of args) {\n      num += Number(n);\n    }\n    return num / args.length;\n  }\n  var average = Math.round(avg(inputs));\n  var useStamina = 0;\n  for (var point of inputs) {\n    useStamina += Math.pow(average - point, 2);\n  }\n  console.log(useStamina);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7799612173948284, "ngram_match_score": 0.5404898245670787, "weighted_ngram_match_score": 0.5793550450122348, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02802_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let lines=input['split']('\\x0a');let numInfo=lines['shift']()['split']('\\x20')[0x1];let ansObj={};for(let i=0x0;i<numInfo;i++){let quesNum=lines[i]['split']('\\x20')[0x0];let ansKind=lines[i]['split']('\\x20')[0x1];if(ansObj[quesNum]===undefined){ansObj[quesNum]=''+ansKind;}else{ansObj[quesNum]+=','+ansKind;}}let WANum=0x0;let ACNum=0x0;let ansObjKeys=Object['keys'](ansObj);for(let i=0x0;i<ansObjKeys['length'];i++){let targetKey=ansObjKeys[i];let target=ansObj[targetKey]['split'](',');for(let j=0x0;j<target['length'];j++){if(target[j]=='AC'){ACNum++;break;}else{WANum++;}}}console['log'](ACNum+'\\x20'+WANum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA", "2 2"], ["100000 3\n7777 AC\n7777 AC\n7777 AC", "1 0"], ["6 0", "0 0"]], "original": "\"use strict\";\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let numInfo = lines.shift().split(\" \")[1];\n  // 答えを調べる用のMap\n  let ansObj = {};\n  for(let i = 0; i < numInfo;i++){\n    \tlet quesNum = lines[i].split(\" \")[0];\n    \tlet ansKind = lines[i].split(\" \")[1];\n    \tif(ansObj[quesNum] === undefined){\n          ansObj[quesNum] = `${ansKind}`;\n        } else {\n        ansObj[quesNum] += `,${ansKind}`;\n        }\n  }\n  let WANum = 0;\n  let ACNum = 0;\n  // objectは直接要素数は取れないらしい\n  // 直線状に解いてるのが良くなかったのでは？\n  let ansObjKeys = Object.keys(ansObj);\n    for(let i = 0; i < ansObjKeys.length; i++){\n      let targetKey = ansObjKeys[i];\n      // 対象を配列として切り出したもの\n      let target = ansObj[targetKey].split(\",\");\n        for(let j = 0; j < target.length; j++){\n          if(target[j] == 'AC') {\n            ACNum++;\n            break;\n          } else {\n            WANum++;\n          } \n        }\n    }\n  console.log(ACNum + \" \" + WANum);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 44, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let numInfo = lines.shift().split(\" \")[1];\n  let ansObj = {};\n  for (let i = 0; i < numInfo; i++) {\n    let quesNum = lines[i].split(\" \")[0];\n    let ansKind = lines[i].split(\" \")[1];\n    if (ansObj[quesNum] === undefined) {\n      ansObj[quesNum] = \"\" + ansKind;\n    } else {\n      ansObj[quesNum] += \",\" + ansKind;\n    }\n  }\n  let WANum = 0;\n  let ACNum = 0;\n  let ansObjKeys = Object.keys(ansObj);\n  for (let i = 0; i < ansObjKeys.length; i++) {\n    let targetKey = ansObjKeys[i];\n    let target = ansObj[targetKey].split(\",\");\n    for (let j = 0; j < target.length; j++) {\n      if (target[j] == \"AC\") {\n        ACNum++;\n        break;\n      } else {\n        WANum++;\n      }\n    }\n  }\n  console.log(ACNum + \" \" + WANum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7528869060198365, "ngram_match_score": 0.5916880499304062, "weighted_ngram_match_score": 0.634137608768873, "syntax_match_score": 0.8702290076335878, "dataflow_match_score": 0.9154929577464789}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02812_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('\\x0a');let N=Number(xs[0x0]);let S=xs[0x1]['split']('');let ans=0x0;for(let i=0x0;i<=N-0x3;i++){if(S[i]+S[i+0x1]+S[i+0x2]=='ABC'){ans++;}}console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10\nZABCDBABCQ", "2"], ["19\nTHREEONEFOURONEFIVE", "0"], ["33\nABCCABCBABCCABACBCBBABCBCBCBCABCB", "5"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0]);\n   let S = xs[1].split('');\n   let ans = 0;\n   for(let i=0; i<=N-3; i++){\n   \tif(S[i]+S[i+1]+S[i+2]=='ABC'){\n   \t  ans++\n    }\n   }\n   console.log(ans);\n\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 45, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\"\\n\");\n  let N = Number(xs[0]);\n  let S = xs[1].split(\"\");\n  let ans = 0;\n  for (let i = 0; i <= N - 3; i++) {\n    if (S[i] + S[i + 1] + S[i + 2] == \"ABC\") {\n      ans++;\n    }\n  }\n  console.log(ans);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5042055241112177, "ngram_match_score": 0.20310365002330127, "weighted_ngram_match_score": 0.3609320687125911, "syntax_match_score": 0.9264705882352942, "dataflow_match_score": 0.5263157894736842}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02900_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20')['map'](x=>x*0x1);function gcd(a1,a2){return a2==0x0?a1:gcd(a2,a1%a2);}var result=gcd(input[0x0],input[0x1]);var answer=0x1;for(var i=0x2;i*i<result;i++){if(result%i===0x0){answer++;while(result%i===0x0){result/=i;}}}if(result!==0x1){answer++;}console['log'](answer);}Main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["12 18", "3"], ["420 660", "4"], ["1 2019", "1"]], "original": "function Main(input) {\n  input = input.split(' ').map(x => x*1);\n   \n  // Eulidean Algorithm\n  function gcd(a1, a2) {\n    return a2 == 0 ? a1 : gcd(a2, a1 % a2);\n  }\n\n  var result = gcd(input[0], input[1]);\n  var answer = 1;\n\n  for(var i = 2; i * i < result; i++) {\n    if(result % i === 0) {\n      answer++;\n      while(result % i === 0) {\n        result /= i;\n      }\n    }\n  }\n  if( result !== 1) {\n    answer++;\n  }\n\n  console.log(answer);\n\n\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf-8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 46, "deobfuscated": "function Main(input) {\n  input = input.split(\" \").map(x => x * 1);\n  function gcd(a1, a2) {\n    if (a2 == 0) {\n      return a1;\n    } else {\n      return gcd(a2, a1 % a2);\n    }\n  }\n  var result = gcd(input[0], input[1]);\n  var answer = 1;\n  for (var i = 2; i * i < result; i++) {\n    if (result % i === 0) {\n      answer++;\n      while (result % i === 0) {\n        result /= i;\n      }\n    }\n  }\n  if (result !== 1) {\n    answer++;\n  }\n  console.log(answer);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7652334506392189, "ngram_match_score": 0.5476018029380259, "weighted_ngram_match_score": 0.606665332952183, "syntax_match_score": 0.9066666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1875, "length_score": -0.1875, "increase_maintainability": -0.028742967854928803, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02127659574468077, "new_decrease_halstead_effort": -0.02127659574468077}}
{"filename": "p02923_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x0a');const N=Number(input[0x0]);const H=input[0x1]['trim']()['split']('\\x20')['map'](Number);let ret=0x0;let move=0x0;for(let i=0x0;i<N;i++){if(H[i]>=H[i+0x1]){move+=0x1;}else{ret=Math['max'](ret,move);move=0x0;}}console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n10 4 8 7 3", "2"], ["7\n4 4 5 6 6 5 5", "3"], ["4\n1 2 3 4", "0"]], "original": "\"use strict\"\n \nfunction Main(input) {\n  input = input.trim().split('\\n');\n  const N = Number(input[0]);\n  const H = input[1].trim().split(' ').map(Number);\n\n  let ret = 0;\n  let move = 0;\n  \n  for(let i=0; i<N; i++){\n    if (H[i] >= H[i+1]) {\n      move += 1;\n    } else {\n      ret = Math.max(ret, move);\n      move = 0;\n    }\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 47, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = Number(input[0]);\n  const H = input[1].trim().split(\" \").map(Number);\n  let ret = 0;\n  let move = 0;\n  for (let i = 0; i < N; i++) {\n    if (H[i] >= H[i + 1]) {\n      move += 1;\n    } else {\n      ret = Math.max(ret, move);\n      move = 0;\n    }\n  }\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8140774585581316, "ngram_match_score": 0.589237981614232, "weighted_ngram_match_score": 0.6940988796453214, "syntax_match_score": 1.0, "dataflow_match_score": 0.972972972972973}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02934_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');const num=input[0x0];const arr=input[0x1]['split']('\\x20');var a=0x1;var b=0x0;arr['forEach'](i=>a*=i);for(var i=0x0;i<arr['length'];i++){b+=a/arr[i];}console['log'](a/b);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n10 30", "7.5"], ["3\n200 200 200", "66.66666666666667"], ["1\n1000", "1000"]], "original": "function Main(input) {\n    var input = input.split(\"\\n\");\n    const num = input[0];\n    const arr = input[1].split(\" \");\n    var a = 1;\n    var b = 0;\n    arr.forEach(i => a *= i);\n    for(var i=0; i<arr.length; i++){\n        b += a / arr[i];\n    }\n    console.log(a/b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 48, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  const num = input[0];\n  const arr = input[1].split(\" \");\n  var a = 1;\n  var b = 0;\n  arr.forEach(i => a *= i);\n  for (var i = 0; i < arr.length; i++) {\n    b += a / arr[i];\n  }\n  console.log(a / b);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8616590908171211, "ngram_match_score": 0.6633781714342107, "weighted_ngram_match_score": 0.7832581918342738, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02939_1", "type": "JavaScript", "obfuscated": "function Main(input){var output=0x0;var list=[];var output=input['length'];var tmp='';for(var i=input['length']-0x1;i>=0x0;i--){var tmp2=input['slice'](i,i+0x1);if(list['length']==0x0){list['push'](tmp2);continue;}else{var tmp1=list[list['length']-0x1];if(tmp1==tmp2){list['push'](input['slice'](i-0x1,i)+tmp2);i--;}else{list['push'](tmp2);}}}output=list['length'];var first=input['slice'](0x0,0x1);var second=input['slice'](0x1,0x2);if(first==second){output--;}console['log'](output['toString']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["aabbaa", "4"], ["aaaccacabaababc", "12"]], "original": "function Main(input) {\n  var output = 0;\n  var list = [];\n  var output = input.length;\n  var tmp = \"\";\n  for(var i = input.length - 1; i >= 0; i--){\n    var tmp2 = input.slice(i, i + 1);\n    if(list.length == 0){\n      list.push(tmp2);\n      continue;\n    }else{\n      var tmp1 = list[list.length - 1];\n      if(tmp1 == tmp2){\n         list.push(input.slice(i - 1, i) + tmp2);\n        i--;\n      }else{\n        list.push(tmp2);\n      }\n    }\n  }\n  output = list.length;\n  var first = input.slice(0, 1);\n  var second = input.slice(1, 2);\n  if(first == second){\n     output--;\n  }\n  \n  console.log(output.toString());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 49, "deobfuscated": "function Main(input) {\n  var output = 0;\n  var list = [];\n  var output = input.length;\n  var tmp = \"\";\n  for (var i = input.length - 1; i >= 0; i--) {\n    var tmp2 = input.slice(i, i + 1);\n    if (list.length == 0) {\n      list.push(tmp2);\n      continue;\n    } else {\n      var tmp1 = list[list.length - 1];\n      if (tmp1 == tmp2) {\n        list.push(input.slice(i - 1, i) + tmp2);\n        i--;\n      } else {\n        list.push(tmp2);\n      }\n    }\n  }\n  output = list.length;\n  var first = input.slice(0, 1);\n  var second = input.slice(1, 2);\n  if (first == second) {\n    output--;\n  }\n  console.log(output.toString());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8398621567393171, "ngram_match_score": 0.6308596193267416, "weighted_ngram_match_score": 0.7285890076305266, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02959_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0],0xa);var a=input[0x1]['split']('\\x20');a=a['map'](str=>parseInt(str,0xa));var b=input[0x2]['split']('\\x20');b=b['map'](str=>parseInt(str,0xa));var count=0x0;for(var i=0x0;i<n;i++){var atarget=a[i]+a[i+0x1];var rest=atarget-b[i];if(rest<0x0){count+=atarget;a[i+0x1]=0x0;}else{count+=b[i];a[i+0x1]=Math['min'](rest,a[i+0x1]);}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n3 5 2\n4 5", "9"], ["3\n5 6 3 8\n5 100 8", "22"], ["2\n100 1 1\n1 100", "3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0], 10);\n    var a = input[1].split(\" \");\n    a = a.map(str => parseInt(str, 10));\n    var b = input[2].split(\" \");\n    b = b.map(str => parseInt(str, 10));\n    var count = 0;\n    for(var i = 0; i < n; i++){\n        var atarget = a[i] + a[i+1];\n        var rest = atarget - b[i];\n        if(rest < 0){\n            count += atarget;\n            a[i+1] = 0;\n        }else{\n            count += b[i];\n            a[i+1] = Math.min(rest,a[i+1]); \n        }\n    }\n\t//出力\n\tconsole.log(count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 50, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var a = input[1].split(\" \");\n  a = a.map(str => parseInt(str, 10));\n  var b = input[2].split(\" \");\n  b = b.map(str => parseInt(str, 10));\n  var count = 0;\n  for (var i = 0; i < n; i++) {\n    var atarget = a[i] + a[i + 1];\n    var rest = atarget - b[i];\n    if (rest < 0) {\n      count += atarget;\n      a[i + 1] = 0;\n    } else {\n      count += b[i];\n      a[i + 1] = Math.min(rest, a[i + 1]);\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8144615141968874, "ngram_match_score": 0.5782879394001986, "weighted_ngram_match_score": 0.6795581173873511, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02983_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');inputStr=input[0x0]['split']('\\x20');const L=Number['parseInt'](inputStr[0x0]);const R=Number['parseInt'](inputStr[0x1]);var min=0x7e2;if(L*R>0x7e3){if(R-L<0x7e3){const L2=L%0x7e3;const R2=R%0x7e3;for(var i1=L2;i1<R2;i1++){for(var i2=i1+0x1;i2<R2+0x1;i2++){min=Math['min'](min,i1*i2%0x7e3);if(min===0x0){break;}}}console['log'](min);}else{console['log'](0x0);}}else{console['log'](L*(L+0x1));}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2020 2040", "2"], ["4 5", "20"]], "original": "function Main(input){\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  const L = Number.parseInt(inputStr[0]);\n  const R = Number.parseInt(inputStr[1]);\n  \n  var min = 2018;  \n  if ( L * R > 2019){\n    if ( R - L < 2019) {\n      const L2 = L % 2019;\n      const R2 = R % 2019;\n       \n      for(var i1 = L2; i1 < R2; i1++){\n        for(var i2 = i1+1 ; i2 < R2+1 ; i2++){\n          min = Math.min(min,i1 * i2 % 2019);\n          if(min === 0) { break; }\n        }\n      }\n\t  console.log(min);\n    } else {\n      console.log(0);\n    }\n  } else {\n    //LとRの積が2019を超えないなら計算する必要がない\n    console.log(L * (L+1));\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 51, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  const L = Number.parseInt(inputStr[0]);\n  const R = Number.parseInt(inputStr[1]);\n  var min = 2018;\n  if (L * R > 2019) {\n    if (R - L < 2019) {\n      const L2 = L % 2019;\n      const R2 = R % 2019;\n      for (var i1 = L2; i1 < R2; i1++) {\n        for (var i2 = i1 + 1; i2 < R2 + 1; i2++) {\n          min = Math.min(min, i1 * i2 % 2019);\n          if (min === 0) {\n            break;\n          }\n        }\n      }\n      console.log(min);\n    } else {\n      console.log(0);\n    }\n  } else {\n    console.log(L * (L + 1));\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8097574999446635, "ngram_match_score": 0.5870284557574089, "weighted_ngram_match_score": 0.6520015440212451, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0015326381289696434, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03108376590491857}}
{"filename": "p03012_1", "type": "JavaScript", "obfuscated": "'use strict';const INF=0x3333333333333;function mapint(temp){return temp['split']('\\x20')['map'](v=>parseInt(v));}function Main(input){let temp=input['trim']()['split']('\\x0a');let n=parseInt(temp[0x0]);let w=mapint(temp[0x1]);let s1=w[0x0];let s2=0x0;for(let i=0x1;i<n;i++){s2+=w[i];}let sa=Math['abs'](s1-s2);let sa2;for(let i=0x1;i<n;i++){s1+=w[i];s2-=w[i];sa=Math['min'](sa,Math['abs'](s1-s2));}console['log'](sa);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2 3", "0"], ["4\n1 3 1 1", "2"], ["8\n27 23 76 2 3 5 62 52", "2"]], "original": "'use strict'\n\nconst INF = 900719925474099;\nfunction mapint(temp){\n    return temp.split(' ').map((v)=>parseInt(v));\n}\n\nfunction Main(input){\n    let temp = input.trim().split('\\n');\n    let n = parseInt(temp[0]);\n    let w = mapint(temp[1]);\n\n    let s1 = w[0];\n    let s2 = 0;\n    for(let i=1;i<n;i++){\n        s2+=w[i];\n    }\n    let sa = Math.abs(s1-s2);\n    let sa2;\n    for(let i=1;i<n;i++){\n        s1+=w[i];\n        s2-=w[i];\n\n        sa = Math.min(sa,Math.abs(s1-s2));\n    }\n    console.log(sa);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 52, "deobfuscated": "'use strict';\n\nconst INF = 900719925474099;\nfunction mapint(temp) {\n  return temp.split(\" \").map(v => parseInt(v));\n}\nfunction Main(input) {\n  let temp = input.trim().split(\"\\n\");\n  let n = parseInt(temp[0]);\n  let w = mapint(temp[1]);\n  let s1 = w[0];\n  let s2 = 0;\n  for (let i = 1; i < n; i++) {\n    s2 += w[i];\n  }\n  let sa = Math.abs(s1 - s2);\n  let sa2;\n  for (let i = 1; i < n; i++) {\n    s1 += w[i];\n    s2 -= w[i];\n    sa = Math.min(sa, Math.abs(s1 - s2));\n  }\n  console.log(sa);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6757938517582567, "ngram_match_score": 0.2965733468827917, "weighted_ngram_match_score": 0.47522951113062706, "syntax_match_score": 0.9313725490196079, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03053_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){arg=arg['trim']()['split']('\\x0a');arg['shift']();var H=arg['length'];var W=arg[0x0]['length'];var m1=[];for(var i=0x0;i<arg['length'];i++){m1['push'](arg[i]['split'](''));}var i=0x0;var slist=[];for(var y=0x0;y<H;y++)for(var x=0x0;x<W;x++){if(m1[y][x]==='#'){slist['push']([y,x]);}}var tmp=[];for(var y=0x0;y<H;y++)for(var x=0x0;x<W;x++){if(m1[y][x]==='.'){var minD=Number['MAX_SAFE_INTEGER'];for(var i=0x0;i<slist['length'];i++){var _y=slist[i][0x0];var _x=slist[i][0x1];var d=Math['abs'](_y-y)+Math['abs'](_x-x);if(d<minD){minD=d;}}tmp['push'](minD);}}console['log'](Math['max'](...tmp));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n...\n.#.\n...", "2"], ["6 6\n..#..#\n......\n#..#..\n......\n.#....\n....#.", "3"]], "original": "\"use strict\"\n\nfunction main(arg) {\n    arg = arg.trim().split(\"\\n\")\n    arg.shift()\n    var H = arg.length\n    var W = arg[0].length\n    var m1 = []\n    for (var i = 0; i < arg.length; i++) {\n        m1.push(arg[i].split(''))\n    }\n    var i = 0\n    var slist = []\n    for (var y = 0; y < H; y++) for (var x = 0; x < W; x++) {\n        if (m1[y][x] === '#') {\n            slist.push([y, x])\n        }\n    }\n    var tmp = []\n    for (var y = 0; y < H; y++) for (var x = 0; x < W; x++) {\n        if (m1[y][x] === '.') {\n            var minD = Number.MAX_SAFE_INTEGER\n            for (var i = 0; i < slist.length; i++) {\n                var _y = slist[i][0]\n                var _x = slist[i][1]\n                var d = Math.abs(_y - y) + Math.abs(_x - x)\n                if (d < minD) {\n                    minD = d\n                }\n            }\n            tmp.push(minD)\n        }\n    }\n    console.log(Math.max(...tmp))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 53, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  arg = arg.trim().split(\"\\n\");\n  arg.shift();\n  var H = arg.length;\n  var W = arg[0].length;\n  var m1 = [];\n  for (var i = 0; i < arg.length; i++) {\n    m1.push(arg[i].split(\"\"));\n  }\n  var i = 0;\n  var slist = [];\n  for (var y = 0; y < H; y++) {\n    for (var x = 0; x < W; x++) {\n      if (m1[y][x] === \"#\") {\n        slist.push([y, x]);\n      }\n    }\n  }\n  var tmp = [];\n  for (var y = 0; y < H; y++) {\n    for (var x = 0; x < W; x++) {\n      if (m1[y][x] === \".\") {\n        var minD = Number.MAX_SAFE_INTEGER;\n        for (var i = 0; i < slist.length; i++) {\n          var _y = slist[i][0];\n          var _x = slist[i][1];\n          var d = Math.abs(_y - y) + Math.abs(_x - x);\n          if (d < minD) {\n            minD = d;\n          }\n        }\n        tmp.push(minD);\n      }\n    }\n  }\n  console.log(Math.max(...tmp));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8033139591654308, "ngram_match_score": 0.6089673082838611, "weighted_ngram_match_score": 0.6359340979981152, "syntax_match_score": 0.9683544303797469, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03080_1", "type": "JavaScript", "obfuscated": "function Main(input){let Red=0x0;let Blue=0x0;const input_line=input['split']('\\x0a');inputS=input_line[0x1]['split']('');for(i=0x0;i<inputS['length'];i++){if(inputS[i]==='R'){Red++;}else{Blue++;}}console['log'](Red>Blue?'Yes':'No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\nRRBR", "Yes"], ["4\nBRBR", "No"]], "original": "function Main(input){\n  let Red = 0;\n  let Blue = 0;\n  const input_line = input.split('\\n');\n  inputS = input_line[1].split('');\n  for (i = 0; i < inputS.length; i++) {\n    if (inputS[i] === 'R'){\n      Red++;\n    }else {\n      Blue++;\n    }\n  }\n//  inputS.forEach((s) => {\n//    if (s === 'R'){\n//      console.log(\"Red++\");\n//      Red++;\n//    } else {\n//      console.log(\"Blue++\");\n//      Blue++;\n//    }\n//  });\n  console.log(Red > Blue ? \"Yes\" : \"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 54, "deobfuscated": "function Main(input) {\n  let Red = 0;\n  let Blue = 0;\n  const input_line = input.split(\"\\n\");\n  inputS = input_line[1].split(\"\");\n  for (i = 0; i < inputS.length; i++) {\n    if (inputS[i] === \"R\") {\n      Red++;\n    } else {\n      Blue++;\n    }\n  }\n  console.log(Red > Blue ? \"Yes\" : \"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.734388774979295, "ngram_match_score": 0.44625331829892556, "weighted_ngram_match_score": 0.49130178161825466, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03161_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const [N,K]=input[0x0]['split']('\\x20')['map'](n=>{return parseInt(n,0xa);});const hn=input[0x1]['split']('\\x20')['map'](n=>{return parseInt(n,0xa);});const h_max=Math['pow'](0xa,0x9);console['log'](dp(N,K,hn,h_max));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function dp(N,K,hn,h_max){const dp=[];let dp_work=[];dp[0x0]=0x0;for(var i=0x1;i<N;i++){dp['push'](h_max);dp_work=[];dp_work['push'](dp[i]);for(var dp_work_i=0x1;dp_work_i<=K;dp_work_i++){if(i-dp_work_i<0x0)continue;dp_work['push'](dp[i-dp_work_i]+Math['abs'](hn[i-dp_work_i]-hn[i]));}dp[i]=Math['min'](...dp_work);}return dp[N-0x1];}", "test_cases": [["5 3\n10 30 40 50 20", "30"], ["3 1\n10 20 10", "20"], ["2 100\n10 10", "0"], ["10 4\n40 10 20 70 80 10 20 70 80 60", "40"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  const [N,K] = input[0].split(' ').map((n) => {\n    return parseInt(n, 10);\n  });\n  const hn = input[1].split(' ').map((n) => {\n    return parseInt(n, 10);\n  });\n  const h_max = Math.pow(10,9);\n  console.log(dp(N,K,hn,h_max));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction dp(N,K,hn,h_max) {\n  const dp = [];\n  let dp_work = [];\n  dp[0] = 0;\n  for (var i = 1; i < N; i++) {\n    dp.push(h_max);\n    dp_work = [];\n    dp_work.push(dp[i]);\n    for (var dp_work_i = 1; dp_work_i <= K; dp_work_i++) {\n      if (i-dp_work_i < 0) continue;\n      dp_work.push(dp[i-dp_work_i] + Math.abs(hn[i-dp_work_i] - hn[i]));\n    }\n    dp[i] = Math.min(...dp_work);\n  }\n  return dp[N-1];\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 55, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const [N, K] = input[0].split(\" \").map(n => {\n    return parseInt(n, 10);\n  });\n  const hn = input[1].split(\" \").map(n => {\n    return parseInt(n, 10);\n  });\n  const h_max = Math.pow(10, 9);\n  console.log(dp(N, K, hn, h_max));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction dp(N, K, hn, h_max) {\n  const dp = [];\n  let dp_work = [];\n  dp[0] = 0;\n  for (var i = 1; i < N; i++) {\n    dp.push(h_max);\n    dp_work = [];\n    dp_work.push(dp[i]);\n    for (var dp_work_i = 1; dp_work_i <= K; dp_work_i++) {\n      if (i - dp_work_i < 0) {\n        continue;\n      }\n      dp_work.push(dp[i - dp_work_i] + Math.abs(hn[i - dp_work_i] - hn[i]));\n    }\n    dp[i] = Math.min(...dp_work);\n  }\n  return dp[N - 1];\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7718280446931385, "ngram_match_score": 0.6134909162510409, "weighted_ngram_match_score": 0.7437574666682436, "syntax_match_score": 0.8484848484848485, "dataflow_match_score": 0.881578947368421}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03292_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const nums=s['split']('\\x0a')[0x0]['split']('\\x20')['map'](n=>Number(n));const ans=Math['max'](...nums)-Math['min'](...nums);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 6 3", "5"], ["11 5 5", "6"], ["100 100 100", "0"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const nums = s.split('\\n')[0].split(' ').map(n => Number(n));\n  const ans = Math.max(...nums) - Math.min(...nums);\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 56, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const nums = s.split(\"\\n\")[0].split(\" \").map(n => Number(n));\n  const ans = Math.max(...nums) - Math.min(...nums);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8356208703559248, "ngram_match_score": 0.7344112539787184, "weighted_ngram_match_score": 0.744435863808617, "syntax_match_score": 1.0, "dataflow_match_score": 0.8636363636363636}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03339_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['split']('\\x0a');const N=parseInt(lines[0x0]);const S=lines[0x1]['split']('');var result=Math['pow'](0xa,0x8);var current_count=0x0;for(var i=0x0;i<N;i++){if(S[i]=='E'){current_count++;}}result=current_count;for(var i=0x1;i<N;i++){if(S[i]=='E'){current_count--;}if(S[i-0x1]=='W'){current_count++;}result=Math['min'](result,current_count);}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\nWEEWW", "1"], ["12\nWEWEWEEEWWWE", "4"], ["8\nWWWWWEEE", "3"]], "original": "function main(input){\n  const lines = input.split('\\n');\n\n  const N = parseInt(lines[0]);\n  const S = lines[1].split('');\n\n  \n  var result = Math.pow(10, 8);\n  var current_count = 0;\n  for(var i=0;i<N;i++){\n    if(S[i]=='E'){current_count++;}\n  }\n  result = current_count;\n\n//    console.log(current_count);\n  for(var i=1;i<N;i++){\n    if(S[i]=='E'){current_count--;}\n    if(S[i-1]=='W'){current_count++;}\n    result = Math.min(result, current_count);\n//    console.log(current_count);\n  }\n//    console.log('---');\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 57, "deobfuscated": "function main(input) {\n  const lines = input.split(\"\\n\");\n  const N = parseInt(lines[0]);\n  const S = lines[1].split(\"\");\n  var result = Math.pow(10, 8);\n  var current_count = 0;\n  for (var i = 0; i < N; i++) {\n    if (S[i] == \"E\") {\n      current_count++;\n    }\n  }\n  result = current_count;\n  for (var i = 1; i < N; i++) {\n    if (S[i] == \"E\") {\n      current_count--;\n    }\n    if (S[i - 1] == \"W\") {\n      current_count++;\n    }\n    result = Math.min(result, current_count);\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6645012333192426, "ngram_match_score": 0.2488022610451351, "weighted_ngram_match_score": 0.4296108354971412, "syntax_match_score": 1.0, "dataflow_match_score": 0.9795918367346939}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02595_1", "type": "JavaScript", "obfuscated": "const main=input=>{input=input['trim']()['split']('\\x0a');const [N,D]=input[0x0]['split']('\\x20')['map'](Number);const [,...points]=input;let ans=0x0;for(let v of points){const [x,y]=v['split']('\\x20')['map'](Number);if(Math['sqrt'](x**0x2+y**0x2)<=D)ans++;}return console['log'](ans);};process['env']['MYTEST']?test():main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5\n0 5\n-2 4\n3 4\n4 -4", "3"], ["12 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3", "7"], ["20 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669", "6"]], "original": "const main = (input) => {\n  input = input.trim().split('\\n')\n  const [N, D] = input[0].split(' ').map(Number)\n  const [, ...points] = input\n\n  let ans = 0\n\n  for (let v of points) {\n    const [x, y] = v.split(' ').map(Number)\n\n    if (Math.sqrt(x**2 + y**2) <= D) ans++\n  }\n\n  return console.log(ans)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 58, "deobfuscated": "const main = input => {\n  input = input.trim().split(\"\\n\");\n  const [N, D] = input[0].split(\" \").map(Number);\n  const [, ...points] = input;\n  let ans = 0;\n  for (let v of points) {\n    const [x, y] = v.split(\" \").map(Number);\n    if (Math.sqrt(x ** 2 + y ** 2) <= D) {\n      ans++;\n    }\n  }\n  return console.log(ans);\n};\nif (process.env.MYTEST) {\n  test();\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.522318969640364, "ngram_match_score": 0.31680154574174146, "weighted_ngram_match_score": 0.3941409994863812, "syntax_match_score": 0.8533333333333334, "dataflow_match_score": 0.525}, "code_complexity": {"difference_score": 1.5, "length_score": -1.5, "increase_maintainability": -0.11133541932602742, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.04761904761904767, "new_decrease_halstead_effort": -0.2871032104722151}}
{"filename": "p02597_1", "type": "JavaScript", "obfuscated": "function MainD(input){const arr=input['split']('\\x0a');const N=arr[0x0];const Ci=arr[0x1]['split']('');let answer=0x0;let Wnum=0x0;for(let i=0x0;i<Ci['length'];i++){if(Ci[i]==='W'){Wnum++;}}if(Wnum===0x0)return console['log'](0x0);for(let i=Wnum-0x1;i<Ci['length'];i++){if(Ci[i]==='R'){answer++;}}console['log'](answer);}MainD(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\nWWRR", "2"], ["2\nRR", "0"], ["8\nWRWWRWRR", "3"]], "original": "function MainD(input){\n    const arr = input.split('\\n');\n    const N = arr[0];\n    const Ci = arr[1].split('');\n    let answer = 0;\n\n    // Wの数を数える\n    let Wnum = 0;\n    for(let i=0; i<Ci.length; i++){\n        if(Ci[i] === 'W'){\n            Wnum++;\n        }\n    }\n    if(Wnum===0) return console.log(0); // Wが現れなかったら0を出力\n\n    // Wの数以降のRの数を数える\n    for(let i=Wnum-1; i<Ci.length; i++){\n        if(Ci[i] === 'R'){\n            answer++;\n        }\n    }\n    console.log(answer);\n}\nMainD(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 59, "deobfuscated": "function MainD(input) {\n  const arr = input.split(\"\\n\");\n  const N = arr[0];\n  const Ci = arr[1].split(\"\");\n  let answer = 0;\n  let Wnum = 0;\n  for (let i = 0; i < Ci.length; i++) {\n    if (Ci[i] === \"W\") {\n      Wnum++;\n    }\n  }\n  if (Wnum === 0) {\n    return console.log(0);\n  }\n  for (let i = Wnum - 1; i < Ci.length; i++) {\n    if (Ci[i] === \"R\") {\n      answer++;\n    }\n  }\n  console.log(answer);\n}\nMainD(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6381616480418649, "ngram_match_score": 0.2611184164556121, "weighted_ngram_match_score": 0.3671610871042529, "syntax_match_score": 0.9493670886075949, "dataflow_match_score": 0.975}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02707_1", "type": "JavaScript", "obfuscated": "const Main=input=>{const tmp=input['trim']()['split']('\\x0a');const employees=parseInt(tmp[0x0]);const subordinateArray=tmp[0x1]['split']('\\x20');const subordinateCount={};const distinctSubordinate=subordinateArray['filter']((x,i,self)=>self['indexOf'](x)===i);subordinateArray['forEach'](elem=>{subordinateCount[elem]=subordinateCount[elem]?subordinateCount[elem]+0x1:0x1;});let result=[];distinctSubordinate['forEach'](elem=>{return result['push'](subordinateCount[elem]);});const zeroCount=employees-distinctSubordinate['length'];if(zeroCount>0x0){for(let index=0x0;index<zeroCount;index++){result['push'](0x0);}}result=result['join']('\\x0a');console['log'](result);return result;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 1 2 2", "2\n2\n0\n0\n0"], ["10\n1 1 1 1 1 1 1 1 1", "9\n0\n0\n0\n0\n0\n0\n0\n0\n0"], ["7\n1 2 3 4 5 6", "1\n1\n1\n1\n1\n1\n0"]], "original": "const Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const employees = parseInt(tmp[0])\n  const subordinateArray = tmp[1].split(' ')\n\n  const subordinateCount = {}\n\n  const distinctSubordinate = subordinateArray.filter(\n    (x, i, self) => self.indexOf(x) === i\n  )\n\n  subordinateArray.forEach((elem) => {\n    subordinateCount[elem] = subordinateCount[elem]\n      ? subordinateCount[elem] + 1\n      : 1\n  })\n\n  let result = []\n  distinctSubordinate.forEach((elem) => {\n    return result.push(subordinateCount[elem])\n  })\n\n  const zeroCount = employees - distinctSubordinate.length\n\n  if (zeroCount > 0) {\n    for (let index = 0; index < zeroCount; index++) {\n      result.push(0)\n    }\n  }\n\n  result = result.join('\\n')\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 60, "deobfuscated": "const Main = input => {\n  const tmp = input.trim().split(\"\\n\");\n  const employees = parseInt(tmp[0]);\n  const subordinateArray = tmp[1].split(\" \");\n  const subordinateCount = {};\n  const distinctSubordinate = subordinateArray.filter((x, i, self) => self.indexOf(x) === i);\n  subordinateArray.forEach(elem => {\n    subordinateCount[elem] = subordinateCount[elem] ? subordinateCount[elem] + 1 : 1;\n  });\n  let result = [];\n  distinctSubordinate.forEach(elem => {\n    return result.push(subordinateCount[elem]);\n  });\n  const zeroCount = employees - distinctSubordinate.length;\n  if (zeroCount > 0) {\n    for (let index = 0; index < zeroCount; index++) {\n      result.push(0);\n    }\n  }\n  result = result.join(\"\\n\");\n  console.log(result);\n  return result;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6008474966486725, "ngram_match_score": 0.48268553737268854, "weighted_ngram_match_score": 0.49768441426166815, "syntax_match_score": 0.8558558558558559, "dataflow_match_score": 0.5671641791044776}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02756_1", "type": "JavaScript", "obfuscated": "function Main(input){'use strict';const temp=input['split']('\\x0a');const s=temp['shift']()['split']();const q=parseInt(temp['shift']());const queries=temp['map'](query=>query['split']('\\x20'));let reverse_flag=0x0;for(let i=0x0;i<q;i++){const query=queries[i];if(query['length']==0x1)reverse_flag=(reverse_flag+0x1)%0x2;else if(query['length']==0x3){if(reverse_flag+parseInt(query[0x1])%0x2==0x0)s['push'](query[0x2]);else s['unshift'](query[0x2]);}}if(reverse_flag)console['log'](s['reverse']()['join']('')+'\\x0a');else console['log'](s['join']('')+'\\x0a');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["a\n4\n2 1 p\n1\n2 2 c\n1", "cpa"], ["a\n6\n2 2 a\n2 1 b\n1\n2 2 c\n1\n1", "aabc"], ["y\n1\n2 1 x", "xy"]], "original": "function Main(input) {\n  \"use strict\"\n  const temp = input.split(\"\\n\");\n\n  const s = temp.shift().split()\n  const q = parseInt(temp.shift());\n  const queries = temp.map(query => query.split(\" \"));\n  let reverse_flag = 0\n\n  // queries.forEach( query => {\n  //   if(query.length == 1) reverse_flag = (reverse_flag + 1) % 2\n  //   else if(query.length == 3){\n  //     if((reverse_flag + parseInt(query[1]) % 2 == 0)) s.push(query[2])\n  //     else s.unshift(query[2])\n  //   }\n  // })\n\n  for(let i = 0; i < q; i++){\n    const query = queries[i]\n    if(query.length == 1) reverse_flag = (reverse_flag + 1) % 2\n    else if(query.length == 3){\n      if((reverse_flag + parseInt(query[1]) % 2 == 0)) s.push(query[2])\n      else s.unshift(query[2])\n    }\n  }\n  \n  if(reverse_flag) console.log(s.reverse().join(\"\") + \"\\n\");\n  else console.log(s.join(\"\") + \"\\n\");\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 61, "deobfuscated": "function Main(input) {\n  'use strict';\n\n  const temp = input.split(\"\\n\");\n  const s = temp.shift().split();\n  const q = parseInt(temp.shift());\n  const queries = temp.map(query => query.split(\" \"));\n  let reverse_flag = 0;\n  for (let i = 0; i < q; i++) {\n    const query = queries[i];\n    if (query.length == 1) {\n      reverse_flag = (reverse_flag + 1) % 2;\n    } else if (query.length == 3) {\n      if (reverse_flag + parseInt(query[1]) % 2 == 0) {\n        s.push(query[2]);\n      } else {\n        s.unshift(query[2]);\n      }\n    }\n  }\n  if (reverse_flag) {\n    console.log(s.reverse().join(\"\") + \"\\n\");\n  } else {\n    console.log(s.join(\"\") + \"\\n\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6446163082573466, "ngram_match_score": 0.33789557627975036, "weighted_ngram_match_score": 0.3562721360884788, "syntax_match_score": 0.8842975206611571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02760_1", "type": "JavaScript", "obfuscated": "function Main(input){var n=input[0x3];var ansmap=[[![],![],![]],[![],![],![]],[![],![],![]]];var chk=[];for(var i=0x4;i<n+0x4;i++){chk['push'](input[i]-0x0);}var map=[input[0x0]['split']('\\x20')['map'](v=>chk['indexOf'](v-0x0)>=0x0),input[0x1]['split']('\\x20')['map'](v=>chk['indexOf'](v-0x0)>=0x0),input[0x2]['split']('\\x20')['map'](v=>chk['indexOf'](v-0x0)>=0x0)];var flg=![];if(map[0x0][0x0]&&map[0x0][0x1]&&map[0x0][0x2])flg=!![];if(map[0x1][0x0]&&map[0x1][0x1]&&map[0x1][0x2])flg=!![];if(map[0x2][0x0]&&map[0x2][0x1]&&map[0x2][0x2])flg=!![];if(map[0x0][0x0]&&map[0x1][0x0]&&map[0x2][0x0])flg=!![];if(map[0x0][0x1]&&map[0x1][0x1]&&map[0x2][0x1])flg=!![];if(map[0x0][0x2]&&map[0x1][0x2]&&map[0x2][0x2])flg=!![];if(map[0x0][0x0]&&map[0x1][0x1]&&map[0x2][0x2])flg=!![];if(map[0x0][0x2]&&map[0x1][0x1]&&map[0x2][0x0])flg=!![];console['log'](flg?'Yes':'No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30", "Yes"], ["41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17", "No"], ["60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var n = input[3];\n    var ansmap = [\n        [false,false,false],\n        [false,false,false],\n        [false,false,false]];\n    var chk = [];\n    for(var i=4;i<n+4;i++){\n        chk.push(input[i]-0);\n    }\n    var map = [\n        input[0].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n        input[1].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n        input[2].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n    ];\n    var flg = false;\n    if(map[0][0]&&map[0][1]&&map[0][2]) flg = true;\n    if(map[1][0]&&map[1][1]&&map[1][2]) flg = true;\n    if(map[2][0]&&map[2][1]&&map[2][2]) flg = true;\n    if(map[0][0]&&map[1][0]&&map[2][0]) flg = true;\n    if(map[0][1]&&map[1][1]&&map[2][1]) flg = true;\n    if(map[0][2]&&map[1][2]&&map[2][2]) flg = true;\n    if(map[0][0]&&map[1][1]&&map[2][2]) flg = true;\n    if(map[0][2]&&map[1][1]&&map[2][0]) flg = true;\n    console.log(flg?\"Yes\":\"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 62, "deobfuscated": "function Main(input) {\n  var n = input[3];\n  var ansmap = [[false, false, false], [false, false, false], [false, false, false]];\n  var chk = [];\n  for (var i = 4; i < n + 4; i++) {\n    chk.push(input[i] - 0);\n  }\n  var map = [input[0].split(\" \").map(v => chk.indexOf(v - 0) >= 0), input[1].split(\" \").map(v => chk.indexOf(v - 0) >= 0), input[2].split(\" \").map(v => chk.indexOf(v - 0) >= 0)];\n  var flg = false;\n  if (map[0][0] && map[0][1] && map[0][2]) {\n    flg = true;\n  }\n  if (map[1][0] && map[1][1] && map[1][2]) {\n    flg = true;\n  }\n  if (map[2][0] && map[2][1] && map[2][2]) {\n    flg = true;\n  }\n  if (map[0][0] && map[1][0] && map[2][0]) {\n    flg = true;\n  }\n  if (map[0][1] && map[1][1] && map[2][1]) {\n    flg = true;\n  }\n  if (map[0][2] && map[1][2] && map[2][2]) {\n    flg = true;\n  }\n  if (map[0][0] && map[1][1] && map[2][2]) {\n    flg = true;\n  }\n  if (map[0][2] && map[1][1] && map[2][0]) {\n    flg = true;\n  }\n  console.log(flg ? \"Yes\" : \"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6139440037364895, "ngram_match_score": 0.15496879534333852, "weighted_ngram_match_score": 0.3563627751581751, "syntax_match_score": 0.9444444444444444, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011707073832879944, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.13293051359516617, "new_decrease_halstead_effort": 0.21771064115474992}}
{"filename": "p03017_1", "type": "JavaScript", "obfuscated": "debug=![];function log(...args){if(debug){console['log'](...args);}}function Main(input){lines=input['split']('\\x0a');f=lines[0x0]['split']('\\x20');N=f[0x0];A=f[0x1]*0x1;B=f[0x2]*0x1;C=f[0x3]*0x1;D=f[0x4]*0x1;s=lines[0x1];log(N,A,B,C,D,s);bool=!![];if(C>D){end=D;if(C-D<=0x2){end=C;}s2=s;if(s[D-0x2]=='#'){log(s2,s2[D-0x1]);s2[D-0x1]='#';s2=s2['slice'](0x0,D-0x1)+'#'+s2['slice'](D);}log(s2);str=s2['slice'](B-0x1,end);log(str,bool);bool=bool&&/\\.\\.\\./['test'](str);log(str,bool);}str=s['slice'](A-0x1,C);bool=bool&&!/##/['test'](str);log(str,bool);str=s['slice'](B-0x1,D);bool=bool&&!/##/['test'](str);log(str,bool);ans=bool?'Yes':'No';console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 1 3 6 7\n.#..#..", "Yes"], ["7 1 3 7 6\n.#..#..", "No"], ["15 1 3 15 13\n...#.#...#.#...", "Yes"]], "original": "debug = false\nfunction log(...args) {\n  if (debug) {\n    console.log(...args)\n  }\n}\n\nfunction Main(input) {\n  lines = input.split(\"\\n\")\n  f = lines[0].split(\" \")\n  N = f[0]\n  A = f[1] * 1\n  B = f[2] * 1\n  C = f[3] * 1\n  D = f[4] * 1\n  s = lines[1]\n  log(N, A, B, C, D, s)\n\n  bool = true\n  if (C > D) {\n    end = D\n    if (C - D <= 2) {\n      end = C\n    }\n    s2 = s\n    if (s[D - 2] == '#') {\n      log(s2, s2[D - 1])\n      s2[D - 1] = '#'\n      s2 = s2.slice(0, D - 1) + '#' + s2.slice(D)\n    }\n    log(s2)\n    str = s2.slice(B - 1, end)\n    log(str, bool)\n    bool = bool && (/\\.\\.\\./).test(str)\n    log(str, bool)\n  }\n  str = s.slice(A - 1, C)\n  bool = bool && !(/##/).test(str)\n  log(str, bool)\n  str = s.slice(B - 1, D)\n  bool = bool && !(/##/).test(str)\n  log(str, bool)\n\n  ans = bool ? 'Yes' : 'No'\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 63, "deobfuscated": "debug = false;\nfunction log(...args) {\n  if (debug) {\n    console.log(...args);\n  }\n}\nfunction Main(input) {\n  lines = input.split(\"\\n\");\n  f = lines[0].split(\" \");\n  N = f[0];\n  A = f[1] * 1;\n  B = f[2] * 1;\n  C = f[3] * 1;\n  D = f[4] * 1;\n  s = lines[1];\n  log(N, A, B, C, D, s);\n  bool = true;\n  if (C > D) {\n    end = D;\n    if (C - D <= 2) {\n      end = C;\n    }\n    s2 = s;\n    if (s[D - 2] == \"#\") {\n      log(s2, s2[D - 1]);\n      s2[D - 1] = \"#\";\n      s2 = s2.slice(0, D - 1) + \"#\" + s2.slice(D);\n    }\n    log(s2);\n    str = s2.slice(B - 1, end);\n    log(str, bool);\n    bool = bool && /\\.\\.\\./.test(str);\n    log(str, bool);\n  }\n  str = s.slice(A - 1, C);\n  bool = bool && !/##/.test(str);\n  log(str, bool);\n  str = s.slice(B - 1, D);\n  bool = bool && !/##/.test(str);\n  log(str, bool);\n  ans = bool ? \"Yes\" : \"No\";\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7024665510027226, "ngram_match_score": 0.4732185857518366, "weighted_ngram_match_score": 0.4747691652203798, "syntax_match_score": 0.861878453038674, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0025808786542598217, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020576131687242816, "new_decrease_halstead_effort": 0.08996293160257396}}
{"filename": "p03085_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input=input[0x0];switch(input){case'A':{console['log']('T');return;}case'T':{console['log']('A');return;}case'C':{console['log']('G');return;}case'G':{console['log']('C');return;}default:{return;}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["A", "T"], ["G", "C"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    input = input[0]\n    switch(input) {\n        case 'A': {\n            console.log('T');\n            return;\n        }\n        case 'T': {\n            console.log('A');\n            return;\n        }\n        case 'C': {\n            console.log('G');\n            return;\n        }\n        case 'G': {\n            console.log('C');\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 64, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input = input[0];\n  switch (input) {\n    case \"A\":\n      {\n        console.log(\"T\");\n        return;\n      }\n    case \"T\":\n      {\n        console.log(\"A\");\n        return;\n      }\n    case \"C\":\n      {\n        console.log(\"G\");\n        return;\n      }\n    case \"G\":\n      {\n        console.log(\"C\");\n        return;\n      }\n    default:\n      {\n        return;\n      }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6974439572942079, "ngram_match_score": 0.38901651606440335, "weighted_ngram_match_score": 0.4007593131124286, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03087_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['split']('\\x0a');var nq=arr[0x0]['split']('\\x20')['map'](Number);var str=arr[0x1];var a=[0x0,0x0];var cnt=0x0;for(var i=0x1;i<str['length'];i++){if(str[i]=='C'&&str[i-0x1]=='A')cnt++;a['push'](cnt);}var ans=[];for(var i=0x2,len=nq[0x1]+0x2;i<len;i++){var lr=arr[i]['split']('\\x20');ans['push'](a[lr[0x1]-0x0]-a[lr[0x0]-0x0]);}console['log'](ans['join']('\\x0a'));", "test_cases": [["8 3\nACACTACG\n3 7\n2 3\n1 8", "2\n0\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.split(\"\\n\");\nvar nq=arr[0].split(\" \").map(Number);\nvar str = arr[1];\nvar a=[0,0];\nvar cnt=0;\nfor(var i=1;i<str.length;i++){\n   if(str[i]==\"C\" && str[i-1]==\"A\")cnt++;\n   a.push(cnt);\n}\nvar ans=[];\nfor(var i=2,len=nq[1]+2;i<len;i++){\n   var lr=arr[i].split(\" \");\n   ans.push(a[lr[1]-0]-a[lr[0]-0]);\n}\nconsole.log(ans.join(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 65, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.split(\"\\n\");\nvar nq = arr[0].split(\" \").map(Number);\nvar str = arr[1];\nvar a = [0, 0];\nvar cnt = 0;\nfor (var i = 1; i < str.length; i++) {\n  if (str[i] == \"C\" && str[i - 1] == \"A\") {\n    cnt++;\n  }\n  a.push(cnt);\n}\nvar ans = [];\nfor (var i = 2, len = nq[1] + 2; i < len; i++) {\n  var lr = arr[i].split(\" \");\n  ans.push(a[lr[1] - 0] - a[lr[0] - 0]);\n}\nconsole.log(ans.join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.575428316666875, "ngram_match_score": 0.09277438541849259, "weighted_ngram_match_score": 0.24975520777961976, "syntax_match_score": 0.9591836734693877, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03108_1", "type": "JavaScript", "obfuscated": "'use strict';const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['map'](line=>line['split']('\\x20')['map'](val=>parseInt(val),0xa));const N=input[0x0][0x0];const M=input[0x0][0x1];const ans=[];const par=[];for(let i=0x1;i<=N;i++){par[i]=-0x1;}function root(x){if(par[x]<0x0){return x;}return par[x]=root(par[x]);}function unite(x,y){const rx=root(x);const ry=root(y);if(rx===ry){return;}par[ry]+=par[rx];par[rx]=ry;}function isSame(x,y){return root(x)===root(y);}function getSize(x){return-par[root(x)];}ans[M]=N*(N-0x1)/0x2;for(let i=M;i>0x1;i--){const x=input[i][0x0];const y=input[i][0x1];if(isSame(x,y)){ans[i-0x1]=ans[i];continue;}ans[i-0x1]=ans[i]-getSize(x)*getSize(y);unite(x,y);}for(let i=0x1;i<=M;i++){console['log'](ans[i]);}", "test_cases": [["4 5\n1 2\n3 4\n1 3\n2 3\n1 4", "0\n0\n4\n5\n6"], ["6 5\n2 3\n1 2\n5 6\n3 4\n4 5", "8\n9\n12\n14\n15"], ["2 1\n1 2", "1"]], "original": "\"use strict\";\n\n// read lines from stdin\nconst input = require(\"fs\")\n  .readFileSync(\"/dev/stdin\", \"utf8\")\n  .trim()\n  .split(\"\\n\")\n  .map((line) => line.split(\" \").map((val) => parseInt(val), 10));\n\nconst N = input[0][0];\nconst M = input[0][1];\n\nconst ans = [];\n\n// Union-Find\n\nconst par = [];\n\nfor (let i = 1; i <= N; i++) {\n  par[i] = -1;\n}\n\nfunction root(x) {\n  if (par[x] < 0) { return x; }\n  return par[x] = root(par[x]);\n}\n\nfunction unite(x, y) {\n  const rx = root(x);\n  const ry = root(y);\n  if (rx === ry) { return; }\n\n  par[ry] += par[rx];\n  par[rx] = ry;\n}\n\nfunction isSame(x, y) {\n  return root(x) === root(y);\n}\n\nfunction getSize(x) {\n  return -par[root(x)];\n}\n\n// end Union-Find\n\nans[M] = N * (N - 1) / 2;\n\nfor (let i = M; i > 1; i--) {\n  const x = input[i][0];\n  const y = input[i][1];\n\n  if (isSame(x, y)) {\n    ans[i - 1] = ans[i];\n    continue;\n  }\n\n  ans[i - 1] = ans[i] - (getSize(x) * getSize(y));\n  unite(x, y);\n}\n\nfor (let i = 1; i <= M; i++) {\n  console.log(ans[i]);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 66, "deobfuscated": "'use strict';\n\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(line => line.split(\" \").map(val => parseInt(val), 10));\nconst N = input[0][0];\nconst M = input[0][1];\nconst ans = [];\nconst par = [];\nfor (let i = 1; i <= N; i++) {\n  par[i] = -1;\n}\nfunction root(x) {\n  if (par[x] < 0) {\n    return x;\n  }\n  return par[x] = root(par[x]);\n}\nfunction unite(x, y) {\n  const rx = root(x);\n  const ry = root(y);\n  if (rx === ry) {\n    return;\n  }\n  par[ry] += par[rx];\n  par[rx] = ry;\n}\nfunction isSame(x, y) {\n  return root(x) === root(y);\n}\nfunction getSize(x) {\n  return -par[root(x)];\n}\nans[M] = N * (N - 1) / 2;\nfor (let i = M; i > 1; i--) {\n  const x = input[i][0];\n  const y = input[i][1];\n  if (isSame(x, y)) {\n    ans[i - 1] = ans[i];\n    continue;\n  }\n  ans[i - 1] = ans[i] - getSize(x) * getSize(y);\n  unite(x, y);\n}\nfor (let i = 1; i <= M; i++) {\n  console.log(ans[i]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8969644444547891, "ngram_match_score": 0.8306239704730692, "weighted_ngram_match_score": 0.8424610800733601, "syntax_match_score": 0.9147727272727273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03137_1", "type": "JavaScript", "obfuscated": "var readline=require('readline');var lines=[];var result=0x0;var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]['split']('\\x20')[0x0]);var M=Number(lines[0x0]['split']('\\x20')[0x1]);var X=lines[0x1]['split']('\\x20')['map'](value=>Number(value));X['sort']((a,b)=>a-b);var sum=Array(M)['fill'](0x0);for(var i=0x1;i<M;i++){sum[i]=X[i]-X[i-0x1];}sum['sort']((a,b)=>b-a);for(var i=N-0x1;i<M;i++){result+=sum[i];}console['log'](result);});", "test_cases": [["2 5\n10 12 1 2 14", "5"], ["3 7\n-10 -3 0 9 -100 2 17", "19"], ["100 1\n-100000", "0"]], "original": "var readline = require('readline');\nvar lines = []; var result = 0;\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var M = Number(lines[0].split(\" \")[1]);\n    var X = lines[1].split(\" \").map(value => Number(value));\n\n    X.sort((a, b) => a - b);\n\n    var sum = Array(M).fill(0);\n    for (var i = 1; i < M; i++) { sum[i] = X[i] - X[i - 1]; }\n\n    sum.sort((a, b) => b - a);\n\n    for (var i = N - 1; i < M; i++) { result += sum[i] }\n    \n    console.log(result);\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 67, "deobfuscated": "var readline = require(\"readline\");\nvar lines = [];\nvar result = 0;\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0].split(\" \")[0]);\n  var M = Number(lines[0].split(\" \")[1]);\n  var X = lines[1].split(\" \").map(value => Number(value));\n  X.sort((a, b) => a - b);\n  var sum = Array(M).fill(0);\n  for (var i = 1; i < M; i++) {\n    sum[i] = X[i] - X[i - 1];\n  }\n  sum.sort((a, b) => b - a);\n  for (var i = N - 1; i < M; i++) {\n    result += sum[i];\n  }\n  console.log(result);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9402877091805514, "ngram_match_score": 0.8787123821274304, "weighted_ngram_match_score": 0.8824384545947752, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03328_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');var a=parseInt(input[0x0],0xa);var b=parseInt(input[0x1],0xa);var a_real=0x1;var b_real=0x1;var a_count=0x1;var b_count=0x1;var ans=0x0;while(!![]){while(!![]){a_count++;a_real+=a_count;b_count++;b_real+=b_count;if(a_real>a){break;}}while(!![]){b_count++;b_real+=b_count;if(b_real>b){break;}}if(a_real-a==b_real-b){break;}}ans=a_real-a;console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8 13", "2"], ["54 65", "1"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    input = input.split(' ');\n    //文字列から10進数に変換するときはparseIntを使います\n    var a = parseInt(input[0], 10);\n    var b = parseInt(input[1], 10);\n    \n    var a_real = 1;\n    var b_real = 1;\n    var a_count = 1\n    var b_count = 1\n    var ans = 0;\n    while ( true ) {\n        while ( true ) {\n            a_count++;\n            a_real += a_count;\n            b_count++;\n            b_real += b_count;\n            if (a_real > a) {\n                break;\n            }\n        }\n        while ( true ) {\n            b_count++;\n            b_real += b_count;\n            if (b_real > b) {\n                break;\n            }\n        }\n        if ( (a_real - a) == (b_real - b)) {\n            break;\n        }\n    }\n    ans = a_real - a;\n    console.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 68, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  var a = parseInt(input[0], 10);\n  var b = parseInt(input[1], 10);\n  var a_real = 1;\n  var b_real = 1;\n  var a_count = 1;\n  var b_count = 1;\n  var ans = 0;\n  while (true) {\n    while (true) {\n      a_count++;\n      a_real += a_count;\n      b_count++;\n      b_real += b_count;\n      if (a_real > a) {\n        break;\n      }\n    }\n    while (true) {\n      b_count++;\n      b_real += b_count;\n      if (b_real > b) {\n        break;\n      }\n    }\n    if (a_real - a == b_real - b) {\n      break;\n    }\n  }\n  ans = a_real - a;\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.807217418125747, "ngram_match_score": 0.6516288477806109, "weighted_ngram_match_score": 0.6681499156314678, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.01040057373054104, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07692307692307687, "new_decrease_halstead_effort": 0.2118907910677431}}
{"filename": "p03363_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=arg[0x0]*0x1;const nums=arg[0x1]['split']('\\x20')['map'](x=>x*0x1);const totalSum=new Array(N)['fill'](0x0);for(let i=0x0;i<N;i++){totalSum[i]+=(totalSum[i-0x1]||0x0)+nums[i];}let accumObj={};accumObj[0x0]=0x1;for(let i=0x0;i<N;i++){accumObj[totalSum[i]]=(accumObj[totalSum[i]]||0x0)+0x1;}let ans=0x0;Object['keys'](accumObj)['forEach'](x=>{ans+=accumObj[x]*(accumObj[x]-0x1)/0x2;});console['log'](ans);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n1 3 -4 2 2 -2", "3"], ["7\n1 -1 1 -1 1 -1 1", "12"], ["5\n1 -2 3 -4 5", "0"]], "original": "\"use strict\";\n// 人様のコード参照\nconst main = arg => {\n  \t// お決まりの処理たち\n    arg = arg.trim().split(\"\\n\");\n    const N = arg[0] * 1;\n    const nums = arg[1].split(\" \").map(x => x*1);\n  \t// とりあえず累積和出してみる\n  \tconst totalSum = new Array(N).fill(0);\n   \t// forEachよくないんじゃないか説\n  \tfor(let i = 0; i < N; i++){\n      totalSum[i] += (totalSum[i - 1] || 0) + nums[i];\n    }\n  \n  \t// それぞれの組み合わせがいくつずつかを調べていく\n  \t// そのためにオブジェクト化\n  \tlet accumObj = {};\n  \t// accumObj[0]は必ず存在している体で（理由は不明確）\n  \taccumObj[0] = 1;\n  \tfor(let i = 0; i < N; i++){\n      accumObj[totalSum[i]] = (accumObj[totalSum[i]] || 0) + 1;\n    }\n  \tlet ans = 0;\n  \t// それぞれのエンティティで2つとってくる値を計算する\n  \tObject.keys(accumObj).forEach((x)=> {\n    \tans += accumObj[x]*(accumObj[x]-1)/2\n    })\n  \n  \tconsole.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 69, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = arg[0] * 1;\n  const nums = arg[1].split(\" \").map(x => x * 1);\n  const totalSum = new Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    totalSum[i] += (totalSum[i - 1] || 0) + nums[i];\n  }\n  let accumObj = {\n    0: 1\n  };\n  for (let i = 0; i < N; i++) {\n    accumObj[totalSum[i]] = (accumObj[totalSum[i]] || 0) + 1;\n  }\n  let ans = 0;\n  Object.keys(accumObj).forEach(x => {\n    ans += accumObj[x] * (accumObj[x] - 1) / 2;\n  });\n  console.log(ans);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6907506268552639, "ngram_match_score": 0.5249990058841932, "weighted_ngram_match_score": 0.5385987396321005, "syntax_match_score": 0.8660714285714286, "dataflow_match_score": 0.8333333333333334}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02266_1", "type": "JavaScript", "obfuscated": "const calc=str=>{const areas=[];const depthIndexes=[];let sum=0x0;for(let i=0x0;i<str['length'];i++){const char=str[i];if(char==='\\x5c'){depthIndexes['push'](i);continue;}if(char==='/'&&depthIndexes['length']>0x0){const j=depthIndexes['pop']();sum+=i-j;let currentArea=i-j;while(areas['length']>0x0&&areas[areas['length']-0x1]['depth']>j){currentArea+=areas[areas['length']-0x1]['area'];areas['pop']();}areas['push']({'depth':j,'area':currentArea});}}console['log'](sum);if(areas['length']===0x0){console['log'](0x0);return;}console['log'](areas['length']+'\\x20'+areas['map'](obj=>obj['area'])['join']('\\x20'));};let inputStr='';process['stdin']['on']('data',input=>{inputStr+=String['raw']`${input}`;});process['stdin']['on']('end',()=>{calc(inputStr);});", "test_cases": [["\\\\//", "4\n1 4"], ["\\\\///\\_/\\/\\\\\\\\/_/\\\\///__\\\\\\_\\\\/_\\/_/\\", "35\n5 4 2 1 19 9"]], "original": "const calc = (str) => {\n  const areas = [];\n  const depthIndexes = [];\n  let sum = 0;\n\n  for (let i=0; i<str.length; i++) {\n    const char = str[i];\n\n    if (char === '\\\\') {\n      depthIndexes.push(i);\n      continue;\n    }\n\n    if (char === '/' && depthIndexes.length > 0) {\n      const j = depthIndexes.pop();\n      sum += i - j;\n      let currentArea = i - j;\n      while (areas.length > 0 && areas[areas.length-1].depth > j) {\n        currentArea += areas[areas.length-1].area;\n        areas.pop();\n      }\n      areas.push({\n        depth: j,\n        area: currentArea,\n      });\n    }\n  }\n\n\n\n  console.log(sum);\n  if (areas.length === 0) {\n    console.log(0);\n    return;\n  }\n  console.log(`${areas.length} ${areas.map(obj => obj.area).join(' ')}`);\n};\n\n\nlet inputStr = '';\nprocess.stdin.on('data', (input) => { inputStr += String.raw`${input}` });\n\nprocess.stdin.on('end', () => { calc(inputStr); });\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 70, "deobfuscated": "const calc = str => {\n  const areas = [];\n  const depthIndexes = [];\n  let sum = 0;\n  for (let i = 0; i < str.length; i++) {\n    const char = str[i];\n    if (char === \"\\\\\") {\n      depthIndexes.push(i);\n      continue;\n    }\n    if (char === \"/\" && depthIndexes.length > 0) {\n      const j = depthIndexes.pop();\n      sum += i - j;\n      let currentArea = i - j;\n      while (areas.length > 0 && areas[areas.length - 1].depth > j) {\n        currentArea += areas[areas.length - 1].area;\n        areas.pop();\n      }\n      areas.push({\n        depth: j,\n        area: currentArea\n      });\n    }\n  }\n  console.log(sum);\n  if (areas.length === 0) {\n    console.log(0);\n    return;\n  }\n  console.log(areas.length + \" \" + areas.map(obj => obj.area).join(\" \"));\n};\nlet inputStr = \"\";\nprocess.stdin.on(\"data\", input => {\n  inputStr += String.raw`${input}`;\n});\nprocess.stdin.on(\"end\", () => {\n  calc(inputStr);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6370628630265955, "ngram_match_score": 0.6290393683867084, "weighted_ngram_match_score": 0.704759869267459, "syntax_match_score": 0.8811188811188811, "dataflow_match_score": 0.3333333333333333}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02268_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');const binarySearch=(key,arr,N)=>{let mid;let left=0x0;let right=N;while(left<right){mid=Math['floor']((left+right)/0x2);if(key<arr[mid])right=mid;else if(key>arr[mid])left=mid+0x1;else return 0x1;}return 0x0;};(function(){const N1=Number(Arr[0x0]);const arr1=Arr[0x1]['split']('\\x20')['map'](Number);const arr2=Arr[0x3]['split']('\\x20')['map'](Number);console['log'](arr2['map'](e=>binarySearch(e,arr1,N1))['reduce']((a,b)=>a+b,0x0));}());", "test_cases": [["5\n1 2 3 4 5\n3\n3 4 1", "3"], ["3\n1 2 3\n1\n5", "0"], ["5\n1 1 2 2 3\n2\n1 2", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr = (input.trim()).split(\"\\n\");\n\nconst binarySearch = (key, arr, N) => {\n  let mid;\n  let left = 0;\n  let right = N;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (key < arr[mid]) right = mid;\n    else if (key > arr[mid]) left = mid + 1;\n    else return 1;\n  }\n  return 0;\n}\n\n\n(function() {\n  const N1 = Number(Arr[0]);\n  const arr1 = Arr[1].split(\" \").map(Number);\n  // const N2 = Number(Arr[2]);\n  const arr2 = Arr[3].split(\" \").map(Number);\n  console.log(arr2.map(e => binarySearch(e, arr1, N1)).reduce((a, b) => a + b, 0));\n})();\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 71, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nconst binarySearch = (key, arr, N) => {\n  let mid;\n  let left = 0;\n  let right = N;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (key < arr[mid]) {\n      right = mid;\n    } else if (key > arr[mid]) {\n      left = mid + 1;\n    } else {\n      return 1;\n    }\n  }\n  return 0;\n};\n(function () {\n  const N1 = Number(Arr[0]);\n  const arr1 = Arr[1].split(\" \").map(Number);\n  const arr2 = Arr[3].split(\" \").map(Number);\n  console.log(arr2.map(e => binarySearch(e, arr1, N1)).reduce((a, b) => a + b, 0));\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7037191548462182, "ngram_match_score": 0.7286484405941013, "weighted_ngram_match_score": 0.7470265918827623, "syntax_match_score": 0.8256880733944955, "dataflow_match_score": 0.5135135135135135}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02271_1", "type": "JavaScript", "obfuscated": "(function main(){const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const n1=Number(lines['shift']());const arr1=lines['shift']()['split']('\\x20')['map'](Number);const n2=Number(lines['shift']());const arr2=lines['shift']()['split']('\\x20')['map'](Number);const solve=(i,m)=>{if(m==0x0)return!![];if(i>=n1)return![];return solve(i+0x1,m)||solve(i+0x1,m-arr1[i]);};arr2['map'](m=>solve(0x0,m)?'yes':'no')['forEach'](res=>console['log'](res));}());", "test_cases": [["5\n1 5 7 10 21\n8\n2 4 17 8 22 21 100 35", "no\nno\nyes\nyes\nyes\nyes\nno\nno"]], "original": "(function main() {\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n1 = Number(lines.shift());\n  const arr1 = lines.shift().split(' ').map(Number);\n  const n2 = Number(lines.shift());\n  const arr2 = lines.shift().split(' ').map(Number);\n\n  const solve = (i, m) => {\n    if (m == 0) return true;\n    if (i >= n1) return false;\n    return solve(i + 1, m) || solve(i + 1, m - arr1[i]);\n  };\n\n  arr2.map(m => solve(0, m) ? 'yes' : 'no').forEach(res => console.log(res));\n})();\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 72, "deobfuscated": "(function main() {\n  const lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  const n1 = Number(lines.shift());\n  const arr1 = lines.shift().split(\" \").map(Number);\n  const n2 = Number(lines.shift());\n  const arr2 = lines.shift().split(\" \").map(Number);\n  const solve = (i, m) => {\n    if (m == 0) {\n      return true;\n    }\n    if (i >= n1) {\n      return false;\n    }\n    return solve(i + 1, m) || solve(i + 1, m - arr1[i]);\n  };\n  arr2.map(m => solve(0, m) ? \"yes\" : \"no\").forEach(res => console.log(res));\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7875103190004452, "ngram_match_score": 0.6468467495688377, "weighted_ngram_match_score": 0.6937734548759489, "syntax_match_score": 0.883495145631068, "dataflow_match_score": 0.9259259259259259}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02404_1", "type": "JavaScript", "obfuscated": "let content='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',buf=>{content+=buf;});process['stdin']['on']('end',()=>{const rects=content['trim']()['split']('\\x0a')['map'](line=>line['split']('\\x20')['map'](n=>parseInt(n,0xa)));for(const rect of rects){if(rect[0x0]!==0x0||rect[0x1]!==0x0){console['log'](drawReact(rect));}}});const drawReact=([h,w])=>{const hline='#'['repeat'](w)+'\\x0a';return hline+('#'+'.'['repeat'](w-0x2)+'#\\x0a')['repeat'](h-0x2)+hline;};", "test_cases": [["3 4\n5 6\n3 3\n0 0", "####\n#..#\n####\n\n######\n#....#\n#....#\n#....#\n######\n\n###\n#.#\n###"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\nprocess.stdin.on('end', () => {\n  const rects = content\n    .trim()\n    .split('\\n')\n    .map(line => line.split(' ').map(n => parseInt(n, 10)));\n\n  for (const rect of rects) {\n    if (rect[0] !== 0 || rect[1] !== 0) {\n      console.log(drawReact(rect));\n    }\n  }\n});\n\nconst drawReact = ([h, w]) => {\n  const hline = '#'.repeat(w) + '\\n';\n  return hline + `#${'.'.repeat(w - 2)}#\\n`.repeat(h - 2) + hline;\n};\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 73, "deobfuscated": "let content = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", buf => {\n  content += buf;\n});\nprocess.stdin.on(\"end\", () => {\n  const rects = content.trim().split(\"\\n\").map(line => line.split(\" \").map(n => parseInt(n, 10)));\n  for (const rect of rects) {\n    if (rect[0] !== 0 || rect[1] !== 0) {\n      console.log(drawReact(rect));\n    }\n  }\n});\nconst drawReact = ([h, w]) => {\n  const hline = \"#\".repeat(w) + \"\\n\";\n  return hline + (\"#\" + \".\".repeat(w - 2) + \"#\\n\").repeat(h - 2) + hline;\n};\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7256175551945298, "ngram_match_score": 0.6439502216739976, "weighted_ngram_match_score": 0.663046166006526, "syntax_match_score": 0.8811881188118812, "dataflow_match_score": 0.7142857142857143}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02577_1", "type": "JavaScript", "obfuscated": "function Main(input){let num=parseInt(input,0xa);let sum=0x0;let tmp=0x0;for(let i=input['length']-0x1;0x0<=i;i--){tmp=Math['floor'](num/Math['pow'](0xa,i));sum+=tmp;num-=tmp*Math['pow'](0xa,i);}const ans=sum%0x9===0x0?'Yes':'No';console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["123456789", "Yes"], ["0", "Yes"], ["31415926535897932384626433832795028841971693993751058209749445923078164062862089986280", "No"]], "original": "function Main(input) {\n\tlet num = parseInt(input, 10);\n\tlet sum = 0;\n\tlet tmp = 0;\n\tfor(let i = input.length - 1; 0 <= i; i--) {\n\t\ttmp = Math.floor(num / Math.pow(10, i));\n\t\tsum += tmp;\n\t\tnum -= tmp * Math.pow(10, i);\n\t}\n\tconst ans = sum % 9 === 0 ? 'Yes' : 'No'\n\tconsole.log(ans);\n};\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 74, "deobfuscated": "function Main(input) {\n  let num = parseInt(input, 10);\n  let sum = 0;\n  let tmp = 0;\n  for (let i = input.length - 1; i >= 0; i--) {\n    tmp = Math.floor(num / Math.pow(10, i));\n    sum += tmp;\n    num -= tmp * Math.pow(10, i);\n  }\n  const ans = sum % 9 === 0 ? \"Yes\" : \"No\";\n  console.log(ans);\n}\n;\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8507235387223406, "ngram_match_score": 0.7478741039946368, "weighted_ngram_match_score": 0.7804077336594573, "syntax_match_score": 0.9016393442622951, "dataflow_match_score": 0.972972972972973}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02578_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{var N=parseInt(lines[0x0]);var sum=0x0;var MaxNum=0x0;for(var i=0x0;i<N;i++){var Ai=parseInt(lines[0x1]['split']('\\x20')[i]);MaxNum=Math['max'](MaxNum,Ai);sum+=MaxNum-Ai;}console['log'](sum);});", "test_cases": [["5\n2 1 5 4 3", "4"], ["5\n3 3 3 3 3", "0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var N = parseInt(lines[0]);\n \n  var sum = 0;\n  var MaxNum = 0;\n  for (var i = 0; i < N; i++) {\n    var Ai = parseInt(lines[1].split(' ')[i]);\n\tMaxNum = Math.max(MaxNum, Ai);\n    sum += MaxNum - Ai;\n  }\n  \n  console.log(sum);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 75, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  var N = parseInt(lines[0]);\n  var sum = 0;\n  var MaxNum = 0;\n  for (var i = 0; i < N; i++) {\n    var Ai = parseInt(lines[1].split(\" \")[i]);\n    MaxNum = Math.max(MaxNum, Ai);\n    sum += MaxNum - Ai;\n  }\n  console.log(sum);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8604050818026825, "ngram_match_score": 0.7743479769479292, "weighted_ngram_match_score": 0.78148423656771, "syntax_match_score": 0.9302325581395349, "dataflow_match_score": 0.9555555555555556}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02613_1", "type": "JavaScript", "obfuscated": "const main=input=>{const [n,...rows]=input['trim']()['split']('\\x0a');const k=['AC','WA','TLE','RE'];const ans={};for(let v of k)ans[v]=0x0;for(let r of rows)ans[r]+=0x1;for(let v of k)console['log'](v+'\\x20x\\x20'+ans[v]);};process['env']['MYTEST']?test():main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\nAC\nTLE\nAC\nAC\nWA\nTLE", "AC x 3\nWA x 1\nTLE x 2\nRE x 0"], ["10\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC", "AC x 10\nWA x 0\nTLE x 0\nRE x 0"]], "original": "const main = (input) => {\n  const [n, ...rows] = input.trim().split('\\n')\n  const k = ['AC', 'WA', 'TLE', 'RE']\n  const ans = {}\n  for (let v of k) ans[v] = 0\n\n  for (let r of rows) ans[r] += 1\n\n  for (let v of k) console.log(`${v} x ${ans[v]}`)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 76, "deobfuscated": "const main = input => {\n  const [n, ...rows] = input.trim().split(\"\\n\");\n  const k = [\"AC\", \"WA\", \"TLE\", \"RE\"];\n  const ans = {};\n  for (let v of k) {\n    ans[v] = 0;\n  }\n  for (let r of rows) {\n    ans[r] += 1;\n  }\n  for (let v of k) {\n    console.log(v + \" x \" + ans[v]);\n  }\n};\nif (process.env.MYTEST) {\n  test();\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45664689827525873, "ngram_match_score": 0.2897165021480912, "weighted_ngram_match_score": 0.3827044242862769, "syntax_match_score": 0.7166666666666667, "dataflow_match_score": 0.4375}, "code_complexity": {"difference_score": 1.5, "length_score": -1.5, "increase_maintainability": -0.11133541932602742, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.04761904761904767, "new_decrease_halstead_effort": -0.2871032104722151}}
{"filename": "p02615_1", "type": "JavaScript", "obfuscated": "const main=input=>{input=input['trim']()['split']('\\x0a');let n=parseInt(input[0x0],0xa)-0x2;const nums=input[0x1]['split']('\\x20')['map'](Number)['sort']((a,b)=>b-a);let r=[0x1];for(n;n>=0x2;n-=0x2)r['push'](0x2);r['push'](n);return console['log'](r['reduce']((a,b,i)=>a+b*nums[i],0x0));};process['env']['MYTEST']?test():main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n2 2 1 3", "7"], ["7\n1 1 1 1 1 1 1", "6"]], "original": "const main = (input) => {\n\n  input = input.trim().split('\\n')\n  let n = parseInt(input[0], 10) - 2\n  const nums = input[1].split(' ').map(Number).sort((a, b) => b - a)\n\n  let r = [1]\n  for (n; n >= 2; n-=2) r.push(2)\n  r.push(n)\n\n  return console.log(r.reduce((a, b, i) => a + (b * nums[i]), 0))\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 77, "deobfuscated": "const main = input => {\n  input = input.trim().split(\"\\n\");\n  let n = parseInt(input[0], 10) - 2;\n  const nums = input[1].split(\" \").map(Number).sort((a, b) => b - a);\n  let r = [1];\n  for (n; n >= 2; n -= 2) {\n    r.push(2);\n  }\n  r.push(n);\n  return console.log(r.reduce((a, b, i) => a + b * nums[i], 0));\n};\nif (process.env.MYTEST) {\n  test();\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.571616036294712, "ngram_match_score": 0.3420719249741216, "weighted_ngram_match_score": 0.4066112541597716, "syntax_match_score": 0.7926829268292683, "dataflow_match_score": 0.7450980392156863}, "code_complexity": {"difference_score": 1.5, "length_score": -1.5, "increase_maintainability": -0.11133541932602742, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.04761904761904767, "new_decrease_halstead_effort": -0.2871032104722151}}
{"filename": "p02628_1", "type": "JavaScript", "obfuscated": "function main(lines){const [N,K]=parseNumberLine(lines[0x0]);const prices=parseNumberLine(lines[0x1])['sort']((a,b)=>a-b);let total=0x0;for(let i=0x0;i<K;++i){total+=prices[i];}console['log'](total);}function parseNumberLine(line,radix=0xa){return line['split'](/\\s+/)['map'](_=>parseInt(_,radix));}main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["5 3\n50 100 80 120 80", "210"], ["1 1\n1000", "1000"]], "original": "function main(lines) {\n    const [N, K] = parseNumberLine(lines[0])\n    const prices = parseNumberLine(lines[1])\n    \t.sort((a, b) => a - b)\n\n    let total = 0\n    for (let i = 0; i < K; ++i) {\n      total += prices[i]\n    }\n    console.log(total)\n}\n\nfunction parseNumberLine(line, radix = 10) {\n    return line.split(/\\s+/).map(_ => parseInt(_, radix))\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 78, "deobfuscated": "function main(lines) {\n  const [N, K] = parseNumberLine(lines[0]);\n  const prices = parseNumberLine(lines[1]).sort((a, b) => a - b);\n  let total = 0;\n  for (let i = 0; i < K; ++i) {\n    total += prices[i];\n  }\n  console.log(total);\n}\nfunction parseNumberLine(line, radix = 10) {\n  return line.split(/\\s+/).map(_ => parseInt(_, radix));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8101030090476367, "ngram_match_score": 0.6148502450871305, "weighted_ngram_match_score": 0.625561791103416, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02675_1", "type": "JavaScript", "obfuscated": "function Main(input){input=''+input+'';input=input['substr'](input['length']-0x1,0x1);var d='';if(input==0x2||input==0x4||input==0x5||input==0x7||input==0x9){d='hon';}if(input==0x0||input==0x1||input==0x6||input==0x8){d='pon';}if(input==0x3){d='bon';}console['log'](d);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["16", "pon"], ["2", "hon"], ["183", "bon"]], "original": "function Main(input)\n{\n\tinput = \"\"+input+\"\";\n\tinput = input.substr(input.length - 1, 1);\n\tvar d = \"\";\n\n\tif (input == 2 || input == 4 || input == 5 ||input == 7 ||input == 9 )\n\t{\n\t\td = \"hon\";\n\t}\n\n\tif (input == 0 || input == 1 || input == 6 ||input == 8)\n\t{\n\t\td = \"pon\";\n\t}\n\n\tif (input == 3 )\n\t{\n\t\td = \"bon\";\n\t}\n\n\tconsole.log(d);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 79, "deobfuscated": "function Main(input) {\n  input = \"\" + input + \"\";\n  input = input.substr(input.length - 1, 1);\n  var d = \"\";\n  if (input == 2 || input == 4 || input == 5 || input == 7 || input == 9) {\n    d = \"hon\";\n  }\n  if (input == 0 || input == 1 || input == 6 || input == 8) {\n    d = \"pon\";\n  }\n  if (input == 3) {\n    d = \"bon\";\n  }\n  console.log(d);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8757066970281865, "ngram_match_score": 0.7239719845441478, "weighted_ngram_match_score": 0.778854803568598, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02830_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a');const N=parseInt(input[0x0]);const array=input[0x1]['split']('\\x20');const S=array[0x0];const T=array[0x1];let ans='';for(let i=0x0;i<N;++i){ans+=S[i];ans+=T[i];}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\nip cc", "icpc"], ["8\nhmhmnknk uuuuuuuu", "humuhumunukunuku"], ["5\naaaaa aaaaa", "aaaaaaaaaa"]], "original": "function Main(input) {\n  input = input.trim().split('\\n')\n  const N = parseInt(input[0])\n  const array = input[1].split(' ')\n  const S = array[0]\n  const T = array[1]\n  let ans = ''\n  for(let i = 0; i < N; ++i) {\n    ans += S[i]\n    ans += T[i]\n  }\n \n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 80, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = parseInt(input[0]);\n  const array = input[1].split(\" \");\n  const S = array[0];\n  const T = array[1];\n  let ans = \"\";\n  for (let i = 0; i < N; ++i) {\n    ans += S[i];\n    ans += T[i];\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7141956081384491, "ngram_match_score": 0.41847012594193383, "weighted_ngram_match_score": 0.43831230661186227, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02848_1", "type": "JavaScript", "obfuscated": "function Main(input){const inputs=input['split']('\\x0a')['filter'](v=>v);const n=Number(inputs[0x0]);const strs=inputs[0x1]['split']('');console['log'](strs['map'](function(s){let c=s['charCodeAt']()+n;if(c>0x5a){c-=0x1a;}return String['fromCharCode'](c);})['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\nABCXYZ", "CDEZAB"], ["0\nABCXYZ", "ABCXYZ"], ["13\nABCDEFGHIJKLMNOPQRSTUVWXYZ", "NOPQRSTUVWXYZABCDEFGHIJKLM"]], "original": "function Main(input) {\n  const inputs = input.split('\\n')\n    .filter(v => v);\n  const n = Number(inputs[0]);\n  const strs = inputs[1]\n    .split('');\n  \n  console.log(strs.map(function(s) {\n    let c = s.charCodeAt() + n;\n    if (c > 90) {\n      c -= 26;\n    }\n    return String.fromCharCode(c)\n  }).join(''));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 81, "deobfuscated": "function Main(input) {\n  const inputs = input.split(\"\\n\").filter(v => v);\n  const n = Number(inputs[0]);\n  const strs = inputs[1].split(\"\");\n  console.log(strs.map(function (s) {\n    let c = s.charCodeAt() + n;\n    if (c > 90) {\n      c -= 26;\n    }\n    return String.fromCharCode(c);\n  }).join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8229090627625026, "ngram_match_score": 0.7081329017318663, "weighted_ngram_match_score": 0.7214343838009033, "syntax_match_score": 1.0, "dataflow_match_score": 0.8620689655172413}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02952_1", "type": "JavaScript", "obfuscated": "function keta(num){for(var i=0x1;i<=0x6;i++){if(num<0xa**i)return i%0x2;}}function Main(input){var ans=0x0;var cnt=0x1;while(cnt<=input){ans+=keta(cnt);cnt++;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["11", "9"], ["136", "46"], ["100000", "90909"]], "original": "function keta(num) {\n    for(var i=1; i<=6; i++) {\n        if(num < 10**i) return i%2;\n    }\n}\n\nfunction Main(input) {\n    var ans = 0;\n    var cnt = 1;\n    while(cnt <= input) {\n        ans += keta(cnt);\n        cnt++;\n    }\n    console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 82, "deobfuscated": "function keta(num) {\n  for (var i = 1; i <= 6; i++) {\n    if (num < 10 ** i) {\n      return i % 2;\n    }\n  }\n}\nfunction Main(input) {\n  var ans = 0;\n  var cnt = 1;\n  while (cnt <= input) {\n    ans += keta(cnt);\n    cnt++;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7545259609241733, "ngram_match_score": 0.4809943788271808, "weighted_ngram_match_score": 0.6595584444613494, "syntax_match_score": 0.8775510204081632, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02987_1", "type": "JavaScript", "obfuscated": "function main(input){const inputList=input['split']('');const list=[];inputList['forEach'](il=>{if(!list['some'](l=>l===il)){list['push'](il);}});const result=list['length']===0x2?'Yes':'No';console['log'](result);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["ASSA", "Yes"], ["STOP", "No"], ["FFEE", "Yes"], ["FREE", "No"]], "original": "function main(input) {\n  // 入力値（文字列）を改行で区切る\n  const inputList = input.split('');\n  const list = [];\n  inputList.forEach(il => {\n    if (!list.some(l => l === il)) {\n      list.push(il);\n    }\n  });\n  const result = list.length === 2 ? 'Yes' : 'No';\n  console.log(result);\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 83, "deobfuscated": "function main(input) {\n  const inputList = input.split(\"\");\n  const list = [];\n  inputList.forEach(il => {\n    if (!list.some(l => l === il)) {\n      list.push(il);\n    }\n  });\n  const result = list.length === 2 ? \"Yes\" : \"No\";\n  console.log(result);\n}\n;\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8445277269689103, "ngram_match_score": 0.6843732218679708, "weighted_ngram_match_score": 0.6937376860076704, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03036_1", "type": "JavaScript", "obfuscated": "'use strict';(function(input){input=input['trim']()['split'](/\\s+/)['map'](x=>x-0x0);const r=input[0x0];const D=input[0x1];let x=input[0x2];let ans=new Array(0xa);for(let i=0x0;i<0xa;i++){x=r*x-D;ans[i]=x;}console['log'](ans['join']('\\x0a'));}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 10 20", "30\n50\n90\n170\n330\n650\n1290\n2570\n5130\n10250"], ["4 40 60", "200\n760\n3000\n11960\n47800\n191160\n764600\n3058360\n12233400\n48933560"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const r=input[0];\n  const D=input[1];\n  let x=input[2];\n  let ans=new Array(10);\n  for(let i=0;i<10;i++){\n    x=r*x-D;\n    ans[i]=x;\n  }\n  \n  console.log(ans.join('\\n'));\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 84, "deobfuscated": "'use strict';\n\n(function (input) {\n  input = input.trim().split(/\\s+/).map(x => x - 0);\n  const r = input[0];\n  const D = input[1];\n  let x = input[2];\n  let ans = new Array(10);\n  for (let i = 0; i < 10; i++) {\n    x = r * x - D;\n    ans[i] = x;\n  }\n  console.log(ans.join(\"\\n\"));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5107631558565517, "ngram_match_score": 0.010329222874429908, "weighted_ngram_match_score": 0.0327234005517773, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03048_1", "type": "JavaScript", "obfuscated": "function main(input){const args=input['split']('\\x20');const R=parseInt(args[0x0],0xa),G=parseInt(args[0x1],0xa),B=parseInt(args[0x2],0xa),N=parseInt(args[0x3],0xa);var s=0x0;var k=0x0;for(var i=0x0;i<=(N/R|0x0);++i){for(var j=0x0;j<=(N/G|0x0);++j){k=(N-i*R-j*G)/B|0x0;if(k>=0x0&&i*R+j*G+k*B==N)++s;}}console['log'](s);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 2 3 4", "4"], ["13 1 4 3000", "87058"]], "original": "function main(input){\n  const args = input.split(' ');\n  const R = parseInt(args[0], 10),\n        G = parseInt(args[1], 10),\n        B = parseInt(args[2], 10),\n        N = parseInt(args[3], 10);\n  \n  var s = 0;\n  var k = 0;\n  for (var i = 0; i <= (N / R | 0); ++i){\n    for (var j = 0; j <= (N / G | 0); ++j){\n      k = ((N - i*R - j*G) / B) | 0;\n      if (k >= 0 && i*R + j*G + k*B == N) ++s;\n    }\n  }\n  console.log(s);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 85, "deobfuscated": "function main(input) {\n  const args = input.split(\" \");\n  const R = parseInt(args[0], 10);\n  const G = parseInt(args[1], 10);\n  const B = parseInt(args[2], 10);\n  const N = parseInt(args[3], 10);\n  var s = 0;\n  var k = 0;\n  for (var i = 0; i <= (N / R | 0); ++i) {\n    for (var j = 0; j <= (N / G | 0); ++j) {\n      k = (N - i * R - j * G) / B | 0;\n      if (k >= 0 && i * R + j * G + k * B == N) {\n        ++s;\n      }\n    }\n  }\n  console.log(s);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7302738768337641, "ngram_match_score": 0.4799462261139907, "weighted_ngram_match_score": 0.5888765539483385, "syntax_match_score": 0.8522727272727273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009182927201271118, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.023076923076922995, "new_decrease_halstead_effort": -0.023076923076922773}}
{"filename": "p03060_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');n=Number(input[0x0]['split']('\\x20'));V=input[0x1]['split']('\\x20')['map'](Number);C=input[0x2]['split']('\\x20')['map'](Number);var Y=0x0;for(var i=0x0;i<n;i++){y=V[i]-C[i];if(y>=0x0){Y=Y+y;}}console['log'](Y);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n10 2 5\n6 3 4", "5"], ["4\n13 21 6 19\n11 30 6 15", "6"], ["1\n1\n50", "0"]], "original": "//   2次配列のよみこみ\n\nfunction Main(input) {\n    input = input.split(\"\\n\");\n  \tn = Number(input[0].split(\" \"));\n    V = input[1].split(\" \").map(Number);\n    C = input[2].split(\" \").map(Number);\n    \n  //  console.log(n);\n  //  console.log(V);\n  //  console.log(C);\n    \n    \n  \tvar Y = 0;\n  \tfor(var i=0; i<n; i++){y = V[i]-C[i];\n                             if ( y >= 0){Y = Y + y;}\n                                      }\n   console.log(Y);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 86, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  n = Number(input[0].split(\" \"));\n  V = input[1].split(\" \").map(Number);\n  C = input[2].split(\" \").map(Number);\n  var Y = 0;\n  for (var i = 0; i < n; i++) {\n    y = V[i] - C[i];\n    if (y >= 0) {\n      Y = Y + y;\n    }\n  }\n  console.log(Y);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7462844279509262, "ngram_match_score": 0.4724240672958149, "weighted_ngram_match_score": 0.5127136445078898, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03145_1", "type": "JavaScript", "obfuscated": "function Main(input){var inputs=input['split']('\\x20');var ab=parseInt(inputs[0x0],0xa);var bc=parseInt(inputs[0x1],0xa);console['log'](ab*bc/0x2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4 5", "6"], ["5 12 13", "30"], ["45 28 53", "630"]], "original": "function Main(input){ \n  var inputs = input.split(\" \");\n  var ab = parseInt(inputs[0],10);\n  var bc = parseInt(inputs[1],10);\n  console.log(ab*bc/2); \n  \n}\n    Main(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 87, "deobfuscated": "function Main(input) {\n  var inputs = input.split(\" \");\n  var ab = parseInt(inputs[0], 10);\n  var bc = parseInt(inputs[1], 10);\n  console.log(ab * bc / 2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7083561995263725, "ngram_match_score": 0.32685141385924577, "weighted_ngram_match_score": 0.5065733842462445, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03327_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const N=Number(input);if(N<=0x3e7){console['log']('ABC');}else{console['log']('ABD');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["999", "ABC"], ["1000", "ABD"], ["1481", "ABD"]], "original": "'use strict'\n\nfunction Main(input) {\n  const N = Number(input);\n\n  if(N <= 999) {\n    console.log('ABC');\n  } else {\n    console.log('ABD');\n  }\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 88, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const N = Number(input);\n  if (N <= 999) {\n    console.log(\"ABC\");\n  } else {\n    console.log(\"ABD\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7440276462917603, "ngram_match_score": 0.4717991357336539, "weighted_ngram_match_score": 0.5043114494333872, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03360_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x0a');const nums=input[0x0]['split']('\\x20')['map'](i=>parseInt(i));const K=parseInt(input[0x1]);nums['sort']((a,b)=>a-b);let n=nums['pop']();n=n*Math['pow'](0x2,K);nums['push'](n);console['log'](nums['reduce']((p,c)=>p+c));};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["5 3 11\n1", "30"], ["3 3 4\n2", "22"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const nums = input[0].split(' ').map(i => parseInt(i))\n    const K = parseInt(input[1])\n\n    nums.sort((a, b) => a - b)\n    let n = nums.pop()\n    n = n * Math.pow(2, K)\n    nums.push(n)\n    console.log(nums.reduce((p, c) => p + c))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 89, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\"\\n\");\n  const nums = input[0].split(\" \").map(i => parseInt(i));\n  const K = parseInt(input[1]);\n  nums.sort((a, b) => a - b);\n  let n = nums.pop();\n  n = n * Math.pow(2, K);\n  nums.push(n);\n  console.log(nums.reduce((p, c) => p + c));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6284717899620511, "ngram_match_score": 0.3614351688197302, "weighted_ngram_match_score": 0.3712925707386195, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 0.8478260869565217}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03473_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']();console['log'](0x18+(0x18-input));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["21", "27"], ["12", "36"]], "original": "function Main(input) {\n  input = input.trim()\n//  input = input.split(\" \").map(Number);\nconsole.log(24+(24-input))\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 90, "deobfuscated": "function Main(input) {\n  input = input.trim();\n  console.log(24 + (24 - input));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6437857319944886, "ngram_match_score": 0.27824623288353134, "weighted_ngram_match_score": 0.2968966950944231, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03574_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x0a');const hw=input['shift']()['split']('\\x20')['map'](str=>Number(str));const H=hw[0x0],W=hw[0x1];const data=input['map'](ls=>ls['split'](''));const hy=[-0x1,-0x1,-0x1,0x0,0x0,0x1,0x1,0x1];const wx=[-0x1,0x0,0x1,-0x1,0x1,-0x1,0x0,0x1];for(let i=0x0;i<H;i++){for(let j=0x0;j<W;j++){if(data[i][j]==='#')continue;let count=0x0;for(let k=0x0;k<0x8;k++){const y=i+hy[k],x=j+wx[k];if(y<0x0||H<=y)continue;if(x<0x0||W<=x)continue;if(data[y][x]==='#'){count+=0x1;}}data[i][j]=count;}}const result=data['map'](ls=>ls['join'](''))['join']('\\x0a');console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 5\n.....\n.#.#.\n.....", "11211\n1#2#1\n11211"], ["3 5\n#####\n#####\n#####", "#####\n#####\n#####"], ["6 6\n#####.\n#.#.##\n####.#\n.#..#.\n#.##..\n#.#...", "#####3\n#8#7##\n####5#\n4#65#2\n#5##21\n#4#310"]], "original": "'use strict'\nfunction Main(input){\n  input = input.trim().split('\\n');\n  const hw = input.shift().split(' ').map((str)=> Number(str));\n  const H  = hw[0], W = hw[1];  \n  const data = input.map(ls => ls.split(''));\n  \n  const hy = [-1, -1, -1, 0, 0, 1, 1, 1];\n  const wx = [-1, 0, 1, -1, 1, -1, 0, 1];\n  \n  for(let i = 0; i < H; i++){\n    for(let j = 0; j < W; j++){\n      \n      if(data[i][j] === '#') continue;\n      \n      let count = 0;\n      for(let k = 0; k < 8; k++){\n        const y = i + hy[k] , x = j + wx[k]; \n        if(y < 0 || H <= y) continue;\n        if(x < 0 || W <= x) continue;\n        \n        if(data[y][x] === '#') {\n          count += 1;\n        }\n      }\n      data[i][j] = count;\n    }\n  }\n  const result = data.map(ls => ls.join('')).join('\\n');\n  console.log(result);\n}\n\n//固定\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 91, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  const hw = input.shift().split(\" \").map(str => Number(str));\n  const H = hw[0];\n  const W = hw[1];\n  const data = input.map(ls => ls.split(\"\"));\n  const hy = [-1, -1, -1, 0, 0, 1, 1, 1];\n  const wx = [-1, 0, 1, -1, 1, -1, 0, 1];\n  for (let i = 0; i < H; i++) {\n    for (let j = 0; j < W; j++) {\n      if (data[i][j] === \"#\") {\n        continue;\n      }\n      let count = 0;\n      for (let k = 0; k < 8; k++) {\n        const y = i + hy[k];\n        const x = j + wx[k];\n        if (y < 0 || H <= y) {\n          continue;\n        }\n        if (x < 0 || W <= x) {\n          continue;\n        }\n        if (data[y][x] === \"#\") {\n          count += 1;\n        }\n      }\n      data[i][j] = count;\n    }\n  }\n  const result = data.map(ls => ls.join(\"\")).join(\"\\n\");\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7348642247517367, "ngram_match_score": 0.5299934745685876, "weighted_ngram_match_score": 0.6091451514154574, "syntax_match_score": 0.87248322147651, "dataflow_match_score": 0.9278350515463918}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00044892215079550546, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.010101010101010166, "new_decrease_halstead_effort": -0.010101010101010166}}
{"filename": "p04045_1", "type": "JavaScript", "obfuscated": "function main(input){var inputs=input['split']('\\x0a');var money=inputs[0x0]['split']('\\x20')[0x0];var kRegexp=new RegExp(inputs[0x1]['replace']('\\x20','|'));while(kRegexp['test'](String(money))){money++;}return money;}console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["1000 8\n1 3 4 5 6 7 8 9", "2000"], ["9999 1\n0", "9999"]], "original": "function main(input) {\n\tvar inputs = input.split(\"\\n\");\n\tvar money = inputs[0].split(\" \")[0];\n    var kRegexp = new RegExp(inputs[1].replace(\" \",\"|\"));\n    while(kRegexp.test(String(money))){\n    \tmoney++;\n    }\n    return money;\n}\n\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 92, "deobfuscated": "function main(input) {\n  var inputs = input.split(\"\\n\");\n  var money = inputs[0].split(\" \")[0];\n  var kRegexp = new RegExp(inputs[1].replace(\" \", \"|\"));\n  while (kRegexp.test(String(money))) {\n    money++;\n  }\n  return money;\n}\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9053638415308835, "ngram_match_score": 0.759907656827929, "weighted_ngram_match_score": 0.8615477092956048, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02571_1", "type": "JavaScript", "obfuscated": "(input=>{const [S,T]=input['trim']()['split']('\\x0a');const sl=S['length'];const tl=T['length'];const range=sl-tl;let min=tl;for(let i=0x0;i<range;i++){const target=S['slice'](i,tl+i);let diff=0x0;for(let j=0x0;j<tl;j++){if(target[j]!==T[j])diff+=0x1;}if(min>diff){min=diff;}}console['log'](min);})(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["cabacc\nabc", "1"], ["codeforces\natcoder", "6"]], "original": "((input) => {\n  const [S, T] = input.trim().split('\\n');\n  const sl = S.length;\n  const tl = T.length;\n  const range = sl - tl;\n  let min = tl;\n\n  for (let i = 0; i < range; i++) {\n    const target = S.slice(i, tl + i);\n    let diff = 0;\n    for (let j = 0; j < tl; j++) {\n      if (target[j] !== T[j]) diff += 1;\n    }\n    if (min > diff) {\n      min = diff;\n    }\n   }\n\n  console.log(min);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 93, "deobfuscated": "(input => {\n  const [S, T] = input.trim().split(\"\\n\");\n  const sl = S.length;\n  const tl = T.length;\n  const range = sl - tl;\n  let min = tl;\n  for (let i = 0; i < range; i++) {\n    const target = S.slice(i, tl + i);\n    let diff = 0;\n    for (let j = 0; j < tl; j++) {\n      if (target[j] !== T[j]) {\n        diff += 1;\n      }\n    }\n    if (min > diff) {\n      min = diff;\n    }\n  }\n  console.log(min);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.916857660998174, "ngram_match_score": 0.8998064944522427, "weighted_ngram_match_score": 0.9255188863825586, "syntax_match_score": 0.8421052631578947, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02608_1", "type": "JavaScript", "obfuscated": "function Main(input){const N=Number(input);let fn=new Array(N)['fill'](0x0);for(let x=0x1;x**0x2<=N;x++){for(let y=0x1;y**0x2<=N;y++){if(x+y>N)break;for(let z=0x1;z**0x2<=N;z++){const i=x**0x2+y**0x2+z**0x2+x*y+y*z+z*x;if(i>N)break;fn[i-0x1]++;}}}console['log'](fn['join']('\\x0a'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["20", "0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n3\n3\n0\n0"]], "original": "// 一回計算した結果を全て持っておく\nfunction Main(input){\n    const N = Number(input);\n    let fn = new Array(N).fill(0);\n    for(let x=1; x**2<=N; x++){\n        for(let y=1; y**2<=N; y++){\n            if(x+y > N) break;\n            for(let z=1; z**2<=N; z++){\n                const i = x**2 + y**2 + z**2 + x*y + y*z + z*x;\n                if(i >N) break;\n                fn[i-1]++\n            }\n        }\n    }\n    console.log(fn.join('\\n'));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 94, "deobfuscated": "function Main(input) {\n  const N = Number(input);\n  let fn = new Array(N).fill(0);\n  for (let x = 1; x ** 2 <= N; x++) {\n    for (let y = 1; y ** 2 <= N; y++) {\n      if (x + y > N) {\n        break;\n      }\n      for (let z = 1; z ** 2 <= N; z++) {\n        const i = x ** 2 + y ** 2 + z ** 2 + x * y + y * z + z * x;\n        if (i > N) {\n          break;\n        }\n        fn[i - 1]++;\n      }\n    }\n  }\n  console.log(fn.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5627080904640169, "ngram_match_score": 0.12792101127647296, "weighted_ngram_match_score": 0.25386373153197583, "syntax_match_score": 0.8690476190476191, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02712_1", "type": "JavaScript", "obfuscated": "function Main(input){inputs=input['split']('\\x0a');const N=Number(inputs[0x0]);const arr=[];for(let i=0x1;i<=N;i++){if(i%0x3!==0x0&&i%0x5!==0x0){arr['push'](i);}}const sum=arr['reduce']((prev,current)=>{return prev+current;});console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["15", "60"], ["1000000", "266666333332"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  inputs = input.split(\"\\n\");\n  \n  const N = Number(inputs[0]);\n  const arr = [];\n  for( let i = 1 ; i  <= N ; i++ ){\n    if( i % 3 !== 0 && i % 5 !== 0){\n      arr.push(i);\n    }\n  }\n\n  const sum = arr.reduce( (prev,current) => {\n    return prev + current;\n  });\n\n  console.log(sum);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 95, "deobfuscated": "function Main(input) {\n  inputs = input.split(\"\\n\");\n  const N = Number(inputs[0]);\n  const arr = [];\n  for (let i = 1; i <= N; i++) {\n    if (i % 3 !== 0 && i % 5 !== 0) {\n      arr.push(i);\n    }\n  }\n  const sum = arr.reduce((prev, current) => {\n    return prev + current;\n  });\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7553442050700967, "ngram_match_score": 0.5056070323842078, "weighted_ngram_match_score": 0.5157697878961789, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02754_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){let kari=input[0x0]['trim']()['split']('\\x20');let n=parseInt(kari[0x0]);let a=parseInt(kari[0x1]);let b=parseInt(kari[0x2]);let c=a+b;let ans=0x0;if(a===0x0){console['log'](0x0);}else if(b===0x0){console['log'](n);}else{if(n%c<a){ans=Math['floor'](n/c)*a+n%c;}else{ans=Math['floor'](n/c)*a+a;}console['log'](ans);}}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["8 3 4", "4"], ["8 0 4", "0"], ["6 2 4", "2"]], "original": "\"use strict\";\nfunction main(input) {\n  let kari = input[0].trim().split(\" \");\n \n  let n = parseInt(kari[0]);\n  let a = parseInt(kari[1]);\n  let b = parseInt(kari[2]);\n \n  let c = a + b;\n  let ans = 0;\n\n  if(a === 0){\n    console.log(0);\n  }else if(b === 0){\n    console.log(n);\n  }else{\n    if(n%c < a){\n      ans = Math.floor(n/c)*a + n%c;\n    }else{\n      ans = Math.floor(n/c)*a + a;\n    }\n    console.log(ans);\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 96, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  let kari = input[0].trim().split(\" \");\n  let n = parseInt(kari[0]);\n  let a = parseInt(kari[1]);\n  let b = parseInt(kari[2]);\n  let c = a + b;\n  let ans = 0;\n  if (a === 0) {\n    console.log(0);\n  } else if (b === 0) {\n    console.log(n);\n  } else {\n    if (n % c < a) {\n      ans = Math.floor(n / c) * a + n % c;\n    } else {\n      ans = Math.floor(n / c) * a + a;\n    }\n    console.log(ans);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.756895671624606, "ngram_match_score": 0.42529017737429775, "weighted_ngram_match_score": 0.6022925091241265, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02773_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const rows=arg['trim']()['split']('\\x0a');const N=rows['shift']();let wordsObj={};rows['forEach'](row=>{if(wordsObj[row]){wordsObj[row]++;}else{wordsObj[row]=0x1;}});let ansArr=[];let max=0x0;let output=w=>{console['log'](w);};for(let i=0x0;i<Object['keys'](wordsObj)['length'];i++){if(wordsObj[Object['keys'](wordsObj)[i]]<max){continue;}else if(wordsObj[Object['keys'](wordsObj)[i]]>max){ansArr=[];ansArr['push'](Object['keys'](wordsObj)[i]);max=wordsObj[Object['keys'](wordsObj)[i]];}else if(wordsObj[Object['keys'](wordsObj)[i]]*0x1==max){ansArr['push'](Object['keys'](wordsObj)[i]);}}ansArr['sort']();ansArr['forEach'](output);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet", "beet\nvet"], ["8\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo", "buffalo"], ["7\nbass\nbass\nkick\nkick\nbass\nkick\nkick", "kick"], ["4\nushi\ntapu\nnichia\nkun", "kun\nnichia\ntapu\nushi"]], "original": "\"use strict\";\nconst main = arg => {\n  \tconst rows = arg.trim().split(\"\\n\");\n  \tconst N = rows.shift();\n  \tlet wordsObj = {};\n  \trows.forEach(row => {\n    \tif(wordsObj[row]){\n        \twordsObj[row]++;\n        } else {\n        \twordsObj[row] = 1;\n        }\n    })\n  \tlet ansArr = [];\n  \tlet max = 0;\n  \tlet output = (w) => {console.log(w)};\n  \tfor(let i = 0; i < Object.keys(wordsObj).length; i++){\n    \tif(wordsObj[Object.keys(wordsObj)[i]] < max){\t\n          continue;\n        } else if(wordsObj[Object.keys(wordsObj)[i]] > max){\t\n          \tansArr = [];\n        \tansArr.push(Object.keys(wordsObj)[i]);\n          \tmax = wordsObj[Object.keys(wordsObj)[i]];\n        } else if(wordsObj[Object.keys(wordsObj)[i]]*1 == max){\n        \tansArr.push(Object.keys(wordsObj)[i])\n        }\n    }\n\tansArr.sort();\n  \tansArr.forEach(output);\n  \t\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 97, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const rows = arg.trim().split(\"\\n\");\n  const N = rows.shift();\n  let wordsObj = {};\n  rows.forEach(row => {\n    if (wordsObj[row]) {\n      wordsObj[row]++;\n    } else {\n      wordsObj[row] = 1;\n    }\n  });\n  let ansArr = [];\n  let max = 0;\n  let output = w => {\n    console.log(w);\n  };\n  for (let i = 0; i < Object.keys(wordsObj).length; i++) {\n    if (wordsObj[Object.keys(wordsObj)[i]] < max) {\n      continue;\n    } else if (wordsObj[Object.keys(wordsObj)[i]] > max) {\n      ansArr = [];\n      ansArr.push(Object.keys(wordsObj)[i]);\n      max = wordsObj[Object.keys(wordsObj)[i]];\n    } else if (wordsObj[Object.keys(wordsObj)[i]] * 1 == max) {\n      ansArr.push(Object.keys(wordsObj)[i]);\n    }\n  }\n  ansArr.sort();\n  ansArr.forEach(output);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7782263291396282, "ngram_match_score": 0.5357778655030545, "weighted_ngram_match_score": 0.6400645139925213, "syntax_match_score": 0.9370629370629371, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02891_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const S=arg[0x0]['split']('');const K=parseInt(arg[0x1]);let streakS=0x0;for(let i=0x1;i<S['length'];i++){if(S[i]===S[i-0x1]){streakS++;S[i]='@';}}console['log'](S['length']===0x1?Math['floor'](K/0x2):streakS*K);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["issii\n2", "4"], ["qq\n81", "81"], ["cooooooooonteeeeeeeeeest\n999993333", "8999939997"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    const K = parseInt(arg[1]);\n\n    let streakS = 0;\n    \n    // まずSの連続箇所を調べる\n    for(let i=1; i<S.length; i++) {\n        // 連続している\n        if(S[i] === S[i-1]) {\n            streakS++;\n            S[i] = \"@\";\n        }\n    }\n    \n    console.log(S.length === 1 ? Math.floor(K / 2) : streakS * K);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 98, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const S = arg[0].split(\"\");\n  const K = parseInt(arg[1]);\n  let streakS = 0;\n  for (let i = 1; i < S.length; i++) {\n    if (S[i] === S[i - 1]) {\n      streakS++;\n      S[i] = \"@\";\n    }\n  }\n  console.log(S.length === 1 ? Math.floor(K / 2) : streakS * K);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8296016257128249, "ngram_match_score": 0.629980620685855, "weighted_ngram_match_score": 0.6884258821654448, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02898_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){let pass_friend_num=parseInt(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);const pass_height=parseInt(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);const friend_height_data=input['split']('\\x0a')[0x1]['split']('\\x20');for(let i=0x0;i<friend_height_data['length'];i++){if(pass_height>parseInt(friend_height_data[i])){pass_friend_num--;}}console['log'](pass_friend_num);}main(require('fs')['readFileSync']('/dev/stdin','UTF-8'));", "test_cases": [["4 150\n150 140 100 200", "2"], ["1 500\n499", "0"], ["5 1\n100 200 300 400 500", "5"]], "original": "\"use strict\";\n\nfunction main(input) {\n  let pass_friend_num = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  const pass_height = parseInt(input.split(\"\\n\")[0].split(\" \")[1]);\n\n  const friend_height_data = input.split(\"\\n\")[1].split(\" \");\n\n  for (let i = 0; i < friend_height_data.length; i++) {\n    if (pass_height > parseInt(friend_height_data[i])) {\n      pass_friend_num--;\n    }\n  }\n\n  console.log(pass_friend_num);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 99, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  let pass_friend_num = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  const pass_height = parseInt(input.split(\"\\n\")[0].split(\" \")[1]);\n  const friend_height_data = input.split(\"\\n\")[1].split(\" \");\n  for (let i = 0; i < friend_height_data.length; i++) {\n    if (pass_height > parseInt(friend_height_data[i])) {\n      pass_friend_num--;\n    }\n  }\n  console.log(pass_friend_num);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9763622265171636, "ngram_match_score": 0.9505786228129219, "weighted_ngram_match_score": 0.9548702832557324, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02909_1", "type": "JavaScript", "obfuscated": "function Main(arg){var N=arg['split']('\\x0a')[0x0];if(N==='Sunny'){console['log']('Cloudy');}else if(N==='Cloudy'){console['log']('Rainy');}else if(N==='Rainy'){console['log']('Sunny');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["Sunny", "Cloudy"], ["Rainy", "Sunny"]], "original": "\nfunction Main(arg) {\n \n    var N = arg.split(\"\\n\")[0];\n\n    if (N === \"Sunny\") {\n       console.log(\"Cloudy\");\n    }\n    else if (N === \"Cloudy\") {\n        console.log(\"Rainy\");\n    }\n    else if (N === \"Rainy\") {\n        console.log(\"Sunny\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 100, "deobfuscated": "function Main(arg) {\n  var N = arg.split(\"\\n\")[0];\n  if (N === \"Sunny\") {\n    console.log(\"Cloudy\");\n  } else if (N === \"Cloudy\") {\n    console.log(\"Rainy\");\n  } else if (N === \"Rainy\") {\n    console.log(\"Sunny\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02911_1", "type": "JavaScript", "obfuscated": "'use strict';let arg_str=require('fs')['readFileSync']('/dev/stdin','UTF-8');arg_str=arg_str['split']('\\x0a');const arg_str_0=arg_str[0x0]['split']('\\x20');const N=arg_str_0[0x0];const K=arg_str_0[0x1];const Q=arg_str_0[0x2];const A_array=arg_str['slice'](0x1);let result_val=[];for(let i=0x0;i<N;i++){result_val[i]=K;}A_array['forEach']((item,index)=>{for(let i=0x0;i<N;i++){if(item-0x1!=i){result_val[i]--;}}});result_val['map'](x=>x>0x0?console['log']('Yes'):console['log']('No'));", "test_cases": [["6 3 4\n3\n1\n3\n2", "No\nNo\nYes\nNo\nNo\nNo"], ["6 5 4\n3\n1\n3\n2", "Yes\nYes\nYes\nYes\nYes\nYes"], ["10 13 15\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9", "No\nNo\nNo\nNo\nYes\nNo\nNo\nNo\nYes\nNo"]], "original": "\"use strict\"\n \nlet arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\narg_str = arg_str.split('\\n')\nconst arg_str_0 = arg_str[0].split(' ')\nconst N = arg_str_0[0]\nconst K = arg_str_0[1]\nconst Q = arg_str_0[2]\n \nconst A_array = arg_str.slice(1)\n \nlet result_val = []\n \nfor(let i=0;i<N;i++){\n  result_val[i] = K\n}\n \nA_array.forEach((item, index)=>{\n  for(let i=0;i<N;i++){\n    if(item - 1 != i){\n        result_val[i]--\n    }\n  }\n})\n \nresult_val.map(x=>x>0 ? console.log('Yes') : console.log('No'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 101, "deobfuscated": "'use strict';\n\nlet arg_str = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\narg_str = arg_str.split(\"\\n\");\nconst arg_str_0 = arg_str[0].split(\" \");\nconst N = arg_str_0[0];\nconst K = arg_str_0[1];\nconst Q = arg_str_0[2];\nconst A_array = arg_str.slice(1);\nlet result_val = [];\nfor (let i = 0; i < N; i++) {\n  result_val[i] = K;\n}\nA_array.forEach((item, index) => {\n  for (let i = 0; i < N; i++) {\n    if (item - 1 != i) {\n      result_val[i]--;\n    }\n  }\n});\nresult_val.map(x => x > 0 ? console.log(\"Yes\") : console.log(\"No\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5369627529179367, "ngram_match_score": 0.05926291195676494, "weighted_ngram_match_score": 0.08858809971498187, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02982_1", "type": "JavaScript", "obfuscated": "function main(input){const args=input['split']('\\x0a');const aiueo=args[0x0]['split']('\\x20');const N=parseInt(aiueo[0x0],0xa);const D=parseInt(aiueo[0x1],0xa);var arr=[];for(var i=0x0;i<N;i++){arr[i]=[];var subArgs=args[i+0x1]['split']('\\x20');for(var j=0x0;j<D+0x1;j++){arr[i]['push'](parseInt(subArgs[j],0xa));}}var kakunin=0x0;function kyori(arr1,arr2){var sum=0x0;for(var i=0x0;i<D;i++){sum=sum+Math['pow'](arr1[i]-arr2[i],0x2);}if(Number['isInteger'](Math['sqrt'](sum))==!![]){return!![];}else{return![];}}for(var i=0x0;i<N;i++){for(var j=i+0x1;j<N;j++){if(kyori(arr[i],arr[j])==!![]){kakunin++;}}}console['log'](kakunin);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n1 2\n5 5\n-2 8", "1"], ["3 4\n-3 7 8 2\n-12 1 10 2\n-2 8 9 3", "2"], ["5 1\n1\n2\n3\n4\n5", "10"]], "original": "function main(input){\n  const args=input.split(\"\\n\");\n  const aiueo=args[0].split(\" \");\n  const N=parseInt(aiueo[0],10);\n  const D=parseInt(aiueo[1],10);\n\n  //入力された二次元配列を、javascriptで使える形にする\n  //中身はconsole.log(arr)で確認できる\n  var arr=[]\n  for(var i=0; i<N; i++){\n    arr[i]=[];\n    var subArgs= args[i+1].split(\" \")\n    for(var j=0; j<D+1; j++){\n      arr[i].push(parseInt(subArgs[j],10))\n    }\n  }\n\n  var kakunin=0;\n\n  //二点間の距離を出す関数\n  function kyori(arr1,arr2){\n    var sum=0;\n    for(var i=0; i<D; i++){\n      sum=sum+Math.pow(arr1[i]-arr2[i],2)\n    }\n    //console.log(\"距離の二乗は\"+sum+\"です\")\n    if(Number.isInteger(Math.sqrt(sum))==true){\n      return true\n    }else{\n      return false\n    }\n  }\n\n  //以下は判定用のfor文。距離が整数ならkakunin++する。\n  for(var i=0; i<N; i++){\n    for(var j=i+1; j<N; j++){\n      if(kyori(arr[i],arr[j])==true){\n        kakunin++\n      }\n    }\n  }\n  console.log(kakunin)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 102, "deobfuscated": "function main(input) {\n  const args = input.split(\"\\n\");\n  const aiueo = args[0].split(\" \");\n  const N = parseInt(aiueo[0], 10);\n  const D = parseInt(aiueo[1], 10);\n  var arr = [];\n  for (var i = 0; i < N; i++) {\n    arr[i] = [];\n    var subArgs = args[i + 1].split(\" \");\n    for (var j = 0; j < D + 1; j++) {\n      arr[i].push(parseInt(subArgs[j], 10));\n    }\n  }\n  var kakunin = 0;\n  function kyori(arr1, arr2) {\n    var sum = 0;\n    for (var i = 0; i < D; i++) {\n      sum = sum + Math.pow(arr1[i] - arr2[i], 2);\n    }\n    if (Number.isInteger(Math.sqrt(sum)) == true) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  for (var i = 0; i < N; i++) {\n    for (var j = i + 1; j < N; j++) {\n      if (kyori(arr[i], arr[j]) == true) {\n        kakunin++;\n      }\n    }\n  }\n  console.log(kakunin);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5134983103740105, "ngram_match_score": 0.016019837232305555, "weighted_ngram_match_score": 0.03797340426373667, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006501906559731152, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05188679245283023, "new_decrease_halstead_effort": 0.14952504629085694}}
{"filename": "p03049_1", "type": "JavaScript", "obfuscated": "'use strict';function counter(str,seq){return str['split'](seq)['length']-0x1;}function main(stdin){const input=stdin['split']('\\x0a');input['shift']();let ans=0x0;let startsB=0x0;let endsA=0x0;let startsBandEndsA=0x0;input['forEach'](s=>{ans+=counter(s,'AB');if(s['charAt'](0x0)==='B'){if(s['charAt'](s['length']-0x1)==='A'){++startsBandEndsA;}else{++startsB;}}else if(s['charAt'](s['length']-0x1)==='A'){++endsA;}});const smaller=Math['min'](startsB,endsA);const bigger=Math['max'](startsB,endsA);const shortage=bigger-smaller;let extra=Math['max'](0x0,startsBandEndsA-shortage);if(shortage===0x0&&extra!==0x0)--extra;ans+=smaller;ans+=Math['min'](shortage,startsBandEndsA);ans+=extra;console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\nABCA\nXBAZ\nBAD", "2"], ["9\nBEWPVCRWH\nZZNQYIJX\nBAVREA\nPA\nHJMYITEOX\nBCJHMRMNK\nBP\nQVFABZ\nPRGKSPUNA", "4"], ["7\nRABYBBE\nJOZ\nBMHQUVA\nBPA\nISU\nMCMABAOBHZ\nSZMEHMA", "4"]], "original": "'use strict';\n\nfunction counter(str,seq) {\n    return str.split(seq).length - 1;\n}\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  input.shift();\n\n  let ans = 0;\n  let startsB = 0;\n  let endsA = 0;\n  let startsBandEndsA = 0;\n\n  input.forEach(s => {\n    ans += counter(s, 'AB');\n\n    if (s.charAt(0) === 'B') {\n      if (s.charAt(s.length - 1) === 'A') {\n        ++startsBandEndsA;\n      } else {\n        ++startsB;\n      }\n    } else if (s.charAt(s.length - 1) === 'A') {\n      ++endsA;\n    }\n  });\n\n  const smaller = Math.min(startsB, endsA);\n  const bigger = Math.max(startsB, endsA);\n  const shortage = bigger - smaller;\n  let extra = Math.max(0, startsBandEndsA - shortage);\n  if (shortage === 0 && extra !== 0) --extra;\n  \n\n  ans += smaller;\n  ans += Math.min(shortage, startsBandEndsA);\n  ans += extra;\n\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 103, "deobfuscated": "'use strict';\n\nfunction counter(str, seq) {\n  return str.split(seq).length - 1;\n}\nfunction main(stdin) {\n  const input = stdin.split(\"\\n\");\n  input.shift();\n  let ans = 0;\n  let startsB = 0;\n  let endsA = 0;\n  let startsBandEndsA = 0;\n  input.forEach(s => {\n    ans += counter(s, \"AB\");\n    if (s.charAt(0) === \"B\") {\n      if (s.charAt(s.length - 1) === \"A\") {\n        ++startsBandEndsA;\n      } else {\n        ++startsB;\n      }\n    } else if (s.charAt(s.length - 1) === \"A\") {\n      ++endsA;\n    }\n  });\n  const smaller = Math.min(startsB, endsA);\n  const bigger = Math.max(startsB, endsA);\n  const shortage = bigger - smaller;\n  let extra = Math.max(0, startsBandEndsA - shortage);\n  if (shortage === 0 && extra !== 0) {\n    --extra;\n  }\n  ans += smaller;\n  ans += Math.min(shortage, startsBandEndsA);\n  ans += extra;\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8995648071272744, "ngram_match_score": 0.8084894994344153, "weighted_ngram_match_score": 0.835229453354049, "syntax_match_score": 0.9694656488549618, "dataflow_match_score": 0.9850746268656716}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03069_1", "type": "JavaScript", "obfuscated": "function Main(input){'use strict';const elements=input['split']('\\x0a');let blackFlag=![];let numBlack=0x0;let numWhiteAfterBlack=0x0;for(let i=0x0;i<elements[0x0];i++){if(blackFlag===![]&&elements[0x1][i]==='#'){blackFlag=!![];}if(blackFlag===!![]&&elements[0x1][i]==='.'){numWhiteAfterBlack++;}if(elements[0x1][i]==='#'){numBlack++;}}if(numWhiteAfterBlack===0x0&&blackFlag===![]){console['log']('0');}else if(numWhiteAfterBlack===0x0&&blackFlag===!![]){console['log'](numBlack);}else if(numBlack<=numWhiteAfterBlack){console['log'](numBlack);}else{console['log'](numWhiteAfterBlack);}}Main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["3\n#.#", "1"], ["5\n#.##.", "2"], ["9\n.........", "0"]], "original": "function Main(input) {\n    \"use strict\";\n    const elements = input.split('\\n');\n    let blackFlag = false;\n    let numBlack = 0;\n    let numWhiteAfterBlack = 0;\n\n    for (let i = 0; i < elements[0]; i++) {\n        if (blackFlag === false && elements[1][i] === '#') {\n            blackFlag = true;\n        }\n        if (blackFlag === true && elements[1][i] === '.') {\n            numWhiteAfterBlack++;\n        }\n        if (elements[1][i] === '#') {\n            numBlack++;\n        }\n    }\n\n    if (numWhiteAfterBlack === 0 && blackFlag === false) {\n        console.log('0');\n    } else if(numWhiteAfterBlack === 0 && blackFlag === true){\n        console.log(numBlack);\n    }else if (numBlack <= numWhiteAfterBlack) {\n        console.log(numBlack);\n    } else {\n        console.log(numWhiteAfterBlack);\n    }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf-8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 104, "deobfuscated": "function Main(input) {\n  'use strict';\n\n  const elements = input.split(\"\\n\");\n  let blackFlag = false;\n  let numBlack = 0;\n  let numWhiteAfterBlack = 0;\n  for (let i = 0; i < elements[0]; i++) {\n    if (blackFlag === false && elements[1][i] === \"#\") {\n      blackFlag = true;\n    }\n    if (blackFlag === true && elements[1][i] === \".\") {\n      numWhiteAfterBlack++;\n    }\n    if (elements[1][i] === \"#\") {\n      numBlack++;\n    }\n  }\n  if (numWhiteAfterBlack === 0 && blackFlag === false) {\n    console.log(\"0\");\n  } else if (numWhiteAfterBlack === 0 && blackFlag === true) {\n    console.log(numBlack);\n  } else if (numBlack <= numWhiteAfterBlack) {\n    console.log(numBlack);\n  } else {\n    console.log(numWhiteAfterBlack);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8661592803140545, "ngram_match_score": 0.7165789617653668, "weighted_ngram_match_score": 0.7480581594908515, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.013127318565225199, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.1048951048951049, "new_decrease_halstead_effort": 0.2547390520550957}}
{"filename": "p03076_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const times=arg['trim']()['split']('\\x0a')['map'](n=>parseInt(n));let min=0xa;let sum=0x0;for(let i=0x0;i<times['length'];i++){let digitOne=String(times[i])['split']('');digitOne=parseInt(digitOne[digitOne['length']-0x1]);let digitMinus=0xa-digitOne;sum+=parseInt(times[i]);if(digitMinus!==0xa){sum+=digitMinus;}if(digitMinus!==0xa&&digitOne<min){min=digitOne;}}console['log'](parseInt(sum-(0xa-min)));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["29\n20\n7\n35\n120", "215"], ["101\n86\n119\n108\n57", "481"], ["123\n123\n123\n123\n123", "643"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const times = arg.trim().split(\"\\n\").map(n=>parseInt(n));\n    let min = 10;\n    \n    let sum = 0;\n    \n    for(let i=0; i<times.length; i++) {\n        let digitOne   = String(times[i]).split(\"\");\n        digitOne = parseInt(digitOne[digitOne.length - 1]);\n        \n        let digitMinus = 10 - digitOne;\n        sum += parseInt(times[i]);\n        \n        if(digitMinus !== 10) {\n            sum += digitMinus;\n        }\n        \n        if(digitMinus !== 10 && digitOne < min) {\n            min = digitOne;\n        }\n    }\n\n    console.log(parseInt(sum - (10 - min)));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 105, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const times = arg.trim().split(\"\\n\").map(n => parseInt(n));\n  let min = 10;\n  let sum = 0;\n  for (let i = 0; i < times.length; i++) {\n    let digitOne = String(times[i]).split(\"\");\n    digitOne = parseInt(digitOne[digitOne.length - 1]);\n    let digitMinus = 10 - digitOne;\n    sum += parseInt(times[i]);\n    if (digitMinus !== 10) {\n      sum += digitMinus;\n    }\n    if (digitMinus !== 10 && digitOne < min) {\n      min = digitOne;\n    }\n  }\n  console.log(parseInt(sum - (10 - min)));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8581208890007809, "ngram_match_score": 0.6693253788514915, "weighted_ngram_match_score": 0.7631581771516321, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03103_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');inputStr=input[0x0]['split']('\\x20');var N=Number['parseInt'](inputStr[0x0]);var M=Number['parseInt'](inputStr[0x1]);var tmp=[];var array=[];var buycnt=0x0;var okane=0x0;var mokori=M;for(i=0x0;i<N;i++){tmp=input[i+0x1]['split']('\\x20');array[i]=tmp['map'](tmp=>parseInt(tmp,0xa));array[i][0x0]=('0000000000'+array[i][0x0])['substr'](-0xa);}array['sort']();for(i=0x0;i<N;i++){if(mokori>parseInt(array[i][0x1])){okane+=parseInt(array[i][0x0])*parseInt(array[i][0x1]);mokori-=parseInt(array[i][0x1]);}else{okane+=parseInt(array[i][0x0])*mokori;break;}}console['log'](okane);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 5\n4 9\n2 4", "12"], ["4 30\n6 18\n2 5\n3 10\n7 9", "130"], ["1 100000\n1000000000 100000", "100000000000000"]], "original": "function Main(input){\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  var N = Number.parseInt(inputStr[0]);\n  var M = Number.parseInt(inputStr[1]);\n  var tmp = [];\n  var array = [];\n  var buycnt = 0;\n  var okane = 0;\n  var mokori = M;\n  //配列に数値化して溜め込む\n  for (i=0;i<N;i++){\n    tmp = input[i+1].split(\" \");\n    array[i] = tmp.map( tmp => parseInt(tmp,10) )\n    array[i][0] = ( \"0000000000\" + array[i][0] ).substr(-10);\n  }\n  //ソートする\n  array.sort();\n  //数値変換しつつ必要本数を買い込む\n  for (i=0 ; i<N ; i++){\n    if (mokori > parseInt(array[i][1])){\n      okane += parseInt(array[i][0]) * parseInt(array[i][1]);\n      mokori -= parseInt(array[i][1]);\n    } else {\n      okane += parseInt(array[i][0]) * mokori;\n      break;\n    }\n  }\n  console.log(okane);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 106, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  var N = Number.parseInt(inputStr[0]);\n  var M = Number.parseInt(inputStr[1]);\n  var tmp = [];\n  var array = [];\n  var buycnt = 0;\n  var okane = 0;\n  var mokori = M;\n  for (i = 0; i < N; i++) {\n    tmp = input[i + 1].split(\" \");\n    array[i] = tmp.map(tmp => parseInt(tmp, 10));\n    array[i][0] = (\"0000000000\" + array[i][0]).substr(-10);\n  }\n  array.sort();\n  for (i = 0; i < N; i++) {\n    if (mokori > parseInt(array[i][1])) {\n      okane += parseInt(array[i][0]) * parseInt(array[i][1]);\n      mokori -= parseInt(array[i][1]);\n    } else {\n      okane += parseInt(array[i][0]) * mokori;\n      break;\n    }\n  }\n  console.log(okane);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8151422372376763, "ngram_match_score": 0.5976836674972236, "weighted_ngram_match_score": 0.6628852814534817, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0013148716178108533, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.026927214588960524}}
{"filename": "p03105_1", "type": "JavaScript", "obfuscated": "const main=input=>{const In=input['split']('\\x20')['map'](n=>Number(n));const o1=In[0x0]>In[0x1]?0x0:In[0x1]/In[0x0];console['log'](o1>=In[0x2]?In[0x2]:o1);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 11 4", "4"], ["3 9 5", "3"], ["100 1 10", "0"]], "original": "const main = input =>{\n    const In = input.split(' ').map(n=>Number(n));\n    const o1 = In[0] > In[1] ? 0 : In[1]/In[0];\n    console.log(o1 >= In[2] ? In[2] : o1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 107, "deobfuscated": "const main = input => {\n  const In = input.split(\" \").map(n => Number(n));\n  const o1 = In[0] > In[1] ? 0 : In[1] / In[0];\n  console.log(o1 >= In[2] ? In[2] : o1);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.700275309979198, "ngram_match_score": 0.48942779020795013, "weighted_ngram_match_score": 0.587535518674359, "syntax_match_score": 1.0, "dataflow_match_score": 0.7241379310344828}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03219_1", "type": "JavaScript", "obfuscated": "const rl=require('readline')['createInterface']({'input':process['stdin']});rl['on']('line',line=>{const param=line['split']('\\x20');solve(Number(param[0x0]),Number(param[0x1]));rl['close']();});function solve(x,y){console['log'](x+y/0x2);}", "test_cases": [["81 58", "110"], ["4 54", "31"]], "original": "const rl = require('readline')\n    .createInterface({\n        input: process.stdin,\n    });\n\nrl.on('line', (line) => {\n    const param = line.split(\" \");\n    solve(Number(param[0]), Number(param[1]));\n    rl.close();\n});\n\nfunction solve(x,y){\n    console.log(x+y/2);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 108, "deobfuscated": "const rl = require(\"readline\").createInterface({\n  input: process.stdin\n});\nrl.on(\"line\", line => {\n  const param = line.split(\" \");\n  solve(Number(param[0]), Number(param[1]));\n  rl.close();\n});\nfunction solve(x, y) {\n  console.log(x + y / 2);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.712408437519786, "ngram_match_score": 0.4332140178299369, "weighted_ngram_match_score": 0.5414197322492071, "syntax_match_score": 0.875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03221_1", "type": "JavaScript", "obfuscated": "function fillZero(l,num){num=String(num);for(var i=num['length'];i<l;i++){num='0'+num;}return num;}function main(arg){arg=arg['trim']()['split']('\\x0a');arg[0x0]=arg[0x0]['split']('\\x20');var N=Number(arg[0x0][0x0]);var M=Number(arg[0x0][0x1]);arg['shift']();var p_master={};for(var i=0x0;i<arg['length'];i++){var tmp=arg[i]['split']('\\x20')['map'](e=>Number(e));arg[i]=tmp;if(!p_master[tmp[0x0]]){p_master[tmp[0x0]]=[];}p_master[tmp[0x0]]['push'](tmp[0x1]);}for(key in p_master){p_master[key]['sort']();}for(var i=0x0;i<arg['length'];i++){var _p=arg[i][0x0];var j=0x0;for(var j=0x0;j<p_master[_p]['length'];j++){if(p_master[_p][j]===arg[i][0x1]){break;}}console['log'](fillZero(0x6,_p)+fillZero(0x6,j+0x1));}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3\n1 32\n2 63\n1 12", "000001000002\n000002000001\n000001000001"], ["2 3\n2 55\n2 77\n2 99", "000002000001\n000002000002\n000002000003"]], "original": "function fillZero(l,num) {\n\tnum = String(num)\n\tfor (var i = num.length; i < l; i++) {\n\t\tnum = \"0\" + num\n\t}\n\treturn num\n}\n\nfunction main(arg) {\n\targ = arg.trim().split(\"\\n\")\n\targ[0] = arg[0].split(\" \")\n\tvar N = Number(arg[0][0])\n\tvar M = Number(arg[0][1])\n\n\targ.shift()\n\n\tvar p_master = {}\n\n\tfor (var i = 0; i < arg.length; i++) {\n\t\tvar tmp = arg[i].split(\" \").map(e => Number(e))\n\t\targ[i] = tmp\n\n\t\t// p_mastre.push(tmp[0])\n\t\tif (!p_master[tmp[0]]) {\n\t\t\tp_master[tmp[0]] = []\n\t\t}\n\t\tp_master[tmp[0]].push(tmp[1])\n\t}\n\n\tfor (key in p_master) {\n\t\tp_master[key].sort()\n\t}\n\t// console.log(JSON.stringify(p_master))\n\n\tfor (var i = 0; i < arg.length; i++) {\n\t\tvar _p = arg[i][0]\n\n\t\tvar j = 0;\n\t\tfor (var j = 0; j < p_master[_p].length; j++) {\n\t\t\tif (p_master[_p][j] === arg[i][1]) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tconsole.log(fillZero(6,_p) + fillZero(6, j+1))\n\t}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 109, "deobfuscated": "function fillZero(l, num) {\n  num = String(num);\n  for (var i = num.length; i < l; i++) {\n    num = \"0\" + num;\n  }\n  return num;\n}\nfunction main(arg) {\n  arg = arg.trim().split(\"\\n\");\n  arg[0] = arg[0].split(\" \");\n  var N = Number(arg[0][0]);\n  var M = Number(arg[0][1]);\n  arg.shift();\n  var p_master = {};\n  for (var i = 0; i < arg.length; i++) {\n    var tmp = arg[i].split(\" \").map(e => Number(e));\n    arg[i] = tmp;\n    if (!p_master[tmp[0]]) {\n      p_master[tmp[0]] = [];\n    }\n    p_master[tmp[0]].push(tmp[1]);\n  }\n  for (key in p_master) {\n    p_master[key].sort();\n  }\n  for (var i = 0; i < arg.length; i++) {\n    var _p = arg[i][0];\n    var j = 0;\n    for (var j = 0; j < p_master[_p].length; j++) {\n      if (p_master[_p][j] === arg[i][1]) {\n        break;\n      }\n    }\n    console.log(fillZero(6, _p) + fillZero(6, j + 1));\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8025647549131074, "ngram_match_score": 0.600845334959647, "weighted_ngram_match_score": 0.6094136846927829, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03337_1", "type": "JavaScript", "obfuscated": "function main(input){const a=parseInt(input['split']('\\x20')[0x0],0xa);const b=parseInt(input['split']('\\x20')[0x1],0xa);ptnAdd=a+b;ptnSub=a-b;ptnMul=a*b;ans=Math['max']['apply'](null,[ptnAdd,ptnSub,ptnMul]);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 1", "4"], ["4 -2", "6"], ["0 0", "0"]], "original": "function main (input) {\n  const a = parseInt(input.split(' ')[0],10);\n  const b = parseInt(input.split(' ')[1],10);\n\n  ptnAdd = a + b;\n  ptnSub = a - b;\n  ptnMul = a * b;\n\n  ans = Math.max.apply(null,[ptnAdd,ptnSub,ptnMul]);\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 110, "deobfuscated": "function main(input) {\n  const a = parseInt(input.split(\" \")[0], 10);\n  const b = parseInt(input.split(\" \")[1], 10);\n  ptnAdd = a + b;\n  ptnSub = a - b;\n  ptnMul = a * b;\n  ans = Math.max.apply(null, [ptnAdd, ptnSub, ptnMul]);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7457662800103076, "ngram_match_score": 0.5200080568609685, "weighted_ngram_match_score": 0.5920893212447782, "syntax_match_score": 1.0, "dataflow_match_score": 0.8709677419354839}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03400_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=Number(input[0x0]);var d=Number(input[0x1]['split']('\\x20')[0x0]);var x=Number(input[0x1]['split']('\\x20')[0x1]);var array=[];for(var i=0x0;i<input['length']-0x2;i++){array['push'](Number(input[i+0x2]));}var total=[];for(var j=0x0;j<array['length'];j++){for(var k=0x1;k<0x64;k++){if(d>=k*array[j]+0x1){total['push'](k*array[j]+0x1);}}}console['log'](total['length']+n+x);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n7 1\n2\n5\n10", "8"], ["2\n8 20\n1\n10", "29"], ["5\n30 44\n26\n18\n81\n18\n6", "56"]], "original": "function Main(input) {\ninput = input.split(\"\\n\");\n\nvar n =Number(input[0]);\nvar d =Number(input[1].split(\" \")[0]);\nvar x =Number(input[1].split(\" \")[1]);\nvar array=[];\nfor(var i =0; i<input.length-2; i++){\n    array.push(Number(input[i+2]));\n}\n\nvar total=[]\nfor(var j =0; j<array.length; j++){\n\n    for(var k=1; k<100;k++){\n    if(d>=k*array[j]+1){\n        total.push(k*array[j]+1);\n}\n    }\n}\n\nconsole.log(total.length+n+x);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 111, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = Number(input[0]);\n  var d = Number(input[1].split(\" \")[0]);\n  var x = Number(input[1].split(\" \")[1]);\n  var array = [];\n  for (var i = 0; i < input.length - 2; i++) {\n    array.push(Number(input[i + 2]));\n  }\n  var total = [];\n  for (var j = 0; j < array.length; j++) {\n    for (var k = 1; k < 100; k++) {\n      if (d >= k * array[j] + 1) {\n        total.push(k * array[j] + 1);\n      }\n    }\n  }\n  console.log(total.length + n + x);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6039023102032901, "ngram_match_score": 0.13238705785989174, "weighted_ngram_match_score": 0.2832221829532685, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03470_1", "type": "JavaScript", "obfuscated": "var lines=[];var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]);lines['shift']();var D=lines['map'](i=>Number(i));D=D['filter']((value,index,array)=>{return array['indexOf'](value)===index;});console['log'](D['length']);});", "test_cases": [["4\n10\n8\n8\n6", "3"], ["3\n15\n15\n15", "1"], ["7\n50\n30\n50\n100\n50\n80\n30", "4"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]); lines.shift();\n    var D = lines.map(i => Number(i));\n\n    D = D.filter((value, index, array) => {\n        return (array.indexOf(value) === index)\n    })\n\n    console.log(D.length)\n\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 112, "deobfuscated": "var lines = [];\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0]);\n  lines.shift();\n  var D = lines.map(i => Number(i));\n  D = D.filter((value, index, array) => {\n    return array.indexOf(value) === index;\n  });\n  console.log(D.length);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8061731005460993, "ngram_match_score": 0.6997721973872311, "weighted_ngram_match_score": 0.7115868714638327, "syntax_match_score": 0.8133333333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03632_1", "type": "JavaScript", "obfuscated": "function Main(inp){var input=inp['split']('\\x0a')[0x0]['split']('\\x20')['map'](function(n){return Number(n);});var start=Math['max'](input[0x0],input[0x2]);var end=Math['min'](input[0x1],input[0x3]);var overlap=Math['max'](0x0,end-start);console['log'](overlap);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["0 75 25 100", "50"], ["0 33 66 99", "0"], ["10 90 20 80", "60"]], "original": "function Main(inp) {\n    var input = inp.split('\\n')[0].split(' ').map(function(n) {\n        return Number(n);\n    });\n    var start = Math.max(input[0], input[2]);\n    var end = Math.min(input[1], input[3]);\n    var overlap = Math.max(0, end - start);\n    console.log(overlap);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 113, "deobfuscated": "function Main(inp) {\n  var input = inp.split(\"\\n\")[0].split(\" \").map(function (n) {\n    return Number(n);\n  });\n  var start = Math.max(input[0], input[2]);\n  var end = Math.min(input[1], input[3]);\n  var overlap = Math.max(0, end - start);\n  console.log(overlap);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9022491013080781, "ngram_match_score": 0.8592899528284996, "weighted_ngram_match_score": 0.8925635952609554, "syntax_match_score": 1.0, "dataflow_match_score": 0.8571428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03679_1", "type": "JavaScript", "obfuscated": "'use strict';const main=INPUT=>{const input=INPUT['split']('\\x0a')[0x0];const [X,A,B]=input['split']('\\x20')['map'](n=>Number(n));if(A-B>=0x0){console['log']('delicious');}else if(A-B<0x0&&Math['abs'](A-B)<=X){console['log']('safe');}else{console['log']('dangerous');}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3 6", "safe"], ["6 5 1", "delicious"], ["3 7 12", "dangerous"]], "original": "'use strict'\n\nconst main = (INPUT) => {\n  const input = INPUT.split('\\n')[0]\n  const [X, A, B] = input.split(' ').map(n => Number(n))\n  if (A - B >= 0) {\n    console.log('delicious')\n  } else if (A - B < 0 && Math.abs(A - B) <= X) {\n    console.log('safe')\n  } else {\n    console.log('dangerous')\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 114, "deobfuscated": "'use strict';\n\nconst main = INPUT => {\n  const input = INPUT.split(\"\\n\")[0];\n  const [X, A, B] = input.split(\" \").map(n => Number(n));\n  if (A - B >= 0) {\n    console.log(\"delicious\");\n  } else if (A - B < 0 && Math.abs(A - B) <= X) {\n    console.log(\"safe\");\n  } else {\n    console.log(\"dangerous\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6666889395796032, "ngram_match_score": 0.5581866511294156, "weighted_ngram_match_score": 0.571799099979192, "syntax_match_score": 0.9315068493150684, "dataflow_match_score": 0.6052631578947368}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03721_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const args=input['trim']()['split']('\\x0a')['map'](_=>_['split']('\\x20')['map'](x=>parseInt(x,0xa)));const k=args[0x0][0x1];const arr=args['slice'](0x1);let cnt=0x0;let i=0x0;while(cnt<k){cnt+=arr[i][0x1];i++;}console['log'](arr[i-0x1][0x0]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4\n1 1\n2 2\n3 3", "3"], ["10 500000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000", "1"]], "original": "\"use strict\";\n\nfunction main(input){\n  const args = input.trim().split('\\n').map(_=>_.split(' ').map(x=>parseInt(x,10)));\n  const k = args[0][1];\n  const arr = args.slice(1);\n  \n  let cnt = 0;\n  let i = 0;\n  while(cnt < k){\n    cnt += arr[i][1];\n    i++;\n  }\n  \n  console.log(arr[i-1][0]);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));  ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 115, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const args = input.trim().split(\"\\n\").map(_ => _.split(\" \").map(x => parseInt(x, 10)));\n  const k = args[0][1];\n  const arr = args.slice(1);\n  let cnt = 0;\n  let i = 0;\n  while (cnt < k) {\n    cnt += arr[i][1];\n    i++;\n  }\n  console.log(arr[i - 1][0]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7336754417538489, "ngram_match_score": 0.4348670334759194, "weighted_ngram_match_score": 0.5767578104625527, "syntax_match_score": 1.0, "dataflow_match_score": 0.9230769230769231}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02401_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var input=chunk['split']('\\x0a');var output='';for(var i=0x0;i<input['length'];i++){var r=calc(input[i]);if(r!==![]){console['log'](r);}}function calc(input){var nums=input['split']('\\x20');nums[0x0]=Number(nums[0x0]);nums[0x2]=Number(nums[0x2]);if(nums[0x1]=='+'){return nums[0x0]+nums[0x2];}else if(nums[0x1]=='-'){return nums[0x0]-nums[0x2];}else if(nums[0x1]=='*'){return nums[0x0]*nums[0x2];}else if(nums[0x1]=='/'){return nums[0x0]/nums[0x2];}else if(nums[0x1]=='?'){return![];}}});", "test_cases": [["1 + 2\n56 - 18\n13 * 2\n100 / 10\n27 + 81\n0 ? 0", "3\n38\n26\n10\n108"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function (chunk) {\n    var input = chunk.split(\"\\n\");\n    var output = \"\";\n    \n    for(var i = 0; i < input.length; i ++){\n        var r = calc(input[i]);\n        if(r !== false){\n            console.log(r);\n        }\n    }\n    \n    function calc(input){\n        var nums = input.split(\" \");\n        nums[0] = Number(nums[0]);\n        nums[2] = Number(nums[2]);\n        if(nums[1] == \"+\"){\n            return nums[0] + nums[2];\n        }\n        else if(nums[1] == \"-\"){\n            return nums[0] - nums[2];\n        }\n        else if(nums[1] == \"*\"){\n            return nums[0] * nums[2];\n        }\n        else if(nums[1] == \"/\"){\n            return nums[0] / nums[2];\n        }\n        else if(nums[1] == \"?\"){\n            return false;\n        }\n        \n    }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 116, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var input = chunk.split(\"\\n\");\n  var output = \"\";\n  for (var i = 0; i < input.length; i++) {\n    var r = calc(input[i]);\n    if (r !== false) {\n      console.log(r);\n    }\n  }\n  function calc(input) {\n    var nums = input.split(\" \");\n    nums[0] = Number(nums[0]);\n    nums[2] = Number(nums[2]);\n    if (nums[1] == \"+\") {\n      return nums[0] + nums[2];\n    } else if (nums[1] == \"-\") {\n      return nums[0] - nums[2];\n    } else if (nums[1] == \"*\") {\n      return nums[0] * nums[2];\n    } else if (nums[1] == \"/\") {\n      return nums[0] / nums[2];\n    } else if (nums[1] == \"?\") {\n      return false;\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7664800958863985, "ngram_match_score": 0.4875800287410942, "weighted_ngram_match_score": 0.5783403548045001, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00707065657160455, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.024242424242424288, "new_decrease_halstead_effort": 0.15860418701931467}}
{"filename": "p02630_1", "type": "JavaScript", "obfuscated": "function main(lines){const [N]=parseNumberLine(lines[0x0]);const numbers=parseNumberLine(lines[0x1]);const [Q]=parseNumberLine(lines[0x2]);const operationLines=lines['slice'](0x3);let result=numbers['reduce']((t,v)=>t+v,0x0);for(let i=0x0;i<Q;++i){const [B,C]=parseNumberLine(operationLines[i]);while(!![]){const index=numbers['indexOf'](B);if(index<0x0)break;numbers[index]=C;result+=C-B;}console['log'](result);}}function parseNumberLine(line,radix=0xa){return line['split'](/\\s+/)['map'](_=>parseInt(_,radix));}main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["4\n1 2 3 4\n3\n1 2\n3 4\n2 4", "11\n12\n16"], ["4\n1 1 1 1\n3\n1 2\n2 1\n3 5", "8\n4\n4"], ["2\n1 2\n3\n1 100\n2 100\n100 1000", "102\n200\n2000"]], "original": "\nfunction main(lines) {\n    const [N] = parseNumberLine(lines[0])\n    const numbers = parseNumberLine(lines[1])\n    const [Q] = parseNumberLine(lines[2])\n    const operationLines = lines.slice(3)\n\n    let result = numbers.reduce((t, v) => t + v, 0)\n    for (let i = 0; i < Q; ++i) {\n        const [B, C] = parseNumberLine(operationLines[i])\n\n        while (true) {\n            const index = numbers.indexOf(B)\n            if (index < 0) break\n\n            numbers[index] = C\n            result += C - B\n        }\n\n        console.log(result)\n    }\n}\n\nfunction parseNumberLine(line, radix = 10) {\n    return line.split(/\\s+/).map(_ => parseInt(_, radix))\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 117, "deobfuscated": "function main(lines) {\n  const [N] = parseNumberLine(lines[0]);\n  const numbers = parseNumberLine(lines[1]);\n  const [Q] = parseNumberLine(lines[2]);\n  const operationLines = lines.slice(3);\n  let result = numbers.reduce((t, v) => t + v, 0);\n  for (let i = 0; i < Q; ++i) {\n    const [B, C] = parseNumberLine(operationLines[i]);\n    while (true) {\n      const index = numbers.indexOf(B);\n      if (index < 0) {\n        break;\n      }\n      numbers[index] = C;\n      result += C - B;\n    }\n    console.log(result);\n  }\n}\nfunction parseNumberLine(line, radix = 10) {\n  return line.split(/\\s+/).map(_ => parseInt(_, radix));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7822649133055197, "ngram_match_score": 0.5943990619787805, "weighted_ngram_match_score": 0.6154686720513795, "syntax_match_score": 0.9191919191919192, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006041919973090337, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02564102564102566, "new_decrease_halstead_effort": 0.149723266357649}}
{"filename": "p02639_1", "type": "JavaScript", "obfuscated": "function main(input){const idx=input['trim']()['split']('\\x20')['map'](el=>parseInt(el,0xa))['findIndex'](el=>el===0x0);console['log'](idx+0x1);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["0 2 3 4 5", "1"], ["1 2 0 4 5", "3"]], "original": "function main(input) {\n  const idx = input.trim().split(' ').map(el => parseInt(el, 10)).findIndex(el => el === 0)\n  console.log(idx + 1);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 118, "deobfuscated": "function main(input) {\n  const idx = input.trim().split(\" \").map(el => parseInt(el, 10)).findIndex(el => el === 0);\n  console.log(idx + 1);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8236277273557471, "ngram_match_score": 0.6712403123245675, "weighted_ngram_match_score": 0.6788261526539767, "syntax_match_score": 1.0, "dataflow_match_score": 0.9444444444444444}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02676_1", "type": "JavaScript", "obfuscated": "const main=arg=>{arg=arg['trim']()['split']('\\x0a');const k=arg[0x0];const s=arg[0x1];if(s['length']<=k)console['log'](s);else console['log'](s['slice'](0x0,k)+'...');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\nnikoandsolstice", "nikoand..."], ["40\nferelibenterhominesidquodvoluntcredunt", "ferelibenterhominesidquodvoluntcredunt"]], "original": "const main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const k = arg[0]\n    const s = arg[1]\n    if(s.length <= k) console.log(s)\n    else console.log(s.slice(0, k) + '...')\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 119, "deobfuscated": "const main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const k = arg[0];\n  const s = arg[1];\n  if (s.length <= k) {\n    console.log(s);\n  } else {\n    console.log(s.slice(0, k) + \"...\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7022555435178832, "ngram_match_score": 0.4298980473206516, "weighted_ngram_match_score": 0.5219812696080242, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02701_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');const setItems=new Set(input);console['log'](setItems['size']-0x1);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\napple\norange\napple", "2"], ["5\ngrape\ngrape\ngrape\ngrape\ngrape", "1"], ["4\naaaa\na\naaa\naa", "4"]], "original": "'use strict';\nconst main = arg => {\n  const input = arg.trim().split('\\n');\n\n  const setItems = new Set(input);\n  console.log(setItems.size - 1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 120, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  const setItems = new Set(input);\n  console.log(setItems.size - 1);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7634026183654117, "ngram_match_score": 0.7378351342269067, "weighted_ngram_match_score": 0.7532753392347398, "syntax_match_score": 1.0, "dataflow_match_score": 0.5625}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02784_1", "type": "JavaScript", "obfuscated": "function main(input){var line=input['split'](/\\r?\\n/g);var arr=line[0x0]['split']('\\x20');const H=arr[0x0],N=arr[0x1];var A=line[0x1]['split']('\\x20')['map'](Number);A=A['reduce']((A,x)=>A+x);console['log'](0x1<Math['ceil'](H/A)?'No':'Yes');}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 3\n4 5 6", "Yes"], ["20 3\n4 5 6", "No"], ["210 5\n31 41 59 26 53", "Yes"], ["211 5\n31 41 59 26 53", "No"]], "original": "function main(input) {\n    var line = input.split(/\\r?\\n/g);\n    var arr = line[0].split(\" \");\n    const H = arr[0], N = arr[1];\n    var A = line[1].split(\" \").map(Number);\n    A = A.reduce((A, x) => A + x)\n    console.log(1 < Math.ceil(H / A) ? \"No\" : \"Yes\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 121, "deobfuscated": "function main(input) {\n  var line = input.split(/\\r?\\n/g);\n  var arr = line[0].split(\" \");\n  const H = arr[0];\n  const N = arr[1];\n  var A = line[1].split(\" \").map(Number);\n  A = A.reduce((A, x) => A + x);\n  console.log(Math.ceil(H / A) > 1 ? \"No\" : \"Yes\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8272757563641, "ngram_match_score": 0.7123214434811149, "weighted_ngram_match_score": 0.7396387248324279, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00045527655401766953, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.012820512820512775, "new_decrease_halstead_effort": -0.012820512820512997}}
{"filename": "p02790_1", "type": "JavaScript", "obfuscated": "function Main(arg){var a=arg['split']('\\x0a')[0x0]['split']('\\x20')[0x0]-0x0;var b=arg['split']('\\x0a')[0x0]['split']('\\x20')[0x1]-0x0;if(a<b){console['log'](a['toString']()['repeat'](b));}else{console['log'](b['toString']()['repeat'](a));}return;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3", "3333"], ["7 7", "7777777"]], "original": "function Main(arg)\n{\n  var a = arg.split(\"\\n\")[0].split(\" \")[0]-0;\n  var b = arg.split(\"\\n\")[0].split(\" \")[1]-0;\n \n  if (a < b) {\n    console.log(a.toString().repeat(b));\n  }\n  else {\n    console.log(b.toString().repeat(a));\n  }\n\n  return;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 122, "deobfuscated": "function Main(arg) {\n  var a = arg.split(\"\\n\")[0].split(\" \")[0] - 0;\n  var b = arg.split(\"\\n\")[0].split(\" \")[1] - 0;\n  if (a < b) {\n    console.log(a.toString().repeat(b));\n  } else {\n    console.log(b.toString().repeat(a));\n  }\n  return;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8762647214841734, "ngram_match_score": 0.6966863379186454, "weighted_ngram_match_score": 0.8083725480180484, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02791_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(s){s=s['trim']()['split']('\\x0a');const n=Number(s[0x0]);const p=s[0x1]['trim']()['split']('\\x20')['map'](Number);let cnt=0x0;for(let i=0x1;i<=n;i++){let flg=!![];let t=p['slice'](0x0,i);let x=0x0;while(x<t['length']-0x1){if(t[x]<p[i-0x1])flg=![];x++;}if(flg)cnt++;}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n4 2 5 1 3", "3"], ["4\n4 3 2 1", "4"], ["6\n1 2 3 4 5 6", "1"], ["8\n5 7 4 2 6 8 1 3", "4"], ["1\n1", "1"]], "original": "\"use strict\"\n \nfunction Main(s) {\n  s = s.trim().split('\\n');\n  const n = Number(s[0]);\n  const p = s[1].trim().split(' ').map(Number);\n \n  let cnt=0;\n  for(let i=1; i<=n; i++){\n    let flg = true;\n \n    let t = p.slice(0, i);\n    let x = 0;\n    while(x < t.length-1) {\n      if(t[x] < p[i-1]) flg=false;\n      x++;\n    }\n \n    if(flg)cnt++;\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 123, "deobfuscated": "'use strict';\n\nfunction Main(s) {\n  s = s.trim().split(\"\\n\");\n  const n = Number(s[0]);\n  const p = s[1].trim().split(\" \").map(Number);\n  let cnt = 0;\n  for (let i = 1; i <= n; i++) {\n    let flg = true;\n    let t = p.slice(0, i);\n    let x = 0;\n    while (x < t.length - 1) {\n      if (t[x] < p[i - 1]) {\n        flg = false;\n      }\n      x++;\n    }\n    if (flg) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6816622142321291, "ngram_match_score": 0.3436006735247904, "weighted_ngram_match_score": 0.5115088700039474, "syntax_match_score": 0.8953488372093024, "dataflow_match_score": 0.9761904761904762}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009336957429902926, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.042735042735042694, "new_decrease_halstead_effort": 0.20398957192736877}}
{"filename": "p02801_1", "type": "JavaScript", "obfuscated": "Main(myin());function myin(){return require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();}function myout(t){console['log'](t);}function myerr(t){console['error'](t);}function myconv(i,no){switch(no){case 0x1:return parseInt(i);case 0x2:return i['split']('\\x20');case 0x3:return i['split']('\\x0a');case 0x4:return i['split']('\\x20')['map'](a=>Number(a));case 0x5:return i['split']('\\x0a')['map'](a=>Number(a));case 0x6:return i['split']('');case 0x7:return i['split']('')['map'](a=>Number(a));case 0x8:return i['join']('\\x20');case 0x9:return i['join']('\\x0a');case 0x0:return i['join']('');default:return i;}}function Main(input){input=myconv(input,null);var list='abcdefghijklmnopqrstivwxyz'['split']('');myout(list[list['indexOf'](input)+0x1]);}", "test_cases": [["a", "b"], ["y", "z"]], "original": "Main(myin());\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\nfunction myerr(t){console.error(t);}//standard error\n//[no]param\n//不明値:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\n//8:半角SPで結合　9:改行で結合　0:文字なしで結合\nfunction myconv(i,no){switch(no){case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));case 8:return i.join(\" \");case 9:return i.join(\"\\n\");case 0:return i.join(\"\");default:return i;}}\nfunction Main(input) {\n  input = myconv(input,null);\n  var list = \"abcdefghijklmnopqrstivwxyz\".split(\"\");\n  myout(list[list.indexOf(input)+1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 124, "deobfuscated": "Main(myin());\nfunction myin() {\n  return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\n}\nfunction myout(t) {\n  console.log(t);\n}\nfunction myerr(t) {\n  console.error(t);\n}\nfunction myconv(i, no) {\n  switch (no) {\n    case 1:\n      return parseInt(i);\n    case 2:\n      return i.split(\" \");\n    case 3:\n      return i.split(\"\\n\");\n    case 4:\n      return i.split(\" \").map(a => Number(a));\n    case 5:\n      return i.split(\"\\n\").map(a => Number(a));\n    case 6:\n      return i.split(\"\");\n    case 7:\n      return i.split(\"\").map(a => Number(a));\n    case 8:\n      return i.join(\" \");\n    case 9:\n      return i.join(\"\\n\");\n    case 0:\n      return i.join(\"\");\n    default:\n      return i;\n  }\n}\nfunction Main(input) {\n  input = myconv(input, null);\n  var list = \"abcdefghijklmnopqrstivwxyz\".split(\"\");\n  myout(list[list.indexOf(input) + 1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5167373968103082, "ngram_match_score": 0.07470913469393776, "weighted_ngram_match_score": 0.13112934143618374, "syntax_match_score": 0.8611111111111112, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02912_1", "type": "JavaScript", "obfuscated": "'use strict';const arg_str=require('fs')['readFileSync']('/dev/stdin','UTF-8');const args_lines=arg_str['split']('\\x0a');const n_m=args_lines[0x0]['split']('\\x20');const N=n_m[0x0];const M=n_m[0x1];let A_array=args_lines[0x1]['split']('\\x20');A_array=A_array['map'](x=>parseInt(x));for(let i=0x0;i<M;i++){const max_value=Math['max']['apply'](null,A_array);const max_index=A_array['indexOf'](max_value);A_array[max_index]=A_array[max_index]/0x2;}const result=A_array['map'](x=>Math['floor'](x))['reduce']((a,x)=>a+=x,0x0);console['log'](result);", "test_cases": [["3 3\n2 13 8", "9"], ["4 4\n1 9 3 5", "6"], ["1 100000\n1000000000", "0"], ["10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "9500000000"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args_lines = arg_str.split('\\n')\nconst n_m = args_lines[0].split(' ')\nconst N = n_m[0]\nconst M = n_m[1]\nlet A_array = args_lines[1].split(' ')\nA_array = A_array.map(x=>parseInt(x))\n\nfor(let i=0;i<M;i++){\n  const max_value = Math.max.apply(null,A_array)\n    const max_index = A_array.indexOf(max_value)\n\n    A_array[max_index] = A_array[max_index] / 2\n}\n\nconst result = A_array.map(x=>Math.floor(x)).reduce((a,x) => a+=x,0)\nconsole.log(result)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 125, "deobfuscated": "'use strict';\n\nconst arg_str = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nconst args_lines = arg_str.split(\"\\n\");\nconst n_m = args_lines[0].split(\" \");\nconst N = n_m[0];\nconst M = n_m[1];\nlet A_array = args_lines[1].split(\" \");\nA_array = A_array.map(x => parseInt(x));\nfor (let i = 0; i < M; i++) {\n  const max_value = Math.max.apply(null, A_array);\n  const max_index = A_array.indexOf(max_value);\n  A_array[max_index] = A_array[max_index] / 2;\n}\nconst result = A_array.map(x => Math.floor(x)).reduce((a, x) => a += x, 0);\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5957647010661258, "ngram_match_score": 0.16725044676539122, "weighted_ngram_match_score": 0.23193738975717643, "syntax_match_score": 1.0, "dataflow_match_score": 0.9838709677419355}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02915_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill(0).map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill(0).map(x=>'+r+')';return eval(r);}console['log'](main());function main(){var n=o['a']();return n*n*n;}", "test_cases": [["2", "8"], ["1", "1"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill(0).map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill(0).map(x=>\"+r+\")\";return eval(r);}\n\nconsole.log(main());\nfunction main(){\n  var n=o.a();\n  return n*n*n;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 126, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill(0).map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill(0).map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nconsole.log(main());\nfunction main() {\n  var n = o.a();\n  return n * n * n;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46254599352938885, "ngram_match_score": 0.0025416702044156448, "weighted_ngram_match_score": 0.019588005270605918, "syntax_match_score": 0.8280542986425339, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.3076923076923077, "length_score": -0.3076923076923077, "increase_maintainability": -0.04235175006505554, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.042402826855123754, "new_decrease_halstead_effort": -0.10111221995636943}}
{"filename": "p02935_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{var n=Number(lines[0x0]);var v=lines[0x1]['split']('\\x20');v=v['map'](function(str){return Number(str);});for(i=0x0;i<n-0x1;i++){var min1=v['sort']((a,b)=>a-b)[0x0];v['splice'](0x0,0x1);var min2=v[0x0];v['splice'](0x0,0x1);var a=(min1+min2)/0x2;if(v['length']==0x0){break;}v['push'](a);}console['log'](a);});", "test_cases": [["2\n3 4", "3.5"], ["3\n500 300 200", "375"], ["5\n138 138 138 138 138", "138"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = []\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on('line', (line) => {\n  lines.push(line);\n});\n\nreader.on('close', () => {\n var n = Number(lines[0]);\n var v = lines[1].split(' ');\n v = v.map(function(str) { return Number(str)});\n\n for(i=0; i<n-1; i++){\n   var min1 = v.sort((a, b)=> a - b)[0];\n   v.splice(0,1);\n   var min2 = v[0];\n   v.splice(0,1);\n   var a = (min1 + min2)/2;\n   if(v.length == 0){\n     break;\n   }\n   v.push(a);\n }\n console.log(a);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 127, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  var n = Number(lines[0]);\n  var v = lines[1].split(\" \");\n  v = v.map(function (str) {\n    return Number(str);\n  });\n  for (i = 0; i < n - 1; i++) {\n    var min1 = v.sort((a, b) => a - b)[0];\n    v.splice(0, 1);\n    var min2 = v[0];\n    v.splice(0, 1);\n    var a = (min1 + min2) / 2;\n    if (v.length == 0) {\n      break;\n    }\n    v.push(a);\n  }\n  console.log(a);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6877399666583609, "ngram_match_score": 0.35671033705655136, "weighted_ngram_match_score": 0.4544795537899672, "syntax_match_score": 0.9576271186440678, "dataflow_match_score": 0.9821428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02993_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');var tem=input;var beforeText=tem;var arr=String(tem)['split']('');var a=parseInt(arr[0x0],0xa);var b=parseInt(arr[0x1],0xa);var c=parseInt(arr[0x2],0xa);var d=parseInt(arr[0x3],0xa);if(a==b){console['log']('Bad');}else if(b==c){console['log']('Bad');}else if(c==d){console['log']('Bad');}else{console['log']('Good');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3776", "Bad"], ["8080", "Good"], ["1333", "Bad"], ["0024", "Bad"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t\tinput = input.split(\" \");\n\t\t\n\t\tvar tem = input;\n \n  \n\t\n\t//文字列から10進数に変換するときはparseIntを使います\n\t //   var tem = parseInt(input[0], 10);\n  \n  // 分割する数値\nvar beforeText = tem;\n// 数値を文字列に変換して、一文字ずつ分割\nvar arr = String(tem).split('');\n\nvar a = parseInt(arr[0], 10);\nvar b = parseInt(arr[1], 10);\nvar c = parseInt(arr[2], 10);\nvar d = parseInt(arr[3], 10);\n\n//console.log(arr); \n//console.log(a,b,c,d); \n\nif (a == b){console.log('Bad');}\n      else if (b == c){console.log('Bad');}\n             else if (c == d){console.log('Bad');}\n                             else {console.log('Good');}\n                             \n                      \n                             \n        \n\n\n  \n   \t   }    //    1    \n     \n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 128, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  var tem = input;\n  var beforeText = tem;\n  var arr = String(tem).split(\"\");\n  var a = parseInt(arr[0], 10);\n  var b = parseInt(arr[1], 10);\n  var c = parseInt(arr[2], 10);\n  var d = parseInt(arr[3], 10);\n  if (a == b) {\n    console.log(\"Bad\");\n  } else if (b == c) {\n    console.log(\"Bad\");\n  } else if (c == d) {\n    console.log(\"Bad\");\n  } else {\n    console.log(\"Good\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7637163476535387, "ngram_match_score": 0.5175347957532671, "weighted_ngram_match_score": 0.5373305948608877, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03011_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const P=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);const Q=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);const R=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x2]);const max=Math['max'](P,Q,R);console['log'](P+Q+R-max);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["1 3 4", "4"], ["3 2 3", "5"]], "original": "'use strict'\n\nfunction Main(input) {\n  const P = Number(input.split(\"\\n\")[0].split(\" \")[0])\n  const Q = Number(input.split(\"\\n\")[0].split(\" \")[1])\n  const R = Number(input.split(\"\\n\")[0].split(\" \")[2])\n\n  const max = Math.max(P, Q, R)\n  console.log(P + Q + R - max)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim())\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 129, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const P = Number(input.split(\"\\n\")[0].split(\" \")[0]);\n  const Q = Number(input.split(\"\\n\")[0].split(\" \")[1]);\n  const R = Number(input.split(\"\\n\")[0].split(\" \")[2]);\n  const max = Math.max(P, Q, R);\n  console.log(P + Q + R - max);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7682098727421667, "ngram_match_score": 0.5308752592992659, "weighted_ngram_match_score": 0.5419642316694009, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0014296566506037944, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03351448836369597}}
{"filename": "p03077_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const args=input['split']('\\x0a');const N=parseInt(args[0x0]);const A=parseInt(args[0x1]);const B=parseInt(args[0x2]);const C=parseInt(args[0x3]);const D=parseInt(args[0x4]);const E=parseInt(args[0x5]);const station=[A,B,C,D,E];let max_traf=Math['min'](...station);console['log'](Math['ceil'](N/max_traf)+0x4);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n3\n2\n4\n3\n5", "7"], ["10\n123\n123\n123\n123\n123", "5"], ["10000000007\n2\n3\n5\n7\n11", "5000000008"]], "original": "\"use strict\";\nfunction main(input) {\n    const args = input.split('\\n');\n\n    const N = parseInt(args[0]);\n    const A = parseInt(args[1]);\n    const B = parseInt(args[2]);\n    const C = parseInt(args[3]);\n    const D = parseInt(args[4]);\n    const E = parseInt(args[5]);\n\n    const station = [A, B, C, D, E];\n    let max_traf = Math.min(...station);\n    console.log(Math.ceil(N / max_traf) + 4);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 130, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const args = input.split(\"\\n\");\n  const N = parseInt(args[0]);\n  const A = parseInt(args[1]);\n  const B = parseInt(args[2]);\n  const C = parseInt(args[3]);\n  const D = parseInt(args[4]);\n  const E = parseInt(args[5]);\n  const station = [A, B, C, D, E];\n  let max_traf = Math.min(...station);\n  console.log(Math.ceil(N / max_traf) + 4);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9388602304885408, "ngram_match_score": 0.8729118929672821, "weighted_ngram_match_score": 0.8825290289868813, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03086_1", "type": "JavaScript", "obfuscated": "input=require('fs')['readFileSync']('/dev/stdin','utf8');lines=input['split']('\\x0a');S=lines['shift']();max=0x0;cnt=0x0;for(i=0x0;i<S['length'];i++){if(/[AGCT]/['test'](S[i])){cnt++;}else{if(max<cnt){max=cnt;}cnt=0x0;}}console['log'](max);", "test_cases": [["ATCODER", "3"], ["HATAGAYA", "5"], ["SHINJUKU", "0"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nS = lines.shift()\nmax = 0\ncnt = 0\nfor(i=0;i < S.length; i++) {\n    if (/[AGCT]/.test(S[i])) {\n       cnt++ \n    } else {\n        if (max < cnt) {\n            max = cnt\n        }\n        cnt = 0\n    }\n}\nconsole.log(max)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 131, "deobfuscated": "input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlines = input.split(\"\\n\");\nS = lines.shift();\nmax = 0;\ncnt = 0;\nfor (i = 0; i < S.length; i++) {\n  if (/[AGCT]/.test(S[i])) {\n    cnt++;\n  } else {\n    if (max < cnt) {\n      max = cnt;\n    }\n    cnt = 0;\n  }\n}\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7134365726187527, "ngram_match_score": 0.40338469258185977, "weighted_ngram_match_score": 0.45036159789315106, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03107_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']();input=input['replace'](/\\s+/,'')['split']('');var height=input['length'];var one=0x0;var zero=0x0;while(input['length']){if(input['pop']()==='0')zero++;else one++;}console['log'](Math['min'](zero,one)*0x2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["0011", "4"], ["11011010001011", "12"], ["0", "0"]], "original": "\"use strict\"\nfunction Main(input){\n  input=input.trim();\n  input=input.replace(/\\s+/,\"\").split(\"\");\n  var height=input.length;\n  var one=0;\n  var zero=0;\n  while(input.length){\n    if(input.pop()===\"0\")zero++;\n    else one++;\n  }\n  console.log(Math.min(zero,one)*2);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 132, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim();\n  input = input.replace(/\\s+/, \"\").split(\"\");\n  var height = input.length;\n  var one = 0;\n  var zero = 0;\n  while (input.length) {\n    if (input.pop() === \"0\") {\n      zero++;\n    } else {\n      one++;\n    }\n  }\n  console.log(Math.min(zero, one) * 2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48392624777153165, "ngram_match_score": 0.011955001291462567, "weighted_ngram_match_score": 0.03312498979466406, "syntax_match_score": 0.890625, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03126_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var m=input[0x0]['split']('\\x20')['map'](Number);input['shift']();var arr=new Array(0x23)['fill'](0x0);input['forEach'](function(val){var mem=val['split']('\\x20')['map'](Number);mem['shift']();mem['forEach'](function(p){arr[p]++;});});var ans=0x0;arr['forEach'](function(val){if(val==m[0x0])ans++;});console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3 4\n2 1 3\n3 1 2 3\n2 3 2", "1"], ["5 5\n4 2 3 4 5\n4 1 3 4 5\n4 1 2 4 5\n4 1 2 3 5\n4 1 2 3 4", "0"], ["1 30\n3 5 10 30", "3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var m = input[0].split(\" \").map(Number);\n    input.shift();\n    var arr = new Array(35).fill(0);\n    input.forEach(function(val){\n        var mem = val.split(\" \").map(Number);\n        mem.shift();\n        mem.forEach(function(p){\n            arr[p]++;\n        });\n    })\n    var ans = 0;\n    arr.forEach(function(val){\n      if(val==m[0]) ans++;  \n    })\n    console.log(ans);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 133, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var m = input[0].split(\" \").map(Number);\n  input.shift();\n  var arr = new Array(35).fill(0);\n  input.forEach(function (val) {\n    var mem = val.split(\" \").map(Number);\n    mem.shift();\n    mem.forEach(function (p) {\n      arr[p]++;\n    });\n  });\n  var ans = 0;\n  arr.forEach(function (val) {\n    if (val == m[0]) {\n      ans++;\n    }\n  });\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7563900178007583, "ngram_match_score": 0.4701148837908455, "weighted_ngram_match_score": 0.6511898682632516, "syntax_match_score": 0.9042553191489362, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03207_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const N=parseInt(args[0x0][0x0],0xa);const p=args['slice'](0x1,N+0x1)['map'](arg=>parseInt(arg[0x0],0xa))['sort']((a,b)=>b-a);let sum=p[0x0]/0x2;for(let i=0x1;i<N;i++){sum+=p[i];}console['log'](sum);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n4980\n7980\n6980", "15950"], ["4\n4320\n4320\n4320\n4320", "15120"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst N = parseInt(args[0][0], 10)\n\tconst p = args.slice(1, N + 1).map(arg => parseInt(arg[0], 10)).sort((a, b) => b - a)\n\tlet sum = p[0] / 2\n\n\tfor (let i = 1; i < N; i++) {\n\t\tsum += p[i]\n\t}\n\n\tconsole.log(sum)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 134, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const N = parseInt(args[0][0], 10);\n  const p = args.slice(1, N + 1).map(arg => parseInt(arg[0], 10)).sort((a, b) => b - a);\n  let sum = p[0] / 2;\n  for (let i = 1; i < N; i++) {\n    sum += p[i];\n  }\n  console.log(sum);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7267571027419922, "ngram_match_score": 0.6377847387519487, "weighted_ngram_match_score": 0.6492436722160202, "syntax_match_score": 1.0, "dataflow_match_score": 0.62}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03220_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,v=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<v)v=rest[i];return v;}function max(){var rest=arguments,v=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>v)v=rest[i];return v;}function gcd(){var rest=arguments,v=rest[0x0],temp=(a,b)=>b?temp(b,a%b):a;for(var i=0x1;i<rest['length'];i++)v=temp(v,rest[i]);return v;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var n=toInt(input[0x0]);var ta=toIntArr(input[0x1]['split']('\\x20'));var hs=toIntArr(input[0x2]['split']('\\x20'));var t=ta[0x0];var a=ta[0x1];var ans=0x1;var x=abs(t-a-0.006*hs[0x0]),y;for(var i=0x1;i<n;i++){y=abs(t-a-0.006*hs[i]);if(y<x){ans=i+0x1;x=y;}}console['log'](ans);}", "test_cases": [["2\n12 5\n1000 2000", "1"], ["3\n21 -11\n81234 94124 52141", "3"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest=arguments,v=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<v)v=rest[i];return v}\nfunction max(){var rest=arguments,v=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>v)v=rest[i];return v}\nfunction gcd(){var rest=arguments,v=rest[0],temp=(a,b)=>b?temp(b,a%b):a;for(var i=1;i<rest.length;i++)v=temp(v,rest[i]);return v}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar ta = toIntArr(input[1].split(' '));\n\tvar hs = toIntArr(input[2].split(' '));\n\tvar t = ta[0];\n\tvar a = ta[1];\n\n\tvar ans = 1;\n\tvar x =abs(t-a-0.006*hs[0]) ,y;\n\tfor(var i = 1; i < n; i++){\n\t\ty = abs(t-a-0.006*hs[i]);\n\t\t//console.log(i,x,y)\n\t\tif(y<x){\n\t\t\tans = i+1;\n\t\t\tx = y;\n\t\t}\n\t}\n\n\tconsole.log(ans);\n\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 135, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var v = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < v) {\n      v = rest[i];\n    }\n  }\n  return v;\n}\nfunction max() {\n  var rest = arguments;\n  var v = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > v) {\n      v = rest[i];\n    }\n  }\n  return v;\n}\nfunction gcd() {\n  var rest = arguments;\n  var v = rest[0];\n  var temp = (a, b) => b ? temp(b, a % b) : a;\n  for (var i = 1; i < rest.length; i++) {\n    v = temp(v, rest[i]);\n  }\n  return v;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var n = toInt(input[0]);\n  var ta = toIntArr(input[1].split(\" \"));\n  var hs = toIntArr(input[2].split(\" \"));\n  var t = ta[0];\n  var a = ta[1];\n  var ans = 1;\n  var x = abs(t - a - hs[0] * 0.006);\n  var y;\n  for (var i = 1; i < n; i++) {\n    y = abs(t - a - hs[i] * 0.006);\n    if (y < x) {\n      ans = i + 1;\n      x = y;\n    }\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6063043259672776, "ngram_match_score": 0.16750988716247467, "weighted_ngram_match_score": 0.44485501206318656, "syntax_match_score": 0.8277777777777777, "dataflow_match_score": 0.9850746268656716}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005905983412282101, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02083333333333326, "new_decrease_halstead_effort": -0.02083333333333348}}
{"filename": "p03309_1", "type": "JavaScript", "obfuscated": "function myin(){return require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();}function myout(t){console['log'](t);}function myconv(i,no){switch(no){case 0x0:return i;case 0x1:return parseInt(i);case 0x2:return i['split']('\\x20');case 0x3:return i['split']('\\x0a');case 0x4:return i['split']('\\x20')['map'](a=>Number(a));case 0x5:return i['split']('\\x0a')['map'](a=>Number(a));case 0x6:return i['split']('');case 0x7:return i['split']('')['map'](a=>Number(a));}}function Main(input){input=myconv(input,0x3);var N=myconv(input[0x0],0x1);var list=myconv(input[0x1],0x4);var tmpList=[];for(var i=0x0;i<N;i++){tmpList['push'](list[i]-(i+0x1));}tmpList['sort'](function(a,b){return a-b;});var b=tmpList[myconv(tmpList['length']/0x2,0x1)];var output=0x0;for(var i=0x0;i<N;i++){output+=Math['abs'](list[i]-(b+(i+0x1)));}myout(output);}Main(myin());", "test_cases": [["5\n2 2 3 5 5", "2"], ["9\n1 2 3 4 5 6 7 8 9", "0"], ["6\n6 5 4 3 2 1", "18"], ["7\n1 1 1 1 2 3 4", "6"]], "original": "function myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  var N = myconv(input[0],1);\n  var list = myconv(input[1],4);\n  \n  var tmpList = [];\n  for(var i = 0; i < N; i++){\n    tmpList.push(list[i] - (i + 1));\n  }\n  \n  tmpList.sort(function(a,b){\n  \treturn a-b;\n  });\n  \n  var b = tmpList[myconv(tmpList.length / 2,1)];\n  var output = 0;\n  for(var i = 0; i < N; i++){\n    output += Math.abs(list[i] - (b + (i + 1)));\n  }\n  myout(output);\n}\n\nMain(myin());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 136, "deobfuscated": "function myin() {\n  return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\n}\nfunction myout(t) {\n  console.log(t);\n}\nfunction myconv(i, no) {\n  switch (no) {\n    case 0:\n      return i;\n    case 1:\n      return parseInt(i);\n    case 2:\n      return i.split(\" \");\n    case 3:\n      return i.split(\"\\n\");\n    case 4:\n      return i.split(\" \").map(a => Number(a));\n    case 5:\n      return i.split(\"\\n\").map(a => Number(a));\n    case 6:\n      return i.split(\"\");\n    case 7:\n      return i.split(\"\").map(a => Number(a));\n  }\n}\nfunction Main(input) {\n  input = myconv(input, 3);\n  var N = myconv(input[0], 1);\n  var list = myconv(input[1], 4);\n  var tmpList = [];\n  for (var i = 0; i < N; i++) {\n    tmpList.push(list[i] - (i + 1));\n  }\n  tmpList.sort(function (a, b) {\n    return a - b;\n  });\n  var b = tmpList[myconv(tmpList.length / 2, 1)];\n  var output = 0;\n  for (var i = 0; i < N; i++) {\n    output += Math.abs(list[i] - (b + (i + 1)));\n  }\n  myout(output);\n}\nMain(myin());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6476260507144753, "ngram_match_score": 0.29092651107090794, "weighted_ngram_match_score": 0.41653675611447843, "syntax_match_score": 0.8830409356725146, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03719_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['trim']()['split']('\\x20');const a=parseInt(args[0x0],0xa);const b=parseInt(args[0x1],0xa);const c=parseInt(args[0x2],0xa);if(c>=a&&c<=b)console['log']('Yes');else console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 3 2", "Yes"], ["6 5 4", "No"], ["2 2 2", "Yes"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.trim().split(' ')\n\tconst a = parseInt(args[0], 10)\n\tconst b = parseInt(args[1], 10)\n\tconst c = parseInt(args[2], 10)\n\tif (c >= a && c <= b) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 137, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.trim().split(\" \");\n  const a = parseInt(args[0], 10);\n  const b = parseInt(args[1], 10);\n  const c = parseInt(args[2], 10);\n  if (c >= a && c <= b) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6411765517206925, "ngram_match_score": 0.47790089602155134, "weighted_ngram_match_score": 0.5408282993669661, "syntax_match_score": 0.8793103448275862, "dataflow_match_score": 0.6666666666666666}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03852_1", "type": "JavaScript", "obfuscated": "function Main(input){c=input;const vowel='aeiou';console['log'](vowel['indexOf'](c)!==-0x1?'vowel':'consonant');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["a", "vowel"], ["z", "consonant"], ["s", "consonant"]], "original": "function Main(input) {\n\tc = input;\n\tconst vowel = 'aeiou';\n  \tconsole.log(vowel.indexOf(c)!==-1 ? \"vowel\" : \"consonant\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 138, "deobfuscated": "function Main(input) {\n  c = input;\n  const vowel = \"aeiou\";\n  console.log(vowel.indexOf(c) !== -1 ? \"vowel\" : \"consonant\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.869645032514307, "ngram_match_score": 0.693395566222006, "weighted_ngram_match_score": 0.7851845638352218, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02573_1", "type": "JavaScript", "obfuscated": "const processData=lines=>{const [n,m]=lines[0x0]['split']('\\x20')['map'](x=>+x);let friendships={};for(let i=0x0;i<m;i++){const f=lines[i+0x1]['split']('\\x20')['map'](x=>+x);let friendItem=friendships[f[0x0]]||friendships[f[0x1]]||{};friendships[f[0x0]]=friendItem;friendships[f[0x1]]=friendItem;friendItem[f[0x0]]=!![];friendItem[f[0x1]]=!![];}let maxCount=0x1;for(let p in friendships){let count=0x0;for(let t2 in friendships[p]){count++;}maxCount=Math['max'](maxCount,count);}console['log'](maxCount);};let i='';process['stdin']['on']('data',c=>i+=c);process['stdin']['on']('end',()=>{const {EOL:EOL}=require('os');const lines=i['split'](EOL);processData(lines);});", "test_cases": [["5 3\n1 2\n3 4\n5 1", "3"], ["4 10\n1 2\n2 1\n1 2\n2 1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "4"], ["10 4\n3 1\n4 1\n5 9\n2 6", "3"]], "original": "const processData = (lines) => {\n    const [n, m] = lines[0].split(' ').map( x => +x)\n    let friendships = {}\n    for (let i=0; i<m; i++) {\n        const f = lines[i+1].split(' ').map(x => +x)\n        let friendItem = friendships[f[0]] || friendships[f[1]] || {}\n        friendships[f[0]] = friendItem\n        friendships[f[1]] = friendItem\n\n        friendItem[f[0]] = true\n        friendItem[f[1]] = true\n    }\n    \n    let maxCount = 1\n    for (let p in friendships) {\n        let count = 0\n        for (let t2 in friendships[p]) {\n            count++\n        }\n        maxCount = Math.max(maxCount, count)\n    }\n\n    console.log(maxCount)\n}\n\nlet i = ''\nprocess.stdin.on('data', c => i += c)\nprocess.stdin.on('end', () => {\n    const {EOL} = require('os')\n    const lines = i.split(EOL) /*your input text, split by lines*/\n    processData(lines)\n})\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 139, "deobfuscated": "const processData = lines => {\n  const [n, m] = lines[0].split(\" \").map(x => +x);\n  let friendships = {};\n  for (let i = 0; i < m; i++) {\n    const f = lines[i + 1].split(\" \").map(x => +x);\n    let friendItem = friendships[f[0]] || friendships[f[1]] || {};\n    friendships[f[0]] = friendItem;\n    friendships[f[1]] = friendItem;\n    friendItem[f[0]] = true;\n    friendItem[f[1]] = true;\n  }\n  let maxCount = 1;\n  for (let p in friendships) {\n    let count = 0;\n    for (let t2 in friendships[p]) {\n      count++;\n    }\n    maxCount = Math.max(maxCount, count);\n  }\n  console.log(maxCount);\n};\nlet i = \"\";\nprocess.stdin.on(\"data\", c => i += c);\nprocess.stdin.on(\"end\", () => {\n  const {\n    EOL: EOL\n  } = require(\"os\");\n  const lines = i.split(EOL);\n  processData(lines);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5619277093866798, "ngram_match_score": 0.3730473615414281, "weighted_ngram_match_score": 0.39460149253421695, "syntax_match_score": 0.8925619834710744, "dataflow_match_score": 0.5875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02594_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);console['log'](N>=0x1e?'Yes':'No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["25", "No"], ["30", "Yes"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n\n    console.log(N >= 30 ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 140, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  console.log(N >= 30 ? \"Yes\" : \"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9004469293864308, "ngram_match_score": 0.7954369121903441, "weighted_ngram_match_score": 0.8063508053553788, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02601_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x0a');const line_one=input[0x0]['split']('\\x20');const K=parseInt(input[0x1]);let line_one_arr=[];for(let i in line_one){line_one_arr['push'](parseInt(line_one[i]));}for(let i=0x0;i<K;i++){if(line_one_arr[0x0]>=line_one_arr[0x1]){line_one_arr[0x1]=line_one_arr[0x1]*0x2;continue;}if(line_one_arr[0x1]>=line_one_arr[0x2]){line_one_arr[0x2]=line_one_arr[0x2]*0x2;}}if(line_one_arr[0x0]<line_one_arr[0x1]&&line_one_arr[0x1]<line_one_arr[0x2]){console['log']('Yes');}else{console['log']('No');}}function numberSort(array){array['sort'](f);return array;}var f=function(a,b){return a-b;};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["7 2 5\n3", "Yes"], ["7 4 2\n3", "No"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const line_one = input[0].split(\" \");\n  const K = parseInt(input[1]);\n  let line_one_arr = [];\n\n  for (let i in line_one) {\n    line_one_arr.push(parseInt(line_one[i]));\n  }\n\n  for (let i = 0; i < K; i++) {\n    if (line_one_arr[0] >= line_one_arr[1]) {\n      line_one_arr[1] = line_one_arr[1] * 2;\n      continue;\n    }\n    if (line_one_arr[1] >= line_one_arr[2]) {\n      line_one_arr[2] = line_one_arr[2] * 2;\n    }\n  }\n\n  if (line_one_arr[0] < line_one_arr[1] && line_one_arr[1] < line_one_arr[2]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 141, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const line_one = input[0].split(\" \");\n  const K = parseInt(input[1]);\n  let line_one_arr = [];\n  for (let i in line_one) {\n    line_one_arr.push(parseInt(line_one[i]));\n  }\n  for (let i = 0; i < K; i++) {\n    if (line_one_arr[0] >= line_one_arr[1]) {\n      line_one_arr[1] = line_one_arr[1] * 2;\n      continue;\n    }\n    if (line_one_arr[1] >= line_one_arr[2]) {\n      line_one_arr[2] = line_one_arr[2] * 2;\n    }\n  }\n  if (line_one_arr[0] < line_one_arr[1] && line_one_arr[1] < line_one_arr[2]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\nfunction f(a, b) {\n  return a - b;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9327109606557623, "ngram_match_score": 0.8928063664354525, "weighted_ngram_match_score": 0.8935021061203118, "syntax_match_score": 0.9658119658119658, "dataflow_match_score": 0.9787234042553191}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019607843137254943, "new_decrease_halstead_effort": 0.08464652871916944}}
{"filename": "p02647_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var mem=input[0x0]['split']('\\x20');var arr=input[0x1]['split']('\\x20')['map'](Number);for(var p=0x0;p<mem[0x1];p++){var tmp=new Array(arr['length'])['fill'](0x0);for(var i=0x0;i<arr['length'];i++){var n=arr[i];var min=i-n;var max=i+n;if(min<0x0)min=0x0;if(max>arr['length']-0x1)max=arr['length']-0x1;for(var j=min;j<=max;j++){tmp[j]++;}}var flag=!![];for(var i=0x0;i<arr['length'];i++){if(arr[i]!=tmp[i])flag=![];arr[i]=tmp[i];}if(flag)break;}console['log'](arr['join']('\\x20'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["5 1\n1 0 0 1 0", "1 2 2 1 2"], ["5 2\n1 0 0 1 0", "3 3 4 4 3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var mem = input[0].split(\" \");\n    var arr = input[1].split(\" \").map(Number);\n    for(var p=0;p<mem[1];p++){\n        var tmp = new Array(arr.length).fill(0);\n        for (var i = 0; i < arr.length; i++) {\n            var n = arr[i];\n          //  console.log(i,n)\n            var min = i - n;\n            var max = i + n;\n            if (min < 0) min = 0;\n            if (max > arr.length-1) max = arr.length-1;\n            for (var j = min; j <= max; j++) {\n                tmp[j]++;\n            }\n          //  console.log(max,min,tmp)\n        }\n      //  console.log(arr)\n        var flag = true;\n      //  console.log(arr.length)\n        for (var i = 0; i < arr.length; i++) {\n            if(arr[i]!=tmp[i]) flag = false;\n            arr[i] = tmp[i];\n        }\n     //   console.log(arr.join(\" \"));\n        if(flag) break;\n    }\n    console.log(arr.join(\" \"));\n} Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 142, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var mem = input[0].split(\" \");\n  var arr = input[1].split(\" \").map(Number);\n  for (var p = 0; p < mem[1]; p++) {\n    var tmp = new Array(arr.length).fill(0);\n    for (var i = 0; i < arr.length; i++) {\n      var n = arr[i];\n      var min = i - n;\n      var max = i + n;\n      if (min < 0) {\n        min = 0;\n      }\n      if (max > arr.length - 1) {\n        max = arr.length - 1;\n      }\n      for (var j = min; j <= max; j++) {\n        tmp[j]++;\n      }\n    }\n    var flag = true;\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] != tmp[i]) {\n        flag = false;\n      }\n      arr[i] = tmp[i];\n    }\n    if (flag) {\n      break;\n    }\n  }\n  console.log(arr.join(\" \"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8053382032598699, "ngram_match_score": 0.621063765572196, "weighted_ngram_match_score": 0.7002890474672838, "syntax_match_score": 0.9, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008335601896416467, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02659574468085102, "new_decrease_halstead_effort": 0.1653043787716637}}
{"filename": "p02681_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{const tmp=input['trim']()['split']('\\x0a');const S=tmp[0x0];const T=tmp[0x1];let result='Yes';const tmpStr=T['replace'](S,'');if(T['slice'](-0x1)===tmpStr&&tmpStr['length']===0x1){result='Yes';}else{result='No';}console['log'](result);return result;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["chokudai\nchokudaiz", "Yes"], ["snuke\nsnekee", "No"], ["a\naa", "Yes"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const S = tmp[0]\n  const T = tmp[1]\n\n  let result = 'Yes'\n\n  const tmpStr = T.replace(S, '')\n\n  if (T.slice(-1) === tmpStr && tmpStr.length === 1) {\n    result = 'Yes'\n  } else {\n    result = 'No'\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 143, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  const tmp = input.trim().split(\"\\n\");\n  const S = tmp[0];\n  const T = tmp[1];\n  let result = \"Yes\";\n  const tmpStr = T.replace(S, \"\");\n  if (T.slice(-1) === tmpStr && tmpStr.length === 1) {\n    result = \"Yes\";\n  } else {\n    result = \"No\";\n  }\n  console.log(result);\n  return result;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.655527259505257, "ngram_match_score": 0.45195414291064523, "weighted_ngram_match_score": 0.4670039830042469, "syntax_match_score": 0.9253731343283582, "dataflow_match_score": 0.7777777777777778}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02761_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input['shift']();N=parseInt(tmp['split']('\\x20')[0x0]);M=tmp['split']('\\x20')[0x1];S=input;A='n'['repeat'](N)['split']('');flag=!![];S['forEach'](v=>{t=v['split']('\\x20')['map'](v=>parseInt(v));if(A[t[0x0]-0x1]!='n'&&A[t[0x0]-0x1]!=t[0x1])flag=![];A[t[0x0]-0x1]=t[0x1];});A=A['join']('');A=A['replace'](/^nn([0-9])/,'10$1');A=A['replace'](/^n([0-9])/,'1$1');A=A['replace'](/n/g,'0');A=parseInt(A);if(flag&&(A+'')['length']==N){console['log'](A);}else{console['log'](-0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n1 7\n3 2\n1 7", "702"], ["3 2\n2 1\n2 3", "-1"], ["3 1\n1 0", "-1"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input.shift();\n  N = parseInt(tmp.split(\" \")[0]);\n  M = tmp.split(\" \")[1];\n  S = input;\n  A = \"n\".repeat(N).split(\"\");\n  flag = true;\n  S.forEach(v => {\n    t = v.split(\" \").map(v => parseInt(v));\n    if (A[t[0] - 1] != \"n\" && A[t[0] - 1] != t[1]) flag = false;\n    A[t[0] - 1] = t[1];\n  });\n\n  A = A.join(\"\");\n  A = A.replace(/^nn([0-9])/, \"10$1\");\n  A = A.replace(/^n([0-9])/, \"1$1\");\n  A = A.replace(/n/g, \"0\");\n  A = parseInt(A);\n  if (flag && (A + \"\").length == N) {\n    console.log(A);\n  } else {\n    console.log(-1);\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 144, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input.shift();\n  N = parseInt(tmp.split(\" \")[0]);\n  M = tmp.split(\" \")[1];\n  S = input;\n  A = \"n\".repeat(N).split(\"\");\n  flag = true;\n  S.forEach(v => {\n    t = v.split(\" \").map(v => parseInt(v));\n    if (A[t[0] - 1] != \"n\" && A[t[0] - 1] != t[1]) {\n      flag = false;\n    }\n    A[t[0] - 1] = t[1];\n  });\n  A = A.join(\"\");\n  A = A.replace(/^nn([0-9])/, \"10$1\");\n  A = A.replace(/^n([0-9])/, \"1$1\");\n  A = A.replace(/n/g, \"0\");\n  A = parseInt(A);\n  if (flag && (A + \"\").length == N) {\n    console.log(A);\n  } else {\n    console.log(-1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9456177562420743, "ngram_match_score": 0.9215704518410858, "weighted_ngram_match_score": 0.9225444087436501, "syntax_match_score": 0.9383561643835616, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008707783805304903, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0234375, "new_decrease_halstead_effort": 0.19514477909573924}}
{"filename": "p02885_1", "type": "JavaScript", "obfuscated": "function Main(input){var args=input['trim']()['split']('\\x20')['map'](Number);var nums=args[0x1]*0x2;var ans=0x0;if(nums<=args[0x0]){ans=args[0x0]-nums;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["12 4", "4"], ["20 15", "0"], ["20 30", "0"]], "original": "function Main(input) {\n    var args = input.trim().split(' ').map(Number);\n    var nums = args[1] * 2\n    var ans = 0;\n    if(nums <= args[0]) {\n      ans = args[0] - nums;\n    }\n    console.log(ans);\n }\n \n/* var input = `12 11`;\nMain(input);\n */ \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 145, "deobfuscated": "function Main(input) {\n  var args = input.trim().split(\" \").map(Number);\n  var nums = args[1] * 2;\n  var ans = 0;\n  if (nums <= args[0]) {\n    ans = args[0] - nums;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7494779264822263, "ngram_match_score": 0.515717434360678, "weighted_ngram_match_score": 0.5276488170227727, "syntax_match_score": 1.0, "dataflow_match_score": 0.9545454545454546}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02899_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=[];var arr=input[0x1]['split']('\\x20')['map'](Number);for(var i=0x0;i<arr['length'];i++){N['push']([arr[i],i+0x1]);}N=N['sort'](function(a,b){return a[0x0]-b[0x0];});var ans='';for(i=0x0;i<N['length'];i++){ans+=N[i][0x1];ans+='\\x20';}console['log'](ans['trim']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n2 3 1", "3 1 2"], ["5\n1 2 3 4 5", "1 2 3 4 5"], ["8\n8 2 7 3 4 5 6 1", "8 2 4 5 6 7 3 1"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var N = [];\n    var arr = input[1].split(\" \").map(Number);\n    for(var i=0;i<arr.length;i++){\n        N.push([arr[i],i+1]);\n    }\n    N = N.sort(function(a,b){return a[0]-b[0]});\n    var ans = \"\";\n    for(i=0;i<N.length;i++){\n        ans+=N[i][1]\n        ans+=\" \";\n    }\n   // console.log(N)\n    console.log(ans.trim());\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 146, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = [];\n  var arr = input[1].split(\" \").map(Number);\n  for (var i = 0; i < arr.length; i++) {\n    N.push([arr[i], i + 1]);\n  }\n  N = N.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  var ans = \"\";\n  for (i = 0; i < N.length; i++) {\n    ans += N[i][1];\n    ans += \" \";\n  }\n  console.log(ans.trim());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6728643700922695, "ngram_match_score": 0.23531869157325572, "weighted_ngram_match_score": 0.45613878879582237, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02916_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');n=Number(input[0x0]['split']('\\x20'));a=input[0x1]['split']('\\x20')['map'](Number);b=input[0x2]['split']('\\x20')['map'](Number);c=input[0x3]['split']('\\x20')['map'](Number);var count=0x0;for(var i=0x0;i<n;i++){count+=b[a[i]-0x1];if(a[i]===a[i-0x1]+0x1){count+=c[a[i]-0x2];}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n3 1 2\n2 5 4\n3 6", "14"], ["4\n2 3 4 1\n13 5 8 24\n45 9 15", "74"], ["2\n1 2\n50 50\n50", "150"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n  \tn = Number(input[0].split(\" \"));\n    a = input[1].split(\" \").map(Number);\n    b = input[2].split(\" \").map(Number);\n    c = input[3].split(\" \").map(Number);\n  \tvar count = 0;\n  \tfor(var i=0; i<n; i++){\n      count += b[a[i]-1];\n      if(a[i] === a[i-1]+1){\n      \tcount += c[a[i]-2];\n      }\n    }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 147, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  n = Number(input[0].split(\" \"));\n  a = input[1].split(\" \").map(Number);\n  b = input[2].split(\" \").map(Number);\n  c = input[3].split(\" \").map(Number);\n  var count = 0;\n  for (var i = 0; i < n; i++) {\n    count += b[a[i] - 1];\n    if (a[i] === a[i - 1] + 1) {\n      count += c[a[i] - 2];\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8046315488423629, "ngram_match_score": 0.5121892956005112, "weighted_ngram_match_score": 0.7063368997689403, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02945_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const A=parseInt(args[0x0][0x0],0xa);const B=parseInt(args[0x0][0x1],0xa);console['log'](Math['max'](A+B,A-B,A*B)+0x0);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["-13 3", "-10"], ["1 -33", "34"], ["13 3", "39"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst A = parseInt(args[0][0], 10)\n\tconst B = parseInt(args[0][1], 10)\n\tconsole.log(Math.max(A + B, A - B, A * B) + 0)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 148, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const A = parseInt(args[0][0], 10);\n  const B = parseInt(args[0][1], 10);\n  console.log(Math.max(A + B, A - B, A * B) + 0);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7033286066539421, "ngram_match_score": 0.5570633241178571, "weighted_ngram_match_score": 0.5705368167836253, "syntax_match_score": 1.0, "dataflow_match_score": 0.6857142857142857}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02989_1", "type": "JavaScript", "obfuscated": "const main=input=>{var d=input[0x1]['split']('\\x20')['map'](p=>parseInt(p,0xa))['sort']((p,q)=>p>q?0x1:-0x1);console['log'](d[d['length']/0x2]-d[d['length']/0x2-0x1]);};main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["6\n9 1 4 4 6 7", "2"], ["8\n9 1 14 5 5 4 4 14", "0"], ["14\n99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1", "42685"]], "original": "const main = input => {\n    var d = input[1].split(' ').map(p => parseInt(p, 10)).sort((p,q) => p>q?1:-1);\n    console.log(d[d.length/2]-d[d.length/2-1]);   \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 149, "deobfuscated": "const main = input => {\n  var d = input[1].split(\" \").map(p => parseInt(p, 10)).sort((p, q) => p > q ? 1 : -1);\n  console.log(d[d.length / 2] - d[d.length / 2 - 1]);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6396729281864214, "ngram_match_score": 0.25006681812704007, "weighted_ngram_match_score": 0.4699152171992906, "syntax_match_score": 1.0, "dataflow_match_score": 0.8387096774193549}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02999_1", "type": "JavaScript", "obfuscated": "function Main(input){var result;const X=parseInt(input[0x0]);const A=parseInt(input[0x1]);result=X<A?0x0:0xa;console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/\\n|\\s/));", "test_cases": [["3 5", "0"], ["7 5", "10"], ["6 6", "10"]], "original": "function Main(input) {\n    var result;\n    const X = parseInt(input[0])\n    const A = parseInt(input[1])\n    \n    result = X < A ? 0 : 10;\n    console.log(result);\n}\n\n// 1行入力の場合\n// Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n\n// 改行で分割\n// Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n/));\n\n// 改行・空白で分割\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 150, "deobfuscated": "function Main(input) {\n  var result;\n  const X = parseInt(input[0]);\n  const A = parseInt(input[1]);\n  result = X < A ? 0 : 10;\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7412096667654253, "ngram_match_score": 0.4577932948971187, "weighted_ngram_match_score": 0.5070453721645825, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03031_1", "type": "JavaScript", "obfuscated": "function Main(input){lines=input['split']('\\x0a');lines=input['split']('\\x0a');n=lines[0x0]['split']('\\x20')[0x0]*0x1;m=lines[0x0]['split']('\\x20')[0x1]*0x1;ps=lines[lines['length']-0x1]['split']('\\x20');lines=lines['slice'](0x1,-0x1)['map'](function(l){return l['split']('\\x20')['slice'](0x1);});ans=0x0;for(i=0x0;i<0x1<<n;i++){s=('0000000000'+i['toString'](0x2))['slice'](-0x1*n);flg=!![];for(j=0x0;j<lines['length'];j++){on=0x0;if(!flg)break;for(k=0x0;k<lines[j]['length'];k++){on+=s[n-lines[j][k]]*0x1;}if(on%0x2!=ps[j]){flg=![];}}if(flg){ans++;}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2\n2 1 2\n1 2\n0 1", "1"], ["2 3\n2 1 2\n1 1\n1 2\n0 0 1", "0"], ["5 2\n3 1 2 5\n2 2 3\n1 0", "8"]], "original": "function Main(input) {\n  lines = input.split(\"\\n\")\n  lines = input.split(\"\\n\")\n  n = lines[0].split(\" \")[0] * 1\n  m = lines[0].split(\" \")[1] * 1\n  ps = lines[lines.length - 1].split(\" \")\n  lines = lines.slice(1, -1).map(function(l) { return l.split(' ').slice(1) })\n  ans = 0\n  for (i = 0; i < (1 << n);i++) {\n    s = (\"0000000000\" + i.toString(2)).slice(-1 * n)\n    flg = true\n    for(j = 0; j < lines.length; j++) {\n      on = 0\n      if (!flg) break;\n      for(k = 0; k < lines[j].length; k++) {\n        on += s[n - lines[j][k]] * 1\n      }\n      if (on % 2 != ps[j]) {\n        flg = false\n      }\n    }\n    if (flg) {\n      ans++\n    }\n  }\n  console.log(ans) \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 151, "deobfuscated": "function Main(input) {\n  lines = input.split(\"\\n\");\n  lines = input.split(\"\\n\");\n  n = lines[0].split(\" \")[0] * 1;\n  m = lines[0].split(\" \")[1] * 1;\n  ps = lines[lines.length - 1].split(\" \");\n  lines = lines.slice(1, -1).map(function (l) {\n    return l.split(\" \").slice(1);\n  });\n  ans = 0;\n  for (i = 0; i < 1 << n; i++) {\n    s = (\"0000000000\" + i.toString(2)).slice(n * -1);\n    flg = true;\n    for (j = 0; j < lines.length; j++) {\n      on = 0;\n      if (!flg) {\n        break;\n      }\n      for (k = 0; k < lines[j].length; k++) {\n        on += s[n - lines[j][k]] * 1;\n      }\n      if (on % 2 != ps[j]) {\n        flg = false;\n      }\n    }\n    if (flg) {\n      ans++;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7329024001847109, "ngram_match_score": 0.5056087953167601, "weighted_ngram_match_score": 0.5348443428370493, "syntax_match_score": 0.891156462585034, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0052543956456239105, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025906735751295318, "new_decrease_halstead_effort": 0.12338297432343925}}
{"filename": "p03061_1", "type": "JavaScript", "obfuscated": "function gcd(arr){var f=(a,b)=>b?f(b,a%b):a;var ans=arr[0x0];for(var i=0x1;i<arr['length'];i++){ans=f(ans,arr[i]);}return ans;}function getExcep(c){var min=Math['min'](...c);var max=Math['max'](...c);var mincount=0x0;var maxcount=0x0;var findValue=0x0;for(var i=0x0;i<c['length'];i++){if(c[i]===min){mincount++;}}if(mincount===0x1){findValue=min;}else{findValue=max;}for(var i=0x0;i<c['length'];i++){if(c[i]===findValue){return i;}}}function main(arg){arg=arg['trim']()['split']('\\x0a');var N=Number(arg[0x0]);var A=arg[0x1]['split']('\\x20')['map'](Number);var c=new Array(A['length'])['fill'](0x0);var result=0x0;for(var i=0x0;i<A['length'];i++){var _A=A['slice']();_A['splice'](i,0x1);var n=gcd(_A);c[i]=n;}var idx=getExcep(c);A[idx]=A[idx+0x1];console['log'](gcd(A));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n7 6 8", "2"], ["3\n12 15 18", "6"], ["2\n1000000000 1000000000", "1000000000"]], "original": "function gcd(arr) {\n    var f = (a, b) => b ? f(b, a % b) : a\n    var ans = arr[0]\n    for (var i = 1; i < arr.length; i++) {\n        ans = f(ans, arr[i]); \n    }\n    return ans \n}\n\nfunction getExcep(c) {\n\tvar min = Math.min(...c)\n\tvar max = Math.max(...c)\n\tvar mincount = 0\n\tvar maxcount = 0\n\tvar findValue = 0\n\tfor (var i = 0; i < c.length; i++) {\n\t\tif (c[i] === min) {\n\t\t\tmincount++\n\t\t}\n\t}\n\tif (mincount === 1) {\n\t\tfindValue = min\n\t} else {\n\t\tfindValue = max\n\t}\n\t// console.log(findValue)\n\tfor (var i = 0; i < c.length; i++) {\n\t\tif (c[i] === findValue) {\n\t\t\treturn i\n\t\t}\n\t}\n}\n\nfunction main(arg) {\n\targ = arg.trim().split(\"\\n\")\n\tvar N = Number(arg[0])\n\tvar A = arg[1].split(\" \").map(Number)\n\tvar c = new Array(A.length).fill(0)\n\tvar result = 0\n\tfor (var i = 0; i < A.length;i ++) {\n\t\tvar _A = A.slice()\n\t\t_A.splice(i, 1)\n\t\tvar n = gcd(_A)\n\t\tc[i] = n\n\t\t// console.log(_A)\n\t}\n\tvar idx = getExcep(c)\n\tA[idx] = A[idx+1]\n\n\tconsole.log(gcd(A))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 152, "deobfuscated": "function gcd(arr) {\n  var f = (a, b) => b ? f(b, a % b) : a;\n  var ans = arr[0];\n  for (var i = 1; i < arr.length; i++) {\n    ans = f(ans, arr[i]);\n  }\n  return ans;\n}\nfunction getExcep(c) {\n  var min = Math.min(...c);\n  var max = Math.max(...c);\n  var mincount = 0;\n  var maxcount = 0;\n  var findValue = 0;\n  for (var i = 0; i < c.length; i++) {\n    if (c[i] === min) {\n      mincount++;\n    }\n  }\n  if (mincount === 1) {\n    findValue = min;\n  } else {\n    findValue = max;\n  }\n  for (var i = 0; i < c.length; i++) {\n    if (c[i] === findValue) {\n      return i;\n    }\n  }\n}\nfunction main(arg) {\n  arg = arg.trim().split(\"\\n\");\n  var N = Number(arg[0]);\n  var A = arg[1].split(\" \").map(Number);\n  var c = new Array(A.length).fill(0);\n  var result = 0;\n  for (var i = 0; i < A.length; i++) {\n    var _A = A.slice();\n    _A.splice(i, 1);\n    var n = gcd(_A);\n    c[i] = n;\n  }\n  var idx = getExcep(c);\n  A[idx] = A[idx + 1];\n  console.log(gcd(A));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.805108606232305, "ngram_match_score": 0.6040295362226229, "weighted_ngram_match_score": 0.6164048887065968, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0023080469501984835, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03951510242802425}}
{"filename": "p03163_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['split']('\\x0a');const NW=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x));const N=NW[0x0];const W=NW[0x1];const items=lines['map'](line=>line['split']('\\x20')['map'](x=>parseInt(x)));dp=[];for(var i=0x0;i<W+0x1;i++){dp['push'](Array(N+0x1)['fill'](0x0));}var result=0x0;for(var i=0x0;i<N;i++){for(var w=0x0;w<=W;w++){var weight=items[i][0x0];var value=items[i][0x1];if(weight<=w){dp[w][i+0x1]=Math['max'](dp[w][i],dp[w-weight][i]+value);}else{dp[w][i+0x1]=dp[w][i];}if(dp[w][i+0x1]>result){result=dp[w][i+0x1];}}}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 8\n3 30\n4 50\n5 60", "90"], ["5 5\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000", "5000000000"], ["6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2", "17"]], "original": "//他人のソース\nfunction main(input){\n  const lines = input.split('\\n');\n  const NW = lines.shift().split(' ').map(x => parseInt(x));\n  const N = NW[0]\n  const W = NW[1]\n  const items = lines.map(line => line.split(' ').map(x => parseInt(x)) );\n\n//console.log(N);\n//console.log(W);\n//console.log(items);\n\n  dp = []\n  for(var i=0;i<W+1;i++){\n    dp.push( Array(N+1).fill(0) );\n  }\n\n  var result = 0;\n  for(var i=0;i<N;i++){\n    for(var w=0;w<=W;w++){\n\n      var weight = items[i][0]\n      var value = items[i][1]\n\n      if(weight <= w){\n        dp[w][i+1] = Math.max(dp[w][i], dp[w-weight][i] + value);\n      }else{\n        dp[w][i+1] = dp[w][i];\n      }\n\n      if(dp[w][i+1] > result){result = dp[w][i+1];}\n\n    }\n  }\n\n//  const result = Math.max( ...dp.map(arr => Math.max(...arr)) )\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 153, "deobfuscated": "function main(input) {\n  const lines = input.split(\"\\n\");\n  const NW = lines.shift().split(\" \").map(x => parseInt(x));\n  const N = NW[0];\n  const W = NW[1];\n  const items = lines.map(line => line.split(\" \").map(x => parseInt(x)));\n  dp = [];\n  for (var i = 0; i < W + 1; i++) {\n    dp.push(Array(N + 1).fill(0));\n  }\n  var result = 0;\n  for (var i = 0; i < N; i++) {\n    for (var w = 0; w <= W; w++) {\n      var weight = items[i][0];\n      var value = items[i][1];\n      if (weight <= w) {\n        dp[w][i + 1] = Math.max(dp[w][i], dp[w - weight][i] + value);\n      } else {\n        dp[w][i + 1] = dp[w][i];\n      }\n      if (dp[w][i + 1] > result) {\n        result = dp[w][i + 1];\n      }\n    }\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5793677256882384, "ngram_match_score": 0.15521521187182194, "weighted_ngram_match_score": 0.21720074582618615, "syntax_match_score": 1.0, "dataflow_match_score": 0.945054945054945}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03208_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){const inputs=arg['split']('\\x0a');const N=parseInt(inputs[0x0]['split']('\\x20')[0x0]);const K=parseInt(inputs[0x0]['split']('\\x20')[0x1]);const list=inputs['slice'](0x1,N+0x1)['map'](x=>parseInt(x))['sort']((a,b)=>{return a-b;});let i,sa=[];for(i=0x0;i<N-K+0x1;++i)sa['push'](list[i+K-0x1]-list[i]);console['log'](Math['min'](...sa));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n10\n15\n11\n14\n12", "2"], ["5 3\n5\n7\n5\n7\n7", "0"]], "original": "\"use strict\";\nfunction main(arg) {\n    const inputs = arg.split(\"\\n\")\n    const N = parseInt(inputs[0].split(\" \")[0])\n    const K = parseInt(inputs[0].split(\" \")[1])\n    const list = inputs.slice(1,N+1).map((x)=>parseInt(x)).sort((a,b)=>{return a-b})\n    let i, sa = []\n    for(i=0; i<N-K+1; ++i)\n        sa.push(list[i+K-1] - list[i])\n    console.log(Math.min(...sa))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 154, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  const inputs = arg.split(\"\\n\");\n  const N = parseInt(inputs[0].split(\" \")[0]);\n  const K = parseInt(inputs[0].split(\" \")[1]);\n  const list = inputs.slice(1, N + 1).map(x => parseInt(x)).sort((a, b) => {\n    return a - b;\n  });\n  let i;\n  let sa = [];\n  for (i = 0; i < N - K + 1; ++i) {\n    sa.push(list[i + K - 1] - list[i]);\n  }\n  console.log(Math.min(...sa));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5872295999896276, "ngram_match_score": 0.16752864626878405, "weighted_ngram_match_score": 0.3104220117542426, "syntax_match_score": 0.8709677419354839, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00033582905434781374, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.00917431192660545, "new_decrease_halstead_effort": -0.00917431192660545}}
{"filename": "p03211_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](main());function main(){var s=o['a'](0x1);var ans=0x3e7;for(var i=0x2;i<s['length'];i++){var t=s[i-0x2]+s[i-0x1]+s[i];t=Math['abs'](t-0x2f1);if(ans>t)ans=t;}return ans;}", "test_cases": [["1234567876", "34"], ["35753", "0"], ["1111111111", "642"]], "original": "var GET = (function(){\n  function f(s){return new g(s);}\n  function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}\n  g.prototype.a = function(f){\n    var s = this._s, y = this._y, r;\n    if(typeof s[y] === \"string\")s[y]=s[y].split(\" \").reverse();\n    r = s[y].pop();\n    if(!s[y].length)this._y++;\n    return f?r:+r;\n  }\n  g.prototype.l = function(f){\n    var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);\n  }\n  g.prototype.m = function(n,f){\n    var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));\n    return f?r:r.map(a=>a.map(a=>+a));\n  }\n  g.prototype.r = function(n,f){\n    var r = this._s.slice(this._y,this._y+=n);\n    return f?r:r.map(a=>+a);\n  }\n  return f;\n})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var s = o.a(1);\n  var ans = 999;\n  for(var i = 2; i < s.length; i++){\n    var t = s[i-2] + s[i-1] + s[i];\n    t = Math.abs(t - 753);\n    if(ans > t)ans = t;\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 155, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(main());\nfunction main() {\n  var s = o.a(1);\n  var ans = 999;\n  for (var i = 2; i < s.length; i++) {\n    var t = s[i - 2] + s[i - 1] + s[i];\n    t = Math.abs(t - 753);\n    if (ans > t) {\n      ans = t;\n    }\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5693085403755231, "ngram_match_score": 0.14759484356651015, "weighted_ngram_match_score": 0.3085384005043899, "syntax_match_score": 0.8211009174311926, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.3076923076923077, "length_score": -0.3076923076923077, "increase_maintainability": -0.04182883381210478, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03472222222222232, "new_decrease_halstead_effort": -0.05430820821767335}}
{"filename": "p03242_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{let n=input[0x0]['split']('');console['log'](n['map'](val=>val=='9'?0x1+'':0x9+'')['reduce']((acc,cur)=>acc+cur));};main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["119", "991"], ["999", "111"]], "original": "'use strict';\nconst main = input => {\n  let n = input[0].split('');\n  console.log(n.map(val => val=='9'?1+'':9+'').reduce((acc, cur) => acc+cur));\n  \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 156, "deobfuscated": "'use strict';\n\nconst main = input => {\n  let n = input[0].split(\"\");\n  console.log(n.map(val => val == \"9\" ? \"1\" : \"9\").reduce((acc, cur) => acc + cur));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.546226598396131, "ngram_match_score": 0.39462550070764785, "weighted_ngram_match_score": 0.5686142262102095, "syntax_match_score": 0.68, "dataflow_match_score": 0.5416666666666666}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03273_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split'](/\\s/);let h=parseInt(input[0x0]);let w=parseInt(input[0x1]);let mp=[];for(let i=0x2;i<0x2+h;i++)mp['push'](input[i]);function check(x,y){let res=0x0;for(let i=0x0;i<h;i++)if(mp[i][x]=='#'){res++;break;}for(let j=0x0;j<w;j++)if(mp[y][j]=='#'){res++;break;}return res==0x2;}for(let i=0x0;i<h;i++){ans='';for(let j=0x0;j<w;j++)if(check(j,i))ans=ans+mp[i][j];if(ans!='')console['log'](ans);}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 4\n##.#\n....\n##.#\n.#.#", "###\n###\n.##"], ["3 3\n#..\n.#.\n..#", "#..\n.#.\n..#"], ["4 5\n.....\n.....\n..#..\n.....", "#"], ["7 6\n......\n....#.\n.#....\n..#...\n..#...\n......\n.#..#.", "..#\n#..\n.#.\n.#.\n#.#"]], "original": "\nfunction main(input){\n    input = input.split(/\\s/);\n    let h = parseInt(input[0]);\n    let w = parseInt(input[1]);\n    let mp = [];\n    for(let i = 2; i < 2 + h; i++) mp.push(input[i]);\n\n    function check(x, y){\n\tlet res = 0;\n\tfor(let i = 0;i < h;i++)\n\t    if(mp[i][x] == '#') {\n\t\tres++;\n\t\tbreak;\n\t    }\n\n\tfor(let j = 0;j < w;j++)\n\t    if(mp[y][j] == '#') {\n\t\tres++;\n\t\tbreak;\n\t    }\n\treturn res == 2;\n    }\n\n    for(let i = 0; i < h;i++){\n\tans = ''\n\tfor(let j = 0; j < w;j++)\n\t    if( check(j, i) ) ans = ans + mp[i][j];\n\tif(ans != '') console.log(ans);\n    }\n    \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 158, "deobfuscated": "function main(input) {\n  input = input.split(/\\s/);\n  let h = parseInt(input[0]);\n  let w = parseInt(input[1]);\n  let mp = [];\n  for (let i = 2; i < 2 + h; i++) {\n    mp.push(input[i]);\n  }\n  function check(x, y) {\n    let res = 0;\n    for (let i = 0; i < h; i++) {\n      if (mp[i][x] == \"#\") {\n        res++;\n        break;\n      }\n    }\n    for (let j = 0; j < w; j++) {\n      if (mp[y][j] == \"#\") {\n        res++;\n        break;\n      }\n    }\n    return res == 2;\n  }\n  for (let i = 0; i < h; i++) {\n    ans = \"\";\n    for (let j = 0; j < w; j++) {\n      if (check(j, i)) {\n        ans = ans + mp[i][j];\n      }\n    }\n    if (ans != \"\") {\n      console.log(ans);\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.685938521520695, "ngram_match_score": 0.36993729718527285, "weighted_ngram_match_score": 0.483986280422931, "syntax_match_score": 0.8898305084745762, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03282_1", "type": "JavaScript", "obfuscated": "function main(input){const S=input['split']('\\x0a')[0x0]['split']('');const K=parseInt(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);for(var i=0x0;i<S['length'];i++){if(S[i]!='1'){console['log'](S[i]);return;}}console['log'](0x1);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1214\n4", "2"], ["3\n157", "3"], ["299792458\n9460730472580800", "2"]], "original": "function main(input){\n  const S = input.split('\\n')[0].split('');\n  const K = parseInt(input.split('\\n')[0].split(' ')[1]);\n\n  for(var i=0;i<S.length;i++){\n    if(S[i]!='1'){\n      console.log(S[i]);\n      return;\n    }\n  }\n  console.log(1);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 159, "deobfuscated": "function main(input) {\n  const S = input.split(\"\\n\")[0].split(\"\");\n  const K = parseInt(input.split(\"\\n\")[0].split(\" \")[1]);\n  for (var i = 0; i < S.length; i++) {\n    if (S[i] != \"1\") {\n      console.log(S[i]);\n      return;\n    }\n  }\n  console.log(1);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5879669652514672, "ngram_match_score": 0.20233074088759792, "weighted_ngram_match_score": 0.34953712011827043, "syntax_match_score": 1.0, "dataflow_match_score": 0.8}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03317_1", "type": "JavaScript", "obfuscated": "function Main(input){a=input['split']('\\x0a');b=a[0x0]['split']('\\x20')['map'](Number);c=a[0x1]['split']('\\x20')['map'](Number);N=b[0x0],K=b[0x1],r=0x0;while(c['length']>0x1){r++;d=[];for(i=0x0;i<K;i++){d['push'](c[i]);}for(i=0x0;i<K;i++){if(d['sort']()[0x0]!==c[i]){c[i]='';}}c=c['join']('')['split']('')['map'](Number);}console['log'](r);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3\n2 3 1 4", "2"], ["3 3\n1 2 3", "1"], ["8 3\n7 3 1 8 4 6 2 5", "4"]], "original": "function Main(input) {\n\ta=input.split('\\n');\n\tb=a[0].split(' ').map(Number);\n\tc=a[1].split(' ').map(Number);\n\n\tN=b[0], K=b[1], r=0;\n\n\twhile(c.length>1){\n\t\tr++;\n\t\td=[];\n\t\tfor(i=0;i<K;i++){\n\t\t\td.push(c[i]);\n\t\t}\n\n\t\tfor(i=0;i<K;i++){\n\t\t\tif(d.sort()[0]!==c[i]){\n\t\t\t\tc[i]='';\n\t\t\t}\n\t\t}\n\n\t\tc=c.join('').split('').map(Number);\n\t}\n\n\tconsole.log(r);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 160, "deobfuscated": "function Main(input) {\n  a = input.split(\"\\n\");\n  b = a[0].split(\" \").map(Number);\n  c = a[1].split(\" \").map(Number);\n  N = b[0];\n  K = b[1];\n  r = 0;\n  while (c.length > 1) {\n    r++;\n    d = [];\n    for (i = 0; i < K; i++) {\n      d.push(c[i]);\n    }\n    for (i = 0; i < K; i++) {\n      if (d.sort()[0] !== c[i]) {\n        c[i] = \"\";\n      }\n    }\n    c = c.join(\"\").split(\"\").map(Number);\n  }\n  console.log(r);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5603708526102454, "ngram_match_score": 0.07841481461129017, "weighted_ngram_match_score": 0.20979756779230854, "syntax_match_score": 0.9532710280373832, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.125, "length_score": -0.125, "increase_maintainability": -0.022388276080564373, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03469_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const date=input['split']('\\x0a')[0x0]['replace'](/^.{4}/,0x7e2);console['log'](date);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2017/01/07", "2018/01/07"], ["2017/01/31", "2018/01/31"]], "original": "// https://atcoder.jp/contests/abc085/tasks/abc085_a\n\"use strict\"\nfunction Main(input) {\n  const date = input.split(`\\n`)[0].replace(/^.{4}/, 2018 );\n  console.log(date);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 161, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const date = input.split(\"\\n\")[0].replace(/^.{4}/, 2018);\n  console.log(date);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5816827302053464, "ngram_match_score": 0.3249558457311956, "weighted_ngram_match_score": 0.3455250750901901, "syntax_match_score": 0.65625, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03502_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=parseInt(input[0x0],0xa);if(parseInt(N/0xa)===0x0){console['log']('Yes');return;}var Sum=0x0;var Mod=N;for(var i=0x5f5e100;i>=0xa;i=i/0xa){Sum+=parseInt(Mod/ i);Mod=Mod%i;}Sum+=Mod;if(N%Sum===0x0){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["12", "Yes"], ["57", "No"], ["148", "No"]], "original": "    // inputに入力データ全体が入る\n    function Main(input) {\n    \tinput = input.split(\"\\n\");\n\n      var N = parseInt(input[0], 10);\n      \n      if (parseInt(N / 10) === 0){ // 1桁の時\n        console.log('Yes');\n        return;  \n      }\n\n      var Sum = 0;\n      var Mod = N; // 余り\n      for (var i = 100000000; i >= 10; i = i / 10){\n        Sum += parseInt(Mod / i);\n        Mod = Mod % i;\n        // console.log('%d', i);\n        // console.log('%d', Sum);\n        // console.log('%d', Mod);\n        // console.log('--');        \n      }\n      Sum += Mod;\n      // console.log('%d', Sum);\n      // console.log('%d', Mod);\n      // console.log('--');   \n\n      if( N % Sum === 0){\n      \tconsole.log('Yes');\n      }else{\n        console.log('No');\n      }\n    \n    }\n\n    Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 162, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0], 10);\n  if (parseInt(N / 10) === 0) {\n    console.log(\"Yes\");\n    return;\n  }\n  var Sum = 0;\n  var Mod = N;\n  for (var i = 100000000; i >= 10; i = i / 10) {\n    Sum += parseInt(Mod / i);\n    Mod = Mod % i;\n  }\n  Sum += Mod;\n  if (N % Sum === 0) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7617282225914328, "ngram_match_score": 0.5090086239959596, "weighted_ngram_match_score": 0.5379042663697716, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03606_1", "type": "JavaScript", "obfuscated": "Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(args){input=args['split']('\\x0a');const N=parseInt(input[0x0]);var tmp;var result=0x0;for(var i=0x1;i<=N;i++){tmp=input[i]['split']('\\x20');result+=parseInt(tmp[0x1])-parseInt(tmp[0x0])+0x1;}console['log'](result);}", "test_cases": [["1\n24 30", "7"], ["2\n6 8\n3 3", "4"]], "original": "Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction Main(args){\n    input = args.split(\"\\n\");\n    const N = parseInt(input[0]);\n    var tmp;\n    var result = 0;\n    \n    for(var i=1; i<=N; i++){\n        tmp = input[i].split(\" \");\n        result += (parseInt(tmp[1]) - parseInt(tmp[0]) + 1);\n    }\n\n    console.log(result);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 163, "deobfuscated": "Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(args) {\n  input = args.split(\"\\n\");\n  const N = parseInt(input[0]);\n  var tmp;\n  var result = 0;\n  for (var i = 1; i <= N; i++) {\n    tmp = input[i].split(\" \");\n    result += parseInt(tmp[1]) - parseInt(tmp[0]) + 1;\n  }\n  console.log(result);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.737690032547076, "ngram_match_score": 0.48667159030094714, "weighted_ngram_match_score": 0.5996817602263399, "syntax_match_score": 0.864406779661017, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03835_1", "type": "JavaScript", "obfuscated": "function Main(input){let inputs=input['split']('\\x20');let K=Number(inputs[0x0]);let S=Number(inputs[0x1]);let count=0x0;for(let X=0x0;X<=K;X++){for(let Y=0x0;Y<=K;Y++){for(let Z=0x0;Z<=K;Z++){if(X+Y+Z===S){count++;}}}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2", "6"], ["5 15", "1"]], "original": "function Main(input) {\n  let inputs = input.split(' ');\n  let K = Number(inputs[0]);\n  let S = Number(inputs[1]);\n  let count = 0;\n  for(let X = 0; X <= K; X++) {\n    for(let Y = 0; Y <= K; Y++) {\n      for(let Z = 0; Z <= K; Z++) {\n        if (X + Y + Z === S) {\n          count++;\n        }\n      }\n    }\n  }\n  console.log(count);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 164, "deobfuscated": "function Main(input) {\n  let inputs = input.split(\" \");\n  let K = Number(inputs[0]);\n  let S = Number(inputs[1]);\n  let count = 0;\n  for (let X = 0; X <= K; X++) {\n    for (let Y = 0; Y <= K; Y++) {\n      for (let Z = 0; Z <= K; Z++) {\n        if (X + Y + Z === S) {\n          count++;\n        }\n      }\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9029605060550382, "ngram_match_score": 0.7850799074431828, "weighted_ngram_match_score": 0.8267621167769701, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04030_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const tape=input['split']('\\x0a')[0x0]['split']('');const result=[];for(const v of tape){if(v==='B'){result['pop']();}else{result['push'](v);}}console['log'](result['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["01B0", "00"], ["0BB1", "1"]], "original": "'use strict'\n\nfunction Main(input) {\n    const tape = input.split('\\n')[0].split('');\n    const result = []\n\n    for (const v of tape) {\n        if (v === 'B') {\n            result.pop();\n        } else {\n            result.push(v);\n        }\n    }\n\n    console.log(result.join(''));\n}\n\n// input\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 165, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const tape = input.split(\"\\n\")[0].split(\"\");\n  const result = [];\n  for (const v of tape) {\n    if (v === \"B\") {\n      result.pop();\n    } else {\n      result.push(v);\n    }\n  }\n  console.log(result.join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7546475443408144, "ngram_match_score": 0.5599197231903384, "weighted_ngram_match_score": 0.5763175129964486, "syntax_match_score": 1.0, "dataflow_match_score": 0.8823529411764706}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02398_1", "type": "JavaScript", "obfuscated": "var abc=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x20')['map'](Number);var a=abc[0x0];var b=abc[0x1];var c=abc[0x2];var i;var result=0x0;for(i=a;i<=b;i++){if(c%i===0x0){result++;}}console['log'](result);", "test_cases": [["5 14 80", "3"]], "original": "var abc = require('fs').readFileSync('/dev/stdin', 'utf8').split(' ').map(Number);\nvar a = abc[0];\nvar b = abc[1];\nvar c = abc[2];\n\nvar i;\nvar result = 0;\nfor (i = a; i <= b; i++) {\n  if (c % i === 0) {\n    result++;\n  }\n}\nconsole.log(result);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 166, "deobfuscated": "var abc = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nvar a = abc[0];\nvar b = abc[1];\nvar c = abc[2];\nvar i;\nvar result = 0;\nfor (i = a; i <= b; i++) {\n  if (c % i === 0) {\n    result++;\n  }\n}\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9481375933497185, "ngram_match_score": 0.8928756684056034, "weighted_ngram_match_score": 0.8996747049932707, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02419_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){var lines=stdin['toString']()['split']('\\x0a');var result=function(word,data){return data['filter'](function(v){return v===word;})['length'];}(lines['shift']()['toLowerCase'](),lines['join']('')['split']('END_OF_TEXT')[0x0]['toLowerCase']()['trim']()['split']('\\x20'));console['log'](result);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["computer\nNurtures computer scientists and highly-skilled computer engineers\nwho will create and exploit \"knowledge\" for the new era.\nProvides an outstanding computer environment.\nEND_OF_TEXT", "3"]], "original": "'use strict';\n(function(stdin) {\n  var lines = stdin.toString().split('\\n');\n\n  var result = (function(word,data) {\n    return data.filter(function(v) {\n      return v === word;\n    }).length;\n  }(\n    lines.shift().toLowerCase()\n    ,lines.join('').split('END_OF_TEXT')[0].toLowerCase().trim().split(' ')\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 167, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  var lines = stdin.toString().split(\"\\n\");\n  var result = function (word, data) {\n    return data.filter(function (v) {\n      return v === word;\n    }).length;\n  }(lines.shift().toLowerCase(), lines.join(\"\").split(\"END_OF_TEXT\")[0].toLowerCase().trim().split(\" \"));\n  console.log(result);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5941787222977035, "ngram_match_score": 0.2991528889155786, "weighted_ngram_match_score": 0.3371146563796158, "syntax_match_score": 0.8783783783783784, "dataflow_match_score": 0.8620689655172413}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02572_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x0a');const N=Number(input[0x0]);const line2_arr=input[0x1]['split']('\\x20');let ans=0x0;for(let i=0x0;i<N;i++){if(Number(line2_arr[i])==0x0)continue;for(let j=i+0x1;j<N;j++){ans=ans+Number(line2_arr[i])*Number(line2_arr[j]);}}console['log'](ans%0x3b9aca07);}function numberSort(array){array['sort'](f);return array;}var f=function(a,b){return a-b;};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["3\n1 2 3", "11"], ["4\n141421356 17320508 22360679 244949", "437235829"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = Number(input[0]);\n  const line2_arr = input[1].split(\" \");\n  let ans = 0;\n  for (let i = 0; i < N; i++) {\n    if (Number(line2_arr[i]) == 0) continue;\n    for (let j = i + 1; j < N; j++) {\n      ans = ans + Number(line2_arr[i]) * Number(line2_arr[j]);\n      // console.log(ans);\n    }\n  }\n  console.log(ans % 1000000007);\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 168, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = Number(input[0]);\n  const line2_arr = input[1].split(\" \");\n  let ans = 0;\n  for (let i = 0; i < N; i++) {\n    if (Number(line2_arr[i]) == 0) {\n      continue;\n    }\n    for (let j = i + 1; j < N; j++) {\n      ans = ans + Number(line2_arr[i]) * Number(line2_arr[j]);\n    }\n  }\n  console.log(ans % 1000000007);\n}\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\nfunction f(a, b) {\n  return a - b;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8706512562566918, "ngram_match_score": 0.7998923227702268, "weighted_ngram_match_score": 0.8018153849577435, "syntax_match_score": 0.9021739130434783, "dataflow_match_score": 0.9787234042553191}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025000000000000022, "new_decrease_halstead_effort": 0.0726069593944807}}
{"filename": "p02621_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');(input=>{const a=input-0x0;console['log'](a+a*a+a*a*a);})(input);", "test_cases": [["2", "14"], ["10", "1110"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n\n    const a = input - 0\n\n    console.log(a + a * a + a * a * a)\n\n})(input)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 169, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n(input => {\n  const a = input - 0;\n  console.log(a + a * a + a * a * a);\n})(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8322134374946825, "ngram_match_score": 0.6598997557898729, "weighted_ngram_match_score": 0.668953994188857, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02640_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf-8')['split']('\\x0a');const [X,Y]=input[0x0]['split']('\\x20')['map'](Number);let ans='No';if(X<Y){const r=Y-X*0x2;if(r%0x2===0x0&&r/0x2<=X)ans='Yes';}console['log'](ans);", "test_cases": [["3 8", "Yes"], ["2 100", "No"], ["1 2", "Yes"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf-8').split('\\n')\nconst [X, Y] = input[0].split(' ').map(Number)\nlet ans = 'No'\nif (X < Y) {\n  const r = Y - X * 2\n  if (r % 2 === 0 && r / 2 <= X) ans = 'Yes'\n}\nconsole.log(ans)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 170, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\").split(\"\\n\");\nconst [X, Y] = input[0].split(\" \").map(Number);\nlet ans = \"No\";\nif (X < Y) {\n  const r = Y - X * 2;\n  if (r % 2 === 0 && r / 2 <= X) {\n    ans = \"Yes\";\n  }\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7572783026784712, "ngram_match_score": 0.5863969940585321, "weighted_ngram_match_score": 0.6245958650664412, "syntax_match_score": 0.9215686274509803, "dataflow_match_score": 0.896551724137931}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02641_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');let target=parseInt(input[0x0]['split']('\\x20')[0x0]);let zerocheck=parseInt(input[0x0]['split']('\\x20')[0x1]);if(zerocheck==0x0){console['log'](target);}else{let str=input[0x1]['split']('\\x20');for(let i=0x0;i<str['length'];i++){let num=parseInt(str[i]);str[i]=target-num;}for(let ite=0x1;ite<=0x64;ite++){const isp=str['indexOf'](ite);const isn=str['indexOf'](-ite);if(isp==-0x1){console['log'](target-ite);break;}if(isn==-0x1){console['log'](target+ite);break;}}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 5\n4 7 10 6 5", "8"], ["10 5\n4 7 10 6 5", "9"], ["100 0", "100"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  let target = parseInt(input[0].split(\" \")[0]);\n  let zerocheck = parseInt(input[0].split(\" \")[1]);\n  if (zerocheck == 0) {\n    console.log(target);\n  } else {\n    let str = input[1].split(\" \");\n    for (let i = 0; i < str.length; i++) {\n      let num = parseInt(str[i]);\n      str[i] = target - num;\n    }\n    for (let ite = 1; ite <= 100; ite++) {\n      const isp = str.indexOf(ite);//小さい方\n      const isn = str.indexOf(-ite);//大きい方\n      if (isp == -1) {\n        console.log(target - ite);\n        break;\n      }\n      if (isn == -1) {\n        console.log(target + ite);\n        break;\n      }\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 171, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  let target = parseInt(input[0].split(\" \")[0]);\n  let zerocheck = parseInt(input[0].split(\" \")[1]);\n  if (zerocheck == 0) {\n    console.log(target);\n  } else {\n    let str = input[1].split(\" \");\n    for (let i = 0; i < str.length; i++) {\n      let num = parseInt(str[i]);\n      str[i] = target - num;\n    }\n    for (let ite = 1; ite <= 100; ite++) {\n      const isp = str.indexOf(ite);\n      const isn = str.indexOf(-ite);\n      if (isp == -1) {\n        console.log(target - ite);\n        break;\n      }\n      if (isn == -1) {\n        console.log(target + ite);\n        break;\n      }\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9728212138761414, "ngram_match_score": 0.9447144130502939, "weighted_ngram_match_score": 0.9465704424542716, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02682_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){let getInt=arg['trim']()['split']('\\x20')[0x3];let oneCount=arg['trim']()['split']('\\x20')[0x0];let zeroCnt=arg['trim']()['split']('\\x20')[0x1];let minusCnt=arg['trim']()['split']('\\x20')[0x2];let result=0x0;if(oneCount==0x0&&zeroCnt==0x0&&minusCnt==0x0){console['log'](0x0);return;}if(getInt>0x0){if(getInt>oneCount){result=oneCount*0x1;}else{result=getInt*0x1;}getInt=getInt-oneCount;}if(getInt>0x0){getInt=getInt-zeroCnt;}if(getInt>0x0){result=result+getInt*-0x1;}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 1 1 3", "2"], ["1 2 3 4", "0"], ["2000000000 0 0 2000000000", "2000000000"]], "original": "\"use strict\"\nfunction main(arg) {\n    let getInt = arg.trim().split(\" \")[3];\n    let oneCount = arg.trim().split(\" \")[0];\n    let zeroCnt = arg.trim().split(\" \")[1];\n    let minusCnt = arg.trim().split(\" \")[2];\n\n    let result = 0;\n\n    if(oneCount == 0 && zeroCnt == 0 && minusCnt == 0){\n        console.log(0);\n        return;\n    }\n\n    if(getInt > 0){\n        \n        if(getInt > oneCount){\n            result = oneCount * 1;   \n        }else{\n            result = getInt * 1;\n        }\n        getInt = getInt - oneCount;\n    }\n\n    if(getInt > 0){\n        getInt = getInt - zeroCnt;\n    }\n\n    if(getInt > 0){\n        result = result + (getInt * - 1);\n    }\n\n    console.log(result);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 172, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  let getInt = arg.trim().split(\" \")[3];\n  let oneCount = arg.trim().split(\" \")[0];\n  let zeroCnt = arg.trim().split(\" \")[1];\n  let minusCnt = arg.trim().split(\" \")[2];\n  let result = 0;\n  if (oneCount == 0 && zeroCnt == 0 && minusCnt == 0) {\n    console.log(0);\n    return;\n  }\n  if (getInt > 0) {\n    if (getInt > oneCount) {\n      result = oneCount * 1;\n    } else {\n      result = getInt * 1;\n    }\n    getInt = getInt - oneCount;\n  }\n  if (getInt > 0) {\n    getInt = getInt - zeroCnt;\n  }\n  if (getInt > 0) {\n    result = result + getInt * -1;\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7820895618778383, "ngram_match_score": 0.5662786367550485, "weighted_ngram_match_score": 0.6424367536134477, "syntax_match_score": 0.9196428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02753_1", "type": "JavaScript", "obfuscated": "'use strict;';main(require('fs')['readFileSync']('/dev/stdin','UTF-8')['trim']()['split']('\\x0a'));function main(input){input=input[0x0]['split']('');let num=0x2;let isSame=!![];while(num>0x0){if(input[num]!==input[0x0]){isSame=![];break;}num--;}console['log'](isSame?'No':'Yes');}", "test_cases": [["ABA", "Yes"], ["BBA", "Yes"], ["BBB", "No"]], "original": "\"use strict;\";\nmain(\n  require(\"fs\")\n    .readFileSync(\"/dev/stdin\", \"UTF-8\")\n    .trim()\n    .split(\"\\n\")\n);\nfunction main(input) {\n  input = input[0].split(\"\");\n  let num = 2;\n  let isSame = true;\n  while (num > 0) {\n    if (input[num] !== input[0]) {\n      isSame = false;\n      break;\n    }\n    num--;\n  }\n  console.log(isSame ? \"No\" : \"Yes\");\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 173, "deobfuscated": "'use strict;';\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\").trim().split(\"\\n\"));\nfunction main(input) {\n  input = input[0].split(\"\");\n  let num = 2;\n  let isSame = true;\n  while (num > 0) {\n    if (input[num] !== input[0]) {\n      isSame = false;\n      break;\n    }\n    num--;\n  }\n  console.log(isSame ? \"No\" : \"Yes\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9018482550457095, "ngram_match_score": 0.7954759279972636, "weighted_ngram_match_score": 0.8119170921855746, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011663944078013744, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07246376811594202, "new_decrease_halstead_effort": 0.24729414365762592}}
{"filename": "p02765_1", "type": "JavaScript", "obfuscated": "function main(input){var marginDelete=input['trim']();var args=marginDelete['split']('\\x20');var n=parseInt(args[0x0],0xa);var r=parseInt(args[0x1],0xa);var hiddenRating;if(n>=0xa){hiddenRating=r;}else{var argument=0x64*(0xa-n);hiddenRating=r+argument;}return hiddenRating;}console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 2919", "3719"], ["22 3051", "3051"]], "original": "function main(input) {\n  var marginDelete = input.trim();\n  var args = marginDelete.split(' ');\n  var n = parseInt(args[0], 10);\n  var r = parseInt(args[1], 10);\n  var hiddenRating;\n  if ( n >= 10) {\n    hiddenRating = r;\n  } else {\n    var argument = 100*(10 - n);\n    hiddenRating = r + argument;\n  }\n  return hiddenRating;\n}\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 174, "deobfuscated": "function main(input) {\n  var marginDelete = input.trim();\n  var args = marginDelete.split(\" \");\n  var n = parseInt(args[0], 10);\n  var r = parseInt(args[1], 10);\n  var hiddenRating;\n  if (n >= 10) {\n    hiddenRating = r;\n  } else {\n    var argument = (10 - n) * 100;\n    hiddenRating = r + argument;\n  }\n  return hiddenRating;\n}\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8296287139271388, "ngram_match_score": 0.7229703035677073, "weighted_ngram_match_score": 0.7507169659339514, "syntax_match_score": 0.8448275862068966, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02785_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const args=input['split']('\\x0a'),K=parseInt(args[0x0]['split']('\\x20')[0x1]),H=args[0x1]['split']('\\x20');var ans=H['sort']()['splice'](0x0,H['length']-K)['reduce']((a,x)=>a+parseInt(x),0x0);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 1\n4 1 5", "5"], ["8 9\n7 9 3 2 3 8 4 6", "0"], ["3 0\n1000000000 1000000000 1000000000", "3000000000"]], "original": "'use strict';\n\nfunction main(input) {\n  const args = input.split('\\n'),\n        K = parseInt(args[0].split(' ')[1]),\n        H = args[1].split(' ');\n  var ans = H.sort().splice(0, H.length-K).reduce((a, x) => a + parseInt(x), 0);\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 175, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const args = input.split(\"\\n\");\n  const K = parseInt(args[0].split(\" \")[1]);\n  const H = args[1].split(\" \");\n  var ans = H.sort().splice(0, H.length - K).reduce((a, x) => a + parseInt(x), 0);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6949588178829321, "ngram_match_score": 0.47209623874936685, "weighted_ngram_match_score": 0.5458342708775997, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 0.8285714285714286}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009976182248853105, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02898550724637672, "new_decrease_halstead_effort": -0.02898550724637694}}
{"filename": "p02831_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('\\x20')['map'](v=>parseInt(v,0xa));let m=xs[0x0];let n=xs[0x1];let r=0x0;let d=0x0;let x=m;let y=n;if(m>=n){while(n>0x0){let r=m%n;m=n;n=r;}d=m;}else{while(m>0x0){r=n%m;n=m;m=r;}d=n;}let ans=x*y/d;console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3", "6"], ["123 456", "18696"], ["100000 99999", "9999900000"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split(' ').map(v=>parseInt(v,10));\n   let m = xs[0];\n   let n = xs[1];\n   let r = 0;\n   let d = 0;\n   let x = m;\n   let y = n;\n   if(m >= n) {\n        \twhile (n > 0) {\n        \t\tlet r = m % n; \n        \t\tm = n;     \n        \t\tn = r;     \n        \t}\n        \td = m;\n        }else{ \n        \twhile (m > 0) {\n        \t\tr = n % m; \n        \t\tn = m;     \n        \t\tm = r;     \n        \t}\n        \td = n;\n        }\n        let ans = x*y/d;\n        console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 176, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\" \").map(v => parseInt(v, 10));\n  let m = xs[0];\n  let n = xs[1];\n  let r = 0;\n  let d = 0;\n  let x = m;\n  let y = n;\n  if (m >= n) {\n    while (n > 0) {\n      let r = m % n;\n      m = n;\n      n = r;\n    }\n    d = m;\n  } else {\n    while (m > 0) {\n      r = n % m;\n      n = m;\n      m = r;\n    }\n    d = n;\n  }\n  let ans = x * y / d;\n  console.log(ans);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7472947748953567, "ngram_match_score": 0.7037629384315496, "weighted_ngram_match_score": 0.8077515843473695, "syntax_match_score": 0.9431818181818182, "dataflow_match_score": 0.5344827586206896}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02836_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');T=input[0x0];var len=T['length'];var p=len%0x2;q=Math['floor'](len/0x2);cnt=0x0;i=0x0;for(i=0x0;i<q;i++){if(T['substr'](i,0x1)==T['substr'](len-0x1-i,0x1)){cnt=cnt+0x0;}else{cnt++;}}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["redcoder", "1"], ["vvvvvv", "0"], ["abcdabc", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n    input = input.split(\"\\n\");\n    T = input[0];\n  // console.log(T);\n   \n    var len = T.length;\n  //console.log(len);\n var p = len%2;q = Math.floor(len/2);cnt=0;i=0;\n// console.log (p,q);\n //console.log(T.substr(i,1));\n// console.log(T.substr(len-1,1));\n  \n\t  for(i = 0;i<q;i++)\n\t  {if (T.substr(i,1)==T.substr(len-1-i,1)){cnt=cnt+0;}\n\t  else{cnt++;}\n\t\t  \n\t  }\n\t  console.log(cnt);\n\t\n\n\t\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 177, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  T = input[0];\n  var len = T.length;\n  var p = len % 2;\n  q = Math.floor(len / 2);\n  cnt = 0;\n  i = 0;\n  for (i = 0; i < q; i++) {\n    if (T.substr(i, 1) == T.substr(len - 1 - i, 1)) {\n      cnt = cnt + 0;\n    } else {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6037505196824129, "ngram_match_score": 0.16627387058265022, "weighted_ngram_match_score": 0.24872820814700114, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02881_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const N=parseInt(input);let distance=N-0x1;for(let a=0x2;a<=Math['sqrt'](N);++a){let b=N/a;if(Number['isInteger'](b)&&a+b-0x2<distance){distance=a+b-0x2;}}console['log'](distance);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "5"], ["50", "13"], ["10000000019", "10000000018"]], "original": "'use strict';\nfunction main(input) {\n  const N = parseInt(input);\n  let distance = N - 1;\n  for (let a = 2; a <= Math.sqrt(N); ++a) {\n    let b = N / a;\n    if (Number.isInteger(b) && a+b-2 < distance) {\n      distance = a+b-2;\n    }\n  }\n  console.log(distance);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 178, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const N = parseInt(input);\n  let distance = N - 1;\n  for (let a = 2; a <= Math.sqrt(N); ++a) {\n    let b = N / a;\n    if (Number.isInteger(b) && a + b - 2 < distance) {\n      distance = a + b - 2;\n    }\n  }\n  console.log(distance);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8916937433385992, "ngram_match_score": 0.7170399553409061, "weighted_ngram_match_score": 0.8497350180134905, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03013_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const M=parseInt(arg[0x0]['split']('\\x20')[0x1]);const dangers=arg['slice'](0x1,M+0x1);let answer=[...Array(N+0x1)]['fill'](0x1);let broken=-0x1;let NG=![];for(let i in dangers){if(broken+0x1===dangers[i]){NG=!![];}answer[dangers[i]]=0x0;broken=dangers[i];}for(let i=0x2;i<=N;i++){answer[i]=answer[i]*(answer[i-0x2]+answer[i-0x1])%0x3b9aca07;}console['log'](answer[N]);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 1\n3", "4"], ["10 2\n4\n5", "0"], ["100 5\n1\n23\n45\n67\n89", "608200469"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const M = parseInt(arg[0].split(\" \")[1]);\n    \n    const dangers = arg.slice(1, M + 1);\n    \n    let answer = [...Array(N + 1)].fill(1);\n    let broken = -1;\n    let NG     = false;\n    \n    for(let i in dangers) {\n        if(broken + 1 === dangers[i]) {\n            NG = true;\n        }\n        \n        answer[dangers[i]] = 0;\n        broken = dangers[i];\n    }\n    \n    for(let i=2; i<=N; i++) {\n        answer[i] = answer[i] * (answer[i - 2] + answer[i - 1]) % 1000000007;\n    }\n    \n    console.log(answer[N]);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 179, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const M = parseInt(arg[0].split(\" \")[1]);\n  const dangers = arg.slice(1, M + 1);\n  let answer = [...Array(N + 1)].fill(1);\n  let broken = -1;\n  let NG = false;\n  for (let i in dangers) {\n    if (broken + 1 === dangers[i]) {\n      NG = true;\n    }\n    answer[dangers[i]] = 0;\n    broken = dangers[i];\n  }\n  for (let i = 2; i <= N; i++) {\n    answer[i] = answer[i] * (answer[i - 2] + answer[i - 1]) % 1000000007;\n  }\n  console.log(answer[N]);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9005175073150056, "ngram_match_score": 0.7660974252079713, "weighted_ngram_match_score": 0.8359726040520509, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03078_1", "type": "JavaScript", "obfuscated": "const main=input=>{var K=input['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x3];var x=input['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x0];var y=input['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x1];var z=input['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x2];var a=input['trim']()['split']('\\x0a')[0x1]['split']('\\x20')['sort']((a,b)=>b-a)['map'](v=>v-0x0);var b=input['trim']()['split']('\\x0a')[0x2]['split']('\\x20')['sort']((a,b)=>b-a)['map'](v=>v-0x0);var c=input['trim']()['split']('\\x0a')[0x3]['split']('\\x20')['sort']((a,b)=>b-a)['map'](v=>v-0x0);var anss=[];var idxa=0x0,idxb=0x0,idxc=0x0;var min=0x0;for(var i=0x0;i<x;i++){for(var j=0x0;j<y;j++){for(var k=0x0;k<z;k++){if(i*j*k>K)break;var sum=a[i]+b[j]+c[k];anss['push'](sum);}}}console['log'](anss['sort']((a,b)=>b-a)['filter']((v,i)=>i<K)['join']('\\x0a'));};main(require('fs')['readFileSync']('/dev/stdin','UTF-8'));", "test_cases": [["2 2 2 8\n4 6\n1 5\n3 8", "19\n17\n15\n14\n13\n12\n10\n8"], ["3 3 3 5\n1 10 100\n2 20 200\n1 10 100", "400\n310\n310\n301\n301"], ["10 10 10 20\n7467038376 5724769290 292794712 2843504496 3381970101 8402252870 249131806 6310293640 6690322794 6082257488\n1873977926 2576529623 1144842195 1379118507 6003234687 4925540914 3902539811 3326692703 484657758 2877436338\n4975681328 8974383988 2882263257 7690203955 514305523 6679823484 4263279310 585966808 3752282379 620585736", "23379871545\n22444657051\n22302177772\n22095691512\n21667941469\n21366963278\n21287912315\n21279176669\n21160477018\n21085311041\n21059876163\n21017997739\n20703329561\n20702387965\n20590247696\n20383761436\n20343962175\n20254073196\n20210218542\n20150096547"]], "original": "const main = (input) => {\n  var K = input.trim().split(\"\\n\")[0].split(\" \")[3];\n  var x = input.trim().split(\"\\n\")[0].split(\" \")[0];\n  var y = input.trim().split(\"\\n\")[0].split(\" \")[1];\n  var z = input.trim().split(\"\\n\")[0].split(\" \")[2];\n\n  var a = input.trim().split(\"\\n\")[1].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var b = input.trim().split(\"\\n\")[2].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var c = input.trim().split(\"\\n\")[3].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var anss = [];\n  var idxa=0,idxb=0,idxc=0;\n  var min = 0;\n  for(var i=0;i<x;i++){\n    for(var j=0;j<y;j++){\n      for(var k=0;k<z;k++){\n        if(i*j*k > K) break;\n        var sum = a[i]+b[j]+c[k];\n        anss.push(sum);\n      }\n    }\n  }\n  console.log(anss.sort((a,b)=>b-a).filter((v,i)=>i<K).join(\"\\n\"));\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 180, "deobfuscated": "const main = input => {\n  var K = input.trim().split(\"\\n\")[0].split(\" \")[3];\n  var x = input.trim().split(\"\\n\")[0].split(\" \")[0];\n  var y = input.trim().split(\"\\n\")[0].split(\" \")[1];\n  var z = input.trim().split(\"\\n\")[0].split(\" \")[2];\n  var a = input.trim().split(\"\\n\")[1].split(\" \").sort((a, b) => b - a).map(v => v - 0);\n  var b = input.trim().split(\"\\n\")[2].split(\" \").sort((a, b) => b - a).map(v => v - 0);\n  var c = input.trim().split(\"\\n\")[3].split(\" \").sort((a, b) => b - a).map(v => v - 0);\n  var anss = [];\n  var idxa = 0;\n  var idxb = 0;\n  var idxc = 0;\n  var min = 0;\n  for (var i = 0; i < x; i++) {\n    for (var j = 0; j < y; j++) {\n      for (var k = 0; k < z; k++) {\n        if (i * j * k > K) {\n          break;\n        }\n        var sum = a[i] + b[j] + c[k];\n        anss.push(sum);\n      }\n    }\n  }\n  console.log(anss.sort((a, b) => b - a).filter((v, i) => i < K).join(\"\\n\"));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6977698422356737, "ngram_match_score": 0.2668156152701476, "weighted_ngram_match_score": 0.5881906943118167, "syntax_match_score": 0.9360730593607306, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03095_1", "type": "JavaScript", "obfuscated": "function roop(depth,A,end){var ans=0x0,i=0x0;if(depth<end){for(i=depth;i<end;i++){ans+=roop(i+0x1,A,end);}return A[depth]+A[depth]*ans;}else{return A[depth];}}function main(input){var i,j,A,B,ans=0x0,count=0x0;var inputs=input['split']('\\x0a');var arg=Number(inputs[0x0]);var str=inputs[0x1]['split']('');A={};for(i=0x0;i<arg;++i){if(A[str[i]]){A[str[i]]++;}else{A[str[i]]=0x1;count++;}}B=[];for(key in A){B['push'](A[key]);}for(i=0x0;i<count;++i){ans+=roop(i,B,count-0x1);}ans=Math['round'](ans);console['log'](ans%0x3b9aca07);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\nabcd", "15"], ["3\nbaa", "5"], ["5\nabcab", "17"]], "original": "function roop(depth, A, end){\n    var ans=0, i=0\n    if (depth < end){\n        for (i=depth;i<end;i++){\n            ans+=roop(i+1, A, end)\n        }\n        return A[depth] + A[depth] * ans\n    }else{\n        return A[depth]\n    }\n}\n\nfunction main(input) {\n    var i, j, A, B, ans=0, count=0\n    var inputs = input.split(\"\\n\")\n    var arg = Number(inputs[0])\n    var str = inputs[1].split(\"\")\n    //A=new Array(arg[0])\n    A={}\n    for (i=0;i<arg;++i){\n        if (A[str[i]]){\n            A[str[i]]++\n        }else{\n            A[str[i]]=1\n            count++\n        }\n    }\n    B=[]\n    for(key in A){\n        B.push(A[key])\n    }\n    for(i=0;i<count;++i){\n        ans+=roop(i, B, count-1)\n    }\n    ans=Math.round(ans)\n    console.log(ans%(1000000007))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 181, "deobfuscated": "function roop(depth, A, end) {\n  var ans = 0;\n  var i = 0;\n  if (depth < end) {\n    for (i = depth; i < end; i++) {\n      ans += roop(i + 1, A, end);\n    }\n    return A[depth] + A[depth] * ans;\n  } else {\n    return A[depth];\n  }\n}\nfunction main(input) {\n  var i;\n  var j;\n  var A;\n  var B;\n  var ans = 0;\n  var count = 0;\n  var inputs = input.split(\"\\n\");\n  var arg = Number(inputs[0]);\n  var str = inputs[1].split(\"\");\n  A = {};\n  for (i = 0; i < arg; ++i) {\n    if (A[str[i]]) {\n      A[str[i]]++;\n    } else {\n      A[str[i]] = 1;\n      count++;\n    }\n  }\n  B = [];\n  for (key in A) {\n    B.push(A[key]);\n  }\n  for (i = 0; i < count; ++i) {\n    ans += roop(i, B, count - 1);\n  }\n  ans = Math.round(ans);\n  console.log(ans % 1000000007);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5638160066486781, "ngram_match_score": 0.11830579576535394, "weighted_ngram_match_score": 0.22856128426447306, "syntax_match_score": 0.9083969465648855, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0013010940374921232, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03333333333333344, "new_decrease_halstead_effort": -0.03333333333333344}}
{"filename": "p03102_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp0=input[0x0]['split']('\\x20');N=Number(tmp0[0x0]);M=Number(tmp0[0x1]);C=Number(tmp0[0x2]);B=input[0x1]['split']('\\x20');var ans=0x0;for(var i=0x0;i<N;i++){A=input[0x2+i]['split']('\\x20');var tmpSum=0x0;for(var j=0x0;j<M;j++){tmpSum+=Number(A[j])*Number(B[j]);}if(tmpSum+C>0x0){ans++;}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 -10\n1 2 3\n3 2 1\n1 2 2", "1"], ["5 2 -4\n-2 5\n100 41\n100 40\n-3 0\n-6 -2\n18 -13", "2"], ["3 3 0\n100 -100 0\n0 100 100\n100 100 100\n-100 100 100", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\")\n  tmp0 = input[0].split(\" \")\n  N = Number(tmp0[0])\n  M = Number(tmp0[1])\n  C = Number(tmp0[2])\n  B = input[1].split(\" \")\n\n  var ans = 0;\n  for(var i = 0; i < N; i++)\n  {\n    A = input[2 + i].split(\" \")\n    var tmpSum = 0\n    for(var j = 0; j < M; j++)\n    {\n      tmpSum += Number(A[j]) * Number(B[j])\n    }\n    if( (tmpSum+ C) > 0){\n      ans++;\n    }\n\n  }\n  console.log(ans)\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main(\"3 2\\n2 1\\n\")", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 182, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp0 = input[0].split(\" \");\n  N = Number(tmp0[0]);\n  M = Number(tmp0[1]);\n  C = Number(tmp0[2]);\n  B = input[1].split(\" \");\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    A = input[2 + i].split(\" \");\n    var tmpSum = 0;\n    for (var j = 0; j < M; j++) {\n      tmpSum += Number(A[j]) * Number(B[j]);\n    }\n    if (tmpSum + C > 0) {\n      ans++;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.683067486591085, "ngram_match_score": 0.4091014729608945, "weighted_ngram_match_score": 0.41595197855808436, "syntax_match_score": 0.9072164948453608, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03146_1", "type": "JavaScript", "obfuscated": "const collatz=n=>{if(n%0x2===0x0){n/=0x2;}else{n=0x3*n+0x1;}return n;};const main=stdin=>{const input=stdin['trim']()['split']('\\x0a');const s=parseInt(input[0x0]);if(s===0x1||s===0x2||s===0x4){console['log'](0x4);return;}let tmp=s;let first=0x0;let second=0x0;for(let i=0x1;;i++){if(tmp===0x4&&first===0x0){first=i;}else if(tmp===0x4&&first!==0x0){second=i;break;}tmp=collatz(tmp);}console['log'](second);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8", "5"], ["7", "18"], ["54", "114"]], "original": "const collatz = (n) => {\n  if (n % 2 === 0) {\n    n /= 2\n  } else {\n    n = 3 * n + 1\n  }\n\n  return n\n}\n\nconst main = stdin => {\n  const input = stdin.trim().split('\\n')\n  const s = parseInt(input[0])\n\n  if (s === 1 || s === 2 || s === 4) {\n    console.log(4)\n    return\n  }\n\n  let tmp = s\n  let first = 0\n  let second = 0\n  for (let i = 1; ; i++) {\n    if (tmp === 4 && first === 0) {\n      first = i\n    } else if (tmp === 4 && first !== 0) {\n      second = i\n      break\n    }\n    tmp = collatz(tmp)\n  }\n\n  console.log(second)\n}\n// 標準入力\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 183, "deobfuscated": "const collatz = n => {\n  if (n % 2 === 0) {\n    n /= 2;\n  } else {\n    n = n * 3 + 1;\n  }\n  return n;\n};\nconst main = stdin => {\n  const input = stdin.trim().split(\"\\n\");\n  const s = parseInt(input[0]);\n  if (s === 1 || s === 2 || s === 4) {\n    console.log(4);\n    return;\n  }\n  let tmp = s;\n  let first = 0;\n  let second = 0;\n  for (let i = 1;; i++) {\n    if (tmp === 4 && first === 0) {\n      first = i;\n    } else if (tmp === 4 && first !== 0) {\n      second = i;\n      break;\n    }\n    tmp = collatz(tmp);\n  }\n  console.log(second);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6725536034319792, "ngram_match_score": 0.5831721918527601, "weighted_ngram_match_score": 0.5870422218751566, "syntax_match_score": 0.87, "dataflow_match_score": 0.65}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03252_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var S=input[0x0];var T=input[0x1];var ans='Yes';while(T['length']!=0x0){for(i=0x1;i<T['length'];i++){if(T['substr'](0x0,0x1)==T['substr'](i,0x1)){if(S['substr'](0x0,0x1)!=S['substr'](i,0x1)){ans='No';break;}}if(S['substr'](0x0,0x1)==S['substr'](i,0x1)){if(T['substr'](0x0,0x1)!=T['substr'](i,0x1)){ans='No';break;}}}if(ans=='No'){break;}S=S['substr'](0x1);T=T['substr'](0x1);}console['log']('%s',ans);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["azzel\napple", "Yes"], ["chokudai\nredcoder", "No"], ["abcdefghijklmnopqrstuvwxyz\nibyhqfrekavclxjstdwgpzmonu", "Yes"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var S = input[0];\n  var T = input[1];\n  var ans=\"Yes\";\n  while(T.length!=0){\n    for(i=1;i<T.length;i++){\n      if(T.substr(0,1)==T.substr(i,1)){\n        if(S.substr(0,1)!=S.substr(i,1)){\n          ans=\"No\";\n          break;\n        }\n      }\n      if(S.substr(0,1)==S.substr(i,1)){\n        if(T.substr(0,1)!=T.substr(i,1)){\n          ans=\"No\";\n          break;\n        }\n      }\n    }\n    if(ans==\"No\"){\n      break;\n    }\n    S=S.substr(1);\n    T=T.substr(1);\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 184, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var S = input[0];\n  var T = input[1];\n  var ans = \"Yes\";\n  while (T.length != 0) {\n    for (i = 1; i < T.length; i++) {\n      if (T.substr(0, 1) == T.substr(i, 1)) {\n        if (S.substr(0, 1) != S.substr(i, 1)) {\n          ans = \"No\";\n          break;\n        }\n      }\n      if (S.substr(0, 1) == S.substr(i, 1)) {\n        if (T.substr(0, 1) != T.substr(i, 1)) {\n          ans = \"No\";\n          break;\n        }\n      }\n    }\n    if (ans == \"No\") {\n      break;\n    }\n    S = S.substr(1);\n    T = T.substr(1);\n  }\n  console.log(\"%s\", ans);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6894672096200695, "ngram_match_score": 0.2526348551746117, "weighted_ngram_match_score": 0.5052339833056663, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03272_1", "type": "JavaScript", "obfuscated": "a=require('fs')['readFileSync']('/dev/stdin','utf8')['match'](/\\d+/g);console['log'](a[0x0]-a[0x1]+0x1);", "test_cases": [["4 2", "3"], ["1 1", "1"], ["15 11", "5"]], "original": "a=require('fs').readFileSync('/dev/stdin','utf8').match(/\\d+/g);console.log(a[0]-a[1]+1)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 185, "deobfuscated": "a = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").match(/\\d+/g);\nconsole.log(a[0] - a[1] + 1);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03280_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');l=inp['shift']()['split']('\\x20');A=l[0x0]*0x1-0x1;B=l[0x1]*0x1-0x1;console['log'](A*B);", "test_cases": [["2 2", "1"], ["5 7", "24"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nA = l[0] * 1 - 1\nB = l[1] * 1 - 1\nconsole.log(A * B)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 186, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nl = inp.shift().split(\" \");\nA = l[0] * 1 - 1;\nB = l[1] * 1 - 1;\nconsole.log(A * B);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.719284955097234, "ngram_match_score": 0.43856991019446795, "weighted_ngram_match_score": 0.43856991019446795, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03472_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);let H=parseInt(arg[0x0]['split']('\\x20')[0x1]);let ab=arg['slice'](0x1,N+0x1)['map'](n=>n['split']('\\x20')['map'](l=>parseInt(l)));ab['sort']((a,b)=>b[0x0]-a[0x0]);const aMax=ab[0x0][0x0];ab=ab['sort']((a,b)=>b[0x1]-a[0x1])['filter'](n=>n[0x1]>aMax);let damage=0x0;let throwAttack=0x0;for(let i in ab){H-=ab[i][0x1];throwAttack++;if(H<=0x0){console['log'](throwAttack);return;}}const directAttack=Math['ceil'](H/aMax);console['log'](throwAttack+directAttack);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 10\n3 5", "3"], ["2 10\n3 5\n2 6", "2"], ["4 1000000000\n1 1\n1 10000000\n1 30000000\n1 99999999", "860000004"], ["5 500\n35 44\n28 83\n46 62\n31 79\n40 43", "9"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N  = parseInt(arg[0].split(\" \")[0]);\n    let H  = parseInt(arg[0].split(\" \")[1]);\n    let ab = arg.slice(1, N + 1).map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    ab.sort((a,b)=>b[0] - a[0]);\n    \n    const aMax = ab[0][0];\n    \n    ab = ab.sort((a,b)=>b[1] - a[1]).filter(n=>n[1] > aMax);\n\n    let damage = 0;\n    let throwAttack = 0;\n    \n    for(let i in ab) {\n        H -= ab[i][1];\n        throwAttack++;\n        \n        if(H <= 0) {\n            console.log(throwAttack);\n            return;\n        }\n    }\n    \n    const directAttack = Math.ceil(H / aMax);\n    \n    console.log(throwAttack + directAttack);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 187, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  let H = parseInt(arg[0].split(\" \")[1]);\n  let ab = arg.slice(1, N + 1).map(n => n.split(\" \").map(l => parseInt(l)));\n  ab.sort((a, b) => b[0] - a[0]);\n  const aMax = ab[0][0];\n  ab = ab.sort((a, b) => b[1] - a[1]).filter(n => n[1] > aMax);\n  let damage = 0;\n  let throwAttack = 0;\n  for (let i in ab) {\n    H -= ab[i][1];\n    throwAttack++;\n    if (H <= 0) {\n      console.log(throwAttack);\n      return;\n    }\n  }\n  const directAttack = Math.ceil(H / aMax);\n  console.log(throwAttack + directAttack);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8526135349273242, "ngram_match_score": 0.6428130647411561, "weighted_ngram_match_score": 0.7676410749681407, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03695_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var g_input='';process['stdin']['on']('data',function(chunk){g_input+=chunk;});process['stdin']['on']('end',function(){main(g_input['split'](/\\r?\\n/));});function main(inputs){var N=parseInt(inputs[0x0]);var rs=inputs[0x1]['split']('\\x20')['map'](function(a){return parseInt(a);});var a=new Array(0x7)['fill'](![]);var a8=0x0;var count=0x0;for(var i=0x0;i<N;i++){for(var j=0x0;j<0x9;j++){if(j!=0x8){if(rs[i]<(j+0x1)*0x190){if(!a[j]){a[j]=!![];count+=0x1;}break;}}else{a8+=0x1;}}}var min=count;if(min==0x0&&N>0x0){min=0x1;if(a8>0x0){a8-=0x1;}}var max=Math['min'](0x8,min+a8);console['log'](''+min+'\\x20'+max);}", "test_cases": [["4\n2100 2500 2700 2700", "2 2"], ["5\n1100 1900 2800 3200 3200", "3 5"], ["20\n800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990", "1 1"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\nprocess.stdin.on('end', function() {\n    main(g_input.split(/\\r?\\n/));\n});\n\nfunction main(inputs) {\n  var N = parseInt(inputs[0]);\n  var rs = inputs[1].split(\" \").map(function(a){return parseInt(a);});\n  var a = new Array(7).fill(false);\n  var a8 = 0;\n  var count = 0;\n  for(var i = 0; i < N; i++){\n    for(var j = 0; j < 9; j++){\n      if(j != 8){\n        if(rs[i] < (j+1)*400){\n          if(!a[j]){\n            a[j] = true;\n            count += 1;\n          }\n          break;\n        }\n      }else{\n        a8 += 1;\n      }\n    }\n  }\n  var min = count;\n  if(min == 0 && N>0){\n    min = 1;\n    if(a8>0){\n      a8 -=1;\n    }\n  }\n  var max = Math.min(8, min + a8);\n  console.log(\"\"+min+\" \"+max);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 188, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar g_input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  g_input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  main(g_input.split(/\\r?\\n/));\n});\nfunction main(inputs) {\n  var N = parseInt(inputs[0]);\n  var rs = inputs[1].split(\" \").map(function (a) {\n    return parseInt(a);\n  });\n  var a = new Array(7).fill(false);\n  var a8 = 0;\n  var count = 0;\n  for (var i = 0; i < N; i++) {\n    for (var j = 0; j < 9; j++) {\n      if (j != 8) {\n        if (rs[i] < (j + 1) * 400) {\n          if (!a[j]) {\n            a[j] = true;\n            count += 1;\n          }\n          break;\n        }\n      } else {\n        a8 += 1;\n      }\n    }\n  }\n  var min = count;\n  if (min == 0 && N > 0) {\n    min = 1;\n    if (a8 > 0) {\n      a8 -= 1;\n    }\n  }\n  var max = Math.min(8, min + a8);\n  console.log(\"\" + min + \" \" + max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7611581439651856, "ngram_match_score": 0.44164392799428126, "weighted_ngram_match_score": 0.6029886478664609, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0036284115332148037, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025510204081632626, "new_decrease_halstead_effort": 0.09061397623736667}}
{"filename": "p03777_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');var a=String(input[0x0]);var b=String(input[0x1]);if(a==='H'&&b==='H'||a==='D'&&b==='D'){console['log']('H');}else{console['log']('D');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["H H", "H"], ["D H", "D"], ["D D", "H"]], "original": "function Main(input){\n  input = input.split(' ');\n  var a = String(input[0]);\n  var b = String(input[1]);\n\n  if( a === 'H' && b === 'H' || a === 'D' && b === 'D') {\n      console.log('H');\n  } else {\n    console.log('D');\n\n\n}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 189, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  var a = String(input[0]);\n  var b = String(input[1]);\n  if (a === \"H\" && b === \"H\" || a === \"D\" && b === \"D\") {\n    console.log(\"H\");\n  } else {\n    console.log(\"D\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6834298149442176, "ngram_match_score": 0.35743576917753406, "weighted_ngram_match_score": 0.3762834905993363, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03854_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const arr=['dream','dreamer','erase','eraser'];for(let i in arr){arr[i]=reverse(arr[i]);}input=reverse(input);while(input['length']>0x0){let flag=![];for(let s of arr){if(input['slice'](0x0,s['length'])==s){input=input['substr'](s['length']);flag=!![];}}if(flag==![])break;}if(input['length']<=0x0){console['log']('YES');}else{console['log']('NO');}}function reverse(str){return str['split']('')['reverse']()['join']('');}Main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["erasedream", "YES"], ["dreameraser", "YES"], ["dreamerer", "NO"]], "original": "\"use strict\";\nfunction Main(input) {\n  const arr = [\"dream\", \"dreamer\", \"erase\", \"eraser\"];\n\n  for (let i in arr) {\n    arr[i] = reverse(arr[i]);\n  }\n  input = reverse(input);\n  while (input.length > 0) {\n    let flag = false;\n    for (let s of arr) {\n      // console.log(\n      //   `input: ${input.slice(0, s.length)}, s: ${s}, length: ${s.length}`\n      // );\n      if (input.slice(0, s.length) == s) {\n        input = input.substr(s.length);\n        flag = true;\n      }\n    }\n    if (flag == false) break;\n  }\n  if (input.length <= 0) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\n\nfunction reverse(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 190, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const arr = [\"dream\", \"dreamer\", \"erase\", \"eraser\"];\n  for (let i in arr) {\n    arr[i] = reverse(arr[i]);\n  }\n  input = reverse(input);\n  while (input.length > 0) {\n    let flag = false;\n    for (let s of arr) {\n      if (input.slice(0, s.length) == s) {\n        input = input.substr(s.length);\n        flag = true;\n      }\n    }\n    if (flag == false) {\n      break;\n    }\n  }\n  if (input.length <= 0) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nfunction reverse(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8895471256614866, "ngram_match_score": 0.801704004311071, "weighted_ngram_match_score": 0.8183401684379683, "syntax_match_score": 0.9381443298969072, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005786858014670715, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.043010752688172005, "new_decrease_halstead_effort": 0.10462154821990399}}
{"filename": "p02265_1", "type": "JavaScript", "obfuscated": "const config={'input':'/dev/stdin','newline':'\\x0a'};const line=require('fs')['readFileSync'](config['input'],'utf-8')['split'](config['newline']);const insert=(arr,x)=>arr['unshift'](x);const del=(arr,x)=>{for(var i=0x0;i<arr['length'];i++){if(x===arr[i])break;}if(i!==arr['length'])arr['splice'](i,0x1);};const delFirst=arr=>arr['shift']();const delLast=arr=>arr['pop']();const cmds=line['slice'](0x1);const ans=cmds['reduce']((acc,x)=>{const cmd=x['split']('\\x20');switch(cmd[0x0]){case'insert':insert(acc,parseInt(cmd[0x1]));break;case'delete':del(acc,parseInt(cmd[0x1]));break;case'deleteFirst':delFirst(acc);break;case'deleteLast':delLast(acc);break;}return acc;},[])['map'](x=>x['toString']())['join']('\\x20');console['log'](ans);", "test_cases": [["7\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5", "6 1 2"], ["9\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5\ndeleteFirst\ndeleteLast", "1"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nconst insert = (arr, x) => arr.unshift(x);\nconst del = (arr, x) => {\n    for (var i = 0; i < arr.length; i++) {\n        if (x === arr[i]) break;\n    }\n    if (i !== arr.length) arr.splice(i, 1);\n};\nconst delFirst = arr => arr.shift();\nconst delLast = arr => arr.pop();\n\nconst cmds = line.slice(1);\nconst ans = cmds.reduce((acc, x) => {\n    const cmd = x.split(' ');\n    switch (cmd[0]) {\n        case 'insert':\n            insert(acc, parseInt(cmd[1]));\n            break;\n        case 'delete':\n            del(acc, parseInt(cmd[1]));\n            break;\n        case 'deleteFirst':\n            delFirst(acc);\n            break;\n        case 'deleteLast':\n            delLast(acc);\n            break;\n    }\n\n    return acc;\n}, []).map(x => x.toString()).join(' ');\n\nconsole.log(ans);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 191, "deobfuscated": "const config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nconst line = require(\"fs\").readFileSync(config.input, \"utf-8\").split(config.newline);\nconst insert = (arr, x) => arr.unshift(x);\nconst del = (arr, x) => {\n  for (var i = 0; i < arr.length; i++) {\n    if (x === arr[i]) {\n      break;\n    }\n  }\n  if (i !== arr.length) {\n    arr.splice(i, 1);\n  }\n};\nconst delFirst = arr => arr.shift();\nconst delLast = arr => arr.pop();\nconst cmds = line.slice(1);\nconst ans = cmds.reduce((acc, x) => {\n  const cmd = x.split(\" \");\n  switch (cmd[0]) {\n    case \"insert\":\n      insert(acc, parseInt(cmd[1]));\n      break;\n    case \"delete\":\n      del(acc, parseInt(cmd[1]));\n      break;\n    case \"deleteFirst\":\n      delFirst(acc);\n      break;\n    case \"deleteLast\":\n      delLast(acc);\n      break;\n  }\n  return acc;\n}, []).map(x => x.toString()).join(\" \");\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8124147366606298, "ngram_match_score": 0.6965315116517242, "weighted_ngram_match_score": 0.7311804162095266, "syntax_match_score": 0.9343065693430657, "dataflow_match_score": 0.8876404494382022}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02413_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){function sumLine(a,b){return a+b;}function result(matrix){var size=matrix['shift']();matrix['map'](function(v){return v['push'](v['reduce'](sumLine));});var sumColumn=[];for(var i=0x0;i<size[0x1]+0x1;i++){var sumValue=0x0;for(var j=0x0;j<size[0x0];j++){sumValue+=matrix[j][i];}sumColumn['push'](sumValue);}matrix['push'](sumColumn);return matrix['join']('\\x0a')['replace'](/,/g,'\\x20');}var inputs=stdin['toString']()['trim']()['split']('\\x0a');var sheet=inputs['map'](function(v){return v['split']('\\x20')['map'](Number);});console['log'](result(sheet));}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4 5\n1 1 3 4 5\n2 2 2 4 5\n3 3 0 1 1\n2 3 4 4 6", "1 1 3 4 5 14\n2 2 2 4 5 15\n3 3 0 1 1 8\n2 3 4 4 6 19\n8 9 9 13 17 56"]], "original": "'use strict';\n(function(stdin) {\n  //declare function\n  function sumLine(a, b) {\n    return a + b;\n  }\n\n  function result(matrix) {\n    var size = matrix.shift();\n    matrix.map(function(v) {\n      return v.push(v.reduce(sumLine));\n    });\n    var sumColumn = [];\n    for (var i = 0; i < size[1] + 1; i++) {\n      var sumValue = 0;\n      for (var j = 0; j < size[0]; j++) {\n        sumValue += matrix[j][i];\n      }\n      sumColumn.push(sumValue);\n    }\n    matrix.push(sumColumn);\n    return matrix.join('\\n').replace(/,/g, ' ');\n  }\n  //declare variable\n  var inputs = stdin.toString().trim().split('\\n');\n  var sheet = inputs.map(function(v) {\n    return v.split(' ').map(Number);\n  });\n  //main\n\n  //display\n  console.log(result(sheet));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 192, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  function sumLine(a, b) {\n    return a + b;\n  }\n  function result(matrix) {\n    var size = matrix.shift();\n    matrix.map(function (v) {\n      return v.push(v.reduce(sumLine));\n    });\n    var sumColumn = [];\n    for (var i = 0; i < size[1] + 1; i++) {\n      var sumValue = 0;\n      for (var j = 0; j < size[0]; j++) {\n        sumValue += matrix[j][i];\n      }\n      sumColumn.push(sumValue);\n    }\n    matrix.push(sumColumn);\n    return matrix.join(\"\\n\").replace(/,/g, \" \");\n  }\n  var inputs = stdin.toString().trim().split(\"\\n\");\n  var sheet = inputs.map(function (v) {\n    return v.split(\" \").map(Number);\n  });\n  console.log(result(sheet));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8316545811016767, "ngram_match_score": 0.6862943014248167, "weighted_ngram_match_score": 0.6958795785374452, "syntax_match_score": 1.0, "dataflow_match_score": 0.9444444444444444}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02553_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var t=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{var x=lines[0x0]['split']('\\x20');var a=parseInt(x[0x0]);var b=parseInt(x[0x1]);var c=parseInt(x[0x2]);var d=parseInt(x[0x3]);var ac=a*c;var ad=a*d;var bc=b*c;var bd=b*d;t['push'](ac);t['push'](ad);t['push'](bc);t['push'](bd);console['log'](Math['max']['apply'](null,t));});", "test_cases": [["1 2 1 1", "2"], ["3 5 -4 -2", "-6"], ["-1000000000 0 -1000000000 0", "1000000000000000000"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar lines = [];\nvar t = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var x = lines[0].split(' ');\n  var a = parseInt(x[0]);\n  var b= parseInt(x[1]);\n  var c = parseInt(x[2]);\n  var d = parseInt(x[3]);\n  var ac = a * c;\n  var ad = a * d;\n  var bc = b * c;\n  var bd = b * d;\n  t.push(ac);\n  t.push(ad);\n  t.push(bc);\n  t.push(bd);\n  console.log(Math.max.apply(null,t));\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 193, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar t = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  var x = lines[0].split(\" \");\n  var a = parseInt(x[0]);\n  var b = parseInt(x[1]);\n  var c = parseInt(x[2]);\n  var d = parseInt(x[3]);\n  var ac = a * c;\n  var ad = a * d;\n  var bc = b * c;\n  var bd = b * d;\n  t.push(ac);\n  t.push(ad);\n  t.push(bc);\n  t.push(bd);\n  console.log(Math.max.apply(null, t));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8610415084312609, "ngram_match_score": 0.7427416280128967, "weighted_ngram_match_score": 0.7710051372018886, "syntax_match_score": 0.9473684210526315, "dataflow_match_score": 0.9830508474576272}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02576_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x20');const N=Number(input[0x0]);const X=Number(input[0x1]);const T=Number(input[0x2]);let ans=0x0;let i;for(i=0x0;ans<N;i++){ans+=X;}console['log'](T*i);}function numberSort(array){array['sort'](f);return array;}var f=function(a,b){return a-b;};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["20 12 6", "12"], ["1000 1 1000", "1000000"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\" \");\n  const N = Number(input[0]);\n  const X = Number(input[1]);\n  const T = Number(input[2]);\n  let ans = 0;\n\n  let i;\n  for (i = 0; ans < N; i++) {\n    ans += X;\n  }\n\n  console.log(T * i);\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 194, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\" \");\n  const N = Number(input[0]);\n  const X = Number(input[1]);\n  const T = Number(input[2]);\n  let ans = 0;\n  let i;\n  for (i = 0; ans < N; i++) {\n    ans += X;\n  }\n  console.log(T * i);\n}\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\nfunction f(a, b) {\n  return a - b;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8966922046436634, "ngram_match_score": 0.8331084829814136, "weighted_ngram_match_score": 0.8354921674250718, "syntax_match_score": 0.9459459459459459, "dataflow_match_score": 0.9722222222222222}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03191489361702127, "new_decrease_halstead_effort": 0.09842664121763645}}
{"filename": "p02614_1", "type": "JavaScript", "obfuscated": "const fs=require('fs');const [h,w,k,...m]=fs['readFileSync']('/dev/stdin','utf8')['split'](/\\s/);function solve(m,x=0x0,y=0x0,f){if(m['length']===0x0||m[0x0]['length']===0x0){return 0x0;}const n=m['join']('')['replace'](/\\./g,'')['length'];let a=0x0;if(n==k){a++;}if(n<k){return a;}if(!f){for(let i=y;i<m['length'];i++){a+=solve([...m['slice'](0x0,i),...m['slice'](i+0x1)],x,i<y?y:i);}}for(let i=x;i<m[0x0]['length'];i++){a+=solve(m['map'](l=>l['slice'](0x0,i)+l['slice'](i+0x1)),i<x?x:i,y,!![]);}return a;}console['log'](solve(m));", "test_cases": [["2 3 2\n..#\n###", "5"], ["2 3 4\n..#\n###", "1"], ["2 2 3\n##\n##", "0"], ["6 6 8\n..##..\n.#..#.\n#....#\n######\n#....#\n#....#", "208"]], "original": "const fs = require('fs');\nconst [h, w, k, ...m] = fs.readFileSync('/dev/stdin', 'utf8').split(/\\s/);\n\nfunction solve(m, x=0, y=0, f) {\n  if (m.length === 0 || m[0].length === 0) {\n    return 0;\n  }\n  const n = m.join('').replace(/\\./g, '').length;\n  let a = 0;\n  if (n == k) {\n    a++;\n  }\n  if (n < k) {\n\t  return a;\n  }\n  if (!f) {\n    for (let i = y; i < m.length; i++) {\n      a += solve([...m.slice(0, i), ...m.slice(i + 1)], x, i < y ? y : i);\n    }\n  }\n  for (let i = x; i < m[0].length; i++) {\n    a += solve(m.map(l => l.slice(0, i) + l.slice(i + 1)), i < x ? x : i, y, true);\n  }\n  return a;\n}\n\nconsole.log(solve(m));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 195, "deobfuscated": "const fs = require(\"fs\");\nconst [h, w, k, ...m] = fs.readFileSync(\"/dev/stdin\", \"utf8\").split(/\\s/);\nfunction solve(m, x = 0, y = 0, f) {\n  if (m.length === 0 || m[0].length === 0) {\n    return 0;\n  }\n  const n = m.join(\"\").replace(/\\./g, \"\").length;\n  let a = 0;\n  if (n == k) {\n    a++;\n  }\n  if (n < k) {\n    return a;\n  }\n  if (!f) {\n    for (let i = y; i < m.length; i++) {\n      a += solve([...m.slice(0, i), ...m.slice(i + 1)], x, i < y ? y : i);\n    }\n  }\n  for (let i = x; i < m[0].length; i++) {\n    a += solve(m.map(l => l.slice(0, i) + l.slice(i + 1)), i < x ? x : i, y, true);\n  }\n  return a;\n}\nconsole.log(solve(m));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9384658677278751, "ngram_match_score": 0.8599280905555625, "weighted_ngram_match_score": 0.8939353803559378, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0028204845607127105, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.021582733812949617, "new_decrease_halstead_effort": 0.05107877891147472}}
{"filename": "p02627_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split']('\\x0a');var answer=input[0x0];var answerA=input[0x0]['toUpperCase']();if(answer==answerA){console['log']('A');}else{console['log']('a');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["B", "A"], ["a", "a"]], "original": "function main(input){\n\tinput=input.split(\"\\n\");\nvar answer=input[0];\nvar answerA=input[0].toUpperCase();\n\nif(answer==answerA){console.log(\"A\")}else{console.log(\"a\")}\n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 196, "deobfuscated": "function main(input) {\n  input = input.split(\"\\n\");\n  var answer = input[0];\n  var answerA = input[0].toUpperCase();\n  if (answer == answerA) {\n    console.log(\"A\");\n  } else {\n    console.log(\"a\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5402391407843461, "ngram_match_score": 0.039530883746698414, "weighted_ngram_match_score": 0.12142567939068617, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02684_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['trim']()['split']('\\x0a');let [n,k]=lines[0x0]['split']('\\x20');n=+n;k=BigInt(k);const towns=lines[0x1]['split']('\\x20')['map'](Number);const visited=new Map();let pos=0x1;while(k>0x0){const i=visited['get'](pos);if(!i){visited['set'](pos,BigInt(visited['size']));pos=towns[pos-0x1];k--;}else{const cycle=BigInt(visited['size'])-i;const rest=k%cycle;for(let [key,value]of visited){if(value==i+rest){pos=key;break;}}k=0x0;}}console['log'](pos);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5\n3 2 4 1", "4"], ["6 727202214173249351\n6 5 2 5 3 2", "2"]], "original": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  let [n, k] = lines[0].split(' ');\n  n = +n;\n  k = BigInt(k);\n  const towns = lines[1].split(' ').map(Number);\n\n  const visited = new Map();\n  let pos = 1;\n  while (k > 0) {\n    const i = visited.get(pos);\n    if (!i) {\n      visited.set(pos, BigInt(visited.size));\n      pos = towns[pos - 1];\n      k--;\n    } else {\n      const cycle = BigInt(visited.size) - i;\n      const rest = k % cycle;\n      for (let [key, value] of visited) {\n        if (value == i + rest) {\n          pos = key;\n          break;\n        }\n      }\n      k = 0;\n    }\n  }\n  \n  console.log(pos);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 197, "deobfuscated": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  let [n, k] = lines[0].split(\" \");\n  n = +n;\n  k = BigInt(k);\n  const towns = lines[1].split(\" \").map(Number);\n  const visited = new Map();\n  let pos = 1;\n  while (k > 0) {\n    const i = visited.get(pos);\n    if (!i) {\n      visited.set(pos, BigInt(visited.size));\n      pos = towns[pos - 1];\n      k--;\n    } else {\n      const cycle = BigInt(visited.size) - i;\n      const rest = k % cycle;\n      for (let [key, value] of visited) {\n        if (value == i + rest) {\n          pos = key;\n          break;\n        }\n      }\n      k = 0;\n    }\n  }\n  console.log(pos);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9599628153368446, "ngram_match_score": 0.9260989517395085, "weighted_ngram_match_score": 0.9298813418659342, "syntax_match_score": 1.0, "dataflow_match_score": 0.9838709677419355}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02730_1", "type": "JavaScript", "obfuscated": "'use strict';const is_palindrome=s=>{let n=s['length'];for(let i=0x0;i<n;i++){if(s[i]!==s[n-i-0x1])return![];}return!![];};const main=input=>{const spi=input['split']('\\x0a');const s=spi[0x0];const n=s['length'];if(is_palindrome(s)&&is_palindrome(s['substring'](0x0,(n-0x1)/0x2))&&is_palindrome(s['substr']((n+0x3)/0x2-0x1)))console['log']('Yes');else console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["akasaka", "Yes"], ["level", "No"], ["atcoder", "No"]], "original": "\"use strict\";\n\nconst is_palindrome = s => {\n    let n = s.length;\n    for (let i = 0; i < n; i++) {\n        if (s[i] !== s[n - i - 1]) return false;\n    }\n\n    return true;\n}\n\nconst main = (input) => {\n    const spi = input.split('\\n');\n    const s = spi[0];\n    const n = s.length;\n\n    if (is_palindrome(s)\n        && is_palindrome(s.substring(0, (n-1)/2))\n        && is_palindrome(s.substr((n+3)/2-1)))\n        console.log(\"Yes\");\n    else\n        console.log(\"No\");\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 198, "deobfuscated": "'use strict';\n\nconst is_palindrome = s => {\n  let n = s.length;\n  for (let i = 0; i < n; i++) {\n    if (s[i] !== s[n - i - 1]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst main = input => {\n  const spi = input.split(\"\\n\");\n  const s = spi[0];\n  const n = s.length;\n  if (is_palindrome(s) && is_palindrome(s.substring(0, (n - 1) / 2)) && is_palindrome(s.substr((n + 3) / 2 - 1))) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7654234957316113, "ngram_match_score": 0.5720064964916157, "weighted_ngram_match_score": 0.7189655613011391, "syntax_match_score": 0.8295454545454546, "dataflow_match_score": 0.9411764705882353}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02742_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{const tmp=input['trim']()['split']('\\x20');const H=parseInt(tmp[0x0]);const W=parseInt(tmp[0x1]);let result=0x0;if(H%0x2!=0x0&&W%0x2!=0x0){result=Math['ceil'](H*W/0x2);}else{result=H*W/0x2;}console['log'](result);return result;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5", "10"], ["7 3", "11"], ["1000000000 1000000000", "500000000000000000"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split(' ')\n  const H = parseInt(tmp[0])\n  const W = parseInt(tmp[1])\n\n  let result = 0\n\n  if ((H % 2) != 0 && (W % 2) != 0) {\n    result = Math.ceil(H * W / 2)\n  } else {\n    result = H * W / 2\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 199, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  const tmp = input.trim().split(\" \");\n  const H = parseInt(tmp[0]);\n  const W = parseInt(tmp[1]);\n  let result = 0;\n  if (H % 2 != 0 && W % 2 != 0) {\n    result = Math.ceil(H * W / 2);\n  } else {\n    result = H * W / 2;\n  }\n  console.log(result);\n  return result;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5337484743833154, "ngram_match_score": 0.4197975741341727, "weighted_ngram_match_score": 0.43268858346100847, "syntax_match_score": 0.8088235294117647, "dataflow_match_score": 0.47368421052631576}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02777_1", "type": "JavaScript", "obfuscated": "function Main(impu){let imput=impu['split']('\\x0a');let name=imput[0x0]['split']('\\x20');let count=imput[0x1]['split']('\\x20');if(name[0x0]===imput[0x2])count[0x0]--;else count[0x1]--;console['log'](count[0x0]+'\\x20'+count[0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["red blue\n3 4\nred", "2 4"], ["red blue\n5 5\nblue", "5 4"]], "original": "function Main(impu) {\n\tlet imput = impu.split(\"\\n\");\n\tlet name = imput[0].split(\" \");\n\tlet count = imput[1].split(\" \");\n\t\n\tif(name[0] === imput[2]) \n\t\tcount[0]--;\n\telse\n\t\tcount[1]--;\n\t\n\tconsole.log(count[0] + \" \" + count[1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 200, "deobfuscated": "function Main(impu) {\n  let imput = impu.split(\"\\n\");\n  let name = imput[0].split(\" \");\n  let count = imput[1].split(\" \");\n  if (name[0] === imput[2]) {\n    count[0]--;\n  } else {\n    count[1]--;\n  }\n  console.log(count[0] + \" \" + count[1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8467596258956529, "ngram_match_score": 0.6810449833045545, "weighted_ngram_match_score": 0.7952792345637713, "syntax_match_score": 0.9107142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02818_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(inputs){const input=inputs['split']('\\x0a');const a=Number(input[0x0]['split']('\\x20')[0x0]);const b=Number(input[0x0]['split']('\\x20')[0x1]);const k=Number(input[0x0]['split']('\\x20')[0x2]);console['log'](a>k?a-k:0x0,a+b>k?a+b-k:0x0);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 3", "0 2"], ["500000000000 500000000000 1000000000000", "0 0"]], "original": "'use strict';\nfunction Main(inputs) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  const input = inputs.split(\"\\n\");\n  const a = Number(input[0].split(' ')[0]);\n  const b = Number(input[0].split(' ')[1]);\n  const k = Number(input[0].split(' ')[2]);\n\n  console.log((a > k ? a - k : 0), (a + b > k ? a + b - k : 0));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 201, "deobfuscated": "'use strict';\n\nfunction Main(inputs) {\n  const input = inputs.split(\"\\n\");\n  const a = Number(input[0].split(\" \")[0]);\n  const b = Number(input[0].split(\" \")[1]);\n  const k = Number(input[0].split(\" \")[2]);\n  console.log(a > k ? a - k : 0, a + b > k ? a + b - k : 0);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6765654068840754, "ngram_match_score": 0.5111972356947978, "weighted_ngram_match_score": 0.5249936927056047, "syntax_match_score": 0.8805970149253731, "dataflow_match_score": 0.7894736842105263}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02832_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{var count=lines[0x0];var ary=lines[0x1]['split']('\\x20')['map'](x=>Number(x));var break_count=0x0;var tmp_count=0x1;var c=0x0;for(var i=0x0;i<count;i++){if(ary[tmp_count-0x1]==tmp_count){c+=tmp_count;tmp_count++;}else{break_count++;ary['splice'](tmp_count-0x1,0x1);}}var judge=![];if(ary['length']==0x0){judge=!![];}if(sum(ary['length'])!=c){judge=!![];}if(break_count==0x0&&judge){console['log'](0x0);}else{if(judge){console['log'](-0x1);}else{console['log'](break_count);}}function sum(n){return n*(n+0x1)*0.5;}});", "test_cases": [["3\n2 1 2", "1"], ["3\n2 2 2", "-1"], ["10\n3 1 4 1 5 9 2 6 5 3", "7"], ["1\n1", "0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var count = lines[0]\n  var ary = lines[1].split(\" \").map( x => Number(x) )\n  var break_count = 0\n  // 1から開始\n  var tmp_count = 1\n  var c = 0\n  for(var i = 0; i < count; i++) {\n    if (ary[tmp_count - 1] == tmp_count) {\n      c+=tmp_count\n      tmp_count++\n    } else {\n      break_count++\n      ary.splice(tmp_count - 1, 1)\n    }\n  }\n  // 順列になっているか\n  var judge = false\n  if (ary.length == 0) {\n    judge = true\n  }\n  if (sum(ary.length) != c) {\n    judge = true\n  }\n\n  // 順列になっているかつ 0 の時は0\n  if (break_count == 0 && judge) {\n    console.log(0)\n  } else {\n    if (judge) {\n      console.log(-1)\n    } else {\n      console.log(break_count)\n    }\n  }\n  \n  // 1~nの総和を求める関数\n  function sum(n) {\n    return (n * (n + 1) * 0.5)\n  }\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 202, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  var count = lines[0];\n  var ary = lines[1].split(\" \").map(x => Number(x));\n  var break_count = 0;\n  var tmp_count = 1;\n  var c = 0;\n  for (var i = 0; i < count; i++) {\n    if (ary[tmp_count - 1] == tmp_count) {\n      c += tmp_count;\n      tmp_count++;\n    } else {\n      break_count++;\n      ary.splice(tmp_count - 1, 1);\n    }\n  }\n  var judge = false;\n  if (ary.length == 0) {\n    judge = true;\n  }\n  if (sum(ary.length) != c) {\n    judge = true;\n  }\n  if (break_count == 0 && judge) {\n    console.log(0);\n  } else if (judge) {\n    console.log(-1);\n  } else {\n    console.log(break_count);\n  }\n  function sum(n) {\n    return n * (n + 1) * 0.5;\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7022132761898141, "ngram_match_score": 0.4633327147177237, "weighted_ngram_match_score": 0.47553677005791267, "syntax_match_score": 0.8851351351351351, "dataflow_match_score": 0.9848484848484849}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02847_1", "type": "JavaScript", "obfuscated": "function Main(input){var result;switch(input){case'SUN':result='7';break;case'MON':result='6';break;case'TUE':result='5';break;case'WED':result='4';break;case'THU':result='3';break;case'FRI':result='2';break;case'SAT':result='1';break;}console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["SAT", "1"], ["SUN", "7"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  \tvar result;\n  \tswitch (input){\n        case 'SUN':\n        result = '7';\n        break;\n        case 'MON':\n        result = '6';\n        break;\n        case 'TUE':\n        result = '5';\n        break;\n        case 'WED':\n        result = '4';\n        break;\n        case 'THU':\n        result = '3';\n        break;\n        case 'FRI':\n        result = '2';\n        break;\n        case 'SAT':\n        result = '1';\n        break;\n    }\n\tconsole.log(result);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 203, "deobfuscated": "function Main(input) {\n  var result;\n  switch (input) {\n    case \"SUN\":\n      result = \"7\";\n      break;\n    case \"MON\":\n      result = \"6\";\n      break;\n    case \"TUE\":\n      result = \"5\";\n      break;\n    case \"WED\":\n      result = \"4\";\n      break;\n    case \"THU\":\n      result = \"3\";\n      break;\n    case \"FRI\":\n      result = \"2\";\n      break;\n    case \"SAT\":\n      result = \"1\";\n      break;\n  }\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.567365400970191, "ngram_match_score": 0.13152006184172613, "weighted_ngram_match_score": 0.13794154203903758, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02886_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');const n=Number(input[0x0]);const ocps=input[0x1]['split']('\\x20')['map'](ocp=>Number(ocp));var r=0x0;for(var i=0x0;i<n;i++){for(var j=i+0x1;j<n;j++){r+=ocps[i]*ocps[j];}}console['log'](r);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n3 1 2", "11"], ["7\n5 0 7 8 3 3 2", "312"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var input = input.split('\\n');\n  const n = Number(input[0])\n  const ocps = input[1].split(' ').map(ocp => Number(ocp));\n  var r = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = i+1; j < n; j++) {\n      r += ocps[i] * ocps[j]\n    }\n  }\n  console.log(r)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 204, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  const n = Number(input[0]);\n  const ocps = input[1].split(\" \").map(ocp => Number(ocp));\n  var r = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = i + 1; j < n; j++) {\n      r += ocps[i] * ocps[j];\n    }\n  }\n  console.log(r);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8165473346360173, "ngram_match_score": 0.6534728154851427, "weighted_ngram_match_score": 0.6639985743409776, "syntax_match_score": 1.0, "dataflow_match_score": 0.9487179487179487}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02887_1", "type": "JavaScript", "obfuscated": "function main(arg){var arg2=arg['split'](/\\n/g);var honbun=arg2[0x1];var alphabet='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';for(i=0x0;i<alphabet['length'];i++){var iro=alphabet['substr'](i,0x1);var regkun=new RegExp(iro+'+','g');honbun=honbun['replace'](regkun,iro);}console['log'](honbun['length']);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10\naabbbbaaca", "5"], ["5\naaaaa", "1"], ["20\nxxzaffeeeeddfkkkkllq", "10"]], "original": "function main(arg) {\n    var arg2 = arg.split(/\\n/g);\n\tvar honbun = arg2[1];\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\tfor(i=0;i<alphabet.length;i++){\n\t\tvar iro = alphabet.substr(i,1);\n\t\tvar regkun = new RegExp(iro+\"+\", 'g');\n\t\thonbun = honbun.replace(regkun,iro);\n\t}\n\tconsole.log(honbun.length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 205, "deobfuscated": "function main(arg) {\n  var arg2 = arg.split(/\\n/g);\n  var honbun = arg2[1];\n  var alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  for (i = 0; i < alphabet.length; i++) {\n    var iro = alphabet.substr(i, 1);\n    var regkun = new RegExp(iro + \"+\", \"g\");\n    honbun = honbun.replace(regkun, iro);\n  }\n  console.log(honbun.length);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7497765724201797, "ngram_match_score": 0.4278798257658005, "weighted_ngram_match_score": 0.6024764639149182, "syntax_match_score": 1.0, "dataflow_match_score": 0.96875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02922_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('\\x20')['map'](v=>parseInt(v,0xa));let a=xs[0x0];let b=xs[0x1];let ans=0x1;if(a>=b){ans=0x1;}else{for(let i=0x1;(a-0x1)*i+0x1<b;i++){ans+=0x1;}}console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 10", "3"], ["8 9", "2"], ["8 8", "1"]], "original": "\"use strict\"\nconst Main = (input) =>{\n\tlet xs = input.trim().split(' ').map(v=>parseInt(v,10));\n    let a = xs[0];\n    let b = xs[1];\n    let ans = 1;\n    if(a >= b){\n    ans = 1;\n    }else{ \n    \tfor(let i = 1; (a-1)*i+1 < b; i++){\n    \tans += 1;\n    \t}\n    }\n    console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 206, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\" \").map(v => parseInt(v, 10));\n  let a = xs[0];\n  let b = xs[1];\n  let ans = 1;\n  if (a >= b) {\n    ans = 1;\n  } else {\n    for (let i = 1; (a - 1) * i + 1 < b; i++) {\n      ans += 1;\n    }\n  }\n  console.log(ans);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6152526301532534, "ngram_match_score": 0.3312513502544148, "weighted_ngram_match_score": 0.4675439307670827, "syntax_match_score": 0.9253731343283582, "dataflow_match_score": 0.7368421052631579}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02946_1", "type": "JavaScript", "obfuscated": "var input='\\x0a3\\x207\\x0a';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var k=arr[0x0]['split']('\\x20')[0x0]-0x0;var x=arr[0x0]['split']('\\x20')[0x1]-0x0;var a=[];for(var i=x-k+0x1;i<x+k;i++)a['push'](i);console['log'](a['join']('\\x20'));", "test_cases": [["3 7", "5 6 7 8 9"], ["4 0", "-3 -2 -1 0 1 2 3"], ["1 100", "100"]], "original": "var input=`\n3 7\n`;\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar k=arr[0].split(\" \")[0]-0;\nvar x=arr[0].split(\" \")[1]-0;\nvar a=[];\nfor(var i=x-k+1;i<x+k;i++)a.push(i);\nconsole.log(a.join(\" \"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 207, "deobfuscated": "var input = \"\\n3 7\\n\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar k = arr[0].split(\" \")[0] - 0;\nvar x = arr[0].split(\" \")[1] - 0;\nvar a = [];\nfor (var i = x - k + 1; i < x + k; i++) {\n  a.push(i);\n}\nconsole.log(a.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5040041604745769, "ngram_match_score": 0.026067261737789418, "weighted_ngram_match_score": 0.06687245708359496, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02947_1", "type": "JavaScript", "obfuscated": "function main(input){const list=input['split']('\\x0a')['slice'](0x1)['map'](s=>Array['from'](s)['sort']()['join'](''));let totalCount=0x0;const map=new Map();for(let i=0x0;i<list['length'];i++){if(!map['has'](list[i])){map['set'](list[i],0x1);continue;}totalCount+=map['get'](list[i]);map['set'](list[i],map['get'](list[i])+0x1);}console['log'](totalCount);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\nacornistnt\npeanutbomb\nconstraint", "1"], ["2\noneplustwo\nninemodsix", "0"], ["5\nabaaaaaaaa\noneplustwo\naaaaaaaaba\ntwoplusone\naaaabaaaaa", "4"]], "original": "function main(input) {\n  const list = input.split(\"\\n\")\n    .slice(1)\n    .map(s => Array.from(s).sort().join(''))\n\n  let totalCount = 0\n  const map = new Map()\n  for (let i = 0; i < list.length; i++) {\n    if (!map.has(list[i])) {\n      map.set(list[i], 1)\n      continue;\n    }\n    totalCount += map.get(list[i])\n    map.set(list[i], map.get(list[i]) + 1)\n  }\n\n  console.log(totalCount)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 208, "deobfuscated": "function main(input) {\n  const list = input.split(\"\\n\").slice(1).map(s => Array.from(s).sort().join(\"\"));\n  let totalCount = 0;\n  const map = new Map();\n  for (let i = 0; i < list.length; i++) {\n    if (!map.has(list[i])) {\n      map.set(list[i], 1);\n      continue;\n    }\n    totalCount += map.get(list[i]);\n    map.set(list[i], map.get(list[i]) + 1);\n  }\n  console.log(totalCount);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7624649951491893, "ngram_match_score": 0.5177436350015935, "weighted_ngram_match_score": 0.5321163455951636, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.001615975993566443, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03607976236034771}}
{"filename": "p02996_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const lines=input['split']('\\x0a');const N=parseInt(lines['shift']());const tasks=[];for(let i=0x0;i<N;i++){tasks['push'](lines[i]['split']('\\x20')['map'](x=>parseInt(x)));}tasks['sort']((a,b)=>a[0x1]-b[0x1]);let result='Yes';let sum=0x0;for(let i=0x0;i<N;i++){sum+=tasks[i][0x0];if(sum>tasks[i][0x1]){result='No';break;}}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n2 4\n1 9\n1 8\n4 9\n3 12", "Yes"], ["3\n334 1000\n334 1000\n334 1000", "No"], ["30\n384 8895\n1725 9791\n170 1024\n4 11105\n2 6\n578 1815\n702 3352\n143 5141\n1420 6980\n24 1602\n849 999\n76 7586\n85 5570\n444 4991\n719 11090\n470 10708\n1137 4547\n455 9003\n110 9901\n15 8578\n368 3692\n104 1286\n3 4\n366 12143\n7 6649\n610 2374\n152 7324\n4 7042\n292 11386\n334 5720", "Yes"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = parseInt(lines.shift());\n  const tasks = []\n  for(let i=0;i<N;i++){\n    tasks.push( lines[i].split(' ').map( x => parseInt(x) ) );\n  }\n\n  tasks.sort( (a,b) => a[1]-b[1])\n\n  let result = 'Yes';\n  let sum = 0\n  for(let i=0;i<N;i++){\n    sum += tasks[i][0]\n    if(sum > tasks[i][1]){\n      result = 'No';\n      break;\n    }\n  }\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 209, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const N = parseInt(lines.shift());\n  const tasks = [];\n  for (let i = 0; i < N; i++) {\n    tasks.push(lines[i].split(\" \").map(x => parseInt(x)));\n  }\n  tasks.sort((a, b) => a[1] - b[1]);\n  let result = \"Yes\";\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    sum += tasks[i][0];\n    if (sum > tasks[i][1]) {\n      result = \"No\";\n      break;\n    }\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6137494229074629, "ngram_match_score": 0.19109889568126828, "weighted_ngram_match_score": 0.26389879594858345, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03029_1", "type": "JavaScript", "obfuscated": "(stdin=>{var lines=stdin['trim']()['split']('\\x0a');var inputs=lines['shift']()['split']('\\x20')['map'](Number);console['log'](Math['floor']((inputs[0x0]*0x3+inputs[0x1])/0x2));})(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 3", "3"], ["0 1", "0"], ["32 21", "58"]], "original": "((stdin) => {\n  var lines = stdin.trim().split('\\n');\n  var inputs = lines.shift().split(' ').map(Number);\n  console.log(Math.floor((inputs[0] * 3 + inputs[1]) / 2));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 210, "deobfuscated": "(stdin => {\n  var lines = stdin.trim().split(\"\\n\");\n  var inputs = lines.shift().split(\" \").map(Number);\n  console.log(Math.floor((inputs[0] * 3 + inputs[1]) / 2));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6950634644505826, "ngram_match_score": 0.5100323429521268, "weighted_ngram_match_score": 0.523554848183537, "syntax_match_score": 0.88, "dataflow_match_score": 0.8666666666666667}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03035_1", "type": "JavaScript", "obfuscated": "function main(input){const nums=input['split']('\\x20')['map'](num=>parseInt(num,0xa));console['log'](nums[0x0]>=0xd?nums[0x1]:nums[0x0]>=0x6?nums[0x1]/0x2:0x0);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["30 100", "100"], ["12 100", "50"], ["0 100", "0"]], "original": "function main(input) {\n  const nums = input.split(\" \").map(num => parseInt(num, 10))\n  console.log(nums[0] >= 13 ? nums[1] : nums[0] >= 6 ? nums[1] / 2 : 0)\n}\n \nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 211, "deobfuscated": "function main(input) {\n  const nums = input.split(\" \").map(num => parseInt(num, 10));\n  console.log(nums[0] >= 13 ? nums[1] : nums[0] >= 6 ? nums[1] / 2 : 0);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8931763899808182, "ngram_match_score": 0.7839306339139199, "weighted_ngram_match_score": 0.7887749260093527, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03059_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');var a=parseInt(input[0x0],0xa);var b=parseInt(input[0x1],0xa);var t=parseInt(input[0x2],0xa);console['log']('%d',Math['floor']((t+0.5)/a)*b);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 5 7", "10"], ["3 2 9", "6"], ["20 20 19", "0"]], "original": "function Main(input) {\n  input = input.split(\" \");\n  var a = parseInt(input[0], 10);\n  var b = parseInt(input[1], 10);\n  var t = parseInt(input[2], 10);\n  console.log('%d',Math.floor((t + 0.5) / a) * b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 212, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  var a = parseInt(input[0], 10);\n  var b = parseInt(input[1], 10);\n  var t = parseInt(input[2], 10);\n  console.log(\"%d\", Math.floor((t + 0.5) / a) * b);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9232660231711125, "ngram_match_score": 0.8443260247393207, "weighted_ngram_match_score": 0.8487380679451293, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03062_1", "type": "JavaScript", "obfuscated": "function main(input){const formatted_input=input['split']('\\x0a');const N=parseInt(formatted_input[0x0],0xa);const As=formatted_input[0x1]['split']('\\x20')['map'](x=>parseInt(x));dp=[];for(var i=0x0;i<N;i++){var results=[];if(i==0x0){results=[As[i],As[i]*-0x1];}else{var not_flipped=Math['max'](dp[i-0x1][0x0]+As[i],dp[i-0x1][0x1]-As[i]);var flipped=Math['max'](dp[i-0x1][0x0]-As[i],dp[i-0x1][0x1]+As[i]);results=[not_flipped,flipped];}dp['push'](results);}console['log'](dp[N-0x1][0x0]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n-10 5 -4", "19"], ["5\n10 -4 -8 -11 3", "30"], ["11\n-1000000000 1000000000 -1000000000 1000000000 -1000000000 0 1000000000 -1000000000 1000000000 -1000000000 1000000000", "10000000000"]], "original": "function main(input) {\n  const formatted_input = input.split('\\n');\n\n  const N = parseInt(formatted_input[0], 10);\n  const As = formatted_input[1].split(' ').map(x => parseInt(x));\n\n  dp = [];\n\n  for(var i=0;i<N;i++){\n    var results = [];\n    if(i==0){\n      results=[As[i], As[i]*-1]\n    }else{\n      var not_flipped = Math.max(dp[i-1][0] + As[i], dp[i-1][1] - As[i]);\n      var flipped = Math.max(dp[i-1][0] - As[i], dp[i-1][1] + As[i]);\n      results = [not_flipped, flipped]\n    }\n    dp.push(results);\n  }\n\n  //console.log(dp);\n  console.log(dp[N-1][0]);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 213, "deobfuscated": "function main(input) {\n  const formatted_input = input.split(\"\\n\");\n  const N = parseInt(formatted_input[0], 10);\n  const As = formatted_input[1].split(\" \").map(x => parseInt(x));\n  dp = [];\n  for (var i = 0; i < N; i++) {\n    var results = [];\n    if (i == 0) {\n      results = [As[i], As[i] * -1];\n    } else {\n      var not_flipped = Math.max(dp[i - 1][0] + As[i], dp[i - 1][1] - As[i]);\n      var flipped = Math.max(dp[i - 1][0] - As[i], dp[i - 1][1] + As[i]);\n      results = [not_flipped, flipped];\n    }\n    dp.push(results);\n  }\n  console.log(dp[N - 1][0]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6857415721222866, "ngram_match_score": 0.30407018069332536, "weighted_ngram_match_score": 0.4531818220815355, "syntax_match_score": 1.0, "dataflow_match_score": 0.9857142857142858}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03081_1", "type": "JavaScript", "obfuscated": "function Main(input){var ary=[];for(var i=0x0;i<input['split']('\\x0a')[0x0]['split']('\\x20')[0x0];i++){ary['push'](0x1);}var str=input['split']('\\x0a')[0x1];for(var i=0x2;i<input['split']('\\x0a')['length'];i++){var jumon=input['split']('\\x0a')[i]['split']('\\x20');var newAry=[];for(var j=0x0;j<ary['length'];j++){newAry['push'](0x0);}if(jumon[0x1]=='L'){for(var j=0x0;j<str['length'];j++){if(j!=0x0||str[j]!=jumon[0x0])newAry[str[j]==jumon[0x0]?j-0x1:j]+=ary[j];}}else{for(var j=0x0;j<str['length'];j++){if(j!=ary['length']-0x1||str[j]!=jumon[0x0])newAry[str[j]==jumon[0x0]?j+0x1:j]+=ary[j];}}ary=newAry['concat']();}var golems=0x0;for(var i of ary)golems+=i;console['log'](golems);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4\nABC\nA L\nB L\nB R\nA R", "2"], ["8 3\nAABCBDBA\nA L\nB R\nA R", "5"], ["10 15\nSNCZWRCEWB\nB R\nR R\nE R\nW R\nZ L\nS R\nQ L\nW L\nB R\nC L\nA L\nN L\nE R\nZ L\nS L", "3"]], "original": "function Main(input){\n  var ary = [];\n  for(var i=0;i<input.split(\"\\n\")[0].split(\" \")[0];i++){\n  \tary.push(1);\n  }\n  var str = input.split(\"\\n\")[1];\n  for(var i=2;i<input.split(\"\\n\").length;i++){\n  \tvar jumon = input.split(\"\\n\")[i].split(\" \");\n    var newAry = [];\n    for(var j=0;j<ary.length;j++){\n        newAry.push(0);\n    }\n    if(jumon[1]==\"L\"){\n      for(var j=0;j<str.length;j++){\n        if(j!=0||str[j]!=jumon[0])newAry[str[j]==jumon[0]?j-1:j]+=ary[j];\n      }\n    }else{\n      for(var j=0;j<str.length;j++){\n        if(j!=ary.length-1||str[j]!=jumon[0])newAry[str[j]==jumon[0]?j+1:j]+=ary[j];\n      }\n    }\n    ary=newAry.concat();\n  }\n  var golems = 0;\n  for(var i of ary)golems+=i;\n  console.log(golems);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 214, "deobfuscated": "function Main(input) {\n  var ary = [];\n  for (var i = 0; i < input.split(\"\\n\")[0].split(\" \")[0]; i++) {\n    ary.push(1);\n  }\n  var str = input.split(\"\\n\")[1];\n  for (var i = 2; i < input.split(\"\\n\").length; i++) {\n    var jumon = input.split(\"\\n\")[i].split(\" \");\n    var newAry = [];\n    for (var j = 0; j < ary.length; j++) {\n      newAry.push(0);\n    }\n    if (jumon[1] == \"L\") {\n      for (var j = 0; j < str.length; j++) {\n        if (j != 0 || str[j] != jumon[0]) {\n          newAry[str[j] == jumon[0] ? j - 1 : j] += ary[j];\n        }\n      }\n    } else {\n      for (var j = 0; j < str.length; j++) {\n        if (j != ary.length - 1 || str[j] != jumon[0]) {\n          newAry[str[j] == jumon[0] ? j + 1 : j] += ary[j];\n        }\n      }\n    }\n    ary = newAry.concat();\n  }\n  var golems = 0;\n  for (var i of ary) {\n    golems += i;\n  }\n  console.log(golems);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6152378790062816, "ngram_match_score": 0.1437468745981563, "weighted_ngram_match_score": 0.4197687439910724, "syntax_match_score": 0.8974358974358975, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03141_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){var lines=input['split']('\\x0a');var N=lines['shift']()-0x0;var ryo=new Array(N);for(var n=0x0;n<N;n++){var nums=lines[n]['split']('\\x20');ryo[n]={'taka':nums[0x0]-0x0,'aoki':nums[0x1]-0x0};ryo[n]['sa']=ryo[n]['aoki']-ryo[n]['taka'];}ryo['sort'](function(a,b){return b['sa']-a['sa'];});ryo['sort'](function(a,b){return b['taka']-a['taka'];});var koufuku=0x0;for(var n=0x0;n<N;n++){if(n%0x2==0x0){koufuku+=ryo[n]['taka'];ryo[n]['taka']=0x0;}else{koufuku-=ryo[n]['aoki'];ryo[n]['aoki']=0x0;}}console['log'](koufuku);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n10 10\n20 20\n30 30", "20"], ["3\n20 10\n20 20\n20 30", "20"], ["6\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000", "-2999999997"]], "original": "\"use strict\";\nfunction Main(input) {\n    var lines = input.split(\"\\n\");\n    var N = lines.shift() - 0;\n    var ryo = new Array(N);\n    for (var n = 0; n < N; n++) {\n        var nums = lines[n].split(\" \");\n        ryo[n] = {\n            taka : nums[0] - 0,\n            aoki : nums[1] - 0,\n        };\n        ryo[n].sa = ryo[n].aoki - ryo[n].taka;\n    }\n    ryo.sort(function(a, b) { return b.sa - a.sa; });\n    ryo.sort(function(a, b) { return b.taka - a.taka; });\n    var koufuku = 0;\n    for (var n = 0; n < N; n++) {\n        if (n % 2 == 0) {\n            koufuku += ryo[n].taka;\n            ryo[n].taka = 0;\n        } else {\n            koufuku -= ryo[n].aoki;\n            ryo[n].aoki = 0;\n        }\n    }\n    console.log(koufuku);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 215, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  var lines = input.split(\"\\n\");\n  var N = lines.shift() - 0;\n  var ryo = new Array(N);\n  for (var n = 0; n < N; n++) {\n    var nums = lines[n].split(\" \");\n    ryo[n] = {\n      taka: nums[0] - 0,\n      aoki: nums[1] - 0\n    };\n    ryo[n].sa = ryo[n].aoki - ryo[n].taka;\n  }\n  ryo.sort(function (a, b) {\n    return b.sa - a.sa;\n  });\n  ryo.sort(function (a, b) {\n    return b.taka - a.taka;\n  });\n  var koufuku = 0;\n  for (var n = 0; n < N; n++) {\n    if (n % 2 == 0) {\n      koufuku += ryo[n].taka;\n      ryo[n].taka = 0;\n    } else {\n      koufuku -= ryo[n].aoki;\n      ryo[n].aoki = 0;\n    }\n  }\n  console.log(koufuku);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9276335513734877, "ngram_match_score": 0.8523904811817522, "weighted_ngram_match_score": 0.8581437243121983, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03150_1", "type": "JavaScript", "obfuscated": "'use strict';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{let word=line;let arr=['k','e','y','e','n','c','e'];let keyence='keyence';if(word['indexOf']('keyence')!=-0x1){console['log']('YES');return;}let str='';let ans=![];for(let i=0x0;i<0x6;i++){str+=arr['shift']();let tmp=keyence['slice'](i+0x1);if(word['indexOf'](str)!=-0x1&&word['indexOf'](tmp)!=-0x1){ans=!![];break;}}if(ans)console['log']('YES');else console['log']('NO');});", "test_cases": [["keyofscience", "YES"], ["mpyszsbznf", "NO"], ["ashlfyha", "NO"], ["keyence", "YES"]], "original": "\"use strict\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\n\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on(\"line\", line => {\n  let word = line;\n  let arr = [\"k\", \"e\", \"y\", \"e\", \"n\", \"c\", \"e\"];\n  let keyence = \"keyence\";\n\n  if (word.indexOf(\"keyence\") != -1) {\n    console.log(\"YES\");\n    return;\n  }\n\n  let str = \"\";\n  let ans = false;\n  for (let i = 0; i < 6; i++) {\n    str += arr.shift();\n    let tmp = keyence.slice(i + 1);\n    if (word.indexOf(str) != -1 && word.indexOf(tmp) != -1) {\n     ans = true;\n     break;\n    }\n  }\n\n  if (ans) console.log(\"YES\");\n  else console.log(\"NO\");\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 216, "deobfuscated": "'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  let word = line;\n  let arr = [\"k\", \"e\", \"y\", \"e\", \"n\", \"c\", \"e\"];\n  let keyence = \"keyence\";\n  if (word.indexOf(\"keyence\") != -1) {\n    console.log(\"YES\");\n    return;\n  }\n  let str = \"\";\n  let ans = false;\n  for (let i = 0; i < 6; i++) {\n    str += arr.shift();\n    let tmp = keyence.slice(i + 1);\n    if (word.indexOf(str) != -1 && word.indexOf(tmp) != -1) {\n      ans = true;\n      break;\n    }\n  }\n  if (ans) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9451361483497216, "ngram_match_score": 0.9033576998748133, "weighted_ngram_match_score": 0.9455629619001416, "syntax_match_score": 0.9316239316239316, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03162_1", "type": "JavaScript", "obfuscated": "function main(input){let tmp=input['split']('\\x0a');let vacations=[];for(let i=0x1;i<tmp['length'];i++){let vacation=tmp[i]['split']('\\x20')['map'](element=>parseInt(element,0xa));vacations['push'](vacation);}let dp=[0x0,0x0,0x0];for(let day=0x0;day<vacations['length'];day++){let vacation=vacations[day];let new_dp=[0x0,0x0,0x0];for(let i=0x0;i<0x3;i++){for(let j=0x0;j<0x3;j++){if(i!==j){new_dp[j]=Math['max'](new_dp[j],dp[i]+vacation[j]);}}}dp=new_dp;}console['log'](Math['max'](dp[0x0],dp[0x1],dp[0x2]));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n10 40 70\n20 50 80\n30 60 90", "210"], ["1\n100 10 1", "100"], ["7\n6 7 8\n8 8 3\n2 5 2\n7 8 6\n4 6 8\n2 3 4\n7 5 1", "46"]], "original": "function main(input) {\n  let tmp = input.split(\"\\n\");\n  let vacations = [];\n  for (let i = 1; i < tmp.length; i++ ){\n    let vacation = tmp[i].split(\" \").map(element => parseInt(element, 10));\n    vacations.push(vacation);\n  }\n  let dp = [0, 0, 0];\n  for (let day = 0; day < vacations.length; day++) {\n    let vacation = vacations[day];\n    let new_dp = [0, 0, 0];\n    for (let i = 0; i < 3; i++) {\n      for(let j = 0; j < 3; j++) {\n        if (i !== j) {\n           new_dp[j] = Math.max(new_dp[j], dp[i] + vacation[j]);\n        }\n      }\n    }\n    dp = new_dp;\n  }\n  console.log(Math.max(dp[0], dp[1], dp[2]));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 217, "deobfuscated": "function main(input) {\n  let tmp = input.split(\"\\n\");\n  let vacations = [];\n  for (let i = 1; i < tmp.length; i++) {\n    let vacation = tmp[i].split(\" \").map(element => parseInt(element, 10));\n    vacations.push(vacation);\n  }\n  let dp = [0, 0, 0];\n  for (let day = 0; day < vacations.length; day++) {\n    let vacation = vacations[day];\n    let new_dp = [0, 0, 0];\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < 3; j++) {\n        if (i !== j) {\n          new_dp[j] = Math.max(new_dp[j], dp[i] + vacation[j]);\n        }\n      }\n    }\n    dp = new_dp;\n  }\n  console.log(Math.max(dp[0], dp[1], dp[2]));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9674584254037539, "ngram_match_score": 0.9290952763452945, "weighted_ngram_match_score": 0.9407384252697211, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03206_1", "type": "JavaScript", "obfuscated": "'use strict';const i=require('fs')['readFileSync']('/dev/stdin','utf8');let r='Christmas\\x20';switch(i){case'22':r=r+'Eve\\x20Eve\\x20Eve';break;case'23':r=r+'Eve\\x20Eve';break;case'24':r=r+'Eve';break;case'25':r=r;break;}console['log'](r);", "test_cases": [["25", "Christmas"], ["22", "Christmas Eve Eve Eve"]], "original": "'use strict'\nconst i = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet r = 'Christmas ';\nswitch (i) {\n    case '22':\n        r = r + 'Eve Eve Eve';\n        break\n    case '23':\n        r = r + 'Eve Eve';\n        break\n    case '24':\n        r = r + 'Eve'\n        break\n    case '25':\n        r = r;\n        break\n}\nconsole.log(r);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 218, "deobfuscated": "'use strict';\n\nconst i = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet r = \"Christmas \";\nswitch (i) {\n  case \"22\":\n    r = r + \"Eve Eve Eve\";\n    break;\n  case \"23\":\n    r = r + \"Eve Eve\";\n    break;\n  case \"24\":\n    r = r + \"Eve\";\n    break;\n  case \"25\":\n    r = r;\n    break;\n}\nconsole.log(r);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6831260265523462, "ngram_match_score": 0.3676482869035041, "weighted_ngram_match_score": 0.3648558193058809, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03210_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(INPUT){const N=INPUT['split']('\\x0a')[0x0];if(N==0x7||N==0x5||N==0x3){console['log']('YES');}else{console['log']('NO');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5", "YES"], ["6", "NO"]], "original": "'use strict';\n\nfunction Main(INPUT) {\n    const N = INPUT.split(\"\\n\")[0];\n    if (N == 7 || N == 5 || N == 3) {\n        console.log(\"YES\");\n    } else {\n        console.log(\"NO\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 219, "deobfuscated": "'use strict';\n\nfunction Main(INPUT) {\n  const N = INPUT.split(\"\\n\")[0];\n  if (N == 7 || N == 5 || N == 3) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03239_1", "type": "JavaScript", "obfuscated": "var lines=[];var result=Infinity;var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]['split']('\\x20')[0x0]);var T=Number(lines[0x0]['split']('\\x20')[0x1]);lines['shift']();var array=lines['map'](value=>value['split']('\\x20')['map'](value=>Number(value)));for(var i of array){if(i[0x1]<=T){result=Math['min'](result,i[0x0]);}}result!==Infinity?console['log'](result):console['log']('TLE');});", "test_cases": [["3 70\n7 60\n1 80\n4 50", "4"], ["4 3\n1 1000\n2 4\n3 1000\n4 500", "TLE"], ["5 9\n25 8\n5 9\n4 10\n1000 1000\n6 1", "5"]], "original": "var lines = []; var result = Infinity;\nvar readline = require('readline');\n\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var T = Number(lines[0].split(\" \")[1]);\n\n    lines.shift();\n\n    var array = lines.map(value => value.split(\" \").map(value => Number(value)));\n\n    for (var i of array) {\n        if (i[1] <= T) { result = Math.min(result, i[0]); }\n    }\n    result !== Infinity ? console.log(result): console.log(\"TLE\");\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 220, "deobfuscated": "var lines = [];\nvar result = Infinity;\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0].split(\" \")[0]);\n  var T = Number(lines[0].split(\" \")[1]);\n  lines.shift();\n  var array = lines.map(value => value.split(\" \").map(value => Number(value)));\n  for (var i of array) {\n    if (i[1] <= T) {\n      result = Math.min(result, i[0]);\n    }\n  }\n  if (result !== Infinity) {\n    console.log(result);\n  } else {\n    console.log(\"TLE\");\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.862992900005429, "ngram_match_score": 0.735172610143828, "weighted_ngram_match_score": 0.793722066800965, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.2142857142857142, "length_score": -0.2142857142857142, "increase_maintainability": -0.0548792744977985, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.009345794392523255, "new_decrease_halstead_effort": -0.11727014342864983}}
{"filename": "p03308_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const params=input['split']('\\x0a');const n=Number(params[0x0]);let max=0x0;let min=Math['pow'](0xa,0xa);params[0x1]['split']('\\x20')['forEach'](val=>{max=Math['max'](max,Number(val));min=Math['min'](min,Number(val));});console['log'](max-min);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 4 6 3", "5"], ["2\n1000000000 1", "999999999"], ["5\n1 1 1 1 1", "0"]], "original": "// https://atcoder.jp/contests/abc102/tasks/abc102_b\n\"use strict\"\nfunction Main(input) {\n  const params = input.split('\\n')\n  const n = Number(params[0]);\n  let max = 0;\n  let min = Math.pow(10, 10);\n  params[1].split(' ').forEach(val => {\n    max = Math.max(max, Number(val));\n    min = Math.min(min, Number(val));\n  });\n  console.log(max -　min);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 221, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const params = input.split(\"\\n\");\n  const n = Number(params[0]);\n  let max = 0;\n  let min = Math.pow(10, 10);\n  params[1].split(\" \").forEach(val => {\n    max = Math.max(max, Number(val));\n    min = Math.min(min, Number(val));\n  });\n  console.log(max - min);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.855670572705042, "ngram_match_score": 0.7054024631758244, "weighted_ngram_match_score": 0.7172798276443434, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03325_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const a=s['split']('\\x0a')[0x1]['split']('\\x20')['map'](n=>Number(n));let ans=0x0;for(let n of a){while(n%0x2===0x0){n=n/0x2;ans+=0x1;}}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n5 2 4", "3"], ["4\n631 577 243 199", "0"], ["10\n2184 2126 1721 1800 1024 2528 3360 1945 1280 1776", "39"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const a = s.split('\\n')[1].split(' ').map(n => Number(n));\n\n  let ans = 0;\n\n  for (let n of a) {\n    while (n % 2 === 0) {\n      n = n / 2;\n      ans += 1;\n    }\n  }\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 222, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const a = s.split(\"\\n\")[1].split(\" \").map(n => Number(n));\n  let ans = 0;\n  for (let n of a) {\n    while (n % 2 === 0) {\n      n = n / 2;\n      ans += 1;\n    }\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8433389275717097, "ngram_match_score": 0.8716066325886732, "weighted_ngram_match_score": 0.8767490776981656, "syntax_match_score": 1.0, "dataflow_match_score": 0.625}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03352_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const x=Number(s);const nums=[...Array(0x1f)]['map']((x,i)=>i+0x1);nums['shift']();const max_ary=[0x1];for(let i=0x0;i<nums['length'];i++){let j=0x2;let n=nums[i];let max=Math['pow'](n,j);if(max>x)continue;while(max<=x){j+=0x1;max=Math['pow'](n,j);}max=Math['pow'](n,j-0x1);max_ary['push'](max);}const ans=Math['max'](...max_ary);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "9"], ["1", "1"], ["999", "961"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const x = Number(s);\n  const nums = [...Array(31)].map((x, i) => i + 1);\n  nums.shift();\n  const max_ary = [1];\n\n  for (let i = 0; i < nums.length; i++) {\n    let j = 2;\n    let n = nums[i];\n    let max = Math.pow(n, j);\n    if (max > x) continue;\n    while (max <= x) {\n      j += 1;\n      max = Math.pow(n, j);\n    }\n    max = Math.pow(n, j - 1);\n    max_ary.push(max);\n  }\n\n  const ans = Math.max(...max_ary);\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 223, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const x = Number(s);\n  const nums = [...Array(31)].map((x, i) => i + 1);\n  nums.shift();\n  const max_ary = [1];\n  for (let i = 0; i < nums.length; i++) {\n    let j = 2;\n    let n = nums[i];\n    let max = Math.pow(n, j);\n    if (max > x) {\n      continue;\n    }\n    while (max <= x) {\n      j += 1;\n      max = Math.pow(n, j);\n    }\n    max = Math.pow(n, j - 1);\n    max_ary.push(max);\n  }\n  const ans = Math.max(...max_ary);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.952445190738469, "ngram_match_score": 0.9248331822739838, "weighted_ngram_match_score": 0.9494637097121504, "syntax_match_score": 0.9354838709677419, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0013969593999032526, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.028704331192462185}}
{"filename": "p03434_1", "type": "JavaScript", "obfuscated": "function main(input){const args=input['split']('\\x0a');const N=parseInt(args[0x0],0xa);const sorted=args[0x1]['split']('\\x20')['map'](v=>parseInt(v))['sort']((a,b)=>b-a);var alice=0x0;var bob=0x0;sorted['forEach']((v,i)=>{if((i+0x1)%0x2==0x0){bob+=v;}else{alice+=v;}});console['log'](alice-bob);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n3 1", "2"], ["3\n2 7 4", "5"], ["4\n20 18 2 18", "18"]], "original": "function main(input) {\n  const args = input.split('\\n');\n  const N = parseInt(args[0], 10);\n  const sorted = args[1].split(' ').map(v => parseInt(v)).sort((a, b) => b - a);\n  var alice = 0;\n  var bob = 0;\n  \n  sorted.forEach((v, i) => {\n    if ((i + 1) % 2 == 0) {\n      bob += v;\n    } else {\n      alice += v;\n    }\n  });\n  console.log(alice - bob);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 224, "deobfuscated": "function main(input) {\n  const args = input.split(\"\\n\");\n  const N = parseInt(args[0], 10);\n  const sorted = args[1].split(\" \").map(v => parseInt(v)).sort((a, b) => b - a);\n  var alice = 0;\n  var bob = 0;\n  sorted.forEach((v, i) => {\n    if ((i + 1) % 2 == 0) {\n      bob += v;\n    } else {\n      alice += v;\n    }\n  });\n  console.log(alice - bob);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8909194583265223, "ngram_match_score": 0.8661414259615641, "weighted_ngram_match_score": 0.8725364073445251, "syntax_match_score": 1.0, "dataflow_match_score": 0.825}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03479_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var nk=toIntArr(input[0x0]['split']('\\x20'));var x=nk[0x0];var y=nk[0x1];var a=y/x;var temp=0x1;var ans=0x0;while(temp<=a){temp*=0x2;ans++;}console['log'](ans);}", "test_cases": [["3 20", "3"], ["25 100", "3"], ["314159265 358979323846264338", "31"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar nk = toIntArr(input[0].split(' '));\n\tvar x = nk[0];\n\tvar y = nk[1];\n\tvar a = y/x;\n  \tvar temp = 1;\n \tvar ans = 0;\n    while(temp<=a){\n    \ttemp *= 2;\n      \tans++;\n      //console.log(ans,temp)\n    }\n\n\tconsole.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 225, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var nk = toIntArr(input[0].split(\" \"));\n  var x = nk[0];\n  var y = nk[1];\n  var a = y / x;\n  var temp = 1;\n  var ans = 0;\n  while (temp <= a) {\n    temp *= 2;\n    ans++;\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6273537223331846, "ngram_match_score": 0.1990299335019054, "weighted_ngram_match_score": 0.41472669252551114, "syntax_match_score": 0.907563025210084, "dataflow_match_score": 0.9880952380952381}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00048270337079447945, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.01298701298701288, "new_decrease_halstead_effort": -0.012987012987013102}}
{"filename": "p03493_1", "type": "JavaScript", "obfuscated": "function Main(input){var args=input['split']('\\x20');var num=parseInt(args[0x0],0xa);var str=num['toString'](0xa);var count=0x0;for(var i=0x0;i<str['length'];i++){if(str[i]=='1'){count+=0x1;}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["101", "2"], ["000", "0"]], "original": "function Main(input){\n  \tvar args = input.split(\" \");\n  \tvar num = parseInt(args[0], 10); // 10進数\n\tvar str = num.toString(10);\n  \tvar count = 0;\n\tfor(var i=0; i<str.length; i++){\n      if(str[i]==\"1\"){\n        count += 1;\n      }\n    }\n  \tconsole.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 226, "deobfuscated": "function Main(input) {\n  var args = input.split(\" \");\n  var num = parseInt(args[0], 10);\n  var str = num.toString(10);\n  var count = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] == \"1\") {\n      count += 1;\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7958337464993542, "ngram_match_score": 0.5162612566061221, "weighted_ngram_match_score": 0.6670737293912947, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03611_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const a=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n))['sort']((a,b)=>a-b);const set=new Set();let max=0x0;for(let i=0x0;i<N;i++){let cnt=0x0;if(set['has'](a[i])){continue;}set['add'](a[i]);for(let j=0x0;j<N;j++){if(Math['abs'](a[j]-a[i])<=0x1){cnt++;}}if(cnt>max){max=cnt;}}console['log'](max);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\n3 1 4 1 5 9 2", "4"], ["10\n0 1 2 3 4 5 6 7 8 9", "3"], ["1\n99999", "1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const a = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>a-b);\n    \n    const set = new Set();\n    \n    let max = 0;\n    \n    for(let i=0; i<N; i++) {\n        let cnt = 0;\n        \n        if(set.has(a[i])) {\n            continue;\n        }\n        \n        set.add(a[i]);\n        \n        for(let j=0; j<N; j++) {\n            if(Math.abs(a[j] - a[i]) <= 1) {\n                cnt++;\n            }\n        }\n        \n        if(cnt > max) {\n            max = cnt;\n        }\n    }\n    \n    console.log(max);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 227, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const a = arg[1].split(\" \").map(n => parseInt(n)).sort((a, b) => a - b);\n  const set = new Set();\n  let max = 0;\n  for (let i = 0; i < N; i++) {\n    let cnt = 0;\n    if (set.has(a[i])) {\n      continue;\n    }\n    set.add(a[i]);\n    for (let j = 0; j < N; j++) {\n      if (Math.abs(a[j] - a[i]) <= 1) {\n        cnt++;\n      }\n    }\n    if (cnt > max) {\n      max = cnt;\n    }\n  }\n  console.log(max);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7887212349905549, "ngram_match_score": 0.4985461270254088, "weighted_ngram_match_score": 0.6563388129368107, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03636_1", "type": "JavaScript", "obfuscated": "function Main(input){input=String(input);var len=input['length'];var first=input['substring'](0x0,0x1);if(len<0x4){var mid=0x1;}else{var mid=len-0x2;}var last=input['substring'](len-0x1,len);console['log']('%s',first+String(mid)+last);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["internationalization", "i18n"], ["smiles", "s4s"], ["xyz", "x1z"]], "original": "function Main(input){\n    input = String(input);\n\n    var len = input.length;\n    var first = input.substring(0,1);\n\n    if(len < 4){\n        var mid = 1;\n    }else{\n        var mid = len - 2;\n    }\n\n    var last = input.substring(len - 1, len);\n\n    console.log('%s', first + String(mid) + last);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 228, "deobfuscated": "function Main(input) {\n  input = String(input);\n  var len = input.length;\n  var first = input.substring(0, 1);\n  if (len < 4) {\n    var mid = 1;\n  } else {\n    var mid = len - 2;\n  }\n  var last = input.substring(len - 1, len);\n  console.log(\"%s\", first + String(mid) + last);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8343556282985739, "ngram_match_score": 0.6200824175304611, "weighted_ngram_match_score": 0.7173400956638346, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03834_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('ascii');var input_stdin='';var input_stdin_array='';var input_currentline=0x0;process['stdin']['on']('data',function(data){input_stdin+=data;});process['stdin']['on']('end',function(){input_stdin_array=input_stdin['split']('\\x0a');main();});function readLine(){return input_stdin_array[input_currentline++];}function main(){var s=readLine();s=s['split'](',');s=s['join']('\\x20');process['stdout']['write'](s);}", "test_cases": [["happy,newyear,enjoy", "happy newyear enjoy"], ["haiku,atcoder,tasks", "haiku atcoder tasks"], ["abcde,fghihgf,edcba", "abcde fghihgf edcba"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n\nfunction main() {\n    var s = readLine();\n    s = s.split(\",\");\n    s = s.join(\" \");\n    \n    process.stdout.write(s);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 229, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\nprocess.stdin.on(\"data\", function (data) {\n  input_stdin += data;\n});\nprocess.stdin.on(\"end\", function () {\n  input_stdin_array = input_stdin.split(\"\\n\");\n  main();\n});\nfunction readLine() {\n  return input_stdin_array[input_currentline++];\n}\nfunction main() {\n  var s = readLine();\n  s = s.split(\",\");\n  s = s.join(\" \");\n  process.stdout.write(s);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8744395663736617, "ngram_match_score": 0.7454555685346556, "weighted_ngram_match_score": 0.7523026969599914, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04029_1", "type": "JavaScript", "obfuscated": "function main(input){const n=parseInt(input,0xa);let sum=0x0;for(let i=0x1;i<=n;i++){sum+=i;}console['log'](sum);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "6"], ["10", "55"], ["1", "1"]], "original": "function main(input) {\n  const n = parseInt(input, 10);\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 230, "deobfuscated": "function main(input) {\n  const n = parseInt(input, 10);\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9662864897261421, "ngram_match_score": 0.9297121915433835, "weighted_ngram_match_score": 0.9354337673611848, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00002_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var nums=chunk['trim']()['split']('\\x0a');function digit(e){var a=e['split']('\\x20');var wa=parseInt(a[0x0])+parseInt(a[0x1]);return wa['toString']()['length'];}console['log'](nums['map'](digit)['join']('\\x0a'));});", "test_cases": [["5 7\n1 99\n1000 999", "2\n3\n4"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on(\"data\",function(chunk){\n   var nums=chunk.trim().split(\"\\n\");\n   function digit (e){\n       var a=e.split(\" \");\n       var wa = parseInt(a[0]) + parseInt(a[1]);\n       return  wa.toString().length;\n       }\n   console.log(nums.map(digit).join(\"\\n\"));\n   \n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 231, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var nums = chunk.trim().split(\"\\n\");\n  function digit(e) {\n    var a = e.split(\" \");\n    var wa = parseInt(a[0]) + parseInt(a[1]);\n    return wa.toString().length;\n  }\n  console.log(nums.map(digit).join(\"\\n\"));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7448333334346442, "ngram_match_score": 0.4082869594948876, "weighted_ngram_match_score": 0.5710463742436894, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02255_1", "type": "JavaScript", "obfuscated": "function main(lines){const n=lines['split']('\\x0a')[0x0];const An=lines['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);console['log'](An['join']('\\x20'));for(let i=0x1;i<n;i++){value=An[i];let j=i-0x1;while(j>=0x0&&value<An[j]){An[j+0x1]=An[j];j--;}An[j+0x1]=value;console['log'](An['join']('\\x20'));}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n5 2 4 6 1 3", "5 2 4 6 1 3\n2 5 4 6 1 3\n2 4 5 6 1 3\n2 4 5 6 1 3\n1 2 4 5 6 3\n1 2 3 4 5 6"], ["3\n1 2 3", "1 2 3\n1 2 3\n1 2 3"]], "original": "function main(lines) {\n    const n = lines.split('\\n')[0]\n    const An = lines.split('\\n')[1].split(' ').map(Number)\n    // 初期の配列\n    console.log(An.join(' '))\n\n    for(let i=1; i<n; i++){\n        value = An[i]\n        let j = i - 1\n        while(j>=0 && value<An[j]){\n            An[j+1] = An[j]\n            j--\n        }\n\n        An[j+1] = value\n\n        console.log(An.join(' '))\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 232, "deobfuscated": "function main(lines) {\n  const n = lines.split(\"\\n\")[0];\n  const An = lines.split(\"\\n\")[1].split(\" \").map(Number);\n  console.log(An.join(\" \"));\n  for (let i = 1; i < n; i++) {\n    value = An[i];\n    let j = i - 1;\n    while (j >= 0 && value < An[j]) {\n      An[j + 1] = An[j];\n      j--;\n    }\n    An[j + 1] = value;\n    console.log(An.join(\" \"));\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.589894258965093, "ngram_match_score": 0.17879536949607333, "weighted_ngram_match_score": 0.2489634845461167, "syntax_match_score": 1.0, "dataflow_match_score": 0.9318181818181818}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02270_1", "type": "JavaScript", "obfuscated": "(function main(){let lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');let [n,k]=lines['shift']()['split']('\\x20')['map'](Number);let w=lines['map'](Number);const canAllStack=p=>{let cnt=0x0,sum=0x0;for(let i=0x0;i<k;i++){for(sum=0x0;sum+w[cnt]<=p;){sum+=w[cnt++];if(cnt===n)return n;}}return cnt;};let mid,left=0x0,right=0x3b9aca00;while(right-left>0x1){mid=(right+left)/0x2;if(canAllStack(mid)>=n)right=mid;else left=mid;}console['log'](Math['floor'](right));}());", "test_cases": [["5 3\n8\n1\n7\n3\n9", "10"], ["4 2\n1\n2\n2\n6", "6"]], "original": "(function main(){\n  let lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\");\n  let [n, k] = lines.shift().split(' ').map(Number);\n  let w = lines.map(Number);\n\n  const canAllStack = (p) => {\n    let cnt = 0, sum = 0;\n    for (let i = 0; i < k; i++) {\n      for (sum = 0; sum + w[cnt] <= p;) {\n        sum += w[cnt++]\n        if (cnt === n) return n;\n      }\n    }\n    return cnt;\n  };\n\n  let mid, left = 0, right = 1e9;\n  while (right - left > 1) {\n    mid = (right + left) / 2;\n    if (canAllStack(mid) >= n) right = mid;\n    else left = mid;\n  }\n  console.log(Math.floor(right));\n})();\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 233, "deobfuscated": "(function main() {\n  let lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  let [n, k] = lines.shift().split(\" \").map(Number);\n  let w = lines.map(Number);\n  const canAllStack = p => {\n    let cnt = 0;\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n      for (sum = 0; sum + w[cnt] <= p;) {\n        sum += w[cnt++];\n        if (cnt === n) {\n          return n;\n        }\n      }\n    }\n    return cnt;\n  };\n  let mid;\n  let left = 0;\n  let right = 1000000000;\n  while (right - left > 1) {\n    mid = (right + left) / 2;\n    if (canAllStack(mid) >= n) {\n      right = mid;\n    } else {\n      left = mid;\n    }\n  }\n  console.log(Math.floor(right));\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7527770638827215, "ngram_match_score": 0.6216508930734075, "weighted_ngram_match_score": 0.6922426275068944, "syntax_match_score": 0.7924528301886793, "dataflow_match_score": 0.9047619047619048}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0007944135377189188, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.022471910112359605, "new_decrease_halstead_effort": -0.022471910112359605}}
{"filename": "p02408_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){var lines=stdin['toString']()['split']('\\x0a');var result=function(data){return new Deck()['filter'](function(v){return this['indexOf'](v)===-0x1;},data)['join']('\\x0a');function Deck(){var deck=[];['S','H','C','D']['forEach'](function(v){for(var i=0x0;i<0xd;i++)deck['push']([v,i+0x1]['join']('\\x20'));});return deck;}}(lines['slice'](0x0,lines['shift']()));if(result['length']!==0x0)console['log'](result);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["47\nS 10\nS 11\nS 12\nS 13\nH 1\nH 2\nS 6\nS 7\nS 8\nS 9\nH 6\nH 8\nH 9\nH 10\nH 11\nH 4\nH 5\nS 2\nS 3\nS 4\nS 5\nH 12\nH 13\nC 1\nC 2\nD 1\nD 2\nD 3\nD 4\nD 5\nD 6\nD 7\nC 3\nC 4\nC 5\nC 6\nC 7\nC 8\nC 9\nC 10\nC 11\nC 13\nD 9\nD 10\nD 11\nD 12\nD 13", "S 1\nH 3\nH 7\nC 12\nD 8"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString().split('\\n');\n  var result = (function(data) {\n    return new Deck().filter(function(v) {\n      return this.indexOf(v) === -1;\n    },data).join('\\n');\n\n    function Deck() {\n      var deck = [];\n      ['S','H','C','D'].forEach(function(v) { \n        for (var i = 0; i < 13;i++)\n          deck.push([v,i + 1].join(' '));\n      });\n      return deck;\n    }\n  }(lines.slice(0,lines.shift())\n    ));\n\n  if(result.length !== 0) console.log(result);\n  \n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 234, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  var lines = stdin.toString().split(\"\\n\");\n  var result = function (data) {\n    return new Deck().filter(function (v) {\n      return this.indexOf(v) === -1;\n    }, data).join(\"\\n\");\n    function Deck() {\n      var deck = [];\n      [\"S\", \"H\", \"C\", \"D\"].forEach(function (v) {\n        for (var i = 0; i < 13; i++) {\n          deck.push([v, i + 1].join(\" \"));\n        }\n      });\n      return deck;\n    }\n  }(lines.slice(0, lines.shift()));\n  if (result.length !== 0) {\n    console.log(result);\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5911356685478901, "ngram_match_score": 0.34215675840487525, "weighted_ngram_match_score": 0.4535421382050437, "syntax_match_score": 0.7961165048543689, "dataflow_match_score": 0.7727272727272727}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02547_1", "type": "JavaScript", "obfuscated": "let lines=[];let reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){lines['push'](line);});reader['on']('close',function(){let d1=[];let d2=[];const n=lines[0x0];let zorome='No';for(let i=0x1;i<n;i++){d1['push'](lines[i]['split']('\\x20')[0x0]);d2['push'](lines[i]['split']('\\x20')[0x1]);}for(let i=0x0;i<n-0x2;i++){if(d1[i]==d2[i]){if(d1[i+0x1]==d2[i+0x1]){if(d1[i+0x2]==d2[i+0x2]){zorome='Yes';break;}}}}console['log'](zorome);});", "test_cases": [["5\n1 2\n6 6\n4 4\n3 3\n3 2", "Yes"], ["5\n1 1\n2 2\n3 4\n5 5\n6 6", "No"], ["6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "Yes"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// 標準入力の読み込み\nreader.on('line', function(line) {\n    lines.push(line);\n});\n\nreader.on('close', function() {\n    let d1 = [];\n    let d2 = [];\n    // 処理の記述\n    const n = lines[0];\n    \n    let zorome = 'No';\n    for (let i = 1; i < n; i++) {\n        d1.push(lines[i].split(' ')[0]);\n        d2.push(lines[i].split(' ')[1]);\n    }\n    for (let i = 0; i < n - 2; i++) {\n        if (d1[i] == d2[i]) {\n            if (d1[i+1] == d2[i+1]) {\n                if (d1[i+2] == d2[i+2]) {\n                    zorome = 'Yes';\n                    break;\n                }\n            }\n        }\n\n    }\n\n    // 表示\n    console.log(zorome);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 235, "deobfuscated": "let lines = [];\nlet reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  lines.push(line);\n});\nreader.on(\"close\", function () {\n  let d1 = [];\n  let d2 = [];\n  const n = lines[0];\n  let zorome = \"No\";\n  for (let i = 1; i < n; i++) {\n    d1.push(lines[i].split(\" \")[0]);\n    d2.push(lines[i].split(\" \")[1]);\n  }\n  for (let i = 0; i < n - 2; i++) {\n    if (d1[i] == d2[i]) {\n      if (d1[i + 1] == d2[i + 1]) {\n        if (d1[i + 2] == d2[i + 2]) {\n          zorome = \"Yes\";\n          break;\n        }\n      }\n    }\n  }\n  console.log(zorome);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7871182056291184, "ngram_match_score": 0.5657216437093304, "weighted_ngram_match_score": 0.6027511788071431, "syntax_match_score": 1.0, "dataflow_match_score": 0.98}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02629_1", "type": "JavaScript", "obfuscated": "function Main(inputs){const inputline=inputs['split']('\\x0a')['map'](x=>parseInt(x,0xa));const line=inputline[0x0];function base26(number){let remainder26=number%0x1a;let division26=Math['floor'](number/0x1a);let output=remainder26!=0x0?String['fromCharCode'](0x40+remainder26):(--division26,'Z');return output=division26!=0x0?base26(division26)+output:output;}console['log'](base26(line)['toLowerCase']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2", "b"], ["27", "aa"], ["123456789", "jjddja"]], "original": "function Main(inputs) {\n\tconst inputline = inputs.split(\"\\n\").map(x => parseInt(x, 10));\n  \tconst line = inputline[0];\n  \n  \tfunction base26(number) {\n    \tlet remainder26 = number % 26;\n    \tlet division26 = Math.floor(number / 26) ;\n    \tlet output = (remainder26 != 0) ? String.fromCharCode(64 + remainder26) : (--division26, 'Z');\n      \treturn output = (division26 != 0) ? base26(division26) + output : output;\n\t}\n  \n  \tconsole.log(base26(line).toLowerCase());\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 236, "deobfuscated": "function Main(inputs) {\n  const inputline = inputs.split(\"\\n\").map(x => parseInt(x, 10));\n  const line = inputline[0];\n  function base26(number) {\n    let remainder26 = number % 26;\n    let division26 = Math.floor(number / 26);\n    let output = remainder26 != 0 ? String.fromCharCode(64 + remainder26) : (--division26, \"Z\");\n    return output = division26 != 0 ? base26(division26) + output : output;\n  }\n  console.log(base26(line).toLowerCase());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8233926959914077, "ngram_match_score": 0.7448749500319769, "weighted_ngram_match_score": 0.7530609132987333, "syntax_match_score": 0.8194444444444444, "dataflow_match_score": 0.9761904761904762}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02659_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var A=Number(input[0x0]['split']('\\x20')[0x0]);var B=Number(input[0x0]['split']('\\x20')[0x1]);var ans=BigInt(Math['floor'](A*B));var ans=ans['toString']();console['log']('%s',ans);return ans;}function debug(n){var input=document['getElementById']('input'+n)['value'];var ans=Main(input);var result='WA';if(ans==document['getElementById']('output'+n)['value']['split']('\\x0a')[0x0]){result='AC';}document['getElementById']('result'+n)['innerHTML']=result;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["198 1.10", "217"], ["1 0.01", "0"], ["1000000000000000 9.99", "9990000000000000"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var A = Number(input[0].split(\" \")[0]);\n  var B = Number(input[0].split(\" \")[1]);\n  var ans = BigInt(Math.floor(A * B));\n  var ans = ans.toString();\n\n\n  console.log('%s', ans);\n  return ans;\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 237, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var A = Number(input[0].split(\" \")[0]);\n  var B = Number(input[0].split(\" \")[1]);\n  var ans = BigInt(Math.floor(A * B));\n  var ans = ans.toString();\n  console.log(\"%s\", ans);\n  return ans;\n}\nfunction debug(n) {\n  var input = document.getElementById(\"input\" + n).value;\n  var ans = Main(input);\n  var result = \"WA\";\n  if (ans == document.getElementById(\"output\" + n).value.split(\"\\n\")[0]) {\n    result = \"AC\";\n  }\n  document.getElementById(\"result\" + n).innerHTML = result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7913007634472022, "ngram_match_score": 0.47758421837200465, "weighted_ngram_match_score": 0.6876188354168045, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02711_1", "type": "JavaScript", "obfuscated": "const Main=input=>{const tmp=input['trim']()['split']('');let result='';if(tmp['indexOf']('7')===-0x1){result='No';}else{result='Yes';}console['log'](result);return result;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["117", "Yes"], ["123", "No"], ["777", "Yes"]], "original": "const Main = (input) => {\n  const tmp = input.trim().split('')\n\n  let result = ''\n\n  if (tmp.indexOf('7') === -1) {\n    result = 'No'\n  } else {\n    result = 'Yes'\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 238, "deobfuscated": "const Main = input => {\n  const tmp = input.trim().split(\"\");\n  let result = \"\";\n  if (tmp.indexOf(\"7\") === -1) {\n    result = \"No\";\n  } else {\n    result = \"Yes\";\n  }\n  console.log(result);\n  return result;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5543916230761071, "ngram_match_score": 0.37684787447900675, "weighted_ngram_match_score": 0.39330328805715076, "syntax_match_score": 0.9019607843137255, "dataflow_match_score": 0.5454545454545454}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02718_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const n=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);const m=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);let a=[];let sum=0x0;for(let index=0x0;index<n;index++){a[index]=input['split']('\\x0a')[0x1]['split']('\\x20')[index];sum+=Number(a[index]);}let count=0x0;for(let index=0x0;index<n;index++){if(a[index]*(0x4*m)-sum>0x0){count++;}}if(count>=m){console['log']('Yes');}else{console['log']('No');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 1\n5 4 2 1", "Yes"], ["3 2\n380 19 1", "No"], ["12 3\n4 56 78 901 2 345 67 890 123 45 6 789", "Yes"]], "original": "\"use strict\"\n// input data\nfunction main(input) {\n    const n = Number(input.split('\\n')[0].split(' ')[0]);\n    const m = Number(input.split('\\n')[0].split(' ')[1]);\n    let a = [];\n    let sum = 0;\n    for (let index = 0; index < n; index++) {\n        a[index] = input.split('\\n')[1].split(' ')[index];\n        sum += Number(a[index]);\n    }\n    let count = 0;\n    for (let index = 0; index < n; index++) {\n        if (a[index] * (4 * m) - sum > 0) {\n            count++;\n        }\n    }\n    if (count>=m) {\n        console.log('Yes');\n    }else {\n        console.log('No');\n    }\n}\n\n// output\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 239, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const n = Number(input.split(\"\\n\")[0].split(\" \")[0]);\n  const m = Number(input.split(\"\\n\")[0].split(\" \")[1]);\n  let a = [];\n  let sum = 0;\n  for (let index = 0; index < n; index++) {\n    a[index] = input.split(\"\\n\")[1].split(\" \")[index];\n    sum += Number(a[index]);\n  }\n  let count = 0;\n  for (let index = 0; index < n; index++) {\n    if (a[index] * (m * 4) - sum > 0) {\n      count++;\n    }\n  }\n  if (count >= m) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7105534734308638, "ngram_match_score": 0.6311746323266156, "weighted_ngram_match_score": 0.6460704464280244, "syntax_match_score": 0.8918918918918919, "dataflow_match_score": 0.6730769230769231}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02796_1", "type": "JavaScript", "obfuscated": "'use strict';let a=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');a['shift']();let d=a['map'](e=>{let r=e['split']('\\x20')['map'](Number);return[r[0x0]-r[0x1],r[0x1]+r[0x0]];})['sort']((a,b)=>{return a[0x1]-b[0x1];});let s=0x0;let P=Number['MIN_SAFE_INTEGER'];for(let i=0x0;i<d['length'];i++){if(P<=d[i][0x0]){s++;P=d[i][0x1];}}console['log'](s);", "test_cases": [["4\n2 4\n4 3\n9 3\n100 5", "3"], ["2\n8 20\n1 10", "1"], ["5\n10 1\n2 1\n4 1\n6 1\n8 1", "5"]], "original": "\"use strict\";let a=require('fs').readFileSync('/dev/stdin','utf8').trim().split(\"\\n\");a.shift();let d = a.map(e => {let r = e.split(\" \").map(Number);return [r[0]-r[1],r[1]+r[0]];}).sort((a,b) => {return a[1]-b[1];});let s = 0;let P = Number.MIN_SAFE_INTEGER;for(let i=0;i<d.length;i++){if(P<=d[i][0]){s++;P = d[i][1];}}console.log(s);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 240, "deobfuscated": "'use strict';\n\nlet a = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\na.shift();\nlet d = a.map(e => {\n  let r = e.split(\" \").map(Number);\n  return [r[0] - r[1], r[1] + r[0]];\n}).sort((a, b) => {\n  return a[1] - b[1];\n});\nlet s = 0;\nlet P = Number.MIN_SAFE_INTEGER;\nfor (let i = 0; i < d.length; i++) {\n  if (P <= d[i][0]) {\n    s++;\n    P = d[i][1];\n  }\n}\nconsole.log(s);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5451465007176941, "ngram_match_score": 0.0640227418473288, "weighted_ngram_match_score": 0.17316703460835295, "syntax_match_score": 1.0, "dataflow_match_score": 0.9433962264150944}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02921_1", "type": "JavaScript", "obfuscated": "'use strict';let input=require('fs')['readFileSync']('/dev/stdin','utf8');const Nums=input['split']('\\x0a');const S=Nums[0x0]['split']('');const T=Nums[0x1]['split']('');let ans=0x0;S['forEach']((x,i)=>{if(x==T[i]){ans++;}});console['log'](ans);", "test_cases": [["CSS\nCSR", "2"], ["SSR\nSSR", "3"], ["RRR\nSSS", "0"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst Nums = input.split('\\n');\nconst S = Nums[0].split(\"\");\nconst T = Nums[1].split(\"\");\nlet ans = 0;\nS.forEach((x,i)=> {\n\tif(x==T[i]){\n    \tans++;\n    }\n});\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 241, "deobfuscated": "'use strict';\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst Nums = input.split(\"\\n\");\nconst S = Nums[0].split(\"\");\nconst T = Nums[1].split(\"\");\nlet ans = 0;\nS.forEach((x, i) => {\n  if (x == T[i]) {\n    ans++;\n  }\n});\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8166688152249196, "ngram_match_score": 0.5682615233336976, "weighted_ngram_match_score": 0.6984137375659808, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02972_1", "type": "JavaScript", "obfuscated": "'use strict';const arg_str=require('fs')['readFileSync']('/dev/stdin','UTF-8');const args=arg_str['split']('\\x0a');const N=parseInt(args[0x0]);const a_array=args[0x1]['split']('\\x20')['map'](x=>parseInt(x));for(let i=N;i>=0x1;i--){let i_n=0x0;if(i==0x1){i_n=N;}else{i_n=Math['sqrt'](N);}for(let j=i_n;j>=0x1;j--){if(i<j){if(j%i==0x0){a_array[i-0x1]^=a_array[j-0x1];}}else{continue;}}}const result=[];a_array['forEach']((item,index)=>{if(item==0x1){result['push'](index+0x1);}});console['log'](result['length']);if(result['length']>0x0){console['log'](result['join']('\\x20'));}", "test_cases": [["3\n1 0 0", "1\n1"], ["5\n0 0 0 0 0", "0"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args= arg_str.split('\\n')\nconst N = parseInt(args[0])\nconst a_array = args[1].split(' ').map(x=>parseInt(x))\n\nfor(let i=N;i>=1;i--){\n  let i_n = 0\n  if(i==1){\n    i_n = N\n  }else{\n    i_n = Math.sqrt(N)\n  }\n  for(let j=i_n;j>=1;j--){\n    if(i < j){\n      if(j % i == 0){\n        a_array[i-1] ^= a_array[j-1]\n      }\n    }else{\n      continue\n    }\n  }\n}\n\nconst result = []\na_array.forEach((item, index)=>{\n  if(item==1){\n    result.push(index+1)\n  }\n})\n\nconsole.log(result.length)\nif(result.length > 0){\n  console.log(result.join(' '))\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 242, "deobfuscated": "'use strict';\n\nconst arg_str = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nconst args = arg_str.split(\"\\n\");\nconst N = parseInt(args[0]);\nconst a_array = args[1].split(\" \").map(x => parseInt(x));\nfor (let i = N; i >= 1; i--) {\n  let i_n = 0;\n  if (i == 1) {\n    i_n = N;\n  } else {\n    i_n = Math.sqrt(N);\n  }\n  for (let j = i_n; j >= 1; j--) {\n    if (i < j) {\n      if (j % i == 0) {\n        a_array[i - 1] ^= a_array[j - 1];\n      }\n    } else {\n      continue;\n    }\n  }\n}\nconst result = [];\na_array.forEach((item, index) => {\n  if (item == 1) {\n    result.push(index + 1);\n  }\n});\nconsole.log(result.length);\nif (result.length > 0) {\n  console.log(result.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5592865683307788, "ngram_match_score": 0.09848001615897595, "weighted_ngram_match_score": 0.17145314241004128, "syntax_match_score": 1.0, "dataflow_match_score": 0.9672131147540983}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02994_1", "type": "JavaScript", "obfuscated": "'use strict';function main(stdin){const input=stdin['split']('\\x20')['map'](v=>parseInt(v,0xa));const N=input[0x0];const L=input[0x1];let sum=0x0;let min=Infinity;for(let i=L;i<L+N;++i){sum+=i;if(Math['abs'](i)<Math['abs'](min))min=i;}console['log'](sum-min);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2", "18"], ["3 -1", "0"], ["30 -50", "-1044"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split(' ').map(v => parseInt(v, 10));\n  const N = input[0];\n  const L = input[1];\n\n  let sum = 0;\n  let min = Infinity;\n\n  for (let i = L; i < L + N; ++i) {\n    sum += i;\n    if (Math.abs(i) < Math.abs(min)) min = i;\n  }\n  \n  console.log(sum - min);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 243, "deobfuscated": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split(\" \").map(v => parseInt(v, 10));\n  const N = input[0];\n  const L = input[1];\n  let sum = 0;\n  let min = Infinity;\n  for (let i = L; i < L + N; ++i) {\n    sum += i;\n    if (Math.abs(i) < Math.abs(min)) {\n      min = i;\n    }\n  }\n  console.log(sum - min);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8877364851988727, "ngram_match_score": 0.8304357450187441, "weighted_ngram_match_score": 0.8654494670318077, "syntax_match_score": 0.9076923076923077, "dataflow_match_score": 0.9473684210526315}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03075_1", "type": "JavaScript", "obfuscated": "fs=require('fs');l=fs['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');x=[];for(i=0x0;i<0x6;i++){x['push'](parseInt(l[i]));}if(x[0x4]-x[0x0]<=x[0x5]){console['log']('Yay!');}else{console['log'](':(');}", "test_cases": [["1\n2\n4\n8\n9\n15", "Yay!"], ["15\n18\n26\n35\n36\n18", ":("]], "original": "fs=require(\"fs\");\nl=fs.readFileSync(\"/dev/stdin\",\"utf8\").split(\"\\n\");\nx=[];\nfor(i=0;i<6;i++){\n  x.push(parseInt(l[i]));\n}\nif(x[4]-x[0]<=x[5]){\n  console.log('Yay!');\n}else{\n  console.log(':(');\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 244, "deobfuscated": "fs = require(\"fs\");\nl = fs.readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nx = [];\nfor (i = 0; i < 6; i++) {\n  x.push(parseInt(l[i]));\n}\nif (x[4] - x[0] <= x[5]) {\n  console.log(\"Yay!\");\n} else {\n  console.log(\":(\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5142323481460163, "ngram_match_score": 0.012813098990837714, "weighted_ngram_match_score": 0.04411629359322707, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03261_1", "type": "JavaScript", "obfuscated": "'use strict';const input=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');let ws=new Set();let prev=null;console['log'](((()=>{for(const w of input['slice'](0x1,parseInt(input[0x0])+0x1)){if(prev&&prev!=w[0x0]){return'No';}if(ws['has'](w)){return'No';}ws['add'](w);prev=w['substr'](-0x1);}return'Yes';})()));", "test_cases": [["4\nhoge\nenglish\nhoge\nenigma", "No"], ["9\nbasic\nc\ncpp\nphp\npython\nnadesico\nocaml\nlua\nassembly", "Yes"], ["8\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaa\naaaaaaa", "No"], ["3\nabc\narc\nagc", "No"]], "original": "\"use strict\";\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nlet ws = new Set();\nlet prev = null;\nconsole.log((() => {\n\tfor (const w of input.slice(1,parseInt(input[0]) + 1)) {\n\t\tif (prev && prev != w[0]) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (ws.has(w)) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tws.add(w);\n\t\tprev = w.substr(-1);\n\t}\n\treturn \"Yes\";\n})());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 245, "deobfuscated": "'use strict';\n\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nlet ws = new Set();\nlet prev = null;\nconsole.log((() => {\n  for (const w of input.slice(1, parseInt(input[0]) + 1)) {\n    if (prev && prev != w[0]) {\n      return \"No\";\n    }\n    if (ws.has(w)) {\n      return \"No\";\n    }\n    ws.add(w);\n    prev = w.substr(-1);\n  }\n  return \"Yes\";\n})());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9511446924599716, "ngram_match_score": 0.8902056737869248, "weighted_ngram_match_score": 0.9143730960529617, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03262_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x0a');const N=parseInt(input[0x0]['split']('\\x20')[0x0]);const X=parseInt(input[0x0]['split']('\\x20')[0x1]);const arr=input[0x1]['split']('\\x20')['map'](v=>parseInt(v))['sort']((a,b)=>a-b);let mostNear=0x174876e800;arr['forEach'](v=>{let dist=Math['abs'](X-v);if(dist<mostNear){mostNear=dist;}});for(let i=mostNear;i>=0x0;i--){for(let v of arr){let diff=Math['abs'](v-X);if(diff%mostNear!==0x0){break;}console['log'](i);return;}}};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["3 3\n1 7 11", "2"], ["3 81\n33 105 57", "24"], ["1 1\n1000000000", "999999999"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0].split(' ')[0])\n    const X = parseInt(input[0].split(' ')[1])\n    const arr = input[1].split(' ').map(v => parseInt(v)).sort((a, b) => a - b)\n    let mostNear = 100000000000\n    arr.forEach(v => {\n        let dist = Math.abs(X - v)\n        if(dist < mostNear){\n            mostNear = dist\n        }\n    })\n\n    for(let i = mostNear; i >= 0; i--){\n        for(let v of arr){\n            let diff = Math.abs(v - X)\n            if(diff % mostNear !== 0){\n                break\n            }\n            console.log(i)\n            return\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 246, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0].split(\" \")[0]);\n  const X = parseInt(input[0].split(\" \")[1]);\n  const arr = input[1].split(\" \").map(v => parseInt(v)).sort((a, b) => a - b);\n  let mostNear = 100000000000;\n  arr.forEach(v => {\n    let dist = Math.abs(X - v);\n    if (dist < mostNear) {\n      mostNear = dist;\n    }\n  });\n  for (let i = mostNear; i >= 0; i--) {\n    for (let v of arr) {\n      let diff = Math.abs(v - X);\n      if (diff % mostNear !== 0) {\n        break;\n      }\n      console.log(i);\n      return;\n    }\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5496829985591606, "ngram_match_score": 0.32110115764827774, "weighted_ngram_match_score": 0.3559212029384326, "syntax_match_score": 0.9545454545454546, "dataflow_match_score": 0.5671641791044776}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03370_1", "type": "JavaScript", "obfuscated": "'use strict';let input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['split']('\\x0a');let info=input['shift']();let N=info['split']('\\x20')[0x0]*0x1;let X=info['split']('\\x20')[0x1];let arr=input['map'](x=>x*0x1);let min=Math['min'](...arr);let sum=arr['reduce']((x,a)=>{return a+x;});let ans=N+Math['floor']((X-sum)/min);console['log'](ans);", "test_cases": [["3 1000\n120\n100\n140", "9"], ["4 360\n90\n90\n90\n90", "4"], ["5 3000\n150\n130\n150\n130\n110", "26"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n// 必要な変数に定義する\ninput = input.split('\\n');\nlet info = input.shift();\nlet N = info.split(\" \")[0]*1;\nlet X = info.split(\" \")[1];\n// 配列要素を数値に変換\nlet arr = input.map(x=> x*1);\nlet min = Math.min(...arr);\n// とりあえず1つずつ要素を足したもの\nlet sum = arr.reduce((x,a)=> {return a+x})\n// 残りで一番量が少なくて済むドーナッツに割り当てる\nlet ans = N + Math.floor((X - sum)/min);\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 247, "deobfuscated": "'use strict';\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.split(\"\\n\");\nlet info = input.shift();\nlet N = info.split(\" \")[0] * 1;\nlet X = info.split(\" \")[1];\nlet arr = input.map(x => x * 1);\nlet min = Math.min(...arr);\nlet sum = arr.reduce((x, a) => {\n  return a + x;\n});\nlet ans = N + Math.floor((X - sum) / min);\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.715218383459756, "ngram_match_score": 0.4036567425423272, "weighted_ngram_match_score": 0.45721679129669657, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009640866049339669, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.029994732506962718}}
{"filename": "p03377_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');l=inp['shift']()['split']('\\x20');A=l[0x0]*0x1;B=l[0x1]*0x1;X=l[0x2]*0x1;console['log'](A+B>X&&A<X?'YES':'NO');", "test_cases": [["3 5 4", "YES"], ["2 2 6", "NO"], ["5 3 2", "NO"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nA = l[0] * 1\nB = l[1] * 1 \nX = l[2] * 1 \nconsole.log(A + B > X && A < X ? 'YES' : 'NO')\t", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 248, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nl = inp.shift().split(\" \");\nA = l[0] * 1;\nB = l[1] * 1;\nX = l[2] * 1;\nconsole.log(A + B > X && A < X ? \"YES\" : \"NO\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.740441596355248, "ngram_match_score": 0.4808831927104961, "weighted_ngram_match_score": 0.48088319271049607, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03399_1", "type": "JavaScript", "obfuscated": "function Main(input){var xs=input['trim']()['split']('\\x0a')['map'](v=>parseInt(v,0xa));var A=0x0;if(xs[0x0]<=xs[0x1]){A=A+xs[0x0];}else if(xs[0x0]>=xs[0x1]){A=A+xs[0x1];}var B=0x0;if(xs[0x2]<=xs[0x3]){B=B+xs[0x2];}else if(xs[0x2]>=xs[0x3]){B=B+xs[0x3];}console['log'](A+B);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["600\n300\n220\n420", "520"], ["555\n555\n400\n200", "755"], ["549\n817\n715\n603", "1152"]], "original": "function Main(input){\n\tvar xs = input.trim().split('\\n').map(v=>parseInt(v,10));\n      var A = 0;\n      if(xs[0] <= xs[1]){\n      A = A + xs[0];\n      }else if(xs[0] >= xs[1]){\n      A = A + xs[1];\n      }\n      var B = 0;\n      if(xs[2] <= xs[3]){\n      B = B + xs[2];\n      }else if(xs[2] >= xs[3]){\n      B = B + xs[3];\n      }\n    console.log(A+B);      \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 249, "deobfuscated": "function Main(input) {\n  var xs = input.trim().split(\"\\n\").map(v => parseInt(v, 10));\n  var A = 0;\n  if (xs[0] <= xs[1]) {\n    A = A + xs[0];\n  } else if (xs[0] >= xs[1]) {\n    A = A + xs[1];\n  }\n  var B = 0;\n  if (xs[2] <= xs[3]) {\n    B = B + xs[2];\n  } else if (xs[2] >= xs[3]) {\n    B = B + xs[3];\n  }\n  console.log(A + B);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6936549461831244, "ngram_match_score": 0.35039025546117475, "weighted_ngram_match_score": 0.47551158055337417, "syntax_match_score": 1.0, "dataflow_match_score": 0.9487179487179487}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03448_1", "type": "JavaScript", "obfuscated": "function main(input){const input_array=input['split']('\\x0a');const coins_count=input_array['slice'](0x0,0x3);const desired_sum=parseInt(input_array['slice'](-0x1),0xa);var answer=0x0;for(i=0x0;i<=parseInt(coins_count[0x0],0xa);i++){for(j=0x0;j<=parseInt(coins_count[0x1],0xa);j++){for(k=0x0;k<=parseInt(coins_count[0x2],0xa);k++){if(0x1f4*i+0x64*j+0x32*k==desired_sum){answer++;}}}}console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n2\n2\n100", "2"], ["5\n1\n0\n150", "0"], ["30\n40\n50\n6000", "213"]], "original": "// 500, 100, 50\nfunction main(input) {\n  const input_array = input.split(\"\\n\");\n  const coins_count = input_array.slice(0,3);\n  const desired_sum = parseInt(input_array.slice(-1), 10);\n\n  var answer = 0;\n  for(i=0; i<=parseInt(coins_count[0], 10); i++){\n    for(j=0; j<=parseInt(coins_count[1], 10); j++){\n      for(k=0; k<=parseInt(coins_count[2], 10); k++){\n        if (500 * i + 100 * j + 50 * k == desired_sum){\n          answer++;\n        }\n      }\n    }\n  }\n  \n  console.log(answer);\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 250, "deobfuscated": "function main(input) {\n  const input_array = input.split(\"\\n\");\n  const coins_count = input_array.slice(0, 3);\n  const desired_sum = parseInt(input_array.slice(-1), 10);\n  var answer = 0;\n  for (i = 0; i <= parseInt(coins_count[0], 10); i++) {\n    for (j = 0; j <= parseInt(coins_count[1], 10); j++) {\n      for (k = 0; k <= parseInt(coins_count[2], 10); k++) {\n        if (i * 500 + j * 100 + k * 50 == desired_sum) {\n          answer++;\n        }\n      }\n    }\n  }\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6350951582687805, "ngram_match_score": 0.32378786455094344, "weighted_ngram_match_score": 0.4264693117340554, "syntax_match_score": 0.7901234567901234, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03456_1", "type": "JavaScript", "obfuscated": "function Main(input){var inp=input['split']('\\x20');var a=inp[0x0];var b=inp[0x1];var n=parseInt(a+b);var flsqn=Math['floor'](Math['sqrt'](n));flsqn*flsqn===n?console['log']('Yes'):console['log']('No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 21", "Yes"], ["100 100", "No"], ["12 10", "No"]], "original": "function Main(input){\n  var inp = input.split(' ');\n  var a = inp[0];\n  var b = inp[1];\n  var n = parseInt(a + b);\n  var flsqn = Math.floor(Math.sqrt(n));\n  flsqn * flsqn === n ? console.log('Yes') : console.log('No');\n//  (Math.floor(Math.sqrt(n))) ** 2 ? console.log('Yes') : console.log('No');\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 251, "deobfuscated": "function Main(input) {\n  var inp = input.split(\" \");\n  var a = inp[0];\n  var b = inp[1];\n  var n = parseInt(a + b);\n  var flsqn = Math.floor(Math.sqrt(n));\n  if (flsqn * flsqn === n) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7078341905609551, "ngram_match_score": 0.4506388510249862, "weighted_ngram_match_score": 0.47685175737268043, "syntax_match_score": 0.9038461538461539, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.375, "length_score": -0.375, "increase_maintainability": -0.060842285247000416, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.01449275362318847, "new_decrease_halstead_effort": -0.1368382548701208}}
{"filename": "p03597_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a')['map'](n=>parseInt(n,0xa));console['log'](Math['pow'](input[0x0],0x2)-input[0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n4", "5"], ["19\n100", "261"], ["10\n0", "100"]], "original": "function Main(input) {\n    input = input.split('\\n').map(n => parseInt(n, 10));\n    console.log((Math.pow(input[0], 2)) - input[1]);\n }\n  Main(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 252, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\").map(n => parseInt(n, 10));\n  console.log(Math.pow(input[0], 2) - input[1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6378132883033949, "ngram_match_score": 0.3767471803151817, "weighted_ngram_match_score": 0.3850322886878713, "syntax_match_score": 0.7894736842105263, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03625_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split'](/\\r?\\n/);input=input[0x1]['split']('\\x20')['map'](v=>~~v)['sort']((a,b)=>b-a);let ans=0x0;let sticks=[];let prev=input[0x0];for(let i=0x1;i<input['length'];i++){if(prev==input[i]){sticks['push'](prev);sticks['push'](input[i]);prev=0x0;}else{prev=input[i];}}if(sticks['length']>=0x4){ans=sticks[0x0]*sticks[0x3];console['log'](ans);}else{console['log'](0x0);}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n3 1 2 4 2 1", "2"], ["4\n1 2 3 4", "0"], ["10\n3 3 3 3 4 4 4 5 5 5", "20"]], "original": "\n\"use strict\"\n\nfunction main(input) {\n    input = input.split(/\\r?\\n/)\n    input = input[1].split(' ').map(v => ~~v).sort((a, b) => b - a)\n\n    let ans = 0\n    let sticks = [] // 2本ずつ、2本ずつ、\n    let prev = input[0]\n    for (let i = 1; i < input.length; i++) {\n\n        if (prev == input[i]) {\n            sticks.push(prev)\n            sticks.push(input[i])\n            prev = 0\n        } else {\n            prev = input[i]\n        }\n\n    }\n    if (sticks.length >= 4) {\n        ans = sticks[0] * sticks[3]\n        console.log(ans)\n    } else {\n        console.log(0)\n    }\n\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 253, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(/\\r?\\n/);\n  input = input[1].split(\" \").map(v => ~~v).sort((a, b) => b - a);\n  let ans = 0;\n  let sticks = [];\n  let prev = input[0];\n  for (let i = 1; i < input.length; i++) {\n    if (prev == input[i]) {\n      sticks.push(prev);\n      sticks.push(input[i]);\n      prev = 0;\n    } else {\n      prev = input[i];\n    }\n  }\n  if (sticks.length >= 4) {\n    ans = sticks[0] * sticks[3];\n    console.log(ans);\n  } else {\n    console.log(0);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7744516085740288, "ngram_match_score": 0.5430315073538715, "weighted_ngram_match_score": 0.554774926942244, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03680_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=~~arg[0x0];const S=arg['slice'](0x1,N+0x1)['map'](n=>~~n);let now=0x1;let cnt=0x0;while(now!==0x2){now=S[now-0x1];cnt++;if(cnt>N){console['log'](-0x1);return;}}console['log'](cnt);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n3\n1\n2", "2"], ["4\n3\n4\n1\n2", "-1"], ["5\n3\n3\n4\n2\n4", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = ~~arg[0];\n    const S = arg.slice(1, N + 1).map(n=>~~n);\n    \n    let now = 1;\n    let cnt = 0;\n    \n    while(now !== 2) {\n        now = S[now - 1];\n        cnt++;\n        \n        if(cnt > N) {\n            console.log(-1);\n            return;\n        }\n    }\n    \n    console.log(cnt);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 254, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = ~~arg[0];\n  const S = arg.slice(1, N + 1).map(n => ~~n);\n  let now = 1;\n  let cnt = 0;\n  while (now !== 2) {\n    now = S[now - 1];\n    cnt++;\n    if (cnt > N) {\n      console.log(-1);\n      return;\n    }\n  }\n  console.log(cnt);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8622987880738437, "ngram_match_score": 0.6925261868436056, "weighted_ngram_match_score": 0.7566689654517694, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03773_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var lines=chunk['toString']()['split']('\\x20');var first=Number(lines[0x0]);var second=Number(lines[0x1]);var time=second+first;if(time<0x18){console['log'](time);}else{console['log'](time-0x18);}});", "test_cases": [["9 12", "21"], ["19 0", "19"], ["23 2", "1"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('data', function (chunk) {\n    var lines = chunk.toString().split(' ');\n    var first = Number(lines[0]);\n    var second = Number(lines[1]);\n\n    var time = second + first;\n    \n    if(\n        time<24)\n        {\n            console.log(time)\n        }else{\n            console.log(time-24)\n        }\n        \n//    console.log(lines);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 255, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var lines = chunk.toString().split(\" \");\n  var first = Number(lines[0]);\n  var second = Number(lines[1]);\n  var time = second + first;\n  if (time < 24) {\n    console.log(time);\n  } else {\n    console.log(time - 24);\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.754504113504952, "ngram_match_score": 0.4705381429778221, "weighted_ngram_match_score": 0.5474783110419859, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00007_1", "type": "JavaScript", "obfuscated": "function main(){var debt=0x186a0;for(var i=0x0;i<input['trim']()-0x0;i++){debt=Math['ceil'](debt*1.05/0x3e8)*0x3e8;}console['log'](debt);}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){main();});", "test_cases": [["5", "130000"]], "original": "function main(){\n  var debt = 100000;\n \n  for(var i = 0; i < input.trim()-0; i++){\n    debt = Math.ceil((debt * 1.05)/1000) * 1000;\n  }\n\n  console.log(debt);\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 256, "deobfuscated": "function main() {\n  var debt = 100000;\n  for (var i = 0; i < input.trim() - 0; i++) {\n    debt = Math.ceil(debt * 1.05 / 1000) * 1000;\n  }\n  console.log(debt);\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6543971546856059, "ngram_match_score": 0.3542938205971965, "weighted_ngram_match_score": 0.44239927575716737, "syntax_match_score": 0.8208955223880597, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02233_1", "type": "JavaScript", "obfuscated": "(function main(){const n=Number(require('fs')['readFileSync']('/dev/stdin','utf8'))+0x1;root5=Math['sqrt'](0x5);console['log'](Math['round'](0x1/root5*(Math['pow']((0x1+root5)/0x2,n)-Math['pow']((0x1-root5)/0x2,n))));}());", "test_cases": [["3", "3"]], "original": "(function main() {\n  const n = Number(require('fs').readFileSync('/dev/stdin', 'utf8')) + 1;\n  root5 = Math.sqrt(5);\n  console.log(Math.round(1/root5 * (Math.pow((1 + root5) / 2, n) - Math.pow((1 - root5) / 2, n))));\n})();\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 257, "deobfuscated": "(function main() {\n  const n = Number(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")) + 1;\n  root5 = Math.sqrt(5);\n  console.log(Math.round(1 / root5 * (Math.pow((1 + root5) / 2, n) - Math.pow((1 - root5) / 2, n))));\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8739581421769502, "ngram_match_score": 0.7203362668653466, "weighted_ngram_match_score": 0.7754963018424543, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02612_1", "type": "JavaScript", "obfuscated": "function Main(input){const hyaku=Number(input)%0x3e8;console['log'](hyaku===0x0?0x0:0x3e8-hyaku);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1900", "100"], ["3000", "0"]], "original": "function Main(input) {\n    const hyaku = Number(input)%1000;\n    console.log(hyaku === 0 ? 0: 1000-hyaku);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 258, "deobfuscated": "function Main(input) {\n  const hyaku = Number(input) % 1000;\n  console.log(hyaku === 0 ? 0 : 1000 - hyaku);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7365792395873342, "ngram_match_score": 0.3989849341102657, "weighted_ngram_match_score": 0.547332024239071, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02694_1", "type": "JavaScript", "obfuscated": "const main=inputs=>{var array=inputs[0x0]['split']('\\x20');var X=Number(array);var num=0x64;var count=0x0;while(0x1){var risoku=Math['floor'](num*0.01);num=num+risoku;count++;if(X<=num)break;}console['log'](count);};main(require('fs')['readFileSync']('/dev/stdin','UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["103", "3"], ["1000000000000000000", "3760"], ["1333333333", "1706"]], "original": "const main = (inputs) => {\n  var array = inputs[0].split(\" \");\n  var X = Number(array);\n\n  var num = 100;\n  var count = 0;\n  while (1) {\n    var risoku = Math.floor(num * 0.01);\n    num = num + risoku;\n    count++;\n    if (X <= num) break;\n  }\n\n  console.log(count);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 259, "deobfuscated": "const main = inputs => {\n  var array = inputs[0].split(\" \");\n  var X = Number(array);\n  var num = 100;\n  var count = 0;\n  while (1) {\n    var risoku = Math.floor(num * 0.01);\n    num = num + risoku;\n    count++;\n    if (X <= num) {\n      break;\n    }\n  }\n  console.log(count);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.878658937828408, "ngram_match_score": 0.8108494749177433, "weighted_ngram_match_score": 0.8513272600024461, "syntax_match_score": 0.8524590163934426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02702_1", "type": "JavaScript", "obfuscated": "const Main=()=>{let line=require('fs')['readFileSync']('/dev/stdin','utf8');const mod={};let count=0x0;for(let i=line['length'];0x0<i;i--){const n=parseInt(line,0xa);const m=n%0x7e3;if(mod[m]||m===0x0){count++;}mod[m]=!![];line=line['slice'](0x1);}console['log'](count);};Main();", "test_cases": [["1817181712114", "3"], ["14282668646", "2"], ["2119", "0"]], "original": "const Main = () => {\n    let line = require('fs').readFileSync('/dev/stdin', 'utf8');\n    const mod = {};\n    let count = 0;\n    for (let i = line.length; 0 < i; i--) {\n        const n = parseInt(line, 10);\n        const m = n % 2019;\n        if (mod[m] || m === 0) {\n            count ++;\n        }\n        mod[m] = true;\n        line = line.slice(1);\n    }\n    console.log(count);\n}\n\nMain();", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 260, "deobfuscated": "const Main = () => {\n  let line = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n  const mod = {};\n  let count = 0;\n  for (let i = line.length; i > 0; i--) {\n    const n = parseInt(line, 10);\n    const m = n % 2019;\n    if (mod[m] || m === 0) {\n      count++;\n    }\n    mod[m] = true;\n    line = line.slice(1);\n  }\n  console.log(count);\n};\nMain();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7249414669349513, "ngram_match_score": 0.7695058408611645, "weighted_ngram_match_score": 0.7793667607311374, "syntax_match_score": 0.864406779661017, "dataflow_match_score": 0.4864864864864865}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02717_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){var line=input['split']('\\x20');console['log'](line[0x2]+'\\x20'+line[0x0]+'\\x20'+line[0x1]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 2 3", "3 1 2"], ["100 100 100", "100 100 100"], ["41 59 31", "31 41 59"]], "original": "\"use strict\";\nfunction main(input) {\n    var line = input.split(\" \");\n    console.log(line[2] + \" \" + line[0] + \" \" + line[1]); \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 261, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  var line = input.split(\" \");\n  console.log(line[2] + \" \" + line[0] + \" \" + line[1]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9133878765654001, "ngram_match_score": 0.821733500055363, "weighted_ngram_match_score": 0.8318180062062374, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02719_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x0]['split']('\\x20');var N=Number(tmp[0x0]);var K=Number(tmp[0x1]);if(K===0x1)return console['log'](0x0);var current=Math['abs'](N-K);N=current;while(current>=N){N=current;current=Math['abs'](N-K);}console['log'](current);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 4", "1"], ["2 6", "2"], ["1000000000000000000 1", "0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\ttmp = input[0].split(\" \");\n\tvar N = Number(tmp[0])\n    var K = Number(tmp[1])\n    if(K === 1) return console.log(0)\n    \n    var current = Math.abs(N - K)\n    N = current\n    while(current >= N) {\n      \n      N = current\n      current = Math.abs(N - K)\n    }\n  console.log(current)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 262, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var N = Number(tmp[0]);\n  var K = Number(tmp[1]);\n  if (K === 1) {\n    return console.log(0);\n  }\n  var current = Math.abs(N - K);\n  N = current;\n  while (current >= N) {\n    N = current;\n    current = Math.abs(N - K);\n  }\n  console.log(current);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.735079278663702, "ngram_match_score": 0.474502430440818, "weighted_ngram_match_score": 0.5237856987067439, "syntax_match_score": 0.9420289855072463, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02789_1", "type": "JavaScript", "obfuscated": "function main(input){var args=input['split']('\\x20');var n=parseInt(args[0x0],0xa);var m=parseInt(args[0x1],0xa);if(n===m){return'Yes';}else{return'No';}}console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3 3", "Yes"], ["3 2", "No"], ["1 1", "Yes"]], "original": "function main(input) {\n  var args = input.split(' ');\n  var n = parseInt(args[0], 10);\n  var m = parseInt(args[1], 10);\n  if ( n === m) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 263, "deobfuscated": "function main(input) {\n  var args = input.split(\" \");\n  var n = parseInt(args[0], 10);\n  var m = parseInt(args[1], 10);\n  if (n === m) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8668973916952916, "ngram_match_score": 0.7254922792576818, "weighted_ngram_match_score": 0.7420972875234847, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02829_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const args=input['split']('\\x0a');const num=args['map'](el=>parseInt(el));const ans=[0x1,0x2,0x3];let out=ans['filter'](el=>el!==num[0x0]);out=out['find'](el=>el!==num[0x1]);console['log'](out);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1", "2"], ["1\n2", "3"]], "original": "'use strict'\nfunction main(input) {\n  const args = input.split('\\n');\n  const num = args.map(el => parseInt(el))\n  const ans = [1, 2, 3]\n  let out = ans.filter(el => el !== num[0])\n  out = out.find(el => el !== num[1])\n  console.log(out)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 264, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const args = input.split(\"\\n\");\n  const num = args.map(el => parseInt(el));\n  const ans = [1, 2, 3];\n  let out = ans.filter(el => el !== num[0]);\n  out = out.find(el => el !== num[1]);\n  console.log(out);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7772360938252009, "ngram_match_score": 0.5480701675536285, "weighted_ngram_match_score": 0.5608742077471749, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02866_1", "type": "JavaScript", "obfuscated": "function main(arg){var arg2=arg['split']('\\x0a')[0x1]['split'](/\\s/g);var kazoe=[];for(i=0x0;i<arg['split']('\\x0a')[0x0];i++){if(!kazoe[arg2[i]]){kazoe[arg2[i]]=0x0;}kazoe[arg2[i]]+=0x1;}var ans=0x1;for(j=0x0;j<kazoe['length'];j++){if(j>0x1){ans=ans*Math['pow'](kazoe[j-0x1],kazoe[j]);}if(!kazoe[j]){ans=0x0;break;}}console['log'](ans%0x3b800001);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n0 1 1 2", "2"], ["4\n1 1 1 1", "0"], ["7\n0 3 2 1 2 2 1", "24"]], "original": "function main(arg) {\n    var arg2 = arg.split(\"\\n\")[1].split(/\\s/g); //元データ\n    var kazoe = []; //各数字の個数の配列\n\n\tfor(i=0;i<arg.split(\"\\n\")[0];i++){\n\t\t//もし存在しなければ作る\n\t\tif(!kazoe[arg2[i]]){\n\t\t\tkazoe[arg2[i]] = 0;\n\t\t}\n\t\tkazoe[arg2[i]] += 1;\n\t}\n\t//答えは(1の個数)^(2の個数)*(2の個数)^(3の個数)*(3の個数)^(4の個数)*…*(N-1の個数)^(Nの個数)\n\tvar ans = 1;\n\tfor(j=0;j<kazoe.length;j++){\n\t    if(j>1){\n\t    \tans = ans * Math.pow(kazoe[j-1],kazoe[j]);\n\t    }\n\t    //もし間に歯抜けがあればfalse\n\t    if(!kazoe[j]){\n\t       ans = 0;\n\t       break;\n\t    }\n\t}\n    console.log(ans%998244353);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 265, "deobfuscated": "function main(arg) {\n  var arg2 = arg.split(\"\\n\")[1].split(/\\s/g);\n  var kazoe = [];\n  for (i = 0; i < arg.split(\"\\n\")[0]; i++) {\n    if (!kazoe[arg2[i]]) {\n      kazoe[arg2[i]] = 0;\n    }\n    kazoe[arg2[i]] += 1;\n  }\n  var ans = 1;\n  for (j = 0; j < kazoe.length; j++) {\n    if (j > 1) {\n      ans = ans * Math.pow(kazoe[j - 1], kazoe[j]);\n    }\n    if (!kazoe[j]) {\n      ans = 0;\n      break;\n    }\n  }\n  console.log(ans % 998244353);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7075734282195492, "ngram_match_score": 0.32672521637863683, "weighted_ngram_match_score": 0.5035684964995597, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02933_1", "type": "JavaScript", "obfuscated": "const Main=input=>{input=input['split']('\\x0a');const a=input[0x0];const s=input[0x1];if(a>=0xc80){console['log'](s);}else{console['log']('red');}};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3200\npink", "pink"], ["3199\npink", "red"], ["4049\nred", "red"]], "original": "const Main = (input) => {\ninput = input.split('\\n')\nconst a = input[0];\nconst s = input[1];\n\nif(a>=3200){\n  console.log(s);\n}\nelse{\n  console.log(\"red\");\n}\n  \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 266, "deobfuscated": "const Main = input => {\n  input = input.split(\"\\n\");\n  const a = input[0];\n  const s = input[1];\n  if (a >= 3200) {\n    console.log(s);\n  } else {\n    console.log(\"red\");\n  }\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5862563608801427, "ngram_match_score": 0.3761648431086742, "weighted_ngram_match_score": 0.463449345000641, "syntax_match_score": 0.8863636363636364, "dataflow_match_score": 0.6190476190476191}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02936_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const tmp=input['trim']()['split']('\\x0a')['map'](v=>v['split']('\\x20')['map'](v=>parseFloat(v)));const n=tmp[0x0][0x0];const q=tmp[0x0][0x1];const edges=tmp['slice'](0x1,n);const actions=tmp['slice'](n,n+q);const nodes=[...new Array(n+0x1)]['map'](v=>[]);for(let i=0x0;i<n-0x1;i++){const p=edges[i][0x0];nodes[p]['push'](edges[i][0x1]);}const ans=[...new Array(n+0x1)]['map'](v=>0x0);for(let i=0x0;i<q;i++){const act=actions[i];const cnt=act[0x1];ans[act[0x0]]+=cnt;let stack=[...nodes[act[0x0]]];while(stack['length']>0x0){const t=stack['pop']();ans[t]+=cnt;stack=stack['concat'](nodes[t]);}}console['log'](ans['slice'](0x1)['join']('\\x20'));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3\n1 2\n2 3\n2 4\n2 10\n1 100\n3 1", "100 110 111 110"], ["6 2\n1 2\n1 3\n2 4\n3 6\n2 5\n1 10\n1 10", "20 20 20 20 20 20"]], "original": "'use strict'\n\nfunction main(input) {\n  const tmp = input\n    .trim()\n    .split('\\n')\n    .map(v => v.split(' ').map(v => parseFloat(v)))\n  const n = tmp[0][0]\n  const q = tmp[0][1]\n  const edges = tmp.slice(1, n)\n  const actions = tmp.slice(n, n + q)\n\n  const nodes = [...new Array(n + 1)].map(v => [])\n  for (let i = 0; i < n - 1; i++) {\n    const p = edges[i][0]\n    nodes[p].push(edges[i][1])\n  }\n\n  const ans = [...new Array(n + 1)].map(v => 0)\n  // actions.forEach((act, i, self) => {\n  for (let i = 0; i < q; i++) {\n    const act = actions[i]\n    const cnt = act[1]\n    ans[act[0]] += cnt\n    let stack = [...nodes[act[0]]]\n\n    while (stack.length > 0) {\n      const t = stack.pop()\n      ans[t] += cnt\n      // stack = [...stack, ...nodes[t]]\n      stack = stack.concat(nodes[t])\n    }\n  }\n  console.log(ans.slice(1).join(' '))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 267, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const tmp = input.trim().split(\"\\n\").map(v => v.split(\" \").map(v => parseFloat(v)));\n  const n = tmp[0][0];\n  const q = tmp[0][1];\n  const edges = tmp.slice(1, n);\n  const actions = tmp.slice(n, n + q);\n  const nodes = [...new Array(n + 1)].map(v => []);\n  for (let i = 0; i < n - 1; i++) {\n    const p = edges[i][0];\n    nodes[p].push(edges[i][1]);\n  }\n  const ans = [...new Array(n + 1)].map(v => 0);\n  for (let i = 0; i < q; i++) {\n    const act = actions[i];\n    const cnt = act[1];\n    ans[act[0]] += cnt;\n    let stack = [...nodes[act[0]]];\n    while (stack.length > 0) {\n      const t = stack.pop();\n      ans[t] += cnt;\n      stack = stack.concat(nodes[t]);\n    }\n  }\n  console.log(ans.slice(1).join(\" \"));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7208443482795195, "ngram_match_score": 0.4962434617675851, "weighted_ngram_match_score": 0.5147935058185776, "syntax_match_score": 1.0, "dataflow_match_score": 0.8723404255319149}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02957_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const a=parseInt(args[0x0][0x0],0xa);const b=parseInt(args[0x0][0x1],0xa);const t1=a+b;const t2=t1/0x2;if(t2%0x1===0x0)console['log'](t2);else console['log']('IMPOSSIBLE');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 16", "9"], ["0 3", "IMPOSSIBLE"], ["998244353 99824435", "549034394"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst a = parseInt(args[0][0], 10)\n\tconst b = parseInt(args[0][1], 10)\n\tconst t1 = a + b\n\tconst t2 = t1 / 2\n\tif (t2 % 1 === 0) console.log(t2)\n\telse console.log('IMPOSSIBLE')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 268, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const a = parseInt(args[0][0], 10);\n  const b = parseInt(args[0][1], 10);\n  const t1 = a + b;\n  const t2 = t1 / 2;\n  if (t2 % 1 === 0) {\n    console.log(t2);\n  } else {\n    console.log(\"IMPOSSIBLE\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5943696370646335, "ngram_match_score": 0.4600067051450453, "weighted_ngram_match_score": 0.514026330292976, "syntax_match_score": 0.890625, "dataflow_match_score": 0.5128205128205128}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02958_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const a=lines[0x1]['split']('\\x20')['map'](v=>v-0x0);const b=lines[0x1]['split']('\\x20')['map'](v=>v-0x0)['sort']((a,b)=>a-b);let ans=a['filter']((v,i)=>v!=b[i])['length'];console['log'](ans<=0x2?'YES':'NO');});min=(...a)=>{return a['reduce']((a,b)=>a<b?a:b,a[0x0]);};", "test_cases": [["5\n5 2 3 4 1", "YES"], ["5\n2 4 3 5 1", "NO"], ["7\n1 2 3 4 5 6 7", "YES"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const a = lines[1].split(\" \").map(v=>v-0);\n    const b = lines[1].split(\" \").map(v=>v-0).sort((a,b)=>a-b);\n    let ans = a.filter((v,i)=>v!=b[i]).length;\n    console.log(ans<=2?\"YES\":\"NO\");\n});\n\nmin = (...a)=>{return a.reduce((a,b)=>a<b?a:b, a[0])};\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 269, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  const a = lines[1].split(\" \").map(v => v - 0);\n  const b = lines[1].split(\" \").map(v => v - 0).sort((a, b) => a - b);\n  let ans = a.filter((v, i) => v != b[i]).length;\n  console.log(ans <= 2 ? \"YES\" : \"NO\");\n});\nmin = (...a) => {\n  return a.reduce((a, b) => a < b ? a : b, a[0]);\n};\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6693868775983373, "ngram_match_score": 0.2600040065692078, "weighted_ngram_match_score": 0.4885467104205683, "syntax_match_score": 0.9459459459459459, "dataflow_match_score": 0.9830508474576272}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02969_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var r=parseInt(input,0xa);console['log'](0x3*r*r);", "test_cases": [["4", "48"], ["15", "675"], ["80", "19200"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar r = parseInt(input, 10);\nconsole.log(3 * r * r);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 270, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar r = parseInt(input, 10);\nconsole.log(r * 3 * r);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.737079602650091, "ngram_match_score": 0.5974970909115025, "weighted_ngram_match_score": 0.6116908849062525, "syntax_match_score": 0.7391304347826086, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02971_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){var input=arg['split']('\\x0a');var retu=input[0x0];var kazu=[];for(var i=0x1;retu>=i;i++){kazu['push'](input[i]);}for(var x=0x0,len=kazu['length'];x<len;++x){var kazu2=kazu['slice'](0x0,kazu['length']);kazu2['splice'](x,0x1);console['log'](Math['max']['apply'](null,kazu2));}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1\n4\n3", "4\n3\n4"], ["2\n5\n5", "5\n5"]], "original": "\"use strict\"\nfunction main(arg) {\n    //とりあえず行を分割\n    var input = arg.split(\"\\n\");\n    var retu = input[0];\n    var kazu = [];\n    for(var i = 1; retu >= i ;i++){\n        kazu.push(input[i]);\n    }\n\n//X番目を抜いた中で一番大きいやつを求める\nfor (var x = 0, len = kazu.length; x < len; ++x) {\n  var kazu2 = kazu.slice(0, kazu.length);\n  kazu2.splice(x, 1);\n  console.log(Math.max.apply(null, kazu2));\n}\n    \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 271, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  var input = arg.split(\"\\n\");\n  var retu = input[0];\n  var kazu = [];\n  for (var i = 1; retu >= i; i++) {\n    kazu.push(input[i]);\n  }\n  for (var x = 0, len = kazu.length; x < len; ++x) {\n    var kazu2 = kazu.slice(0, kazu.length);\n    kazu2.splice(x, 1);\n    console.log(Math.max.apply(null, kazu2));\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.861497599441746, "ngram_match_score": 0.7177771458977821, "weighted_ngram_match_score": 0.7282132518692016, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03024_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const S=arg[0x0]['split']('');const win=S['filter'](n=>n==='o')['length'];const rest=0xf-S['length'];console['log'](rest+win>=0x8?'YES':'NO');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["oxoxoxoxoxoxox", "YES"], ["xxxxxxxx", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    const win  = S.filter(n=>n===\"o\").length;\n    const rest = 15 - S.length;\n    \n    console.log((rest + win) >= 8 ? \"YES\" : \"NO\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 272, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const S = arg[0].split(\"\");\n  const win = S.filter(n => n === \"o\").length;\n  const rest = 15 - S.length;\n  console.log(rest + win >= 8 ? \"YES\" : \"NO\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7689639827334173, "ngram_match_score": 0.5942313485193036, "weighted_ngram_match_score": 0.6746070385547165, "syntax_match_score": 0.8070175438596491, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03042_1", "type": "JavaScript", "obfuscated": "function Main(input){var a=parseInt(input['charAt'](0x0)+input['charAt'](0x1));var b=parseInt(input['charAt'](0x2)+input['charAt'](0x3));var r=0x0;if(a>=0xd||a==0x0){r=0x1;}if(b>=0xd||b==0x0){r=0x2;}if(a>=0x1&&a<=0xc&&b>=0x1&&b<=0xc){r=0x3;}if(a>=0xd&&b>=0xd||a>=0xd&&b==0x0||a==0x0&&b>=0xd||a==0x0&&b==0x0){r=0x4;}if(r==0x1){console['log']('YYMM');}if(r==0x2){console['log']('MMYY');}if(r==0x3){console['log']('AMBIGUOUS');}if(r==0x4){console['log']('NA');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1905", "YYMM"], ["0112", "AMBIGUOUS"], ["1700", "NA"]], "original": "function Main(input) {\n\tvar a = parseInt(input.charAt(0)+input.charAt(1));\n\tvar b = parseInt(input.charAt(2)+input.charAt(3));\n\tvar r = 0;\t// 1=YYMM、2=MMYY、3=両方、4=どちらでもない\n\tif(a >= 13 || a == 0){\n\t\tr = 1;\n\t}\n\tif(b >= 13 || b == 0){\n\t\tr = 2;\n\t}\n\tif(a >= 1 && a <= 12 && b >= 1 && b <= 12){\n\t\tr = 3;\n\t}\n\tif(a >= 13 && b >= 13 || a >= 13 && b == 0 || a == 0 && b >= 13 || a == 0 && b == 0){\n\t\tr = 4;\n\t}\n\tif(r == 1){ console.log(\"YYMM\"); }\n\tif(r == 2){ console.log(\"MMYY\"); }\n\tif(r == 3){ console.log(\"AMBIGUOUS\"); }\n\tif(r == 4){ console.log(\"NA\"); }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 273, "deobfuscated": "function Main(input) {\n  var a = parseInt(input.charAt(0) + input.charAt(1));\n  var b = parseInt(input.charAt(2) + input.charAt(3));\n  var r = 0;\n  if (a >= 13 || a == 0) {\n    r = 1;\n  }\n  if (b >= 13 || b == 0) {\n    r = 2;\n  }\n  if (a >= 1 && a <= 12 && b >= 1 && b <= 12) {\n    r = 3;\n  }\n  if (a >= 13 && b >= 13 || a >= 13 && b == 0 || a == 0 && b >= 13 || a == 0 && b == 0) {\n    r = 4;\n  }\n  if (r == 1) {\n    console.log(\"YYMM\");\n  }\n  if (r == 2) {\n    console.log(\"MMYY\");\n  }\n  if (r == 3) {\n    console.log(\"AMBIGUOUS\");\n  }\n  if (r == 4) {\n    console.log(\"NA\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7825656781244985, "ngram_match_score": 0.5221923394739667, "weighted_ngram_match_score": 0.6080703730240271, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03068_1", "type": "JavaScript", "obfuscated": "var lines=[];var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]);var S=lines[0x1]['split']('');var K=Number(lines[0x2]);for(var i=0x0;i<N;i++){if(S[K-0x1]!==S[i]){S[i]='*';}}var result='';for(var i=0x0;i<N;i++){result=result+S[i];}console['log'](result);});", "test_cases": [["5\nerror\n2", "*rr*r"], ["6\neleven\n5", "e*e*e*"], ["9\neducation\n7", "******i**"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var S = lines[1].split(\"\");\n    var K = Number(lines[2]);\n\n    for (var i = 0; i < N; i++) {\n        if (S[K - 1] !== S[i]) { S[i] = \"*\"; }\n    }\n    var result =\"\";\n    for (var i = 0; i < N; i++) {\n        result = result + S[i];\n    }\n    console.log(result);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 274, "deobfuscated": "var lines = [];\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0]);\n  var S = lines[1].split(\"\");\n  var K = Number(lines[2]);\n  for (var i = 0; i < N; i++) {\n    if (S[K - 1] !== S[i]) {\n      S[i] = \"*\";\n    }\n  }\n  var result = \"\";\n  for (var i = 0; i < N; i++) {\n    result = result + S[i];\n  }\n  console.log(result);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9241258076070366, "ngram_match_score": 0.8405024301456664, "weighted_ngram_match_score": 0.8560008002824799, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03125_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['trim']();const a=input['split']('\\x20')['map'](Number);console['log'](a[0x1]%a[0x0]==0x0?a[0x0]+a[0x1]:a[0x1]-a[0x0]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 12", "16"], ["8 20", "12"], ["1 1", "2"]], "original": "function main(input) {\n   input = input.trim();\n  const a = input.split(\" \").map(Number);\n\tconsole.log(a[1]%a[0]==0?a[0]+a[1]:a[1]-a[0]);\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 275, "deobfuscated": "function main(input) {\n  input = input.trim();\n  const a = input.split(\" \").map(Number);\n  console.log(a[1] % a[0] == 0 ? a[0] + a[1] : a[1] - a[0]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7775422726609447, "ngram_match_score": 0.378448113759187, "weighted_ngram_match_score": 0.7317209768845915, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03136_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);let L=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n))['sort']((a,b)=>b-a);const longest=L['shift']();const sum=L['reduce']((m,n)=>m+n);console['log'](longest<sum?'Yes':'No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n3 8 5 1", "Yes"], ["4\n3 8 4 1", "No"], ["10\n1 8 10 5 8 12 34 100 11 3", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    let L = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>b-a);\n    \n    const longest = L.shift();\n    const sum = L.reduce((m,n)=>m+n);\n    \n    console.log(longest < sum ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 276, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  let L = arg[1].split(\" \").map(n => parseInt(n)).sort((a, b) => b - a);\n  const longest = L.shift();\n  const sum = L.reduce((m, n) => m + n);\n  console.log(longest < sum ? \"Yes\" : \"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8232056913912319, "ngram_match_score": 0.5515284444452998, "weighted_ngram_match_score": 0.7412943211196279, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03285_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let N=Number(input);const func=()=>{if(N<0x4){console['log']('No');}else if(N%0x4===0x0){console['log']('Yes');}else if(N%0x7===0x0){console['log']('Yes');}else{N-=0x4;func();}};func();};Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["11", "Yes"], ["40", "Yes"], ["3", "No"]], "original": "'use strict';\n\nfunction Main(input) {\n  let N = Number(input);\n\n  const func = () => {\n    if(N < 4) {\n      console.log('No');\n    } else if (N % 4 === 0) {\n      console.log('Yes');\n    } else if (N % 7 === 0) {\n      console.log('Yes');\n    } else {\n      N -= 4;\n      func();\n    }\n  };\n\n  func();\n\n\n\n};\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 277, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let N = Number(input);\n  const func = () => {\n    if (N < 4) {\n      console.log(\"No\");\n    } else if (N % 4 === 0) {\n      console.log(\"Yes\");\n    } else if (N % 7 === 0) {\n      console.log(\"Yes\");\n    } else {\n      N -= 4;\n      func();\n    }\n  };\n  func();\n}\n;\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8351702246150609, "ngram_match_score": 0.724068684538192, "weighted_ngram_match_score": 0.7594693567791941, "syntax_match_score": 1.0, "dataflow_match_score": 0.8571428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03294_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var n=toInt(input[0x0]);var as=toIntArr(input[0x1]['split']('\\x20'));as['length']=n;var ans=-n;for(var i=0x0;i<n;i++){ans+=as[i];}console['log'](ans);}", "test_cases": [["3\n3 4 6", "10"], ["5\n7 46 11 20 11", "90"], ["7\n994 518 941 851 647 2 581", "4527"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar as = toIntArr(input[1].split(' '));\n\tas.length = n;\n\tvar ans = -n;\n\tfor(var i = 0; i < n; i++){\n\t\tans += as[i];\n\t}\n\tconsole.log(ans);\t\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 278, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var n = toInt(input[0]);\n  var as = toIntArr(input[1].split(\" \"));\n  as.length = n;\n  var ans = -n;\n  for (var i = 0; i < n; i++) {\n    ans += as[i];\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6293756981825415, "ngram_match_score": 0.20122198929072319, "weighted_ngram_match_score": 0.42091290018057814, "syntax_match_score": 0.907563025210084, "dataflow_match_score": 0.9878048780487805}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00047971936788770986, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.013157894736842035, "new_decrease_halstead_effort": -0.013157894736842035}}
{"filename": "p03316_1", "type": "JavaScript", "obfuscated": "function main(input){var inputA=input['toString']()['split']('');var sum=0x0;for(var i=0x0;i<inputA['length'];i++){sum+=parseInt(inputA[i]);}if(parseInt(input)%sum==0x0){console['log']('Yes');}else{console['log']('No');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["12", "Yes"], ["101", "No"], ["999999999", "Yes"]], "original": "function main(input) {\n  var inputA = input.toString().split('');\n  var sum = 0;\n  for (var i=0;i<inputA.length;i++){\n   \tsum += parseInt(inputA[i]);\n  }\n  if (parseInt(input) % sum == 0) {\n  \tconsole.log('Yes');\n  } else {\n  \tconsole.log('No');\n  }\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 279, "deobfuscated": "function main(input) {\n  var inputA = input.toString().split(\"\");\n  var sum = 0;\n  for (var i = 0; i < inputA.length; i++) {\n    sum += parseInt(inputA[i]);\n  }\n  if (parseInt(input) % sum == 0) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.784884255741515, "ngram_match_score": 0.5083333335082558, "weighted_ngram_match_score": 0.6312036894578041, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03359_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const list=input['split']('\\x20');const a=Number(list[0x0]);const b=Number(list[0x1]);if(a>b){console['log'](a-0x1);}else{console['log'](a);}", "test_cases": [["5 5", "5"], ["2 1", "1"], ["11 30", "11"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst list = input.split(' ');\n\nconst a = Number(list[0]);\n\nconst b = Number(list[1]);\n\nif (a > b) {\n  console.log(a - 1);\n} else {\n  console.log(a);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 280, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst list = input.split(\" \");\nconst a = Number(list[0]);\nconst b = Number(list[1]);\nif (a > b) {\n  console.log(a - 1);\n} else {\n  console.log(a);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8803128087249579, "ngram_match_score": 0.7546697757057081, "weighted_ngram_match_score": 0.7665814591941236, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03369_1", "type": "JavaScript", "obfuscated": "function main(s){var add=0x0;for(var i=0x0;i<0x3;i++){if(s[i]=='o'){add++;}}console['log'](0x2bc+add*0x64);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["oxo", "900"], ["ooo", "1000"], ["xxx", "700"]], "original": "function main (s) {\n    var add=0;\n    for(var i=0;i<3;i++){\n        if(s[i]=='o'){\n            add++;\n        }\n    }\n    console.log(700+add*100);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 281, "deobfuscated": "function main(s) {\n  var add = 0;\n  for (var i = 0; i < 3; i++) {\n    if (s[i] == \"o\") {\n      add++;\n    }\n  }\n  console.log(700 + add * 100);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5323188209313192, "ngram_match_score": 0.038240019669816105, "weighted_ngram_match_score": 0.09103526405546068, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03474_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var a=parseInt(input[0x0]['split']('\\x20')[0x0],0xa);var b=parseInt(input[0x0]['split']('\\x20')[0x1],0xa);var s=input[0x1];var regex=new RegExp('^[0-9]{'+a+'}-[0-9]{'+b+'}$','g');var f=s['match'](regex);console['log'](f==null?'No':'Yes');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4\n269-6650", "Yes"], ["1 1\n---", "No"], ["1 2\n7444", "No"]], "original": "function Main(input) {\n  input = input.split('\\n');\n\n  var a = parseInt(input[0].split(' ')[0], 10);\n  var b = parseInt(input[0].split(' ')[1], 10);\n  var s = input[1];\n\n  var regex = new RegExp(`^[0-9]{${a}}-[0-9]{${b}}$`, 'g');\n  var f = s.match(regex);\n\n  console.log(f == null ? 'No' : 'Yes');\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 282, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var a = parseInt(input[0].split(\" \")[0], 10);\n  var b = parseInt(input[0].split(\" \")[1], 10);\n  var s = input[1];\n  var regex = new RegExp(\"^[0-9]{\" + a + \"}-[0-9]{\" + b + \"}$\", \"g\");\n  var f = s.match(regex);\n  console.log(f == null ? \"No\" : \"Yes\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6757252996189095, "ngram_match_score": 0.4565990829251012, "weighted_ngram_match_score": 0.5623104315588529, "syntax_match_score": 0.8461538461538461, "dataflow_match_score": 0.8378378378378378}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03501_1", "type": "JavaScript", "obfuscated": "function Main(input){const numbers=input['split']('\\x20')['map'](n=>Number(n));const p1=numbers[0x0]*numbers[0x1];const p2=numbers[0x2];if(p1>p2){console['log'](p2);}else{console['log'](p1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 17 120", "119"], ["5 20 100", "100"], ["6 18 100", "100"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const p1 = numbers[0] * numbers[1];\n  const p2 = numbers[2];\n\n  if (p1 > p2) {\n    console.log(p2);\n  } else {\n    console.log(p1);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 283, "deobfuscated": "function Main(input) {\n  const numbers = input.split(\" \").map(n => Number(n));\n  const p1 = numbers[0] * numbers[1];\n  const p2 = numbers[2];\n  if (p1 > p2) {\n    console.log(p2);\n  } else {\n    console.log(p1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9265117158787954, "ngram_match_score": 0.8901732118131125, "weighted_ngram_match_score": 0.8958736517020696, "syntax_match_score": 1.0, "dataflow_match_score": 0.92}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03657_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a');const arr=input[0x0]['split']('\\x20');if(arr[0x0]%0x3===0x0||arr[0x1]%0x3===0x0||(arr[0x0]+arr[0x1])%0x3===0x0){console['log']('Possible');}else{console['log']('Impossible');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5", "Possible"], ["1 1", "Impossible"]], "original": "'use strict'\nfunction Main(input) {\n    input = input.split(\"\\n\");\n    const arr = input[0].split(' ')\n    if (arr[0] % 3 === 0 || arr[1] % 3 === 0 || (arr[0] + arr[1]) % 3 === 0) {\n        console.log('Possible')\n    } else {\n        console.log('Impossible')\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 284, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const arr = input[0].split(\" \");\n  if (arr[0] % 3 === 0 || arr[1] % 3 === 0 || (arr[0] + arr[1]) % 3 === 0) {\n    console.log(\"Possible\");\n  } else {\n    console.log(\"Impossible\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8738057591699179, "ngram_match_score": 0.7443350796330691, "weighted_ngram_match_score": 0.7508879570466023, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03997_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input[0x0]=Number(input[0x0]);input[0x1]=Number(input[0x1]);input[0x2]=Number(input[0x2]);console['log']((input[0x0]+input[0x1])*input[0x2]/0x2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n4\n2", "7"], ["4\n4\n4", "16"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    input[0] = Number(input[0]);\n    input[1] = Number(input[1]);\n    input[2] = Number(input[2]);\n    console.log((input[0] + input[1]) * input[2] / 2);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 285, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input[0] = Number(input[0]);\n  input[1] = Number(input[1]);\n  input[2] = Number(input[2]);\n  console.log((input[0] + input[1]) * input[2] / 2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9535841746340777, "ngram_match_score": 0.9073650826903659, "weighted_ngram_match_score": 0.906971615845945, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04044_1", "type": "JavaScript", "obfuscated": "function Main(input){var lines=input['split']('\\x0a');var s=lines['splice'](0x1,lines['length']);var s_sorted=s['sort']((a,b)=>a>b?0x1:-0x1);console['log'](s_sorted['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\ndxx\naxx\ncxx", "axxcxxdxx"]], "original": "function Main(input) {\n\tvar lines = input.split(\"\\n\");\n\tvar s = lines.splice(1, lines.length)\n\tvar s_sorted = s.sort((a, b) => a > b ? 1 : -1)\n\tconsole.log(s_sorted.join(''))\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 286, "deobfuscated": "function Main(input) {\n  var lines = input.split(\"\\n\");\n  var s = lines.splice(1, lines.length);\n  var s_sorted = s.sort((a, b) => a > b ? 1 : -1);\n  console.log(s_sorted.join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8883558999559378, "ngram_match_score": 0.7728082326259648, "weighted_ngram_match_score": 0.7806153671977861, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02264_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var t=Arr[0x0]['split']('\\x20')[0x1]-0x0;Arr['shift']();var T=0x0;while(Arr['length']!=0x0){var arr=Arr[0x0]['split']('\\x20');Arr['shift']();var a=arr[0x0];var b=arr[0x1]-0x0;if(b-t<=0x0){console['log'](a+'\\x20'+(T+b));T+=b;}else{Arr['push'](a+'\\x20'+(b-t));T+=t;}}", "test_cases": [["5 100\np1 150\np2 80\np3 200\np4 350\np5 20", "p2 180\np5 400\np1 450\np3 550\np4 800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar t=(Arr[0].split(\" \"))[1]-0;\nArr.shift();\nvar T=0;\nwhile(Arr.length!=0){\n   var arr=Arr[0].split(\" \");\n   Arr.shift();\n   var a=arr[0];\n   var b=arr[1]-0;\n   if(b-t<=0){\n      console.log(a+\" \"+(T+b));\n      T+=b;\n   }else{\n      Arr.push(a+\" \"+(b-t));\n      T+=t;\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 287, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar t = Arr[0].split(\" \")[1] - 0;\nArr.shift();\nvar T = 0;\nwhile (Arr.length != 0) {\n  var arr = Arr[0].split(\" \");\n  Arr.shift();\n  var a = arr[0];\n  var b = arr[1] - 0;\n  if (b - t <= 0) {\n    console.log(a + \" \" + (T + b));\n    T += b;\n  } else {\n    Arr.push(a + \" \" + (b - t));\n    T += t;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49457190853228783, "ngram_match_score": 0.027178154399807128, "weighted_ngram_match_score": 0.0747049853473217, "syntax_match_score": 0.8764044943820225, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02269_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['shift']();var obj={};Arr['forEach'](function(v){var arr=v['split']('\\x20');if(arr[0x0]=='insert')obj[arr[0x1]]=!![];if(arr[0x0]=='find')console['log'](obj['hasOwnProperty'](arr[0x1])?'yes':'no');});", "test_cases": [["5\ninsert A\ninsert T\ninsert C\nfind G\nfind A", "no\nyes"], ["13\ninsert AAA\ninsert AAC\ninsert AGA\ninsert AGG\ninsert TTT\nfind AAA\nfind CCC\nfind CCC\ninsert CCC\nfind CCC\ninsert T\nfind TTT\nfind T", "yes\nno\nno\nyes\nyes\nyes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.shift();\nvar obj={};\nArr.forEach(function(v){\nvar arr=v.split(\" \");\nif(arr[0]==\"insert\")obj[arr[1]]=true;\nif(arr[0]==\"find\")console.log(obj.hasOwnProperty(arr[1]) ? \"yes\":\"no\");\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 288, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.shift();\nvar obj = {};\nArr.forEach(function (v) {\n  var arr = v.split(\" \");\n  if (arr[0] == \"insert\") {\n    obj[arr[1]] = true;\n  }\n  if (arr[0] == \"find\") {\n    console.log(obj.hasOwnProperty(arr[1]) ? \"yes\" : \"no\");\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4792232140972315, "ngram_match_score": 0.03172414419318193, "weighted_ngram_match_score": 0.08213840916544114, "syntax_match_score": 0.803030303030303, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009938507568823862, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03658536585365857, "new_decrease_halstead_effort": 0.24670560619101034}}
{"filename": "p02392_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(x){var args=x['split']('\\x20')['map'](Number);var a=args[0x0];var b=args[0x1];var c=args[0x2];console['log']('%s',a<b&&b<c?'Yes':'No');});", "test_cases": [["1 3 8", "Yes"], ["3 8 1", "No"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(x) {\n    var args = x.split(' ').map(Number);\n    var a = args[0];\n    var b = args[1];\n    var c = args[2];\n    console.log('%s', a < b && b < c ? 'Yes' : 'No');\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 289, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (x) {\n  var args = x.split(\" \").map(Number);\n  var a = args[0];\n  var b = args[1];\n  var c = args[2];\n  console.log(\"%s\", a < b && b < c ? \"Yes\" : \"No\");\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7944287039460127, "ngram_match_score": 0.5736484906780535, "weighted_ngram_match_score": 0.6040663251059972, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02393_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cnt,i,j;input=input['split']('\\x20');for(cnt=0x0;cnt<0x3;cnt++){for(i=0x0;i<0x3;i++){if(input[i]>input[i+0x1]){j=input[i];input[i]=input[i+0x1];input[i+0x1]=j;}}}console['log']('%d\\x20%d\\x20%d',input[0x0],input[0x1],input[0x2]);", "test_cases": [["3 8 1", "1 3 8"]], "original": "var input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cnt,i,j;\n\ninput=input.split(\" \");\nfor(cnt=0;cnt<3;cnt++){\nfor(i=0;i<3;i++){\n    if(input[i]>input[i+1]){\n        j=input[i]\n        input[i]=input[i+1]\n        input[i+1]=j\n    }\n}\n}\n\nconsole.log(\"%d %d %d\",input[0],input[1],input[2]);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 290, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cnt;\nvar i;\nvar j;\ninput = input.split(\" \");\nfor (cnt = 0; cnt < 3; cnt++) {\n  for (i = 0; i < 3; i++) {\n    if (input[i] > input[i + 1]) {\n      j = input[i];\n      input[i] = input[i + 1];\n      input[i + 1] = j;\n    }\n  }\n}\nconsole.log(\"%d %d %d\", input[0], input[1], input[2]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5686417452600837, "ngram_match_score": 0.061538103874647754, "weighted_ngram_match_score": 0.2452869416818162, "syntax_match_score": 0.967741935483871, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0007880349769787687, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0235294117647058, "new_decrease_halstead_effort": -0.02352941176470602}}
{"filename": "p02397_1", "type": "JavaScript", "obfuscated": "function main(tmp){var i=0x0;while(tmp[i]!=0x0&&tmp[i+0x1]!=0x0){if(tmp[i]<tmp[i+0x1])console['log'](tmp[i]+'\\x20'+tmp[i+0x1]);else console['log'](tmp[i+0x1]+'\\x20'+tmp[i]);i=i+0x2;}}var lines=[];var b=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){var a=line['split']('\\x20');var c=parseInt(a[0x0],0xa);var d=parseInt(a[0x1],0xa);b['push'](c);b['push'](d);if(c==0x0&&d==0x0)main(b);});process['stdin']['on']('end',function(){});", "test_cases": [["3 2\n2 2\n5 3\n0 0", "2 3\n2 2\n3 5"]], "original": "function main(tmp) {\n  var i = 0;\n  while(tmp[i]!=0 && tmp[i+1]!=0){\n    if(tmp[i]<tmp[i+1])\n      console.log(tmp[i]+\" \"+tmp[i+1]);\n    else\n      console.log(tmp[i+1]+\" \"+tmp[i]);\n    i = i + 2;\n  }\n}\nvar lines = [];\nvar b = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var c = parseInt(a[0],10);\n  var d = parseInt(a[1],10);\n  b.push(c);\n  b.push(d);\n  if(c==0 && d==0)\n    main(b);\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 291, "deobfuscated": "function main(tmp) {\n  var i = 0;\n  while (tmp[i] != 0 && tmp[i + 1] != 0) {\n    if (tmp[i] < tmp[i + 1]) {\n      console.log(tmp[i] + \" \" + tmp[i + 1]);\n    } else {\n      console.log(tmp[i + 1] + \" \" + tmp[i]);\n    }\n    i = i + 2;\n  }\n}\nvar lines = [];\nvar b = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  var a = line.split(\" \");\n  var c = parseInt(a[0], 10);\n  var d = parseInt(a[1], 10);\n  b.push(c);\n  b.push(d);\n  if (c == 0 && d == 0) {\n    main(b);\n  }\n});\nprocess.stdin.on(\"end\", function () {});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6772138060544685, "ngram_match_score": 0.33051290937050326, "weighted_ngram_match_score": 0.5272848677197269, "syntax_match_score": 0.8849557522123894, "dataflow_match_score": 0.9661016949152542}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02552_1", "type": "JavaScript", "obfuscated": "const main=arg=>{console['log'](+arg===0x0?0x1:0x0);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1", "0"], ["0", "1"]], "original": "const main = (arg) => {\n  console.log(+arg === 0 ? 1 : 0);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 292, "deobfuscated": "const main = arg => {\n  console.log(+arg === 0 ? 1 : 0);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8562703100326303, "ngram_match_score": 0.8153551038173115, "weighted_ngram_match_score": 0.8180594696465432, "syntax_match_score": 0.7916666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02582_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['trim']();let list=input['split']('');let answer=0x0;for(let i=0x0;i<list['length'];i++){if(list[i]==='R'){if(answer===0x0){answer++;}else if(list[i-0x1]==='R'){answer++;}}}console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["RRS", "2"], ["SSS", "0"], ["RSR", "1"]], "original": "function main(input){\n  input = input.trim();\n  let list = input.split(\"\");\n  let answer = 0;\n  for(let i=0; i<list.length; i++){\n    if(list[i]===\"R\"){\n      if(answer===0){answer++;\n      }else if(list[i-1]===\"R\"){\n        answer++;\n      }                 \n    }\n  }\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 293, "deobfuscated": "function main(input) {\n  input = input.trim();\n  let list = input.split(\"\");\n  let answer = 0;\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] === \"R\") {\n      if (answer === 0) {\n        answer++;\n      } else if (list[i - 1] === \"R\") {\n        answer++;\n      }\n    }\n  }\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7300411757477245, "ngram_match_score": 0.3178289704467185, "weighted_ngram_match_score": 0.6023357325441796, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02724_1", "type": "JavaScript", "obfuscated": "function Main(input){var joy=0x0;joy+=Math['floor'](input/0x1f4)*0x3e8;joy+=Math['floor'](input%0x1f4/0x5)*0x5;console['log'](joy);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1024", "2020"], ["0", "0"], ["1000000000", "2000000000"]], "original": "function Main(input) {\n  var joy = 0;\n  joy += (Math.floor(input / 500)) * 1000;\n  joy += Math.floor((input % 500) / 5) * 5;\n  console.log(joy);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 294, "deobfuscated": "function Main(input) {\n  var joy = 0;\n  joy += Math.floor(input / 500) * 1000;\n  joy += Math.floor(input % 500 / 5) * 5;\n  console.log(joy);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7367986013724123, "ngram_match_score": 0.6554913610595182, "weighted_ngram_match_score": 0.6601240970617098, "syntax_match_score": 0.631578947368421, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02970_1", "type": "JavaScript", "obfuscated": "function Main(input){var dataList=input['split']('\\x0a');var data=dataList[0x0]['split']('\\x20');var n=data[0x0];var d=data[0x1];var checkNum=d*0x2+0x1;var num=Math['floor'](n/checkNum);var rest=n%checkNum;if(rest>0x0)num+=0x1;console['log'](num);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 2", "2"], ["14 3", "2"], ["20 4", "3"]], "original": "function Main(input) {\n  var dataList = input.split(\"\\n\");\n  var data = dataList[0].split(\" \");\n  var n = data[0];\n  var d = data[1];\n  var checkNum = (d * 2) + 1;\n  var num = Math.floor(n/checkNum);\n  var rest = n % checkNum;\n  if (rest > 0) num += 1;\n  console.log(num);\n  \n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 295, "deobfuscated": "function Main(input) {\n  var dataList = input.split(\"\\n\");\n  var data = dataList[0].split(\" \");\n  var n = data[0];\n  var d = data[1];\n  var checkNum = d * 2 + 1;\n  var num = Math.floor(n / checkNum);\n  var rest = n % checkNum;\n  if (rest > 0) {\n    num += 1;\n  }\n  console.log(num);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8333702464162878, "ngram_match_score": 0.7030379124891426, "weighted_ngram_match_score": 0.7532500907198679, "syntax_match_score": 0.8771929824561403, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03032_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x0a');const NK=input['shift']()['split']('\\x20')['map'](val=>Number(val));const count=Math['min'](...NK);input=input[0x0]['split']('\\x20')['map'](val=>Number(val));const ans=[];for(let l=0x0;l<=count;l++){for(let r=0x0;r<=count-l;r++){let temp=[...input['slice'](0x0,l),...input['slice'](NK[0x0]-r)]['sort']((a,b)=>a-b);let remain=NK[0x1]-l-r;for(let i=0x0;i<remain;i++){if(temp[i]>=0x0)break;temp[i]=0x0;}ans['push'](temp['reduce']((p,c)=>p+c,0x0));}}console['log'](Math['max'](...ans));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 4\n-10 8 2 1 2 6", "14"], ["6 4\n-6 -100 50 -2 -5 -3", "44"], ["6 3\n-6 -100 50 -2 -5 -3", "0"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  const NK = input.shift().split(' ').map(val => Number(val))\n  const count = Math.min(...NK)\n  input = input[0].split(' ').map(val => Number(val))\n\n  const ans = []\n\n  for(let l = 0; l <= count; l ++) {\n    for (let r = 0; r <= count - l; r ++) {\n      let temp = [\n        ...input.slice(0, l),\n        ...input.slice(NK[0] - r)\n      ].sort((a, b) => a - b)\n      let remain = NK[1] - l - r\n      for (let i = 0; i < remain; i++) {\n        if (temp[i] >= 0) break;\n        temp[i] = 0\n      }\n      ans.push(temp.reduce((p, c) => p + c, 0))\n    }\n  }\n  console.log(Math.max(...ans))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 296, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const NK = input.shift().split(\" \").map(val => Number(val));\n  const count = Math.min(...NK);\n  input = input[0].split(\" \").map(val => Number(val));\n  const ans = [];\n  for (let l = 0; l <= count; l++) {\n    for (let r = 0; r <= count - l; r++) {\n      let temp = [...input.slice(0, l), ...input.slice(NK[0] - r)].sort((a, b) => a - b);\n      let remain = NK[1] - l - r;\n      for (let i = 0; i < remain; i++) {\n        if (temp[i] >= 0) {\n          break;\n        }\n        temp[i] = 0;\n      }\n      ans.push(temp.reduce((p, c) => p + c, 0));\n    }\n  }\n  console.log(Math.max(...ans));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7162317488061071, "ngram_match_score": 0.4998323383034282, "weighted_ngram_match_score": 0.5095912662063417, "syntax_match_score": 0.9259259259259259, "dataflow_match_score": 0.9295774647887324}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03041_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let tmp=input['split']('\\x0a');let Num=tmp[0x0]['split']('\\x20')['map'](Number)[0x0];let Kji=tmp[0x0]['split']('\\x20')['map'](Number)[0x1];let Str=tmp[0x1]['trim']();let Change=Str[Kji-0x1];switch(Change){case'A':Change='a';break;case'B':Change='b';break;case'C':Change='c';break;}let StrArr=Str['split']('');StrArr[Kji-0x1]=Change;Str=StrArr['join']('');console['log'](Str);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 1\nABC", "aBC"], ["4 3\nCABA", "CAbA"]], "original": "'use strict'\nconst Main = input => {\n\n  let tmp = input.split('\\n');\n  let Num = tmp[0].split(' ').map(Number)[0];\n  let Kji = tmp[0].split(' ').map(Number)[1];\n  let Str = tmp[1].trim();\n  // console.log({ Num });\n  // console.log({ Kji });\n  // console.log({ Str });\n\n  let Change = Str[Kji - 1];\n\n  switch (Change) {\n    case 'A': Change = 'a';\n      break;\n    case 'B': Change = 'b';\n      break;\n    case 'C': Change = 'c';\n      break;\n  }\n\n  let StrArr = Str.split('');\n  StrArr[Kji - 1] = Change;\n  Str = StrArr.join('');\n\n  console.log(Str);\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 297, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let tmp = input.split(\"\\n\");\n  let Num = tmp[0].split(\" \").map(Number)[0];\n  let Kji = tmp[0].split(\" \").map(Number)[1];\n  let Str = tmp[1].trim();\n  let Change = Str[Kji - 1];\n  switch (Change) {\n    case \"A\":\n      Change = \"a\";\n      break;\n    case \"B\":\n      Change = \"b\";\n      break;\n    case \"C\":\n      Change = \"c\";\n      break;\n  }\n  let StrArr = Str.split(\"\");\n  StrArr[Kji - 1] = Change;\n  Str = StrArr.join(\"\");\n  console.log(Str);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5564130434769295, "ngram_match_score": 0.406088710489238, "weighted_ngram_match_score": 0.4267063205613375, "syntax_match_score": 1.0, "dataflow_match_score": 0.39285714285714285}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03079_1", "type": "JavaScript", "obfuscated": "function Main(input){var str=input;var tmp=str['split']('\\x20')['map'](Number);if(tmp[0x0]==tmp[0x1]&&tmp[0x1]==tmp[0x2]){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2 2", "Yes"], ["3 4 5", "No"]], "original": "function Main(input){\n  \n  var str = input;\n  var tmp = str.split(\" \").map(Number);\n\n  if(tmp[0]==tmp[1] && tmp[1]==tmp[2]){\n     console.log(\"Yes\");}\n  \n  else {\n       console.log(\"No\");}\n    \n}//function\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 298, "deobfuscated": "function Main(input) {\n  var str = input;\n  var tmp = str.split(\" \").map(Number);\n  if (tmp[0] == tmp[1] && tmp[1] == tmp[2]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6972738728416683, "ngram_match_score": 0.3128418715354195, "weighted_ngram_match_score": 0.4762536198312539, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03101_1", "type": "JavaScript", "obfuscated": "function main(arg){var size=arg['split']('\\x0a')[0x0]['split']('\\x20');var sel=arg['split']('\\x0a')[0x1]['split']('\\x20');console['log'](size[0x0]*size[0x1]-size[0x1]*sel[0x0]-(size[0x0]-sel[0x0])*sel[0x1]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n2 1", "1"], ["5 5\n2 3", "6"], ["2 4\n2 4", "0"]], "original": "function main(arg) {\n    var size = arg.split(\"\\n\")[0].split(\" \")\n    var sel = arg.split(\"\\n\")[1].split(\" \")\n    console.log(size[0]*size[1]-size[1]*sel[0]-(size[0]-sel[0])*sel[1])\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 299, "deobfuscated": "function main(arg) {\n  var size = arg.split(\"\\n\")[0].split(\" \");\n  var sel = arg.split(\"\\n\")[1].split(\" \");\n  console.log(size[0] * size[1] - size[1] * sel[0] - (size[0] - sel[0]) * sel[1]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7032840134177252, "ngram_match_score": 0.28536431582813054, "weighted_ngram_match_score": 0.5277717378427702, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03160_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});let N=parseInt(input[0x0][0x0],0xa);let v_h=input[0x1]['map'](e=>parseInt(e,0xa));let DP=[0x0,Math['abs'](v_h[0x1]-v_h[0x0])];let x1,x2;for(let i=0x2;i<N;i++){x1=DP[i-0x2]+Math['abs'](v_h[i]-v_h[i-0x2]);x2=DP[i-0x1]+Math['abs'](v_h[i]-v_h[i-0x1]);DP['push'](Math['min'](x1,x2));}console['log'](DP[N-0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n10 30 40 20", "30"], ["2\n10 10", "0"], ["6\n30 10 60 10 60 50", "40"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\n    let N = parseInt(input[0][0], 10);\n    let v_h = input[1].map(e => parseInt(e, 10));\n\n    let DP = [0, Math.abs(v_h[1] - v_h[0])];\n\n    let x1, x2;\n    for(let i = 2; i < N; i++){\n        x1 = DP[i - 2] + Math.abs(v_h[i] - v_h[i - 2]);\n        x2 = DP[i - 1] + Math.abs(v_h[i] - v_h[i - 1]);\n        DP.push(Math.min(x1, x2));\n    }\n\n    console.log(DP[N - 1]);\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 300, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  let N = parseInt(input[0][0], 10);\n  let v_h = input[1].map(e => parseInt(e, 10));\n  let DP = [0, Math.abs(v_h[1] - v_h[0])];\n  let x1;\n  let x2;\n  for (let i = 2; i < N; i++) {\n    x1 = DP[i - 2] + Math.abs(v_h[i] - v_h[i - 2]);\n    x2 = DP[i - 1] + Math.abs(v_h[i] - v_h[i - 1]);\n    DP.push(Math.min(x1, x2));\n  }\n  console.log(DP[N - 1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8910058105103327, "ngram_match_score": 0.7711690850388516, "weighted_ngram_match_score": 0.8305900060590827, "syntax_match_score": 0.9622641509433962, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00024011394962852872, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.006849315068493178, "new_decrease_halstead_effort": -0.006849315068493178}}
{"filename": "p03253_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{let [N,M]=args['trim']()['split']` `['map'](v=>v|0x0);const MOD=0x3b9aca00+0x7;const d=new Map();for(let i=0x2;i<=M;i++){if(M%i)continue;let k=0x0;do{k++;M/=i;}while(M%i===0x0);d['set'](i,k);}const mul=(a,b)=>((a>>0x10)*b%MOD*0x10000+(a&0xffff)*b)%MOD;const {fac:fac,finv:finv}=(max=>{const fac=[0x1,0x1],inv=[0x0,0x1],finv=[0x1,0x1];for(let i=0x2;i<max;i++){fac['push'](mul(fac[i-0x1],i));inv['push'](MOD-mul(inv[MOD%i],MOD/ i|0x0));finv['push'](mul(finv[i-0x1],inv[i]));}return{'fac':fac,'finv':finv};})(N+N);const nCr=(n,r)=>mul(fac[n],mul(finv[r],finv[n-r]));let c=0x1;for(const [,i]of d)c=mul(c,nCr(i+N-0x1,N-0x1));return''+c;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 6", "4"], ["3 12", "18"], ["100000 1000000000", "957870001"]], "original": "console.log((args=>{\n  let [N,M] = args.trim().split` `.map(v=>v|0);\n  const MOD = 1e9+7;\n  const d = new Map();\n  for ( let i = 2; i <= M; i++ ) {\n    if ( M % i ) continue;\n    let k = 0;\n    do {\n      k++;\n      M /= i;\n    } while ( M % i === 0 );\n    d.set( i, k );\n  }\n  const mul = (a,b) => ((a>>16)*b%MOD*65536+(a&65535)*b)%MOD;\n  const {fac,finv} = (max=>{\n    const fac = [1,1], inv = [0,1], finv = [1,1];\n    for (let i = 2; i < max; i++) {\n      fac.push( mul( fac[i-1], i) );\n      inv.push( MOD - mul(inv[MOD%i], MOD/i|0) );\n      finv.push( mul( finv[i-1], inv[i]) );\n    }\n    return {fac,finv};\n  })(N+N);\n  const nCr = (n,r) => mul(fac[n],mul(finv[r],finv[n-r]));\n  let c = 1;\n  for ( const [,i] of d ) c = mul(c,nCr(i+N-1,N-1));\n  return `${c}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 301, "deobfuscated": "console.log((args => {\n  let [N, M] = args.trim().split` `.map(v => v | 0);\n  const MOD = 1000000007;\n  const d = new Map();\n  for (let i = 2; i <= M; i++) {\n    if (M % i) {\n      continue;\n    }\n    let k = 0;\n    do {\n      k++;\n      M /= i;\n    } while (M % i === 0);\n    d.set(i, k);\n  }\n  const mul = (a, b) => ((a >> 16) * b % MOD * 65536 + (a & 65535) * b) % MOD;\n  const {\n    fac: fac,\n    finv: finv\n  } = (max => {\n    const fac = [1, 1];\n    const inv = [0, 1];\n    const finv = [1, 1];\n    for (let i = 2; i < max; i++) {\n      fac.push(mul(fac[i - 1], i));\n      inv.push(MOD - mul(inv[MOD % i], MOD / i | 0));\n      finv.push(mul(finv[i - 1], inv[i]));\n    }\n    return {\n      fac: fac,\n      finv: finv\n    };\n  })(N + N);\n  const nCr = (n, r) => mul(fac[n], mul(finv[r], finv[n - r]));\n  let c = 1;\n  for (const [, i] of d) {\n    c = mul(c, nCr(i + N - 1, N - 1));\n  }\n  return \"\" + c;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4528405657602408, "ngram_match_score": 0.23506057082092577, "weighted_ngram_match_score": 0.35021473569829814, "syntax_match_score": 0.8260869565217391, "dataflow_match_score": 0.4}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03254_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=Number(input[0x0]['split']('\\x20')[0x0]);var x=Number(input[0x0]['split']('\\x20')[0x1]);var a=input[0x1]['split']('\\x20')['map'](a=>Number(a))['sort']((a,b)=>a-b);var match=0x0;var left=0x0;for(var i=0x0;i<N;i++){if(x-a[i]>=0x0){x=x-a[i];match++;}else{break;}}if(x>0x0&&match!=0x0){match--;}console['log'](match);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 70\n20 30 10", "2"], ["3 10\n20 30 10", "1"], ["4 1111\n1 10 100 1000", "4"], ["2 10\n20 20", "0"]], "original": "function Main(input){\n  input = input.split('\\n');\n  var N = Number(input[0].split(' ')[0]);\n  var x = Number(input[0].split(' ')[1]);\n  var a = input[1].split(' ').map((a)=>Number(a)).sort((a,b)=>a-b);\n  var match = 0;\n  var left = 0;\n  for(var i=0;i<N;i++){\n    if(x-a[i]>=0){\n      x=x-a[i];\n      match++;\n    }else{\n      break;\n    }\n  }\n  if((x>0)&&(match!=0)){\n    match--;\n  }\n  console.log(match);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 302, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = Number(input[0].split(\" \")[0]);\n  var x = Number(input[0].split(\" \")[1]);\n  var a = input[1].split(\" \").map(a => Number(a)).sort((a, b) => a - b);\n  var match = 0;\n  var left = 0;\n  for (var i = 0; i < N; i++) {\n    if (x - a[i] >= 0) {\n      x = x - a[i];\n      match++;\n    } else {\n      break;\n    }\n  }\n  if (x > 0 && match != 0) {\n    match--;\n  }\n  console.log(match);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5542276144253597, "ngram_match_score": 0.20764144450921088, "weighted_ngram_match_score": 0.3985246054181174, "syntax_match_score": 0.8514851485148515, "dataflow_match_score": 0.7592592592592593}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03281_1", "type": "JavaScript", "obfuscated": "function main(input){var N=input[0x0]-0x0;var ans=0x0;for(var i=0x69;i<=N;i+=0x2){var cnt=0x0;for(var j=0x1;j<=i;j++){if(i%j==0x0)cnt++;if(cnt>0x8)break;}if(cnt==0x8)ans++;}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["105", "1"], ["7", "0"]], "original": "function main(input) {\n  var N = input[0]-0;\n  var ans = 0;\n  for(var i=105;i<=N;i+=2){\n    var cnt = 0;\n    for(var j=1;j<=i;j++){\n      if(i%j==0) cnt++;\n      if(cnt>8) break;\n    }\n    if(cnt == 8) ans++;\n  }\n  console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 303, "deobfuscated": "function main(input) {\n  var N = input[0] - 0;\n  var ans = 0;\n  for (var i = 105; i <= N; i += 2) {\n    var cnt = 0;\n    for (var j = 1; j <= i; j++) {\n      if (i % j == 0) {\n        cnt++;\n      }\n      if (cnt > 8) {\n        break;\n      }\n    }\n    if (cnt == 8) {\n      ans++;\n    }\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5960983711930727, "ngram_match_score": 0.17061013680502227, "weighted_ngram_match_score": 0.37251350669742744, "syntax_match_score": 0.8412698412698413, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03307_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');X=0x2;N=input['map'](input=>parseInt(input,0xa));if(N%X==0x0){console['log'](N[0x0]);}else{var ans=N[0x0]*X;console['log'](ans);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "6"], ["10", "10"], ["999999999", "1999999998"]], "original": "function Main(input){\n   input = input.split(' ');\n   X = 2;\n   N = input.map(input=>parseInt(input,10));\n   if(N % X ==0){\n      console.log(N[0]);\n      }else{\n      var ans = N[0] * X;\n      console.log(ans);\n      }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 304, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  X = 2;\n  N = input.map(input => parseInt(input, 10));\n  if (N % X == 0) {\n    console.log(N[0]);\n  } else {\n    var ans = N[0] * X;\n    console.log(ans);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7018345531513785, "ngram_match_score": 0.3353304858196052, "weighted_ngram_match_score": 0.472007726785909, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03353_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var k=+s[0x1];s=s[0x0];var a=0x60;var sl=s['length'];var ans={};var j;loop:while(a<=0x7a){a++;var n=s['indexOf'](String['fromCharCode'](a));while(n!==-0x1){for(j=0x0;j<k;j++){if(n+j>=sl)break;ans[s['slice'](n,n+j+0x1)]=0x1;}n=s['indexOf'](String['fromCharCode'](a),n+0x1);}j=0x0;var ans2=[];for(i in ans){j++;ans2['push'](i);}if(j>=k){ans2['sort']();console['log'](ans2[k-0x1]);break loop;}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["aba\n4", "b"], ["atcoderandatcodeer\n5", "andat"], ["z\n1", "z"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var k = +s[1];\n  s = s[0];\n  var a = 96;\n  var sl = s.length;\n  var ans = {};\n  var j;\n  loop:\n  while(a <= 122){\n    a++;\n    var n = s.indexOf(String.fromCharCode(a));\n    while(n !== -1){\n      for(j = 0; j < k; j++){\n        if(n + j >= sl)break;\n        ans[s.slice(n, n + j + 1)] = 1;\n      }\n      n = s.indexOf(String.fromCharCode(a), n+1);\n    }\n    j = 0;\n    var ans2 = [];\n    for(i in ans){\n      j++;\n      ans2.push(i)\n    }\n    if(j >= k){\n      ans2.sort();\n      console.log(ans2[k-1]);\n      break loop;\n    }\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 305, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var k = +s[1];\n  s = s[0];\n  var a = 96;\n  var sl = s.length;\n  var ans = {};\n  var j;\n  loop: while (a <= 122) {\n    a++;\n    var n = s.indexOf(String.fromCharCode(a));\n    while (n !== -1) {\n      for (j = 0; j < k; j++) {\n        if (n + j >= sl) {\n          break;\n        }\n        ans[s.slice(n, n + j + 1)] = 1;\n      }\n      n = s.indexOf(String.fromCharCode(a), n + 1);\n    }\n    j = 0;\n    var ans2 = [];\n    for (i in ans) {\n      j++;\n      ans2.push(i);\n    }\n    if (j >= k) {\n      ans2.sort();\n      console.log(ans2[k - 1]);\n      break loop;\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7590475104594927, "ngram_match_score": 0.5022237681001414, "weighted_ngram_match_score": 0.6296184476508727, "syntax_match_score": 0.9043478260869565, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03361_1", "type": "JavaScript", "obfuscated": "const main=input=>{const lines=input['split']('\\x0a');const [h,w]=lines[0x0]['split']('\\x20')['map'](Number);const data=Array(h)['fill'](![])['map']((_,i)=>lines[i+0x1]['split']('')['slice'](0x0,w)['map'](c=>c==='#'));const ans=data['every']((row,i)=>row['every']((cell,j)=>!cell||(data[i-0x1]||[])[j]||(data[i+0x1]||[])[j]||data[i][j-0x1]||data[i][j+0x1]));console['log'](ans?'Yes':'No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n.#.\n###\n.#.", "Yes"], ["5 5\n#.#.#\n.#.#.\n#.#.#\n.#.#.\n#.#.#", "No"], ["11 11\n...#####...\n.##.....##.\n#..##.##..#\n#..##.##..#\n#.........#\n#...###...#\n.#########.\n.#.#.#.#.#.\n##.#.#.#.##\n..##.#.##..\n.##..#..##.", "Yes"]], "original": "const main = input => {\n  const lines = input.split('\\n');\n  const [h, w] = lines[0].split(' ').map(Number);\n\n  const data = Array(h).fill(false).map((_, i) =>\n    lines[i + 1]\n      .split('')\n      .slice(0, w)\n      .map(c => c === '#')\n  );\n\n  const ans = data.every((row, i) =>\n    row.every(\n      (cell, j) =>\n        !cell ||\n        (data[i - 1] || [])[j] ||\n        (data[i + 1] || [])[j] ||\n        data[i][j - 1] ||\n        data[i][j + 1]\n    )\n  );\n  console.log(ans ? 'Yes' : 'No');\n};\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 306, "deobfuscated": "const main = input => {\n  const lines = input.split(\"\\n\");\n  const [h, w] = lines[0].split(\" \").map(Number);\n  const data = Array(h).fill(false).map((_, i) => lines[i + 1].split(\"\").slice(0, w).map(c => c === \"#\"));\n  const ans = data.every((row, i) => row.every((cell, j) => !cell || (data[i - 1] || [])[j] || (data[i + 1] || [])[j] || data[i][j - 1] || data[i][j + 1]));\n  console.log(ans ? \"Yes\" : \"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7019320539604812, "ngram_match_score": 0.5901863510003699, "weighted_ngram_match_score": 0.6021572494569395, "syntax_match_score": 1.0, "dataflow_match_score": 0.6153846153846154}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03379_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],X]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const _X=[]['concat'](X)['sort']((a,b)=>a-b);const M1=_X[N/0x2-0x1],M2=_X[N/0x2];const m=[];for(let i=0x0;i<N;i++){if(X[i]<=M1)m['push'](M2);else m['push'](M1);}return m['join']`\\n`;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4\n2 4 4 3", "4\n3\n3\n4"], ["2\n1 2", "2\n1"], ["6\n5 5 4 4 3 3", "4\n4\n4\n4\n4\n4"]], "original": "console.log((args=>{\n  const [[N],X] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  const _X = [].concat(X).sort((a,b)=>a-b);\n  const M1 = _X[N/2-1], M2 = _X[N/2];\n  const m = [];\n  for ( let i = 0; i < N; i++ ) {\n    if ( X[i] <= M1 ) m.push(M2); else m.push(M1);\n  }\n  return m.join`\\n`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 307, "deobfuscated": "console.log((args => {\n  const [[N], X] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const _X = [].concat(X).sort((a, b) => a - b);\n  const M1 = _X[N / 2 - 1];\n  const M2 = _X[N / 2];\n  const m = [];\n  for (let i = 0; i < N; i++) {\n    if (X[i] <= M1) {\n      m.push(M2);\n    } else {\n      m.push(M1);\n    }\n  }\n  return m.join`\\n`;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5469146892286203, "ngram_match_score": 0.19278830682831397, "weighted_ngram_match_score": 0.2931117788599828, "syntax_match_score": 0.8539325842696629, "dataflow_match_score": 0.8478260869565217}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03408_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const params=input['trim']()['split']('\\x0a');const N=Number(params[0x0]['trim']());const M=Number(params[N+0x1]['trim']());const blueCards=params['slice'](0x1,N+0x1);const redCards=params['slice'](N+0x2);let cardCount={};for(const card of blueCards){const c=card['trim']();if(cardCount['hasOwnProperty'](c)){cardCount[c]=cardCount[c]+0x1;}else{cardCount[c]=0x1;}}for(const card of redCards){const c=card['trim']();if(cardCount['hasOwnProperty'](c)){cardCount[c]=cardCount[c]-0x1;}else{cardCount[c]=0x1;}}let maxMoney=0x0;for(const [key,money]of Object['entries'](cardCount)){if(maxMoney<money){maxMoney=money;}}console['log'](maxMoney);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\napple\norange\napple\n1\ngrape", "2"], ["3\napple\norange\napple\n5\napple\napple\napple\napple\napple", "1"], ["1\nvoldemort\n10\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort", "0"], ["6\nred\nred\nblue\nyellow\nyellow\nred\n5\nred\nred\nyellow\ngreen\nblue", "1"]], "original": "// https://atcoder.jp/contests/abc091/tasks/abc091_b\n\"use strict\";\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const M = Number(params[N + 1].trim());\n  const blueCards = params.slice(1, N + 1);\n  const redCards = params.slice(N + 2);\n\n  let cardCount = {};\n  for (const card of blueCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] + 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n\n  for (const card of redCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] - 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n\n  let maxMoney = 0;\n  for (const [key, money] of Object.entries(cardCount)) {\n    if (maxMoney < money) {\n      maxMoney = money;\n    }\n  }\n\n  console.log(maxMoney);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 308, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const M = Number(params[N + 1].trim());\n  const blueCards = params.slice(1, N + 1);\n  const redCards = params.slice(N + 2);\n  let cardCount = {};\n  for (const card of blueCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] + 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n  for (const card of redCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] - 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n  let maxMoney = 0;\n  for (const [key, money] of Object.entries(cardCount)) {\n    if (maxMoney < money) {\n      maxMoney = money;\n    }\n  }\n  console.log(maxMoney);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9736695081433069, "ngram_match_score": 0.9453155576251466, "weighted_ngram_match_score": 0.9493624749480809, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03416_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x20');var A=input[0x0];var B=input[0x1];var cnt=0x0;function hoge(){var x=A['toString']();if(x[0x0]===x[0x4]&&x[0x1]===x[0x3]){return!![];}}while(A<=B){if(hoge()){cnt++;}A++;}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["11009 11332", "4"], ["31415 92653", "612"]], "original": "function Main(input) {\n    var input = input.split(' ');\n    var A = input[0];\n    var B = input[1];\n    var cnt = 0;\n    function hoge(){\n        var x = A.toString();\n        if(x[0] === x[4] && x[1] === x[3]){\n            return true;\n        }\n    }\n    while(A <= B) {\n     if(hoge()) {\n            cnt++;\n        }\n    A++;\n    }\n    console.log(cnt);\n    }\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 309, "deobfuscated": "function Main(input) {\n  var input = input.split(\" \");\n  var A = input[0];\n  var B = input[1];\n  var cnt = 0;\n  function hoge() {\n    var x = A.toString();\n    if (x[0] === x[4] && x[1] === x[3]) {\n      return true;\n    }\n  }\n  while (A <= B) {\n    if (hoge()) {\n      cnt++;\n    }\n    A++;\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7970193960362288, "ngram_match_score": 0.559588239619032, "weighted_ngram_match_score": 0.6284893445258833, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0033765124554414605, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03614457831325302, "new_decrease_halstead_effort": 0.18701578719210565}}
{"filename": "p03485_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const numbers=input['split']('\\x20');let sum=0x0;numbers['forEach'](function(number){sum+=Number(number);});console['log'](Math['ceil'](sum/numbers['length']));", "test_cases": [["1 3", "2"], ["7 4", "6"], ["5 5", "5"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n\nconst numbers = input.split(' ');\n\nlet sum = 0;\nnumbers.forEach(function (number) {\n    sum += Number(number);\n});\nconsole.log(Math.ceil(sum / numbers.length));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 310, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst numbers = input.split(\" \");\nlet sum = 0;\nnumbers.forEach(function (number) {\n  sum += Number(number);\n});\nconsole.log(Math.ceil(sum / numbers.length));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9213661828891649, "ngram_match_score": 0.839587623092576, "weighted_ngram_match_score": 0.8458771084640838, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03494_1", "type": "JavaScript", "obfuscated": "function main(input){var nums=input['split']('\\x0a')[0x1]['split']('\\x20')['map'](n=>parseInt(n,0xa));var count=0x0;while(nums['every'](n=>n%0x2===0x0)){count++;nums=nums['map'](n=>n/0x2);}console['log'](count);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n8 12 40", "2"], ["4\n5 6 8 10", "0"], ["6\n382253568 723152896 37802240 379425024 404894720 471526144", "8"]], "original": "function main(input){\n  var nums = input.split('\\n')[1].split(' ').map((n) => parseInt(n,10));\n  var count = 0;\n  while(nums.every((n) => (n % 2) === 0)) {\n        count++;\n        nums = nums.map((n) => n / 2);\n    }\n\n  console.log(count);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 311, "deobfuscated": "function main(input) {\n  var nums = input.split(\"\\n\")[1].split(\" \").map(n => parseInt(n, 10));\n  var count = 0;\n  while (nums.every(n => n % 2 === 0)) {\n    count++;\n    nums = nums.map(n => n / 2);\n  }\n  console.log(count);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5522589358152369, "ngram_match_score": 0.39051508781145083, "weighted_ngram_match_score": 0.43775142468026573, "syntax_match_score": 0.65, "dataflow_match_score": 0.7307692307692307}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03547_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');l=inp['shift']()['split']('\\x20');x=l[0x0];y=l[0x1];console['log'](x==y?'=':x['charCodeAt']()<y['charCodeAt']()?'<':'>');", "test_cases": [["A B", "<"], ["E C", ">"], ["F F", "="]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nx = l[0]\ny = l[1]\nconsole.log(x == y ? '=' : x.charCodeAt() < y.charCodeAt() ? '<' : '>')", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 312, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nl = inp.shift().split(\" \");\nx = l[0];\ny = l[1];\nconsole.log(x == y ? \"=\" : x.charCodeAt() < y.charCodeAt() ? \"<\" : \">\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6448895374724856, "ngram_match_score": 0.28977907494497107, "weighted_ngram_match_score": 0.28977907494497107, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03624_1", "type": "JavaScript", "obfuscated": "function main(input){const S=input['split']('');alphabetList='abcdefghijklmnopqrstuvwxyz'['split']('');arr=S['filter'](function(x,i,self){return self['indexOf'](x)===i;})['sort']();tmp=arrDiff(arr,alphabetList);function arrDiff(arr,alphabetList){var a=[];var diff=[];for(var i=0x0;i<arr['length'];i++){a[arr[i]]=!![];}for(var i=0x0;i<alphabetList['length'];i++){if(a[alphabetList[i]]){delete a[alphabetList[i]];}else{a[alphabetList[i]]=!![];}}for(var k in a){diff['push'](k);}return diff;}if(tmp['length']>0x0){ans=tmp[0x0];}else{ans='None';}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["atcoderregularcontest", "b"], ["abcdefghijklmnopqrstuvwxyz", "None"], ["fajsonlslfepbjtsaayxbymeskptcumtwrmkkinjxnnucagfrg", "d"]], "original": "function main (input) {\n    const S = input.split('');\n    alphabetList = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // 重複を削除\n    arr = S.filter(function (x,i,self){\n        return self.indexOf(x) === i;\n    }).sort();\n\n    tmp = arrDiff(arr,alphabetList);\n    // 差分抽出\n    function arrDiff (arr, alphabetList) {\n        var a = [];\n        var diff = [];\n        for (var i = 0; i < arr.length; i++) {\n            a[arr[i]] = true;\n        }\n        for (var i = 0; i < alphabetList.length; i++) {\n            if (a[alphabetList[i]]) {\n                delete a[alphabetList[i]];\n            } else {\n                a[alphabetList[i]] = true;\n            }\n        }\n        for (var k in a) {\n            diff.push (k);\n        }\n        return diff;\n    }\n    if (tmp.length > 0) {\n        ans = tmp[0];\n    } else {\n        ans = 'None';\n    }\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 313, "deobfuscated": "function main(input) {\n  const S = input.split(\"\");\n  alphabetList = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  arr = S.filter(function (x, i, self) {\n    return self.indexOf(x) === i;\n  }).sort();\n  tmp = arrDiff(arr, alphabetList);\n  function arrDiff(arr, alphabetList) {\n    var a = [];\n    var diff = [];\n    for (var i = 0; i < arr.length; i++) {\n      a[arr[i]] = true;\n    }\n    for (var i = 0; i < alphabetList.length; i++) {\n      if (a[alphabetList[i]]) {\n        delete a[alphabetList[i]];\n      } else {\n        a[alphabetList[i]] = true;\n      }\n    }\n    for (var k in a) {\n      diff.push(k);\n    }\n    return diff;\n  }\n  if (tmp.length > 0) {\n    ans = tmp[0];\n  } else {\n    ans = \"None\";\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8732504764504161, "ngram_match_score": 0.7402322073460735, "weighted_ngram_match_score": 0.7527696984555908, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006480260385559156, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03797468354430378, "new_decrease_halstead_effort": 0.118953245535524}}
{"filename": "p03645_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]['split']('\\x20')[0x0]);var m=parseInt(input[0x0]['split']('\\x20')[0x1]);x=new Array();var ans='IMPOSSIBLE';for(i=0x0;i<m;i++){tmp=input[i+0x1]['split']('\\x20');if(tmp[0x0]==0x1){if(x['indexOf'](tmp[0x1])!=-0x1){ans='POSSIBLE';break;}else{x['push'](tmp[0x1]);}}if(tmp[0x1]==n){if(x['indexOf'](tmp[0x0])!=-0x1){ans='POSSIBLE';break;}else{x['push'](tmp[0x0]);}}}console['log']('%s',ans);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n1 2\n2 3", "POSSIBLE"], ["4 3\n1 2\n2 3\n3 4", "IMPOSSIBLE"], ["100000 1\n1 99999", "IMPOSSIBLE"], ["5 5\n1 3\n4 5\n2 3\n2 4\n1 4", "POSSIBLE"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0].split(\" \")[0]);\n  var m = parseInt(input[0].split(\" \")[1]);\n  x= new Array();\n  var ans = \"IMPOSSIBLE\";\n  for(i=0;i<m;i++){\n    tmp=input[i+1].split(\" \");\n    if(tmp[0]==1){\n      if(x.indexOf(tmp[1])!=-1){\n        ans=\"POSSIBLE\";\n        break;\n      }else{\n      x.push(tmp[1]);\n      }\n    }\n    if(tmp[1]==n){\n      if(x.indexOf(tmp[0])!=-1){\n        ans=\"POSSIBLE\";\n        break;\n      }else{\n        x.push(tmp[0]);\n      }\n    }\n  }\n\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 314, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0].split(\" \")[0]);\n  var m = parseInt(input[0].split(\" \")[1]);\n  x = new Array();\n  var ans = \"IMPOSSIBLE\";\n  for (i = 0; i < m; i++) {\n    tmp = input[i + 1].split(\" \");\n    if (tmp[0] == 1) {\n      if (x.indexOf(tmp[1]) != -1) {\n        ans = \"POSSIBLE\";\n        break;\n      } else {\n        x.push(tmp[1]);\n      }\n    }\n    if (tmp[1] == n) {\n      if (x.indexOf(tmp[0]) != -1) {\n        ans = \"POSSIBLE\";\n        break;\n      } else {\n        x.push(tmp[0]);\n      }\n    }\n  }\n  console.log(\"%s\", ans);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7174408164393438, "ngram_match_score": 0.32759118321889874, "weighted_ngram_match_score": 0.542172082538476, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03729_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const S=arg['split']('\\x0a')[0x0]['split']('\\x20');let tail=S[0x0]['split']('')['pop']();for(let i=0x1;i<S['length'];i++){if(tail==S[i]['split']('')[0x0]){tail=S[i]['split']('')['pop']();}else{console['log']('NO');return;}}console['log']('YES');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["rng gorilla apple", "YES"], ["yakiniku unagi sushi", "NO"], ["a a a", "YES"], ["aaaaaaaaab aaaaaaaaaa aaaaaaaaab", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const S  = arg.split(\"\\n\")[0].split(\" \");\n    let tail = S[0].split(\"\").pop();\n\n    for(let i=1; i<S.length; i++) {\n        if(tail == S[i].split(\"\")[0]) {\n            tail = S[i].split(\"\").pop();\n        } else {\n            console.log(\"NO\");\n            return;\n        }\n    }\n    \n    console.log(\"YES\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 315, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const S = arg.split(\"\\n\")[0].split(\" \");\n  let tail = S[0].split(\"\").pop();\n  for (let i = 1; i < S.length; i++) {\n    if (tail == S[i].split(\"\")[0]) {\n      tail = S[i].split(\"\").pop();\n    } else {\n      console.log(\"NO\");\n      return;\n    }\n  }\n  console.log(\"YES\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8255116277241203, "ngram_match_score": 0.597480895286607, "weighted_ngram_match_score": 0.7045656156098746, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03795_1", "type": "JavaScript", "obfuscated": "let n=Number(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](0x320*n-0xc8*~~(n/0xf));", "test_cases": [["20", "15800"], ["60", "47200"]], "original": "let n = Number(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(800 * n - 200 * ~~(n / 15));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 316, "deobfuscated": "let n = Number(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(n * 800 - ~~(n / 15) * 200);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5960249082736877, "ngram_match_score": 0.33428661215627314, "weighted_ngram_match_score": 0.3414796876051442, "syntax_match_score": 0.7083333333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03943_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');input=input['map'](Number);children=0x2;var sub=function(arry,num){var sum=0x0;arry['forEach'](element=>{sum+=element;});return arry['includes'](sum/num);};if(sub(input,children)){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 30 20", "Yes"], ["30 30 100", "No"], ["56 25 31", "Yes"]], "original": "function Main(input){\n    input= input.split(\" \");\n    input= input.map(Number);\n    children = 2;\n    \n    var sub = function(arry,num){\n        var sum = 0;\n        arry.forEach(element => {\n            sum += element;\n        });\n        return arry.includes(sum/num);\n    }\n    \n    if(sub(input,children)){\n        console.log('Yes');\n    }else{\n        console.log('No');\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 317, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  input = input.map(Number);\n  children = 2;\n  function sub(arry, num) {\n    var sum = 0;\n    arry.forEach(element => {\n      sum += element;\n    });\n    return arry.includes(sum / num);\n  }\n  if (sub(input, children)) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6216396479171242, "ngram_match_score": 0.3647207222935308, "weighted_ngram_match_score": 0.4734048209419175, "syntax_match_score": 0.9076923076923077, "dataflow_match_score": 0.7407407407407407}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004896296918715626, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04347826086956519, "new_decrease_halstead_effort": 0.03739001569634626}}
{"filename": "p02394_1", "type": "JavaScript", "obfuscated": "function main(input){let numarray=input['split']('\\x20')['map'](Number);let W,H,x,y,r;W=numarray[0x0];H=numarray[0x1];x=numarray[0x2];y=numarray[0x3];r=numarray[0x4];if(x<r||y<r||x+r>W||y+r>H){console['log']('No');}else{console['log']('Yes');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 4 2 2 1", "Yes"], ["5 4 2 4 1", "No"]], "original": "function main(input){\n    let numarray=input.split(' ').map(Number);\n    let W,H,x,y,r;\n    W=numarray[0];\n    H=numarray[1];\n    x=numarray[2];\n    y=numarray[3];\n    r=numarray[4];\n    if (x<r || y<r || x+r > W || y+r > H){\n        console.log('No');\n    } else {\n        console.log('Yes');\n    }\n    \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 318, "deobfuscated": "function main(input) {\n  let numarray = input.split(\" \").map(Number);\n  let W;\n  let H;\n  let x;\n  let y;\n  let r;\n  W = numarray[0];\n  H = numarray[1];\n  x = numarray[2];\n  y = numarray[3];\n  r = numarray[4];\n  if (x < r || y < r || x + r > W || y + r > H) {\n    console.log(\"No\");\n  } else {\n    console.log(\"Yes\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5042340578665145, "ngram_match_score": 0.032005121753835464, "weighted_ngram_match_score": 0.07067990198275399, "syntax_match_score": 0.9420289855072463, "dataflow_match_score": 0.9722222222222222}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0018014838810694878, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.04597701149425282, "new_decrease_halstead_effort": -0.04597701149425282}}
{"filename": "p02402_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const arr=input['split'](/\\n/);const numbers=arr[0x1]['split']('\\x20')['map'](Number);let min=numbers[0x0];let max=numbers[0x0];let sum=0x0;numbers['forEach'](number=>{if(min>number)min=number;if(max<number)max=number;sum+=number;});console['log'](min+'\\x20'+max+'\\x20'+sum);", "test_cases": [["5\n10 1 5 4 17", "1 17 37"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst arr = input.split(/\\n/);\nconst numbers = arr[1].split(\" \").map(Number);\nlet min = numbers[0];\nlet max = numbers[0];\nlet sum = 0;\n\nnumbers.forEach(number => {\n  if(min > number) min = number;\n  if(max < number) max = number;\n  sum += number;\n})\n\nconsole.log(min + \" \" + max + \" \" + sum);\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 319, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst arr = input.split(/\\n/);\nconst numbers = arr[1].split(\" \").map(Number);\nlet min = numbers[0];\nlet max = numbers[0];\nlet sum = 0;\nnumbers.forEach(number => {\n  if (min > number) {\n    min = number;\n  }\n  if (max < number) {\n    max = number;\n  }\n  sum += number;\n});\nconsole.log(min + \" \" + max + \" \" + sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8063997741858313, "ngram_match_score": 0.6385500920640731, "weighted_ngram_match_score": 0.7140331316633789, "syntax_match_score": 0.873015873015873, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02411_1", "type": "JavaScript", "obfuscated": "let input=require('fs')['readFileSync']('/dev/stdin','UTF-8');let array=input['split']('\\x0a');let result='';for(let i=0x0;i<array['length'];i++){let data=array[i]['split']('\\x20')['map'](Number);let fScore=data[0x0];let lScore=data[0x1];let retest=data[0x2];if(fScore===-0x1&&lScore===-0x1&&retest===-0x1)break;if(i!==0x0)result+='\\x0a';if(fScore===-0x1||lScore===-0x1){result+='F';}else{let sum=fScore+lScore;switch(!![]){case sum>=0x50:result+='A';break;case 0x41<=sum&&sum<0x50:result+='B';break;case 0x32<=sum&&sum<0x41:result+='C';break;case 0x1e<=sum&&sum<0x32:result+=retest>=0x32?'C':'D';break;default:result+='F';};}}console['log'](result);", "test_cases": [["40 42 -1\n20 30 -1\n0 2 -1\n-1 -1 -1", "A\nC\nF"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'UTF-8');\nlet array = input.split('\\n'); // 3人分の試験データ配列\nlet result = '';\n\n// 学生分ループ\nfor (let i=0; i<array.length; i++) {\n  let data = array[i].split(' ').map(Number);\n  let fScore = data[0];\n  let lScore = data[1];\n  let retest = data[2];\n\n  // データが全て-1の時終了する\n  if (fScore === -1 && lScore === -1 && retest === -1) break;\n\n  if (i !== 0) result += '\\n';\n\n  // 中間試験、期末試験のいずれかを欠席した場合成績はF\n  if (fScore === -1 || lScore === -1) {\n    result += 'F';\n  } else {\n    let sum = fScore + lScore;\n    switch (true) {\n      case sum >= 80:\n        result += 'A';\n        break;\n      case 65 <= sum && sum < 80:\n        result += 'B';\n        break;\n      case 50 <= sum && sum < 65:\n        result += 'C';\n        break;\n      case 30 <= sum && sum < 50:\n        result += retest >= 50 ? 'C' : 'D';\n        break;\n      default:\n        result += 'F';\n    };\n  }\n}\nconsole.log(result);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 320, "deobfuscated": "let input = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nlet array = input.split(\"\\n\");\nlet result = \"\";\nfor (let i = 0; i < array.length; i++) {\n  let data = array[i].split(\" \").map(Number);\n  let fScore = data[0];\n  let lScore = data[1];\n  let retest = data[2];\n  if (fScore === -1 && lScore === -1 && retest === -1) {\n    break;\n  }\n  if (i !== 0) {\n    result += \"\\n\";\n  }\n  if (fScore === -1 || lScore === -1) {\n    result += \"F\";\n  } else {\n    let sum = fScore + lScore;\n    switch (true) {\n      case sum >= 80:\n        result += \"A\";\n        break;\n      case sum >= 65 && sum < 80:\n        result += \"B\";\n        break;\n      case sum >= 50 && sum < 65:\n        result += \"C\";\n        break;\n      case sum >= 30 && sum < 50:\n        result += retest >= 50 ? \"C\" : \"D\";\n        break;\n      default:\n        result += \"F\";\n    }\n    ;\n  }\n}\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7394229044277867, "ngram_match_score": 0.5624330087876221, "weighted_ngram_match_score": 0.5771093551921814, "syntax_match_score": 0.848, "dataflow_match_score": 0.9701492537313433}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006864213417934639, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017341040462427793, "new_decrease_halstead_effort": 0.14586846117434116}}
{"filename": "p02556_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input['shift']();let xy=input['map'](val=>val['split']('\\x20')['map'](Number));let arr0=xy['map'](val=>val[0x0]+val[0x1]);let arr1=xy['map'](val=>val[0x0]-val[0x1]);let arr0_calc=Math['max'](...arr0)-Math['min'](...arr0);let arr1_calc=Math['max'](...arr1)-Math['min'](...arr1);console['log'](Math['max'](arr0_calc,arr1_calc));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 1\n2 4\n3 2", "4"], ["2\n1 1\n1 1", "0"]], "original": "function Main(input) {\n\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    input.shift();\n    \n    let xy = input.map(val => val.split(\" \").map(Number));\n\n    let arr0 = xy.map(val => val[0] + val[1]);\n    let arr1 = xy.map(val => val[0] - val[1]);\n    \n    let arr0_calc = Math.max(...arr0) - Math.min(...arr0);\n    let arr1_calc = Math.max(...arr1) - Math.min(...arr1);\n \n    console.log(Math.max(arr0_calc,arr1_calc));\n    \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 321, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input.shift();\n  let xy = input.map(val => val.split(\" \").map(Number));\n  let arr0 = xy.map(val => val[0] + val[1]);\n  let arr1 = xy.map(val => val[0] - val[1]);\n  let arr0_calc = Math.max(...arr0) - Math.min(...arr0);\n  let arr1_calc = Math.max(...arr1) - Math.min(...arr1);\n  console.log(Math.max(arr0_calc, arr1_calc));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.918060915480462, "ngram_match_score": 0.8324460245988665, "weighted_ngram_match_score": 0.8397976373229815, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02599_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var [n,q]=input[0x0]['split']('\\x20')['map'](a=>parseInt(a,0xa));var colors=input[0x1]['split']('\\x20');for(var i=0x0;i<q;i++){var [start,end]=input[i+0x2]['split']('\\x20')['map'](a=>parseInt(a,0xa));var cs=[];for(var j=start-0x1;j<end;j++){var color=colors[j];if(cs['indexOf'](color)===-0x1){cs['push'](color);}}console['log'](cs['length']);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3\n1 2 1 3\n1 3\n2 4\n3 3", "2\n3\n1"], ["10 10\n2 5 6 5 2 1 7 9 7 2\n5 5\n2 4\n6 7\n2 2\n7 8\n7 9\n1 8\n6 9\n8 10\n6 8", "1\n2\n2\n1\n2\n2\n6\n3\n3\n3"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var [n, q] = input[0].split(\" \").map(a => parseInt(a, 10));\n  var colors = input[1].split(\" \");\n  for (var i = 0; i<q; i++) {\n    var [start, end] = input[i+2].split(\" \").map(a => parseInt(a, 10));\n    var cs = [];\n    for (var j = start - 1; j<end; j++) {\n      var color = colors[j];\n      if (cs.indexOf(color) === -1) {\n        cs.push(color);\n      }\n    }\n    console.log(cs.length);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 322, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var [n, q] = input[0].split(\" \").map(a => parseInt(a, 10));\n  var colors = input[1].split(\" \");\n  for (var i = 0; i < q; i++) {\n    var [start, end] = input[i + 2].split(\" \").map(a => parseInt(a, 10));\n    var cs = [];\n    for (var j = start - 1; j < end; j++) {\n      var color = colors[j];\n      if (cs.indexOf(color) === -1) {\n        cs.push(color);\n      }\n    }\n    console.log(cs.length);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9249607495161761, "ngram_match_score": 0.8115440967195124, "weighted_ngram_match_score": 0.888298901345192, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02714_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');const lines=[];const reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const inputLength=Number(lines[0x0]);const inputString=lines[0x1];const inputArray=inputString['split']('');const rArray=inputArray['filter'](element=>element==='R');const gArray=inputArray['filter'](element=>element==='G');const bArray=inputArray['filter'](element=>element==='B');let sum=0x0;for(let i=0x1;i<Number(inputLength)+0x1;i++){for(let j=i+0x1;j<Number(inputLength)+0x1;j++){const k=j+j-i;if(k<=inputLength&&inputArray[i-0x1]!==inputArray[j-0x1]&&inputArray[j-0x1]!==inputArray[k-0x1]&&inputArray[i-0x1]!==inputArray[k-0x1]){sum=sum+0x1;}}}console['log'](rArray['length']*gArray['length']*bArray['length']-sum);});", "test_cases": [["4\nRRGB", "1"], ["39\nRBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB", "1800"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nconst lines = [];\nconst reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line)\n});\nreader.on('close', () => {\n  const inputLength = Number(lines[0])\n  const inputString = lines[1]\n  const inputArray = inputString.split('')\n  const rArray = inputArray.filter(element => element === 'R')\n  const gArray = inputArray.filter(element => element === 'G')\n  const bArray = inputArray.filter(element => element === 'B')\n\n  let sum = 0\n  for (let i = 1; i < Number(inputLength) + 1; i++) {\n    for (let j = i + 1; j < Number(inputLength) + 1; j++) {\n      const k = j + j - i \n\n      if(k <= inputLength && inputArray[i - 1] !== inputArray[j - 1]  && inputArray[j - 1] !== inputArray[k - 1] && inputArray[i - 1] !== inputArray[k - 1]){\n        sum = sum + 1\n      }\n    }\n  }\n\n  console.log(rArray.length * gArray.length * bArray.length - sum)\n\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 323, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nconst lines = [];\nconst reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  const inputLength = Number(lines[0]);\n  const inputString = lines[1];\n  const inputArray = inputString.split(\"\");\n  const rArray = inputArray.filter(element => element === \"R\");\n  const gArray = inputArray.filter(element => element === \"G\");\n  const bArray = inputArray.filter(element => element === \"B\");\n  let sum = 0;\n  for (let i = 1; i < Number(inputLength) + 1; i++) {\n    for (let j = i + 1; j < Number(inputLength) + 1; j++) {\n      const k = j + j - i;\n      if (k <= inputLength && inputArray[i - 1] !== inputArray[j - 1] && inputArray[j - 1] !== inputArray[k - 1] && inputArray[i - 1] !== inputArray[k - 1]) {\n        sum = sum + 1;\n      }\n    }\n  }\n  console.log(rArray.length * gArray.length * bArray.length - sum);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8319482225657076, "ngram_match_score": 0.699508672032458, "weighted_ngram_match_score": 0.7158835823003242, "syntax_match_score": 0.9594594594594594, "dataflow_match_score": 0.9529411764705882}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02747_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('');let len=xs['length'];let ans=0x0;for(let i=0x0;i<=len;i++){if(i%0x2==0x0&&xs[i]=='h'&&[i+0x1]!='h'){ans+=0x1;}else if(i%0x2==0x1&&xs[i]=='i'&&xs[i+0x1]!='i'){ans+=0x1;}else{ans+=0x0;}}if(ans>=0x2){console['log']('Yes');}else{console['log']('No');}};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["hihi", "Yes"], ["hi", "Yes"], ["ha", "No"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('');\n   let len = xs.length;\n   let ans = 0;\n\n    for(let i =0; i<=len; i++) {\n       if(i%2==0 && xs[i]=='h'&&[i+1]!='h') {\n       \tans+=1;\n       }else if(i%2==1 && xs[i]=='i' &&xs[i+1]!='i'){\n        ans+=1;\n       }else{\n        ans+=0;\n       }\n    }\n    if(ans>=2){\n    console.log('Yes');\n    }else{\n    console.log('No');\n    }\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 324, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\"\");\n  let len = xs.length;\n  let ans = 0;\n  for (let i = 0; i <= len; i++) {\n    if (i % 2 == 0 && xs[i] == \"h\" && [i + 1] != \"h\") {\n      ans += 1;\n    } else if (i % 2 == 1 && xs[i] == \"i\" && xs[i + 1] != \"i\") {\n      ans += 1;\n    } else {\n      ans += 0;\n    }\n  }\n  if (ans >= 2) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47352920534804277, "ngram_match_score": 0.11427300311871937, "weighted_ngram_match_score": 0.24537196501601946, "syntax_match_score": 0.946236559139785, "dataflow_match_score": 0.5882352941176471}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02823_1", "type": "JavaScript", "obfuscated": "function Main(input){const array=input['trim']()['split']('\\x20')['map'](s=>parseInt(s));const N=array[0x0];var A=array[0x1];var B=array[0x2];var ans=0x0;var dist=B-A;if(dist%0x2){var diff=Math['min'](N-B,A-0x1)+0x1;ans+=diff;ans+=Math['floor']((B-A-0x1)/0x2);}else{ans=dist/0x2;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2 4", "1"], ["5 2 3", "2"]], "original": "function Main(input) {\n  const array = input.trim().split(' ').map(s => parseInt(s))\n  const N = array[0]\n  var A = array[1]\n  var B = array[2]\n\n  var ans = 0\n  var dist = B - A\n  if (dist % 2) {\n    var diff = Math.min(N - B, A - 1) + 1\n    ans += diff\n    ans += Math.floor((B - A - 1)/2)\n  } else {\n    ans = dist / 2\n  }\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 325, "deobfuscated": "function Main(input) {\n  const array = input.trim().split(\" \").map(s => parseInt(s));\n  const N = array[0];\n  var A = array[1];\n  var B = array[2];\n  var ans = 0;\n  var dist = B - A;\n  if (dist % 2) {\n    var diff = Math.min(N - B, A - 1) + 1;\n    ans += diff;\n    ans += Math.floor((B - A - 1) / 2);\n  } else {\n    ans = dist / 2;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7630792188451188, "ngram_match_score": 0.534354818799466, "weighted_ngram_match_score": 0.5605152480703705, "syntax_match_score": 1.0, "dataflow_match_score": 0.9574468085106383}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02844_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a');var N=parseInt(input[0x0]);var SasStr=input[0x1];var ans=0x0;var x1,x2,x3,xTmp,x1i,x2i,x3i,sTmp;for(var i=0x3e8;i<0x7d0;i++){xTmp=String(i);x1=xTmp['substr'](0x1,0x1);x2=xTmp['substr'](0x2,0x1);x3=xTmp['substr'](0x3,0x1);x1i=SasStr['indexOf'](x1);if(x1i!==-0x1){sTmp=SasStr['substr'](x1i+0x1);x2i=sTmp['indexOf'](x2);if(x2i!==-0x1){sTmp=sTmp['substr'](x2i+0x1);x3i=sTmp['indexOf'](x3);if(x3i!==-0x1){ans++;}}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n0224", "3"], ["6\n123123", "17"], ["19\n3141592653589793238", "329"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\");\n    var N = parseInt(input[0]);\n    var SasStr = input[1];\n    var ans = 0;\n    var x1, x2, x3, xTmp, x1i, x2i, x3i, sTmp;\n    for (var i = 1000; i < 2000; i++){\n    \txTmp = String(i);\n    \tx1 = xTmp.substr(1, 1);\n    \tx2 = xTmp.substr(2, 1);\n    \tx3 = xTmp.substr(3, 1);\n    \tx1i = SasStr.indexOf(x1);\n    \tif (x1i !== -1) { \n    \t\tsTmp = SasStr.substr(x1i + 1);\n    \t\tx2i = sTmp.indexOf(x2);\n    \t\tif (x2i !== -1) { \n    \t\tsTmp = sTmp.substr(x2i + 1);\n    \t\tx3i = sTmp.indexOf(x3);\n    \t\t\tif (x3i !== -1) { \n    \t\t\t\tans ++;\n    \t\t\t}\n    \t\t}\n    \t}\t\n    }\n    console.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 326, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\");\n  var N = parseInt(input[0]);\n  var SasStr = input[1];\n  var ans = 0;\n  var x1;\n  var x2;\n  var x3;\n  var xTmp;\n  var x1i;\n  var x2i;\n  var x3i;\n  var sTmp;\n  for (var i = 1000; i < 2000; i++) {\n    xTmp = String(i);\n    x1 = xTmp.substr(1, 1);\n    x2 = xTmp.substr(2, 1);\n    x3 = xTmp.substr(3, 1);\n    x1i = SasStr.indexOf(x1);\n    if (x1i !== -1) {\n      sTmp = SasStr.substr(x1i + 1);\n      x2i = sTmp.indexOf(x2);\n      if (x2i !== -1) {\n        sTmp = sTmp.substr(x2i + 1);\n        x3i = sTmp.indexOf(x3);\n        if (x3i !== -1) {\n          ans++;\n        }\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8914507556931281, "ngram_match_score": 0.7719122732301744, "weighted_ngram_match_score": 0.8280787837303722, "syntax_match_score": 0.9658119658119658, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.001996275919105006, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.046666666666666634, "new_decrease_halstead_effort": -0.046666666666666634}}
{"filename": "p02953_1", "type": "JavaScript", "obfuscated": "function Main(args){const firstRow=args['split']('\\x0a')[0x0];const row=args['split']('\\x0a')[0x1]['split']('\\x20');for(var i=row['length']-0x1;i>0x0;i--){if(row[i-0x1]>row[i]){row[i-0x1]-=0x1;}if(row[i-0x1]>row[i]){return console['log']('No');}}console['log']('Yes');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 2 1 1 3", "Yes"], ["4\n1 3 2 1", "No"], ["5\n1 2 3 4 5", "Yes"], ["1\n1000000000", "Yes"]], "original": "\nfunction Main(args){\n\n  const firstRow = args.split(\"\\n\")[0];\n  const row = args.split(\"\\n\")[1].split(\" \");\n\n  for(var i = row.length -1; i > 0; i-- ){\n    if( row[i-1] > row[i] ){\n      // console.log(row[i-1] + \"を\" + String(row[i-1] -1));\n      row[i-1] -= 1;\n    }\n    if( row[i-1] > row[i] ){\n      return console.log(\"No\");\n    }\n  }\n\n  console.log(\"Yes\");\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 327, "deobfuscated": "function Main(args) {\n  const firstRow = args.split(\"\\n\")[0];\n  const row = args.split(\"\\n\")[1].split(\" \");\n  for (var i = row.length - 1; i > 0; i--) {\n    if (row[i - 1] > row[i]) {\n      row[i - 1] -= 1;\n    }\n    if (row[i - 1] > row[i]) {\n      return console.log(\"No\");\n    }\n  }\n  console.log(\"Yes\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6867376344071969, "ngram_match_score": 0.35838315554468464, "weighted_ngram_match_score": 0.3885673820841033, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03238_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['trim']()['split']('\\x0a');const n=parseInt(args[0x0],0xa);if(n===0x1){console['log']('Hello\\x20World');}else{const a=parseInt(args[0x1],0xa);const b=parseInt(args[0x2],0xa);console['log'](a+b);}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1", "Hello World"], ["2\n3\n5", "8"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.trim().split('\\n')\n\tconst n = parseInt(args[0], 10)\n\n\tif (n === 1) {\n\t\tconsole.log('Hello World')\n\t} else {\n\t\tconst a = parseInt(args[1], 10)\n\t\tconst b = parseInt(args[2], 10)\n\t\tconsole.log(a + b)\n\t}\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 328, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.trim().split(\"\\n\");\n  const n = parseInt(args[0], 10);\n  if (n === 1) {\n    console.log(\"Hello World\");\n  } else {\n    const a = parseInt(args[1], 10);\n    const b = parseInt(args[2], 10);\n    console.log(a + b);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6805370691808118, "ngram_match_score": 0.5094426801175993, "weighted_ngram_match_score": 0.525205596605648, "syntax_match_score": 1.0, "dataflow_match_score": 0.6875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03264_1", "type": "JavaScript", "obfuscated": "function Main(input){var k=parseInt(input['split']('\\x0a')[0x0],0xa);var a=0x0;var b=0x0;for(i=0x1;i<=k;i++){if(i%0x2==0x0){a++;}else{b++;}}console['log'](a*b);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "2"], ["6", "9"], ["11", "30"], ["50", "625"]], "original": "function Main(input){\n  var k = parseInt(input.split(\"\\n\")[0],10);\n  var a = 0;\n  var b = 0;\n  for(i = 1; i <= k;i++){\n    if(i % 2 == 0){\n    \ta++;\n  \t}else{\n    \tb++;\n  \t}\n  }\n  console.log(a * b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 329, "deobfuscated": "function Main(input) {\n  var k = parseInt(input.split(\"\\n\")[0], 10);\n  var a = 0;\n  var b = 0;\n  for (i = 1; i <= k; i++) {\n    if (i % 2 == 0) {\n      a++;\n    } else {\n      b++;\n    }\n  }\n  console.log(a * b);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7249126815106578, "ngram_match_score": 0.39978951856120565, "weighted_ngram_match_score": 0.49986120748142543, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03288_1", "type": "JavaScript", "obfuscated": "function main(input){var R=input[0x0]-0x0;if(R<0x4b0)console['log']('ABC');else if(R<0xaf0)console['log']('ARC');else console['log']('AGC');}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["1199", "ABC"], ["1200", "ARC"], ["4208", "AGC"]], "original": "function main(input) {\n  var R = input[0]-0;\n  if(R<1200) console.log('ABC');\n  else if(R<2800) console.log('ARC');\n  else console.log('AGC');\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 330, "deobfuscated": "function main(input) {\n  var R = input[0] - 0;\n  if (R < 1200) {\n    console.log(\"ABC\");\n  } else if (R < 2800) {\n    console.log(\"ARC\");\n  } else {\n    console.log(\"AGC\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5904282141702223, "ngram_match_score": 0.16352670859125376, "weighted_ngram_match_score": 0.3410432909467782, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03293_1", "type": "JavaScript", "obfuscated": "function Main(input){ans='No';input=input['trim']()['split']('\\x0a');rotate=input[0x0];for(i=0x0;i<=input[0x0]['length'];i++){head=rotate['substr'](0x0,0x1);str=rotate['slice'](0x1)+head;if(input[0x1]===str){ans='Yes';break;}rotate=str;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["kyoto\ntokyo", "Yes"], ["abc\narc", "No"], ["aaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tans = 'No'\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.trim().split(\"\\n\");\n\trotate = input[0]\n\t// s = input[0].split(' ').map((n) => (parseInt(n)))\n\tfor (i = 0; i <= input[0].length; i++) {\n\t\thead = rotate.substr(0,1)\n\t\tstr = rotate.slice(1) + head\n\n\t\tif (input[1] === str) {\n\t\t\tans = 'Yes'\n\t\t\tbreak\n\t\t}\n\t\trotate = str\n\t}\n\n\t// sort\n\t// s.sort()\n\t// s.sort((a, b) => { return b - a})\n\n\n\n\t//出力\n\tconsole.log(ans)\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main(require('fs').readFileSync('./input.txt', 'utf-8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 331, "deobfuscated": "function Main(input) {\n  ans = \"No\";\n  input = input.trim().split(\"\\n\");\n  rotate = input[0];\n  for (i = 0; i <= input[0].length; i++) {\n    head = rotate.substr(0, 1);\n    str = rotate.slice(1) + head;\n    if (input[1] === str) {\n      ans = \"Yes\";\n      break;\n    }\n    rotate = str;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6607170738605889, "ngram_match_score": 0.2994533965298744, "weighted_ngram_match_score": 0.34341489891248106, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03477_1", "type": "JavaScript", "obfuscated": "function Main(input){const numbers=input['split']('\\x20')['map'](n=>Number(n));const l=numbers[0x0]+numbers[0x1];const r=numbers[0x2]+numbers[0x3];if(l>r){console['log']('Left');}else if(l<r){console['log']('Right');}else{console['log']('Balanced');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 8 7 1", "Left"], ["3 4 5 2", "Balanced"], ["1 7 6 4", "Right"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const l = numbers[0] + numbers[1];\n  const r = numbers[2] + numbers[3];\n  if (l > r) {\n    console.log('Left');\n  } else if (l < r) {\n    console.log('Right');\n  } else {\n    console.log('Balanced');\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 332, "deobfuscated": "function Main(input) {\n  const numbers = input.split(\" \").map(n => Number(n));\n  const l = numbers[0] + numbers[1];\n  const r = numbers[2] + numbers[3];\n  if (l > r) {\n    console.log(\"Left\");\n  } else if (l < r) {\n    console.log(\"Right\");\n  } else {\n    console.log(\"Balanced\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8493263146371817, "ngram_match_score": 0.7295408605410413, "weighted_ngram_match_score": 0.7391929694362565, "syntax_match_score": 1.0, "dataflow_match_score": 0.9285714285714286}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03557_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const lines=input['split']('\\x0a');const N=parseInt(lines['shift']());const A=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x))['sort']((a,b)=>a-b);const B=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x))['sort']((a,b)=>a-b);const C=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x))['sort']((a,b)=>a-b);let result=0x0;for(let b=0x0;b<N;b++){let current_b=B[b];let count_a=N;for(let a=0x0;a<N;a++){if(current_b<=A[a]){count_a--;}}let count_c=N;for(let c=0x0;c<N;c++){if(current_b>=C[c]){count_c--;}}result+=count_a*count_c;}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 5\n2 4\n3 6", "3"], ["3\n1 1 1\n2 2 2\n3 3 3", "27"], ["6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288", "87"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N  =parseInt(lines.shift());\n  const A = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n  const B = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n  const C = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n\n\n//console.log(A);\n//console.log(B);\n//console.log(C);\n\n  let result = 0;\n\n  for(let b=0;b<N;b++){\n    let current_b = B[b];\n\n    let count_a = N;\n    for(let a=0;a<N;a++){\n      if(current_b <= A[a] ){\n        count_a--;\n      }\n    }\n  \n\n    let count_c = N;\n    for(let c=0;c<N;c++){\n      if(current_b >= C[c]){\n        count_c --;\n      }\n    }\n//console.log([count_a,count_c])\n    result += count_a*count_c\n  }\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 333, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const N = parseInt(lines.shift());\n  const A = lines.shift().split(\" \").map(x => parseInt(x)).sort((a, b) => a - b);\n  const B = lines.shift().split(\" \").map(x => parseInt(x)).sort((a, b) => a - b);\n  const C = lines.shift().split(\" \").map(x => parseInt(x)).sort((a, b) => a - b);\n  let result = 0;\n  for (let b = 0; b < N; b++) {\n    let current_b = B[b];\n    let count_a = N;\n    for (let a = 0; a < N; a++) {\n      if (current_b <= A[a]) {\n        count_a--;\n      }\n    }\n    let count_c = N;\n    for (let c = 0; c < N; c++) {\n      if (current_b >= C[c]) {\n        count_c--;\n      }\n    }\n    result += count_a * count_c;\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5755627473174842, "ngram_match_score": 0.18915212756933278, "weighted_ngram_match_score": 0.28163818754330083, "syntax_match_score": 1.0, "dataflow_match_score": 0.8314606741573034}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03573_1", "type": "JavaScript", "obfuscated": "function Main(input){const numbers=input['split']('\\x20')['map'](n=>Number(n));const a=numbers[0x0];const b=numbers[0x1];const c=numbers[0x2];if(a===b){console['log'](c);}else if(b===c){console['log'](a);}else{console['log'](b);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 7 5", "7"], ["1 1 7", "7"], ["-100 100 100", "-100"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const a = numbers[0];\n  const b = numbers[1];\n  const c = numbers[2];\n\n  if (a === b) {\n    console.log(c);\n  } else if (b === c) {\n    console.log(a);\n  } else {\n    console.log(b);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 334, "deobfuscated": "function Main(input) {\n  const numbers = input.split(\" \").map(n => Number(n));\n  const a = numbers[0];\n  const b = numbers[1];\n  const c = numbers[2];\n  if (a === b) {\n    console.log(c);\n  } else if (b === c) {\n    console.log(a);\n  } else {\n    console.log(b);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9427775665387008, "ngram_match_score": 0.9164531641034833, "weighted_ngram_match_score": 0.9213237687179866, "syntax_match_score": 1.0, "dataflow_match_score": 0.9333333333333333}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03623_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a')[0x0]['split']('\\x20');if(Math['abs'](input[0x0]-input[0x1])<Math['abs'](input[0x0]-input[0x2]))console['log']('A');else console['log']('B');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2 7", "B"], ["1 999 1000", "A"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\")[0].split(\" \"); // 1行目がinput[0], 2行目がinput[1], …に入る\n    \n    if( Math.abs(input[0] - input[1]) < Math.abs(input[0] - input[2]))\n        console.log(\"A\");\n    else\n        console.log(\"B\");\n}\n \n// ※この行以降は編集しない (標準入力から一度に読み込みMainを呼び出します)\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 335, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\")[0].split(\" \");\n  if (Math.abs(input[0] - input[1]) < Math.abs(input[0] - input[2])) {\n    console.log(\"A\");\n  } else {\n    console.log(\"B\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.674259802348111, "ngram_match_score": 0.38956061025327415, "weighted_ngram_match_score": 0.4036324452930162, "syntax_match_score": 0.9038461538461539, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03759_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const [a,b,c]=arg['split']('\\x0a')[0x0]['split']('\\x20');console['log'](b-a==c-b?'YES':'NO');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 4 6", "YES"], ["2 5 6", "NO"], ["3 2 1", "YES"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const [a, b, c] = arg.split(\"\\n\")[0].split(\" \");\n    console.log(b - a == c - b ? \"YES\" : \"NO\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 336, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const [a, b, c] = arg.split(\"\\n\")[0].split(\" \");\n  console.log(b - a == c - b ? \"YES\" : \"NO\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9111880126637517, "ngram_match_score": 0.8178468362110027, "weighted_ngram_match_score": 0.8269052144440042, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03775_1", "type": "JavaScript", "obfuscated": "function divisor(n){var ret=[];for(var i=0x1;i*i<=n;i++){if(n%i==0x0){ret['push'](i);if(i*i!=n)ret['push'](n/ i);}}return ret;}function f(a,b){return Math['max']((''+a)['length'],(''+b)['length']);}function main(input){var inputs=input['split']('\\x0a');var n=parseInt(inputs[0x0],0xa);var divisors=divisor(n)['sort']((a,b)=>a-b);var surplus=divisors['length']%0x2;var lastIndex=divisors['length']-0x1;var halfLen=Math['floor'](divisors['length']/0x2);var minF=(''+n)['length'];for(var i=0x0;i<halfLen-surplus;i++){minF=Math['min'](minF,f(divisors[i],divisors[lastIndex-i]));}if(surplus==0x1)minF=Math['min'](minF,(''+divisors[halfLen])['length']);console['log'](minF);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10000", "3"], ["1000003", "7"], ["9876543210", "6"]], "original": "// Atcoder057 - C\nfunction divisor(n) {var ret=[]; for (var i=1;i*i<=n;i++){if(n%i==0){ret.push(i);if(i*i!=n)ret.push(n/i);}}return ret;}\nfunction f(a , b){return Math.max(`${a}`.length, `${b}`.length);}\nfunction main(input) {\n  var inputs = input.split('\\n');\n  var n = parseInt(inputs[0], 10);\n\n  var divisors = divisor(n).sort((a, b) => a - b);\n  var surplus = divisors.length % 2;\n\n  var lastIndex = divisors.length - 1;\n  var halfLen = Math.floor(divisors.length / 2);\n\n  var minF = `${n}`.length;\n  for (var i = 0; i < halfLen - surplus; i++) {\n    minF = Math.min(minF, f(divisors[i], divisors[lastIndex - i]));\n  }\n  if (surplus == 1) minF = Math.min(minF, `${divisors[halfLen]}`.length);\n\n  console.log(minF);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 337, "deobfuscated": "function divisor(n) {\n  var ret = [];\n  for (var i = 1; i * i <= n; i++) {\n    if (n % i == 0) {\n      ret.push(i);\n      if (i * i != n) {\n        ret.push(n / i);\n      }\n    }\n  }\n  return ret;\n}\nfunction f(a, b) {\n  return Math.max((\"\" + a).length, (\"\" + b).length);\n}\nfunction main(input) {\n  var inputs = input.split(\"\\n\");\n  var n = parseInt(inputs[0], 10);\n  var divisors = divisor(n).sort((a, b) => a - b);\n  var surplus = divisors.length % 2;\n  var lastIndex = divisors.length - 1;\n  var halfLen = Math.floor(divisors.length / 2);\n  var minF = (\"\" + n).length;\n  for (var i = 0; i < halfLen - surplus; i++) {\n    minF = Math.min(minF, f(divisors[i], divisors[lastIndex - i]));\n  }\n  if (surplus == 1) {\n    minF = Math.min(minF, (\"\" + divisors[halfLen]).length);\n  }\n  console.log(minF);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7176019238355793, "ngram_match_score": 0.4766082513051231, "weighted_ngram_match_score": 0.7152280154657655, "syntax_match_score": 0.75, "dataflow_match_score": 0.9285714285714286}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03803_1", "type": "JavaScript", "obfuscated": "let [a,b]=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x20')['map'](Number);if(a==0x1)a=0xe;if(b==0x1)b=0xe;console['log'](a==b?'Draw':a>b?'Alice':'Bob');", "test_cases": [["8 6", "Alice"], ["1 1", "Draw"], ["13 1", "Bob"]], "original": "let [a, b] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nif (a == 1) a = 14;\nif (b == 1) b = 14;\nconsole.log(a == b ? \"Draw\" : a > b ? \"Alice\" : \"Bob\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 338, "deobfuscated": "let [a, b] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nif (a == 1) {\n  a = 14;\n}\nif (b == 1) {\n  b = 14;\n}\nconsole.log(a == b ? \"Draw\" : a > b ? \"Alice\" : \"Bob\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8580018758672525, "ngram_match_score": 0.7097762659056455, "weighted_ngram_match_score": 0.7972312375633648, "syntax_match_score": 0.925, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03813_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const x=Number(s);const ans=x>=0x4b0?'ARC':'ABC';console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1000", "ABC"], ["2000", "ARC"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const x = Number(s);\n\n  const ans = (x >= 1200) ? 'ARC' : 'ABC';\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 339, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const x = Number(s);\n  const ans = x >= 1200 ? \"ARC\" : \"ABC\";\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.694546859006133, "ngram_match_score": 0.5339935148604845, "weighted_ngram_match_score": 0.5462772544973808, "syntax_match_score": 0.78125, "dataflow_match_score": 0.9166666666666666}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03860_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');tmp=input[0x1][0x0];console['log']('A'+tmp+'C');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["AtCoder Beginner Contest", "ABC"], ["AtCoder Snuke Contest", "ASC"], ["AtCoder X Contest", "AXC"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\" \");\n\ttmp = input[1][0];\n\tconsole.log(\"A\" + tmp + \"C\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 340, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  tmp = input[1][0];\n  console.log(\"A\" + tmp + \"C\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9476021264103511, "ngram_match_score": 0.8948393168143697, "weighted_ngram_match_score": 0.8955691888270347, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03944_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x0a');let WHN=input[0x0]['split']('\\x20')['map'](Number);let minX=0x0;let minY=0x0;let maxX=WHN[0x0];let maxY=WHN[0x1];const N=WHN[0x2];for(let i=0x1;i<=N;i++){let tmp=input[i]['trim']()['split']('\\x20')['map'](Number);let A=tmp[0x2];if(A===0x1){if(tmp[0x0]>minX){minX=tmp[0x0];}}else if(A===0x2){if(tmp[0x0]<maxX){maxX=tmp[0x0];}}else if(A===0x3){if(tmp[0x1]>minY){minY=tmp[0x1];}}else if(A===0x4){if(tmp[0x1]<maxY){maxY=tmp[0x1];}}}const X=maxX-minX;const Y=maxY-minY;if(X<=0x0||Y<=0x0){console['log'](0x0);}else{console['log'](X*Y);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 4 2\n2 1 1\n3 3 4", "9"], ["5 4 3\n2 1 1\n3 3 4\n1 4 2", "0"], ["10 10 5\n1 6 1\n4 1 3\n6 9 4\n9 4 2\n3 1 3", "64"]], "original": "\"use strict\"\nfunction Main(input) {\n  input = input.trim().split('\\n');\n  let WHN = input[0].split(' ').map(Number);\n  let minX = 0;\n  let minY = 0;\n  let maxX = WHN[0];\n  let maxY = WHN[1];\n  const N = WHN[2];\n \n  for(let i=1; i<=N; i++){\n    let tmp = input[i].trim().split(' ').map(Number)\n    let A = tmp[2];\n    if(A === 1){\n      if(tmp[0] > minX){\n        minX = tmp[0];\n      }\n    } else if (A === 2) {\n      if(tmp[0] < maxX){\n        maxX = tmp[0];\n      }\n    } else if (A === 3) {\n      if(tmp[1] > minY) {\n        minY = tmp[1];\n      }\n    } else if (A === 4) {\n      if(tmp[1] < maxY) {\n        maxY = tmp[1];\n      }\n    }\n  }\n \n  const X = maxX - minX;\n  const Y = maxY - minY;\n  if(X <= 0 || Y <= 0){\n    console.log(0);\n  } else {\n    console.log(X*Y);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 341, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  let WHN = input[0].split(\" \").map(Number);\n  let minX = 0;\n  let minY = 0;\n  let maxX = WHN[0];\n  let maxY = WHN[1];\n  const N = WHN[2];\n  for (let i = 1; i <= N; i++) {\n    let tmp = input[i].trim().split(\" \").map(Number);\n    let A = tmp[2];\n    if (A === 1) {\n      if (tmp[0] > minX) {\n        minX = tmp[0];\n      }\n    } else if (A === 2) {\n      if (tmp[0] < maxX) {\n        maxX = tmp[0];\n      }\n    } else if (A === 3) {\n      if (tmp[1] > minY) {\n        minY = tmp[1];\n      }\n    } else if (A === 4) {\n      if (tmp[1] < maxY) {\n        maxY = tmp[1];\n      }\n    }\n  }\n  const X = maxX - minX;\n  const Y = maxY - minY;\n  if (X <= 0 || Y <= 0) {\n    console.log(0);\n  } else {\n    console.log(X * Y);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7882786530015093, "ngram_match_score": 0.5908608656045, "weighted_ngram_match_score": 0.685541417634414, "syntax_match_score": 1.0, "dataflow_match_score": 0.8767123287671232}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03963_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');var tmp=input[0x0]['split']('\\x20');var N=tmp[0x0];var K=tmp[0x1];var pattern=K;for(i=0x1;i<N;i++){pattern*=K-0x1;}console['log'](pattern);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2", "2"], ["1 10", "10"]], "original": "function Main(input) {\n    // 1行目がinput[0], 2行目がinput[1], …に入る\n    var input = input.split(\"\\n\");\n    var tmp = input[0].split(\" \");\n    var N = tmp[0];\n    var K = tmp[1];\n\n    var pattern = K;\n    for (i = 1;i < N;i++) {\n\tpattern *= K - 1;\n    }\n\n    console.log(pattern);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 342, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var tmp = input[0].split(\" \");\n  var N = tmp[0];\n  var K = tmp[1];\n  var pattern = K;\n  for (i = 1; i < N; i++) {\n    pattern *= K - 1;\n  }\n  console.log(pattern);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8886377297181213, "ngram_match_score": 0.7719337246786363, "weighted_ngram_match_score": 0.7826171941938487, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00019_1", "type": "JavaScript", "obfuscated": "function main(input){var ans=0x1;var inputNum=toInt(input);for(var i=0x1;i<=input;i++){ans=ans*i;}console['log'](ans);}function toInt(str){return parseInt(str,0xa);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5", "120"]], "original": "function main(input){\n    var ans=1;\n    var inputNum=toInt(input);\n    for(var i=1;i<=input;i++){\n        ans=ans*i;\n    }\n    console.log(ans);\n}\nfunction toInt(str){\n    return parseInt(str, 10);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 343, "deobfuscated": "function main(input) {\n  var ans = 1;\n  var inputNum = toInt(input);\n  for (var i = 1; i <= input; i++) {\n    ans = ans * i;\n  }\n  console.log(ans);\n}\nfunction toInt(str) {\n  return parseInt(str, 10);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6500040571857673, "ngram_match_score": 0.19374128629783366, "weighted_ngram_match_score": 0.4062749424452353, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00021_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Number(p['shift']());var i=0x0;while(i++<n){var args=p['shift']()['split']('\\x20')['map'](Number);var x1=args['shift']();var y1=args['shift']();var x2=args['shift']();var y2=args['shift']();var x3=args['shift']();var y3=args['shift']();var x4=args['shift']();var y4=args['shift']();console['log'](((y2-y1)/(x2-x1))['toFixed'](0x5)===((y4-y3)/(x4-x3))['toFixed'](0x5)?'YES':'NO');}}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0", "YES\nNO"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  var i = 0;\n  while (i++ < n) {\n    var args = p.shift().split(' ').map(Number);\n    var x1 = args.shift();\n    var y1 = args.shift();\n    var x2 = args.shift();\n    var y2 = args.shift();\n    var x3 = args.shift();\n    var y3 = args.shift();\n    var x4 = args.shift();\n    var y4 = args.shift();\n    console.log(((y2 - y1) / (x2 - x1)).toFixed(5) === ((y4 - y3) / (x4 - x3)).toFixed(5) ? 'YES' : 'NO');\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 344, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\");\n  var n = Number(p.shift());\n  var i = 0;\n  while (i++ < n) {\n    var args = p.shift().split(\" \").map(Number);\n    var x1 = args.shift();\n    var y1 = args.shift();\n    var x2 = args.shift();\n    var y2 = args.shift();\n    var x3 = args.shift();\n    var y3 = args.shift();\n    var x4 = args.shift();\n    var y4 = args.shift();\n    console.log(((y2 - y1) / (x2 - x1)).toFixed(5) === ((y4 - y3) / (x4 - x3)).toFixed(5) ? \"YES\" : \"NO\");\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9048306547402816, "ngram_match_score": 0.8265096326825081, "weighted_ngram_match_score": 0.8463844148500472, "syntax_match_score": 1.0, "dataflow_match_score": 0.9464285714285714}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02259_1", "type": "JavaScript", "obfuscated": "function bubbleSort(A){var N=A['length'];var flag=0x1;var i=0x0;var cnt=0x0;while(flag==0x1){flag=0x0;for(var j=N-0x1;j>=i+0x1;j--){if(A[j]<A[j-0x1]){var m=A[j];A[j]=A[j-0x1];A[j-0x1]=m;flag=0x1;cnt++;}}i++;}return[A,cnt];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['shift']();var arr=Arr[0x0]['split']('\\x20')['map'](Number);var result=bubbleSort(arr);console['log'](result[0x0]['join']('\\x20'));console['log'](result[0x1]);", "test_cases": [["5\n5 3 2 4 1", "1 2 3 4 5\n8"], ["6\n5 2 4 6 1 3", "1 2 3 4 5 6\n9"]], "original": "function bubbleSort(A){\n   var N=A.length;\n   var flag=1;\n   var i=0;\n   var cnt=0;\n   while(flag==1){\n      flag=0;\n      for(var j=N-1;j>=i+1;j--){\n         if(A[j]<A[j-1]){\n         var m=A[j];\n         A[j]=A[j-1];\n         A[j-1]=m;\n         flag=1;\n         cnt++;\n         }\n      }\n      i++;   \n   }\n   return [A,cnt];\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.shift();\nvar arr=Arr[0].split(\" \").map(Number);\nvar result=bubbleSort(arr);\nconsole.log(result[0].join(\" \"));\nconsole.log(result[1]);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 345, "deobfuscated": "function bubbleSort(A) {\n  var N = A.length;\n  var flag = 1;\n  var i = 0;\n  var cnt = 0;\n  while (flag == 1) {\n    flag = 0;\n    for (var j = N - 1; j >= i + 1; j--) {\n      if (A[j] < A[j - 1]) {\n        var m = A[j];\n        A[j] = A[j - 1];\n        A[j - 1] = m;\n        flag = 1;\n        cnt++;\n      }\n    }\n    i++;\n  }\n  return [A, cnt];\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.shift();\nvar arr = Arr[0].split(\" \").map(Number);\nvar result = bubbleSort(arr);\nconsole.log(result[0].join(\" \"));\nconsole.log(result[1]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5718879190200213, "ngram_match_score": 0.10028505560794813, "weighted_ngram_match_score": 0.24334138682727746, "syntax_match_score": 0.9439252336448598, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02580_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const tmp=input['trim']()['split']('\\x0a');const [H,W,M]=tmp['shift']()['split']('\\x20')['map'](v=>Number(v));const hw=tmp['map'](v=>v['split']('\\x20')['map'](v=>Number(v)));let result=0x0;for(let i=0x1;i<=H;i++){const harr=hw['filter'](v=>v[0x0]!==i);const hlen=hw['length']-harr['length'];for(let j=0x1;j<=W;j++){const warr=harr['filter'](v=>v[0x1]===j);if(result<hlen+warr['length']){result=hlen+warr['length'];}}}console['log'](result);return;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 3\n2 2\n1 1\n1 3", "3"], ["3 3 4\n3 3\n3 1\n1 1\n1 2", "3"], ["5 5 10\n2 5\n4 3\n2 3\n5 5\n2 2\n5 4\n5 3\n5 1\n3 5\n1 4", "6"]], "original": "'use strict';\n\nfunction Main(input) {\n    //H W M\n    // (hi, wi)\n    const tmp = input.trim().split('\\n');\n    const [H, W, M] = tmp\n        .shift()\n        .split(' ')\n        .map((v) => Number(v));\n    const hw = tmp.map((v) => v.split(' ').map((v) => Number(v)));\n    // console.log(H, W, M, hw);\n    let result = 0;\n    for (let i = 1; i <= H; i++) {\n        const harr = hw.filter((v) => v[0] !== i);\n        const hlen = hw.length - harr.length;\n        for (let j = 1; j <= W; j++) {\n            const warr = harr.filter((v) => v[1] === j);\n            if (result < hlen + warr.length) {\n                result = hlen + warr.length;\n            }\n        }\n    }\n    console.log(result);\n    return;\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 346, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const tmp = input.trim().split(\"\\n\");\n  const [H, W, M] = tmp.shift().split(\" \").map(v => Number(v));\n  const hw = tmp.map(v => v.split(\" \").map(v => Number(v)));\n  let result = 0;\n  for (let i = 1; i <= H; i++) {\n    const harr = hw.filter(v => v[0] !== i);\n    const hlen = hw.length - harr.length;\n    for (let j = 1; j <= W; j++) {\n      const warr = harr.filter(v => v[1] === j);\n      if (result < hlen + warr.length) {\n        result = hlen + warr.length;\n      }\n    }\n  }\n  console.log(result);\n  return;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7057738977884349, "ngram_match_score": 0.6575217244827044, "weighted_ngram_match_score": 0.6764434318884263, "syntax_match_score": 0.7391304347826086, "dataflow_match_score": 0.75}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02606_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const L=parseInt(arg[0x0]['split']('\\x20')[0x0]);const R=parseInt(arg[0x0]['split']('\\x20')[0x1]);const d=parseInt(arg[0x0]['split']('\\x20')[0x2]);let answer=0x0;for(let i=L;i<=R;i++){if(i%d===0x0)answer++;}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 10 2", "3"], ["6 20 7", "2"], ["1 100 1", "100"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const L = parseInt(arg[0].split(\" \")[0]);\n    const R = parseInt(arg[0].split(\" \")[1]);\n    const d = parseInt(arg[0].split(\" \")[2]);\n    \n    let answer = 0;\n    \n    for(let i=L; i<=R; i++) {\n        if(i % d === 0) answer++;\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 347, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const L = parseInt(arg[0].split(\" \")[0]);\n  const R = parseInt(arg[0].split(\" \")[1]);\n  const d = parseInt(arg[0].split(\" \")[2]);\n  let answer = 0;\n  for (let i = L; i <= R; i++) {\n    if (i % d === 0) {\n      answer++;\n    }\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7973272616532153, "ngram_match_score": 0.588906627237257, "weighted_ngram_match_score": 0.7056655772703412, "syntax_match_score": 0.8947368421052632, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02657_1", "type": "JavaScript", "obfuscated": "const main=stdin=>{const [A,B]=stdin['trim']()['split']('\\x20')['map'](x=>parseInt(x));console['log'](A*B);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 5", "10"], ["100 100", "10000"]], "original": "const main = stdin => {\n  const [A, B] = stdin.trim().split(' ').map(x => parseInt(x))\n  console.log(A * B)\n}\n\n// 標準入力\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 348, "deobfuscated": "const main = stdin => {\n  const [A, B] = stdin.trim().split(\" \").map(x => parseInt(x));\n  console.log(A * B);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7196358771762983, "ngram_match_score": 0.4610768438800409, "weighted_ngram_match_score": 0.47629019423691704, "syntax_match_score": 1.0, "dataflow_match_score": 0.9411764705882353}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02660_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=parseInt(input[0x0]);var ans=0x0;var set=new Set();var N2=N;for(var i=0x2;i<Math['sqrt'](N);i++){var x=i;for(var j=0x1;x<N;j++){if(N2%Math['pow'](i,j)==0x0){ans++;N2=N2/Math['pow'](i,j);}else{break;}x=Math['pow'](i,j+0x1);}}if(ans==0x0&&N!=0x1){ans=0x1;}console['log']('%s',ans);return ans;}function debug(n){var input=document['getElementById']('input'+n)['value'];var ans=Main(input);var result='WA';if(ans==document['getElementById']('output'+n)['value']['split']('\\x0a')[0x0]){result='AC';}document['getElementById']('result'+n)['innerHTML']=result;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["24", "3"], ["1", "0"], ["64", "3"], ["1000000007", "1"], ["997764507000", "7"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var ans = 0;\n  var set = new Set();\n  var N2=N;\n  for(var i=2;i<Math.sqrt(N);i++){\n    var x =i;\n    for(var j=1;x<N;j++){\n      if(N2%Math.pow(i,j)==0){\n        ans++;\n        N2=N2/Math.pow(i,j);\n      }else{\n        break;\n      }\n      x=Math.pow(i,j+1);\n    }\n  }\n  if(ans==0&&N!=1){\n    ans=1;\n  }\n  \n\n\n\n  console.log('%s', ans);\n  return ans;\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 349, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var ans = 0;\n  var set = new Set();\n  var N2 = N;\n  for (var i = 2; i < Math.sqrt(N); i++) {\n    var x = i;\n    for (var j = 1; x < N; j++) {\n      if (N2 % Math.pow(i, j) == 0) {\n        ans++;\n        N2 = N2 / Math.pow(i, j);\n      } else {\n        break;\n      }\n      x = Math.pow(i, j + 1);\n    }\n  }\n  if (ans == 0 && N != 1) {\n    ans = 1;\n  }\n  console.log(\"%s\", ans);\n  return ans;\n}\nfunction debug(n) {\n  var input = document.getElementById(\"input\" + n).value;\n  var ans = Main(input);\n  var result = \"WA\";\n  if (ans == document.getElementById(\"output\" + n).value.split(\"\\n\")[0]) {\n    result = \"AC\";\n  }\n  document.getElementById(\"result\" + n).innerHTML = result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6714384164392555, "ngram_match_score": 0.21365817231783713, "weighted_ngram_match_score": 0.4720954934391849, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02688_1", "type": "JavaScript", "obfuscated": "function Main(input){tmp=input['split']('\\x0a');tmp2=tmp[0x0]['split']('\\x20');var n=parseInt(tmp2[0x0],0xa);var k=parseInt(tmp2[0x1],0xa);tmp['shift']();arry=tmp['slice']();list=[];count=0x0;tmp3=[];for(let i=0x0;i<arry['length'];i++){if(i%0x2!==0x0){arry[i]=arry[i]['split']('\\x20');tmp3=arry[i]['map'](Number);for(let index=0x0;index<tmp3['length'];index++){list['push'](tmp3[index]);}}}for(let i=0x1;i<=n;i++){if(list['indexOf'](i)>=0x0){}else{count+=0x1;}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n2\n1 3\n1\n3", "1"], ["3 3\n1\n3\n1\n3\n1\n3", "2"]], "original": "function Main(input) {\n    tmp = input.split(\"\\n\");\n    tmp2 = tmp[0].split(\" \");\n    var n = parseInt(tmp2[0], 10);\n    var k = parseInt(tmp2[1], 10);\n    tmp.shift();\n    arry = tmp.slice();\n    list = [];\n    count = 0;\n    tmp3 = [];\n\n    for (let i = 0; i < arry.length; i++) {\n       if (i % 2 !== 0) {\n\n           arry[i] = arry[i].split(\" \");\n           tmp3 = arry[i].map(Number);\n\n           for (let index = 0; index < tmp3.length; index++) {\n               list.push(tmp3[index]);\n           }\n       }\n    }\n  \n    for (let i = 1; i <= n; i++) {\n        if (list.indexOf(i) >= 0) {\n            \n        } else{\n            count += 1;\n        }        \n    }\n\n    console.log(count);    \n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 350, "deobfuscated": "function Main(input) {\n  tmp = input.split(\"\\n\");\n  tmp2 = tmp[0].split(\" \");\n  var n = parseInt(tmp2[0], 10);\n  var k = parseInt(tmp2[1], 10);\n  tmp.shift();\n  arry = tmp.slice();\n  list = [];\n  count = 0;\n  tmp3 = [];\n  for (let i = 0; i < arry.length; i++) {\n    if (i % 2 !== 0) {\n      arry[i] = arry[i].split(\" \");\n      tmp3 = arry[i].map(Number);\n      for (let index = 0; index < tmp3.length; index++) {\n        list.push(tmp3[index]);\n      }\n    }\n  }\n  for (let i = 1; i <= n; i++) {\n    if (list.indexOf(i) >= 0) {} else {\n      count += 1;\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.977901518926411, "ngram_match_score": 0.9551807182865804, "weighted_ngram_match_score": 0.9564253574190634, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02713_1", "type": "JavaScript", "obfuscated": "function gcd(i,j,k){var max=0x0;if(max<i){max=i;}if(max<j){max=j;}if(max<k){max=k;}var a=0x0;for(var count=0x1;count<=max;count++){if(i%count==0x0&&i>=count&&(j%count==0x0&&j>=count)&&(k%count==0x0&&k>=count)){a=count;}}return a;}function Main(input){var N=parseInt(input,0xa);var sum=0x0;for(var i=0x1;i<=N;i++){for(var j=0x1;j<=N;j++){for(var k=0x1;k<=N;k++){sum+=gcd(i,j,k);}}}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2", "9"], ["200", "10813692"]], "original": "function gcd(i,j,k){\n    var max = 0;\n    if(max<i){max = i;}\n    if(max<j){max = j;}\n    if(max<k){max = k;}\n    var a =0;\n    for(var count=1;count<=max;count++){\n        if((i%count ==0 && i>=count) && (j%count == 0 && j>=count) && (k%count == 0 && k>=count)){a = count;}    \n    }\n\n    return a;\n\n}\n\nfunction Main(input) {\n    var N = parseInt(input,10);\n    var sum = 0;\n    for(var i=1;i<=N;i++){\n        for(var j=1;j<=N;j++){\n            for(var k=1;k<=N;k++){\n                //console.log(i+\",\"+j+\",\"+k)\n                sum += gcd(i,j,k);\n            }\n        }\n    }\n    \n    console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 351, "deobfuscated": "function gcd(i, j, k) {\n  var max = 0;\n  if (max < i) {\n    max = i;\n  }\n  if (max < j) {\n    max = j;\n  }\n  if (max < k) {\n    max = k;\n  }\n  var a = 0;\n  for (var count = 1; count <= max; count++) {\n    if (i % count == 0 && i >= count && j % count == 0 && j >= count && k % count == 0 && k >= count) {\n      a = count;\n    }\n  }\n  return a;\n}\nfunction Main(input) {\n  var N = parseInt(input, 10);\n  var sum = 0;\n  for (var i = 1; i <= N; i++) {\n    for (var j = 1; j <= N; j++) {\n      for (var k = 1; k <= N; k++) {\n        sum += gcd(i, j, k);\n      }\n    }\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6003398244287794, "ngram_match_score": 0.16354580571051405, "weighted_ngram_match_score": 0.3520992062903177, "syntax_match_score": 0.8857142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02727_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['split']('\\x0a');const parse=(s,sep)=>{return s['split'](sep)['map'](v=>parseInt(v));};const split=(s,sep,result,keys)=>{var arr=parse(s,sep);for(var i=0x0;i<arr['length'];i++){result[keys[i]]=arr[i];}};var inp={};split(lines[0x0],'\\x20',inp,['x','y','a','b','c']);var p=parse(lines[0x1],'\\x20')['sort']((a,b)=>b-a);var q=parse(lines[0x2],'\\x20')['sort']((a,b)=>b-a);var r=parse(lines[0x3],'\\x20')['sort']((a,b)=>b-a);p=p['slice'](0x0,inp['x']);q=q['slice'](0x0,inp['y']);console['log'](p['concat'](q,r)['sort']((a,b)=>b-a)['slice'](0x0,inp['x']+inp['y'])['reduce']((a,b)=>a+b,0x0));", "test_cases": [["1 2 2 2 1\n2 4\n5 1\n3", "12"], ["2 2 2 2 2\n8 6\n9 1\n2 1", "25"], ["2 2 4 4 4\n11 12 13 14\n21 22 23 24\n1 2 3 4", "74"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nconst parse = (s, sep) => {\n  return s.split(sep).map(v => parseInt(v));\n}\nconst split = (s, sep, result, keys) => {\n  var arr = parse(s, sep);\n  for (var i = 0; i < arr.length; i++) {\n    result[keys[i]] = arr[i];\n  }\n}\n\nvar inp = {};\nsplit(lines[0], ' ', inp, ['x', 'y', 'a', 'b', 'c']);\nvar p = parse(lines[1], ' ').sort((a, b) => b - a);\nvar q = parse(lines[2], ' ').sort((a, b) => b - a);\nvar r = parse(lines[3], ' ').sort((a, b) => b - a);\np = p.slice(0, inp.x);\nq = q.slice(0, inp.y);\n\nconsole.log(p.concat(q, r).sort((a, b) => b - a).slice(0, inp.x + inp.y).reduce((a, b) => a + b, 0));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 352, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.split(\"\\n\");\nconst parse = (s, sep) => {\n  return s.split(sep).map(v => parseInt(v));\n};\nconst split = (s, sep, result, keys) => {\n  var arr = parse(s, sep);\n  for (var i = 0; i < arr.length; i++) {\n    result[keys[i]] = arr[i];\n  }\n};\nvar inp = {};\nsplit(lines[0], \" \", inp, [\"x\", \"y\", \"a\", \"b\", \"c\"]);\nvar p = parse(lines[1], \" \").sort((a, b) => b - a);\nvar q = parse(lines[2], \" \").sort((a, b) => b - a);\nvar r = parse(lines[3], \" \").sort((a, b) => b - a);\np = p.slice(0, inp.x);\nq = q.slice(0, inp.y);\nconsole.log(p.concat(q, r).sort((a, b) => b - a).slice(0, inp.x + inp.y).reduce((a, b) => a + b, 0));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8317540114944082, "ngram_match_score": 0.7353184002481785, "weighted_ngram_match_score": 0.7438715587729325, "syntax_match_score": 1.0, "dataflow_match_score": 0.8478260869565217}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0008159460176011546, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.023812075014133294}}
{"filename": "p02783_1", "type": "JavaScript", "obfuscated": "function Main(input){const args=input['split']('\\x20');const H=parseInt(args[0x0],0xa);const A=parseInt(args[0x1],0xa);const ans=Math['ceil'](H/A);console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 4", "3"], ["1 10000", "1"], ["10000 1", "10000"]], "original": "function Main(input) {\n    const args = input.split(' ');\n    const H = parseInt(args[0], 10);\n    const A = parseInt(args[1], 10);\n    const ans = Math.ceil(H/A)\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 353, "deobfuscated": "function Main(input) {\n  const args = input.split(\" \");\n  const H = parseInt(args[0], 10);\n  const A = parseInt(args[1], 10);\n  const ans = Math.ceil(H / A);\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8601436231918249, "ngram_match_score": 0.687028746592056, "weighted_ngram_match_score": 0.7535457461752434, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02842_1", "type": "JavaScript", "obfuscated": "function Main(input){var tax=1.08;var invalid=':(';var input=input['split']('\\x0a');var n=parseInt(input[0x0],0xa);var x=Math['floor'](n/tax);var reverse_n=Math['floor'](x*tax);if(n==reverse_n){console['log'](x);return;}var x_u=x+0x1;if(Math['floor'](x_u*tax)==n){console['log'](x_u);return;}var x_u2=x+0x2;if(Math['floor'](x_u2*tax)==n){console['log'](x_u2);return;}var x_d=x-0x1;if(Math['floor'](x_d*tax)==n){console['log'](x_d);return;}var x_d=x-0x2;if(Math['floor'](x_d*tax)==n){console['log'](x_d);return;}console['log'](invalid);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["432", "400"], ["1079", ":("], ["1001", "927"]], "original": "function Main(input) {\n    var tax = 1.08;\n    var invalid = \":(\";\n\n\tvar input = input.split(\"\\n\");\n\tvar n = parseInt(input[0], 10);\n\n    var x = Math.floor( n / tax);\n\n    var reverse_n = Math.floor(x * tax);\n\n    if (n == reverse_n) {\n        console.log(x);\n        return;\n    } \n\n    var x_u = x + 1;\n    if ((Math.floor((x_u) * tax)) == n) {\n        console.log(x_u);\n        return;\n    }\n\n    var x_u2 = x + 2;\n    if ((Math.floor((x_u2) * tax)) == n) {\n        console.log(x_u2);\n        return;\n    }\n\n    var x_d = x - 1;\n    if ((Math.floor((x_d) * tax)) == n) {\n        console.log(x_d);\n        return;\n    }\n\n    var x_d = x - 2;\n    if ((Math.floor((x_d) * tax)) == n) {\n        console.log(x_d);\n        return;\n    }\n\n    console.log(invalid);\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 354, "deobfuscated": "function Main(input) {\n  var tax = 1.08;\n  var invalid = \":(\";\n  var input = input.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var x = Math.floor(n / tax);\n  var reverse_n = Math.floor(x * tax);\n  if (n == reverse_n) {\n    console.log(x);\n    return;\n  }\n  var x_u = x + 1;\n  if (Math.floor(x_u * tax) == n) {\n    console.log(x_u);\n    return;\n  }\n  var x_u2 = x + 2;\n  if (Math.floor(x_u2 * tax) == n) {\n    console.log(x_u2);\n    return;\n  }\n  var x_d = x - 1;\n  if (Math.floor(x_d * tax) == n) {\n    console.log(x_d);\n    return;\n  }\n  var x_d = x - 2;\n  if (Math.floor(x_d * tax) == n) {\n    console.log(x_d);\n    return;\n  }\n  console.log(invalid);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8267146238320635, "ngram_match_score": 0.7862268525042142, "weighted_ngram_match_score": 0.7940691428240396, "syntax_match_score": 0.7265625, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03018_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let s=input;let tmp=s['split']('ABC');let result=tmp['length']-0x1;while(tmp['length']!==0x1){s=tmp['join']('BCA');tmp=s['split']('ABC');result+=tmp['length']-0x1;}console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["ABCABC", "3"], ["C", "0"], ["ABCACCBABCBCAABCB", "6"]], "original": "'use strict'\n\nfunction Main(input) {\n  let s = input;\n  let tmp = s.split('ABC');\n  let result = tmp.length - 1;\n  while(tmp.length !== 1){\n    s = tmp.join('BCA')\n    tmp = s.split('ABC');\n    result += tmp.length - 1;\n  }\n  console.log(result)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 355, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let s = input;\n  let tmp = s.split(\"ABC\");\n  let result = tmp.length - 1;\n  while (tmp.length !== 1) {\n    s = tmp.join(\"BCA\");\n    tmp = s.split(\"ABC\");\n    result += tmp.length - 1;\n  }\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7573162375783873, "ngram_match_score": 0.5177176499382816, "weighted_ngram_match_score": 0.5550255612448327, "syntax_match_score": 1.0, "dataflow_match_score": 0.9565217391304348}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03047_1", "type": "JavaScript", "obfuscated": "function Main(input){var str=input['trim']();var h=str['split']('\\x20');var n=h[0x0];var k=h[0x1];var kekka=0x0;var kekka=n-k+0x1;console['log'](kekka);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2", "2"], ["13 3", "11"]], "original": "function Main(input){\n  \n  var str = input.trim();\n    var h = str.split(\" \");\n  var n = h[0];\n  var k = h[1];\n\n  var kekka = 0;\n  \n  var kekka = n-k+1;\n  \n  console.log(kekka);\n \n}//function end\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 356, "deobfuscated": "function Main(input) {\n  var str = input.trim();\n  var h = str.split(\" \");\n  var n = h[0];\n  var k = h[1];\n  var kekka = 0;\n  var kekka = n - k + 1;\n  console.log(kekka);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8679026466217459, "ngram_match_score": 0.6845606977494435, "weighted_ngram_match_score": 0.7870498887375402, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03289_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['trim']();var arr=input['split']('')['map'](n=>n);var ans=0x0;if(arr[0x0]=='A'){ans++;}var temp=0x0;var memo=0x0;for(var i=0x2;i<arr['length']-0x1;i++){if(arr[i]=='C'){temp++;memo=i;}}if(temp==0x1){ans++;}if(ans==0x2){arr['splice'](0x0,0x1);arr['splice'](memo-0x1,0x1);if(/A-Z/['test'](arr)==![]){ans++;}if(ans==0x3){console['log']('AC');}else{console['log']('WA');}}else{console['log']('WA');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["AtCoder", "AC"], ["ACoder", "WA"], ["AcycliC", "WA"], ["AtCoCo", "WA"], ["Atcoder", "WA"]], "original": "function main(input) {\n  input=input.trim();\n  var arr = input.split(\"\").map((n) => (n));\n  var ans = 0\n\n  if(arr[0]==\"A\"){\n    ans++\n  }\n\n  var temp=0;\n  var memo=0;\n  for(var i=2; i<arr.length-1; i++){\n    if(arr[i]==\"C\"){\n      temp++;\n      memo=i\n    }\n  }\n  if(temp==1){\n    ans++\n  }\n\n  if(ans==2){\n    arr.splice(0,1);\n    arr.splice(memo-1,1);\n    if(/A-Z/.test(arr)==false){\n      ans++\n    }\n    if(ans==3){\n      console.log(\"AC\");\n    }else{\n      console.log(\"WA\");\n    }\n  }else{\n    console.log(\"WA\");\n  }\n \n\n  \n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 357, "deobfuscated": "function main(input) {\n  input = input.trim();\n  var arr = input.split(\"\").map(n => n);\n  var ans = 0;\n  if (arr[0] == \"A\") {\n    ans++;\n  }\n  var temp = 0;\n  var memo = 0;\n  for (var i = 2; i < arr.length - 1; i++) {\n    if (arr[i] == \"C\") {\n      temp++;\n      memo = i;\n    }\n  }\n  if (temp == 1) {\n    ans++;\n  }\n  if (ans == 2) {\n    arr.splice(0, 1);\n    arr.splice(memo - 1, 1);\n    if (/A-Z/.test(arr) == false) {\n      ans++;\n    }\n    if (ans == 3) {\n      console.log(\"AC\");\n    } else {\n      console.log(\"WA\");\n    }\n  } else {\n    console.log(\"WA\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5067556282361514, "ngram_match_score": 0.03322139136759549, "weighted_ngram_match_score": 0.07072419850008672, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007832065227896035, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015151515151515138, "new_decrease_halstead_effort": 0.1659257769149034}}
{"filename": "p03351_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split'](/\\s/);input['forEach'](function(e,i,a){a[i]=Number(a[i]);});var ans='No';if(Math['abs'](input[0x0]-input[0x2])<=input[0x3]){ans='Yes';}if(Math['abs'](input[0x0]-input[0x1])<=input[0x3]&&Math['abs'](input[0x1]-input[0x2])<=input[0x3]){ans='Yes';}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 7 9 3", "Yes"], ["100 10 1 2", "No"], ["10 10 10 1", "Yes"], ["1 100 2 10", "Yes"]], "original": "function Main(input){\n\tinput=input.split(/\\s/);\n\tinput.forEach(function(e,i,a){a[i]=Number(a[i]);});\n\t\n\tvar ans=\"No\";\n\tif(Math.abs(input[0]-input[2])<=input[3]){ans=\"Yes\";}\n\tif(Math.abs(input[0]-input[1])<=input[3]&&Math.abs(input[1]-input[2])<=input[3]){ans=\"Yes\";}\n\t\n\tconsole.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 358, "deobfuscated": "function Main(input) {\n  input = input.split(/\\s/);\n  input.forEach(function (e, i, a) {\n    a[i] = Number(a[i]);\n  });\n  var ans = \"No\";\n  if (Math.abs(input[0] - input[2]) <= input[3]) {\n    ans = \"Yes\";\n  }\n  if (Math.abs(input[0] - input[1]) <= input[3] && Math.abs(input[1] - input[2]) <= input[3]) {\n    ans = \"Yes\";\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5761776750660556, "ngram_match_score": 0.04949727050808081, "weighted_ngram_match_score": 0.2552134297561415, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03371_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');A=parseInt(input[0x0]['split']('\\x20')[0x0]);B=parseInt(input[0x0]['split']('\\x20')[0x1]);C=parseInt(input[0x0]['split']('\\x20')[0x2]);X=parseInt(input[0x0]['split']('\\x20')[0x3]);Y=parseInt(input[0x0]['split']('\\x20')[0x4]);var ans=0x0;if(C<=(A+B)/0x2&&C>=Math['min'](A,B)){if(X<=Y){ans=C*X*0x2+B*(Y-X);}else{ans=C*Y*0x2+A*(X-Y);}}else if(C<=(A+B)/0x2&&C<Math['min'](A,B)){ans=C*Math['max'](X,Y)*0x2;}else{ans=X*A+Y*B;}console['log']('%s',ans);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1500 2000 1600 3 2", "7900"], ["1500 2000 1900 3 2", "8500"], ["1500 2000 500 90000 100000", "100000000"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  A = parseInt(input[0].split(\" \")[0]);\n  B = parseInt(input[0].split(\" \")[1]);\n  C = parseInt(input[0].split(\" \")[2]);\n  X = parseInt(input[0].split(\" \")[3]);\n  Y = parseInt(input[0].split(\" \")[4]);\n  var ans =0;\n  if(C<=(A+B)/2&&C>=Math.min(A,B)){\n    if(X<=Y){\n    ans=C*X*2+B*(Y-X);\n    }else{\n      ans=C*Y*2+A*(X-Y);\n    }\n  }else if(C<=(A+B)/2&&C<Math.min(A,B)){\n    ans=C*Math.max(X,Y)*2;\n  }else{\n    ans=X*A+Y*B;\n\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 359, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  A = parseInt(input[0].split(\" \")[0]);\n  B = parseInt(input[0].split(\" \")[1]);\n  C = parseInt(input[0].split(\" \")[2]);\n  X = parseInt(input[0].split(\" \")[3]);\n  Y = parseInt(input[0].split(\" \")[4]);\n  var ans = 0;\n  if (C <= (A + B) / 2 && C >= Math.min(A, B)) {\n    if (X <= Y) {\n      ans = C * X * 2 + B * (Y - X);\n    } else {\n      ans = C * Y * 2 + A * (X - Y);\n    }\n  } else if (C <= (A + B) / 2 && C < Math.min(A, B)) {\n    ans = C * Math.max(X, Y) * 2;\n  } else {\n    ans = X * A + Y * B;\n  }\n  console.log(\"%s\", ans);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7242082215945185, "ngram_match_score": 0.26662084176376555, "weighted_ngram_match_score": 0.6302120446143086, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03415_1", "type": "JavaScript", "obfuscated": "'use strict';function main(arg){const letters=arg['split']('\\x0a')['map'](n=>n['split'](''));console['log'](letters[0x0][0x0]+letters[0x1][0x1]+letters[0x2][0x2]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["ant\nobe\nrec", "abc"], ["edu\ncat\nion", "ean"]], "original": "\"use strict\";\n\nfunction main(arg) {\n    const letters = arg.split(\"\\n\").map(n=>n.split(\"\"));\n    console.log(letters[0][0] + letters[1][1] + letters[2][2]);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 360, "deobfuscated": "'use strict';\n\nfunction main(arg) {\n  const letters = arg.split(\"\\n\").map(n => n.split(\"\"));\n  console.log(letters[0][0] + letters[1][1] + letters[2][2]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7700664201270961, "ngram_match_score": 0.49883494354016517, "weighted_ngram_match_score": 0.5814307369682193, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03523_1", "type": "JavaScript", "obfuscated": "'use strict';let input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['trim']();let ans='YES';if(input[0x0]=='A'){input=input['slice'](0x1);}if(input[0x0]=='K'){input=input['slice'](0x1);}if(input[0x0]=='I'){input=input['slice'](0x1);}if(input[0x0]=='H'){input=input['slice'](0x1);}if(input[0x0]=='A'){input=input['slice'](0x1);}if(input[0x0]=='B'){input=input['slice'](0x1);}if(input[0x0]=='A'){input=input['slice'](0x1);}if(input[0x0]=='R'){input=input['slice'](0x1);}if(input[0x0]=='A'){input=input['slice'](0x1);}input==''?ans='YES':ans='NO';console['log'](ans);", "test_cases": [["KIHBR", "YES"], ["AKIBAHARA", "NO"], ["AAKIAHBAARA", "NO"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.trim();\nlet ans = \"YES\";\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"K\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"I\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"H\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"B\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"R\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\ninput == \"\" ? ans = \"YES\" : ans = \"NO\";\n\nconsole.log(ans);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 361, "deobfuscated": "'use strict';\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.trim();\nlet ans = \"YES\";\nif (input[0] == \"A\") {\n  input = input.slice(1);\n}\nif (input[0] == \"K\") {\n  input = input.slice(1);\n}\nif (input[0] == \"I\") {\n  input = input.slice(1);\n}\nif (input[0] == \"H\") {\n  input = input.slice(1);\n}\nif (input[0] == \"A\") {\n  input = input.slice(1);\n}\nif (input[0] == \"B\") {\n  input = input.slice(1);\n}\nif (input[0] == \"A\") {\n  input = input.slice(1);\n}\nif (input[0] == \"R\") {\n  input = input.slice(1);\n}\nif (input[0] == \"A\") {\n  input = input.slice(1);\n}\nif (input == \"\") {\n  ans = \"YES\";\n} else {\n  ans = \"NO\";\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6716020119194377, "ngram_match_score": 0.31365372506925204, "weighted_ngram_match_score": 0.3954815953357713, "syntax_match_score": 0.9772727272727273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.125, "length_score": -0.125, "increase_maintainability": -0.022038717148966547, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.006493506493506551, "new_decrease_halstead_effort": -0.006493506493506551}}
{"filename": "p03543_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=input[0x0];var s='No';if(n[0x1]==n[0x2]){if(n[0x0]==n[0x1]||n[0x2]==n[0x3])s='Yes';}console['log']('%s',s);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1118", "Yes"], ["7777", "Yes"], ["1234", "No"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar n = input[0];\n\tvar s = \"No\";\n\tif(n[1]==n[2]){\n\t    if(n[0]==n[1]||n[2]==n[3])s = \"Yes\";\n\t}\n\tconsole.log('%s',s);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 362, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = input[0];\n  var s = \"No\";\n  if (n[1] == n[2]) {\n    if (n[0] == n[1] || n[2] == n[3]) {\n      s = \"Yes\";\n    }\n  }\n  console.log(\"%s\", s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7520123972070394, "ngram_match_score": 0.41463021130587496, "weighted_ngram_match_score": 0.7134193775222828, "syntax_match_score": 0.88, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03555_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']();input=input['split']('\\x0a');var A=input[0x0]['split']('');var B=input[0x1]['split']('');if(A[0x0]==B[0x2]&&A[0x1]==B[0x1]&&A[0x2]==B[0x0])console['log']('YES');else console['log']('NO');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["pot\ntop", "YES"], ["tab\nbet", "NO"], ["eye\neel", "NO"]], "original": "function Main(input) {\n  input = input.trim()\n  input = input.split(\"\\n\");\n  var A = input[0].split(\"\");\n  var B = input[1].split(\"\");\n  if(A[0]==B[2]&&A[1]==B[1]&&A[2]==B[0]) console.log(\"YES\")\n  else console.log(\"NO\")\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 363, "deobfuscated": "function Main(input) {\n  input = input.trim();\n  input = input.split(\"\\n\");\n  var A = input[0].split(\"\");\n  var B = input[1].split(\"\");\n  if (A[0] == B[2] && A[1] == B[1] && A[2] == B[0]) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7261651032669303, "ngram_match_score": 0.3518093193099913, "weighted_ngram_match_score": 0.6309760937577298, "syntax_match_score": 0.921875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03556_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]);var ans=Math['pow'](Math['floor'](Math['sqrt'](n)),0x2);console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "9"], ["81", "81"], ["271828182", "271821169"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  var ans =Math.pow(Math.floor(Math.sqrt(n)),2);\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 364, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  var ans = Math.pow(Math.floor(Math.sqrt(n)), 2);\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8701880422404686, "ngram_match_score": 0.693395566222006, "weighted_ngram_match_score": 0.7873566027398683, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03644_1", "type": "JavaScript", "obfuscated": "function main(input){const N=input;var ans=0x1;var cnt=0x0;var maxCnt=0x0;for(var i=0x1;i<=N;i++){cnt=0x0;var tmp=i;while(!![]){if(tmp%0x2===0x0){cnt=cnt+0x1;tmp=tmp/0x2;}else{break;}}if(maxCnt<cnt){maxCnt=cnt;ans=i;}}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7", "4"], ["32", "32"], ["1", "1"], ["100", "64"]], "original": "function main (input) {\n    const N = input;\n    var ans = 1;\n    var cnt = 0;\n    var maxCnt = 0;\n\n    for (var i = 1;i <= N;i++){\n        cnt = 0;\n        var tmp = i;\n        while (true) {\n            if (tmp%2 === 0) {\n                cnt = cnt + 1;\n                tmp = tmp/2;\n            } else {\n                break;\n            }\n        }\n        if (maxCnt < cnt) {\n            maxCnt = cnt;\n            ans = i;\n        }\n    }\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 365, "deobfuscated": "function main(input) {\n  const N = input;\n  var ans = 1;\n  var cnt = 0;\n  var maxCnt = 0;\n  for (var i = 1; i <= N; i++) {\n    cnt = 0;\n    var tmp = i;\n    while (true) {\n      if (tmp % 2 === 0) {\n        cnt = cnt + 1;\n        tmp = tmp / 2;\n      } else {\n        break;\n      }\n    }\n    if (maxCnt < cnt) {\n      maxCnt = cnt;\n      ans = i;\n    }\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8873062778823578, "ngram_match_score": 0.7390401883925705, "weighted_ngram_match_score": 0.8101849231368609, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006387891090053444, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0357142857142857, "new_decrease_halstead_effort": 0.14461357404215014}}
{"filename": "p03671_1", "type": "JavaScript", "obfuscated": "let [a,b,c]=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x20')['map'](Number);console['log'](a+b+c-Math['max'](...[a,b,c]));", "test_cases": [["700 600 780", "1300"], ["10000 10000 10000", "20000"]], "original": "let [a, b, c] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nconsole.log(a + b + c - Math.max(...[a, b, c]));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 366, "deobfuscated": "let [a, b, c] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nconsole.log(a + b + c - Math.max(...[a, b, c]));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03705_1", "type": "JavaScript", "obfuscated": "main=function(input){var data=input['split']('\\x20');var n=parseInt(data[0x0]);var a=parseInt(data[0x1]);var b=parseInt(data[0x2]);var ans=(n-0x2)*(b-a)+0x1;console['log'](Math['max'](ans,0x0));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 4 6", "5"], ["5 4 3", "0"], ["1 7 10", "0"], ["1 3 3", "1"]], "original": "main = function(input) {\n    var data = input.split(' ');\n    var n = parseInt(data[0]);\n    var a = parseInt(data[1]);\n    var b = parseInt(data[2]);\n    \n    var ans = (n - 2) * (b - a) + 1;\n    \n    \n    console.log(Math.max(ans, 0));\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 367, "deobfuscated": "main = function (input) {\n  var data = input.split(\" \");\n  var n = parseInt(data[0]);\n  var a = parseInt(data[1]);\n  var b = parseInt(data[2]);\n  var ans = (n - 2) * (b - a) + 1;\n  console.log(Math.max(ans, 0));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.915333241563481, "ngram_match_score": 0.8164072242554248, "weighted_ngram_match_score": 0.8449257419984989, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03711_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const x=parseInt(args[0x0][0x0],0xa);const y=parseInt(args[0x0][0x1],0xa);const group1=[0x1,0x3,0x5,0x7,0x8,0xa,0xc];const group2=[0x4,0x6,0x9,0xb];if(group1['includes'](x)&&group1['includes'](y))console['log']('Yes');else if(group2['includes'](x)&&group2['includes'](y))console['log']('Yes');else console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 3", "Yes"], ["2 4", "No"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst x = parseInt(args[0][0], 10)\n\tconst y = parseInt(args[0][1], 10)\n\tconst group1 = [1, 3, 5, 7, 8, 10, 12]\n\tconst group2 = [4, 6, 9, 11]\n\n\tif (group1.includes(x) && group1.includes(y)) console.log('Yes')\n\telse if (group2.includes(x) && group2.includes(y)) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 368, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const x = parseInt(args[0][0], 10);\n  const y = parseInt(args[0][1], 10);\n  const group1 = [1, 3, 5, 7, 8, 10, 12];\n  const group2 = [4, 6, 9, 11];\n  if (group1.includes(x) && group1.includes(y)) {\n    console.log(\"Yes\");\n  } else if (group2.includes(x) && group2.includes(y)) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6408257243988005, "ngram_match_score": 0.48245941474637694, "weighted_ngram_match_score": 0.5487948013072427, "syntax_match_score": 0.8941176470588236, "dataflow_match_score": 0.6379310344827587}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03844_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('ascii');var input_stdin='';var input_stdin_array='';var input_currentline=0x0;process['stdin']['on']('data',function(data){input_stdin+=data;});process['on']('SIGINT',function(){input_stdin_array=input_stdin['split']('\\x0a');main();process['exit']();});process['stdin']['on']('end',function(){input_stdin_array=input_stdin['split']('\\x0a');main();});function readLine(){return input_stdin_array[input_currentline++];}function main(){var s=readLine()['split']('\\x20');var a=parseInt(s[0x0]);var op=s[0x1];var b=parseInt(s[0x2]);var c;if(op=='+'){c=a+b;}else{c=a-b;}console['log'](c);}", "test_cases": [["1 + 2", "3"], ["5 - 7", "-2"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.on('SIGINT', function(){\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();\n    process.exit();\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n\tvar s = readLine().split(\" \");\n\tvar a = parseInt(s[0]);\n\tvar op = s[1];\n\tvar b = parseInt(s[2]);\n\tvar c;\n\t\n\tif (op == \"+\"){ c = a+b;}\n\telse {c = a-b;}\n\t\n\tconsole.log(c);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 369, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\nprocess.stdin.on(\"data\", function (data) {\n  input_stdin += data;\n});\nprocess.on(\"SIGINT\", function () {\n  input_stdin_array = input_stdin.split(\"\\n\");\n  main();\n  process.exit();\n});\nprocess.stdin.on(\"end\", function () {\n  input_stdin_array = input_stdin.split(\"\\n\");\n  main();\n});\nfunction readLine() {\n  return input_stdin_array[input_currentline++];\n}\nfunction main() {\n  var s = readLine().split(\" \");\n  var a = parseInt(s[0]);\n  var op = s[1];\n  var b = parseInt(s[2]);\n  var c;\n  if (op == \"+\") {\n    c = a + b;\n  } else {\n    c = a - b;\n  }\n  console.log(c);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8389618688104586, "ngram_match_score": 0.6574850703852522, "weighted_ngram_match_score": 0.6983624048565823, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03994_1", "type": "JavaScript", "obfuscated": "function Main(input){var s,K,ref;ref=input['split']('\\x0a'),s=ref[0x0],K=parseInt(ref[0x1]);console['log'](Array['from'](s)['map']((v,i,arr)=>{var code=v['charCodeAt']();if(i===arr['length']-0x1){code+=K%0x1a;code-=code>0x7a?0x1a:0x0;return String['fromCharCode'](code);}else{if(v==='a')return v;return 0x7b-code<=K?(K-=0x7b-code,'a'):v;}})['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["xyz\n4", "aya"], ["a\n25", "z"], ["codefestival\n100", "aaaafeaaivap"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var s, K, ref;\n  ref = input.split(\"\\n\"), s = ref[0], K = parseInt(ref[1]);\n  console.log(Array.from(s).map((v, i, arr)=> {\n    var code = v.charCodeAt();\n    if(i === arr.length - 1) {\n      code += K%26;\n      code -= code >122 ? 26 : 0;\n      return String.fromCharCode(code);\n    } else {\n      if(v === \"a\") return v;\n      return 123 - code <= K ? ((K -= 123 - code), \"a\") : v;\n    }\n  }).join(\"\"));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 370, "deobfuscated": "function Main(input) {\n  var s;\n  var K;\n  var ref;\n  ref = input.split(\"\\n\");\n  s = ref[0];\n  K = parseInt(ref[1]);\n  console.log(Array.from(s).map((v, i, arr) => {\n    var code = v.charCodeAt();\n    if (i === arr.length - 1) {\n      code += K % 26;\n      code -= code > 122 ? 26 : 0;\n      return String.fromCharCode(code);\n    } else {\n      if (v === \"a\") {\n        return v;\n      }\n      if (123 - code <= K) {\n        K -= 123 - code;\n        return \"a\";\n      } else {\n        return v;\n      }\n    }\n  }).join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6280301547245541, "ngram_match_score": 0.3583035678008228, "weighted_ngram_match_score": 0.42654432382466645, "syntax_match_score": 0.7272727272727273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.2857142857142858, "length_score": -0.2857142857142858, "increase_maintainability": -0.0454163641118176, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03846153846153855, "new_decrease_halstead_effort": -0.03846153846153877}}
{"filename": "p04048_1", "type": "JavaScript", "obfuscated": "function Main(data){data=data['split']('\\x20');data[0x0]=Number(data[0x0]);data[0x1]=Number(data[0x1]);var a=data[0x1]+(data[0x0]-data[0x1])+(data[0x0]-(data[0x0]-data[0x1]))*0x2+(data[0x0]-data[0x1]-(data[0x0]-(data[0x0]-data[0x1])))*0x3;console['log'](a);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2", "12"]], "original": "function Main (data) {\n  data = data.split(\" \");\n  data[0] = Number(data[0]);\n  data[1] = Number(data[1]);\n  var a = data[1] + (data[0] - data[1])\n  + ((data[0] - (data[0] - data[1])) * 2)\n  + (data[0] - data[1] - (data[0] - (data[0] - data[1]))) * 3\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 371, "deobfuscated": "function Main(data) {\n  data = data.split(\" \");\n  data[0] = Number(data[0]);\n  data[1] = Number(data[1]);\n  var a = data[1] + (data[0] - data[1]) + (data[0] - (data[0] - data[1])) * 2 + (data[0] - data[1] - (data[0] - (data[0] - data[1]))) * 3;\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8531185828823162, "ngram_match_score": 0.7626967033943916, "weighted_ngram_match_score": 0.7657196571203806, "syntax_match_score": 0.8840579710144928, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02645_1", "type": "JavaScript", "obfuscated": "function main(lines){const input=lines['split']('\\x20');console['log'](input['join']()['slice'](0x0,0x3));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["takahashi", "tak"], ["naohiro", "nao"]], "original": "function main(lines) {\n  const input = lines.split(' ')\n  console.log(input.join().slice(0,3))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 372, "deobfuscated": "function main(lines) {\n  const input = lines.split(\" \");\n  console.log(input.join().slice(0, 3));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7143174711329552, "ngram_match_score": 0.3955332535877179, "weighted_ngram_match_score": 0.4617366309441026, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02700_1", "type": "JavaScript", "obfuscated": "function Main(input){const array=input['split']('\\x20');let takahashi=Number(array[0x0]);let aoki=Number(array[0x2]);let count=0x0;let bool=!![];while(bool){if(count%0x2===0x0){aoki=aoki-Number(array[0x1]);if(aoki<=0x0){console['log']('Yes');bool=![];}}else{takahashi=takahashi-Number(array[0x3]);if(takahashi<=0x0){console['log']('No');bool=![];}}count++;}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 9 10 10", "No"], ["46 4 40 5", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  const array = input.split(' ');\n  let takahashi = Number(array[0]);\n  let aoki = Number(array[2]);\n  \n  let count = 0;\n  let bool = true;\n  while(bool) {\n    if(count%2 === 0){\n      aoki = aoki - Number(array[1]);\n      if(aoki <= 0){\n        console.log('Yes');\n        bool = false;\n      }\n    } else {\n      takahashi = takahashi - Number(array[3]);\n      if(takahashi <= 0){\n        console.log('No');\n        bool = false;\n      }\n    }\n    count++;\n  }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 373, "deobfuscated": "function Main(input) {\n  const array = input.split(\" \");\n  let takahashi = Number(array[0]);\n  let aoki = Number(array[2]);\n  let count = 0;\n  let bool = true;\n  while (bool) {\n    if (count % 2 === 0) {\n      aoki = aoki - Number(array[1]);\n      if (aoki <= 0) {\n        console.log(\"Yes\");\n        bool = false;\n      }\n    } else {\n      takahashi = takahashi - Number(array[3]);\n      if (takahashi <= 0) {\n        console.log(\"No\");\n        bool = false;\n      }\n    }\n    count++;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7993732749809837, "ngram_match_score": 0.5669190759449982, "weighted_ngram_match_score": 0.6305740239789362, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.010386871863470981, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06666666666666665, "new_decrease_halstead_effort": 0.2213808105433066}}
{"filename": "p02706_1", "type": "JavaScript", "obfuscated": "const main=inputs=>{var array=inputs[0x0]['split']('\\x20');var array2=inputs[0x1]['split']('\\x20');var N=array[0x0]-0x0;var M=array[0x1]-0x0;var sum=0x0;for(var i=0x0;i<M;i++){sum=sum+Number(array2[i]);}console['log'](N-sum<0x0?-0x1:N-sum);};main(require('fs')['readFileSync']('/dev/stdin','UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["41 2\n5 6", "30"], ["10 2\n5 6", "-1"], ["11 2\n5 6", "0"], ["314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3", "9"]], "original": "const main = (inputs) => {\n  var array = inputs[0].split(\" \");\n  var array2 = inputs[1].split(\" \");\n  var N = array[0] - 0;\n  var M = array[1] - 0;\n  var sum = 0;\n\n  for (var i = 0; i < M; i++) {\n    sum = sum + Number(array2[i]);\n  }\n\n  console.log(N - sum < 0 ? -1 : N - sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 374, "deobfuscated": "const main = inputs => {\n  var array = inputs[0].split(\" \");\n  var array2 = inputs[1].split(\" \");\n  var N = array[0] - 0;\n  var M = array[1] - 0;\n  var sum = 0;\n  for (var i = 0; i < M; i++) {\n    sum = sum + Number(array2[i]);\n  }\n  console.log(N - sum < 0 ? -1 : N - sum);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9375984846782917, "ngram_match_score": 0.9084940438173679, "weighted_ngram_match_score": 0.9133284663243704, "syntax_match_score": 0.9285714285714286, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02729_1", "type": "JavaScript", "obfuscated": "function Main(input){var a=input[0x0]['split']('\\x20')['map'](v=>v-0x0);if(a[0x0]+a[0x1]==0x0)console['log'](0x0);else console['log'](~~(a[0x0]*(a[0x0]-0x1)/0x2+a[0x1]*(a[0x1]-0x1)/0x2));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["2 1", "1"], ["4 3", "9"], ["1 1", "0"], ["13 3", "81"], ["0 3", "3"]], "original": "function Main(input) {\n    var a = input[0].split(\" \").map(v=>v-0);\n    if(a[0]+a[1] == 0) console.log(0);\n    else console.log(~~(a[0]*(a[0]-1)/2+(a[1]*(a[1]-1)/2)));\n}\n\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 375, "deobfuscated": "function Main(input) {\n  var a = input[0].split(\" \").map(v => v - 0);\n  if (a[0] + a[1] == 0) {\n    console.log(0);\n  } else {\n    console.log(~~(a[0] * (a[0] - 1) / 2 + a[1] * (a[1] - 1) / 2));\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6190435879275862, "ngram_match_score": 0.18317070220681322, "weighted_ngram_match_score": 0.48997334647322827, "syntax_match_score": 0.803030303030303, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02741_1", "type": "JavaScript", "obfuscated": "function Main(input){var list=[0x1,0x1,0x1,0x2,0x1,0x2,0x1,0x5,0x2,0x2,0x1,0x5,0x1,0x2,0x1,0xe,0x1,0x5,0x1,0x5,0x2,0x2,0x1,0xf,0x2,0x2,0x5,0x4,0x1,0x4,0x1,0x33];input=parseInt(input);if(0x1<=input&&input<=0x20){console['log'](list[input-0x1]);}else{console['log'](0x0);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6", "2"], ["27", "5"]], "original": "function Main(input) {\nvar list = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51];\n  input = parseInt(input);\n  if(1 <= input && input <= 32)\n  {\n      console.log(list[input - 1]);\n  } else {\n  console.log(0);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 376, "deobfuscated": "function Main(input) {\n  var list = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51];\n  input = parseInt(input);\n  if (input >= 1 && input <= 32) {\n    console.log(list[input - 1]);\n  } else {\n    console.log(0);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.914103470666183, "ngram_match_score": 0.9069443196104878, "weighted_ngram_match_score": 0.9244695630542445, "syntax_match_score": 0.825, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0032650581104175513, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.10059508058729882}}
{"filename": "p02771_1", "type": "JavaScript", "obfuscated": "const Main=input=>{const tmp=input['split']('\\x20');var a=parseInt(tmp[0x0]);var b=parseInt(tmp[0x1]);var c=parseInt(tmp[0x2]);if(a===b&&b!==c||b===c&&c!==a||c===a&&b!==c){console['log']('Yes');}else{console['log']('No');}};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 7 5", "Yes"], ["4 4 4", "No"], ["4 9 6", "No"], ["3 3 4", "Yes"]], "original": "const Main = (input) => {\n  const tmp = input.split(' ')\n  var a = parseInt(tmp[0])\n  var b = parseInt(tmp[1])\n  var c = parseInt(tmp[2])\n  if (((a === b) && (b !== c)) || ((b === c) && (c !== a)) || ((c === a) && (b !== c))) {\n    console.log('Yes')\n  } else {\n    console.log('No')\n  }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 377, "deobfuscated": "const Main = input => {\n  const tmp = input.split(\" \");\n  var a = parseInt(tmp[0]);\n  var b = parseInt(tmp[1]);\n  var c = parseInt(tmp[2]);\n  if (a === b && b !== c || b === c && c !== a || c === a && b !== c) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4033815428839811, "ngram_match_score": 0.169579824968226, "weighted_ngram_match_score": 0.17774864201382937, "syntax_match_score": 0.6986301369863014, "dataflow_match_score": 0.5675675675675675}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02786_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');H=inp['shift']()*0x1;c=0x1;h=0x2;while(H>=h){h*=0x2;c++;}console['log'](Math['pow'](0x2,c)-0x1);", "test_cases": [["2", "3"], ["4", "7"], ["1000000000000", "1099511627775"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nH = inp.shift() * 1\nc=1\nh=2\nwhile(H>=h) {\n    h *= 2\n    c++\n}\nconsole.log(Math.pow(2,c)-1)\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 378, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nH = inp.shift() * 1;\nc = 1;\nh = 2;\nwhile (H >= h) {\n  h *= 2;\n  c++;\n}\nconsole.log(Math.pow(2, c) - 1);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5857596918312128, "ngram_match_score": 0.1333045094117443, "weighted_ngram_match_score": 0.209734257913107, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02880_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');const num=parseInt(input[0x0],0xa);if(num>0x51){console['log']('No');return;}if(num%0x2==0x0&&num/0x2<0xa||num%0x3==0x0&&num/0x3<0xa||num%0x4==0x0&&num/0x4<0xa||num%0x5==0x0&&num/0x5<0xa||num%0x6==0x0&&num/0x6<0xa||num%0x7==0x0&&num/0x7<0xa||num%0x8==0x0&&num/0x8<0xa||num%0x9==0x0&&num/0x9<0xa){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "Yes"], ["50", "No"], ["81", "Yes"]], "original": "function Main(input) {\n\t\tinput = input.split(\" \");\n\t\tconst num = parseInt(input[0], 10);\n\t\tif (num > 81) {\n\t\t\t\tconsole.log('No');\n\t\t\t\treturn;\n\t\t}\n\nif((num%2==0 && num/2<10) ||(num%3==0 && num/3<10) ||(num%4==0 && num/4<10) ||(num%5==0 && num/5<10) ||(num%6==0 && num/6<10) ||(num%7==0 && num/7<10) ||(num%8==0 && num/8<10) ||(num%9==0 && num/9<10)){\nconsole.log('Yes');\n}else {\nconsole.log('No');\n}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 379, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  const num = parseInt(input[0], 10);\n  if (num > 81) {\n    console.log(\"No\");\n    return;\n  }\n  if (num % 2 == 0 && num / 2 < 10 || num % 3 == 0 && num / 3 < 10 || num % 4 == 0 && num / 4 < 10 || num % 5 == 0 && num / 5 < 10 || num % 6 == 0 && num / 6 < 10 || num % 7 == 0 && num / 7 < 10 || num % 8 == 0 && num / 8 < 10 || num % 9 == 0 && num / 9 < 10) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5955132179526352, "ngram_match_score": 0.16144633849244266, "weighted_ngram_match_score": 0.409285778601117, "syntax_match_score": 0.8113207547169812, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02954_1", "type": "JavaScript", "obfuscated": "function Main(input){var idata=input['split']('');var ninzuu=[];var nextninzuutemp=[];for(let i=0x0;i<idata['length'];i++){ninzuu['push'](0x1);nextninzuutemp['push'](0x0);}var nextninzuu=nextninzuutemp['slice']();for(let turn=0x0;turn<ninzuu['length']+ninzuu['length']%0x2;turn++){for(let j=0x0;j<ninzuu['length'];j++){if(idata[j]=='R'){nextninzuu[j+0x1]+=ninzuu[j];}else if(idata[j]=='L'){nextninzuu[j-0x1]+=ninzuu[j];}}ninzuu=nextninzuu['slice']();nextninzuu=nextninzuutemp['slice']();}console['log'](ninzuu['join']('\\x20'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["RRLRL", "0 1 2 1 1"], ["RRLLLLRLRRLL", "0 3 3 0 0 0 1 1 0 2 2 0"], ["RRRLLRLLRRRLLLLL", "0 0 3 2 0 2 1 0 0 0 4 4 0 0 0 0"]], "original": "function Main(input) {\n\tvar idata = input.split(\"\");\n\tvar ninzuu = [];\n\tvar nextninzuutemp = [];\n\t//人数の配列を生成\n\tfor( let i=0; i<idata.length ; i++ ){\n\t    ninzuu.push(1);\n\t    nextninzuutemp.push(0);\n\t}\n\tvar nextninzuu = nextninzuutemp.slice();\n\t//一回ごとに操作が行われる\n\tfor( let turn=0; turn<ninzuu.length+ninzuu.length%2 ; turn++ ){\n\t\tfor( let j=0; j<ninzuu.length ; j++ ){\n\t\t\t//着目しているマスに右に行けと書いてあった場合\n\t\t\tif(idata[j]==\"R\"){\n\t\t\t\tnextninzuu[j+1]+=ninzuu[j];\n\t\t\t}else if(idata[j]==\"L\"){\n\t\t\t    nextninzuu[j-1]+=ninzuu[j];\n\t\t\t}\n\t\t}\n\t\tninzuu = nextninzuu.slice();\n\t\tnextninzuu = nextninzuutemp.slice();\n\t}\n\tconsole.log(ninzuu.join(\" \"));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 380, "deobfuscated": "function Main(input) {\n  var idata = input.split(\"\");\n  var ninzuu = [];\n  var nextninzuutemp = [];\n  for (let i = 0; i < idata.length; i++) {\n    ninzuu.push(1);\n    nextninzuutemp.push(0);\n  }\n  var nextninzuu = nextninzuutemp.slice();\n  for (let turn = 0; turn < ninzuu.length + ninzuu.length % 2; turn++) {\n    for (let j = 0; j < ninzuu.length; j++) {\n      if (idata[j] == \"R\") {\n        nextninzuu[j + 1] += ninzuu[j];\n      } else if (idata[j] == \"L\") {\n        nextninzuu[j - 1] += ninzuu[j];\n      }\n    }\n    ninzuu = nextninzuu.slice();\n    nextninzuu = nextninzuutemp.slice();\n  }\n  console.log(ninzuu.join(\" \"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7003130318597487, "ngram_match_score": 0.3311480452998029, "weighted_ngram_match_score": 0.4701040821391918, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03071_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a')[0x0];const numbers=input['split']('\\x20')['map'](i=>{return parseInt(i,0xa);});const a=numbers[0x0];const b=numbers[0x1];let result=0x0;if(a>b){result=0x2*a-0x1;}else if(b>a){result=0x2*b-0x1;}else{result=0x2*a;}console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3", "9"], ["3 4", "7"], ["6 6", "12"]], "original": "'use strict'\nfunction Main(input) {\n    input = input.split(\"\\n\")[0]\n    const numbers = input.split(' ').map(i => {\n      return parseInt(i, 10)\n    })\n\n    const a = numbers[0]\n    const b = numbers[1]\n    let result = 0\n\n    if(a > b) {\n      result = 2*a - 1\n    } else if (b > a) {\n      result = 2*b - 1  \n    } else {\n      result = 2 * a\n    }\n    \n    console.log(result)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 381, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\")[0];\n  const numbers = input.split(\" \").map(i => {\n    return parseInt(i, 10);\n  });\n  const a = numbers[0];\n  const b = numbers[1];\n  let result = 0;\n  if (a > b) {\n    result = a * 2 - 1;\n  } else if (b > a) {\n    result = b * 2 - 1;\n  } else {\n    result = a * 2;\n  }\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6111297427454688, "ngram_match_score": 0.3778290195712375, "weighted_ngram_match_score": 0.4189626786833649, "syntax_match_score": 0.7083333333333334, "dataflow_match_score": 0.9393939393939394}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03074_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let lines=input['split']('\\x0a');let nk=lines['shift']()['split'](/\\s/)['map'](v=>v-0x0);let N=nk[0x0],K=nk[0x1];let S=lines['shift']()['split'](/\\s/)[0x0]['split']('')['map'](v=>v-0x0);let n=0x0,Z=[];let p,b=S[0x0],i=0x0;while(n<N){for(p=n;p<N&&S[p]==b;p++){}let l=p-n;Z['push']({'kind':b,'pos':n,'len':l,'index':i++});b=(b+0x1)%0x2;n=p;}let L=Z['length'],LL=L-(K-0x1)*0x2;let start=Z[0x0]['kind'];let ans=0x0;for(let n=0x0;n<LL;n+=0x2){let sum=0x0,m,k;for(m=n,k=0x0;m<L&&k<K;k++,m+=0x2){if(m<L)sum+=Z[m]['len'];if(m+0x1<L)sum+=Z[m+0x1]['len'];}if(start==0x1&&m<L)sum+=Z[m]['len'];if(ans<sum)ans=sum;}console['log'](ans);}if(typeof window=='undefined')Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 1\n00010", "4"], ["14 2\n11101010110011", "8"], ["1 1\n1", "1"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let nk = lines.shift().split(/\\s/).map((v) => v - 0);\n    let N = nk[0], K = nk[1];\n    let S = lines.shift().split(/\\s/)[0].split(\"\").map((v) => v - 0);\n    let n = 0, Z = [];\n    let p, b = S[0], i = 0;\n    while (n < N) {\n        for (p = n; p < N && S[p] == b; p++) { }\n        let l = p - n;\n        Z.push({kind: b, pos: n, len: l, index: i++});\n        b = (b + 1) % 2;\n        n = p;\n    }\n    let L = Z.length, LL = L - (K - 1) * 2;\n    let start = Z[0].kind;\n    let ans = 0;\n    for (let n = 0; n < LL; n += 2) {\n        let sum = 0, m, k;\n        for (m = n, k = 0; m < L && k < K; k++, m += 2) {\n            if (m < L) sum += Z[m].len;\n            if (m + 1 < L) sum += Z[m + 1].len;\n        }\n        if (start == 1 && m < L) sum += Z[m].len;\n        if (ans < sum) ans = sum;\n    }\n    console.log(ans);\n}\nif (typeof window == \"undefined\") Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 382, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let nk = lines.shift().split(/\\s/).map(v => v - 0);\n  let N = nk[0];\n  let K = nk[1];\n  let S = lines.shift().split(/\\s/)[0].split(\"\").map(v => v - 0);\n  let n = 0;\n  let Z = [];\n  let p;\n  let b = S[0];\n  let i = 0;\n  while (n < N) {\n    for (p = n; p < N && S[p] == b; p++) {}\n    let l = p - n;\n    Z.push({\n      kind: b,\n      pos: n,\n      len: l,\n      index: i++\n    });\n    b = (b + 1) % 2;\n    n = p;\n  }\n  let L = Z.length;\n  let LL = L - (K - 1) * 2;\n  let start = Z[0].kind;\n  let ans = 0;\n  for (let n = 0; n < LL; n += 2) {\n    let sum = 0;\n    let m;\n    let k;\n    m = n;\n    k = 0;\n    for (; m < L && k < K; k++, m += 2) {\n      if (m < L) {\n        sum += Z[m].len;\n      }\n      if (m + 1 < L) {\n        sum += Z[m + 1].len;\n      }\n    }\n    if (start == 1 && m < L) {\n      sum += Z[m].len;\n    }\n    if (ans < sum) {\n      ans = sum;\n    }\n  }\n  console.log(ans);\n}\nif (typeof window == \"undefined\") {\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8155144919310418, "ngram_match_score": 0.6750116701367734, "weighted_ngram_match_score": 0.7455162429425846, "syntax_match_score": 0.8415300546448088, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.04651162790697683, "length_score": -0.04651162790697683, "increase_maintainability": -0.01220513874440543, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.026923076923076827, "new_decrease_halstead_effort": -0.026923076923076827}}
{"filename": "p03106_1", "type": "JavaScript", "obfuscated": "function main(input){const args=input['split']('\\x20');var A=Number(args[0x0]);var B=Number(args[0x1]);var K=Number(args[0x2]);var cu=0x0;var sum;var count=0x0;for(cu=A;cu>0x0;--cu){if(Number['isInteger'](A/cu)&&Number['isInteger'](B/cu)){count++;if(count===K){sum=cu;break;}}}console['log'](sum);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8 12 2", "2"], ["100 50 4", "5"], ["1 1 1", "1"]], "original": "function main(input) {\n  const args = input.split(' ');\n  var A = Number(args[0]);\n  var B = Number(args[1]);\n  var K = Number(args[2]);\n  var cu = 0;\n  var sum;\n  var count = 0;\n  for (cu = A; cu > 0; --cu) {\n    if (Number.isInteger(A / cu) && Number.isInteger(B / cu)) {\n      count++;\n      if (count === K) {\n        sum = cu;\n        break;\n      }\n    }\n  }\n  console.log(sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 383, "deobfuscated": "function main(input) {\n  const args = input.split(\" \");\n  var A = Number(args[0]);\n  var B = Number(args[1]);\n  var K = Number(args[2]);\n  var cu = 0;\n  var sum;\n  var count = 0;\n  for (cu = A; cu > 0; --cu) {\n    if (Number.isInteger(A / cu) && Number.isInteger(B / cu)) {\n      count++;\n      if (count === K) {\n        sum = cu;\n        break;\n      }\n    }\n  }\n  console.log(sum);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9579194243374292, "ngram_match_score": 0.9128479730518225, "weighted_ngram_match_score": 0.918829724297894, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03140_1", "type": "JavaScript", "obfuscated": "function Main(input){inputList=input['split']('\\x0a');inputNum=parseInt(inputList[0x0],0xa);firstList=inputList[0x1]['split']('');secondList=inputList[0x2]['split']('');thirdList=inputList[0x3]['split']('');count=0x0;for(var i=0x0;i<inputNum;i++){if(firstList[i]==secondList[i]&&secondList[i]==thirdList[i]){continue;}if(firstList[i]==secondList[i]||secondList[i]==thirdList[i]||thirdList[i]==firstList[i]){count++;continue;}count++;count++;}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\nwest\neast\nwait", "3"], ["9\ndifferent\ndifferent\ndifferent", "0"], ["7\nzenkoku\ntouitsu\nprogram", "13"]], "original": "// inputに入力データ全体が入る\n// 7\n// zenkoku\n// touitsu\n// program\n\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinputList = input.split(\"\\n\");\n    inputNum = parseInt(inputList[0], 10);\n    firstList = inputList[1].split(\"\");\n    secondList = inputList[2].split(\"\");\n    thirdList = inputList[3].split(\"\");\n    count = 0;\n    for (var i = 0; i < inputNum; i++) {\n        if(firstList[i] == secondList[i] && secondList[i] == thirdList[i]) {\n            continue;\n        }\n        if(firstList[i] == secondList[i] || secondList[i] == thirdList[i] || thirdList[i] == firstList[i]) {\n            count++;\n            continue;\n        }\n        count++;\n        count++;\n    }\n\tconsole.log(count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 384, "deobfuscated": "function Main(input) {\n  inputList = input.split(\"\\n\");\n  inputNum = parseInt(inputList[0], 10);\n  firstList = inputList[1].split(\"\");\n  secondList = inputList[2].split(\"\");\n  thirdList = inputList[3].split(\"\");\n  count = 0;\n  for (var i = 0; i < inputNum; i++) {\n    if (firstList[i] == secondList[i] && secondList[i] == thirdList[i]) {\n      continue;\n    }\n    if (firstList[i] == secondList[i] || secondList[i] == thirdList[i] || thirdList[i] == firstList[i]) {\n      count++;\n      continue;\n    }\n    count++;\n    count++;\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8504074840308373, "ngram_match_score": 0.6939696462694293, "weighted_ngram_match_score": 0.7076602898539203, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03202_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const inputs=input['split']('\\x0a')['filter'](x=>x!=='');const n=inputs[0x0];const a=inputs[0x1]['split']('\\x20')['map'](x=>Number(x));let result=0x1;while(testN(result,a)===![]){result=result+0x1;}console['log'](result);function testN(n,a){let current='0'['repeat'](a[0x0]);for(let i=0x1;i<a['length'];i++){if(a[i-0x1]<a[i]){current=current+'0'['repeat'](a[i]-a[i-0x1]);}else{current=parseInt(current['substring'](0x0,a[i]),n)+0x1;if(isNaN(current)){return![];}current=''+current;if(current['length']>a[i]){return![];}else{current='0'['repeat'](a[i]-current['length'])+current;}}}return!![];}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n3 2 1", "2"], ["5\n2 3 2 1 2", "2"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n\n  const n = inputs[0];\n  const a = inputs[1].split(\" \").map(x => Number(x));\n\n  let result = 1;\n  while (testN(result, a) === false) {\n    result = result + 1;\n  }\n\n  console.log(result);\n\n  function testN(n, a) {\n    let current = \"0\".repeat(a[0]);\n\n    for (let i = 1; i < a.length; i++) {\n      if (a[i - 1] < a[i]) {\n        current = current + \"0\".repeat(a[i] - a[i - 1]);\n      } else {\n        current = parseInt(current.substring(0, a[i]), n) + 1;\n        if (isNaN(current)) {\n          return false;\n        }\n\n        current = \"\" + current;\n        if (current.length > a[i]) {\n          return false;\n        } else {\n          current = \"0\".repeat(a[i] - current.length) + current;\n        }\n      }\n    }\n    return true;\n  }\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 385, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n  const n = inputs[0];\n  const a = inputs[1].split(\" \").map(x => Number(x));\n  let result = 1;\n  while (testN(result, a) === false) {\n    result = result + 1;\n  }\n  console.log(result);\n  function testN(n, a) {\n    let current = \"0\".repeat(a[0]);\n    for (let i = 1; i < a.length; i++) {\n      if (a[i - 1] < a[i]) {\n        current = current + \"0\".repeat(a[i] - a[i - 1]);\n      } else {\n        current = parseInt(current.substring(0, a[i]), n) + 1;\n        if (isNaN(current)) {\n          return false;\n        }\n        current = \"\" + current;\n        if (current.length > a[i]) {\n          return false;\n        } else {\n          current = \"0\".repeat(a[i] - current.length) + current;\n        }\n      }\n    }\n    return true;\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9920663258546987, "ngram_match_score": 0.9834010485386678, "weighted_ngram_match_score": 0.9848642548801271, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009696340805358528, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0494505494505495, "new_decrease_halstead_effort": 0.17943455481998605}}
{"filename": "p03251_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const num=input[0x0]['split']('\\x20')['map'](val=>parseInt(val)),N=num[0x0],M=num[0x1],X=num[0x2],Y=num[0x3],x=input[0x1]['split']('\\x20')['map'](val=>parseInt(val)),y=input[0x2]['split']('\\x20')['map'](val=>parseInt(val));const xMax=Math['max'](...x),yMin=Math['min'](...y);let ans=0x0;for(let z=X+0x1;z<=Y;z++){if(xMax<z&&yMin>=z){ans=0x1;break;}}console['log'](ans==0x1?'No\\x20War':'War');};main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["3 2 10 20\n8 15 13\n16 22", "No War"], ["4 2 -48 -1\n-20 -35 -91 -23\n-22 66", "War"], ["5 3 6 8\n-10 3 1 5 -100\n100 6 14", "War"]], "original": "'use strict';\nconst main = input => {\n  const num = input[0].split(' ').map(val => parseInt(val)), N = num[0], M = num[1], X = num[2], Y = num[3], x = input[1].split(' ').map(val => parseInt(val)), y = input[2].split(' ').map(val => parseInt(val));\n  // console.log(N, M, X, Y, x, y);\n  const xMax = Math.max(...x), yMin = Math.min(...y);\n  // console.log(xMax, yMin);\n  let ans = 0;\n  for(let z=X+1; z<=Y; z++) {\n    if (xMax < z && yMin >= z) {\n      ans = 1;\n      break;\n    }\n  }\n  console.log(ans==1?'No War':'War');\n  \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 386, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const num = input[0].split(\" \").map(val => parseInt(val));\n  const N = num[0];\n  const M = num[1];\n  const X = num[2];\n  const Y = num[3];\n  const x = input[1].split(\" \").map(val => parseInt(val));\n  const y = input[2].split(\" \").map(val => parseInt(val));\n  const xMax = Math.max(...x);\n  const yMin = Math.min(...y);\n  let ans = 0;\n  for (let z = X + 1; z <= Y; z++) {\n    if (xMax < z && yMin >= z) {\n      ans = 1;\n      break;\n    }\n  }\n  console.log(ans == 1 ? \"No War\" : \"War\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5314768242207518, "ngram_match_score": 0.36901717376520005, "weighted_ngram_match_score": 0.4235567897844737, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 0.4}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03315_1", "type": "JavaScript", "obfuscated": "function main(input){var input=input;var sum=0x0;for(var i=0x0;i<0x4;i++){if(input[i]=='+'){sum+=0x1;}else{sum-=0x1;}}console['log'](sum);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["+-++", "2"], ["-+--", "-2"], ["----", "-4"]], "original": "function main(input) {\n  \n  var input = input;\n  var sum = 0;\n  for (var i=0;i<4;i++){\n    if(input[i] == '+') {\n    \tsum += 1;\n    } else {\n    \tsum -= 1;\n    }\n  }\n  console.log(sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 387, "deobfuscated": "function main(input) {\n  var input = input;\n  var sum = 0;\n  for (var i = 0; i < 4; i++) {\n    if (input[i] == \"+\") {\n      sum += 1;\n    } else {\n      sum -= 1;\n    }\n  }\n  console.log(sum);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8473243822284652, "ngram_match_score": 0.610714567969403, "weighted_ngram_match_score": 0.7785829609444576, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03385_1", "type": "JavaScript", "obfuscated": "function main(input){var aa=input['indexOf']('a');var bb=input['indexOf']('b');var cc=input['indexOf']('c');if(aa==-0x1||bb==-0x1||cc==-0x1){console['log']('No');}else{console['log']('Yes');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["bac", "Yes"], ["bab", "No"], ["abc", "Yes"], ["aaa", "No"]], "original": "function main(input) {\n    \n    var aa=input.indexOf(\"a\");\n    var bb=input.indexOf(\"b\");\n    var cc=input.indexOf(\"c\");\n\n  if(aa==-1 || bb==-1 || cc==-1){\n  console.log(\"No\");\n  }else{\n    console.log(\"Yes\");\n}\n}\n  main(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 388, "deobfuscated": "function main(input) {\n  var aa = input.indexOf(\"a\");\n  var bb = input.indexOf(\"b\");\n  var cc = input.indexOf(\"c\");\n  if (aa == -1 || bb == -1 || cc == -1) {\n    console.log(\"No\");\n  } else {\n    console.log(\"Yes\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5762663756553696, "ngram_match_score": 0.10322985794794913, "weighted_ngram_match_score": 0.20183564467352955, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03409_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=parseInt(s[0x0]);var a=Array(n);var c=Array(n);for(var i=0x0;i<n;i++){a[i]=s[i+0x1]['split']('\\x20')['map'](a=>parseInt(a));}for(var i=0x0;i<n;i++){c[i]=s[i+n+0x1]['split']('\\x20')['map'](a=>parseInt(a));}a=a['sort']((a,b)=>a[0x1]-b[0x1]);a=a['sort']((a,b)=>a[0x0]-b[0x0]);c=c['sort']((a,b)=>a[0x0]-b[0x0]);c=c['sort']((a,b)=>b[0x1]-a[0x1]);var ans=0x0;for(i=n-0x1;i>=0x0;i--){for(var j=c['length']-0x1;j>=0x0;j--){if(a[i][0x0]<c[j][0x0]&&a[i][0x1]<c[j][0x1]){ans++;c['splice'](j,0x1);break;}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5", "2"], ["3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5", "2"], ["2\n2 2\n3 3\n0 0\n1 1", "0"], ["5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7", "5"], ["5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9", "4"]], "original": "function Main(s) {\n\ts = s.split(\"\\n\");\n\tvar n = parseInt(s[0]);\n\tvar a = Array(n);\n\tvar c = Array(n);\n\tfor(var i = 0; i < n; i++){\n\t\ta[i] = s[i+1].split(\" \").map(a => parseInt(a));\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tc[i] = s[i+n+1].split(\" \").map(a => parseInt(a));\n\t}\n\ta = a.sort((a,b) => a[1] - b[1]);\n\ta = a.sort((a,b) => a[0] - b[0]);\n\tc = c.sort((a,b) => a[0] - b[0]);\n\tc = c.sort((a,b) => b[1] - a[1]);\n\t\n\tvar ans = 0;\n\tfor(i = n-1; i >= 0; i--){\n\t\tfor(var j = c.length-1; j >= 0; j--){\n\t\t\tif(a[i][0] < c[j][0] && a[i][1] < c[j][1]){\n\t\t\t\tans++;\n\t\t\t\tc.splice(j,1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 389, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = parseInt(s[0]);\n  var a = Array(n);\n  var c = Array(n);\n  for (var i = 0; i < n; i++) {\n    a[i] = s[i + 1].split(\" \").map(a => parseInt(a));\n  }\n  for (var i = 0; i < n; i++) {\n    c[i] = s[i + n + 1].split(\" \").map(a => parseInt(a));\n  }\n  a = a.sort((a, b) => a[1] - b[1]);\n  a = a.sort((a, b) => a[0] - b[0]);\n  c = c.sort((a, b) => a[0] - b[0]);\n  c = c.sort((a, b) => b[1] - a[1]);\n  var ans = 0;\n  for (i = n - 1; i >= 0; i--) {\n    for (var j = c.length - 1; j >= 0; j--) {\n      if (a[i][0] < c[j][0] && a[i][1] < c[j][1]) {\n        ans++;\n        c.splice(j, 1);\n        break;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7720866358982005, "ngram_match_score": 0.4868150580042278, "weighted_ngram_match_score": 0.6015314855885742, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03423_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['trim']();const a=parseInt(input['split']('\\x20')[0x0],0xa);console['log'](Math['floor'](a/0x3));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8", "2"], ["2", "0"], ["9", "3"]], "original": "function main(input) {\n  input=input.trim();\nconst a = parseInt(input.split(\" \")[0], 10);\n  console.log(Math.floor(a/3));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 390, "deobfuscated": "function main(input) {\n  input = input.trim();\n  const a = parseInt(input.split(\" \")[0], 10);\n  console.log(Math.floor(a / 3));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7047031043489204, "ngram_match_score": 0.3457913759237496, "weighted_ngram_match_score": 0.4730210414719318, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03455_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x20')['map'](Number);const A=input[0x0];const B=input[0x1];const ans=A%0x2^B%0x2?'Even':'Odd';console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4", "Even"], ["1 21", "Odd"]], "original": "'use strict'\n\nfunction main(input) {\n  input = input\n    .trim()\n    .split(' ')\n    .map(Number)\n\n  const A = input[0]\n  const B = input[1]\n  const ans = A % 2 ^ B % 2 ? 'Even' : 'Odd'\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 391, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\" \").map(Number);\n  const A = input[0];\n  const B = input[1];\n  const ans = A % 2 ^ B % 2 ? \"Even\" : \"Odd\";\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.70794529668405, "ngram_match_score": 0.4343173473644448, "weighted_ngram_match_score": 0.45009541831912386, "syntax_match_score": 1.0, "dataflow_match_score": 0.9473684210526315}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03478_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x20');var n=input[0x0];var a=input[0x1];var b=input[0x2];var Sum=0x0;for(j=0x1;j<=n;j++){if(0x0<=j&&j<=0x9){if(a<=j&&j<=b){Sum+=j;}}else{var str=j['toString']();var arr=str['split']('')['map'](n=>parseInt(n));var x=arr['reduce'](function(prev,current,i,arr){return prev+current;});};if(a<=x&&x<=b){Sum+=j;}}console['log'](Sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["20 2 5", "84"], ["10 1 2", "13"], ["100 4 16", "4554"]], "original": "function Main(input) {\n    var input  = input.split(' ');\n    var n = input[0];\n    var a = input[1];\n    var b = input[2];\n    var Sum = 0;\n    for (j = 1; j <= n; j++) {\n        if(0 <= j && j <= 9) {\n            if(a <= j && j <= b) {\n                Sum += j;\n            }\n        } else {\n        var str = j.toString();\n        var arr = str.split('').map(n => parseInt(n));\n        var x = arr.reduce(function(prev, current, i, arr) {\n                return prev+current;\n            });\n        };\n        if(a <= x && x <= b) {\n            Sum += j;\n        }\n    \n    }\n    console.log(Sum);\n\n    }\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 392, "deobfuscated": "function Main(input) {\n  var input = input.split(\" \");\n  var n = input[0];\n  var a = input[1];\n  var b = input[2];\n  var Sum = 0;\n  for (j = 1; j <= n; j++) {\n    if (j >= 0 && j <= 9) {\n      if (a <= j && j <= b) {\n        Sum += j;\n      }\n    } else {\n      var str = j.toString();\n      var arr = str.split(\"\").map(n => parseInt(n));\n      var x = arr.reduce(function (prev, current, i, arr) {\n        return prev + current;\n      });\n    }\n    ;\n    if (a <= x && x <= b) {\n      Sum += j;\n    }\n  }\n  console.log(Sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8415204619695068, "ngram_match_score": 0.6993244642010992, "weighted_ngram_match_score": 0.7614942257821912, "syntax_match_score": 0.9052631578947369, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0027864944850132245, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.07761478538647881}}
{"filename": "p03486_1", "type": "JavaScript", "obfuscated": "function main(input){var lines=input['split']('\\x0a');var s=lines[0x0]['split']('');var t=lines[0x1]['split']('');s=s['sort']()['join']();t=t['sort']()['reverse']()['join']();s<t?console['log']('Yes'):console['log']('No');}main(require('fs')['readFileSync']('/dev/stdin','UTF-8'));", "test_cases": [["yx\naxy", "Yes"], ["ratcode\natlas", "Yes"], ["cd\nabc", "No"], ["w\nww", "Yes"], ["zzz\nzzz", "No"]], "original": "function main(input){\n  var lines = input.split('\\n');\n  var s = lines[0].split(\"\"); // change to array\n  var t = lines[1].split(\"\");\n  s = s.sort().join();\n  t = t.sort().reverse().join();\n\n  s < t ? console.log(\"Yes\") : console.log(\"No\");\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 393, "deobfuscated": "function main(input) {\n  var lines = input.split(\"\\n\");\n  var s = lines[0].split(\"\");\n  var t = lines[1].split(\"\");\n  s = s.sort().join();\n  t = t.sort().reverse().join();\n  if (s < t) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6810203120009924, "ngram_match_score": 0.38538569180303145, "weighted_ngram_match_score": 0.41561863312401526, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.375, "length_score": -0.375, "increase_maintainability": -0.06186156076918292, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.013157894736842035, "new_decrease_halstead_effort": -0.16955228944157796}}
{"filename": "p03563_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){s=s['split']('\\x0a');const r=Number(s[0x0]);const g=Number(s[0x1]);let ans=g+(g-r);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2002\n2017", "2032"], ["4500\n0", "-4500"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n  const r = Number(s[0]);\n  const g = Number(s[1]);\n  let ans = g + (g - r);\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 394, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  s = s.split(\"\\n\");\n  const r = Number(s[0]);\n  const g = Number(s[1]);\n  let ans = g + (g - r);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9188224767527744, "ngram_match_score": 0.8347563508866299, "weighted_ngram_match_score": 0.8405335561244675, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03610_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input=input[0x0];var ans='';for(var i=0x1;i<=input['length'];i=i+0x2){ans+=input[i-0x1];}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["atcoder", "acdr"], ["aaaa", "aa"], ["z", "z"], ["fukuokayamaguchi", "fkoaaauh"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\tinput = input[0];\n\n\tvar ans = \"\";\n\tfor(var i = 1; i <= input.length; i = i + 2){\n\t\tans += input[i-1];\n\t}\n\tconsole.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 395, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input = input[0];\n  var ans = \"\";\n  for (var i = 1; i <= input.length; i = i + 2) {\n    ans += input[i - 1];\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7699892510195088, "ngram_match_score": 0.536361252975174, "weighted_ngram_match_score": 0.5435957511028608, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03693_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const param=Number(input['split']('\\x20')['join'](''));if(param%0x4===0x0){console['log']('YES');}else{console['log']('NO');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3 2", "YES"], ["2 3 4", "NO"]], "original": "// https://atcoder.jp/contests/abc064/tasks/abc064_a\n\"use strict\"\nfunction Main(input) {\n  const param = Number(input.split(' ').join(''));\n  if(param % 4 === 0) {\n    console.log('YES');\n  } else {\n    console.log('NO');\n  }\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 396, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const param = Number(input.split(\" \").join(\"\"));\n  if (param % 4 === 0) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6703269155876912, "ngram_match_score": 0.37213334417775196, "weighted_ngram_match_score": 0.3860973950960897, "syntax_match_score": 1.0, "dataflow_match_score": 0.9230769230769231}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03697_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(INPUT){const input=INPUT['split']('\\x0a')[0x0]['split']('\\x20');const A=parseInt(input[0x0],0xa);const B=parseInt(input[0x1],0xa);console['log'](A+B>=0xa?'error':A+B);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 3", "9"], ["6 4", "error"]], "original": "'use strict';\n\nfunction Main(INPUT) {\n    const input = INPUT.split(\"\\n\")[0].split(\" \");\n    const A = parseInt(input[0], 10);\n    const B = parseInt(input[1], 10);\n\n    console.log(A + B >= 10 ? \"error\" : A + B);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 397, "deobfuscated": "'use strict';\n\nfunction Main(INPUT) {\n  const input = INPUT.split(\"\\n\")[0].split(\" \");\n  const A = parseInt(input[0], 10);\n  const B = parseInt(input[1], 10);\n  console.log(A + B >= 10 ? \"error\" : A + B);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03698_1", "type": "JavaScript", "obfuscated": "function main(data){input=data['split']('');len=input['length'];temp=[];for(i=0x0;i<len;i+=0x1){if(temp['indexOf'](input[i])===-0x1){temp['push'](input[i]);}else{console['log']('no');return;}}console['log']('yes');}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["uncopyrightable", "yes"], ["different", "no"], ["no", "yes"]], "original": "function main(data){\n    input = data.split(\"\");\n    len = input.length;\n    temp = []\n    for(i = 0; i<len; i+=1){\n        if(temp.indexOf(input[i]) === -1){\n            temp.push(input[i]);\n        }else{\n            console.log(\"no\");\n            return;\n        }\n    }\n    console.log(\"yes\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 398, "deobfuscated": "function main(data) {\n  input = data.split(\"\");\n  len = input.length;\n  temp = [];\n  for (i = 0; i < len; i += 1) {\n    if (temp.indexOf(input[i]) === -1) {\n      temp.push(input[i]);\n    } else {\n      console.log(\"no\");\n      return;\n    }\n  }\n  console.log(\"yes\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7188848575864348, "ngram_match_score": 0.36232263841752405, "weighted_ngram_match_score": 0.5132167919282155, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03737_1", "type": "JavaScript", "obfuscated": "function Main(input){console['log']((input||'')['split'](/\\s+/)['map'](function(entry){return entry[0x0]['toUpperCase']();})['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["atcoder beginner contest", "ABC"], ["resident register number", "RRN"], ["k nearest neighbor", "KNN"], ["async layered coding", "ALC"]], "original": "function Main(input) {\n  console.log( (input || \"\").split(/\\s+/).map(function(entry) {\n    return entry[0].toUpperCase();\n  }).join(\"\"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 399, "deobfuscated": "function Main(input) {\n  console.log((input || \"\").split(/\\s+/).map(function (entry) {\n    return entry[0].toUpperCase();\n  }).join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7755153330836867, "ngram_match_score": 0.5445178846139404, "weighted_ngram_match_score": 0.5575434477208066, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03826_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var inputArray=input['split']('\\x20');var a=inputArray[0x0];var b=inputArray[0x1];var c=inputArray[0x2];var d=inputArray[0x3];var result=a*b>c*d?a*b:c*d;console['log'](result);", "test_cases": [["3 5 2 7", "15"], ["100 600 200 300", "60000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar inputArray = input.split(' ');\nvar a = inputArray[0];\nvar b = inputArray[1];\nvar c = inputArray[2];\nvar d = inputArray[3];\n\nvar result = (a * b > c * d) ? a * b : c * d;\nconsole.log(result);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 400, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar inputArray = input.split(\" \");\nvar a = inputArray[0];\nvar b = inputArray[1];\nvar c = inputArray[2];\nvar d = inputArray[3];\nvar result = a * b > c * d ? a * b : c * d;\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8291898621527601, "ngram_match_score": 0.7127585847997477, "weighted_ngram_match_score": 0.7230484828589119, "syntax_match_score": 0.8809523809523809, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04012_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const input=s['replace'](/\\n/g,'')['split']('');let words=[];input['forEach']((x,i,self)=>{if(self['indexOf'](x)===i){words['push']({'word':x,'counter':0x1});}else{words['forEach'](y=>{if(x===y['word']){y['counter']+=0x1;}});}});const result=words['every'](x=>x['counter']%0x2===0x0)?'Yes':'No';console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abaccaba", "Yes"], ["hthth", "No"]], "original": "'use strict'\n\nfunction main(s) {  \n  \n  const input = s.replace(/\\n/g, '').split('');\n  let words = [];\n\n  // 文字配列の重複を検出\n  input.forEach((x, i, self) => {\n    \n    // 初出時はオブジェクト追加\n    if(self.indexOf(x) === i) {\n      words.push({word : x, counter: 1});\n\n    // 2回目以降はカウントするのみ\n    } else {\n      words.forEach(y => {\n        if(x === y.word) {\n          y.counter += 1;\n        }\n      })\n    }\n  });\n\n  // 全ての文字が偶数回出ているかどうか\n  const result = words.every(x => (x.counter % 2) === 0) ? 'Yes' : 'No';\n  \n  console.log(result);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 401, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const input = s.replace(/\\n/g, \"\").split(\"\");\n  let words = [];\n  input.forEach((x, i, self) => {\n    if (self.indexOf(x) === i) {\n      words.push({\n        word: x,\n        counter: 1\n      });\n    } else {\n      words.forEach(y => {\n        if (x === y.word) {\n          y.counter += 1;\n        }\n      });\n    }\n  });\n  const result = words.every(x => x.counter % 2 === 0) ? \"Yes\" : \"No\";\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6806620152317074, "ngram_match_score": 0.4344131781791723, "weighted_ngram_match_score": 0.44396243692722376, "syntax_match_score": 0.8705882352941177, "dataflow_match_score": 0.9736842105263158}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00006_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var string=input['trim']();console['log'](reverse(string));function reverse(s){return string['split']('')['reverse']()['join']('');}", "test_cases": [["w32nimda", "admin23w"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar string = input.trim();\n\nconsole.log(reverse(string));\n\nfunction reverse(s){\n    return string.split(\"\").reverse().join(\"\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 402, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar string = input.trim();\nconsole.log(reverse(string));\nfunction reverse(s) {\n  return string.split(\"\").reverse().join(\"\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.74201734478921, "ngram_match_score": 0.4593073632354732, "weighted_ngram_match_score": 0.5087620159213666, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05061339313215396}}
{"filename": "p00018_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\s/)['sort'](function(a,b){return b-a;})['join']('\\x20'));", "test_cases": [["3 6 9 7 5", "9 7 6 5 3"]], "original": "console.log(require('fs').readFileSync('/dev/stdin','utf8').split(/\\s/).sort(function(a,b){return b-a}).join(\" \"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 403, "deobfuscated": "console.log(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\s/).sort(function (a, b) {\n  return b - a;\n}).join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5297125797556869, "ngram_match_score": 0.018850319022747353, "weighted_ngram_match_score": 0.10000000000000002, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00024_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var minvs=input['trim']()['split']('\\x0a');var minv;while(minv=minvs['shift']()){var floor=Math['ceil'](Math['pow'](parseFloat(minv),0x2)/0x62+0x1);console['log'](floor);}", "test_cases": [["25.4\n25.4", "8\n8"]], "original": "'use strict';\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar minvs = input.trim().split('\\n');\n//var minvs = ['25.4','21.4','36.3'];\nvar minv;\nwhile (minv = minvs.shift()) {\n\tvar floor = Math.ceil(Math.pow(parseFloat(minv), 2)/98 + 1);\n\tconsole.log(floor);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 404, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar minvs = input.trim().split(\"\\n\");\nvar minv;\nwhile (minv = minvs.shift()) {\n  var floor = Math.ceil(Math.pow(parseFloat(minv), 2) / 98 + 1);\n  console.log(floor);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7826419203923229, "ngram_match_score": 0.5566301372834103, "weighted_ngram_match_score": 0.5739375442858814, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00036_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a\\x0a')['map'](function(i){c=i['replace'](/\\s/g,'')['split']('')['join']('');console['log'](c['indexOf']('1111')!=-0x1?'C':c['indexOf']('111')!=-0x1?'F':c['indexOf']('1101')!=-0x1?'D':c['indexOf']('101')!=-0x1?'B':c['indexOf']('1000001')!=-0x1?'G':c['indexOf']('10000001')!=-0x1?'A':'E');});", "test_cases": [["00000000\n00000000\n01100000\n00110000\n00000000\n00000000\n00000000\n00000000\n\n00011110\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n\n00000000\n00000000\n00110000\n00110000\n00000000\n00000000\n00000000\n00000000", "E\nC\nA"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n\\n').map(function(i){c=i.replace(/\\s/g,'').split('').join('');console.log(c.indexOf(\"1111\")!=-1?\"C\":c.indexOf(\"111\")!=-1?\"F\":c.indexOf(\"1101\")!=-1?\"D\":c.indexOf(\"101\")!=-1?\"B\":c.indexOf(\"1000001\")!=-1?\"G\":c.indexOf(\"10000001\")!=-1?\"A\":\"E\")})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 405, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\\n\").map(function (i) {\n  c = i.replace(/\\s/g, \"\").split(\"\").join(\"\");\n  console.log(c.indexOf(\"1111\") != -1 ? \"C\" : c.indexOf(\"111\") != -1 ? \"F\" : c.indexOf(\"1101\") != -1 ? \"D\" : c.indexOf(\"101\") != -1 ? \"B\" : c.indexOf(\"1000001\") != -1 ? \"G\" : c.indexOf(\"10000001\") != -1 ? \"A\" : \"E\");\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02391_1", "type": "JavaScript", "obfuscated": "function main(input){let nums=input['split']('\\x20')['map'](item=>parseInt(item));if(nums[0x0]>nums[0x1]){console['log']('a\\x20>\\x20b');}else if(nums[0x0]<nums[0x1]){console['log']('a\\x20<\\x20b');}else{console['log']('a\\x20==\\x20b');}}main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["1 2", "a < b"], ["4 3", "a > b"], ["5 5", "a == b"]], "original": "function main(input){\n    let nums = input.split(\" \").map(item=>parseInt(item));\n    if(nums[0]>nums[1]){\n        console.log(\"a > b\");\n    }else if(nums[0]<nums[1]){\n        console.log(\"a < b\");\n    }else{\n        console.log(\"a == b\");\n    }\n    \n    \n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf-8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 406, "deobfuscated": "function main(input) {\n  let nums = input.split(\" \").map(item => parseInt(item));\n  if (nums[0] > nums[1]) {\n    console.log(\"a > b\");\n  } else if (nums[0] < nums[1]) {\n    console.log(\"a < b\");\n  } else {\n    console.log(\"a == b\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.646677402693415, "ngram_match_score": 0.2137194383454172, "weighted_ngram_match_score": 0.372990172428243, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02407_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\n/);let num=input[0x1]['split']('\\x20')['map'](Number);num['reverse']();console['log'](num['join']('\\x20'));", "test_cases": [["5\n1 2 3 4 5", "5 4 3 2 1"], ["8\n3 3 4 4 5 8 7 9", "9 7 8 5 4 4 3 3"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/);\nlet num = input[1].split(' ').map(Number);\nnum.reverse();\n\nconsole.log(num.join(' '));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 407, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\n/);\nlet num = input[1].split(\" \").map(Number);\nnum.reverse();\nconsole.log(num.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5549564800983846, "ngram_match_score": 0.13440569963077395, "weighted_ngram_match_score": 0.14424375017452915, "syntax_match_score": 1.0, "dataflow_match_score": 0.9411764705882353}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02583_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var n=next();var l=nexts(n)['sort']((a,b)=>a-b);var ans=0x0;for(var i=0x0;i<n;i++)for(var j=i+0x1;j<n;j++)for(var k=j+0x1;k<n;k++){if(l[i]===l[j]||l[j]===l[k])continue;if(l[i]+l[j]>l[k])ans++;}return ans;}", "test_cases": [["5\n4 4 9 7 5", "5"], ["6\n4 5 4 3 3 5", "8"], ["10\n9 4 6 1 9 6 10 6 6 8", "39"], ["2\n1 1", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var l = nexts(n).sort((a,b)=>a-b);\n  var ans = 0;\n  for(var i = 0; i < n; i++)\n  for(var j = i+1; j < n; j++)\n  for(var k = j+1; k < n; k++){\n    if(l[i] === l[j] || l[j] === l[k])continue;\n    if(l[i] + l[j] > l[k])ans++;\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 408, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var n = next();\n  var l = nexts(n).sort((a, b) => a - b);\n  var ans = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = i + 1; j < n; j++) {\n      for (var k = j + 1; k < n; k++) {\n        if (l[i] === l[j] || l[j] === l[k]) {\n          continue;\n        }\n        if (l[i] + l[j] > l[k]) {\n          ans++;\n        }\n      }\n    }\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5806054078669809, "ngram_match_score": 0.11679943935156283, "weighted_ngram_match_score": 0.3324514604090435, "syntax_match_score": 0.8731707317073171, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.06382978723404253, "length_score": -0.06382978723404253, "increase_maintainability": -0.012352748335217267, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.021818181818181737, "new_decrease_halstead_effort": 0.02575089366036798}}
{"filename": "p02584_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\\x0a');let [X,K,D]=lines[0x0]['split']('\\x20')['map'](Number);X=Math['abs'](X);const div=Math['min'](Math['floor'](X/D),K);let x=X-div*D;let k=K-div;for(let i=0x0;i<k;i++){x-=D;if(x<=0x0){if(!((k-i)%0x2)){x+=D;}break;}}console['log'](Math['abs'](x));", "test_cases": [["6 2 4", "2"], ["7 4 3", "1"], ["10 1 2", "8"], ["1000000000000000 1000000000000000 1000000000000000", "1000000000000000"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nconst lines = input.split('\\n')\nlet [X, K, D] = lines[0].split(' ').map(Number)\n\nX = Math.abs(X)\nconst div = Math.min(Math.floor(X / D), K)\nlet x = X - div * D\nlet k = K - div\nfor (let i = 0; i < k; i++) {\n    x -= D\n    if (x <= 0) {\n        if (!((k - i) % 2)) {\n            x += D\n        }\n        break\n    }\n}\nconsole.log(Math.abs(x))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 409, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.split(\"\\n\");\nlet [X, K, D] = lines[0].split(\" \").map(Number);\nX = Math.abs(X);\nconst div = Math.min(Math.floor(X / D), K);\nlet x = X - div * D;\nlet k = K - div;\nfor (let i = 0; i < k; i++) {\n  x -= D;\n  if (x <= 0) {\n    if (!((k - i) % 2)) {\n      x += D;\n    }\n    break;\n  }\n}\nconsole.log(Math.abs(x));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7874206423056266, "ngram_match_score": 0.6217624868012815, "weighted_ngram_match_score": 0.6259592981074996, "syntax_match_score": 1.0, "dataflow_match_score": 0.9019607843137255}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02723_1", "type": "JavaScript", "obfuscated": "'use strict';function main(inp){let ans='No';if(inp[0x2]===inp[0x3]&&inp[0x4]===inp[0x5]){ans='Yes';}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["sippuu", "Yes"], ["iphone", "No"], ["coffee", "Yes"]], "original": "'use strict'\nfunction main(inp) {\n  let ans = \"No\";\n  if(inp[2] === inp[3] && inp[4] === inp[5]){\n  \tans = \"Yes\"\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 410, "deobfuscated": "'use strict';\n\nfunction main(inp) {\n  let ans = \"No\";\n  if (inp[2] === inp[3] && inp[4] === inp[5]) {\n    ans = \"Yes\";\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7286340238187523, "ngram_match_score": 0.4332008456263299, "weighted_ngram_match_score": 0.48133524964867963, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02759_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split']('\\x0a');const a=parseInt(input[0x0],0xa);console['log'](Math['round'](a/0x2));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5", "3"], ["2", "1"], ["100", "50"]], "original": "'use strict';\nfunction main(input) {\n  input = input.split(\"\\n\");\n  const a = parseInt(input[0], 10);\n  \n  console.log(Math.round(a / 2));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 411, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(\"\\n\");\n  const a = parseInt(input[0], 10);\n  console.log(Math.round(a / 2));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02779_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x0a');const N=Number(input[0x0]['trim']());const A=input[0x1]['trim']()['split']('\\x20')['map'](Number);let ret='YES';for(let i=0x0;i<N;i++){let tmp=A['slice'](i+0x1);let r=tmp['indexOf'](A[i]);if(r!==-0x1){ret='NO';break;}}console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n2 6 1 4 5", "YES"], ["6\n4 1 3 1 6 2", "NO"], ["2\n10000000 10000000", "NO"]], "original": "\"use strict\"\nfunction Main(input) {\n  input = input.trim().split('\\n');\n  const N = Number(input[0].trim());\n  const A = input[1].trim().split(' ').map(Number);\n  \n  let ret = 'YES';\n  for(let i=0; i<N; i++){\n    let tmp = A.slice(i+1);\n    let r = tmp.indexOf(A[i]);\n    if(r !== -1){\n      ret = 'NO';\n      break;\n    }\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 412, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = Number(input[0].trim());\n  const A = input[1].trim().split(\" \").map(Number);\n  let ret = \"YES\";\n  for (let i = 0; i < N; i++) {\n    let tmp = A.slice(i + 1);\n    let r = tmp.indexOf(A[i]);\n    if (r !== -1) {\n      ret = \"NO\";\n      break;\n    }\n  }\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6960285516300215, "ngram_match_score": 0.3572692350906375, "weighted_ngram_match_score": 0.4531607609031329, "syntax_match_score": 1.0, "dataflow_match_score": 0.9736842105263158}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02819_1", "type": "JavaScript", "obfuscated": "var fs=require('fs');var inn=parseInt(fs['readFileSync'](0x0)['toString']());function isPrime(n){if(n<=0x3)return n>0x1;else if(n%0x2===0x0||n%0x3===0x0)return![];var i=0x5;while(Math['pow'](i,0x2)<=n){if(n%i===0x0||n%(i+0x2)===0x0)return![];i+=0x6;}return!![];}while(!isPrime(inn)){inn++;}console['log'](inn);", "test_cases": [["20", "23"], ["2", "2"], ["99992", "100003"]], "original": "var fs = require('fs');\nvar inn = parseInt(fs.readFileSync(0).toString());\nfunction isPrime(n) {\n    if(n <= 3) return n > 1;\n    else if (n % 2 === 0 || n % 3 === 0) return false;\n    var i = 5;\n    while (Math.pow(i, 2) <= n) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}\nwhile (!isPrime(inn)) {\ninn++;\n}\nconsole.log(inn);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 413, "deobfuscated": "var fs = require(\"fs\");\nvar inn = parseInt(fs.readFileSync(0).toString());\nfunction isPrime(n) {\n  if (n <= 3) {\n    return n > 1;\n  } else if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  var i = 5;\n  while (Math.pow(i, 2) <= n) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n      return false;\n    }\n    i += 6;\n  }\n  return true;\n}\nwhile (!isPrime(inn)) {\n  inn++;\n}\nconsole.log(inn);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8498919294135666, "ngram_match_score": 0.7295259750528817, "weighted_ngram_match_score": 0.8043701008103401, "syntax_match_score": 0.8656716417910447, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011370825141345575, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0714285714285714, "new_decrease_halstead_effort": 0.16028708133971314}}
{"filename": "p02948_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const N=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);const M=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);const list=input['split']('\\x0a')['slice'](0x1)['map'](x=>x['split']('\\x20')['map'](x=>Number(x)))['filter'](x=>x[0x0]<=M)['sort']((a,b)=>{if(a[0x1]===b[0x1]){return b[0x0]-a[0x0];}else{return b[0x1]-a[0x1];}});let ans=0x0;let now=0x0;if(list['length']===0x0){console['log'](0x0);return;}for(let i=0x0;i<N;i++){if(now===M){break;}if(list[i][0x0]>M-now){continue;}ans+=list[i][0x1];now++;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3 4\n4 3\n4 1\n2 2", "5"], ["5 3\n1 2\n1 3\n1 4\n2 1\n2 3", "10"], ["1 1\n2 1", "0"]], "original": "'use strict'\n\nfunction Main(input) {\n  const N = Number(input.split(\"\\n\")[0].split(\" \")[0])\n  const M = Number(input.split(\"\\n\")[0].split(\" \")[1])\n  const list = input.split(\"\\n\").slice(1)\n    .map(x => x.split(\" \")\n    .map(x => Number(x)))\n    .filter(x => x[0] <= M)\n    .sort((a, b) => {\n      if(a[1] === b[1]) {\n        return b[0] - a[0]\n      } else {\n        return b[1] - a[1]\n      }\n    })\n  \n  let ans = 0\n  let now = 0\n  if(list.length === 0) {\n    console.log(0)\n    return\n  }\n\n  for(let i=0; i<N; i++) {\n    if(now === M) {\n      break\n    }\n    if(list[i][0] > M-now) {\n      continue\n    }\n    ans += list[i][1]\n    now++\n  }\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim())\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 414, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const N = Number(input.split(\"\\n\")[0].split(\" \")[0]);\n  const M = Number(input.split(\"\\n\")[0].split(\" \")[1]);\n  const list = input.split(\"\\n\").slice(1).map(x => x.split(\" \").map(x => Number(x))).filter(x => x[0] <= M).sort((a, b) => {\n    if (a[1] === b[1]) {\n      return b[0] - a[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n  let ans = 0;\n  let now = 0;\n  if (list.length === 0) {\n    console.log(0);\n    return;\n  }\n  for (let i = 0; i < N; i++) {\n    if (now === M) {\n      break;\n    }\n    if (list[i][0] > M - now) {\n      continue;\n    }\n    ans += list[i][1];\n    now++;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.646762919812304, "ngram_match_score": 0.28096371526204594, "weighted_ngram_match_score": 0.30608796398717014, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02981_1", "type": "JavaScript", "obfuscated": "var main=standardInput=>{var lengthList=standardInput['split']('\\x20');var n=Number['parseInt'](lengthList[0x0]);var a=Number['parseInt'](lengthList[0x1]);var b=Number['parseInt'](lengthList[0x2]);if(n*a>=b){console['log'](b);}else{console['log'](n*a);}};main(require('fs')['readFileSync']('/dev/stdin','UTF-8'));", "test_cases": [["4 2 9", "8"], ["4 2 7", "7"], ["4 2 8", "8"]], "original": "var main = (standardInput) => {\n    var lengthList = standardInput.split(' ');\n\tvar n = Number.parseInt(lengthList[0]);\n\tvar a = Number.parseInt(lengthList[1])\n    var b = Number.parseInt(lengthList[2])\n    \n    if ( n*a >= b){\n \t console.log(b);\n\t} else {\n  \t console.log(n*a)\n \t}\n    \t\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 415, "deobfuscated": "var main = standardInput => {\n  var lengthList = standardInput.split(\" \");\n  var n = Number.parseInt(lengthList[0]);\n  var a = Number.parseInt(lengthList[1]);\n  var b = Number.parseInt(lengthList[2]);\n  if (n * a >= b) {\n    console.log(b);\n  } else {\n    console.log(n * a);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5806737068842155, "ngram_match_score": 0.34813207695673903, "weighted_ngram_match_score": 0.4060320488257371, "syntax_match_score": 0.9122807017543859, "dataflow_match_score": 0.65625}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03030_1", "type": "JavaScript", "obfuscated": "function Main(input){'use strict';const temp=input['split']('\\x0a');const n=parseInt(temp['shift'](),0xa);for(let i=0x0;i<n;i++){temp[i]=temp[i]['split']('\\x20');temp[i]['push'](i+0x1);temp[i][0x1]=parseInt(temp[i][0x1],0xa);}temp['sort']((a,b)=>b[0x1]-a[0x1]);temp['sort']((a,b)=>{if(a[0x0]<b[0x0])return-0x1;else if(a[0x0]>b[0x0])return 0x1;else 0x0;});const ans=temp['map'](e=>e[0x2]);console['log'](ans['join']('\\x0a'));return![];}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40", "3\n4\n6\n1\n5\n2"], ["10\nyakutsk 10\nyakutsk 20\nyakutsk 30\nyakutsk 40\nyakutsk 50\nyakutsk 60\nyakutsk 70\nyakutsk 80\nyakutsk 90\nyakutsk 100", "10\n9\n8\n7\n6\n5\n4\n3\n2\n1"]], "original": "function Main(input) {\n    'use strict';\n   \n    const temp = input.split(\"\\n\");\n   \n    const n = parseInt(temp.shift(), 10);\n    for(let i = 0; i < n; i++){\n      temp[i] = temp[i].split(\" \");\n      temp[i].push(i + 1);\n      temp[i][1] = parseInt(temp[i][1],10)\n    }\n   \n    temp.sort((a,b) => b[1] - a[1]);\n    temp.sort((a,b) => {\n      if(a[0] < b[0]) return -1;\n      else if(a[0] > b[0]) return 1;\n      else 0;\n    });\n    \n    // temp.forEach(e => console.log(e[2]))\n    const ans = temp.map(e => e[2]);\n    console.log(ans.join(\"\\n\"));\n    return false;\n}\n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 416, "deobfuscated": "function Main(input) {\n  'use strict';\n\n  const temp = input.split(\"\\n\");\n  const n = parseInt(temp.shift(), 10);\n  for (let i = 0; i < n; i++) {\n    temp[i] = temp[i].split(\" \");\n    temp[i].push(i + 1);\n    temp[i][1] = parseInt(temp[i][1], 10);\n  }\n  temp.sort((a, b) => b[1] - a[1]);\n  temp.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n    } else {\n      0;\n    }\n  });\n  const ans = temp.map(e => e[2]);\n  console.log(ans.join(\"\\n\"));\n  return false;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7402757515561791, "ngram_match_score": 0.5034929257981583, "weighted_ngram_match_score": 0.5697596131368383, "syntax_match_score": 0.8878504672897196, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0076550915841480105, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019230769230769273, "new_decrease_halstead_effort": 0.1816577184063054}}
{"filename": "p03290_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x0a');const DG=input['shift']()['split']('\\x20')['map'](v=>Number(v));input=input['map'](v=>v['split']('\\x20')['map'](v=>Number(v)));const calc=(a,r)=>{let count=[Math['pow'](0xa,0x8)];for(let i=0x0;i<DG[0x0];i++){const cur=Math['pow'](0x2,i);if((a&cur)===cur){const points=(i+0x1)*0x64;let max=points*input[i][0x0]+input[i][0x1];let num=Math['ceil'](r/points);if(max<r){count['push'](input[i][0x0]+calc(a-cur,r-max));}else{count['push'](num<input[i][0x0]?num:input[i][0x0]);}}}return Math['min'](...count);};console['log'](calc(Math['pow'](0x2,DG[0x0])-0x1,DG[0x1]));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 700\n3 500\n5 800", "3"], ["2 2000\n3 500\n5 800", "7"], ["2 400\n3 500\n5 800", "2"], ["5 25000\n20 1000\n40 1000\n50 1000\n30 1000\n1 1000", "66"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  const DG = input.shift().split(' ').map(v => Number(v))\n  input = input.map(v => v.split(' ').map(v => Number(v)))\n  const calc = (a, r) => {\n    let count = [Math.pow(10, 8)]\n    for(let i = 0; i < DG[0]; i++) {\n      const cur = Math.pow(2, i)\n      if ((a & cur) === cur) {\n        const points = (i+1) * 100\n        let max = points * input[i][0] + input[i][1]\n        let num = Math.ceil(r / points)\n        if (max < r) {\n          count.push(input[i][0] + calc(a - cur, r - max))\n        } else {\n          count.push(num < input[i][0] ? num : input[i][0])\n        }\n      }\n    }\n    return Math.min(...count)\n  }\n  console.log(calc(Math.pow(2, DG[0]) - 1, DG[1]))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 417, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const DG = input.shift().split(\" \").map(v => Number(v));\n  input = input.map(v => v.split(\" \").map(v => Number(v)));\n  const calc = (a, r) => {\n    let count = [Math.pow(10, 8)];\n    for (let i = 0; i < DG[0]; i++) {\n      const cur = Math.pow(2, i);\n      if ((a & cur) === cur) {\n        const points = (i + 1) * 100;\n        let max = points * input[i][0] + input[i][1];\n        let num = Math.ceil(r / points);\n        if (max < r) {\n          count.push(input[i][0] + calc(a - cur, r - max));\n        } else {\n          count.push(num < input[i][0] ? num : input[i][0]);\n        }\n      }\n    }\n    return Math.min(...count);\n  };\n  console.log(calc(Math.pow(2, DG[0]) - 1, DG[1]));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7849625191015336, "ngram_match_score": 0.5903695105241293, "weighted_ngram_match_score": 0.6168962962190838, "syntax_match_score": 1.0, "dataflow_match_score": 0.9325842696629213}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03407_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x20')['map'](a=>parseInt(a));console['log'](s[0x0]+s[0x1]>=s[0x2]?'Yes':'No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["50 100 120", "Yes"], ["500 100 1000", "No"], ["19 123 143", "No"], ["19 123 142", "Yes"]], "original": "function Main(s) {\n\ts = s.split(\" \").map(a => parseInt(a));\n\t\n\tconsole.log(s[0] + s[1] >= s[2] ? \"Yes\" : \"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 418, "deobfuscated": "function Main(s) {\n  s = s.split(\" \").map(a => parseInt(a));\n  console.log(s[0] + s[1] >= s[2] ? \"Yes\" : \"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03447_1", "type": "JavaScript", "obfuscated": "const BKRT='\\x0a';const SPAC='\\x20';const NOSP='';function Main(input){input=[]['concat'](...input['split'](BKRT)['map'](a=>a['split'](SPAC)));const strShift=()=>input['shift']();const intShift=()=>~~input['shift']();return~~(intShift()-intShift())%intShift();}((b,c,d)=>'undefined'!=typeof require?console['log'](Main(require('fs')['readFileSync']('/dev/stdin','utf8'))):[b=b['split']('\\x0a')['slice'](0x1,-0x1)['join']('\\x0a'),c=(function(){try{return Main(b);}catch(f){return f['stack']||f['message'];}}()),d=typeof c,'string'==d||(c=JSON['stringify'](c)),$('<form>')['append']([[0xa,b],0x0,[0x1,d],0x0,[0xa,c]]['map'](f=>$(f?'<textarea>':'<br>',f&&{'rows':f[0x0],'cols':0x28,'text':f[0x1]})))['appendTo']('body')])('\\x0a1234\\x0a150\\x0a100\\x0a');", "test_cases": [["1234\n150\n100", "84"], ["1000\n108\n108", "28"], ["579\n123\n456", "0"], ["7477\n549\n593", "405"]], "original": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\n\nfunction Main(input){\n\tinput = [].concat(...input.split(BKRT).map(a=>a.split(SPAC)));\n  const strShift = ()=>input.shift();\n  const intShift = ()=>~~input.shift();\n  \n  return ~~(intShift()-intShift())%intShift();\n}\n\n// If you are interested in the algorithms I used, \n// there is no need to read down from this line.\n\n((b,c,d)=>\"undefined\"!=typeof require?console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"))):[b=b.split(\"\\n\").slice(1,-1).join(\"\\n\"),c=function(){try{return Main(b)}catch(f){return f.stack||f.message}}(),d=typeof c,\"string\"==d||(c=JSON.stringify(c)),$(\"<form>\").append([[10,b],0,[1,d],0,[10,c]].map(f=>$(f?\"<textarea>\":\"<br>\",f&&{rows:f[0],cols:40,text:f[1]}))).appendTo(\"body\")])(`\n1234\n150\n100\n`);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 419, "deobfuscated": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\nfunction Main(input) {\n  input = [].concat(...input.split(BKRT).map(a => a.split(SPAC)));\n  const strShift = () => input.shift();\n  const intShift = () => ~~input.shift();\n  return ~~(intShift() - intShift()) % intShift();\n}\n((b, c, d) => typeof require != \"undefined\" ? console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))) : [b = b.split(\"\\n\").slice(1, -1).join(\"\\n\"), c = function () {\n  try {\n    return Main(b);\n  } catch (f) {\n    return f.stack || f.message;\n  }\n}(), d = typeof c, d == \"string\" || (c = JSON.stringify(c)), $(\"<form>\").append([[10, b], 0, [1, d], 0, [10, c]].map(f => $(f ? \"<textarea>\" : \"<br>\", f && {\n  rows: f[0],\n  cols: 40,\n  text: f[1]\n}))).appendTo(\"body\")])(\"\\n1234\\n150\\n100\\n\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5926195864452681, "ngram_match_score": 0.14802819305607695, "weighted_ngram_match_score": 0.3008815252740152, "syntax_match_score": 0.9215686274509803, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03565_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split'](/\\n/);let S=input[0x0]['split']('');const T=input[0x1]['split']('');const us='UNRESTORABLE';for(let i=S['length']-T['length'];i>=0x0;i--){let x=0x0;for(let j=0x0;j<T['length'];j++){if(S[i+j]==T[j]||S[i+j]=='?'){}else{x++;continue;}}if(x>0x0)continue;for(let k=0x0;k<T['length'];k++){S[i+k]=T[k];}for(let i=0x0;i<S['length'];i++){S[i]=S[i]=='?'?'a':S[i];}console['log'](S=S['join'](''));return;}console['log'](us);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["?tc????\ncoder", "atcoder"], ["??p??d??\nabc", "UNRESTORABLE"]], "original": "\"use strict\"\n\nfunction main(input) {\n  input = input.split(/\\n/)\n  let S = input[0].split(\"\")\n  const T = input[1].split(\"\")\n  const us = \"UNRESTORABLE\"\n  // if (S.length < T.length) {\n  //   console.log(us)\n  //   return\n  // } else {\n  for (let i = S.length - T.length; i >= 0; i--) {\n    //\n    let x = 0\n    for (let j = 0; j < T.length; j++) {\n      //Tの区間の中で合致するかどうか\n      if (S[i + j] == T[j] || S[i + j] == \"?\") {\n        //この文字は合致、または?だからパス\n      } else {\n        //合致しない＞この区間は合致しない\n        x++\n        continue\n      }\n      //\n    }\n    //合致しなかったら次のforへ、合致したら次のステップへ\n    if (x > 0) continue\n\n    //Tで埋める\n    for (let k = 0; k < T.length; k++) {\n      S[i + k] = T[k]\n    }\n    //残りの?をaに変換 <todo> : 正規表現などで\n    // S = S.replace(/(.+)/, \"a\")\n    for (let i = 0; i < S.length; i++) {\n      S[i] = S[i] == \"?\" ? \"a\" : S[i]\n    }\n    console.log((S = S.join(\"\")))\n    return\n  }\n  // }\n  //\n  console.log(us)\n  //\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 420, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(/\\n/);\n  let S = input[0].split(\"\");\n  const T = input[1].split(\"\");\n  const us = \"UNRESTORABLE\";\n  for (let i = S.length - T.length; i >= 0; i--) {\n    let x = 0;\n    for (let j = 0; j < T.length; j++) {\n      if (S[i + j] == T[j] || S[i + j] == \"?\") {} else {\n        x++;\n        continue;\n      }\n    }\n    if (x > 0) {\n      continue;\n    }\n    for (let k = 0; k < T.length; k++) {\n      S[i + k] = T[k];\n    }\n    for (let i = 0; i < S.length; i++) {\n      S[i] = S[i] == \"?\" ? \"a\" : S[i];\n    }\n    console.log(S = S.join(\"\"));\n    return;\n  }\n  console.log(us);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7195323157640305, "ngram_match_score": 0.47119891023300525, "weighted_ngram_match_score": 0.48629543218819615, "syntax_match_score": 0.9206349206349206, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03605_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var g_input='';process['stdin']['on']('data',function(chunk){g_input+=chunk;});process['stdin']['on']('end',function(){Main(g_input['split'](/\\r?\\n/));});function Main(input){if(input[0x0][0x0]==='9'||input[0x0][0x1]==='9'){console['log']('Yes');}else{console['log']('No');}return 0x0;}", "test_cases": [["29", "Yes"], ["72", "No"], ["91", "Yes"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\n\nprocess.stdin.on('end', function() {\n    Main(g_input.split(/\\r?\\n/));\n});\n\nfunction Main(input) {\n\n    if (input[0][0] === '9' || input[0][1] === '9') {\n        console.log('Yes');\n    }\n    else {\n        console.log('No');\n    }\n\n    return 0;\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 421, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar g_input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  g_input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  Main(g_input.split(/\\r?\\n/));\n});\nfunction Main(input) {\n  if (input[0][0] === \"9\" || input[0][1] === \"9\") {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n  return 0;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7233175097150938, "ngram_match_score": 0.42885922098061957, "weighted_ngram_match_score": 0.46441081787975547, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03643_1", "type": "JavaScript", "obfuscated": "function Main(input){console['log']('ABC'+input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["100", "ABC100"], ["425", "ABC425"], ["999", "ABC999"]], "original": "function Main(input) {\n  console.log('ABC' + input);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 422, "deobfuscated": "function Main(input) {\n  console.log(\"ABC\" + input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7998893192644195, "ngram_match_score": 0.5969491792019646, "weighted_ngram_match_score": 0.6026080978557137, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03658_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('\\x0a');let N=Number(xs[0x0]['split']('\\x20')[0x0]);let K=Number(xs[0x0]['split']('\\x20')[0x1]);let l=[];for(let i=0x0;i<N;i++){l['push'](xs[0x1]['split']('\\x20')[i]);}const compare=(b,a)=>{return a-b;};l['sort'](compare);let ans=0x0;for(let i=0x0;i<K;i++){ans+=Number(l[i]);}console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n1 2 3 4 5", "12"], ["15 14\n50 26 27 21 41 7 42 35 7 5 5 36 39 1 45", "386"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0].split(' ')[0]);\n   let K = Number(xs[0].split(' ')[1]);\n   let l = [];\n   for(let i=0; i<N; i++){\n   l.push(xs[1].split(' ')[i]);\n   }\n   const compare = (b, a)=>{ //関数名は何でもOK\n   return a - b;  //a - b 昇順 b - a 降順\n   }\n   l.sort(compare);\n   \n   let ans = 0;\n   for(let i=0; i<K; i++){\n     ans += Number(l[i]);\n   }  \n   console.log(ans);\n\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 423, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\"\\n\");\n  let N = Number(xs[0].split(\" \")[0]);\n  let K = Number(xs[0].split(\" \")[1]);\n  let l = [];\n  for (let i = 0; i < N; i++) {\n    l.push(xs[1].split(\" \")[i]);\n  }\n  const compare = (b, a) => {\n    return a - b;\n  };\n  l.sort(compare);\n  let ans = 0;\n  for (let i = 0; i < K; i++) {\n    ans += Number(l[i]);\n  }\n  console.log(ans);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5121131104277746, "ngram_match_score": 0.2587371076138778, "weighted_ngram_match_score": 0.30554744013551227, "syntax_match_score": 0.9484536082474226, "dataflow_match_score": 0.5357142857142857}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03745_1", "type": "JavaScript", "obfuscated": "(function(stdin){input=stdin['split']('\\x0a');var n=parseInt(input[0x0],0xa);var a=input[0x1]['split']('\\x20');var ans=0x1;var up=![];var down=![];for(var i=0x0;i<n-0x1;i++){if(a[i]<a[i+0x1]){up=!![];}if(a[i]>a[i+0x1]){down=!![];}if(up&&down){up=down=![];ans++;}}console['log']('%d',ans);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["6\n1 2 3 2 2 1", "2"], ["9\n1 2 1 2 1 2 1 2 1", "5"], ["7\n1 2 3 2 1 999999999 1000000000", "3"]], "original": "(function(stdin){\n  input = stdin.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var a = input[1].split(\" \");\n\n  var ans = 1;\n  var up = false;\n  var down = false;\n  for (var i = 0; i < n - 1; i++) {\n    if (a[i] < a[i + 1]) {\n      up = true;\n    }\n\n    if (a[i] > a[i + 1]) {\n      down = true;\n    }\n\n    if (up && down) {\n      up = down = false;\n      ans++;\n    }\n  }\n\n  console.log(\"%d\", ans);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 424, "deobfuscated": "(function (stdin) {\n  input = stdin.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var a = input[1].split(\" \");\n  var ans = 1;\n  var up = false;\n  var down = false;\n  for (var i = 0; i < n - 1; i++) {\n    if (a[i] < a[i + 1]) {\n      up = true;\n    }\n    if (a[i] > a[i + 1]) {\n      down = true;\n    }\n    if (up && down) {\n      up = down = false;\n      ans++;\n    }\n  }\n  console.log(\"%d\", ans);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9872666530074574, "ngram_match_score": 0.9612821013662599, "weighted_ngram_match_score": 0.9877845106635695, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.012147245728802325, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.10256410256410253, "new_decrease_halstead_effort": 0.28205128205128205}}
{"filename": "p03999_1", "type": "JavaScript", "obfuscated": "function Main(s){const sl=s['length']-0x1;const sa=s['split']('')['map'](a=>parseInt(a));var ans=0x0;for(var i=0x0;i<0x1<<sl;i++){var b=0x0;for(var j=0x0;j<sl;j++){b+=sa[j];if(i&0x1<<j){ans+=b;b=0x0;}else b*=0xa;}ans+=b+sa[sl];}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["125", "176"], ["9999999999", "12656242944"]], "original": "function Main(s) {\n  const sl = s.length - 1;\n  const sa = s.split(\"\").map(a => parseInt(a));\n  var ans = 0;\n  for(var i = 0; i < 1 << sl; i++){\n    var b = 0;\n    for(var j = 0; j < sl; j++){\n      b += sa[j];\n      if(i & 1 << j){\n        ans += b;\n        b = 0;\n      }\n      else b *= 10;\n    }\n    ans += b + sa[sl];\n }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 425, "deobfuscated": "function Main(s) {\n  const sl = s.length - 1;\n  const sa = s.split(\"\").map(a => parseInt(a));\n  var ans = 0;\n  for (var i = 0; i < 1 << sl; i++) {\n    var b = 0;\n    for (var j = 0; j < sl; j++) {\n      b += sa[j];\n      if (i & 1 << j) {\n        ans += b;\n        b = 0;\n      } else {\n        b *= 10;\n      }\n    }\n    ans += b + sa[sl];\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.821645029944968, "ngram_match_score": 0.6622424432393125, "weighted_ngram_match_score": 0.7427587291721385, "syntax_match_score": 0.881578947368421, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00023_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Number(p['shift']());for(var i=0x0;i<n;i++){var args=p['shift']()['split']('\\x20')['map'](Number);var xa=args['shift']();var ya=args['shift']();var ra=args['shift']();var xb=args['shift']();var yb=args['shift']();var rb=args['shift']();var d=Math['sqrt'](Math['pow'](xb-xa,0x2)+Math['pow'](yb-ya,0x2));if(ra>d+rb){console['log'](0x2);}else if(rb>d+ra){console['log'](-0x2);}else if(d<ra+rb){console['log'](0x1);}else{console['log'](0x0);}}}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0", "2\n0"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var args = p.shift().split(' ').map(Number);\n    var xa = args.shift();\n    var ya = args.shift();\n    var ra = args.shift();\n    var xb = args.shift();\n    var yb = args.shift();\n    var rb = args.shift();\n    var d = Math.sqrt(Math.pow(xb - xa, 2) + Math.pow(yb - ya, 2));\n\n    if (ra > d + rb) {\n      console.log(2);\n    } else if (rb > d + ra) {\n      console.log(-2);\n    } else if (d < ra + rb) {\n      console.log(1);\n    } else {\n      console.log(0);\n    }\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 426, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\");\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var args = p.shift().split(\" \").map(Number);\n    var xa = args.shift();\n    var ya = args.shift();\n    var ra = args.shift();\n    var xb = args.shift();\n    var yb = args.shift();\n    var rb = args.shift();\n    var d = Math.sqrt(Math.pow(xb - xa, 2) + Math.pow(yb - ya, 2));\n    if (ra > d + rb) {\n      console.log(2);\n    } else if (rb > d + ra) {\n      console.log(-2);\n    } else if (d < ra + rb) {\n      console.log(1);\n    } else {\n      console.log(0);\n    }\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9412098506795361, "ngram_match_score": 0.8968349716112192, "weighted_ngram_match_score": 0.9121220781657484, "syntax_match_score": 1.0, "dataflow_match_score": 0.9558823529411765}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01101_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['trim']()['split']('\\x0a');while(line=lines['shift']()){const [n,max]=line['split']('\\x20')['map'](Number);if(n===0x0&&max===0x0){break;}const prices=lines['shift']()['split']('\\x20')['map'](Number);const allSum=[];prices['map']((priceA,indexA)=>{prices['map']((priceB,indexB)=>{if(indexA!==indexB){const sum=priceA+priceB;if(sum<=max){allSum['push'](sum);}}});});const answer=allSum['sort']((a,b)=>b-a)[0x0];if(answer){console['log'](answer);continue;}console['log']('NONE');}", "test_cases": [["3 45\n10 20 30\n6 10\n1 2 5 8 9 11\n7 100\n11 34 83 47 59 29 70\n4 100\n80 70 60 50\n4 20\n10 5 10 16\n0 0", "40\n10\n99\nNONE\n20"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst lines = input.trim().split('\\n');\n\nwhile (line = lines.shift()) {\n\tconst [n, max] = line.split(' ').map(Number);\n\n\tif (n === 0 && max === 0) {break;}\n\n\tconst prices = lines.shift().split(' ').map(Number);\n\n\tconst allSum = [];\n\n\tprices.map((priceA, indexA) => {\n\t\t\tprices.map((priceB, indexB) => {\n\t\t\t\tif (indexA !== indexB) {\n\t\t\t\t\tconst sum = priceA + priceB;\n\n\t\t\t\t\tif(sum <= max) {\n\t\t\t\t\t\tallSum.push(sum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t);\n\n\tconst answer = allSum.sort((a,b) => b - a)[0];\n\n\tif (answer) {\n\t\tconsole.log(answer);\n\t\tcontinue;\n\t}\n\n\tconsole.log('NONE');\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 427, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.trim().split(\"\\n\");\nwhile (line = lines.shift()) {\n  const [n, max] = line.split(\" \").map(Number);\n  if (n === 0 && max === 0) {\n    break;\n  }\n  const prices = lines.shift().split(\" \").map(Number);\n  const allSum = [];\n  prices.map((priceA, indexA) => {\n    prices.map((priceB, indexB) => {\n      if (indexA !== indexB) {\n        const sum = priceA + priceB;\n        if (sum <= max) {\n          allSum.push(sum);\n        }\n      }\n    });\n  });\n  const answer = allSum.sort((a, b) => b - a)[0];\n  if (answer) {\n    console.log(answer);\n    continue;\n  }\n  console.log(\"NONE\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7964366527096162, "ngram_match_score": 0.6384211840738243, "weighted_ngram_match_score": 0.6723254267646404, "syntax_match_score": 1.0, "dataflow_match_score": 0.875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02256_1", "type": "JavaScript", "obfuscated": "function Main(input){var [a,b]=input['split']('\\x20')['map'](Number);if(b>a)[a,b]=[b,a];var r;do{r=a%b;a=b;b=r;}while(r);console['log'](a);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["54 20", "2"], ["147 105", "21"]], "original": "function Main(input) {\n  var [a, b] = input.split(\" \").map(Number);\n  if(b > a) [a, b] = [b, a];\n  var r;\n  do {\n    r = a % b;\n    a = b;\n    b = r;\n  } while(r)\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 428, "deobfuscated": "function Main(input) {\n  var [a, b] = input.split(\" \").map(Number);\n  if (b > a) {\n    [a, b] = [b, a];\n  }\n  var r;\n  do {\n    r = a % b;\n    a = b;\n    b = r;\n  } while (r);\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8482011583305853, "ngram_match_score": 0.6981932076527441, "weighted_ngram_match_score": 0.7779447590029305, "syntax_match_score": 0.9166666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02390_1", "type": "JavaScript", "obfuscated": "var x=require('fs')['readFileSync']('/dev/stdin','utf8');x=parseInt(x,0xa);var h=Math['floor'](x/0xe10);var m=Math['floor'](x%0xe10/0x3c);var s=x%0xe10%0x3c;console['log'](h+':'+m+':'+s);", "test_cases": [["46979", "13:2:59"]], "original": "var x = require('fs').readFileSync('/dev/stdin', 'utf8');\nx = parseInt(x, 10)\nvar h = Math.floor(x / 3600)\nvar m = Math.floor((x % 3600) / 60)\nvar s = x % 3600 % 60;\nconsole.log(h + \":\" + m + \":\" + s);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 429, "deobfuscated": "var x = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nx = parseInt(x, 10);\nvar h = Math.floor(x / 3600);\nvar m = Math.floor(x % 3600 / 60);\nvar s = x % 3600 % 60;\nconsole.log(h + \":\" + m + \":\" + s);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7625902897139986, "ngram_match_score": 0.6021146048477796, "weighted_ngram_match_score": 0.6110372516826331, "syntax_match_score": 0.8372093023255814, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02570_1", "type": "JavaScript", "obfuscated": "function Main(raw_input){const [line]=raw_input['split']('\\x0a');const [d,t,s]=toNumArray(line);let isYes=t*s>=d;console['log'](isYes?'Yes':'No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function toNumArray(str,delimitor='\\x20'){return str['split'](delimitor)['map'](s=>parseInt(s,0xa));}function toBitIntArray(str,delimitor='\\x20'){return str['split'](delimitor)['map'](s=>BigInt(s));}function toMatrix(array,delimitor='\\x20'){const result=array['map'](v=>v['split'](delimitor));return result;}function sum(n){return n['reduce']((a,b)=>a+b);}", "test_cases": [["1000 15 80", "Yes"], ["2000 20 100", "Yes"], ["10000 1 1", "No"]], "original": "/**\n * @param {String} raw_input 入力\n */\nfunction Main(raw_input) {\n\tconst [line] = raw_input.split(\"\\n\");\n\tconst [ d, t, s ] = toNumArray(line);\n\t\n\tlet isYes = t * s >= d;\n\tconsole.log(isYes ? 'Yes': 'No');\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n////////// ユーティリティ関数\n\n/**\n * 文字列を数値配列\n * @param {String} str 文字列\n */\nfunction toNumArray(str, delimitor = ' ') {\n\treturn str.split(delimitor).map(s => parseInt(s, 10));\n}\n\n/**\n * 文字列をVigInt配列に変換する\n * @param {String} str 文字列\n */\nfunction toBitIntArray(str, delimitor = ' ') {\n\treturn str.split(delimitor).map(s => BigInt(s));\n}\n\n/**\n * 2次元配列を返す\n * @param {Array<String>} array 1次元の文字列配列\n * @param {String} delimitor デリミタ\n */\nfunction toMatrix(array, delimitor = ' ') {\n\tconst result = array.map(v => v.split(delimitor));\n\treturn result;\n}\n\n/**\n * 合計を出す\n * @param {Array<Number>} n 数値配列\n */\nfunction sum(n) {\n\treturn n.reduce((a, b) => a + b);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 430, "deobfuscated": "function Main(raw_input) {\n  const [line] = raw_input.split(\"\\n\");\n  const [d, t, s] = toNumArray(line);\n  let isYes = t * s >= d;\n  console.log(isYes ? \"Yes\" : \"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction toNumArray(str, delimitor = \" \") {\n  return str.split(delimitor).map(s => parseInt(s, 10));\n}\nfunction toBitIntArray(str, delimitor = \" \") {\n  return str.split(delimitor).map(s => BigInt(s));\n}\nfunction toMatrix(array, delimitor = \" \") {\n  const result = array.map(v => v.split(delimitor));\n  return result;\n}\nfunction sum(n) {\n  return n.reduce((a, b) => a + b);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6925139900726447, "ngram_match_score": 0.347598153286582, "weighted_ngram_match_score": 0.422457807003997, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02843_1", "type": "JavaScript", "obfuscated": "function Main(input){const n=input['split']('\\x0a')[0x0];var ans=0x0;if(n>=0x9dd){ans=0x1;console['log'](ans);}else{for(var i=0x1;i<=0x19;i++){if(n>=i*0x65&&n<=i*0x69){ans=0x1;break;}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["615", "1"], ["217", "0"]], "original": "function Main(input) {\n    const n = input.split(\"\\n\")[0];\n    var ans = 0 \n    if (n >= 2525){\n        ans = 1\n        console.log(ans);\n    } else {\n        for(var i = 1; i <= 25; i++){\n            if (n >= i * 101 && n <= i* 105) {\n                ans = 1\n                break;\n            }\n        }\n    }\n    console.log(ans)\n    }    \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 431, "deobfuscated": "function Main(input) {\n  const n = input.split(\"\\n\")[0];\n  var ans = 0;\n  if (n >= 2525) {\n    ans = 1;\n    console.log(ans);\n  } else {\n    for (var i = 1; i <= 25; i++) {\n      if (n >= i * 101 && n <= i * 105) {\n        ans = 1;\n        break;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7846257995987196, "ngram_match_score": 0.54413074047686, "weighted_ngram_match_score": 0.5943724579180185, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02859_1", "type": "JavaScript", "obfuscated": "console['log'](Math['pow'](parseInt(require('fs')['readFileSync']('/dev/stdin','utf8'),0xa),0x2));", "test_cases": [["2", "4"], ["100", "10000"]], "original": "console.log(Math.pow(parseInt(require('fs').readFileSync('/dev/stdin','utf8'),10),2))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 432, "deobfuscated": "console.log(Math.pow(parseInt(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"), 10), 2));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 1.0, "dataflow_match_score": 0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02860_1", "type": "JavaScript", "obfuscated": "function Main(input){var data=input['split']('\\x0a');var split=parseInt(data[0x0])/0x2;var cdn=[];for(let i=0x0;i<data[0x1]['length'];i+=split){cdn['push'](data[0x1]['slice'](i,i+split));}if(cdn[0x0]==cdn[0x1]){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\nabcabc", "Yes"], ["6\nabcadc", "No"], ["1\nz", "No"]], "original": "function Main(input) {\n    var data = input.split(\"\\n\")\n    var split = parseInt(data[0])/2;\n\tvar cdn = [];\n\tfor (let i = 0; i < data[1].length; i+=split) {\n    \tcdn.push(data[1].slice(i, i+split));\n\t}\n\tif(cdn[0]==cdn[1]) {\n\t\tconsole.log('Yes');\n\t}else{\n\t\tconsole.log('No');\n\t}\n}\n\n// Don't edit this line!\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 433, "deobfuscated": "function Main(input) {\n  var data = input.split(\"\\n\");\n  var split = parseInt(data[0]) / 2;\n  var cdn = [];\n  for (let i = 0; i < data[1].length; i += split) {\n    cdn.push(data[1].slice(i, i + split));\n  }\n  if (cdn[0] == cdn[1]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.712274661073673, "ngram_match_score": 0.39142187163243775, "weighted_ngram_match_score": 0.4576767726622541, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0014835946868296812, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03451741796435659}}
{"filename": "p02951_1", "type": "JavaScript", "obfuscated": "function Main(input){var a,b,c;a=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);b=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);c=Number(input['split']('\\x0a')[0x0]['split']('\\x20')[0x2]);console['log'](c-(a-b)>0x0?c-(a-b):0x0);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 4 3", "1"], ["8 3 9", "4"], ["12 3 7", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var a,b,c;\n  a = Number(input.split('\\n')[0].split(' ')[0]);\n  b = Number(input.split('\\n')[0].split(' ')[1]);\n  c = Number(input.split('\\n')[0].split(' ')[2]);\n  console.log(c - (a - b) > 0 ? c - (a - b) : 0);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 434, "deobfuscated": "function Main(input) {\n  var a;\n  var b;\n  var c;\n  a = Number(input.split(\"\\n\")[0].split(\" \")[0]);\n  b = Number(input.split(\"\\n\")[0].split(\" \")[1]);\n  c = Number(input.split(\"\\n\")[0].split(\" \")[2]);\n  console.log(c - (a - b) > 0 ? c - (a - b) : 0);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7489234422095006, "ngram_match_score": 0.5141846121568187, "weighted_ngram_match_score": 0.5363036772291285, "syntax_match_score": 0.9452054794520548, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0008188792610530626, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.023255813953488413, "new_decrease_halstead_effort": -0.023255813953488413}}
{"filename": "p03006_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const n=+input[0x0];if(n<=0x2){console['log'](0x1);return;}const xy=input['slice'](0x1)['map'](s=>s['split']('\\x20')['map'](n=>+n));const map={};xy['forEach'](a=>{xy['forEach'](b=>{if(a===b)return;const vec=[b[0x0]-a[0x0],b[0x1]-a[0x1]];const m=vec['join']('_');map[m]=map[m]==null?0x1:map[m]+0x1;});});const res=Object['keys'](map)['reduce']((r,xystr)=>{const count=map[xystr];return count>r[0x0]?[count,xystr]:[r[0x0],r[0x1]];},[0x0,'']);console['log'](0x1+(n-0x1)-res[0x0]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 1\n2 2", "1"], ["3\n1 4\n4 6\n7 8", "1"], ["4\n1 1\n1 2\n2 1\n2 2", "2"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    const n = +input[0];\n  \n    if (n <= 2) {\n      console.log(1);\n      return;\n    }\n  \n    const xy = input.slice(1).map(s => s.split(' ').map(n => +n));\n    // [[x, y],[x, y],[]]\n  \n    const map = {};\n    xy.forEach(a => {\n      xy.forEach(b => {\n        if (a === b) return; // 自分自身の場合\n        \n        const vec = [b[0] - a[0], b[1] - a[1]];\n        const m = vec.join('_');\n        map[m] = map[m] == null ? 1 : map[m] + 1;\n      });\n    });\n\n\tconst res = Object.keys(map).reduce((r, xystr) => {\n\t\tconst count = map[xystr];\n        return count > r[0] ? [count, xystr] : [r[0], r[1]];\n    }, [0, '']);\n  \t\n//    const pq = res[1];\n    \n    \n    console.log(1 + (n - 1) - res[0]);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 435, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const n = +input[0];\n  if (n <= 2) {\n    console.log(1);\n    return;\n  }\n  const xy = input.slice(1).map(s => s.split(\" \").map(n => +n));\n  const map = {};\n  xy.forEach(a => {\n    xy.forEach(b => {\n      if (a === b) {\n        return;\n      }\n      const vec = [b[0] - a[0], b[1] - a[1]];\n      const m = vec.join(\"_\");\n      map[m] = map[m] == null ? 1 : map[m] + 1;\n    });\n  });\n  const res = Object.keys(map).reduce((r, xystr) => {\n    const count = map[xystr];\n    if (count > r[0]) {\n      return [count, xystr];\n    } else {\n      return [r[0], r[1]];\n    }\n  }, [0, \"\"]);\n  console.log(1 + (n - 1) - res[0]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7423398174902356, "ngram_match_score": 0.6439183010371208, "weighted_ngram_match_score": 0.6535988928453035, "syntax_match_score": 0.8267716535433071, "dataflow_match_score": 0.8450704225352113}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0013692563715494988, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.032626163152480014}}
{"filename": "p03164_1", "type": "JavaScript", "obfuscated": "var MAX_VALUE=0x3e8;var inputRaw=require('fs')['readFileSync']('/dev/stdin','utf8');var rows=inputRaw['trim']()['split']('\\x0a');var row1=rows[0x0]['split']('\\x20')['map'](Number);var N=row1[0x0];var W=row1[0x1];var list=rows['slice'](0x1)['map'](r=>r['split']('\\x20')['map'](Number));var dp=Array['from']({'length':N+0x1},_=>Array(N*MAX_VALUE+0x1)['fill'](0x0));dp[0x0]=Array(N*MAX_VALUE+0x1)['fill'](Infinity);dp[0x0][0x0]=0x0;function solve(){for(var i=0x0;i<N;i++){for(var j=0x0;j<=N*MAX_VALUE;j++){if(list[i][0x1]<=j){var a=dp[i][j-list[i][0x1]]+list[i][0x0];var b=dp[i][j];dp[i+0x1][j]=Math['min'](a,b);}else{dp[i+0x1][j]=dp[i][j];}}}var result=0x0;for(var i=0x0;i<=N*MAX_VALUE;i++)if(dp[N][i]<=W)result=i;return result;}console['log'](solve());", "test_cases": [["3 8\n3 30\n4 50\n5 60", "90"], ["1 1000000000\n1000000000 10", "10"], ["6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2", "17"]], "original": "var MAX_VALUE = 1000;\n\nvar inputRaw = require('fs').readFileSync('/dev/stdin', 'utf8')\nvar rows = inputRaw.trim().split('\\n');\nvar row1 = rows[0].split(' ').map(Number);\nvar N = row1[0];\nvar W = row1[1];\nvar list = rows.slice(1).map(r => r.split(' ').map(Number));\nvar dp = Array.from({ length: N + 1 }, _ => Array( N * MAX_VALUE + 1).fill(0));\ndp[0] = Array( N * MAX_VALUE + 1).fill(Infinity)\ndp[0][0] = 0;\n// console.log(dp);\n\nfunction solve() {\n\n  for (var i = 0; i < N; i++) {\n    for (var j = 0; j <= N * MAX_VALUE; j++) {\n      if (list[i][1] <= j) {\n        var a = dp[i][j - list[i][1]] + list[i][0];\n        var b = dp[i][j];\n        dp[i + 1][j] = Math.min(a, b);\n      } else {\n        dp[i + 1][j] = dp[i][j];\n      }\n    }\n  }\n\n  var result = 0;\n  for (var i = 0; i <= N * MAX_VALUE; i++) if (dp[N][i] <= W) result = i;\n  return result;\n}\n\nconsole.log(solve());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 436, "deobfuscated": "var MAX_VALUE = 1000;\nvar inputRaw = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar rows = inputRaw.trim().split(\"\\n\");\nvar row1 = rows[0].split(\" \").map(Number);\nvar N = row1[0];\nvar W = row1[1];\nvar list = rows.slice(1).map(r => r.split(\" \").map(Number));\nvar dp = Array.from({\n  length: N + 1\n}, _ => Array(N * MAX_VALUE + 1).fill(0));\ndp[0] = Array(N * MAX_VALUE + 1).fill(Infinity);\ndp[0][0] = 0;\nfunction solve() {\n  for (var i = 0; i < N; i++) {\n    for (var j = 0; j <= N * MAX_VALUE; j++) {\n      if (list[i][1] <= j) {\n        var a = dp[i][j - list[i][1]] + list[i][0];\n        var b = dp[i][j];\n        dp[i + 1][j] = Math.min(a, b);\n      } else {\n        dp[i + 1][j] = dp[i][j];\n      }\n    }\n  }\n  var result = 0;\n  for (var i = 0; i <= N * MAX_VALUE; i++) {\n    if (dp[N][i] <= W) {\n      result = i;\n    }\n  }\n  return result;\n}\nconsole.log(solve());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8470725653007648, "ngram_match_score": 0.7864948268939994, "weighted_ngram_match_score": 0.7933739175542095, "syntax_match_score": 0.9691358024691358, "dataflow_match_score": 0.8392857142857143}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03166_1", "type": "JavaScript", "obfuscated": "'use strict';console['log'](function(args){const tmp=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const N=tmp[0x0][0x0],M=tmp[0x0][0x1];const x=[],y=[];for(let i=0x0;i<M;i++){x['push'](tmp[0x1+i][0x0]);y['push'](tmp[0x1+i][0x1]);}const dp=Array(M+0x1)['fill'](0x0)['map'](_=>Array(N+0x1)['fill'](0x0));for(let i=0x1;i<=M;i++){for(let j=0x0;j<M;j++){dp[i][y[j]]=Math['max'](dp[i][y[j]],dp[i-0x1][x[j]]+0x1);}}return Math['max'](...dp[M])['toString']();}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4 5\n1 2\n1 3\n3 2\n2 4\n3 4", "3"], ["6 3\n2 3\n4 5\n5 6", "2"], ["5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3", "3"]], "original": "'use strict';\nconsole.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const N = tmp[0][0], M = tmp[0][1];\n  const x = [], y = [];\n  for ( let i = 0; i < M; i++ ) {\n    x.push( tmp[1+i][0] );\n    y.push( tmp[1+i][1] );\n  }\n  const dp = Array(M+1).fill(0).map(_=>Array(N+1).fill(0));\n  for ( let i = 1; i <= M; i++ ) {\n    for ( let j = 0; j < M; j++ ) {\n      dp[i][y[j]] = Math.max( dp[i][y[j]], dp[i-1][x[j]] + 1 );\n    }\n  }\n  return Math.max(...dp[M]).toString();\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 437, "deobfuscated": "'use strict';\n\nconsole.log(function (args) {\n  const tmp = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const N = tmp[0][0];\n  const M = tmp[0][1];\n  const x = [];\n  const y = [];\n  for (let i = 0; i < M; i++) {\n    x.push(tmp[1 + i][0]);\n    y.push(tmp[1 + i][1]);\n  }\n  const dp = Array(M + 1).fill(0).map(_ => Array(N + 1).fill(0));\n  for (let i = 1; i <= M; i++) {\n    for (let j = 0; j < M; j++) {\n      dp[i][y[j]] = Math.max(dp[i][y[j]], dp[i - 1][x[j]] + 1);\n    }\n  }\n  return Math.max(...dp[M]).toString();\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5964358168440167, "ngram_match_score": 0.31854472261194566, "weighted_ngram_match_score": 0.35455844513772017, "syntax_match_score": 0.9318181818181818, "dataflow_match_score": 0.7808219178082192}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005087674788551988, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.012499999999999956, "new_decrease_halstead_effort": -0.012499999999999956}}
{"filename": "p03212_1", "type": "JavaScript", "obfuscated": "function f(use,x,n,acc){if(x>n)return acc;if(use===0x7)acc+=0x1;acc+=f(use|0x1,x*0xa+0x3,n,0x0);acc+=f(use|0x2,x*0xa+0x5,n,0x0);acc+=f(use|0x4,x*0xa+0x7,n,0x0);return acc;}function Main(input){var n=parseInt(input);console['log'](f(0x0,0x0,n,0x0));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["575", "4"], ["3600", "13"], ["999999999", "26484"]], "original": "  function f(use, x, n, acc) {\n    if (x > n) return acc;\n    if (use === 0b111) acc += 1;\n    acc += f(use | 0b001, x * 10 + 3, n, 0);\n    acc += f(use | 0b010, x * 10 + 5, n, 0);\n   acc += f(use | 0b100, x * 10 + 7, n, 0);\n    return acc;\n  }\n\n  function Main(input) {\n    var n = parseInt(input);\n    console.log(f(0, 0, n, 0));\n  }\n\n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 438, "deobfuscated": "function f(use, x, n, acc) {\n  if (x > n) {\n    return acc;\n  }\n  if (use === 7) {\n    acc += 1;\n  }\n  acc += f(use | 1, x * 10 + 3, n, 0);\n  acc += f(use | 2, x * 10 + 5, n, 0);\n  acc += f(use | 4, x * 10 + 7, n, 0);\n  return acc;\n}\nfunction Main(input) {\n  var n = parseInt(input);\n  console.log(f(0, 0, n, 0));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8192482048086338, "ngram_match_score": 0.7275158963713698, "weighted_ngram_match_score": 0.7618822600431152, "syntax_match_score": 0.9152542372881356, "dataflow_match_score": 0.8723404255319149}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03215_1", "type": "JavaScript", "obfuscated": "'use strict';function _(s){let l=s['split']('\\x0a');if(l[l['length']-0x1]=='')l['pop']();this['l']=l;this['y']=0x0;}_['prototype']['ints']=function(){return this['l'][this['y']++]['split']('\\x20')['map'](v=>+v);};_['prototype']['intv']=function(){const y=this['y'];this['y']=this['l']['length'];return this['l']['slice'](y)['map'](v=>+v);};_['prototype']['strv']=function(){const y=this['y'];this['y']=this['l']['length'];return this['l']['slice'](y);};_['prototype']['strn']=function(n){const y=this['y'];this['y']+=n;return this['l']['slice'](y,y+n);};const $=new _(require('fs')['readFileSync']('/dev/stdin','utf8'));((()=>{const nk=$['ints']();const n=nk[0x0];const k=nk[0x1];const a=$['ints']();const rr=[];for(let i=0x0;i<n;i++){let s=0x0;for(let j=i;j<n;j++){s+=a[j];rr['push'](s);}}rr['sort']((a,b)=>b-a);let res=0x0;for(let d=0x29;d>=0x0;d--){let border=0x1<<d;let num=rr['filter'](e=>(e&res+border)===res+border)['length'];if(num>=k){res+=border;}}console['log'](res);})());", "test_cases": [["4 2\n2 5 2 5", "12"], ["8 4\n9 1 8 2 7 5 6 4", "32"]], "original": "'use strict'\nfunction _(s){let l=s.split('\\n');if(l[l.length-1]=='')l.pop();this.l=l;this.y=0}\n_.prototype.ints = function(){return this.l[this.y++].split(' ').map(v=>+v)}\n_.prototype.intv = function(){const y=this.y;this.y=this.l.length;return this.l.slice(y).map(v=>+v)}\n_.prototype.strv = function(){const y=this.y;this.y=this.l.length;return this.l.slice(y)}\n_.prototype.strn = function(n){const y=this.y;this.y+=n;return this.l.slice(y,y+n)}\nconst $ = new _(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n(()=>{\n\nconst nk = $.ints()\nconst n = nk[0]\nconst k = nk[1]\nconst a = $.ints()\n\nconst rr = []\nfor(let i=0;i<n;i++){\n    let s = 0;\n    for(let j=i;j<n;j++){\n        s+=a[j]\n        rr.push(s)\n    }\n}\nrr.sort((a,b)=>b-a)\nlet res = 0\nfor(let d=41; d>=0; d--){\n    let border = 1 << d\n    let num = rr.filter(e=>(e&(res+border)) === (res+border)).length\n    if(num>=k){\n        res += border\n    }\n}\nconsole.log(res)\n\n\n\n\n})()", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 439, "deobfuscated": "'use strict';\n\nfunction _(s) {\n  let l = s.split(\"\\n\");\n  if (l[l.length - 1] == \"\") {\n    l.pop();\n  }\n  this.l = l;\n  this.y = 0;\n}\n_.prototype.ints = function () {\n  return this.l[this.y++].split(\" \").map(v => +v);\n};\n_.prototype.intv = function () {\n  const y = this.y;\n  this.y = this.l.length;\n  return this.l.slice(y).map(v => +v);\n};\n_.prototype.strv = function () {\n  const y = this.y;\n  this.y = this.l.length;\n  return this.l.slice(y);\n};\n_.prototype.strn = function (n) {\n  const y = this.y;\n  this.y += n;\n  return this.l.slice(y, y + n);\n};\nconst $ = new _(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n(() => {\n  const nk = $.ints();\n  const n = nk[0];\n  const k = nk[1];\n  const a = $.ints();\n  const rr = [];\n  for (let i = 0; i < n; i++) {\n    let s = 0;\n    for (let j = i; j < n; j++) {\n      s += a[j];\n      rr.push(s);\n    }\n  }\n  rr.sort((a, b) => b - a);\n  let res = 0;\n  for (let d = 41; d >= 0; d--) {\n    let border = 1 << d;\n    let num = rr.filter(e => (e & res + border) === res + border).length;\n    if (num >= k) {\n      res += border;\n    }\n  }\n  console.log(res);\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5594452705738274, "ngram_match_score": 0.10402915563093688, "weighted_ngram_match_score": 0.23484084032295108, "syntax_match_score": 0.908256880733945, "dataflow_match_score": 0.9906542056074766}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002851890367800314, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05619902944515909}}
{"filename": "p03231_1", "type": "JavaScript", "obfuscated": "function toNum(str){return parseInt(str,0xa);}function gcd(a,b){if(a%b===0x0){return b;}else{return gcd(b,a%b);}}function lcm(a,b){return a*b/gcd(a,b);}function Main(input){var N=toNum(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);var M=toNum(input['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);var S=input['split']('\\x0a')[0x1];var T=input['split']('\\x0a')[0x2];var L=lcm(N,M);var flag=!![];var X=[];for(var i=0x0;i<L;i++){X['push']('');}X[0x0]=S[0x0];for(var i=0x1;i<S['length'];i++){X[i*(L/N)]=S[i];}if(X[0x0]!=T[0x0]){console['log']('-1');}else{for(var i=0x1;i<T['length'];i++){if(X[i*(L/M)]!=''&&X[i*(L/M)]!=T[i]){console['log']('-1');flag=![];break;}}}if(flag){console['log'](L);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\nacp\nae", "6"], ["6 3\nabcdef\nabc", "-1"], ["15 9\ndnsusrayukuaiia\ndujrunuma", "45"]], "original": "function toNum(str) {\n\treturn parseInt(str, 10);\n}\n\n// 最大公約数\nfunction gcd(a, b) {\n\tif (a % b === 0) {\n\t\treturn b;\n\t} else {\n\t\treturn gcd(b, a % b);\n\t}\n}\n\n// 最小公倍数\nfunction lcm(a, b) {\n\treturn a * b / gcd(a, b);\n}\n\n// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar N = toNum(input.split('\\n')[0].split(' ')[0]);\n\tvar M = toNum(input.split('\\n')[0].split(' ')[1]);\n\tvar S = input.split('\\n')[1];\n\tvar T = input.split('\\n')[2];\n\tvar L = lcm(N, M);\n\tvar flag = true;\n\tvar X = [];\n\tfor ( var i = 0; i < L; i++) {\n\t\tX.push('');\n\t}\n\tX[0] = S[0];\n\tfor ( var i = 1; i < S.length; i++ ) {\n\t\tX[i * (L / N)] = S[i];\n\t}\n\tif ( X[0] != T[0] ) {\n\t\tconsole.log('-1');\n\t} else {\n\t\tfor (var i = 1; i < T.length; i++) {\n\t\t\tif (X[i * (L / M)] != '' && X[i * (L / M)] != T[i]) {\n\t\t\t\tconsole.log('-1');\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif ( flag ) {\n\t\tconsole.log(L);\n\t}\n}\n\n// ※この行以降は編集しない (標準入力から一度に読み込みMainを呼び出します)\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 440, "deobfuscated": "function toNum(str) {\n  return parseInt(str, 10);\n}\nfunction gcd(a, b) {\n  if (a % b === 0) {\n    return b;\n  } else {\n    return gcd(b, a % b);\n  }\n}\nfunction lcm(a, b) {\n  return a * b / gcd(a, b);\n}\nfunction Main(input) {\n  var N = toNum(input.split(\"\\n\")[0].split(\" \")[0]);\n  var M = toNum(input.split(\"\\n\")[0].split(\" \")[1]);\n  var S = input.split(\"\\n\")[1];\n  var T = input.split(\"\\n\")[2];\n  var L = lcm(N, M);\n  var flag = true;\n  var X = [];\n  for (var i = 0; i < L; i++) {\n    X.push(\"\");\n  }\n  X[0] = S[0];\n  for (var i = 1; i < S.length; i++) {\n    X[i * (L / N)] = S[i];\n  }\n  if (X[0] != T[0]) {\n    console.log(\"-1\");\n  } else {\n    for (var i = 1; i < T.length; i++) {\n      if (X[i * (L / M)] != \"\" && X[i * (L / M)] != T[i]) {\n        console.log(\"-1\");\n        flag = false;\n        break;\n      }\n    }\n  }\n  if (flag) {\n    console.log(L);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8106938696976549, "ngram_match_score": 0.6622199816591238, "weighted_ngram_match_score": 0.6723922318253734, "syntax_match_score": 1.0, "dataflow_match_score": 0.9081632653061225}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005170907849857853, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02083333333333337, "new_decrease_halstead_effort": 0.11487512060629479}}
{"filename": "p03284_1", "type": "JavaScript", "obfuscated": "function Main(input){var N=input['split']('\\x20')[0x0];var K=input['split']('\\x20')[0x1];N=parseInt(N,0xa);K=parseInt(K,0xa);var jud=N%K===0x0;if(jud){console['log'](0x0);}else{console['log'](0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 3", "1"], ["100 10", "0"], ["1 1", "0"]], "original": "function Main(input){\n  var N = input.split(\" \")[0];\n  var K = input.split(\" \")[1];\n  N = parseInt(N,10);\n  K = parseInt(K,10);\n\n  var jud = N%K === 0;\n  if(jud){\n    console.log(0);\n  }else{\n    console.log(1);\n  }\n}\n  Main(require('fs').readFileSync('/dev/stdin','utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 441, "deobfuscated": "function Main(input) {\n  var N = input.split(\" \")[0];\n  var K = input.split(\" \")[1];\n  N = parseInt(N, 10);\n  K = parseInt(K, 10);\n  var jud = N % K === 0;\n  if (jud) {\n    console.log(0);\n  } else {\n    console.log(1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7175497364162023, "ngram_match_score": 0.36694245877964105, "weighted_ngram_match_score": 0.5032564868851683, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03329_1", "type": "JavaScript", "obfuscated": "function equal(a,b){var aP=Object['getOwnPropertyNames'](a);var bP=Object['getOwnPropertyNames'](b);if(aP['length']!=bP['length'])return![];for(var i=0x0;i<aP['length'];i++)if(a[aP[i]]!==b[aP[i]])return![];return!![];}function pi(text){return parseInt(text,0xa);}var six=[0x6,0x5,0x4,0x3,0x2,0x1]['map'](_=>Math['pow'](0x6,_));var nine=[0x5,0x4,0x3,0x2,0x1]['map'](_=>Math['pow'](0x9,_));function count(i){if(i<0x6)return i;if(i<0x9)return 0x1+(i-0x6);return Math['min'](count(i-six['find'](_=>_<=i))+0x1,count(i-nine['find'](_=>_<=i))+0x1);}function main(input){var i=pi(input);console['log'](count(i));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["127", "4"], ["3", "3"], ["44852", "16"]], "original": "function equal(a, b) {\n    var aP = Object.getOwnPropertyNames(a);\n    var bP = Object.getOwnPropertyNames(b);\n    if (aP.length != bP.length)\n        return false;\n    for (var i = 0; i < aP.length; i++)\n        if (a[aP[i]] !== b[aP[i]])\n            return false;\n    return true;\n}\nfunction pi(text) {\n    return parseInt(text, 10);\n}\nvar six = [6, 5, 4, 3, 2, 1].map(_ => Math.pow(6, _));\nvar nine = [5, 4, 3, 2, 1].map(_ => Math.pow(9, _));\nfunction count(i) {\n    if (i < 6)\n        return i;\n    if (i < 9)\n        return 1 + (i - 6);\n    return Math.min(count(i - six.find(_ => _ <= i)) + 1, count(i - nine.find(_ => _ <= i)) + 1);\n}\nfunction main(input) {\n    var i = pi(input);\n    console.log(count(i));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 442, "deobfuscated": "function equal(a, b) {\n  var aP = Object.getOwnPropertyNames(a);\n  var bP = Object.getOwnPropertyNames(b);\n  if (aP.length != bP.length) {\n    return false;\n  }\n  for (var i = 0; i < aP.length; i++) {\n    if (a[aP[i]] !== b[aP[i]]) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction pi(text) {\n  return parseInt(text, 10);\n}\nvar six = [6, 5, 4, 3, 2, 1].map(_ => Math.pow(6, _));\nvar nine = [5, 4, 3, 2, 1].map(_ => Math.pow(9, _));\nfunction count(i) {\n  if (i < 6) {\n    return i;\n  }\n  if (i < 9) {\n    return 1 + (i - 6);\n  }\n  return Math.min(count(i - six.find(_ => _ <= i)) + 1, count(i - nine.find(_ => _ <= i)) + 1);\n}\nfunction main(input) {\n  var i = pi(input);\n  console.log(count(i));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9038721836832562, "ngram_match_score": 0.8132132288587179, "weighted_ngram_match_score": 0.8842427189890608, "syntax_match_score": 0.9180327868852459, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008383355940977832, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04117647058823526, "new_decrease_halstead_effort": 0.14211965420562023}}
{"filename": "p03449_1", "type": "JavaScript", "obfuscated": "function Main(input){const setting=input['trim']()['split']('\\x0a');const process_sum=setting[0x0]-0x0;const up=setting[0x1]['split']('\\x20');const down=setting[0x2]['split']('\\x20');let answer=0x0;for(let process_up=0x0;process_up<process_sum;process_up++){let process_down=process_sum-process_up-0x1;let candies=0x0;for(let i=0x0;i<=process_up;i++){candies+=parseInt(up[i]);}for(let i=0x0;i<=process_down;i++){candies+=parseInt(down[process_up+i]);}if(answer<candies){answer=candies;}}console['log'](answer);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n3 2 2 4 1\n1 2 2 2 1", "14"], ["4\n1 1 1 1\n1 1 1 1", "5"], ["7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2", "29"], ["1\n2\n3", "5"]], "original": "function Main(input) {\n\tconst setting = input.trim().split('\\n')\n  const process_sum = setting[0] - 0\n  const up = setting[1].split(' ')\n  const down = setting[2].split(' ')\n\n  let answer = 0\n\n  for (let process_up = 0; process_up < process_sum; process_up++) {\n    let process_down = process_sum - process_up - 1\n    let candies = 0\n    for (let i = 0; i <= process_up; i++) {\n      candies += parseInt(up[i])\n    }\n\n    for (let i = 0; i <= process_down; i++) {\n      candies += parseInt(down[process_up + i])\n    }\n    if (answer < candies) {\n      answer = candies\n    }\n  }\n\n  console.log(answer)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 443, "deobfuscated": "function Main(input) {\n  const setting = input.trim().split(\"\\n\");\n  const process_sum = setting[0] - 0;\n  const up = setting[1].split(\" \");\n  const down = setting[2].split(\" \");\n  let answer = 0;\n  for (let process_up = 0; process_up < process_sum; process_up++) {\n    let process_down = process_sum - process_up - 1;\n    let candies = 0;\n    for (let i = 0; i <= process_up; i++) {\n      candies += parseInt(up[i]);\n    }\n    for (let i = 0; i <= process_down; i++) {\n      candies += parseInt(down[process_up + i]);\n    }\n    if (answer < candies) {\n      answer = candies;\n    }\n  }\n  console.log(answer);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.834783471711662, "ngram_match_score": 0.6650605554310539, "weighted_ngram_match_score": 0.6740733314155943, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03631_1", "type": "JavaScript", "obfuscated": "function Main(input){var tmp=String(input);var truecount=0x0;if(tmp[0x2]==tmp[0x0]){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["575", "Yes"], ["123", "No"], ["812", "No"]], "original": "function Main(input) {\n        var tmp = String(input);\n        var truecount = 0;\n        if(tmp[2] == tmp[0]) {\n           console.log(\"Yes\");\n        } else {\n           console.log(\"No\");\n        }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 444, "deobfuscated": "function Main(input) {\n  var tmp = String(input);\n  var truecount = 0;\n  if (tmp[2] == tmp[0]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9337181591045696, "ngram_match_score": 0.8466657105524215, "weighted_ngram_match_score": 0.888206925865857, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03633_1", "type": "JavaScript", "obfuscated": "log=console['log'];var stdin=require('fs')['readFileSync']('/dev/stdin','UTF-8');var lines=stdin['split']('\\x0a');var N=lines[0x0]['split']('\\x20')['map'](Number)[0x0];var T=lines['slice'](0x1)['filter'](v=>v!=='')['map'](Number);function gcd(a,b){if(b===0x0)return a;return gcd(b,a%b);}function lcm(a,b){return a*b/gcd(a,b);}for(var i=0x1;i<N;i++){T[i]=lcm(T[i],T[i-0x1]);}log(T[N-0x1]);", "test_cases": [["2\n2\n3", "6"], ["5\n2\n5\n10\n1000000000000000000\n1000000000000000000", "1000000000000000000"]], "original": "log = console.log;\n\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin.split(\"\\n\");\nvar N = lines[0].split(\" \").map(Number)[0];\nvar T = lines\n  .slice(1)\n  .filter(v => v !== \"\")\n  .map(Number);\n\nfunction gcd(a,b){\n  if(b === 0) return a\n  return gcd(b,a % b)\n}\n\nfunction lcm(a,b){\n  return a * b / gcd(a,b)\n}\n\nfor(var i=1; i<N;i++){\n  T[i] = lcm(T[i],T[i-1])\n}\n\nlog(T[N-1])", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 445, "deobfuscated": "log = console.log;\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin.split(\"\\n\");\nvar N = lines[0].split(\" \").map(Number)[0];\nvar T = lines.slice(1).filter(v => v !== \"\").map(Number);\nfunction gcd(a, b) {\n  if (b === 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\nfunction lcm(a, b) {\n  return a * b / gcd(a, b);\n}\nfor (var i = 1; i < N; i++) {\n  T[i] = lcm(T[i], T[i - 1]);\n}\nlog(T[N - 1]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7013917122916941, "ngram_match_score": 0.3602954817754226, "weighted_ngram_match_score": 0.4928904150104013, "syntax_match_score": 0.9523809523809523, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.03308473980504245}}
{"filename": "p04011_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');function Main(input){var arg=input['split']('\\x0a');var line0=arg[0x0]['split']('\\x20');var line1=arg[0x1]['split']('\\x20');var line2=arg[0x2]['split']('\\x20');var line3=arg[0x3]['split']('\\x20');var input1=Number(line0[0x0]);var input2=Number(line1[0x0]);var input3=Number(line2[0x0]);var input4=Number(line3[0x0]);var ans='initial_answer';if(input1<input2)console['log'](input3*input1);else console['log'](input3*input2+(input1-input2)*input4);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n3\n10000\n9000", "48000"], ["2\n3\n10000\n9000", "20000"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var arg   = input.split(\"\\n\");\n  var line0 = arg[0].split(\" \");\n  var line1 = arg[1].split(\" \");\n  var line2 = arg[2].split(\" \");\n  var line3 = arg[3].split(\" \");\n\n  var input1 = Number(line0[0]);\n  var input2 = Number(line1[0]);\n  var input3 = Number(line2[0]);\n  var input4 = Number(line3[0]);\n//  var a = input2;\n  //var b = input3;\n\n  var ans = \"initial_answer\";\n  //console.log( \"[INPUT] \"+ input1 +\" \"+ input2 +\" \"+ input3 + \" \" + input4 );\n  \n  // LOGIC //\n\n  if(input1 < input2) console.log( input3 * input1);\n  else console.log( input3 * input2 + ((input1 - input2) * input4) );\n\n\n  \n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 446, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nfunction Main(input) {\n  var arg = input.split(\"\\n\");\n  var line0 = arg[0].split(\" \");\n  var line1 = arg[1].split(\" \");\n  var line2 = arg[2].split(\" \");\n  var line3 = arg[3].split(\" \");\n  var input1 = Number(line0[0]);\n  var input2 = Number(line1[0]);\n  var input3 = Number(line2[0]);\n  var input4 = Number(line3[0]);\n  var ans = \"initial_answer\";\n  if (input1 < input2) {\n    console.log(input3 * input1);\n  } else {\n    console.log(input3 * input2 + (input1 - input2) * input4);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7007199402549142, "ngram_match_score": 0.4243514010063409, "weighted_ngram_match_score": 0.47656757569959074, "syntax_match_score": 0.9019607843137255, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00003_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var aaa=chunk['toString']();var line=aaa['split']('\\x0a');line['shift']();for(var i in line){var l=line[i]['split']('\\x20');for(var i in l){l[i]=new Number(l[i]);}l['sort'](function(a,b){if(a>b)return-0x1;if(a<b)return 0x1;return 0x0;});var num1=new Number(l[0x0])*new Number(l[0x0]);var num2=new Number(l[0x1])*new Number(l[0x1]);var num3=new Number(l[0x2])*new Number(l[0x2]);var num4=num2+num3;if(num1===num4){console['log']('YES');}else{console['log']('NO');}}});", "test_cases": [["3\n4 3 5\n4 3 6\n8 8 8", "YES\nNO\nNO"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('data', function (chunk) {\n    var aaa = chunk.toString();\n    var line = aaa.split(\"\\n\")\n    //line.pop();\n    line.shift();\n    for(var i in line){\n        var l = line[i].split(\" \")\n        for(var i in l){\n            l[i] = new Number(l[i]);\n        }\n        l.sort(function(a,b){\n            if( a > b ) return -1;\n            if( a < b ) return 1;\n            return 0;\n        });\n        var num1 = new Number(l[0]) *new Number(l[0]);\n        var num2 = new Number(l[1])*new Number(l[1]);\n        var num3 = new Number(l[2])*new Number(l[2]);\n        var num4 = num2+num3;\n        if(num1 === num4){\n            console.log(\"YES\");\n        }else{\n            console.log(\"NO\")\n            \n        }\n    }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 447, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var aaa = chunk.toString();\n  var line = aaa.split(\"\\n\");\n  line.shift();\n  for (var i in line) {\n    var l = line[i].split(\" \");\n    for (var i in l) {\n      l[i] = new Number(l[i]);\n    }\n    l.sort(function (a, b) {\n      if (a > b) {\n        return -1;\n      }\n      if (a < b) {\n        return 1;\n      }\n      return 0;\n    });\n    var num1 = new Number(l[0]) * new Number(l[0]);\n    var num2 = new Number(l[1]) * new Number(l[1]);\n    var num3 = new Number(l[2]) * new Number(l[2]);\n    var num4 = num2 + num3;\n    if (num1 === num4) {\n      console.log(\"YES\");\n    } else {\n      console.log(\"NO\");\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6579333503375416, "ngram_match_score": 0.33264370592429987, "weighted_ngram_match_score": 0.428400040253453, "syntax_match_score": 0.8706896551724138, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02258_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split']('\\x0a');var values=input['map'](function(v){return parseInt(v);});var min=Number['MAX_VALUE'],val=-Number['MAX_VALUE'];var N=values[0x0];for(var i=0x1;i<=N-0x1;i++){if(min>=values[i]){min=values[i];}if(values[i+0x1]-min>=val){val=values[i+0x1]-min;}}console['log'](val);return val;}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n5\n3\n1\n3\n4\n3", "3"], ["3\n4\n3\n2", "-1"]], "original": "function main(input) {\n  input = input.split(\"\\n\");\n  var values = input.map(function(v) { return parseInt(v); });\n\n  var min = Number.MAX_VALUE, val = -Number.MAX_VALUE;\n  var N = values[0];\n  for (var i = 1; i <= N-1; i++) {\n    if (min >= values[i]) {\n      min = values[i];\n    }\n    if (values[i+1] - min >= val) {\n      val = values[i+1] - min;\n    }\n  }\n  console.log(val);\n  return val;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 448, "deobfuscated": "function main(input) {\n  input = input.split(\"\\n\");\n  var values = input.map(function (v) {\n    return parseInt(v);\n  });\n  var min = Number.MAX_VALUE;\n  var val = -Number.MAX_VALUE;\n  var N = values[0];\n  for (var i = 1; i <= N - 1; i++) {\n    if (min >= values[i]) {\n      min = values[i];\n    }\n    if (values[i + 1] - min >= val) {\n      val = values[i + 1] - min;\n    }\n  }\n  console.log(val);\n  return val;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8619088026543612, "ngram_match_score": 0.7028585059396508, "weighted_ngram_match_score": 0.7988307587318481, "syntax_match_score": 0.9459459459459459, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00036420268736658823, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.00990099009900991, "new_decrease_halstead_effort": -0.009900990099010132}}
{"filename": "p02415_1", "type": "JavaScript", "obfuscated": "(function(input){console['log'](input['replace'](/\\n$/,'')['split']('')['map'](function(e){if(e['match'](/[a-z]/)){return e['toUpperCase']();}else if(e['match'](/[A-Z]/)){return e['toLowerCase']();}return e;})['join'](''));}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["fAIR, LATER, OCCASIONALLY CLOUDY.", "Fair, later, occasionally cloudy."]], "original": "(function(input) {\n    console.log(input.replace(/\\n$/, '').split('').map(function(e) {\n        if (e.match(/[a-z]/)) {\n            return e.toUpperCase();\n        } else if (e.match(/[A-Z]/)) {\n            return e.toLowerCase();\n        }\n        return e;\n    }).join(''));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 449, "deobfuscated": "(function (input) {\n  console.log(input.replace(/\\n$/, \"\").split(\"\").map(function (e) {\n    if (e.match(/[a-z]/)) {\n      return e.toUpperCase();\n    } else if (e.match(/[A-Z]/)) {\n      return e.toLowerCase();\n    }\n    return e;\n  }).join(\"\"));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8432701152966378, "ngram_match_score": 0.6446003353713389, "weighted_ngram_match_score": 0.728480125815212, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02725_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const args=input['split']('\\x0a')[0x0];const a=input['split']('\\x0a')[0x1];let as=a['split']('\\x20');const K=Number(args['split']('\\x20')[0x0]);const N=Number(args['split']('\\x20')[0x1]);let ans=0x0;const kh=Math['floor'](K/0x2);for(let i=0x0;i<N;i++){ans+=Math['abs'](0x0-as[i])>Math['abs'](kh-as[i])?Math['abs'](kh-as[i]):Math['abs'](0x0-as[i]);}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["20 3\n5 10 15", "10"], ["20 3\n0 5 15", "10"]], "original": "\"use strict\"\n// input\nfunction main(input) {\n    const args = input.split('\\n')[0];\n    const a = input.split('\\n')[1];\n    let as = a.split(' ');\n    \n    const K = Number(args.split(' ')[0]);\n    const N = Number(args.split(' ')[1]);\n    let ans = 0;\n    const kh = Math.floor(K / 2);\n    for (let i = 0; i < N; i++) {\n        ans += Math.abs(0 - as[i]) > Math.abs(kh - as[i]) ? Math.abs(kh - as[i]) : Math.abs(0 - as[i]);\n    }\n    console.log(ans);\n}\n\n// output\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 450, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const args = input.split(\"\\n\")[0];\n  const a = input.split(\"\\n\")[1];\n  let as = a.split(\" \");\n  const K = Number(args.split(\" \")[0]);\n  const N = Number(args.split(\" \")[1]);\n  let ans = 0;\n  const kh = Math.floor(K / 2);\n  for (let i = 0; i < N; i++) {\n    ans += Math.abs(0 - as[i]) > Math.abs(kh - as[i]) ? Math.abs(kh - as[i]) : Math.abs(0 - as[i]);\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7986805225291657, "ngram_match_score": 0.6692875570669877, "weighted_ngram_match_score": 0.6841646917798337, "syntax_match_score": 1.0, "dataflow_match_score": 0.8412698412698413}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02820_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var tmp0=input[0x0]['split']('\\x20');var N=tmp0[0x0]-0x0;var K=tmp0[0x1]-0x0;var tmp1=input[0x1]['split']('\\x20');var point={'r':tmp1[0x2]-0x0,'s':tmp1[0x0]-0x0,'p':tmp1[0x1]-0x0};var str=input[0x2];var sum=0x0;for(var i=0x0;i<N;i++){var char=str[i];var charBK='';if(i-K>=0x0){charBK=str[i-K];}if(char==charBK){str=str['slice'](0x0,i)+'B'+str['slice'](i+0x1);continue;}sum+=point[char];}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2\n8 7 6\nrsrpr", "27"], ["7 1\n100 10 1\nssssppr", "211"], ["30 5\n325 234 123\nrspsspspsrpspsppprpsprpssprpsr", "4996"]], "original": "function Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  \n  //入力データ取得\n  var tmp0 = input[0].split(\" \");\n  var N = tmp0[0] - 0;\n  var K = tmp0[1] - 0;\n  var tmp1 = input[1].split(\" \");\n  \n  var point = {r:tmp1[2]-0,s:tmp1[0]-0,p:tmp1[1]-0};\n  var str = input[2];\n  var sum = 0;\n  \n  for(var i=0; i<N; i++){\n    var char = str[i];\n    var charBK = \"\";\n    if(i-K >= 0){\n      charBK = str[i-K];\n    }\n    if(char == charBK){\n      str = str.slice(0,i) + 'B' + str.slice(i+1);\n      continue;\n    }\n    sum += point[char];\n  }\n  //出力\n  console.log(sum);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 451, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var tmp0 = input[0].split(\" \");\n  var N = tmp0[0] - 0;\n  var K = tmp0[1] - 0;\n  var tmp1 = input[1].split(\" \");\n  var point = {\n    r: tmp1[2] - 0,\n    s: tmp1[0] - 0,\n    p: tmp1[1] - 0\n  };\n  var str = input[2];\n  var sum = 0;\n  for (var i = 0; i < N; i++) {\n    var char = str[i];\n    var charBK = \"\";\n    if (i - K >= 0) {\n      charBK = str[i - K];\n    }\n    if (char == charBK) {\n      str = str.slice(0, i) + \"B\" + str.slice(i + 1);\n      continue;\n    }\n    sum += point[char];\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7509637527621511, "ngram_match_score": 0.4361205278791999, "weighted_ngram_match_score": 0.5677344831694046, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02835_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');tmp=parseInt(input[0x0])+parseInt(input[0x1])+parseInt(input[0x2]);if(tmp>0x15){console['log']('bust');}else{console['log']('win');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 7 9", "win"], ["13 7 2", "bust"]], "original": "function Main(input){\n    input = input.split(\" \");\n    tmp = parseInt(input[0]) + parseInt(input[1]) + parseInt(input[2]);\n    if(tmp > 21){\n     console.log(\"bust\");   \n    }else{\n     console.log(\"win\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 452, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  tmp = parseInt(input[0]) + parseInt(input[1]) + parseInt(input[2]);\n  if (tmp > 21) {\n    console.log(\"bust\");\n  } else {\n    console.log(\"win\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7830449713596528, "ngram_match_score": 0.5048436902501794, "weighted_ngram_match_score": 0.6273361951884318, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02837_1", "type": "JavaScript", "obfuscated": "'use strict';console['log'](function(args){const _tmp=args['trim']()['split']('\\x0a');const N=_tmp['shift']()|0x0;const A=[],x=[],y=[];for(let i=0x0;i<N;i++){A[i]=_tmp['shift']()|0x0;x[i]=[];y[i]=[];for(let j=0x0;j<A[i];j++){const xy=_tmp[j]['split']('\\x20');x[i][j]=xy[0x0]-0x1;y[i][j]=xy[0x1]|0x0;}_tmp['splice'](0x0,A[i]);}let K=0x0;TEST:for(let honest=0x1;honest<0x1<<N;honest++){let k=0x0;for(let i=0x0;i<N;i++){if(!(honest&0x1<<i))continue;k++;for(let j=0x0;j<A[i];j++){const Xij=x[i][j],Yij=y[i][j];const target=honest&0x1<<Xij;if(target!==Yij<<Xij)continue TEST;}}if(k>K)K=k;}return K;}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n1\n2 1\n1\n1 1\n1\n2 0", "2"], ["3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0", "0"], ["2\n1\n2 0\n1\n1 0", "1"]], "original": "'use strict';\nconsole.log(function(args){\n  const _tmp = args.trim().split('\\n');\n  const N = _tmp.shift()|0;\n  const A = [], x = [], y = [];\n  for ( let i = 0; i < N; i++ ) {\n    A[i] = _tmp.shift()|0;\n    x[i] = []; y[i] = [];\n    for ( let j = 0; j < A[i]; j++ ) {\n      const xy = _tmp[j].split(' ');\n      x[i][j] = xy[0]-1; y[i][j] = xy[1]|0;\n    }\n    _tmp.splice(0,A[i]);\n  }\n  let K = 0;\n  TEST: for ( let honest = 1; honest < 1<<N; honest++ ) {\n    let k = 0;\n    for ( let i = 0; i < N; i++ ) {\n        if ( !(honest&1<<i) ) continue;\n      k++;\n      for ( let j = 0; j < A[i]; j++ ) {\n        const Xij = x[i][j], Yij = y[i][j];\n        const target = honest&(1<<Xij);\n        if ( target!==(Yij<<Xij) ) continue TEST;\n      }\n    }\n    if ( k > K ) K = k;\n  }\n  return K;\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 453, "deobfuscated": "'use strict';\n\nconsole.log(function (args) {\n  const _tmp = args.trim().split(\"\\n\");\n  const N = _tmp.shift() | 0;\n  const A = [];\n  const x = [];\n  const y = [];\n  for (let i = 0; i < N; i++) {\n    A[i] = _tmp.shift() | 0;\n    x[i] = [];\n    y[i] = [];\n    for (let j = 0; j < A[i]; j++) {\n      const xy = _tmp[j].split(\" \");\n      x[i][j] = xy[0] - 1;\n      y[i][j] = xy[1] | 0;\n    }\n    _tmp.splice(0, A[i]);\n  }\n  let K = 0;\n  TEST: for (let honest = 1; honest < 1 << N; honest++) {\n    let k = 0;\n    for (let i = 0; i < N; i++) {\n      if (!(honest & 1 << i)) {\n        continue;\n      }\n      k++;\n      for (let j = 0; j < A[i]; j++) {\n        const Xij = x[i][j];\n        const Yij = y[i][j];\n        const target = honest & 1 << Xij;\n        if (target !== Yij << Xij) {\n          continue TEST;\n        }\n      }\n    }\n    if (k > K) {\n      K = k;\n    }\n  }\n  return K;\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6552849302452601, "ngram_match_score": 0.3659798919954107, "weighted_ngram_match_score": 0.4143954977754388, "syntax_match_score": 0.8407643312101911, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005964954828043822, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.014285714285714235, "new_decrease_halstead_effort": -0.014285714285714235}}
{"filename": "p03129_1", "type": "JavaScript", "obfuscated": "function main(arg){arg=arg['split']('\\x0a')[0x0]['split']('\\x20');var N=Number(arg[0x0]);var K=Number(arg[0x1]);var count=0x0;for(var i=0x1;i<=N;i+=0x2){count++;}if(K>count){console['log']('NO');}else{console['log']('YES');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2", "YES"], ["5 5", "NO"], ["31 10", "YES"], ["10 90", "NO"]], "original": "function main(arg) {\n\targ = arg.split(\"\\n\")[0].split(\" \")\n\tvar N = Number(arg[0])\n\tvar K = Number(arg[1])\n\tvar count = 0\n\tfor (var i = 1; i <= N; i+=2 ) {\n\t\tcount++\n\t}\n\tif (K > count) {\n\t\tconsole.log(\"NO\")\n\t} else {\n\t\tconsole.log(\"YES\")\n\t}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 454, "deobfuscated": "function main(arg) {\n  arg = arg.split(\"\\n\")[0].split(\" \");\n  var N = Number(arg[0]);\n  var K = Number(arg[1]);\n  var count = 0;\n  for (var i = 1; i <= N; i += 2) {\n    count++;\n  }\n  if (K > count) {\n    console.log(\"NO\");\n  } else {\n    console.log(\"YES\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.732317764120871, "ngram_match_score": 0.4529459968212506, "weighted_ngram_match_score": 0.4763250596622336, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03260_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['split'](/\\s/);const A=Number(input[0x0]);const B=Number(input[0x1]);var result=A===0x2||B===0x2?'No':'Yes';console['log'](result);", "test_cases": [["3 1", "Yes"], ["1 2", "No"], ["2 2", "No"]], "original": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.split(/\\s/);\n\nconst A = Number(input[0]);\nconst B = Number(input[1]);\n\nvar result = (A === 2 || B === 2) ? \"No\" : \"Yes\";\n\nconsole.log(result);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 455, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.split(/\\s/);\nconst A = Number(input[0]);\nconst B = Number(input[1]);\nvar result = A === 2 || B === 2 ? \"No\" : \"Yes\";\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8815637700549166, "ngram_match_score": 0.8232325806433648, "weighted_ngram_match_score": 0.8280224995763015, "syntax_match_score": 0.875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03283_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let lines=input['split']('\\x0a');let nmq=lines['shift']()['split'](/\\s/)['map'](v=>v-0x0);let N=nmq[0x0],M=nmq[0x1],Q=nmq[0x2];let T=new Array(N+0x1)['fill'](0x0)['map'](()=>new Array(N+0x1)['fill'](0x0));for(let m=0x0;m<M;m++){let lr=lines['shift']()['split'](/\\s/)['map'](v=>v-0x0);T[lr[0x0]][lr[0x1]]+=0x1;}for(let p=0x1;p<=N;p++){for(let q=0x1;q<=N;q++){T[p][q]+=T[p-0x1][q];T[p][q]+=T[p][q-0x1];T[p][q]-=T[p-0x1][q-0x1];}}for(let n=0x0;n<Q;n++){let pq=lines['shift']()['split'](/\\s/)['map'](v=>v-0x0);let p=pq[0x0],q=pq[0x1];console['log'](T[q][q]-T[p-0x1][q]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 1\n1 1\n1 2\n2 2\n1 2", "3"], ["10 3 2\n1 5\n2 8\n7 10\n1 7\n3 10", "1\n1"], ["10 10 10\n1 6\n2 9\n4 5\n4 7\n4 7\n5 8\n6 6\n6 7\n7 9\n10 10\n1 8\n1 9\n1 10\n2 8\n2 9\n2 10\n3 8\n3 9\n3 10\n1 10", "7\n9\n10\n6\n8\n9\n6\n7\n8\n10"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let nmq = lines.shift().split(/\\s/).map((v) => v - 0);\n    let N = nmq[0], M = nmq[1], Q = nmq[2];\n    let T = new Array(N+1).fill(0).map(() => new Array(N+1).fill(0));\n    for (let m = 0; m < M; m++) {\n        let lr = lines.shift().split(/\\s/).map((v) => v - 0);\n        T[lr[0]][lr[1]] += 1;\n    }\n    for (let p = 1; p <= N; p++) {\n        for (let q = 1; q <= N; q++) {\n            T[p][q] += T[p - 1][q];\n            T[p][q] += T[p][q - 1];\n            T[p][q] -= T[p - 1][q - 1];\n        }\n    }\n    for (let n = 0; n < Q; n++) {\n        let pq = lines.shift().split(/\\s/).map((v) => v - 0);\n        let p = pq[0], q = pq[1];\n        console.log(T[q][q] - T[p - 1][q]);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 456, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let nmq = lines.shift().split(/\\s/).map(v => v - 0);\n  let N = nmq[0];\n  let M = nmq[1];\n  let Q = nmq[2];\n  let T = new Array(N + 1).fill(0).map(() => new Array(N + 1).fill(0));\n  for (let m = 0; m < M; m++) {\n    let lr = lines.shift().split(/\\s/).map(v => v - 0);\n    T[lr[0]][lr[1]] += 1;\n  }\n  for (let p = 1; p <= N; p++) {\n    for (let q = 1; q <= N; q++) {\n      T[p][q] += T[p - 1][q];\n      T[p][q] += T[p][q - 1];\n      T[p][q] -= T[p - 1][q - 1];\n    }\n  }\n  for (let n = 0; n < Q; n++) {\n    let pq = lines.shift().split(/\\s/).map(v => v - 0);\n    let p = pq[0];\n    let q = pq[1];\n    console.log(T[q][q] - T[p - 1][q]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8689648520942114, "ngram_match_score": 0.7866517078600067, "weighted_ngram_match_score": 0.8346622459713843, "syntax_match_score": 0.8545454545454545, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005930507730348422, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.013953488372093092, "new_decrease_halstead_effort": -0.013953488372093092}}
{"filename": "p03326_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=s[0x0]['split']('\\x20')['map'](a=>+a);var m=n[0x1];n=n[0x0];var x;var a=Array(0x4)['fill'](0x0)['map'](a=>Array(n));for(var i=0x0;i<n;i++){x=s[i+0x1]['split']('\\x20')['map'](a=>+a);a[0x0][i]=x[0x0]+x[0x1]+x[0x2];a[0x1][i]=x[0x0]+x[0x1]-x[0x2];a[0x2][i]=x[0x0]-x[0x1]+x[0x2];a[0x3][i]=-x[0x0]+x[0x1]+x[0x2];}var ans=0x0;for(i=0x0;i<0x4;i++){a[i]['sort']((a,b)=>a-b);var t=0x0;for(var j=0x0;j<m;j++){t+=a[i][j];}ans=Math['max'](ans,Math['abs'](t));t=0x0;for(j=n;j>n-m;){t+=a[i][--j];}ans=Math['max'](ans,Math['abs'](t));}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9", "56"], ["5 3\n1 -2 3\n-4 5 -6\n7 -8 -9\n-10 11 -12\n13 -14 15", "54"], ["10 5\n10 -80 21\n23 8 38\n-94 28 11\n-26 -2 18\n-69 72 79\n-26 -86 -54\n-72 -50 59\n21 65 -32\n40 -94 87\n-62 18 82", "638"], ["3 2\n2000000000 -9000000000 4000000000\n7000000000 -5000000000 3000000000\n6000000000 -1000000000 8000000000", "30000000000"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1];\n  n = n[0];\n  var x;\n  var a = Array(4).fill(0).map(a=>Array(n));\n  for(var i = 0; i < n; i++){\n    x = s[i+1].split(\" \").map(a=>+a);\n    a[0][i] = x[0] + x[1] + x[2];\n    a[1][i] = x[0] + x[1] - x[2];\n    a[2][i] = x[0] - x[1] + x[2];\n    a[3][i] = -x[0] + x[1] + x[2];\n  }\n  var ans = 0;\n  for(i = 0; i < 4; i++){\n    a[i].sort((a,b)=>a-b);\n    var t = 0;\n    for(var j = 0; j < m; j++){\n      t += a[i][j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n    t = 0;\n    for(j = n; j > n - m;){\n      t += a[i][--j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n  }\n  \n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 457, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a => +a);\n  var m = n[1];\n  n = n[0];\n  var x;\n  var a = Array(4).fill(0).map(a => Array(n));\n  for (var i = 0; i < n; i++) {\n    x = s[i + 1].split(\" \").map(a => +a);\n    a[0][i] = x[0] + x[1] + x[2];\n    a[1][i] = x[0] + x[1] - x[2];\n    a[2][i] = x[0] - x[1] + x[2];\n    a[3][i] = -x[0] + x[1] + x[2];\n  }\n  var ans = 0;\n  for (i = 0; i < 4; i++) {\n    a[i].sort((a, b) => a - b);\n    var t = 0;\n    for (var j = 0; j < m; j++) {\n      t += a[i][j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n    t = 0;\n    for (j = n; j > n - m;) {\n      t += a[i][--j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.837760257171619, "ngram_match_score": 0.6130255283600132, "weighted_ngram_match_score": 0.7380155003264628, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03433_1", "type": "JavaScript", "obfuscated": "function main(input){var line=input['split']('\\x0a')['map'](n=>parseInt(n,0xa));while(line[0x0]>0x1f4){line[0x0]-=0x1f4;}line[0x0]<=line[0x1]?console['log']('Yes'):console['log']('No');}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2018\n218", "Yes"], ["2763\n0", "No"], ["37\n514", "Yes"]], "original": "function main (input) {\n  var line = input.split('\\n').map(n => parseInt(n, 10));  \n\n  while(line[0] > 500) {\n    line[0] -= 500;\n  }\n\n  line[0]<=line[1] ? console.log('Yes') : console.log('No');\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 458, "deobfuscated": "function main(input) {\n  var line = input.split(\"\\n\").map(n => parseInt(n, 10));\n  while (line[0] > 500) {\n    line[0] -= 500;\n  }\n  if (line[0] <= line[1]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6172053998959592, "ngram_match_score": 0.2909755167251368, "weighted_ngram_match_score": 0.37292184043445764, "syntax_match_score": 0.8958333333333334, "dataflow_match_score": 0.9090909090909091}, "code_complexity": {"difference_score": 0.5, "length_score": -0.5, "increase_maintainability": -0.0775307362963884, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.018867924528301883, "new_decrease_halstead_effort": -0.13255734256533058}}
{"filename": "p03609_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['trim']();const a=input['split']('\\x20')['map'](Number);if(a[0x0]<=a[0x1]){console['log']('0');}else{console['log'](a[0x0]-a[0x1]);}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["100 17", "83"], ["48 58", "0"], ["1000000000 1000000000", "0"]], "original": "function main(input) {\n  input = input.trim();\n  const a = input.split(\" \").map(Number);\n  if(a[0]<=a[1]){\n    console.log(\"0\");\n  }else{\n    console.log(a[0]-a[1]);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 459, "deobfuscated": "function main(input) {\n  input = input.trim();\n  const a = input.split(\" \").map(Number);\n  if (a[0] <= a[1]) {\n    console.log(\"0\");\n  } else {\n    console.log(a[0] - a[1]);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7913699546824524, "ngram_match_score": 0.47022156411316, "weighted_ngram_match_score": 0.6952582546166497, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03694_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const houses=s['split']('\\x0a')[0x1]['split']('\\x20')['map'](n=>Number(n));const min=Math['min'](...houses);const max=Math['max'](...houses);const answer=max-min;console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n2 3 7 9", "7"], ["8\n3 1 4 1 5 9 2 6", "8"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const houses = s.split('\\n')[1].split(' ').map(n => Number(n));\n  const min = Math.min(...houses);\n  const max = Math.max(...houses);\n\n  const answer = max - min;\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 460, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const houses = s.split(\"\\n\")[1].split(\" \").map(n => Number(n));\n  const min = Math.min(...houses);\n  const max = Math.max(...houses);\n  const answer = max - min;\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8790820627814103, "ngram_match_score": 0.8114217758899006, "weighted_ngram_match_score": 0.8202910906203559, "syntax_match_score": 1.0, "dataflow_match_score": 0.8846153846153846}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0029888917092101286, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.07553608455898564}}
{"filename": "p03796_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');function Main(input){var tmp=input['split']('\\x0a');var N=Number(tmp[0x0]);var pow=0x1;for(var i=0x1;i<=N;i++){pow*=i;pow%=0x3b9aca07;}console['log'](pow);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "6"], ["10", "3628800"], ["100000", "457992974"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var tmp = input.split(\"\\n\");\n  //var line0 = tmp[0].split(\" \");\n  //var line1 = tmp[1].split(\" \");\n  //var line2 = tmp[2].split(\" \");\n  //var line3 = tmp[3].split(\" \");\n\n  var N = Number(tmp[0]);\n  //var A = Number(line0[1]);\n  //var B = Number(line0[2]);\n  \n  var pow = 1;\n  for(var i=1; i<=N; i++){\n    pow *= i;\n    pow %= 1000000007;\n  }\n  \n  console.log(pow);\n\n  \n  //入出力確認コード\n  // A.forEach( function(value) console.log(value); );\n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 461, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nfunction Main(input) {\n  var tmp = input.split(\"\\n\");\n  var N = Number(tmp[0]);\n  var pow = 1;\n  for (var i = 1; i <= N; i++) {\n    pow *= i;\n    pow %= 1000000007;\n  }\n  console.log(pow);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5989840559831434, "ngram_match_score": 0.16735519609526647, "weighted_ngram_match_score": 0.22858102783730733, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03814_1", "type": "JavaScript", "obfuscated": "function main(input){const S=input['split']('');let a_idx;let z_idx;for(let i=0x0;i<S['length'];i++){if(S[i]==='A'&&!a_idx){a_idx=i;}if(S[i]==='Z'){z_idx=i;}}console['log'](z_idx-a_idx+0x1);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["QWERTYASDFZXCV", "5"], ["ZABCZ", "4"], ["HASFJGHOGAKZZFEGA", "12"]], "original": "function main(input) {\n  const S = input.split('');\n  let a_idx;\n  let z_idx;\n  \n  for(let i = 0; i < S.length; i++) {\n  \tif (S[i] === 'A' && !a_idx) { a_idx = i; }\n    if (S[i] === 'Z') { z_idx = i; }\n  }\n  \n  console.log((z_idx - a_idx) + 1);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 462, "deobfuscated": "function main(input) {\n  const S = input.split(\"\");\n  let a_idx;\n  let z_idx;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"A\" && !a_idx) {\n      a_idx = i;\n    }\n    if (S[i] === \"Z\") {\n      z_idx = i;\n    }\n  }\n  console.log(z_idx - a_idx + 1);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7852435138851024, "ngram_match_score": 0.6278191759721278, "weighted_ngram_match_score": 0.6510859140510403, "syntax_match_score": 0.8620689655172413, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00017_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var strA=input['trim']();var abc='abcdefghijklmnopqrstuvwxyz'['split']('');for(var i=0x0;i<0x1a;i++){var strB=strA['replace'](/[a-z]/g,function(s){return abc[(abc['indexOf'](s)+i)%0x1a];});if(strB['match'](/the|this|that/))break;}console['log'](strB);", "test_cases": [["xlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.", "this is the picture that i took in the trip."]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar strA=input.trim();\nvar abc=\"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nfor(var i=0;i<26;i++){\n   var strB=strA.replace(/[a-z]/g,function(s){\n      return abc[(abc.indexOf(s)+i)%26];\n   });\n   if(strB.match(/the|this|that/))break;\n}\nconsole.log(strB);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 463, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar strA = input.trim();\nvar abc = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nfor (var i = 0; i < 26; i++) {\n  var strB = strA.replace(/[a-z]/g, function (s) {\n    return abc[(abc.indexOf(s) + i) % 26];\n  });\n  if (strB.match(/the|this|that/)) {\n    break;\n  }\n}\nconsole.log(strB);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.511217397872672, "ngram_match_score": 0.03097717033891347, "weighted_ngram_match_score": 0.0828579383931535, "syntax_match_score": 0.9310344827586207, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00026_1", "type": "JavaScript", "obfuscated": "var input='';var mem=new Array(0xe);for(var i=0x0;i<0xe;i++){mem[i]=new Array(0xe);for(var j=0x0;j<0xe;j++)mem[i][j]=0x0;}var dx=[[0x0,-0x1,0x0,0x1,0x0],[-0x1,0x0,0x1,-0x1,0x0,0x1,-0x1,0x0,0x1],[0x0,-0x1,0x0,-0x1,-0x2,-0x1,0x0,0x1,0x2,-0x1,0x0,0x1,0x0]];var dy=[[-0x1,0x0,0x0,0x0,0x1],[-0x1,-0x1,-0x1,0x0,0x0,0x0,0x1,0x1,0x1],[-0x2,-0x1,-0x1,-0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2]];process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');for(var i=0x0;i<input['length'];i++){s=input[i]['split'](',');x=Number(s[0x0])+0x2;y=Number(s[0x1])+0x2;v=Number(s[0x2])-0x1;for(var j in dx[v])mem[x+dx[v][j]][y+dy[v][j]]++;}m=0x0;b=0x0;for(var i=0x2;i<0xc;i++){for(var j=0x2;j<0xc;j++){if(mem[i][j]==0x0)b++;m=Math['max'](m,mem[i][j]);}}console['log'](b);console['log'](m);});", "test_cases": [["2,5,3\n3,6,1\n3,4,2\n4,5,2\n3,6,3\n2,4,1", "77\n5"]], "original": "\nvar input = \"\";\nvar mem = new Array(14);\nfor(var i = 0; i < 14; i++)\n{\n  mem[i] = new Array(14);\n  for(var j = 0; j < 14; j++)\n    mem[i][j] = 0;\n}\nvar dx = [\n  [0, -1, 0, 1, 0],\n  [-1, 0, 1, -1, 0, 1, -1, 0, 1],\n  [0, -1, 0, -1, -2, -1, 0, 1, 2, -1, 0, 1, 0]\n]\nvar dy =[\n  [-1, 0, 0, 0, 1],\n  [-1, -1, -1, 0, 0, 0, 1, 1, 1,],\n  [-2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 2]\n]\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk){input += chunk});\nprocess.stdin.on('end', function()\n{\n  input = input.split('\\n');\n  for(var i = 0; i < input.length; i++)\n  {\n    s = input[i].split(',');\n    x = Number(s[0]) + 2;\n    y = Number(s[1]) + 2;\n    v = Number(s[2]) - 1;\n    for(var j in dx[v])\n      mem[x + dx[v][j]][y + dy[v][j]]++;\n  }\n  m = 0;\n  b = 0;\n  for(var i = 2; i < 12; i++)\n  {\n    for(var j = 2; j < 12; j++)\n    {\n      if(mem[i][j] == 0)\n        b++;\n      m = Math.max(m, mem[i][j]);\n    }\n  }\n  console.log(b);\n  console.log(m);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 464, "deobfuscated": "var input = \"\";\nvar mem = new Array(14);\nfor (var i = 0; i < 14; i++) {\n  mem[i] = new Array(14);\n  for (var j = 0; j < 14; j++) {\n    mem[i][j] = 0;\n  }\n}\nvar dx = [[0, -1, 0, 1, 0], [-1, 0, 1, -1, 0, 1, -1, 0, 1], [0, -1, 0, -1, -2, -1, 0, 1, 2, -1, 0, 1, 0]];\nvar dy = [[-1, 0, 0, 0, 1], [-1, -1, -1, 0, 0, 0, 1, 1, 1], [-2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 2]];\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  for (var i = 0; i < input.length; i++) {\n    s = input[i].split(\",\");\n    x = Number(s[0]) + 2;\n    y = Number(s[1]) + 2;\n    v = Number(s[2]) - 1;\n    for (var j in dx[v]) {\n      mem[x + dx[v][j]][y + dy[v][j]]++;\n    }\n  }\n  m = 0;\n  b = 0;\n  for (var i = 2; i < 12; i++) {\n    for (var j = 2; j < 12; j++) {\n      if (mem[i][j] == 0) {\n        b++;\n      }\n      m = Math.max(m, mem[i][j]);\n    }\n  }\n  console.log(b);\n  console.log(m);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8180491178330282, "ngram_match_score": 0.6542625681688967, "weighted_ngram_match_score": 0.7118565550969181, "syntax_match_score": 0.9060773480662984, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02260_1", "type": "JavaScript", "obfuscated": "let inputString='';process['stdin']['on']('data',inputStdin=>{inputString+=inputStdin;});process['stdin']['on']('end',function(){inputString=inputString['replace'](/\\s*$/,'')['split']('\\x0a')['map'](str=>str['replace'](/\\s*$/,''));selectionSort(inputString[0x1]['split']('\\x20')['map'](str=>Number(str)));});const selectionSort=arr=>{let swap=0x0;for(let i=0x0;i<arr['length'];i++){let minj=i;for(let j=i;j<arr['length'];j++){if(arr[j]<arr[minj]){minj=j;}}const a=arr[i];const b=arr[minj];if(a!==b){arr[minj]=a;arr[i]=b;swap++;}}console['log'](arr['join']('\\x20'));console['log'](swap);};", "test_cases": [["6\n5 6 4 2 1 3", "1 2 3 4 5 6\n4"], ["6\n5 2 4 6 1 3", "1 2 3 4 5 6\n3"]], "original": "let inputString = '';\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\nprocess.stdin.on('end', function() {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str => str.replace(/\\s*$/, ''));\n\n    selectionSort(inputString[1].split(' ').map(str => Number(str)));\n});\n\nconst selectionSort = (arr) => {\n  let swap = 0;\n\n  for (let i=0; i<arr.length; i++) {\n    let minj = i;\n    for (let j=i; j<arr.length; j++) {\n      if (arr[j] < arr[minj]) { minj = j; }\n    }\n    const a = arr[i];\n    const b = arr[minj];\n    if (a !== b) {\n      arr[minj] = a;\n      arr[i] = b;\n      swap++;\n    }\n  }\n\n  console.log(arr.join(' '));\n  console.log(swap);\n};\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 465, "deobfuscated": "let inputString = \"\";\nprocess.stdin.on(\"data\", inputStdin => {\n  inputString += inputStdin;\n});\nprocess.stdin.on(\"end\", function () {\n  inputString = inputString.replace(/\\s*$/, \"\").split(\"\\n\").map(str => str.replace(/\\s*$/, \"\"));\n  selectionSort(inputString[1].split(\" \").map(str => Number(str)));\n});\nconst selectionSort = arr => {\n  let swap = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let minj = i;\n    for (let j = i; j < arr.length; j++) {\n      if (arr[j] < arr[minj]) {\n        minj = j;\n      }\n    }\n    const a = arr[i];\n    const b = arr[minj];\n    if (a !== b) {\n      arr[minj] = a;\n      arr[i] = b;\n      swap++;\n    }\n  }\n  console.log(arr.join(\" \"));\n  console.log(swap);\n};\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.735032960065137, "ngram_match_score": 0.6246462452589441, "weighted_ngram_match_score": 0.6850211141272865, "syntax_match_score": 0.9583333333333334, "dataflow_match_score": 0.6721311475409836}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02327_1", "type": "JavaScript", "obfuscated": "console['log'](0x6);", "test_cases": [["4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0", "6"]], "original": "console.log(6);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 466, "deobfuscated": "console.log(6);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5553941064735807, "ngram_match_score": 0.1778279410038923, "weighted_ngram_match_score": 0.04374848489043043, "syntax_match_score": 1.0, "dataflow_match_score": 0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02389_1", "type": "JavaScript", "obfuscated": "(function(stdin){var lines=stdin['toString']()['split']('\\x20');var x=parseInt(lines[0x0],0xa);var y=parseInt(lines[0x1],0xa);console['log'](x*y,(x+y)*0x2);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3 5", "15 16"]], "original": " (function(stdin) {\n    var lines = stdin.toString().split(' ');\n    var x = parseInt(lines[0],10);\n    var y = parseInt(lines[1],10);\n    \n    console.log((x*y),(x+y)*2);\n\n }(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 467, "deobfuscated": "(function (stdin) {\n  var lines = stdin.toString().split(\" \");\n  var x = parseInt(lines[0], 10);\n  var y = parseInt(lines[1], 10);\n  console.log(x * y, (x + y) * 2);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5540758940399975, "ngram_match_score": 0.15450079547146167, "weighted_ngram_match_score": 0.2663482352339828, "syntax_match_score": 0.7954545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02600_1", "type": "JavaScript", "obfuscated": "function main(input){console['log'](0xa-Math['floor'](input/0xc8));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["725", "7"], ["1600", "2"]], "original": "function main(input) {\n    console.log(10 - Math.floor(input / 200));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 468, "deobfuscated": "function main(input) {\n  console.log(10 - Math.floor(input / 200));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8958864927403424, "ngram_match_score": 0.7860753021519787, "weighted_ngram_match_score": 0.7974706688093908, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02603_1", "type": "JavaScript", "obfuscated": "function main(arg){let n=Number(arg['split']('\\x0a')[0x0]);let a=arg['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);let dp=[];for(let i=0x0;i<n+0x1;i++)dp[i]=0x0;dp[0x0]=0x3e8;let stock=0x0;for(let i=0x1;i<n+0x1;i++){if(i==n){dp[i]=dp[i-0x1]+stock*a[i-0x1];}else if(a[i]>a[i-0x1]){let addStock=parseInt(dp[i-0x1]/a[i-0x1]);dp[i]=dp[i-0x1]-addStock*a[i-0x1];stock+=addStock;}else{let rmStock=stock;dp[i]=dp[i-0x1]+rmStock*a[i-0x1];stock-=rmStock;}}console['log'](dp[n]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\n100 130 130 130 115 115 150", "1685"], ["6\n200 180 160 140 120 100", "1000"], ["2\n157 193", "1216"]], "original": "function main(arg) {\n    let n = Number(arg.split(\"\\n\")[0])\n    let a = arg.split(\"\\n\")[1].split(\" \").map(Number)\n    \n    let dp = []\n    for(let i=0; i<n+1; i++)dp[i]=0\n    dp[0] = 1000\n    \n    let stock = 0\n    for(let i=1; i<n+1; i++) {\n        if(i==n) {\n        // 売却\n            dp[i] = dp[i-1] + stock*a[i-1]\n        }else if(a[i]>a[i-1]) {\n        // 購入\n            let addStock = parseInt(dp[i-1]/a[i-1])\n            dp[i] = dp[i-1] - addStock * a[i-1]\n            stock += addStock\n            //console.log(`addStock=${addStock}`)\n        } else {\n        // 売却\n            let rmStock = stock\n            dp[i] = dp[i-1] + rmStock * a[i-1]\n            stock -= rmStock\n            //console.log(`rmStock=${rmStock}`)\n        }\n            //console.log(`stock=${stock}`)\n    }\n    console.log(dp[n])\n    \n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 469, "deobfuscated": "function main(arg) {\n  let n = Number(arg.split(\"\\n\")[0]);\n  let a = arg.split(\"\\n\")[1].split(\" \").map(Number);\n  let dp = [];\n  for (let i = 0; i < n + 1; i++) {\n    dp[i] = 0;\n  }\n  dp[0] = 1000;\n  let stock = 0;\n  for (let i = 1; i < n + 1; i++) {\n    if (i == n) {\n      dp[i] = dp[i - 1] + stock * a[i - 1];\n    } else if (a[i] > a[i - 1]) {\n      let addStock = parseInt(dp[i - 1] / a[i - 1]);\n      dp[i] = dp[i - 1] - addStock * a[i - 1];\n      stock += addStock;\n    } else {\n      let rmStock = stock;\n      dp[i] = dp[i - 1] + rmStock * a[i - 1];\n      stock -= rmStock;\n    }\n  }\n  console.log(dp[n]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5794349685553057, "ngram_match_score": 0.13943101186698043, "weighted_ngram_match_score": 0.21030886235424245, "syntax_match_score": 0.968, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02663_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');let cin=input['split'](/ |\\n/),cid=0x0;const next=()=>cin[cid++];const nexts=n=>cin['slice'](cid,cid+=n)['map'](i=>parseInt(i));const [H1,M1,H2,M2,K]=nexts(0x5);const time=H2*0x3c+M2-(H1*0x3c+M1)-K;time>0x0?console['log'](time):console['log'](0x0);", "test_cases": [["10 0 15 0 30", "270"], ["10 0 12 0 120", "0"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nlet cin = input.split(/ |\\n/), cid = 0\nconst next = () => cin[cid++]\nconst nexts = (n) => cin.slice(cid, cid+=n).map(i=>parseInt(i))\n\nconst [H1, M1, H2, M2, K] = nexts(5);\nconst time = H2 * 60 + M2 - (H1 * 60 + M1) - K\ntime > 0 ? console.log(time) : console.log(0)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 470, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet cin = input.split(/ |\\n/);\nlet cid = 0;\nconst next = () => cin[cid++];\nconst nexts = n => cin.slice(cid, cid += n).map(i => parseInt(i));\nconst [H1, M1, H2, M2, K] = nexts(5);\nconst time = H2 * 60 + M2 - (H1 * 60 + M1) - K;\nif (time > 0) {\n  console.log(time);\n} else {\n  console.log(0);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7419130348909004, "ngram_match_score": 0.5024543960779091, "weighted_ngram_match_score": 0.5963452844692992, "syntax_match_score": 0.8688524590163934, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.375, "length_score": -0.375, "increase_maintainability": -0.05072260674410578, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.031746031746031855, "new_decrease_halstead_effort": -0.14461051640851852}}
{"filename": "p02693_1", "type": "JavaScript", "obfuscated": "function Main(input){var str=input;const n=str['split']('\\x0a');var k=Number(n[0x0]);var p=n[0x1]['split']('\\x20');var a=Number(p[0x0]);var b=Number(p[0x1]);var ans='';for(var i=a;i<=b;i++){if(i%k===0x0){ans='OK';}}if(ans!=='OK'){ans='NG';}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\n500 600", "OK"], ["4\n5 7", "NG"], ["1\n11 11", "OK"]], "original": "function Main(input) {\n\tvar str = input;\n\tconst n = str.split('\\n');\n\tvar k  =Number(n[0]);\n\tvar p = n[1].split(\" \");\t\n\tvar a = Number(p[0]); \n\tvar b = Number(p[1]);\n\tvar ans = \"\";\n\t\n\tfor(var i = a; i <= b; i++){\n\t\tif(i%k===0){\n\t\t\tans = \"OK\";\n\t\t}\n\t}\nif(ans !== \"OK\"){\n\tans = \"NG\"\n}\n console.log(ans);\n }\n \n \n//*おまじない\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 471, "deobfuscated": "function Main(input) {\n  var str = input;\n  const n = str.split(\"\\n\");\n  var k = Number(n[0]);\n  var p = n[1].split(\" \");\n  var a = Number(p[0]);\n  var b = Number(p[1]);\n  var ans = \"\";\n  for (var i = a; i <= b; i++) {\n    if (i % k === 0) {\n      ans = \"OK\";\n    }\n  }\n  if (ans !== \"OK\") {\n    ans = \"NG\";\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7942909457887013, "ngram_match_score": 0.5351582246602627, "weighted_ngram_match_score": 0.6420055584945423, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02879_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x20');var a=Number(input[0x0]);var b=Number(input[0x1]);if(a>0x9||b>0x9){console['log'](-0x1);return;}var result=a*b;console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 5", "10"], ["5 10", "-1"], ["9 9", "81"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var input = input.split(' ')\n  var a = Number(input[0])\n  var b = Number(input[1])\n  if (a > 9 || b > 9){\n    console.log(-1)\n  \treturn;\n  }\n  var result = a * b;\n  console.log(result);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 472, "deobfuscated": "function Main(input) {\n  var input = input.split(\" \");\n  var a = Number(input[0]);\n  var b = Number(input[1]);\n  if (a > 9 || b > 9) {\n    console.log(-1);\n    return;\n  }\n  var result = a * b;\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8080202468868802, "ngram_match_score": 0.6090470040300677, "weighted_ngram_match_score": 0.6230339835174533, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02918_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const K=parseInt(arg[0x0]['split']('\\x20')[0x1]);const S=arg[0x1]['split']('');let alreadyHappy=0x0;let last;for(let i in S){if(last==='L'&&S[i]==='L'){alreadyHappy++;}if(last==='R'&&S[i]==='R'){alreadyHappy++;}last=S[i];}console['log'](Math['min'](N-0x1,alreadyHappy+0x2*K));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6 1\nLRLRRL", "3"], ["13 3\nLRRLRLRRLRLLR", "9"], ["10 1\nLLLLLRRRRR", "9"], ["9 2\nRRRLRLRLL", "7"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n    \n    const S = arg[1].split(\"\");\n    let alreadyHappy = 0;\n    let last;\n    \n    for(let i in S) {\n        if(last === \"L\" && S[i] === \"L\") {\n            alreadyHappy++;\n        }\n        \n        if(last === \"R\" && S[i] === \"R\") {\n            alreadyHappy++;\n        }\n        \n        last = S[i];\n    }\n\n    console.log(Math.min(N - 1, alreadyHappy + (2 * K)));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 473, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const K = parseInt(arg[0].split(\" \")[1]);\n  const S = arg[1].split(\"\");\n  let alreadyHappy = 0;\n  let last;\n  for (let i in S) {\n    if (last === \"L\" && S[i] === \"L\") {\n      alreadyHappy++;\n    }\n    if (last === \"R\" && S[i] === \"R\") {\n      alreadyHappy++;\n    }\n    last = S[i];\n  }\n  console.log(Math.min(N - 1, alreadyHappy + K * 2));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.849120021540957, "ngram_match_score": 0.7454255158021654, "weighted_ngram_match_score": 0.7864712370283291, "syntax_match_score": 0.8645833333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03014_1", "type": "JavaScript", "obfuscated": "const main=inputs=>{var H=inputs[0x0]['split']('\\x20')[0x0]-0x0;var W=inputs[0x0]['split']('\\x20')[0x1]-0x0;var map={};var ymap={};var tmap={};var keys=[];for(var h=0x0;h<H;h++){map[h]=inputs[h+0x1];for(var w=0x0;w<W;w++){var ukey=h-0x1+'_'+w;var lkey=h+'_'+(w-0x1);var key=h+'_'+w;if(map[h][w]=='#'){}else{keys['push'](key);if(ymap[lkey]){ymap[key]=ymap[lkey];ymap[key]['n']++;}else{ymap[key]={'n':0x1};}if(tmap[ukey]){tmap[key]=tmap[ukey];tmap[key]['n']++;}else{tmap[key]={'n':0x1};}}}}var ans=0x0;var key;for(var i=keys['length']-0x1;i>=0x0;i--){key=keys[i];ans=Math['max'](ans,tmap[key]['n']+ymap[key]['n']-0x1);if(ans==H+W-0x1)break;}console['log'](ans);};main(require('fs')['readFileSync']('/dev/stdin','UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["4 6\n#..#..\n.....#\n....#.\n#.#...", "8"], ["8 8\n..#...#.\n....#...\n##......\n..###..#\n...#..#.\n##....#.\n#...#...\n###.#..#", "13"]], "original": "const main = (inputs) => {\n  var H = inputs[0].split(\" \")[0]-0;\n  var W = inputs[0].split(\" \")[1]-0;\n \n  var map = {};\n  var ymap = {};\n  var tmap = {};\n  var keys = [];\n  for(var h=0;h<H;h++){\n    map[h] = inputs[h+1];\n    for(var w=0;w<W;w++){\n      var ukey = (h-1)+\"_\"+w;\n      var lkey = h+\"_\"+(w-1);\n      var key = h+\"_\"+w;\n      if(map[h][w] == \"#\"){\n      }else{\n        keys.push(key);\n        if(ymap[lkey]){\n          ymap[key] = ymap[lkey];\n          ymap[key].n++;\n        }else{\n          ymap[key] = {n:1};\n        }\n \n        if(tmap[ukey]){\n          tmap[key] = tmap[ukey];\n          tmap[key].n++;\n        }else{\n          tmap[key] = {n:1};\n        }\n      }\n    }\n  }\n  var ans = 0;\n  var key;\n  for(var i=keys.length-1;i>=0;i--){\n    key = keys[i];\n    ans = Math.max(ans, tmap[key].n + ymap[key].n - 1);\n    if(ans == H+W-1) break;\n  }\n  console.log(ans);\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 474, "deobfuscated": "const main = inputs => {\n  var H = inputs[0].split(\" \")[0] - 0;\n  var W = inputs[0].split(\" \")[1] - 0;\n  var map = {};\n  var ymap = {};\n  var tmap = {};\n  var keys = [];\n  for (var h = 0; h < H; h++) {\n    map[h] = inputs[h + 1];\n    for (var w = 0; w < W; w++) {\n      var ukey = h - 1 + \"_\" + w;\n      var lkey = h + \"_\" + (w - 1);\n      var key = h + \"_\" + w;\n      if (map[h][w] == \"#\") {} else {\n        keys.push(key);\n        if (ymap[lkey]) {\n          ymap[key] = ymap[lkey];\n          ymap[key].n++;\n        } else {\n          ymap[key] = {\n            n: 1\n          };\n        }\n        if (tmap[ukey]) {\n          tmap[key] = tmap[ukey];\n          tmap[key].n++;\n        } else {\n          tmap[key] = {\n            n: 1\n          };\n        }\n      }\n    }\n  }\n  var ans = 0;\n  var key;\n  for (var i = keys.length - 1; i >= 0; i--) {\n    key = keys[i];\n    ans = Math.max(ans, tmap[key].n + ymap[key].n - 1);\n    if (ans == H + W - 1) {\n      break;\n    }\n  }\n  console.log(ans);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6774845519317578, "ngram_match_score": 0.2954179154474791, "weighted_ngram_match_score": 0.5089647367239967, "syntax_match_score": 0.9055555555555556, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03089_1", "type": "JavaScript", "obfuscated": "input=require('fs')['readFileSync']('/dev/stdin','utf8');lines=input['split']('\\x0a');N=lines['shift']()*0x1;b=lines['shift']()['split']('\\x20');a=[];for(i=N;i>0x0;i--){found=![];for(j=i;j>0x0;j--){if(b[j-0x1]==j){a['push'](b['splice'](j-0x1,0x1));found=!![];break;}}if(!found){a=[-0x1];break;}}console['log'](a['reverse']()['join']('\\x0a'));", "test_cases": [["3\n1 2 1", "1\n1\n2"], ["2\n2 2", "-1"], ["9\n1 1 1 2 2 1 2 3 2", "1\n2\n2\n3\n1\n2\n2\n1\n1"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nb = lines.shift().split(' ')\na = []\nfor (i=N; i>0; i--) {\n    found = false\n    for (j=i; j>0; j--) {\n        if (b[j-1] == j) {\n            a.push(b.splice(j-1, 1))\n            found = true\n            break;\n        }\n    }\n    if (!found) {\n        a = [-1]\n        break;\n    }\n}\nconsole.log(a.reverse().join(\"\\n\"))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 475, "deobfuscated": "input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlines = input.split(\"\\n\");\nN = lines.shift() * 1;\nb = lines.shift().split(\" \");\na = [];\nfor (i = N; i > 0; i--) {\n  found = false;\n  for (j = i; j > 0; j--) {\n    if (b[j - 1] == j) {\n      a.push(b.splice(j - 1, 1));\n      found = true;\n      break;\n    }\n  }\n  if (!found) {\n    a = [-1];\n    break;\n  }\n}\nconsole.log(a.reverse().join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.644140412257611, "ngram_match_score": 0.2574456584510573, "weighted_ngram_match_score": 0.3191159905793865, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0038700051280824432, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04504504504504503, "new_decrease_halstead_effort": 0.1015277875277607}}
{"filename": "p03295_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var temp1=input[0x0]['split']('\\x20');var n=toInt(temp1[0x0]);var m=toInt(temp1[0x1]);var abs=[];for(var i=0x0;i<m;i++){c=toIntArr(input[i+0x1]['split']('\\x20'));a=c[0x0];b=c[0x1];abs[i]=[a,b];}abs['sort'](function(a,b){if(a[0x0]!==b[0x0]){return a[0x0]-b[0x0];}else{return a[0x1]-b[0x1];}});var l=0x0;r=n-0x1;var ab;var ans=0x1;for(var i=0x0;i<m;i++){ab=abs[i];if(ab[0x1]<=l||r<=ab[0x0]){ans++;l=ab[0x0];r=ab[0x1];}else{l=max(l,ab[0x0]);r=min(r,ab[0x1]);}}console['log'](ans);}", "test_cases": [["5 2\n1 4\n2 5", "1"], ["9 5\n1 8\n2 7\n3 5\n4 6\n7 9", "2"], ["5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5", "4"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar temp1 = input[0].split(' ');\n\tvar n = toInt(temp1[0]);\n\tvar m = toInt(temp1[1]);\n\tvar abs = [];\n\tfor(var i = 0; i < m; i++){\n\t\tc = toIntArr(input[i+1].split(' '));\n\t\ta = c[0];\n\t\tb = c[1];\n\t\tabs[i] = [a,b];\n\t}\n\tabs.sort(function(a,b){\n\t\tif(a[0]!==b[0]){\n\t\t\treturn a[0] - b[0];\n\t\t}else{\n\t\t\treturn a[1] - b[1];\n\t\t}\n\t})\n\tvar l=0;r=n-1;\n\tvar ab;\n\tvar ans = 1;\n\tfor(var i = 0; i < m; i++){\n\t\tab = abs[i];\n\t\tif(ab[1]<=l || r<=ab[0]){\n\t\t\tans++;\n\t\t\tl = ab[0];\n\t\t\tr = ab[1];\n\t\t}else{\n\t\t\tl = max(l,ab[0]);\n\t\t\tr = min(r,ab[1]);\n\t\t}\n\t}\n\tconsole.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 476, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var temp1 = input[0].split(\" \");\n  var n = toInt(temp1[0]);\n  var m = toInt(temp1[1]);\n  var abs = [];\n  for (var i = 0; i < m; i++) {\n    c = toIntArr(input[i + 1].split(\" \"));\n    a = c[0];\n    b = c[1];\n    abs[i] = [a, b];\n  }\n  abs.sort(function (a, b) {\n    if (a[0] !== b[0]) {\n      return a[0] - b[0];\n    } else {\n      return a[1] - b[1];\n    }\n  });\n  var l = 0;\n  r = n - 1;\n  var ab;\n  var ans = 1;\n  for (var i = 0; i < m; i++) {\n    ab = abs[i];\n    if (ab[1] <= l || r <= ab[0]) {\n      ans++;\n      l = ab[0];\n      r = ab[1];\n    } else {\n      l = max(l, ab[0]);\n      r = min(r, ab[1]);\n    }\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6587513294927435, "ngram_match_score": 0.24410898670140915, "weighted_ngram_match_score": 0.444294389521992, "syntax_match_score": 0.9466019417475728, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00011165738564677952, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.007067137809187329, "new_decrease_halstead_effort": -0.007067137809187329}}
{"filename": "p03331_1", "type": "JavaScript", "obfuscated": "function main(input){var digits=input['toString']()['length'];var input=parseInt(input,0xa);var divisor=Math['pow'](0xa,digits-0x1);var arr=[];for(var i=0x0;i<digits;i++){arr['push'](Math['floor'](input/divisor));input=input%divisor;divisor/=0xa;}var answer=arr['reduce']((a,b)=>a+b);if(answer==0x1){answer=0xa;}console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["15", "6"], ["100000", "10"]], "original": "function main(input) {\n  var digits = input.toString().length;\n  var input = parseInt(input, 10);\n \n  var divisor = Math.pow(10, digits - 1);\n  var arr = [];\n  for (var i = 0; i < digits; i++) {\n  \tarr.push(Math.floor(input / divisor))\n  \tinput = input % divisor;\n  \tdivisor /= 10;\n \n  }\n  var answer = arr.reduce((a, b) => a + b);\n  if(answer == 1) {answer = 10;}\n \n  console.log(answer);\n \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 477, "deobfuscated": "function main(input) {\n  var digits = input.toString().length;\n  var input = parseInt(input, 10);\n  var divisor = Math.pow(10, digits - 1);\n  var arr = [];\n  for (var i = 0; i < digits; i++) {\n    arr.push(Math.floor(input / divisor));\n    input = input % divisor;\n    divisor /= 10;\n  }\n  var answer = arr.reduce((a, b) => a + b);\n  if (answer == 1) {\n    answer = 10;\n  }\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9048742116901622, "ngram_match_score": 0.7876285191412105, "weighted_ngram_match_score": 0.8318683276194387, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03457_1", "type": "JavaScript", "obfuscated": "function Main(input){var args=input['split']('\\x0a');var N=parseInt(args,0xa);var history=args['slice'](0x1,N+0x1);var answer;var flg=0x1;var plan=[];plan[0x0]=[0x0,0x0,0x0];for(var i=0x0;i<N;i++){plan[i+0x1]=parser(history[i]);}for(var i=0x1;i<plan['length'];i++){var rec1=plan[i-0x1];var rec2=plan[i];var dt=rec2[0x0]-rec1[0x0];var dist=Math['abs'](rec2[0x1]+rec2[0x2]-rec1[0x1]-rec1[0x2]);if(dt>=dist&&dt%0x2===dist%0x2){}else{flg=0x0;}}answer=flg?'Yes':'No';console['log'](answer);}function parser(record){var args=record['split']('\\x20');var return_val=[];return_val['push'](parseInt(args[0x0],0xa));return_val['push'](parseInt(args[0x1],0xa));return_val['push'](parseInt(args[0x2],0xa));return return_val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n3 1 2\n6 1 1", "Yes"], ["1\n2 100 100", "No"], ["2\n5 1 1\n100 1 1", "No"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar args = input.split(\"\\n\");\n\tvar N = parseInt(args,10);\n\tvar history = args.slice(1,N+1);\n\tvar answer;\n\tvar flg = 1;\n\tvar plan = [];\n\tplan[0]=[0,0,0];\n\tfor(var i=0;i<N;i++){\n\t\tplan[i+1] = parser(history[i]);\n\t}\n\n\tfor(var i=1;i<plan.length;i++){\n\t\tvar rec1 = plan[i-1];\n\t\tvar rec2 = plan[i];\n\t\tvar dt = rec2[0] - rec1[0];\n\t\tvar dist = Math.abs(rec2[1]+rec2[2]-rec1[1]-rec1[2]);\n\t\tif (dt >= dist && dt % 2 === dist % 2){\n\t\t}else{\n\t\t\t\tflg = 0;\n\t\t}\n\t}\n\tanswer = flg ? \"Yes\" : \"No\" ;\n\t//出力\n\tconsole.log(answer);\n}\nfunction parser(record){\n\tvar args = record.split(\" \");\n\tvar return_val=[];\n\treturn_val.push(parseInt(args[0],10));\n\treturn_val.push(parseInt(args[1],10));\n\treturn_val.push(parseInt(args[2],10));\n\treturn return_val\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 478, "deobfuscated": "function Main(input) {\n  var args = input.split(\"\\n\");\n  var N = parseInt(args, 10);\n  var history = args.slice(1, N + 1);\n  var answer;\n  var flg = 1;\n  var plan = [];\n  plan[0] = [0, 0, 0];\n  for (var i = 0; i < N; i++) {\n    plan[i + 1] = parser(history[i]);\n  }\n  for (var i = 1; i < plan.length; i++) {\n    var rec1 = plan[i - 1];\n    var rec2 = plan[i];\n    var dt = rec2[0] - rec1[0];\n    var dist = Math.abs(rec2[1] + rec2[2] - rec1[1] - rec1[2]);\n    if (dt >= dist && dt % 2 === dist % 2) {} else {\n      flg = 0;\n    }\n  }\n  answer = flg ? \"Yes\" : \"No\";\n  console.log(answer);\n}\nfunction parser(record) {\n  var args = record.split(\" \");\n  var return_val = [];\n  return_val.push(parseInt(args[0], 10));\n  return_val.push(parseInt(args[1], 10));\n  return_val.push(parseInt(args[2], 10));\n  return return_val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7563081614618559, "ngram_match_score": 0.42548734028789365, "weighted_ngram_match_score": 0.5997453055595298, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03635_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var line=input[0x0]['split']('\\x20');var m=parseInt(line[0x0]);var n=parseInt(line[0x1]);var ans=(m-0x1)*(n-0x1);console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4", "6"], ["2 2", "1"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var line = input[0].split(\" \");\n    var m = parseInt(line[0]);\n    var n = parseInt(line[1]);\n    \n    var ans = (m-1)*(n-1);\n    console.log(ans);\n    \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 479, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var line = input[0].split(\" \");\n  var m = parseInt(line[0]);\n  var n = parseInt(line[1]);\n  var ans = (m - 1) * (n - 1);\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9073353526781965, "ngram_match_score": 0.727147641547681, "weighted_ngram_match_score": 0.9021937691651052, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03998_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');let a=input[0x0]['split']('');let b=input[0x1]['split']('');let c=input[0x2]['split']('');function shiftCard(man){let out=eval(man)['shift']();if(out===undefined){console['log'](man['toUpperCase']());return;}shiftCard(out);}shiftCard('a');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["aca\naccc\nca", "A"], ["abcb\naacb\nbccc", "C"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet a = input[0].split('')\n\tlet b = input[1].split('')\n\tlet c = input[2].split('')\n\t\n\tfunction shiftCard(man) {\n\t\tlet out = eval(man).shift()\n\t\tif(out === undefined) {\n\t\t\tconsole.log(man.toUpperCase())\n\t\t\treturn\n\t\t}\n\t\tshiftCard(out)\n\t}\n\tshiftCard('a')\n\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 480, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  let a = input[0].split(\"\");\n  let b = input[1].split(\"\");\n  let c = input[2].split(\"\");\n  function shiftCard(man) {\n    let out = eval(man).shift();\n    if (out === undefined) {\n      console.log(man.toUpperCase());\n      return;\n    }\n    shiftCard(out);\n  }\n  shiftCard(\"a\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6788256539547852, "ngram_match_score": 0.4647620008863158, "weighted_ngram_match_score": 0.4873827201959829, "syntax_match_score": 1.0, "dataflow_match_score": 0.7631578947368421}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00093_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');x=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/\\s/);for(i=0x0;i<x['length'];i+=0x2){count=0x0;y=x[i];if(y+x[i+0x1]==0x0)break;for(;y<=x[i+0x1];y++){if(y%0x190==0x0||y%0x4==0x0&&y%0x64!=0x0){console['log'](String(y)['trim']());count++;}}if(i!=0x0||i==x['length']-0x1)console['log']();if(count==0x0){console['log']('NA\\x0a');}}", "test_cases": [["2001 2010\n2005 2005\n2001 2010\n0 0", "2004\n2008\n\nNA\n\n2004\n2008"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n// Here your code !\nx=require('fs').readFileSync('/dev/stdin','utf8').trim().split(/\\s/);\nfor(i=0;i<x.length;i+=2){\n    count=0;\n    y=x[i];\n    //if(i!=0||i==x.length-1)console.log();\n    if(y+x[i+1]==0)break;\n    for(;y<=x[i+1];y++){\n        if (y % 400 == 0 || (y % 4 == 0 && y % 100 != 0)){\n            console.log(String(y).trim());\n            count++;\n        }\n    }\n    if(i!=0||i==x.length-1)console.log();\n    if(count==0){\n        console.log(\"NA\\n\");\n    }\n    \n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 481, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nx = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\s/);\nfor (i = 0; i < x.length; i += 2) {\n  count = 0;\n  y = x[i];\n  if (y + x[i + 1] == 0) {\n    break;\n  }\n  for (; y <= x[i + 1]; y++) {\n    if (y % 400 == 0 || y % 4 == 0 && y % 100 != 0) {\n      console.log(String(y).trim());\n      count++;\n    }\n  }\n  if (i != 0 || i == x.length - 1) {\n    console.log();\n  }\n  if (count == 0) {\n    console.log(\"NA\\n\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6288437055767824, "ngram_match_score": 0.19571107820627762, "weighted_ngram_match_score": 0.42966374410085173, "syntax_match_score": 0.89, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02248_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var a=arr[0x0];var b=arr[0x1];var str='';for(var i=0x0;i<a['length'];i++){var flag=!![];;for(var j=0x0;j<b['length'];j++){if(a[i+j]!=b[j]){flag=![];break;}}if(flag)str+=i+'\\x0a';}console['log'](str);", "test_cases": [["aabaaa\naa", "0\n3\n4"], ["xyzz\nyz", "1"], ["abc\nxyz", ""]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar a=arr[0];\nvar b=arr[1];\nvar str=\"\";\nfor(var i=0;i<a.length;i++){\n   var flag=true;;\n   for(var j=0;j<b.length;j++){\n      if(a[i+j]!=b[j]){\n         flag=false;\n         break;\n      }\n   }\n   if(flag)str+=i+\"\\n\";\n}\nconsole.log(str);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 482, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar a = arr[0];\nvar b = arr[1];\nvar str = \"\";\nfor (var i = 0; i < a.length; i++) {\n  var flag = true;\n  ;\n  for (var j = 0; j < b.length; j++) {\n    if (a[i + j] != b[j]) {\n      flag = false;\n      break;\n    }\n  }\n  if (flag) {\n    str += i + \"\\n\";\n  }\n}\nconsole.log(str);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5128701619065099, "ngram_match_score": 0.027723823578564635, "weighted_ngram_match_score": 0.08258035345923978, "syntax_match_score": 0.9411764705882353, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009229441626388057, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05154639175257736, "new_decrease_halstead_effort": 0.2268246740916251}}
{"filename": "p02414_1", "type": "JavaScript", "obfuscated": "var n,m,l,a,b,bt;process['stdin']['setEncoding']('ascii');process['stdin']['on']('data',function(chunk){var line,ary;line=chunk['toString']()['split'](/\\r?\\n/);for(i in line){ary=line[i]['split']('\\x20');if(ary['length']!==0x0)line[i]=ary['map'](Number);}n=line[0x0][0x0];m=line[0x0][0x1];l=line[0x0][0x2];a=line['slice'](0x1,n+0x1);b=line['slice'](n+0x1,n+m+0x1);});process['stdin']['on']('end',function(){var i,j,ci;make_b_transpose();for(i in a){ci=[];for(j in bt){ci['push'](inner_product(a[i],bt[j]));}console['log'](ci['join']('\\x20'));}});function make_b_transpose(){var j,k,bj;bt=[];for(j=0x0;j<l;j++){bj=[];for(k=0x0;k<m;k++)bj['push'](b[k][j]);bt['push'](bj);}}function inner_product(a,b){var res=0x0;for(var i in a)res+=a[i]*b[i];return res;}", "test_cases": [["3 2 3\n1 2\n0 3\n4 5\n1 2 1\n0 3 2", "1 8 5\n0 9 6\n4 23 14"]], "original": "var n, m, l, a, b, bt;\n\nprocess.stdin.setEncoding('ascii');\nprocess.stdin.on('data', function (chunk) {\n\tvar line, ary;\n\tline = chunk.toString().split(/\\r?\\n/);\n\tfor (i in line) {\n\t\tary = line[i].split(' ');\n\t\tif (ary.length !== 0) line[i] = ary.map(Number);\n\t}\n\tn = line[0][0];\n\tm = line[0][1];\n\tl = line[0][2];\n\ta = line.slice(1, n+1);\n\tb = line.slice(n+1, n+m+1);\n});\n\nprocess.stdin.on('end', function() {\n\tvar i, j, ci;\n\n\tmake_b_transpose();\n\n\tfor (i in a) {\n\t\tci = [];\n\t\tfor (j in bt) {\n\t\t\tci.push(inner_product(a[i], bt[j]));\n\t\t}\n\t\tconsole.log(ci.join(' '));\n\t}\n});\n\nfunction make_b_transpose() {\n\tvar j, k, bj;\n\tbt = [];\n\tfor (j = 0; j < l; j++) {\n\t\tbj = [];\n\t\tfor (k = 0; k < m; k++)\n\t\t\tbj.push(b[k][j]);\n\t\tbt.push(bj);\n\t}\n}\n\nfunction inner_product(a, b) {\n\tvar res = 0;\n\tfor (var i in a) res += a[i] * b[i];\n\treturn res;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 483, "deobfuscated": "var n;\nvar m;\nvar l;\nvar a;\nvar b;\nvar bt;\nprocess.stdin.setEncoding(\"ascii\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var line;\n  var ary;\n  line = chunk.toString().split(/\\r?\\n/);\n  for (i in line) {\n    ary = line[i].split(\" \");\n    if (ary.length !== 0) {\n      line[i] = ary.map(Number);\n    }\n  }\n  n = line[0][0];\n  m = line[0][1];\n  l = line[0][2];\n  a = line.slice(1, n + 1);\n  b = line.slice(n + 1, n + m + 1);\n});\nprocess.stdin.on(\"end\", function () {\n  var i;\n  var j;\n  var ci;\n  make_b_transpose();\n  for (i in a) {\n    ci = [];\n    for (j in bt) {\n      ci.push(inner_product(a[i], bt[j]));\n    }\n    console.log(ci.join(\" \"));\n  }\n});\nfunction make_b_transpose() {\n  var j;\n  var k;\n  var bj;\n  bt = [];\n  for (j = 0; j < l; j++) {\n    bj = [];\n    for (k = 0; k < m; k++) {\n      bj.push(b[k][j]);\n    }\n    bt.push(bj);\n  }\n}\nfunction inner_product(a, b) {\n  var res = 0;\n  for (var i in a) {\n    res += a[i] * b[i];\n  }\n  return res;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7810851245891115, "ngram_match_score": 0.5803943418110865, "weighted_ngram_match_score": 0.6996347792998504, "syntax_match_score": 0.844311377245509, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0007289556742378078, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.044642857142857206, "new_decrease_halstead_effort": -0.044642857142857206}}
{"filename": "p02598_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['split']('\\x0a');const K=0x0|lines[0x0]['split']('\\x20')[0x1];let arr=new Int32Array(lines[0x1]['split']('\\x20'));let isOk=(t=0x0,k=0x0)=>{arr['forEach'](v=>{let d=0x0|v/t;if(v===d*t){d--;}k-=d;});return k>=0x0;};let l=0x0;let r=Math['max'](...arr);let mid=0x0|(r+l)*0.5;let res=r;while(l<r){if(isOk(mid,K)){res=mid;r=mid-0x1;}else{l=mid+0x1;}mid=0x0|(r+l)*0.5;}return res;}exports['main']=main;function Main(input){console['log'](main(input['trim']()));}if(process['argv'][0x2]!=='test'){Main(require('fs')['readFileSync']('/dev/stdin','utf8'));}", "test_cases": [["2 3\n7 9", "4"], ["3 0\n3 4 5", "5"], ["10 10\n158260522 877914575 602436426 24979445 861648772 623690081 433933447 476190629 262703497 211047202", "292638192"]], "original": "//解説参照済み\n\nfunction main(input) {\n    const lines = input.split(\"\\n\");\n    const K = 0 | lines[0].split(\" \")[1];\n    let arr = new Int32Array(lines[1].split(\" \"));\n\n    let isOk = (t = 0, k = 0) => {\n        arr.forEach((v) => {\n            let d = 0 | v / t;\n            if (v === d * t) { d--; }\n            k -= d;\n        })\n        return k >= 0;\n    }\n\n    let l = 0;\n    let r = Math.max(...arr);\n    let mid = 0 | (r + l) * 0.5;\n    let res = r;\n    while (l < r) {\n        if (isOk(mid, K)) {\n            res = mid;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n        mid = 0 | (r + l) * 0.5;\n    }\n    return res;\n}\n\n\n//******************************\nexports.main = main;\n\nfunction Main(input) {\n    console.log(main(input.trim()));\n}\n\nif (process.argv[2] !== \"test\") {\n    Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 484, "deobfuscated": "function main(input) {\n  const lines = input.split(\"\\n\");\n  const K = lines[0].split(\" \")[1] | 0;\n  let arr = new Int32Array(lines[1].split(\" \"));\n  let isOk = (t = 0, k = 0) => {\n    arr.forEach(v => {\n      let d = v / t | 0;\n      if (v === d * t) {\n        d--;\n      }\n      k -= d;\n    });\n    return k >= 0;\n  };\n  let l = 0;\n  let r = Math.max(...arr);\n  let mid = (r + l) * 0.5 | 0;\n  let res = r;\n  while (l < r) {\n    if (isOk(mid, K)) {\n      res = mid;\n      r = mid - 1;\n    } else {\n      l = mid + 1;\n    }\n    mid = (r + l) * 0.5 | 0;\n  }\n  return res;\n}\nexports.main = main;\nfunction Main(input) {\n  console.log(main(input.trim()));\n}\nif (process.argv[2] !== \"test\") {\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8261712393112527, "ngram_match_score": 0.7542125902663952, "weighted_ngram_match_score": 0.7609555774618264, "syntax_match_score": 0.803030303030303, "dataflow_match_score": 0.9864864864864865}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.025113912367228153}}
{"filename": "p02699_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');const S=parseInt(input[0x0]);const W=parseInt(input[0x1]);const ret=S<=W?'unsafe':'safe';console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5", "unsafe"], ["100 2", "safe"], ["10 10", "unsafe"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\" \");\n\tconst S = parseInt(input[0]);\n  const W = parseInt(input[1]);\n\n  const ret = (S <= W)? 'unsafe' : 'safe';\n  console.log(ret);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 485, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  const S = parseInt(input[0]);\n  const W = parseInt(input[1]);\n  const ret = S <= W ? \"unsafe\" : \"safe\";\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6933437118344066, "ngram_match_score": 0.4857031734630732, "weighted_ngram_match_score": 0.5069699194885883, "syntax_match_score": 0.8333333333333334, "dataflow_match_score": 0.9473684210526315}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02973_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]-0x0;var colors=[];var temp;var min,max,mid;for(var i=0x1;i<input['length'];i++){temp=input[i]-0x0;if(colors['length']===0x0){colors['push'](temp);continue;}if(temp<=colors[0x0]){colors['unshift'](temp);continue;}if(temp>colors[colors['length']-0x1]){colors[colors['length']-0x1]=temp;continue;}min=0x0;max=colors['length']-0x1;while(max-min>0x1){mid=Math['floor']((max+min)/0x2);if(colors[mid]<=temp){max=mid;}else{min=mid;}}colors[min]=temp;}console['log'](colors['length']);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n2\n1\n4\n5\n3", "2"], ["4\n0\n0\n0\n0", "4"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0]-0;\n  var colors=[];\n  var temp;\n  var min,max,mid;\n  for(var i=1;i<input.length;i++){\n    temp=input[i]-0;\n    if(colors.length===0){\n      colors.push(temp);\n      continue;\n    }\n    if(temp<=colors[0]){\n      colors.unshift(temp);\n      continue;\n    }\n    if(temp>colors[colors.length-1]){\n      colors[colors.length-1]=temp;\n      continue;\n    }\n    min=0;\n    max=colors.length-1;\n    while(max-min>1){\n      mid=Math.floor((max+min)/2);\n      if(colors[mid]<=temp){\n        max=mid;\n      }else{\n        min=mid;\n      }\n    }\n    colors[min]=temp;\n  }\n  console.log(colors.length);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 486, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0] - 0;\n  var colors = [];\n  var temp;\n  var min;\n  var max;\n  var mid;\n  for (var i = 1; i < input.length; i++) {\n    temp = input[i] - 0;\n    if (colors.length === 0) {\n      colors.push(temp);\n      continue;\n    }\n    if (temp <= colors[0]) {\n      colors.unshift(temp);\n      continue;\n    }\n    if (temp > colors[colors.length - 1]) {\n      colors[colors.length - 1] = temp;\n      continue;\n    }\n    min = 0;\n    max = colors.length - 1;\n    while (max - min > 1) {\n      mid = Math.floor((max + min) / 2);\n      if (colors[mid] <= temp) {\n        max = mid;\n      } else {\n        min = mid;\n      }\n    }\n    colors[min] = temp;\n  }\n  console.log(colors.length);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.522717125608592, "ngram_match_score": 0.031617507491273796, "weighted_ngram_match_score": 0.09025874688107859, "syntax_match_score": 0.9689922480620154, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005461666515752528, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.011904761904761862, "new_decrease_halstead_effort": -0.011904761904761862}}
{"filename": "p03067_1", "type": "JavaScript", "obfuscated": "function Main(input){var A=parseInt(input[0x0],0xa);var B=parseInt(input[0x1],0xa);var C=parseInt(input[0x2],0xa);if(A<B){if(A<C&&C<B){console['log']('Yes');}else{console['log']('No');}}else{if(B<C&&C<A){console['log']('Yes');}else{console['log']('No');}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/\\n|\\s/));", "test_cases": [["3 8 5", "Yes"], ["7 3 1", "No"], ["10 2 4", "Yes"], ["31 41 59", "No"]], "original": "\nfunction Main(input) {\n  // 数字\n  var A = parseInt(input[0], 10);\n  var B = parseInt(input[1], 10);\n  var C = parseInt(input[2], 10);\n  // 文字\n  // var A = input[0];\n\n  if (A < B) {\n    if (A < C && C < B) {\n      console.log('Yes');\n    } else {\n      console.log('No');\n    }\n  } else {\n    if (B < C && C < A) {\n      console.log('Yes');\n    } else {\n      console.log('No');\n    }\n  }\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 487, "deobfuscated": "function Main(input) {\n  var A = parseInt(input[0], 10);\n  var B = parseInt(input[1], 10);\n  var C = parseInt(input[2], 10);\n  if (A < B) {\n    if (A < C && C < B) {\n      console.log(\"Yes\");\n    } else {\n      console.log(\"No\");\n    }\n  } else if (B < C && C < A) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7886509249724335, "ngram_match_score": 0.6007371978385747, "weighted_ngram_match_score": 0.6171576412916656, "syntax_match_score": 0.9367088607594937, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03139_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split']('\\x20');var max=input[0x1]<input[0x2]?input[0x1]:input[0x2];var min=input[0x0]-input[0x1]>input[0x2]?0x0:input[0x2]-(input[0x0]-input[0x1]);console['log'](max+'\\x20'+min);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 3 5", "3 0"], ["10 7 5", "5 2"], ["100 100 100", "100 100"]], "original": "function main(input) {\n  input = input.split(\" \");\n  var max = input[1] < input[2] ? input[1] : input[2];\n  var min = input[0]-input[1] > input[2] ? 0 : input[2]-(input[0]-input[1]);\n  console.log(max + \" \" + min);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 488, "deobfuscated": "function main(input) {\n  input = input.split(\" \");\n  var max = input[1] < input[2] ? input[1] : input[2];\n  var min = input[0] - input[1] > input[2] ? 0 : input[2] - (input[0] - input[1]);\n  console.log(max + \" \" + min);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8942465838792392, "ngram_match_score": 0.7239277529841013, "weighted_ngram_match_score": 0.8530585825328554, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03149_1", "type": "JavaScript", "obfuscated": "function Main(input){tmp=input['split']('\\x20');a=0x0;b=0x0;c=0x0;d=0x0;for(var i=0x0;i<0x4;i++){if(tmp[i]=='1'){a=0x1;}if(tmp[i]=='9'){b=0x1;}if(tmp[i]=='7'){c=0x1;}if(tmp[i]=='4'){d=0x1;}}if(a==0x1&&b==0x1&&c==0x1&&d==0x1){console['log']('YES');}else{console['log']('NO');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 7 9 4", "YES"], ["1 9 7 4", "YES"], ["1 2 9 1", "NO"], ["4 9 0 8", "NO"]], "original": "function Main(input) {\n\ttmp = input.split(\" \");\n\ta=0;\n\tb=0;\n\tc=0;\n\td=0;\n\tfor ( var i = 0 ; i < 4 ; i++ ){\n\t\tif(tmp[i]==\"1\"){\n\t\t\ta=1;\n\t\t}\n\t\tif(tmp[i]==\"9\"){\n\t\t\tb=1;\n\t\t}\n\t\tif(tmp[i]==\"7\"){\n\t\t\tc=1;\n\t\t}\n\t\tif(tmp[i]==\"4\"){\n\t\t\td=1;\n\t\t}\n\t}\n\tif(a==1 && b==1 && c==1 && d==1){\n\t\tconsole.log(\"YES\");\n\t}else{\n\t\tconsole.log(\"NO\");\n\t}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 489, "deobfuscated": "function Main(input) {\n  tmp = input.split(\" \");\n  a = 0;\n  b = 0;\n  c = 0;\n  d = 0;\n  for (var i = 0; i < 4; i++) {\n    if (tmp[i] == \"1\") {\n      a = 1;\n    }\n    if (tmp[i] == \"9\") {\n      b = 1;\n    }\n    if (tmp[i] == \"7\") {\n      c = 1;\n    }\n    if (tmp[i] == \"4\") {\n      d = 1;\n    }\n  }\n  if (a == 1 && b == 1 && c == 1 && d == 1) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5890112287533191, "ngram_match_score": 0.12471653905845108, "weighted_ngram_match_score": 0.2313283759548253, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03475_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split'](/\\n/);const n=~~input['shift']();input=input['map'](v=>v['split'](/\\s/)['map'](x=>~~x));let ans='';for(let i=0x0;i<input['length'];i++){let time=0x0;let wait=0x0;for(let j=i;j<input['length'];j++){time+=time>input[j][0x1]?0x0:input[j][0x1]-time;time+=input[j][0x0];}ans+=time+'\\x0a';}ans+='0\\x0a';console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n6 5 1\n1 10 1", "12\n11\n0"], ["4\n12 24 6\n52 16 4\n99 2 2", "187\n167\n101\n0"], ["4\n12 13 1\n44 17 17\n66 4096 64", "4162\n4162\n4162\n0"]], "original": "\"use strict\";\n\nfunction main(input) {\n  //かかる秒数　開業からの運行開始　運行間隔\n  input = input.split(/\\n/);\n  const n = ~~input.shift();\n  input = input.map(v => v.split(/\\s/).map(x => ~~x));\n\n  //[[12, 13, 1], [44, 17, 17], [66, 4096, 64]]\n  let ans = \"\";\n  for (let i = 0; i < input.length; i++) {\n    let time = 0;\n    let wait = 0;\n    for (let j = i; j < input.length; j++) {\n      time += time > input[j][1] ? 0 : input[j][1] - time;\n      time += input[j][0];\n    }\n    ans += time + \"\\n\";\n  }\n\n  ans += \"0\\n\";\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 490, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(/\\n/);\n  const n = ~~input.shift();\n  input = input.map(v => v.split(/\\s/).map(x => ~~x));\n  let ans = \"\";\n  for (let i = 0; i < input.length; i++) {\n    let time = 0;\n    let wait = 0;\n    for (let j = i; j < input.length; j++) {\n      time += time > input[j][1] ? 0 : input[j][1] - time;\n      time += input[j][0];\n    }\n    ans += time + \"\\n\";\n  }\n  ans += \"0\\n\";\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9051610519951543, "ngram_match_score": 0.8028735333266537, "weighted_ngram_match_score": 0.8177706746539632, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03564_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');function Main(input){var tmp=input['split']('\\x0a');var line0=tmp[0x0]['split']('\\x20');var line1=tmp[0x1]['split']('\\x20');var n=Number(line0[0x0]);var k=Number(line1[0x0]);var ans=0x1;for(var i=0x1;i<=n;i++){if(ans<k)ans*=0x2;else ans+=k;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n3", "10"], ["10\n10", "76"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var tmp = input.split(\"\\n\");\n  var line0 = tmp[0].split(\" \");\n  var line1 = tmp[1].split(\" \");\n  //var line2 = tmp[2].split(\" \");\n  //var line3 = tmp[3].split(\" \");\n\n  var n = Number(line0[0]);\n  var k = Number(line1[0]);\n//  var b = Number(line0[2]);\n\n  var ans = 1;\n\n  //console.log( n+\" \"+ k +\" \"+ \" hoge \")\n  \n  for(var i=1; i <=n; i++){\n    if(ans < k) ans *= 2;\n    else ans += k;\n  }\n\n  console.log(ans);\n  \n  \n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 491, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nfunction Main(input) {\n  var tmp = input.split(\"\\n\");\n  var line0 = tmp[0].split(\" \");\n  var line1 = tmp[1].split(\" \");\n  var n = Number(line0[0]);\n  var k = Number(line1[0]);\n  var ans = 1;\n  for (var i = 1; i <= n; i++) {\n    if (ans < k) {\n      ans *= 2;\n    } else {\n      ans += k;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6628553318760062, "ngram_match_score": 0.35578424988250734, "weighted_ngram_match_score": 0.3865461685306086, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03699_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](input=>Number(input));var len=input[0x0];input['shift']();input['sort'](function(a,b){return a-b;});var sum=0x0;for(var i=0x0;i<input['length'];i++){sum+=input[i];}var count=0x0;while(sum%0xa==0x0&&sum!=0x0){sum-=input[count];count++;}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n5\n10\n15", "25"], ["3\n10\n10\n15", "35"], ["3\n10\n20\n30", "0"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map((input)=>Number(input));\n  var len = input[0];\n  input.shift();\n  input.sort(function(a,b){\n  \treturn a - b;\n  });\n  var sum = 0;\n  for(var i = 0; i < input.length; i++){\n    sum += input[i];\n  }\n  var count = 0;\n  while(sum % 10 == 0 && sum != 0){\n     sum -= input[count];\n    count++;\n  }\n  console.log(sum);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 492, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(input => Number(input));\n  var len = input[0];\n  input.shift();\n  input.sort(function (a, b) {\n    return a - b;\n  });\n  var sum = 0;\n  for (var i = 0; i < input.length; i++) {\n    sum += input[i];\n  }\n  var count = 0;\n  while (sum % 10 == 0 && sum != 0) {\n    sum -= input[count];\n    count++;\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8026797765682941, "ngram_match_score": 0.6030555928474032, "weighted_ngram_match_score": 0.7102276159898759, "syntax_match_score": 0.8974358974358975, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03730_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{let Nums=arg['split']('\\x0a')[0x0]['split']('\\x20')['map'](n=>Number(n));let A=Nums[0x0],B=Nums[0x1],C=Nums[0x2];let ans='NO';for(let i=0x1;i<=B;i++){if(A*i%B==C){ans='YES';}}console['log'](ans);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 5 1", "YES"], ["2 2 1", "NO"], ["1 100 97", "YES"], ["40 98 58", "YES"], ["77 42 36", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n  // とりあえず切り分け\n  let Nums = arg.split(\"\\n\")[0].split(\" \").map(n => Number(n));  \n  let A = Nums[0],B = Nums[1], C = Nums[2];\n  let ans = \"NO\";\n  // 解説見ての回答\n  for(let i = 1; i<= B; i++){\n  \tif(A*i % B == C){\n\t\tans = \"YES\"\n    }\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 493, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  let Nums = arg.split(\"\\n\")[0].split(\" \").map(n => Number(n));\n  let A = Nums[0];\n  let B = Nums[1];\n  let C = Nums[2];\n  let ans = \"NO\";\n  for (let i = 1; i <= B; i++) {\n    if (A * i % B == C) {\n      ans = \"YES\";\n    }\n  }\n  console.log(ans);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6900696803221388, "ngram_match_score": 0.3973016348187855, "weighted_ngram_match_score": 0.45528477877746176, "syntax_match_score": 0.9076923076923077, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03804_1", "type": "JavaScript", "obfuscated": "'use strict';const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const NM=input[0x0]['split']('\\x20')['map'](Number);const N=NM[0x0];const M=NM[0x1];const As=input['slice'](0x1,N+0x1);const Bs=input['slice'](N+0x1,N+M+0x1);for(let ax=0x0;ax<N-M;ax++){for(let ay=0x0;ay<N-M;ay++){let flag=!![];for(let bx=0x0;bx<M;bx++){for(let by=0x0;by<M;by++){if(As[ax+bx][ay+by]!==Bs[bx][by]){flag=![];break;}}if(!flag)break;}if(flag){console['log']('Yes');process['exit'](0x0);}}}console['log']('No');", "test_cases": [["3 2\n#.#\n.#.\n#.#\n#.\n.#", "Yes"], ["4 1\n....\n....\n....\n....\n#", "No"]], "original": "'use strict';\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nconst NM = input[0].split(' ').map(Number);\nconst N = NM[0];\nconst M = NM[1];\nconst As = input.slice(1, N + 1);\nconst Bs = input.slice(N + 1, N + M + 1);\n\nfor (let ax = 0; ax < N - M; ax++) {\n    for (let ay = 0; ay < N - M; ay++) {\n        let flag = true;\n        for (let bx = 0; bx < M; bx++) {\n            for (let by = 0; by < M; by++) {\n                if (As[ax + bx][ay + by] !== Bs[bx][by]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (!flag) break;\n        }\n\n        if (flag) {\n            console.log('Yes');\n            process.exit(0);\n        }\n    }\n}\nconsole.log('No');", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 494, "deobfuscated": "'use strict';\n\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nconst NM = input[0].split(\" \").map(Number);\nconst N = NM[0];\nconst M = NM[1];\nconst As = input.slice(1, N + 1);\nconst Bs = input.slice(N + 1, N + M + 1);\nfor (let ax = 0; ax < N - M; ax++) {\n  for (let ay = 0; ay < N - M; ay++) {\n    let flag = true;\n    for (let bx = 0; bx < M; bx++) {\n      for (let by = 0; by < M; by++) {\n        if (As[ax + bx][ay + by] !== Bs[bx][by]) {\n          flag = false;\n          break;\n        }\n      }\n      if (!flag) {\n        break;\n      }\n    }\n    if (flag) {\n      console.log(\"Yes\");\n      process.exit(0);\n    }\n  }\n}\nconsole.log(\"No\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.88129168181097, "ngram_match_score": 0.8718070051680753, "weighted_ngram_match_score": 0.8913393238242261, "syntax_match_score": 0.9310344827586207, "dataflow_match_score": 0.8309859154929577}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005213538927614003, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.030303030303030276, "new_decrease_halstead_effort": 0.1215686274509804}}
{"filename": "p02263_1", "type": "JavaScript", "obfuscated": "let content='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',buf=>{content+=buf;});process['stdin']['on']('end',()=>{const stack=[];const tokens=content['trim']()['split']('\\x20')['map'](line=>{const num=parseInt(line,0xa);return isNaN(num)?line:num;});const opTokens='+-/*'['split']('');for(const token of tokens){if(opTokens['includes'](token)){const b=stack['pop']();const a=stack['pop']();stack['push'](expr(token,a,b));}else{stack['push'](token);}}console['log'](stack['pop']());});const expr=(op,a,b)=>{switch(op){case'*':return a*b;case'/':return a/b;case'+':return a+b;case'-':return a-b;}};", "test_cases": [["1 2 +", "3"], ["1 2 + 3 4 - *", "-3"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\n\nprocess.stdin.on('end', () => {\n  const stack = [];\n  const tokens = content\n    .trim()\n    .split(' ')\n    .map(line => {\n      const num = parseInt(line, 10);\n      return isNaN(num) ? line : num;\n    });\n\n  const opTokens = '+-/*'.split('');\n  for (const token of tokens) {\n    if (opTokens.includes(token)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(expr(token, a, b));\n    } else {\n      stack.push(token);\n    }\n\n  }\n\n  console.log(stack.pop());\n});\n\nconst expr = (op, a, b) => {\n  switch(op) {\n    case '*':\n      return a * b;\n    case '/':\n      return a / b;\n    case '+':\n      return a + b;\n    case '-':\n      return a - b;\n  }\n};\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 495, "deobfuscated": "let content = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", buf => {\n  content += buf;\n});\nprocess.stdin.on(\"end\", () => {\n  const stack = [];\n  const tokens = content.trim().split(\" \").map(line => {\n    const num = parseInt(line, 10);\n    if (isNaN(num)) {\n      return line;\n    } else {\n      return num;\n    }\n  });\n  const opTokens = \"+-/*\".split(\"\");\n  for (const token of tokens) {\n    if (opTokens.includes(token)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(expr(token, a, b));\n    } else {\n      stack.push(token);\n    }\n  }\n  console.log(stack.pop());\n});\nconst expr = (op, a, b) => {\n  switch (op) {\n    case \"*\":\n      return a * b;\n    case \"/\":\n      return a / b;\n    case \"+\":\n      return a + b;\n    case \"-\":\n      return a - b;\n  }\n};\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7752550207200612, "ngram_match_score": 0.646452987850955, "weighted_ngram_match_score": 0.6777065413081825, "syntax_match_score": 0.889763779527559, "dataflow_match_score": 0.8870967741935484}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02609_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');(input=>{const lines=input['split']('\\x0a');const N=lines[0x0]-0x0;const X=lines[0x1];const popcount=n=>{let count=0x0;do{n&0x1?count++:count;}while(n=n>>>0x1);return count;};const f=n=>{if(n===0x0){return 0x0;}let count=0x1;while(n%=popcount(n))count++;return count;};const x=parseInt(X,0x2);const pr=popcount(x)-0x1;const nx=popcount(x)+0x1;for(let i=0x0;i<N;i++){let n=x^Math['pow'](0x2,N-i-0x1);if(n===0x0){console['log'](0x0);}else{console['log'](f(n%(X[i]==='1'?pr:nx))+0x1);}}})(input);", "test_cases": [["3\n011", "2\n1\n1"], ["23\n00110111001011011001110", "2\n1\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n3"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n\n    const lines = input.split('\\n')\n    const N = lines[0] - 0\n    const X = lines[1]\n\n    const popcount = n => {\n        let count = 0\n        do {\n            n & 1 ? count++ : count\n        } while  (n = n >>> 1)\n        return count\n    }\n\n    const f = n => {\n        if (n === 0) {\n            return 0\n        }\n        let count = 1\n        while (n %= popcount(n)) count++\n        return count\n    }\n\n    const x = parseInt(X, 2)\n    const pr = popcount(x) - 1\n    const nx = popcount(x) + 1\n    for (let i = 0; i < N; i++) {\n        let n = x ^ Math.pow(2, N - i - 1)\n        if (n === 0) {\n            console.log(0)\n        } else {\n            console.log(f(n % (X[i] === '1' ? pr : nx)) + 1)\n        }\n    }\n\n})(input)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 496, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n(input => {\n  const lines = input.split(\"\\n\");\n  const N = lines[0] - 0;\n  const X = lines[1];\n  const popcount = n => {\n    let count = 0;\n    do {\n      if (n & 1) {\n        count++;\n      } else {\n        count;\n      }\n    } while (n = n >>> 1);\n    return count;\n  };\n  const f = n => {\n    if (n === 0) {\n      return 0;\n    }\n    let count = 1;\n    while (n %= popcount(n)) {\n      count++;\n    }\n    return count;\n  };\n  const x = parseInt(X, 2);\n  const pr = popcount(x) - 1;\n  const nx = popcount(x) + 1;\n  for (let i = 0; i < N; i++) {\n    let n = x ^ Math.pow(2, N - i - 1);\n    if (n === 0) {\n      console.log(0);\n    } else {\n      console.log(f(n % (X[i] === \"1\" ? pr : nx)) + 1);\n    }\n  }\n})(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.74630710565754, "ngram_match_score": 0.5555470879133378, "weighted_ngram_match_score": 0.5920744971099843, "syntax_match_score": 0.8376068376068376, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02925_1", "type": "JavaScript", "obfuscated": "'use strict';function main(stdin){const input=stdin['split']('\\x0a');const N=Number(input['shift']());const params=input['map'](p=>p['split']('\\x20')['map'](v=>parseInt(v,0xa)));console['log'](solve(params));}function solve(params){const l=params['length'];function matching(){let matched=![];for(let i=0x0;i<l;++i){const op=params[i][cur[i]]-0x1;if(isNaN(op))continue;if(params[op][cur[op]]-0x1===i){matched=!![];++cur[i];++cur[op];}}return matched;}function isNotCompleted(){return cur['some'](v=>v<l-0x1);}const cur=[];for(let i=0x0;i<l;++i){cur[i]=0x0;}let day=0x1;while(isNotCompleted()){const res=matching();if(res===![])return-0x1;++day;}return day;}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n2 3\n1 3\n1 2", "3"], ["4\n2 3 4\n1 3 4\n4 1 2\n3 1 2", "4"], ["3\n2 3\n3 1\n1 2", "-1"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  const N = Number(input.shift());\n  const params = input.map(p => p.split(' ').map(v => parseInt(v, 10)));\n  \n  console.log(solve(params));\n}\n\nfunction solve(params) {\n  const l = params.length;\n\n  function matching() {\n    let matched = false;\n\n    for (let i = 0; i < l; ++i) {\n      const op = params[i][cur[i]] - 1;\n      if (isNaN(op)) continue;\n      if (params[op][cur[op]] - 1 === i) {\n        matched = true;\n        ++cur[i];\n        ++cur[op];\n      }\n    }\n\n    return matched;\n  }\n\n  function isNotCompleted() {\n    return cur.some(v => v < l - 1);\n  }\n\n  const cur = [];\n  for (let i = 0; i < l; ++i) {\n    cur[i] = 0;\n  }\n\n  let day = 1;\n  while (isNotCompleted()) {\n    const res = matching();\n    if (res === false) return -1;\n    ++day;\n  }\n\n  return day;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 497, "deobfuscated": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split(\"\\n\");\n  const N = Number(input.shift());\n  const params = input.map(p => p.split(\" \").map(v => parseInt(v, 10)));\n  console.log(solve(params));\n}\nfunction solve(params) {\n  const l = params.length;\n  function matching() {\n    let matched = false;\n    for (let i = 0; i < l; ++i) {\n      const op = params[i][cur[i]] - 1;\n      if (isNaN(op)) {\n        continue;\n      }\n      if (params[op][cur[op]] - 1 === i) {\n        matched = true;\n        ++cur[i];\n        ++cur[op];\n      }\n    }\n    return matched;\n  }\n  function isNotCompleted() {\n    return cur.some(v => v < l - 1);\n  }\n  const cur = [];\n  for (let i = 0; i < l; ++i) {\n    cur[i] = 0;\n  }\n  let day = 1;\n  while (isNotCompleted()) {\n    const res = matching();\n    if (res === false) {\n      return -1;\n    }\n    ++day;\n  }\n  return day;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9028812419634635, "ngram_match_score": 0.8692586933560024, "weighted_ngram_match_score": 0.9002704325020098, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 0.918918918918919}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00786236017637143, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04069767441860461, "new_decrease_halstead_effort": 0.13893072257631722}}
{"filename": "p03111_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['trim']()['split']('\\x0a');let ABC=input['shift']()['split']('\\x20')['map'](v=>Number(v));const N=ABC['shift']();input=input['map'](v=>Number(v))['sort']((a,b)=>b-a);const INF=Math['pow'](0xa,0x9);const dfs=(cur,a,b,c)=>{if(cur===N){if(Math['min'](a,b,c)>0x0){return Math['abs'](a-ABC[0x0])+Math['abs'](b-ABC[0x1])+Math['abs'](c-ABC[0x2])-0x1e;}return INF;}return Math['min'](dfs(cur+0x1,a,b,c),dfs(cur+0x1,a+input[cur],b,c)+0xa,dfs(cur+0x1,a,b+input[cur],c)+0xa,dfs(cur+0x1,a,b,c+input[cur])+0xa);};console['log'](dfs(0x0,0x0,0x0,0x0));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 100 90 80\n98\n40\n30\n21\n80", "23"], ["8 100 90 80\n100\n100\n90\n90\n90\n80\n80\n80", "0"], ["8 1000 800 100\n300\n333\n400\n444\n500\n555\n600\n666", "243"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  let ABC = input.shift().split(' ').map(v => Number(v))\n  const N = ABC.shift()\n  input = input.map(v => Number(v)).sort((a, b) => b - a)\n  const INF = Math.pow(10, 9)\n\n  const dfs = (cur, a, b, c) => {\n    if (cur === N) {\n      if (Math.min(a, b, c) > 0) {\n        return Math.abs(a - ABC[0]) + Math.abs(b - ABC[1]) + Math.abs(c - ABC[2]) - 30\n      }\n      return INF\n    }\n    return Math.min(\n      dfs(cur+1, a, b, c),\n      dfs(cur+1, a + input[cur], b, c) + 10,\n      dfs(cur+1, a, b + input[cur], c) + 10,\n      dfs(cur+1, a, b, c + input[cur]) + 10\n    )\n  }\n  console.log(dfs(0,0,0,0))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 498, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  let ABC = input.shift().split(\" \").map(v => Number(v));\n  const N = ABC.shift();\n  input = input.map(v => Number(v)).sort((a, b) => b - a);\n  const INF = Math.pow(10, 9);\n  const dfs = (cur, a, b, c) => {\n    if (cur === N) {\n      if (Math.min(a, b, c) > 0) {\n        return Math.abs(a - ABC[0]) + Math.abs(b - ABC[1]) + Math.abs(c - ABC[2]) - 30;\n      }\n      return INF;\n    }\n    return Math.min(dfs(cur + 1, a, b, c), dfs(cur + 1, a + input[cur], b, c) + 10, dfs(cur + 1, a, b + input[cur], c) + 10, dfs(cur + 1, a, b, c + input[cur]) + 10);\n  };\n  console.log(dfs(0, 0, 0, 0));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7911101842539218, "ngram_match_score": 0.5739452436492417, "weighted_ngram_match_score": 0.6317326067685072, "syntax_match_score": 1.0, "dataflow_match_score": 0.9587628865979382}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03172_1", "type": "JavaScript", "obfuscated": "'use strict';const mod=0x3b9aca00+0x7;function solve(N,K,A){if(K===0x0){return 0x1;}var dp=new Array(K+0x1)['fill'](0x0);var prefix=new Array(N)['fill'](0x0)['map'](e=>new Array(K+0x1)['fill'](0x0));for(var i=N-0x1;i>=0x0;i--){for(var j=0x0;j<=K;j++){if(i===N-0x1){dp[j]=j<=A[i]?0x1:0x0;prefix[i][j]=j-0x1>=0x0?prefix[i][j-0x1]%mod+dp[j]%mod:dp[j]%mod;}else{dp[j]=j<=A[i]?prefix[i+0x1][j]%mod:prefix[i+0x1][j]%mod-prefix[i+0x1][j-A[i]-0x1]%mod;prefix[i][j]=j-0x1>=0x0?prefix[i][j-0x1]%mod+dp[j]%mod:dp[j]%mod;}}}return dp[K]%mod;}function main(input){var lines=input['split']('\\x0a');var NK=lines[0x0]['split']('\\x20')['map'](l=>parseInt(l));var N=NK[0x0];var K=NK[0x1];var A=lines[0x1]['split']('\\x20')['map'](l=>parseInt(l));var ans=solve(N,K,A);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4\n1 2 3", "5"], ["1 10\n9", "0"], ["2 0\n0 0", "1"], ["4 100000\n100000 100000 100000 100000", "665683269"]], "original": "'use strict'\n\nconst mod = 1e9 + 7\n\nfunction solve(N, K, A) {\n  if (K === 0) {\n    return 1\n  }\n  var dp = new Array(K+1).fill(0)\n  var prefix = new Array(N).fill(0).map(e => new Array(K+1).fill(0))\n\n  for (var i = N-1; i >= 0; i--) {\n    for (var j = 0; j <= K; j++) {\n      if (i === (N-1)) {\n        dp[j] = j <= A[i] ? 1 : 0\n        prefix[i][j] = (j - 1) >= 0 ? (prefix[i][j-1] % mod) + (dp[j] % mod) : dp[j] % mod\n      } else {\n        dp[j] = j <= A[i] ? prefix[i+1][j] % mod : (prefix[i+1][j] % mod) - (prefix[i+1][j - A[i] - 1] % mod)\n        prefix[i][j] = (j - 1) >= 0 ? (prefix[i][j-1] % mod) + (dp[j] % mod) : dp[j] % mod\n      }\n    }\n  }\n  return dp[K] % mod\n}\n\nfunction main(input) {\n  var lines = input.split(\"\\n\")\n  var NK = lines[0].split(' ').map(l => parseInt(l))\n  var N = NK[0]\n  var K = NK[1]\n  var A = lines[1].split(' ').map(l => parseInt(l))\n  var ans = solve(N, K, A)\n  console.log(ans)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 499, "deobfuscated": "'use strict';\n\nconst mod = 1000000007;\nfunction solve(N, K, A) {\n  if (K === 0) {\n    return 1;\n  }\n  var dp = new Array(K + 1).fill(0);\n  var prefix = new Array(N).fill(0).map(e => new Array(K + 1).fill(0));\n  for (var i = N - 1; i >= 0; i--) {\n    for (var j = 0; j <= K; j++) {\n      if (i === N - 1) {\n        dp[j] = j <= A[i] ? 1 : 0;\n        prefix[i][j] = j - 1 >= 0 ? prefix[i][j - 1] % mod + dp[j] % mod : dp[j] % mod;\n      } else {\n        dp[j] = j <= A[i] ? prefix[i + 1][j] % mod : prefix[i + 1][j] % mod - prefix[i + 1][j - A[i] - 1] % mod;\n        prefix[i][j] = j - 1 >= 0 ? prefix[i][j - 1] % mod + dp[j] % mod : dp[j] % mod;\n      }\n    }\n  }\n  return dp[K] % mod;\n}\nfunction main(input) {\n  var lines = input.split(\"\\n\");\n  var NK = lines[0].split(\" \").map(l => parseInt(l));\n  var N = NK[0];\n  var K = NK[1];\n  var A = lines[1].split(\" \").map(l => parseInt(l));\n  var ans = solve(N, K, A);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5584703515014675, "ngram_match_score": 0.453652534279166, "weighted_ngram_match_score": 0.5052189075975689, "syntax_match_score": 0.8134715025906736, "dataflow_match_score": 0.46153846153846156}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.007407407407407418, "new_decrease_halstead_effort": -0.012396217381053232}}
{"filename": "p03196_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');l=inp['shift']()['split']('\\x20');N=l['shift']()*0x1;P=l['shift']()*0x1;_primFactors=function(n){var arr=[];if(n==0x1){return[{'n':0x1,'r':0x1}];}s=n;var i=0x2;r=0x0;if(n%i===0x0){do{r++;n/=i;}while(n%i===0x0);arr['push']({'n':i,'r':r});}for(i=0x3;i*i<=s;i+=0x2){r=0x0;if(n%i===0x0){do{r++;n/=i;}while(n%i===0x0);arr['push']({'n':i,'r':r});}}if(n>0x1){arr['push']({'n':n,'r':0x1});}return arr;};arr=_primFactors(P);ans=0x1;for(i=0x0;i<arr['length'];i++){a=arr[i];r=a['r'];while(r>=N){ans*=a['n'];r-=N;}}console['log'](ans);", "test_cases": [["3 24", "2"], ["5 1", "1"], ["1 111", "111"], ["4 972439611840", "206"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\nN = l.shift() * 1\nP = l.shift() * 1\n\n// 素因数分解\n_primFactors = function(n) {\n  var arr = []\n  if (n == 1) {\n      return [{n:1, r:1}]\n  }\n  s = n\n\n  var i = 2\n  r = 0\n  if (n % i === 0) {\n    do {\n      r++\n      n /= i\n    } while(n%i===0)\n    arr.push({n: i, r: r})\n  }\n  \n  for (i = 3; i*i <= s; i+=2) {\n    r = 0\n    if (n % i === 0) {\n       do {\n           r++\n           n /= i\n       } while(n%i===0)\n       arr.push({n: i, r: r})\n    }\n  }\n  if (n > 1) {\n      arr.push({n: n, r: 1})\n  }\n  return arr\n}\n\narr = _primFactors(P)\nans = 1\nfor (i=0; i<arr.length;i++) {\n    a = arr[i]\n    r = a.r\n    while (r>=N) {\n        ans *= a.n\n        r -= N\n    }\n}\nconsole.log(ans)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 500, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nl = inp.shift().split(\" \");\nN = l.shift() * 1;\nP = l.shift() * 1;\n_primFactors = function (n) {\n  var arr = [];\n  if (n == 1) {\n    return [{\n      n: 1,\n      r: 1\n    }];\n  }\n  s = n;\n  var i = 2;\n  r = 0;\n  if (n % i === 0) {\n    do {\n      r++;\n      n /= i;\n    } while (n % i === 0);\n    arr.push({\n      n: i,\n      r: r\n    });\n  }\n  for (i = 3; i * i <= s; i += 2) {\n    r = 0;\n    if (n % i === 0) {\n      do {\n        r++;\n        n /= i;\n      } while (n % i === 0);\n      arr.push({\n        n: i,\n        r: r\n      });\n    }\n  }\n  if (n > 1) {\n    arr.push({\n      n: n,\n      r: 1\n    });\n  }\n  return arr;\n};\narr = _primFactors(P);\nans = 1;\nfor (i = 0; i < arr.length; i++) {\n  a = arr[i];\n  r = a.r;\n  while (r >= N) {\n    ans *= a.n;\n    r -= N;\n  }\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6640737922621618, "ngram_match_score": 0.2924410112298098, "weighted_ngram_match_score": 0.36385415781883745, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.006418909059015543, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05551287862403109}}
{"filename": "p03265_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{var abcd=lines[0x0]['split']('\\x20');var one=Number(abcd[0x0]);var two=Number(abcd[0x1]);var three=Number(abcd[0x2]);var four=Number(abcd[0x3]);var ans=[];ans['push'](three+(two-four));ans['push'](three+four-one);ans['push'](one+two-four);ans['push'](three+two-one);console['log'](ans['join']('\\x20'));});", "test_cases": [["0 0 0 1", "-1 1 -1 0"], ["2 3 6 6", "3 10 -1 7"], ["31 -41 -59 26", "-126 -64 -36 -131"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = []\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on('line', (line) => {\n  lines.push(line);\n});\n\nreader.on('close', () => {\n var abcd = lines[0].split(' ');\n var one = Number(abcd[0]);\n var two = Number(abcd[1]);\n var three = Number(abcd[2]);\n var four = Number(abcd[3]);\n\n var ans = [];\n ans.push(three + (two - four));\n ans.push((three + four) - one);\n ans.push((one + two) - four);\n ans.push((three + two) - one);\n\n console.log(ans.join(' '));\n \n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 501, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  var abcd = lines[0].split(\" \");\n  var one = Number(abcd[0]);\n  var two = Number(abcd[1]);\n  var three = Number(abcd[2]);\n  var four = Number(abcd[3]);\n  var ans = [];\n  ans.push(three + (two - four));\n  ans.push(three + four - one);\n  ans.push(one + two - four);\n  ans.push(three + two - one);\n  console.log(ans.join(\" \"));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7211952221955122, "ngram_match_score": 0.5466912571600125, "weighted_ngram_match_score": 0.5580258357687667, "syntax_match_score": 0.7982456140350878, "dataflow_match_score": 0.9818181818181818}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03598_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');var ballXList=input[0x2]['split']('\\x20');var ret=0x0;for(var i=0x0;i<input[0x0];i++){var aDistance=ballXList[i];var bDistance=input[0x1]-ballXList[i];var ret=ret+(aDistance<bDistance?aDistance:bDistance)*0x2;}console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1\n10\n2", "4"], ["2\n9\n3 6", "12"], ["5\n20\n11 12 9 17 12", "74"]], "original": "function Main(input) {\n  var input = input.split('\\n');\n\n  var ballXList = input[2].split(' ');\n  var ret = 0;\n  for (var i = 0; i < input[0]; i++) {\n    var aDistance = ballXList[i];\n    var bDistance = input[1] - ballXList[i];\n    var ret = ret + (aDistance < bDistance ? aDistance : bDistance) * 2;\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 502, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var ballXList = input[2].split(\" \");\n  var ret = 0;\n  for (var i = 0; i < input[0]; i++) {\n    var aDistance = ballXList[i];\n    var bDistance = input[1] - ballXList[i];\n    var ret = ret + (aDistance < bDistance ? aDistance : bDistance) * 2;\n  }\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9440776691775715, "ngram_match_score": 0.8858241416822492, "weighted_ngram_match_score": 0.8904865350280369, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03767_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const params=input['trim']()['split']('\\x0a');const N=Number(params[0x0]['trim']());const sortedA=params[0x1]['trim']()['split']('\\x20')['map'](Number)['sort']((a,b)=>b-a);let total=0x0;for(let i=0x0;i<N;i++){total+=sortedA[i*0x2+0x1];}console['log'](total);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n5 2 8 5 1 5", "10"], ["10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "10000000000"]], "original": "// https://atcoder.jp/contests/agc012/tasks/agc012_a\n\"use strict\";\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const sortedA = params[1]\n    .trim()\n    .split(\" \")\n    .map(Number)\n    .sort((a, b) => b - a);\n\n  let total = 0;\n  for (let i = 0; i < N; i++) {\n    total += sortedA[i * 2 + 1];\n  }\n\n  console.log(total);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 503, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const sortedA = params[1].trim().split(\" \").map(Number).sort((a, b) => b - a);\n  let total = 0;\n  for (let i = 0; i < N; i++) {\n    total += sortedA[i * 2 + 1];\n  }\n  console.log(total);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8752428348264145, "ngram_match_score": 0.7418510457352449, "weighted_ngram_match_score": 0.7591202935704134, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03785_1", "type": "JavaScript", "obfuscated": "function Main(s){var s=s['split']('\\x0a');var zero=s[0x0]['split']('\\x20')['map'](e=>parseInt(e,0xa));var t=s['slice'](0x1)['map'](e=>parseInt(e,0xa))['sort']((a,b)=>a-b);var cnt=0x1;var c=zero[0x1];for(var i=0x1;i<zero[0x0];i++){if(t[i-0x1]<=t[i]&&t[i]<=t[i-0x1]+zero[0x2]){c--;if(c===0x0){cnt++;c=zero[0x1];}}else{cnt++;c=zero[0x1];}}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3 5\n1\n2\n3\n6\n12", "3"], ["6 3 3\n7\n6\n2\n8\n10\n6", "3"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var zero = s[0].split(\" \").map(e => parseInt(e, 10));\n  var t = s.slice(1).map(e => parseInt(e, 10)).sort((a, b) => a - b);\n  var cnt = 1;\n  var c = zero[1];\n  for (var i = 1; i < zero[0]; i++) {\n    if (t[i - 1] <= t[i] && t[i] <= t[i - 1] + zero[2]) {\n      c--;\n      if (c === 0) {\n        cnt++;\n        c = zero[1];\n      }\n    } else {\n      cnt++;\n      c = zero[1];\n    }\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 504, "deobfuscated": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var zero = s[0].split(\" \").map(e => parseInt(e, 10));\n  var t = s.slice(1).map(e => parseInt(e, 10)).sort((a, b) => a - b);\n  var cnt = 1;\n  var c = zero[1];\n  for (var i = 1; i < zero[0]; i++) {\n    if (t[i - 1] <= t[i] && t[i] <= t[i - 1] + zero[2]) {\n      c--;\n      if (c === 0) {\n        cnt++;\n        c = zero[1];\n      }\n    } else {\n      cnt++;\n      c = zero[1];\n    }\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02257_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);Arr['shift']();Arr['sort'](function(a,b){return a-b;});var max=Arr[Arr['length']-0x1];var arr=[0x2];for(var i=0x3;i<=max;i=i+0x2){var a=!![];var sqrt=~~Math['sqrt'](i)+0x1;for(var j=0x0;j<arr['length'];j++){if(arr[j]>sqrt)break;if(i%arr[j]==0x0){a=![];break;}}if(a)arr['push'](i);}var num=0x0;var f=0x0;for(var i=0x0;i<Arr['length'];i++){if(Arr[i]!=0x2&&Arr[i]%0x2==0x0)continue;var index=arr['indexOf'](Arr[i],f);if(index!=-0x1){f=index;num++;}}console['log'](num);", "test_cases": [["5\n2\n3\n4\n5\n6", "3"], ["11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n \nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nArr.shift();\nArr.sort(function(a,b){return a-b;});\nvar max=Arr[Arr.length-1];\nvar arr=[2];\n \nfor(var i=3;i<=max;i=i+2){\n   var a=true;\n   var sqrt=~~(Math.sqrt(i))+1;\n   for(var j=0;j<arr.length;j++){\n      if(arr[j]>sqrt)break;\n      if(i%arr[j]==0){\n         a=false;\n         break;\n      }\n   }\n   if(a)arr.push(i);\n}\n \nvar num=0;\nvar f=0;\n \nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]!=2 && Arr[i]%2==0)continue;\n   var index=arr.indexOf(Arr[i],f);\n   if(index!=-1){\n      f=index;\n      num++;\n   }\n}\nconsole.log(num);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 505, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nArr.shift();\nArr.sort(function (a, b) {\n  return a - b;\n});\nvar max = Arr[Arr.length - 1];\nvar arr = [2];\nfor (var i = 3; i <= max; i = i + 2) {\n  var a = true;\n  var sqrt = ~~Math.sqrt(i) + 1;\n  for (var j = 0; j < arr.length; j++) {\n    if (arr[j] > sqrt) {\n      break;\n    }\n    if (i % arr[j] == 0) {\n      a = false;\n      break;\n    }\n  }\n  if (a) {\n    arr.push(i);\n  }\n}\nvar num = 0;\nvar f = 0;\nfor (var i = 0; i < Arr.length; i++) {\n  if (Arr[i] != 2 && Arr[i] % 2 == 0) {\n    continue;\n  }\n  var index = arr.indexOf(Arr[i], f);\n  if (index != -1) {\n    f = index;\n    num++;\n  }\n}\nconsole.log(num);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4969916489631803, "ngram_match_score": 0.03757662819705585, "weighted_ngram_match_score": 0.12463239189808964, "syntax_match_score": 0.8257575757575758, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02617801047120416, "new_decrease_halstead_effort": 0.09197679354747423}}
{"filename": "p02267_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0],0xa);var q=parseInt(input[0x2],0xa);input[0x1]=input[0x1]['split']('\\x20');input[0x3]=input[0x3]['split']('\\x20');var s=Array(n),t=Array(q);for(var i=0x0;i<n;i++){s[i]=parseInt(input[0x1][i],0xa);}for(var i=0x0;i<q;i++){t[i]=parseInt(input[0x3][i],0xa);}var count=0x0;for(var i=0x0;i<q;i++){var j;for(j=0x0;j<n;j++){if(s[j]==t[i])break;}if(j<n)count++;}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 2 3 4 5\n3\n3 4 1", "3"], ["3\n3 1 2\n1\n5", "0"], ["5\n1 1 2 2 3\n2\n1 2", "2"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0],10);\n    var q = parseInt(input[2],10);\n    input[1] = input[1].split(\" \");\n    input[3] = input[3].split(\" \");\n    var s = Array(n),t = Array(q);\n    for(var i = 0;i < n;i++){\n        s[i] = parseInt(input[1][i],10);\n    }\n    for(var i = 0;i < q;i++){\n        t[i] = parseInt(input[3][i],10);\n    }\n    var count = 0;\n\n    for(var i = 0;i < q;i++){\n        var j;\n        for(j = 0;j < n;j++){\n           if(s[j] == t[i])\n                break;\n        }\n        if(j < n)\n            count++;\n    }\n    console.log(count);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 506, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var q = parseInt(input[2], 10);\n  input[1] = input[1].split(\" \");\n  input[3] = input[3].split(\" \");\n  var s = Array(n);\n  var t = Array(q);\n  for (var i = 0; i < n; i++) {\n    s[i] = parseInt(input[1][i], 10);\n  }\n  for (var i = 0; i < q; i++) {\n    t[i] = parseInt(input[3][i], 10);\n  }\n  var count = 0;\n  for (var i = 0; i < q; i++) {\n    var j;\n    for (j = 0; j < n; j++) {\n      if (s[j] == t[i]) {\n        break;\n      }\n    }\n    if (j < n) {\n      count++;\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6268899896521306, "ngram_match_score": 0.24490216816637175, "weighted_ngram_match_score": 0.34961431218128125, "syntax_match_score": 0.9130434782608695, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0002647732053685514, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.006250000000000089, "new_decrease_halstead_effort": -0.006249999999999867}}
{"filename": "p02410_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split'](/\\n/g);var n=+lines[0x0]['split']('\\x20')[0x0];var m=+lines[0x0]['split']('\\x20')[0x1];var A=lines['slice'](0x1,m);var b=lines['slice'](m,m+m);var ans;for(var i=0x0;i<n;i++){ans=0x0;for(var j=0x0;j<m;j++){ans+=A[i]['split']('\\x20')[j]*b[j];}console['log'](ans);}", "test_cases": [["3 4\n1 2 0 1\n0 3 0 1\n4 1 1 0\n1\n2\n3\n0", "5\n6\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar lines = (input.trim()).split(/\\n/g);\nvar n = +lines[0].split(' ')[0];\nvar m = +lines[0].split(' ')[1];\n\nvar A = lines.slice(1, m);\nvar b = lines.slice(m, m + m);\n\nvar ans;\nfor (var i = 0; i < n; i++) {\n    ans = 0;\n    for (var j = 0; j < m; j++) {\n        ans += A[i].split(' ')[j] * b[j];\n    }\n    console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 507, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(/\\n/g);\nvar n = +lines[0].split(\" \")[0];\nvar m = +lines[0].split(\" \")[1];\nvar A = lines.slice(1, m);\nvar b = lines.slice(m, m + m);\nvar ans;\nfor (var i = 0; i < n; i++) {\n  ans = 0;\n  for (var j = 0; j < m; j++) {\n    ans += A[i].split(\" \")[j] * b[j];\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8418252227897349, "ngram_match_score": 0.7326426275099002, "weighted_ngram_match_score": 0.7429167146546022, "syntax_match_score": 0.926829268292683, "dataflow_match_score": 0.9649122807017544}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02412_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\n/);for(let i=0x0;i<input['length'];i++){let [n,x]=input[i]['split']('\\x20')['map'](Number);if(n===0x0&&x===0x0){break;}let count=0x0;for(let j=0x1;j<=n;j++){for(let k=0x1;k<=n;k++){if(j===k){break;}for(let l=0x1;l<=n;l++){if(j===l||k===l||j===k){break;}if(j+k+l===x){count++;}}}}console['log'](count);}", "test_cases": [["5 9\n0 0", "2"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/);\nfor (let i = 0; i < input.length; i++) {\n    let [n, x] = input[i].split(' ').map(Number);\n    if (n === 0 && x === 0) {\n        break;\n    }\n    let count = 0;\n    for (let j = 1; j <= n; j++) {\n        for (let k = 1; k <= n; k++) {\n             if (j === k) {\n                 break;\n             }\n            for (let l = 1; l <= n; l++)  {\n               if (j === l || k === l || j === k) {\n                   break;\n               }\n               if (j + k + l === x) {\n                  count++;\n               }\n           }\n        }\n    }\n    console.log(count)\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 508, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\n/);\nfor (let i = 0; i < input.length; i++) {\n  let [n, x] = input[i].split(\" \").map(Number);\n  if (n === 0 && x === 0) {\n    break;\n  }\n  let count = 0;\n  for (let j = 1; j <= n; j++) {\n    for (let k = 1; k <= n; k++) {\n      if (j === k) {\n        break;\n      }\n      for (let l = 1; l <= n; l++) {\n        if (j === l || k === l || j === k) {\n          break;\n        }\n        if (j + k + l === x) {\n          count++;\n        }\n      }\n    }\n  }\n  console.log(count);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9485830752770488, "ngram_match_score": 0.913978818554036, "weighted_ngram_match_score": 0.9173905195911966, "syntax_match_score": 1.0, "dataflow_match_score": 0.9629629629629629}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02748_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const A=parseInt(arg[0x0]['split']('\\x20')[0x0]);const B=parseInt(arg[0x0]['split']('\\x20')[0x0]);const M=parseInt(arg[0x0]['split']('\\x20')[0x0]);const freezer=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n));const renzi=arg[0x2]['split']('\\x20')['map'](n=>parseInt(n));const xyc=arg['slice'](0x3,M+0x4);const minFreeze=Math['min'](...freezer);const minRenzi=Math['min'](...renzi);let temp=minFreeze+minRenzi;for(let i in xyc){let x=parseInt(xyc[i]['split']('\\x20')[0x0]);let y=parseInt(xyc[i]['split']('\\x20')[0x1]);let c=parseInt(xyc[i]['split']('\\x20')[0x2]);let cost=freezer[x-0x1]+renzi[y-0x1]-c;if(cost<=temp){temp=cost;}}console['log'](temp);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 1\n3 3\n3 3 3\n1 2 1", "5"], ["1 1 2\n10\n10\n1 1 5\n1 1 10", "10"], ["2 2 1\n3 5\n3 5\n2 2 2", "6"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const A = parseInt(arg[0].split(\" \")[0]);\n    const B = parseInt(arg[0].split(\" \")[0]);\n    const M = parseInt(arg[0].split(\" \")[0]);\n    \n    const freezer = arg[1].split(\" \").map(n=>parseInt(n));\n    const renzi   = arg[2].split(\" \").map(n=>parseInt(n));\n    \n    const xyc = arg.slice(3, M + 4);\n    \n    const minFreeze = Math.min(...freezer);\n    const minRenzi = Math.min(...renzi);\n    \n    let temp = minFreeze + minRenzi;\n    \n    for(let i in xyc) {\n        let x = parseInt(xyc[i].split(\" \")[0]);\n        let y = parseInt(xyc[i].split(\" \")[1]);\n        let c = parseInt(xyc[i].split(\" \")[2]);\n        \n        let cost = freezer[x-1] + renzi[y-1] - c;\n        \n        if(cost <= temp) {\n            temp = cost;\n        }\n    }\n    \n    console.log(temp);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 509, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const A = parseInt(arg[0].split(\" \")[0]);\n  const B = parseInt(arg[0].split(\" \")[0]);\n  const M = parseInt(arg[0].split(\" \")[0]);\n  const freezer = arg[1].split(\" \").map(n => parseInt(n));\n  const renzi = arg[2].split(\" \").map(n => parseInt(n));\n  const xyc = arg.slice(3, M + 4);\n  const minFreeze = Math.min(...freezer);\n  const minRenzi = Math.min(...renzi);\n  let temp = minFreeze + minRenzi;\n  for (let i in xyc) {\n    let x = parseInt(xyc[i].split(\" \")[0]);\n    let y = parseInt(xyc[i].split(\" \")[1]);\n    let c = parseInt(xyc[i].split(\" \")[2]);\n    let cost = freezer[x - 1] + renzi[y - 1] - c;\n    if (cost <= temp) {\n      temp = cost;\n    }\n  }\n  console.log(temp);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8836516439577886, "ngram_match_score": 0.7250147433482607, "weighted_ngram_match_score": 0.809591832482894, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02813_1", "type": "JavaScript", "obfuscated": "'use strict';const permutation=({result:result=[],pre:pre=[],post:post,n:n=post['length']})=>{if(n>0x0){post['forEach']((_,i)=>{const rest=[...post];const elem=rest['splice'](i,0x1);permutation({'result':result,'pre':[...pre,...elem],'post':rest,'n':n-0x1});});}else{result['push'](pre);}return result;};function Main(inputs){const input=inputs['split']('\\x0a');const n=Number(input[0x0]);const p=input[0x1];const q=input[0x2];const perm=permutation({'post':new Array(n)['fill'](0x0)['map']((_,i)=>i+0x1)})['map'](v=>v['join']('\\x20'));const a=perm['indexOf'](p);const b=perm['indexOf'](q);console['log'](Math['abs'](a-b));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 3 2\n3 1 2", "3"], ["8\n7 3 5 4 2 1 6 8\n3 8 2 5 4 6 7 1", "17517"], ["3\n1 2 3\n1 2 3", "0"]], "original": "'use strict';\n\nconst permutation = ({ result = [], pre = [], post, n = post.length }) => {\n  if (n > 0) {\n    post.forEach((_, i) => {\n      const rest = [...post];\n      const elem = rest.splice(i, 1);\n      permutation({ result, pre: [...pre, ...elem], post: rest, n: n - 1});\n    });\n  } else {\n    result.push(pre);\n  }\n  return result;\n};\n\nfunction Main(inputs) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  const input = inputs.split(\"\\n\");\n  const n = Number(input[0]);\n  const p = input[1];\n  const q = input[2];\n\n  const perm = permutation({ post: (new Array(n)).fill(0).map((_, i) => (i + 1)) }).map((v) => (v.join(' ')));\n  const a = perm.indexOf(p);\n  const b = perm.indexOf(q);\n\n  console.log(Math.abs(a - b));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 510, "deobfuscated": "'use strict';\n\nconst permutation = ({\n  result = [],\n  pre = [],\n  post: post,\n  n = post.length\n}) => {\n  if (n > 0) {\n    post.forEach((_, i) => {\n      const rest = [...post];\n      const elem = rest.splice(i, 1);\n      permutation({\n        result: result,\n        pre: [...pre, ...elem],\n        post: rest,\n        n: n - 1\n      });\n    });\n  } else {\n    result.push(pre);\n  }\n  return result;\n};\nfunction Main(inputs) {\n  const input = inputs.split(\"\\n\");\n  const n = Number(input[0]);\n  const p = input[1];\n  const q = input[2];\n  const perm = permutation({\n    post: new Array(n).fill(0).map((_, i) => i + 1)\n  }).map(v => v.join(\" \"));\n  const a = perm.indexOf(p);\n  const b = perm.indexOf(q);\n  console.log(Math.abs(a - b));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7611208715493547, "ngram_match_score": 0.7720651216251005, "weighted_ngram_match_score": 0.7804434183988987, "syntax_match_score": 0.7099236641221374, "dataflow_match_score": 0.782051282051282}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02841_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');var i1=input[0x0]['split']('\\x20');var i2=input[0x1]['split']('\\x20');var d1=new Date('2019/'+i1[0x0]+'/'+i1[0x1]);var d2=new Date('2019/'+i2[0x0]+'/'+i2[0x1]);if(d1['getMonth']()==d2['getMonth']()){console['log'](0x0);}else{console['log'](0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["11 16\n11 17", "0"], ["11 30\n12 1", "1"]], "original": "function Main(input) {\n\tvar input = input.split(\"\\n\");\n\tvar i1 = input[0].split(\" \");\n\tvar i2 = input[1].split(\" \");\n\n    var d1 = new Date(\"2019/\" + i1[0] + \"/\" + i1[1]);\n    var d2 = new Date(\"2019/\" + i2[0] + \"/\" + i2[1]);\n\n    if (d1.getMonth() == d2.getMonth()) {\n\t    console.log(0);\n    } else {\n\t    console.log(1);\n    }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 511, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var i1 = input[0].split(\" \");\n  var i2 = input[1].split(\" \");\n  var d1 = new Date(\"2019/\" + i1[0] + \"/\" + i1[1]);\n  var d2 = new Date(\"2019/\" + i2[0] + \"/\" + i2[1]);\n  if (d1.getMonth() == d2.getMonth()) {\n    console.log(0);\n  } else {\n    console.log(1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9789003741393143, "ngram_match_score": 0.9570216372998335, "weighted_ngram_match_score": 0.958579859257424, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02910_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const S=args[0x0][0x0];const N=S['length'];let odd=!![];let even=!![];for(let i=0x0;i<N;i++){if(i%0x2===0x0){if(!['R','U','D']['includes'](S[i]))odd=![];}else{if(!['L','U','D']['includes'](S[i]))even=![];}}if(odd&&even)console['log']('Yes');else console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["RUDLUDR", "Yes"], ["DULL", "No"], ["UUUUUUUUUUUUUUU", "Yes"], ["ULURU", "No"], ["RDULULDURURLRDULRLR", "Yes"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst S = args[0][0]\n\tconst N = S.length\n\tlet odd = true\n\tlet even = true\n\n\tfor (let i = 0; i < N; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\tif (!['R', 'U', 'D'].includes(S[i])) odd = false\n\t\t} else {\n\t\t\tif (!['L', 'U', 'D'].includes(S[i])) even = false\n\t\t}\n\t}\n\n\tif (odd && even) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 512, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const S = args[0][0];\n  const N = S.length;\n  let odd = true;\n  let even = true;\n  for (let i = 0; i < N; i++) {\n    if (i % 2 === 0) {\n      if (![\"R\", \"U\", \"D\"].includes(S[i])) {\n        odd = false;\n      }\n    } else if (![\"L\", \"U\", \"D\"].includes(S[i])) {\n      even = false;\n    }\n  }\n  if (odd && even) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6168358161411677, "ngram_match_score": 0.45186073443369984, "weighted_ngram_match_score": 0.4966523176336008, "syntax_match_score": 0.845360824742268, "dataflow_match_score": 0.673469387755102}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03266_1", "type": "JavaScript", "obfuscated": "var lines=[];var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]['split']('\\x20')[0x0]);var K=Number(lines[0x0]['split']('\\x20')[0x1]);var ans=0x0;for(var i=0x1;i<=K;i++){if(i*0x2%K===0x0){if(0x1<=Math['floor']((N-i)/K)){ans+=Math['pow'](Math['floor']((N-i)/K)+0x1,0x3);}else{ans++;}}}console['log'](ans);});", "test_cases": [["3 2", "9"], ["5 3", "1"], ["31415 9265", "27"], ["35897 932", "114191"]], "original": "var lines = [];\n\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var K = Number(lines[0].split(\" \")[1]);\n\n    // a + b = K * m\n    // b + c = K * n\n    // c + a = K * l\n\n    // 2b = K(m + n - l)\n    // よって,2a, 2b, 2cはKの倍数である必要がある\n\n    var ans = 0;\n    for (var i = 1; i <= K; i++) {\n        if (i * 2 % K === 0) {\n            // i + K * m <= (N - i) / K\n            if (1 <= Math.floor((N - i) / K)) { ans += Math.pow(Math.floor(((N - i) / K)) + 1, 3) }\n            else { ans++; }\n\n        }\n    }\n\n    console.log(ans);\n\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 513, "deobfuscated": "var lines = [];\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0].split(\" \")[0]);\n  var K = Number(lines[0].split(\" \")[1]);\n  var ans = 0;\n  for (var i = 1; i <= K; i++) {\n    if (i * 2 % K === 0) {\n      if (Math.floor((N - i) / K) >= 1) {\n        ans += Math.pow(Math.floor((N - i) / K) + 1, 3);\n      } else {\n        ans++;\n      }\n    }\n  }\n  console.log(ans);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6636018073989626, "ngram_match_score": 0.39972694656742735, "weighted_ngram_match_score": 0.4642040925522324, "syntax_match_score": 0.7904761904761904, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0020911402086445374, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05494339965174011}}
{"filename": "p03323_1", "type": "JavaScript", "obfuscated": "function Main(input){var ab=input[0x0]['split']('\\x20');console['log'](ab[0x0]<=0x8&&ab[0x1]<=0x8?'Yay!':':(');}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["5 4", "Yay!"], ["8 8", "Yay!"], ["11 4", ":("]], "original": "function Main(input) {\n  var ab = input[0].split(\" \");\n  console.log((ab[0]<=8 && ab[1] <= 8) ? 'Yay!' : ':(')\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 514, "deobfuscated": "function Main(input) {\n  var ab = input[0].split(\" \");\n  console.log(ab[0] <= 8 && ab[1] <= 8 ? \"Yay!\" : \":(\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6867588997309656, "ngram_match_score": 0.4474935415497117, "weighted_ngram_match_score": 0.5046702625023558, "syntax_match_score": 0.7948717948717948, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03345_1", "type": "JavaScript", "obfuscated": "'use strict';const DELIMITER='\\x20';const A_INDEX=0x0;const B_INDEX=0x1;const K_INDEX=0x3;const LIMIT=Math['pow'](0xa,0x12);const process=input=>{const indexArr=input['split'](DELIMITER);const ans=parseInt(indexArr[A_INDEX])-parseInt(indexArr[B_INDEX]);const KString=indexArr[K_INDEX];const K=parseInt(KString['charAt'](KString['length']-0x1));if(Math['abs'](ans)>LIMIT){console['log']('Unfair');}else{console['log'](K%0x2===0x0||ans===0x0?ans:-ans);}};process(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["1 2 3 1", "1"], ["2 3 2 0", "-1"], ["1000000000 1000000000 1000000000 1000000000000000000", "0"]], "original": "'use strict';\n\nconst DELIMITER = \" \";\nconst A_INDEX = 0;\nconst B_INDEX = 1;\nconst K_INDEX = 3;\nconst LIMIT = Math.pow(10, 18);\n\nconst process = input => {\n    const indexArr = input.split(DELIMITER);\n    const ans = parseInt(indexArr[A_INDEX]) - parseInt(indexArr[B_INDEX]);\n    const KString = indexArr[K_INDEX];\n    // JS rounds up large numbers; simply get last digit for modulo\n    const K = parseInt(KString.charAt(KString.length-1));\n\n    if (Math.abs(ans) > LIMIT) {\n        console.log('Unfair')\n    } else {\n        console.log(K % 2 === 0 || ans === 0 ? ans : -ans);\n    }\n}\n\nprocess(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 515, "deobfuscated": "'use strict';\n\nconst DELIMITER = \" \";\nconst A_INDEX = 0;\nconst B_INDEX = 1;\nconst K_INDEX = 3;\nconst LIMIT = Math.pow(10, 18);\nconst process = input => {\n  const indexArr = input.split(DELIMITER);\n  const ans = parseInt(indexArr[A_INDEX]) - parseInt(indexArr[B_INDEX]);\n  const KString = indexArr[K_INDEX];\n  const K = parseInt(KString.charAt(KString.length - 1));\n  if (Math.abs(ans) > LIMIT) {\n    console.log(\"Unfair\");\n  } else {\n    console.log(K % 2 === 0 || ans === 0 ? ans : -ans);\n  }\n};\nprocess(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8769771006470967, "ngram_match_score": 0.7477395875257021, "weighted_ngram_match_score": 0.7601688150626846, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03738_1", "type": "JavaScript", "obfuscated": "function rec(a,b){if(a[0x0]>b[0x0]){return'GREATER';}else if(a[0x0]<b[0x0]){return'LESS';}else if(a['length']==0x1){return'EQUAL';}else{return rec(a['slice'](0x1),b['slice'](0x1));}}function main(s){s=s['split']('\\x0a');if(s[0x0]['length']>s[0x1]['length']){console['log']('GREATER');}else if(s[0x0]['length']<s[0x1]['length']){console['log']('LESS');}else{console['log']('%s',rec(s[0x0]['slice'](0x1),s[0x1]['slice'](0x1)));}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["36\n24", "GREATER"], ["850\n3777", "LESS"], ["9720246\n22516266", "LESS"], ["123456789012345678901234567890\n234567890123456789012345678901", "LESS"]], "original": "function rec(a, b) {\n\tif (a[0] > b[0]) {return 'GREATER';}\n\telse if (a[0] < b[0]) {return 'LESS';}\n\telse if (a.length == 1) {return 'EQUAL'}\n\telse {return rec(a.slice(1), b.slice(1));}\n}\n\nfunction main(s) {\n\ts = s.split('\\n');\n\tif (s[0].length > s[1].length) {console.log('GREATER');}\n\telse if (s[0].length < s[1].length) {console.log('LESS');}\n\telse {console.log('%s', rec(s[0].slice(1), s[1].slice(1)));}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 516, "deobfuscated": "function rec(a, b) {\n  if (a[0] > b[0]) {\n    return \"GREATER\";\n  } else if (a[0] < b[0]) {\n    return \"LESS\";\n  } else if (a.length == 1) {\n    return \"EQUAL\";\n  } else {\n    return rec(a.slice(1), b.slice(1));\n  }\n}\nfunction main(s) {\n  s = s.split(\"\\n\");\n  if (s[0].length > s[1].length) {\n    console.log(\"GREATER\");\n  } else if (s[0].length < s[1].length) {\n    console.log(\"LESS\");\n  } else {\n    console.log(\"%s\", rec(s[0].slice(1), s[1].slice(1)));\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7118734835553084, "ngram_match_score": 0.36407131415408733, "weighted_ngram_match_score": 0.4834226200671466, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03805_1", "type": "JavaScript", "obfuscated": "function main(lines){const [N,M]=na();const nodes=Array(N+0x1)['fill'](0x0)['map'](()=>new Set());for(let i=0x1;i<=M;i++){const [a,b]=na();nodes[a]['add'](b);nodes[b]['add'](a);}let ans=0x0;searchRoute(nodes[0x1],[0x1]);function searchRoute(node,passed){if(passed['length']==N)return++ans;for(let n of node){if(passed['includes'](n))continue;searchRoute(nodes[n],passed['concat'](n));}}return ans;}const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');let lineCount=0x0;const s=()=>lines[lineCount++];const n=()=>Number(s());const b=()=>BigInt(s());const sa=()=>s()['split']('\\x20');const na=()=>sa()['map'](Number);const ba=()=>sa()['map'](BigInt);const ans=main(lines);console['log'](ans);", "test_cases": [["3 3\n1 2\n1 3\n2 3", "2"], ["7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7", "1"]], "original": "function main(lines) {\n  const [N, M] = na();\n  \n  // 頂点情報構築\n  const nodes = Array(N+1).fill(0).map(() => new Set());\n  for (let i = 1; i <= M; i++) {\n    const [a, b] = na();\n    nodes[a].add(b);\n    nodes[b].add(a);\n  }\n\n  // ルート探索\n  let ans = 0;\n  searchRoute(nodes[1], [1]);\n\n  // 探索再帰関数\n  function searchRoute(node, passed) {\n    if (passed.length == N) return ++ans;\n    for (let n of node) {\n      if (passed.includes(n)) continue;\n      searchRoute(nodes[n], passed.concat(n));\n    }\n  }\n  \n  return ans;\n}\n\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n\nlet lineCount = 0;\nconst s = () => lines[lineCount++];\nconst n = () => Number(s());\nconst b = () => BigInt(s());\nconst sa = () => s().split(' ');\nconst na = () => sa().map(Number);\nconst ba = () => sa().map(BigInt);\n\nconst ans = main(lines);\nconsole.log( ans );", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 517, "deobfuscated": "function main(lines) {\n  const [N, M] = na();\n  const nodes = Array(N + 1).fill(0).map(() => new Set());\n  for (let i = 1; i <= M; i++) {\n    const [a, b] = na();\n    nodes[a].add(b);\n    nodes[b].add(a);\n  }\n  let ans = 0;\n  searchRoute(nodes[1], [1]);\n  function searchRoute(node, passed) {\n    if (passed.length == N) {\n      return ++ans;\n    }\n    for (let n of node) {\n      if (passed.includes(n)) {\n        continue;\n      }\n      searchRoute(nodes[n], passed.concat(n));\n    }\n  }\n  return ans;\n}\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nlet lineCount = 0;\nconst s = () => lines[lineCount++];\nconst n = () => Number(s());\nconst b = () => BigInt(s());\nconst sa = () => s().split(\" \");\nconst na = () => sa().map(Number);\nconst ba = () => sa().map(BigInt);\nconst ans = main(lines);\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8855811725876028, "ngram_match_score": 0.7958699064336798, "weighted_ngram_match_score": 0.8045193000457639, "syntax_match_score": 0.9419354838709677, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03827_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var num=input[0x0];var character=input[0x1];var max=0x0;var x=0x0;for(var i=0x0;i<character['length'];i++){if(character[i]==='I'){x++;}else{x--;}if(max<x){max=x;}}console['log'](max);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\nIIDID", "2"], ["7\nDDIDDII", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split('\\n');\n\tvar num = input[0];\n\tvar character = input[1];\n\tvar max = 0;\n\tvar x = 0;\n\tfor(var i = 0; i < character.length; i++){\n\t    if(character[i] === 'I'){\n\t        x++;\n\t    } else {\n\t        x--;\n\t    }\n\t    if(max < x){\n\t        max = x;\n\t    }\n\t}\n\tconsole.log(max);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 518, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var num = input[0];\n  var character = input[1];\n  var max = 0;\n  var x = 0;\n  for (var i = 0; i < character.length; i++) {\n    if (character[i] === \"I\") {\n      x++;\n    } else {\n      x--;\n    }\n    if (max < x) {\n      max = x;\n    }\n  }\n  console.log(max);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8086710849787966, "ngram_match_score": 0.5949757664833034, "weighted_ngram_match_score": 0.6397085734318831, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04001_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const S=args['trim']();const L=S['length'];let total=0x0;for(let bit=0x0;bit<0x1<<L-0x1;bit++){let st=S[0x0]|0x0,t=0x0;for(let i=0x0;i<L-0x1;i++){if(0x1<<i&bit){t+=st;st=S[i+0x1]|0x0;}else{st=st*0xa+(S[i+0x1]|0x0);}}total+=t+st;}return total['toString']();})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["125", "176"], ["9999999999", "12656242944"]], "original": "console.log((args=>{\n  const S = args.trim();\n  const L = S.length;\n  let total = 0;\n  for ( let bit = 0; bit < 1<<(L-1); bit++ ) {\n    let st = S[0]|0, t = 0;\n    for ( let i = 0; i < L-1; i++ ) {\n      if ( (1<<i) & bit ) {\n        t += st; st = (S[i+1]|0);\n      } else {\n        st = st * 10 + (S[i+1]|0);\n      }\n    }\n    total += t + st;\n  }\n  return total.toString();\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 519, "deobfuscated": "console.log((args => {\n  const S = args.trim();\n  const L = S.length;\n  let total = 0;\n  for (let bit = 0; bit < 1 << L - 1; bit++) {\n    let st = S[0] | 0;\n    let t = 0;\n    for (let i = 0; i < L - 1; i++) {\n      if (1 << i & bit) {\n        t += st;\n        st = S[i + 1] | 0;\n      } else {\n        st = st * 10 + (S[i + 1] | 0);\n      }\n    }\n    total += t + st;\n  }\n  return total.toString();\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6904090069611291, "ngram_match_score": 0.47618895680894174, "weighted_ngram_match_score": 0.578129997864843, "syntax_match_score": 0.7073170731707317, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04043_1", "type": "JavaScript", "obfuscated": "function main(input){const nums=input['split']('\\x20');if(nums['indexOf']('5')!=-0x1){nums['splice'](nums['indexOf']('5'),0x1);}if(nums['indexOf']('5')!=-0x1){nums['splice'](nums['indexOf']('5'),0x1);}if(nums['indexOf']('7')!=-0x1){nums['splice'](nums['indexOf']('7'),0x1);}console['log'](nums[0x0]==null?'YES':'NO');}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 5 7", "YES"], ["7 7 5", "NO"]], "original": "function main(input) {\n    const nums = input.split(\" \");\n    \n    if(nums.indexOf('5') != -1) {\n         nums.splice(nums.indexOf('5'),1);\n    }\n    if(nums.indexOf('5') != -1) {\n         nums.splice(nums.indexOf('5'),1);\n    }\n    if(nums.indexOf('7') != -1) {\n         nums.splice(nums.indexOf('7'),1);\n    }\n    console.log(nums[0] == null ? \"YES\" : \"NO\");\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 520, "deobfuscated": "function main(input) {\n  const nums = input.split(\" \");\n  if (nums.indexOf(\"5\") != -1) {\n    nums.splice(nums.indexOf(\"5\"), 1);\n  }\n  if (nums.indexOf(\"5\") != -1) {\n    nums.splice(nums.indexOf(\"5\"), 1);\n  }\n  if (nums.indexOf(\"7\") != -1) {\n    nums.splice(nums.indexOf(\"7\"), 1);\n  }\n  console.log(nums[0] == null ? \"YES\" : \"NO\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7430582788518807, "ngram_match_score": 0.4430299249356568, "weighted_ngram_match_score": 0.5292031904718658, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00005_1", "type": "JavaScript", "obfuscated": "config={'stdin':'/dev/stdin','newline':'\\x0a'};require('fs')['readFileSync'](config['stdin'],'ascii')['trim']()['split'](config['newline'])['forEach'](function(line){var ary=line['split']('\\x20');var a=ary[0x0],b=ary[0x1];console['log']('%d\\x20%d',gcd(a,b),lcm(a,b));});function gcd(a,b){while(a!==b){if(a<b){var tmp=a;a=b;b=tmp;}if(a%b===0x0)return b;a-=b;}return a;}function lcm(a,b){var g=gcd(a,b);return g*(a/g)*(b/g);}", "test_cases": [["8 6\n50000000 30000000", "2 24\n10000000 150000000"]], "original": "//config = {stdin: 'tmp', newline: '\\r\\n'}; // win\nconfig = {stdin: '/dev/stdin', newline: '\\n'}; // linux\n\nrequire('fs').readFileSync(config.stdin, 'ascii')\n\t.trim()\n\t.split(config.newline)\n\t.forEach(function (line) {\n\t\tvar ary = line.split(' ');\n\t\tvar a = ary[0], b = ary[1];\n\t\tconsole.log('%d %d', gcd(a, b), lcm(a, b));\n\t});\n\nfunction gcd(a, b) {\n\twhile (a !== b) {\n\t\tif (a < b) {\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\t\t}\n\t\tif (a % b === 0) return b;\n\t\ta -= b;\n\t}\n\treturn a;\n}\n\nfunction lcm(a, b) {\n\tvar g = gcd(a, b);\n\treturn g * (a / g) * (b / g);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 521, "deobfuscated": "config = {\n  stdin: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nrequire(\"fs\").readFileSync(config.stdin, \"ascii\").trim().split(config.newline).forEach(function (line) {\n  var ary = line.split(\" \");\n  var a = ary[0];\n  var b = ary[1];\n  console.log(\"%d %d\", gcd(a, b), lcm(a, b));\n});\nfunction gcd(a, b) {\n  while (a !== b) {\n    if (a < b) {\n      var tmp = a;\n      a = b;\n      b = tmp;\n    }\n    if (a % b === 0) {\n      return b;\n    }\n    a -= b;\n  }\n  return a;\n}\nfunction lcm(a, b) {\n  var g = gcd(a, b);\n  return g * (a / g) * (b / g);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8072590198708253, "ngram_match_score": 0.6736093681715867, "weighted_ngram_match_score": 0.6902581719858715, "syntax_match_score": 0.8651685393258427, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -9.112412911316259e-05, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.008130081300812941, "new_decrease_halstead_effort": -0.008130081300812941}}
{"filename": "p00100_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var obj={};for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);if(i!=0x0&&arr['length']==0x1){var keys=[];for(var k in obj)keys['push'](k-0x0);var cnt=0x0;for(var j=0x0;j<keys['length'];j++){if(obj[keys[j+'']]>=0xf4240){console['log'](keys[j+'']);cnt++;}}if(cnt==0x0)console['log']('NA');if(arr[0x0]==0x0)break;obj={};}else if(arr['length']==0x3){if(!obj['hasOwnProperty'](arr[0x0]))obj[arr[0x0]]=arr[0x1]*arr[0x2];else obj[arr[0x0]]+=arr[0x1]*arr[0x2];}}", "test_cases": [["4\n1001 2000 520\n1002 1800 450\n1003 1600 625\n1001 200 1220\n2\n1001 100 3\n1005 1000 100\n2\n2013 5000 100\n2013 5000 100\n0", "1001\n1003\nNA\n2013"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar obj={};\nfor(var i=0;i<Arr.length;i++){\nvar arr=Arr[i].split(\" \").map(Number);\n   if(i!=0 && arr.length==1){\n      var keys=[];\n      for(var k in obj)keys.push(k-0);\n      var cnt=0;\n      for(var j=0;j<keys.length;j++){\n         if(obj[keys[j+\"\"]]>=1000000){console.log(keys[j+\"\"]);cnt++;}\n      }\n      if(cnt==0)console.log(\"NA\");\n      if(arr[0]==0)break;\n      obj={};\n   }else if(arr.length==3){\n       if(!obj.hasOwnProperty(arr[0]))obj[arr[0]]=arr[1]*arr[2];\n       else obj[arr[0]]+=arr[1]*arr[2];\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 522, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar obj = {};\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  if (i != 0 && arr.length == 1) {\n    var keys = [];\n    for (var k in obj) {\n      keys.push(k - 0);\n    }\n    var cnt = 0;\n    for (var j = 0; j < keys.length; j++) {\n      if (obj[keys[j + \"\"]] >= 1000000) {\n        console.log(keys[j + \"\"]);\n        cnt++;\n      }\n    }\n    if (cnt == 0) {\n      console.log(\"NA\");\n    }\n    if (arr[0] == 0) {\n      break;\n    }\n    obj = {};\n  } else if (arr.length == 3) {\n    if (!obj.hasOwnProperty(arr[0])) {\n      obj[arr[0]] = arr[1] * arr[2];\n    } else {\n      obj[arr[0]] += arr[1] * arr[2];\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48046320618222493, "ngram_match_score": 0.013310552944523222, "weighted_ngram_match_score": 0.04807715550530692, "syntax_match_score": 0.8604651162790697, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00109_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var L=Arr['shift']()-0x0;for(var i=0x0;i<L;i++){var str=Arr[i];str=str['slice'](0x0,-0x1);var num=eval(str);console['log'](parseInt(num,0xa));}", "test_cases": [["2\n4-2*3=\n4*(8+4+3)=", "-2\n60"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar L=Arr.shift()-0;\nfor(var i=0;i<L;i++){\n   var str=Arr[i];\n   str=str.slice(0,-1);\n   var num=eval(str);\n   console.log(parseInt(num,10));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 523, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar L = Arr.shift() - 0;\nfor (var i = 0; i < L; i++) {\n  var str = Arr[i];\n  str = str.slice(0, -1);\n  var num = eval(str);\n  console.log(parseInt(num, 10));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49838532476211095, "ngram_match_score": 0.029224865149786863, "weighted_ngram_match_score": 0.07752398106846811, "syntax_match_score": 0.8867924528301887, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02388_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){var inputs=stdin['toString']()['trim']()['split']('\\x0a');(function(x){console['log'](x*x*x);}(parseInt(inputs[0x0],0xa)));}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2", "8"], ["3", "27"]], "original": "'use strict';\n(function(stdin) {\n  var inputs = stdin.toString().trim().split('\\n');\n\n  (function(x) {\n    // ????????????????????????\nconsole.log(x*x*x);\n\n  })(parseInt(inputs[0], 10)); // ??°?????????\n\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 524, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  var inputs = stdin.toString().trim().split(\"\\n\");\n  (function (x) {\n    console.log(x * x * x);\n  })(parseInt(inputs[0], 10));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5638963194072972, "ngram_match_score": 0.1582128588834926, "weighted_ngram_match_score": 0.1843289404848266, "syntax_match_score": 0.9130434782608695, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02403_1", "type": "JavaScript", "obfuscated": "let fs=require('fs');const fuga=data=>{lines=data['split']('\\x0a');lines=lines['map'](line=>line['split']('\\x20'));lines=lines['map'](line=>line['map'](elem=>parseInt(elem)));for(let i=0x0;i<lines['length'];i++){let str='';if(!lines[i][0x0])return;for(let j=0x0;j<lines[i][0x0];j++){for(let k=0x0;k<lines[i][0x1];k++){str+='#';}console['log'](str);str='';}console['log']('');}};const readFile=route=>{fs['readFile'](route,'utf8',(err,data)=>{fuga(data);});};const readFileWithoutArg=()=>{const data=require('fs')['readFileSync']('/dev/stdin','utf8');fuga(data);};let sampleInputPath='';if(process['argv']['length']>0x2){sampleInputPath=process['argv'][0x2];readFile(sampleInputPath);}else{readFileWithoutArg();}", "test_cases": [["3 4\n5 6\n2 2\n0 0", "####\n####\n####\n\n######\n######\n######\n######\n######\n\n##\n##"]], "original": "let fs = require('fs');\n\nconst fuga = data => {\n  lines = data.split(\"\\n\");\n  lines = lines.map(line => line.split(\" \"));\n  lines = lines.map(line => line.map(elem => parseInt(elem)));\n\n  for(let i = 0; i < lines.length; i++) {\n    let str = \"\";\n    if(!lines[i][0]) return;\n    for(let j = 0; j < lines[i][0]; j++) {\n      for(let k = 0; k < lines[i][1]; k++) {\n        str += \"#\";\n      }\n      console.log(str);\n      str = \"\";\n    }\n    console.log(\"\");\n  }\n}\n\nconst readFile = route => {\n  fs.readFile(route, 'utf8', (err, data) => {\n    fuga(data);\n  });\n}\n\nconst readFileWithoutArg = () => {\n  const data = require('fs').readFileSync('/dev/stdin', 'utf8');\n  fuga(data)\n}\n\nlet sampleInputPath = \"\";\n\nif(process.argv.length > 2) {\n  sampleInputPath = process.argv[2];\n  readFile(sampleInputPath);\n} else {\n  readFileWithoutArg();\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 525, "deobfuscated": "let fs = require(\"fs\");\nconst fuga = data => {\n  lines = data.split(\"\\n\");\n  lines = lines.map(line => line.split(\" \"));\n  lines = lines.map(line => line.map(elem => parseInt(elem)));\n  for (let i = 0; i < lines.length; i++) {\n    let str = \"\";\n    if (!lines[i][0]) {\n      return;\n    }\n    for (let j = 0; j < lines[i][0]; j++) {\n      for (let k = 0; k < lines[i][1]; k++) {\n        str += \"#\";\n      }\n      console.log(str);\n      str = \"\";\n    }\n    console.log(\"\");\n  }\n};\nconst readFile = route => {\n  fs.readFile(route, \"utf8\", (err, data) => {\n    fuga(data);\n  });\n};\nconst readFileWithoutArg = () => {\n  const data = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n  fuga(data);\n};\nlet sampleInputPath = \"\";\nif (process.argv.length > 2) {\n  sampleInputPath = process.argv[2];\n  readFile(sampleInputPath);\n} else {\n  readFileWithoutArg();\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8490280403646417, "ngram_match_score": 0.7135657381840536, "weighted_ngram_match_score": 0.7618729571906542, "syntax_match_score": 0.9436619718309859, "dataflow_match_score": 0.9770114942528736}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02416_1", "type": "JavaScript", "obfuscated": "let content='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',buf=>{content+=buf;});process['stdin']['on']('end',()=>{const lines=content['trim']()['split']('\\x0a')['slice'](0x0,-0x1);const result=lines['map'](num=>num['split']('')['map'](n=>parseInt(n,0xa))['reduce']((prev,cur)=>prev+cur));console['log'](result['join']('\\x0a'));});", "test_cases": [["123\n55\n1000\n0", "6\n10\n1"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\n\nprocess.stdin.on('end', () => {\n  const lines = content\n    .trim()\n    .split('\\n')\n    .slice(0, -1);\n\n  const result = lines.map(num =>\n    num\n      .split('')\n      .map(n => parseInt(n, 10))\n      .reduce((prev, cur) => prev + cur)\n  );\n\n  console.log(result.join('\\n'));\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 526, "deobfuscated": "let content = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", buf => {\n  content += buf;\n});\nprocess.stdin.on(\"end\", () => {\n  const lines = content.trim().split(\"\\n\").slice(0, -1);\n  const result = lines.map(num => num.split(\"\").map(n => parseInt(n, 10)).reduce((prev, cur) => prev + cur));\n  console.log(result.join(\"\\n\"));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6951134332570352, "ngram_match_score": 0.4116003658346167, "weighted_ngram_match_score": 0.42599622433638135, "syntax_match_score": 1.0, "dataflow_match_score": 0.9428571428571428}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02418_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const arr=input['split']('\\x0a');const regExp=new RegExp(arr[0x1]);console['log'](regExp['test'](arr[0x0]+arr[0x0])?'Yes':'No');", "test_cases": [["vanceknowledgetoad\nadvance", "Yes"], ["vanceknowledgetoad\nadvanced", "No"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst arr = input.split('\\n');\nconst regExp = new RegExp(arr[1]);\nconsole.log(regExp.test(arr[0] + arr[0])?'Yes':'No');\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 527, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst arr = input.split(\"\\n\");\nconst regExp = new RegExp(arr[1]);\nconsole.log(regExp.test(arr[0] + arr[0]) ? \"Yes\" : \"No\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7297978371385616, "ngram_match_score": 0.3989849341102657, "weighted_ngram_match_score": 0.520206414443981, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02811_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const K=parseInt(arg[0x0]['split']('\\x20')[0x0]);const X=parseInt(arg[0x0]['split']('\\x20')[0x1]);console['log'](0x1f4*K>=X?'Yes':'No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 900", "Yes"], ["1 501", "No"], ["4 2000", "Yes"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const K = parseInt(arg[0].split(\" \")[0]);\n    const X = parseInt(arg[0].split(\" \")[1]);\n    \n    console.log(500 * K >= X ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 528, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const K = parseInt(arg[0].split(\" \")[0]);\n  const X = parseInt(arg[0].split(\" \")[1]);\n  console.log(K * 500 >= X ? \"Yes\" : \"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8049978721709727, "ngram_match_score": 0.7020722430713021, "weighted_ngram_match_score": 0.7143478170411599, "syntax_match_score": 0.8035714285714286, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03023_1", "type": "JavaScript", "obfuscated": "'use strict';(function(input){input=input['trim']()-0x0;console['log'](0xb4*(input-0x2));}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3", "180"], ["100", "17640"]], "original": "'use strict';\n(function(input){\n  input=input.trim()-0;\n  console.log(180*(input-2));\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 529, "deobfuscated": "'use strict';\n\n(function (input) {\n  input = input.trim() - 0;\n  console.log((input - 2) * 180);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.44701969566856725, "ngram_match_score": 0.02432542569851428, "weighted_ngram_match_score": 0.08633400213704504, "syntax_match_score": 0.6774193548387096, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03130_1", "type": "JavaScript", "obfuscated": "'use strict';function I(s,f){this['_s']=s;this['_c']=0x0;this['_l']=0x0;this['_f']=f||Number;}I['prototype']['a']=function(){var l=this['_s']['split']('\\x0a')[this['_l']];if(!l)return;var t=l['trim']()['split']('\\x20');var a=t[this['_c']];this['_c']++;if(t['length']===this['_c']){this['_c']=0x0;this['_l']++;}return this['_f'](a);};I['prototype']['l']=function(){var l=this['_s']['split']('\\x0a')[this['_l']];this['_c']=0x0;this['_l']++;return l['split']('\\x20')['map'](this['_f']);};function main(input){const o=new I(input);const arr=Array(0x4)['fill'](0x0);for(let i=0x0;i<0x3;i++){let a=o['a']();let b=o['a']();arr[a-0x1]++;arr[b-0x1]++;}if(arr['sort']((a,b)=>a-b)['join']('\\x20')==='1\\x201\\x202\\x202'){console['log']('YES');}else{console['log']('NO');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 2\n1 3\n2 3", "YES"], ["3 2\n2 4\n1 2", "NO"], ["2 1\n3 2\n4 3", "YES"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s;this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s.split(\"\\n\")[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s.split(\"\\n\")[this._l];this._c=0;this._l++;return l.split(\" \").map(this._f)};\n\n// TODO test and remove comment\nfunction main(input) {\n  const o = new I(input);\n\n  const arr = Array(4).fill(0);\n  for (let i=0;i<3;i++) {\n    let a = o.a();\n    let b = o.a();\n    arr[a-1]++;\n    arr[b-1]++;\n  }\n\n  if (arr.sort((a,b) => a-b).join(\" \") === \"1 1 2 2\") {\n    console.log(\"YES\")\n  } else {\n    console.log(\"NO\")\n  }\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 530, "deobfuscated": "'use strict';\n\nfunction I(s, f) {\n  this._s = s;\n  this._c = 0;\n  this._l = 0;\n  this._f = f || Number;\n}\nI.prototype.a = function () {\n  var l = this._s.split(\"\\n\")[this._l];\n  if (!l) {\n    return;\n  }\n  var t = l.trim().split(\" \");\n  var a = t[this._c];\n  this._c++;\n  if (t.length === this._c) {\n    this._c = 0;\n    this._l++;\n  }\n  return this._f(a);\n};\nI.prototype.l = function () {\n  var l = this._s.split(\"\\n\")[this._l];\n  this._c = 0;\n  this._l++;\n  return l.split(\" \").map(this._f);\n};\nfunction main(input) {\n  const o = new I(input);\n  const arr = Array(4).fill(0);\n  for (let i = 0; i < 3; i++) {\n    let a = o.a();\n    let b = o.a();\n    arr[a - 1]++;\n    arr[b - 1]++;\n  }\n  if (arr.sort((a, b) => a - b).join(\" \") === \"1 1 2 2\") {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6723943719601151, "ngram_match_score": 0.2256427500243668, "weighted_ngram_match_score": 0.4974542908887194, "syntax_match_score": 0.9664804469273743, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000619225138478785, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.036624962607428646}}
{"filename": "p03241_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x0]['split']('\\x20');var N=parseInt(tmp[0x0],0xa);var M=parseInt(tmp[0x1],0xa);var divisors=divisor(M);var max=0x0;for(var i=0x0;i<divisors['length'];i++){var d=divisors[i];if(M/d>=N){max=Math['max'](max,d);}}console['log']('%d',max);}function divisor(n){var res=[];for(var i=0x1;i*i<=n;i++){if(n%i==0x0){res['push'](i);if(n/ i!=i){res['push'](n/ i);}}}return res;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 14", "2"], ["10 123", "3"], ["100000 1000000000", "10000"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\ttmp = input[0].split(\" \");\n\t//文字列から10進数に変換するときはparseIntを使います\n\tvar N = parseInt(tmp[0], 10);\n\tvar M = parseInt(tmp[1], 10);\n\n    var divisors = divisor(M);\n    var max = 0;\n            for (var i =0;i < divisors.length;i++) {\n                var d = divisors[i];\n                if (M / d >= N) {\n                    max = Math.max(max, d);\n                }\n            }\n\n\t//出力\n\tconsole.log('%d',max);\n}\nfunction divisor(n) {\n        var res = [];\n        for (var i = 1; i * i <= n; i++) {\n            if (n % i == 0) {\n                res.push(i);\n                if (n / i != i) {\n                    res.push(n / i);\n                }\n            }\n        }\n        return res;\n    }\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 531, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var N = parseInt(tmp[0], 10);\n  var M = parseInt(tmp[1], 10);\n  var divisors = divisor(M);\n  var max = 0;\n  for (var i = 0; i < divisors.length; i++) {\n    var d = divisors[i];\n    if (M / d >= N) {\n      max = Math.max(max, d);\n    }\n  }\n  console.log(\"%d\", max);\n}\nfunction divisor(n) {\n  var res = [];\n  for (var i = 1; i * i <= n; i++) {\n    if (n % i == 0) {\n      res.push(i);\n      if (n / i != i) {\n        res.push(n / i);\n      }\n    }\n  }\n  return res;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9069397935064403, "ngram_match_score": 0.8094434902754492, "weighted_ngram_match_score": 0.8183156837503117, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005828430741671164, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.026927214588960746}}
{"filename": "p03378_1", "type": "JavaScript", "obfuscated": "const BKRT='\\x0a';const SPAC='\\x20';const NOSP='';function Main(input){input=[]['concat'](...input['split'](BKRT)['map'](a=>a['split'](SPAC)));const strShift=()=>input['shift']();const intShift=()=>~~input['shift']();var N=intShift();var M=intShift();var X=intShift();var right=0x0;var left=0x0;for(var i=0x0;i<M;i++){var a=intShift();if(a<X){left++;}else{right++;}}return~~Math['min'](left,right);}((b,c,d)=>'undefined'!=typeof require?console['log'](Main(require('fs')['readFileSync']('/dev/stdin','utf8'))):[b=b['split']('\\x0a')['slice'](0x1,-0x1)['join']('\\x0a'),c=(function(){try{return Main(b);}catch(f){return f['stack']||f['message'];}}()),d=typeof c,'string'==d||(c=JSON['stringify'](c)),$('<form>')['append']([[0xa,b],0x0,[0x1,d],0x0,[0xa,c]]['map'](f=>$(f?'<textarea>':'<br>',f&&{'rows':f[0x0],'cols':0x28,'text':f[0x1]})))['appendTo']('body')])('\\x0a5\\x203\\x203\\x0a1\\x202\\x204\\x0a');", "test_cases": [["5 3 3\n1 2 4", "1"], ["7 3 2\n4 5 6", "0"], ["10 7 5\n1 2 3 4 6 8 9", "3"]], "original": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\n\nfunction Main(input){\n\tinput = [].concat(...input.split(BKRT).map(a=>a.split(SPAC)));\n  const strShift = ()=>input.shift();\n  const intShift = ()=>~~input.shift();\n  \n  var N = intShift();\n  var M = intShift();\n  var X = intShift();\n  \n  var right = 0;\n  var left = 0;\n  for(var i = 0; i < M; i++){\n  \tvar a = intShift();\n    if(a < X){\n    \tleft++;\n    }else{\n    \tright++;\n    }\n  }\n  return ~~Math.min(left,right);\n}\n\n// If you are interested in the algorithms I used, \n// there is no need to read down from this line.\n\n((b,c,d)=>\"undefined\"!=typeof require?console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"))):[b=b.split(\"\\n\").slice(1,-1).join(\"\\n\"),c=function(){try{return Main(b)}catch(f){return f.stack||f.message}}(),d=typeof c,\"string\"==d||(c=JSON.stringify(c)),$(\"<form>\").append([[10,b],0,[1,d],0,[10,c]].map(f=>$(f?\"<textarea>\":\"<br>\",f&&{rows:f[0],cols:40,text:f[1]}))).appendTo(\"body\")])(`\n5 3 3\n1 2 4\n`);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 532, "deobfuscated": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\nfunction Main(input) {\n  input = [].concat(...input.split(BKRT).map(a => a.split(SPAC)));\n  const strShift = () => input.shift();\n  const intShift = () => ~~input.shift();\n  var N = intShift();\n  var M = intShift();\n  var X = intShift();\n  var right = 0;\n  var left = 0;\n  for (var i = 0; i < M; i++) {\n    var a = intShift();\n    if (a < X) {\n      left++;\n    } else {\n      right++;\n    }\n  }\n  return ~~Math.min(left, right);\n}\n((b, c, d) => typeof require != \"undefined\" ? console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))) : [b = b.split(\"\\n\").slice(1, -1).join(\"\\n\"), c = function () {\n  try {\n    return Main(b);\n  } catch (f) {\n    return f.stack || f.message;\n  }\n}(), d = typeof c, d == \"string\" || (c = JSON.stringify(c)), $(\"<form>\").append([[10, b], 0, [1, d], 0, [10, c]].map(f => $(f ? \"<textarea>\" : \"<br>\", f && {\n  rows: f[0],\n  cols: 40,\n  text: f[1]\n}))).appendTo(\"body\")])(\"\\n5 3 3\\n1 2 4\\n\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6696113864724449, "ngram_match_score": 0.28514586850934925, "weighted_ngram_match_score": 0.4585170686847783, "syntax_match_score": 0.9347826086956522, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03424_1", "type": "JavaScript", "obfuscated": "function main(s){const set=new Set(s['split']('\\x0a')[0x1]['split']('\\x20'));const ans=[...set]['length']===0x4?'Four':'Three';console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\nG W Y P Y W", "Four"], ["9\nG W W G P W P G G", "Three"], ["8\nP Y W G Y W Y Y", "Four"]], "original": "function main(s) {\n  \n  const set = new Set(s.split('\\n')[1].split(' '));\n  const ans = ([...set].length === 4) ? 'Four' : 'Three';\n  \n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 533, "deobfuscated": "function main(s) {\n  const set = new Set(s.split(\"\\n\")[1].split(\" \"));\n  const ans = [...set].length === 4 ? \"Four\" : \"Three\";\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6508474531602169, "ngram_match_score": 0.4331371630306181, "weighted_ngram_match_score": 0.4480304273880271, "syntax_match_score": 0.8333333333333334, "dataflow_match_score": 0.8888888888888888}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03659_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const A=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n));const totalSum=A['reduce']((m,n)=>m+n);let left=A[0x0];let right=totalSum-A[0x0];let answer=Infinity;for(let i=0x0;i<N-0x1;i++){let diff=Math['abs'](right-left);answer=Math['min'](answer,diff);right-=A[parseInt(i)+0x1];left+=A[parseInt(i)+0x1];}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n1 2 3 4 5 6", "1"], ["2\n10 -10", "20"]], "original": "\"use strict\";\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n=>parseInt(n));\n\n  const totalSum = A.reduce((m,n)=>m+n);\n  \n  let left  = A[0];\n  let right = totalSum - A[0];\n  \n  let answer = Infinity;\n  \n  for(let i=0; i<N - 1; i++) {\n    let diff = Math.abs(right - left);\n    answer = Math.min(answer, diff);\n    \n    right -= A[parseInt(i) + 1];\n    left  += A[parseInt(i) + 1];\n  }\n  \n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 534, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n => parseInt(n));\n  const totalSum = A.reduce((m, n) => m + n);\n  let left = A[0];\n  let right = totalSum - A[0];\n  let answer = Infinity;\n  for (let i = 0; i < N - 1; i++) {\n    let diff = Math.abs(right - left);\n    answer = Math.min(answer, diff);\n    right -= A[parseInt(i) + 1];\n    left += A[parseInt(i) + 1];\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8701700038428644, "ngram_match_score": 0.6770547575632095, "weighted_ngram_match_score": 0.8036252578082481, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03672_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const S=arg[0x0]['split']('');if(S['length']===0x2){console['log'](0x1);return;}for(let i=0x0;i<S['length'];i++){S['pop']();let mid=Math['floor'](S['length']/0x2);if(S['slice'](0x0,mid)['join']('')===S['slice'](mid,S['length']+0x1)['join']('')){console['log'](S['length']);return;}}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abaababaab", "6"], ["xxxx", "2"], ["abcabcabcabc", "6"], ["akasakaakasakasakaakas", "14"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    if(S.length === 2) {\n        console.log(1);\n        return;\n    }\n    \n    for(let i=0; i<S.length; i++) {\n        S.pop();\n        \n        let mid = Math.floor(S.length / 2);\n        \n        if(S.slice(0, mid).join(\"\") === S.slice(mid, S.length + 1).join(\"\")) {\n            console.log(S.length);\n            return;\n        }\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 535, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const S = arg[0].split(\"\");\n  if (S.length === 2) {\n    console.log(1);\n    return;\n  }\n  for (let i = 0; i < S.length; i++) {\n    S.pop();\n    let mid = Math.floor(S.length / 2);\n    if (S.slice(0, mid).join(\"\") === S.slice(mid, S.length + 1).join(\"\")) {\n      console.log(S.length);\n      return;\n    }\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8242534111011905, "ngram_match_score": 0.6000113156699746, "weighted_ngram_match_score": 0.6970023287347878, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03720_1", "type": "JavaScript", "obfuscated": "'use strict';let lines=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');let N=+lines[0x0]['split']('\\x20')[0x0];let ABs=lines['slice'](0x1)['map'](line=>line['split']('\\x20')['map'](Number));let res=[];for(let i=0x0;i<N;i++)res[i]=0x0;ABs['forEach'](ab=>{res[ab[0x0]-0x1]++;res[ab[0x1]-0x1]++;});res['forEach'](n=>console['log'](n));", "test_cases": [["4 3\n1 2\n2 3\n1 4", "2\n2\n1\n1"], ["2 5\n1 2\n2 1\n1 2\n2 1\n1 2", "5\n5"], ["8 8\n1 2\n3 4\n1 5\n2 8\n3 7\n5 2\n4 1\n6 8", "3\n3\n2\n2\n2\n1\n1\n2"]], "original": "'use strict';\n\nlet lines = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n');\n\nlet N = +(lines[0].split(' ')[0]);\nlet ABs = lines.slice(1).map(line => line.split(' ').map(Number));\n\nlet res = [];\nfor (let i = 0; i < N; i++) res[i] = 0;\n\nABs.forEach(ab => {\n    res[ab[0]-1]++;\n    res[ab[1]-1]++;\n});\n\nres.forEach(n => console.log(n));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 536, "deobfuscated": "'use strict';\n\nlet lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nlet N = +lines[0].split(\" \")[0];\nlet ABs = lines.slice(1).map(line => line.split(\" \").map(Number));\nlet res = [];\nfor (let i = 0; i < N; i++) {\n  res[i] = 0;\n}\nABs.forEach(ab => {\n  res[ab[0] - 1]++;\n  res[ab[1] - 1]++;\n});\nres.forEach(n => console.log(n));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7281766678509559, "ngram_match_score": 0.4996631421474755, "weighted_ngram_match_score": 0.5799019872540466, "syntax_match_score": 0.9240506329113924, "dataflow_match_score": 0.9090909090909091}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03862_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');let N=Number(input[0x0]['split']('\\x20')[0x0]);let x=Number(input[0x0]['split']('\\x20')[0x1]);let As=input[0x1]['split']('\\x20')['map'](n=>Number(n));let manip=0x0;for(let i=0x0;i<N;i++){let exceed=As[i]-x;if(exceed>0x0){As[i]=x;manip+=exceed;}}for(let i=0x1;i<N-0x1;i++){let left=As[i-0x1];let current=As[i];let right=As[i+0x1];if(left+current>x&&current+right>x){As[i]=x-left;manip+=current-(x-left);}}for(let i=0x0;i<N-0x1;i++){let current=As[i];let right=As[i+0x1];if(current+right>x){As[i]=x-right;manip+=current-(x-right);}}console['log'](manip);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n2 2 2", "1"], ["6 1\n1 6 1 2 0 4", "11"], ["5 9\n3 1 4 1 5", "0"], ["2 0\n5 5", "10"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet N = Number(input[0].split(' ')[0])\n\tlet x = Number(input[0].split(' ')[1])\n\tlet As = input[1].split(' ').map(n => Number(n))\n\tlet manip = 0\n\t\n\t// 単体でxを超えていたら減らす O(n)\n\tfor(let i = 0; i < N ; i++) {\n\t\tlet exceed = As[i] - x\n\t\tif(exceed > 0) {\n\t\t\tAs[i] = x\n\t\t\tmanip += exceed\n\t\t}\n\t}\n\n\t// 左と足しても右と足してもxを超えていたら、左と足しても超えないように減らす O(n)\n\tfor(let i = 1; i < N - 1 ; i++) {\n\t\tlet left = As[i - 1]\n\t\tlet current = As[i]\n\t\tlet right = As[i + 1]\n\t\tif(left + current > x && current + right > x) {\n\t\t\tAs[i] = x - left\n\t\t\tmanip += current - (x - left)\n\t\t}\n\t}\n\t// 右と足して超えていたら減らす O(n)\n\tfor(let i = 0; i < N - 1 ; i++) {\n\t\tlet current = As[i]\n\t\tlet right = As[i + 1]\n\t\tif(current + right > x) {\n\t\t\tAs[i] = x - right\n\t\t\tmanip += current - (x - right)\n\t\t}\n\t}\n\tconsole.log(manip)\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 537, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  let N = Number(input[0].split(\" \")[0]);\n  let x = Number(input[0].split(\" \")[1]);\n  let As = input[1].split(\" \").map(n => Number(n));\n  let manip = 0;\n  for (let i = 0; i < N; i++) {\n    let exceed = As[i] - x;\n    if (exceed > 0) {\n      As[i] = x;\n      manip += exceed;\n    }\n  }\n  for (let i = 1; i < N - 1; i++) {\n    let left = As[i - 1];\n    let current = As[i];\n    let right = As[i + 1];\n    if (left + current > x && current + right > x) {\n      As[i] = x - left;\n      manip += current - (x - left);\n    }\n  }\n  for (let i = 0; i < N - 1; i++) {\n    let current = As[i];\n    let right = As[i + 1];\n    if (current + right > x) {\n      As[i] = x - right;\n      manip += current - (x - right);\n    }\n  }\n  console.log(manip);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6984388206577143, "ngram_match_score": 0.517827339901707, "weighted_ngram_match_score": 0.5282643913272812, "syntax_match_score": 1.0, "dataflow_match_score": 0.7476635514018691}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02235_1", "type": "JavaScript", "obfuscated": "function lcs(x,y){var m=x['length'];var n=y['length'];for(var i=0x1;i<=m;i++){c[i][0x0]=0x0;}for(var j=0x1;j<=n;j++){c[0x0][j]=0x0;}for(var i=0x1;i<=m;i++){for(var j=0x1;j<=n;j++){if(x[i]==y[j]){c[i][j]=c[i-0x1][j-0x1]+0x1;}else if(c[i-0x1][j]>=c[i][j-0x1]){c[i][j]=c[i-0x1][j];}else{c[i][j]=c[i][j-0x1];}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');var n=+lines['shift']()-0x0;for(var idx=0x0;idx<n;idx++){var a=lines['shift']();var b=lines['shift']();var c=[[0x0]];for(var i=0x1;i<=a['length'];i++){var arr=[-0x1];c['push'](arr);}lcs(a,b);console['log'](c[a['length']][b['length']]);}", "test_cases": [["3\nabcbdab\nbdcaba\nabc\nabc\nabc\nbc", "4\n3\n2"]], "original": "function lcs(x, y) {\n    var m = x.length;\n    var n = y.length;\n\n    for (var i = 1; i <= m; i++) {\n        c[i][0] = 0;\n    }\n    for (var j = 1; j <= n; j++) {\n        c[0][j] = 0;\n    }\n\n    for (var i = 1; i <= m; i++) {\n        for (var j = 1; j <=n; j++) {\n            if (x[i] == y[j]) {\n                c[i][j] = c[i - 1][j - 1] + 1;\n            } else if (c[i - 1][j] >= c[i][j - 1]) {\n                c[i][j] = c[i - 1][j];\n            } else {\n                c[i][j] = c[i][j - 1];\n            }\n        }\n    }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar n = +lines.shift() - 0;\n\nfor (var idx = 0; idx < n; idx++) {\n    var a = lines.shift();\n    var b = lines.shift();\n\n    var c = [[0]];\n    for (var i = 1; i <= a.length; i++) {\n        var arr = [-1];\n        c.push(arr);\n    }\n    lcs(a, b);\n    console.log(c[a.length][b.length]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 538, "deobfuscated": "function lcs(x, y) {\n  var m = x.length;\n  var n = y.length;\n  for (var i = 1; i <= m; i++) {\n    c[i][0] = 0;\n  }\n  for (var j = 1; j <= n; j++) {\n    c[0][j] = 0;\n  }\n  for (var i = 1; i <= m; i++) {\n    for (var j = 1; j <= n; j++) {\n      if (x[i] == y[j]) {\n        c[i][j] = c[i - 1][j - 1] + 1;\n      } else if (c[i - 1][j] >= c[i][j - 1]) {\n        c[i][j] = c[i - 1][j];\n      } else {\n        c[i][j] = c[i][j - 1];\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nvar n = +lines.shift() - 0;\nfor (var idx = 0; idx < n; idx++) {\n  var a = lines.shift();\n  var b = lines.shift();\n  var c = [[0]];\n  for (var i = 1; i <= a.length; i++) {\n    var arr = [-1];\n    c.push(arr);\n  }\n  lcs(a, b);\n  console.log(c[a.length][b.length]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9716531425322351, "ngram_match_score": 0.9392769817730214, "weighted_ngram_match_score": 0.947335588355919, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02261_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x0a');const N=Number(input[0x0]);const A1=input[0x1]['split']('\\x20');const A2=A1['concat']();bubbleSort(A1,N);console['log'](A1['join']('\\x20'));console['log']('Stable');selectionSort(A2,N);console['log'](A2['join']('\\x20'));console['log'](A2['every']((v,i)=>v===A1[i])?'Stable':'Not\\x20stable');};function bubbleSort(A,N){for(let i=0x0;i<N-0x1;++i){for(let j=N-0x1;j>=i+0x1;--j){if(Number(A[j-0x1][0x1])>Number(A[j][0x1])){const tmp=A[j];A[j]=A[j-0x1];A[j-0x1]=tmp;}}}}function selectionSort(A,N){for(let i=0x0;i<N-0x1;++i){let minj=i;for(let j=i;j<N;++j){if(Number(A[j][0x1])<Number(A[minj][0x1])){minj=j;}}if(i!==minj){const tmp=A[i];A[i]=A[minj];A[minj]=tmp;}}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\nH4 C9 S4 D2 C3", "D2 C3 H4 S4 C9\nStable\nD2 C3 S4 H4 C9\nNot stable"], ["2\nS1 H1", "S1 H1\nStable\nS1 H1\nStable"]], "original": "'use strict';\n\nconst main = input => {\n  input = input.split('\\n');\n  const N = Number(input[0]);\n  const A1 = input[1].split(' ');\n  const A2 = A1.concat();\n  bubbleSort(A1, N);\n  console.log(A1.join(' '));\n  console.log('Stable');\n  selectionSort(A2, N);\n  console.log(A2.join(' '));\n  console.log(A2.every((v, i) => v === A1[i]) ? 'Stable' : 'Not stable');\n};\n\nfunction bubbleSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    for (let j = N - 1; j >= i + 1; --j) {\n      if (Number(A[j - 1][1]) > Number(A[j][1])) {\n        const tmp = A[j];\n        A[j] = A[j - 1];\n        A[j - 1] = tmp;\n      }\n    }\n  }\n}\n\nfunction selectionSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    let minj = i;\n    for (let j = i; j < N; ++j) {\n      if (Number(A[j][1]) < Number(A[minj][1])) {\n        minj = j;\n      }\n    }\n    if (i !== minj) {\n      const tmp = A[i];\n      A[i] = A[minj];\n      A[minj] = tmp;\n    }\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 539, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\"\\n\");\n  const N = Number(input[0]);\n  const A1 = input[1].split(\" \");\n  const A2 = A1.concat();\n  bubbleSort(A1, N);\n  console.log(A1.join(\" \"));\n  console.log(\"Stable\");\n  selectionSort(A2, N);\n  console.log(A2.join(\" \"));\n  console.log(A2.every((v, i) => v === A1[i]) ? \"Stable\" : \"Not stable\");\n};\nfunction bubbleSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    for (let j = N - 1; j >= i + 1; --j) {\n      if (Number(A[j - 1][1]) > Number(A[j][1])) {\n        const tmp = A[j];\n        A[j] = A[j - 1];\n        A[j - 1] = tmp;\n      }\n    }\n  }\n}\nfunction selectionSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    let minj = i;\n    for (let j = i; j < N; ++j) {\n      if (Number(A[j][1]) < Number(A[minj][1])) {\n        minj = j;\n      }\n    }\n    if (i !== minj) {\n      const tmp = A[i];\n      A[i] = A[minj];\n      A[minj] = tmp;\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8819719623663025, "ngram_match_score": 0.8664958921882471, "weighted_ngram_match_score": 0.8719182730664367, "syntax_match_score": 1.0, "dataflow_match_score": 0.7894736842105263}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02275_1", "type": "JavaScript", "obfuscated": "(function main(){const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const n=Number(lines['shift']());const arr=lines['shift']()['split']('\\x20')['map'](Number);const k=0x2710;let cnt_arr=[];for(let i=0x0;i<=k;i++)cnt_arr[i]=0x0;for(let i=0x0;i<n;i++)cnt_arr[arr[i]]++;for(let i=0x1;i<=k;i++)cnt_arr[i]+=cnt_arr[i-0x1];let out_arr=[];for(let i=n-0x1;i>=0x0;i--)out_arr[--cnt_arr[arr[i]]]=arr[i];console['log'](out_arr['join']('\\x20'));}());", "test_cases": [["7\n2 5 1 3 2 3 0", "0 1 2 2 3 3 5"]], "original": "(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n  const arr = lines.shift().split(' ').map(Number);\n  const k = 10000;\n  let cnt_arr = [];\n  for (let i = 0; i <= k; i++) cnt_arr[i] = 0;\n  for (let i = 0; i < n; i++) cnt_arr[arr[i]]++;\n  for (let i = 1; i <= k; i++) cnt_arr[i] += cnt_arr[i - 1];\n  let out_arr = [];\n  for (let i = n - 1; i >= 0; i--) out_arr[--cnt_arr[arr[i]]] = arr[i];\n  console.log(out_arr.join(' '));\n})();\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 540, "deobfuscated": "(function main() {\n  const lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  const n = Number(lines.shift());\n  const arr = lines.shift().split(\" \").map(Number);\n  const k = 10000;\n  let cnt_arr = [];\n  for (let i = 0; i <= k; i++) {\n    cnt_arr[i] = 0;\n  }\n  for (let i = 0; i < n; i++) {\n    cnt_arr[arr[i]]++;\n  }\n  for (let i = 1; i <= k; i++) {\n    cnt_arr[i] += cnt_arr[i - 1];\n  }\n  let out_arr = [];\n  for (let i = n - 1; i >= 0; i--) {\n    out_arr[--cnt_arr[arr[i]]] = arr[i];\n  }\n  console.log(out_arr.join(\" \"));\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8103181155262755, "ngram_match_score": 0.6462928906385376, "weighted_ngram_match_score": 0.7250317227051563, "syntax_match_score": 0.9038461538461539, "dataflow_match_score": 0.9661016949152542}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02467_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var n=parseInt(input[0x0][0x0],0xa);var originalN=n;var v_ans=[];var start=0x2;whole_loop:while(!![]){for(var i=start;i<=Math['sqrt'](n);i++){if(n%i===0x0){v_ans['push'](i);n/=i;start=i;continue whole_loop;}}v_ans['push'](n);break;}console['log'](originalN['toString']()+':\\x20'+v_ans['join']('\\x20'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["12", "12: 2 2 3"], ["126", "126: 2 3 3 7"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n    var n = parseInt(input[0][0], 10);\n    var originalN = n;\n    var v_ans = [];\n    var start = 2;\n    whole_loop:\n    while (true){\n        for (var i = start; i <= Math.sqrt(n); i++){\n            if (n % i === 0) {\n                v_ans.push(i);\n                n /= i;\n                start = i;\n                continue whole_loop;\n            }\n        }\n        v_ans.push(n);\n        break;\n    }\n    console.log(originalN.toString() + \": \" + v_ans.join(\" \"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 541, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var n = parseInt(input[0][0], 10);\n  var originalN = n;\n  var v_ans = [];\n  var start = 2;\n  whole_loop: while (true) {\n    for (var i = start; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        v_ans.push(i);\n        n /= i;\n        start = i;\n        continue whole_loop;\n      }\n    }\n    v_ans.push(n);\n    break;\n  }\n  console.log(originalN.toString() + \": \" + v_ans.join(\" \"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9145357416997408, "ngram_match_score": 0.8032886619942954, "weighted_ngram_match_score": 0.854854304804668, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02548_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');N=parseInt(input[0x0]['split']('\\x20'));var result=0x0;for(var i=0x1;i<N;i++){result+=Math['floor']((N-0x1)/ i);}console['log']('%d',result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "3"], ["100", "473"], ["1000000", "13969985"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  N = parseInt(input[0].split(\" \"));\n  var result = 0;\n  for(var i=1; i<N; i++) {\n    result += Math.floor((N-1)/i);\n  }\n  //出力\n  console.log(\"%d\", result);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 542, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  N = parseInt(input[0].split(\" \"));\n  var result = 0;\n  for (var i = 1; i < N; i++) {\n    result += Math.floor((N - 1) / i);\n  }\n  console.log(\"%d\", result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7167438542387481, "ngram_match_score": 0.422575783710386, "weighted_ngram_match_score": 0.4443996332446061, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02616_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N,K],A]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));let Am=[],Ap=[];for(let i=0x0;i<N;i++){if(A[i]>0x0)Ap['push'](A[i]);if(A[i]<0x0)Am['push'](A[i]);}const MOD=BigInt(0x3b9aca00+0x7),mul=(a,b)=>(BigInt(a)*BigInt(b)%MOD+MOD)%MOD;Am['sort']((a,b)=>a-b);Ap['sort']((a,b)=>b-a);if(Ap['length']===0x0&&K&0x1)return''+Am['slice'](-K)['reduce'](mul,0x1);let om=0x0,op=0x0,ap=[],am=[];for(let i=0x0;i<K;i++){if((Ap[op]|0x0)>-(Am[om]|0x0)){ap['push'](Ap[op]);op++;}else{am['push'](Am[om]);om++;}}if(am['length']&0x1){if((Ap[op]|0x0)>-(Am[om]|0x0)){ap['push'](Ap[op]);am['pop']();}else{am['push'](Am[om]);ap['pop']();}}return''+mul(ap['reduce'](mul,0x1),am['reduce'](mul,0x1));})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4 2\n1 2 -3 -4", "12"], ["4 3\n-1 -2 -3 -4", "1000000001"], ["2 1\n-1 1000000000", "1000000000"], ["10 10\n1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1", "999983200"]], "original": "console.log((args=>{\n  const [[N,K],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  let Am = [], Ap = [];\n  for ( let i = 0; i < N; i++ ) {\n    if ( A[i] > 0 ) Ap.push(A[i]);\n    if ( A[i] < 0 ) Am.push(A[i]);\n  }\n  const MOD = BigInt(1e9+7), mul = (a,b) => (BigInt(a)*BigInt(b)%MOD+MOD)%MOD;\n  Am.sort((a,b)=>a-b);\n  Ap.sort((a,b)=>b-a);\n  if ( Ap.length === 0 && K&1 ) return `${ Am.slice(-K).reduce(mul,1) }`;\n  let om = 0, op = 0, ap = [], am = [];\n  for ( let i = 0; i < K; i++ ) {\n    if ( (Ap[op]|0) > -(Am[om]|0) ) {\n      ap.push(Ap[op]); op++;\n    } else {\n      am.push(Am[om]); om++;\n    }\n  }\n  if ( am.length&1 ) {\n    if ( (Ap[op]|0) > -(Am[om]|0) ) {\n      ap.push(Ap[op]); am.pop();\n    } else {\n      am.push(Am[om]); ap.pop();\n    }\n  }\n  return `${mul(ap.reduce(mul,1),am.reduce(mul,1))}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 543, "deobfuscated": "console.log((args => {\n  const [[N, K], A] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  let Am = [];\n  let Ap = [];\n  for (let i = 0; i < N; i++) {\n    if (A[i] > 0) {\n      Ap.push(A[i]);\n    }\n    if (A[i] < 0) {\n      Am.push(A[i]);\n    }\n  }\n  const MOD = BigInt(1000000007);\n  const mul = (a, b) => (BigInt(a) * BigInt(b) % MOD + MOD) % MOD;\n  Am.sort((a, b) => a - b);\n  Ap.sort((a, b) => b - a);\n  if (Ap.length === 0 && K & 1) {\n    return \"\" + Am.slice(-K).reduce(mul, 1);\n  }\n  let om = 0;\n  let op = 0;\n  let ap = [];\n  let am = [];\n  for (let i = 0; i < K; i++) {\n    if ((Ap[op] | 0) > -(Am[om] | 0)) {\n      ap.push(Ap[op]);\n      op++;\n    } else {\n      am.push(Am[om]);\n      om++;\n    }\n  }\n  if (am.length & 1) {\n    if ((Ap[op] | 0) > -(Am[om] | 0)) {\n      ap.push(Ap[op]);\n      am.pop();\n    } else {\n      am.push(Am[om]);\n      ap.pop();\n    }\n  }\n  return \"\" + mul(ap.reduce(mul, 1), am.reduce(mul, 1));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5596049144258565, "ngram_match_score": 0.2585019653743658, "weighted_ngram_match_score": 0.3555215570633597, "syntax_match_score": 0.8743961352657005, "dataflow_match_score": 0.75}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02817_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');st=input[0x0]['split']('\\x20');console['log'](st[0x1]+st[0x0]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["oder atc", "atcoder"], ["humu humu", "humuhumu"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    // 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    st = input[0].split(\" \");\n  \n\n  //  s = st[1].trim();   //Sうけとり\n  //  t = st[0].trim();   //Tうけとり\n    \n  //  var ts='';\n   // ts =s+t;    //T+S  連結\n    \n    console.log(st[1]+st[0]);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 544, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  st = input[0].split(\" \");\n  console.log(st[1] + st[0]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5794528601434485, "ngram_match_score": 0.11959975794746613, "weighted_ngram_match_score": 0.1982116826263278, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02838_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0],0xa);var x=input[0x1]['split']('\\x20');var y=new Array(n);var count=0x0;var count2=0x0;var a=0x3b9aca07;for(var i=0x0;i<n;i++){x[i]=parseInt(x[i],0xa);y[i]=Math['floor'](x[i]/0x100000000);x[i]=x[i]%0x100000000;}for(var i=0x0;i<n-0x1;i++){for(var j=i+0x1;j<n;j++){count+=x[i]^x[j];if(count>0x100000000/0x2){count=count%(0x100000000/0x2);count2+=0.5;}count2+=y[i]^y[j];}}count=count+count2*0x100000000;console['log'](count%a);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2 3", "6"], ["10\n3 1 4 1 5 9 2 6 5 3", "237"], ["10\n3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820", "103715602"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n  　var n = parseInt(input[0], 10);\n  　var x = input[1].split(\" \");\n  \tvar y = new Array(n);\n  \tvar count = 0;\n  \tvar count2 = 0;\n    var a = 1000000007;\n    for(var i=0; i<n; i++){\n\t    x[i] = parseInt(x[i], 10);\n      \ty[i] = Math.floor(x[i]/4294967296);\n      \tx[i] = x[i]%4294967296;\n    }\n  for(var i=0; i<n-1; i++){\n  \tfor(var j=i+1; j<n; j++){\n      \tcount += x[i] ^ x[j];\n      if(count > 4294967296/2){\n        count = count%(4294967296/2);\n        count2 += 0.5;\n      }\n      count2 += y[i] ^ y[j];\n    }\n  }\n  count = count + count2 * 4294967296;\n\tconsole.log(count%a);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 545, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var x = input[1].split(\" \");\n  var y = new Array(n);\n  var count = 0;\n  var count2 = 0;\n  var a = 1000000007;\n  for (var i = 0; i < n; i++) {\n    x[i] = parseInt(x[i], 10);\n    y[i] = Math.floor(x[i] / 4294967296);\n    x[i] = x[i] % 4294967296;\n  }\n  for (var i = 0; i < n - 1; i++) {\n    for (var j = i + 1; j < n; j++) {\n      count += x[i] ^ x[j];\n      if (count > 2147483648) {\n        count = count % 2147483648;\n        count2 += 0.5;\n      }\n      count2 += y[i] ^ y[j];\n    }\n  }\n  count = count + count2 * 4294967296;\n  console.log(count % a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5362876690476515, "ngram_match_score": 0.47536675285410024, "weighted_ngram_match_score": 0.613954695093484, "syntax_match_score": 0.853448275862069, "dataflow_match_score": 0.20238095238095238}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0019674658039365855, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023391812865497075, "new_decrease_halstead_effort": 0.04439413947054005}}
{"filename": "p03417_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20')['map'](a=>parseInt(a));var N=input[0x0];var M=input[0x1];var ans=0x0;if(N===0x1&&M===0x1)ans=0x1;else if(N===0x1||M===0x1)ans=N+M-0x3;else ans=(N-0x2)*(M-0x2);if(ans>0x1ff973cafa8000){ans=Math['floor']((N-0x2)/0x2710)*(M-0x2);tmp=(N-0x2)%0x2710*(M-0x2);ans+=Math['floor'](tmp/0x2710);tmp=('0000'+tmp%0x2710)['slice'](-0x4);ans+=tmp;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2", "0"], ["1 7", "5"], ["314 1592", "496080"]], "original": "function Main(input) {\n\tinput = input.split(\" \").map(a => parseInt(a));\n\tvar N = input[0];\n\tvar M = input[1];\n\tvar ans = 0;\n\tif(N === 1 && M === 1) ans = 1;\n\telse if(N === 1 || M === 1) ans = N + M - 3;\n\telse ans = (N - 2) * (M - 2);\n\t\n\tif(ans > 9e15){\n\t\tans = Math.floor((N - 2) / 10000) * (M - 2);\n\t\ttmp = (N - 2) % 10000 * (M - 2);\n\t\tans += Math.floor(tmp / 10000);\n\t\ttmp = (\"0000\" + tmp % 10000).slice(-4);\n\t\tans += tmp;\n\t}\n\t\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 546, "deobfuscated": "function Main(input) {\n  input = input.split(\" \").map(a => parseInt(a));\n  var N = input[0];\n  var M = input[1];\n  var ans = 0;\n  if (N === 1 && M === 1) {\n    ans = 1;\n  } else if (N === 1 || M === 1) {\n    ans = N + M - 3;\n  } else {\n    ans = (N - 2) * (M - 2);\n  }\n  if (ans > 9000000000000000) {\n    ans = Math.floor((N - 2) / 10000) * (M - 2);\n    tmp = (N - 2) % 10000 * (M - 2);\n    ans += Math.floor(tmp / 10000);\n    tmp = (\"0000\" + tmp % 10000).slice(-4);\n    ans += tmp;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8855860810921479, "ngram_match_score": 0.7652167699599965, "weighted_ngram_match_score": 0.8437942210752615, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03607_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split'](/\\n/)['map'](v=>~~v);let set=new Set();for(let i=0x1;i<input['length'];i++){if(set['has'](input[i])){set['delete'](input[i]);}else{set['add'](input[i]);}}console['log'](set['size']);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n6\n2\n6", "1"], ["4\n2\n5\n5\n2", "0"], ["6\n12\n22\n16\n22\n18\n12", "2"]], "original": "\"use strict\"\n\nfunction main(input) {\n  input = input.split(/\\n/).map(v => ~~v)\n  let set = new Set()\n  for (let i = 1; i < input.length; i++) {\n    //\n    if (set.has(input[i])) {\n      set.delete(input[i])\n    } else {\n      set.add(input[i])\n    }\n  }\n  console.log(set.size)\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 547, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(/\\n/).map(v => ~~v);\n  let set = new Set();\n  for (let i = 1; i < input.length; i++) {\n    if (set.has(input[i])) {\n      set.delete(input[i]);\n    } else {\n      set.add(input[i]);\n    }\n  }\n  console.log(set.size);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7598899796558851, "ngram_match_score": 0.5132475827892771, "weighted_ngram_match_score": 0.5263123358342634, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03986_1", "type": "JavaScript", "obfuscated": "const Main=input=>{while(input['indexOf']('ST')>-0x1){input=input['replace'](/ST/g,'');}console['log'](input['length']);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["TSTTSS", "4"], ["SSTTST", "0"], ["TSSTTTSS", "4"]], "original": "const Main = (input) => {\n    while(input.indexOf(\"ST\") > -1) {\n        input = input.replace(/ST/g, \"\");\n    }\n    console.log(input.length);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 548, "deobfuscated": "const Main = input => {\n  while (input.indexOf(\"ST\") > -1) {\n    input = input.replace(/ST/g, \"\");\n  }\n  console.log(input.length);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7411402902938538, "ngram_match_score": 0.5305903666964891, "weighted_ngram_match_score": 0.5655497418473469, "syntax_match_score": 0.868421052631579, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00027_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var a=p['shift']()['split']('\\x20')['map'](Number);var m=a['shift']();var d=a['shift']();if(m===0x0&&d===0x0){return;}var date=new Date(0x7d4,m-0x1,d);console['log'](getWeekDay(date['getDay']()));}}(require('fs')['readFileSync']('/dev/stdin','utf8')));function getWeekDay(d){var week=['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];return week[d];}", "test_cases": [["1 1\n2 29\n0 0", "Thursday\nSunday"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  while (true) {\n    var a = p.shift().split(' ').map(Number);\n    var m = a.shift();\n    var d = a.shift();\n    if (m === 0 && d === 0) {\n      return;\n    }\n    var date = new Date(2004, m - 1, d);\n    //console.log(date);\n    console.log(getWeekDay(date.getDay()) );\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction getWeekDay(d) {\n  var week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return week[d];\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 549, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\");\n  while (true) {\n    var a = p.shift().split(\" \").map(Number);\n    var m = a.shift();\n    var d = a.shift();\n    if (m === 0 && d === 0) {\n      return;\n    }\n    var date = new Date(2004, m - 1, d);\n    console.log(getWeekDay(date.getDay()));\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction getWeekDay(d) {\n  var week = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  return week[d];\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.79412975490184, "ngram_match_score": 0.6351761093425075, "weighted_ngram_match_score": 0.6549792739012162, "syntax_match_score": 1.0, "dataflow_match_score": 0.8863636363636364}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006156685045567878, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.028037383177570097, "new_decrease_halstead_effort": 0.12121425057972057}}
{"filename": "p00586_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['forEach'](function(v){var a=v['split']('\\x20')[0x0]-0x0;var b=v['split']('\\x20')[0x1]-0x0;console['log'](a+b);});", "test_cases": [["1 2\n10 5\n100 20", "3\n15\n120"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\nvar a=(v.split(\" \"))[0]-0;\nvar b=(v.split(\" \"))[1]-0;\nconsole.log(a+b);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 550, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.forEach(function (v) {\n  var a = v.split(\" \")[0] - 0;\n  var b = v.split(\" \")[1] - 0;\n  console.log(a + b);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.42790406890180777, "ngram_match_score": 0.03819633968206938, "weighted_ngram_match_score": 0.08518464180751453, "syntax_match_score": 0.5882352941176471, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02238_1", "type": "JavaScript", "obfuscated": "(function main(){const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const n=Number(lines['shift']());const adjLists=Array['from'](Array(n),()=>[]);lines['forEach']((l,i)=>l['split']('\\x20')['splice'](0x2)['forEach'](e=>adjLists[i]['push'](e-0x1)));const d=[],f=[];dfs(adjLists,d,f);for(let i=0x0;i<n;i++){console['log'](i+0x1+'\\x20'+d[i]+'\\x20'+f[i]);}}());function dfs(adjLists,d,f){const WHITE=0x0,GRAY=0x1,BLACK=0x2;const size=adjLists['length'];const color=Array['from'](adjLists,()=>WHITE);let time=0x0;function visit(u){color[u]=GRAY;d[u]=++time;adjLists[u]['forEach'](v=>{if(color[v]===WHITE){visit(v);}});color[u]=BLACK;f[u]=++time;}adjLists['forEach']((e,u)=>{if(color[u]===WHITE)visit(u);});}", "test_cases": [["4\n1 1 2\n2 1 4\n3 0\n4 1 3", "1 1 8\n2 2 7\n3 4 5\n4 3 6"], ["6\n1 2 2 3\n2 2 3 4\n3 1 5\n4 1 6\n5 1 6\n6 0", "1 1 12\n2 2 11\n3 3 8\n4 9 10\n5 4 7\n6 5 6"]], "original": "(function main() {\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n\n  const adjLists = Array.from(Array(n), () => []);\n  lines.forEach((l, i) => l.split(' ').splice(2).forEach(e => adjLists[i].push(e-1)));\n\n  const d = [], f = [];\n  dfs(adjLists, d, f);\n  for (let i = 0; i < n; i++) {\n    console.log(`${i + 1} ${d[i]} ${f[i]}`);\n  }\n})();\n\nfunction dfs(adjLists, d, f) {\n  const WHITE = 0, GRAY = 1, BLACK = 2;\n  const size = adjLists.length;\n  const color = Array.from(adjLists, () => WHITE);\n\n  let time = 0;\n  function visit(u) {\n    color[u] = GRAY;\n    d[u] = ++time;\n    adjLists[u].forEach(v => {\n      if (color[v] === WHITE) {\n        visit(v);\n      }\n    });\n    color[u] = BLACK;\n    f[u] = ++time;\n  }\n  adjLists.forEach((e, u) => {\n    if (color[u] === WHITE) visit(u);\n  });\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 551, "deobfuscated": "(function main() {\n  const lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  const n = Number(lines.shift());\n  const adjLists = Array.from(Array(n), () => []);\n  lines.forEach((l, i) => l.split(\" \").splice(2).forEach(e => adjLists[i].push(e - 1)));\n  const d = [];\n  const f = [];\n  dfs(adjLists, d, f);\n  for (let i = 0; i < n; i++) {\n    console.log(i + 1 + \" \" + d[i] + \" \" + f[i]);\n  }\n})();\nfunction dfs(adjLists, d, f) {\n  const WHITE = 0;\n  const GRAY = 1;\n  const BLACK = 2;\n  const size = adjLists.length;\n  const color = Array.from(adjLists, () => WHITE);\n  let time = 0;\n  function visit(u) {\n    color[u] = GRAY;\n    d[u] = ++time;\n    adjLists[u].forEach(v => {\n      if (color[v] === WHITE) {\n        visit(v);\n      }\n    });\n    color[u] = BLACK;\n    f[u] = ++time;\n  }\n  adjLists.forEach((e, u) => {\n    if (color[u] === WHITE) {\n      visit(u);\n    }\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8358347630294888, "ngram_match_score": 0.7048331360993139, "weighted_ngram_match_score": 0.7997962385992864, "syntax_match_score": 0.8387096774193549, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0004991575286631411, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.019354838709677358, "new_decrease_halstead_effort": -0.01935483870967758}}
{"filename": "p02274_1", "type": "JavaScript", "obfuscated": "var cnt=0x0;(function main(){const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const n=Number(lines['shift']());let arr=lines['shift']()['split']('\\x20')['map'](Number);mergeSort(arr,0x0,n);console['log'](cnt);}());function merge(arr,left,mid,right){let L=arr['slice'](left,mid);let R=arr['slice'](mid,right);L['push'](Infinity);R['push'](Infinity);let i=0x0;let j=0x0;let t=0x0;for(let k=left;k<right;k++){if(L[i]<R[j]){arr[k]=L[i++];cnt+=t;}else{arr[k]=R[j++];t+=0x1;}}}function mergeSort(arr,left,right){if(left+0x1<right){let mid=Math['floor']((left+right)/0x2);mergeSort(arr,left,mid);mergeSort(arr,mid,right);merge(arr,left,mid,right);}}", "test_cases": [["5\n3 5 2 1 4", "6"], ["3\n3 1 2", "2"]], "original": "var cnt = 0;\n(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n  let arr = lines.shift().split(' ').map(Number);\n  mergeSort(arr, 0, n);\n  console.log(cnt);\n})();\n\nfunction merge(arr, left, mid, right) {\n  let L = arr.slice(left, mid);\n  let R = arr.slice(mid, right);\n  L.push(Infinity);\n  R.push(Infinity);\n  let i = 0;\n  let j = 0;\n  let t = 0;\n  for (let k = left; k < right; k++) {\n    if (L[i] < R[j]) {\n      arr[k] = L[i++];\n      cnt += t;\n    } else {\n      arr[k] = R[j++];\n      t += 1;\n    }\n  }\n}\n\nfunction mergeSort(arr, left, right) {\n  if (left + 1 < right) {\n    let mid = Math.floor((left + right) / 2);\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid, right);\n    merge(arr, left, mid, right);\n  }\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 552, "deobfuscated": "var cnt = 0;\n(function main() {\n  const lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  const n = Number(lines.shift());\n  let arr = lines.shift().split(\" \").map(Number);\n  mergeSort(arr, 0, n);\n  console.log(cnt);\n})();\nfunction merge(arr, left, mid, right) {\n  let L = arr.slice(left, mid);\n  let R = arr.slice(mid, right);\n  L.push(Infinity);\n  R.push(Infinity);\n  let i = 0;\n  let j = 0;\n  let t = 0;\n  for (let k = left; k < right; k++) {\n    if (L[i] < R[j]) {\n      arr[k] = L[i++];\n      cnt += t;\n    } else {\n      arr[k] = R[j++];\n      t += 1;\n    }\n  }\n}\nfunction mergeSort(arr, left, right) {\n  if (left + 1 < right) {\n    let mid = Math.floor((left + right) / 2);\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid, right);\n    merge(arr, left, mid, right);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9533348155217567, "ngram_match_score": 0.9114053196341604, "weighted_ngram_match_score": 0.9225524991538975, "syntax_match_score": 1.0, "dataflow_match_score": 0.979381443298969}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02276_1", "type": "JavaScript", "obfuscated": "const config={'input':'/dev/stdin','newline':'\\x0a'};const line=require('fs')['readFileSync'](config['input'],'utf-8')['split'](config['newline']);const list=line[0x1]['split']('\\x20')['map'](x=>parseInt(x));const partition=arr=>{const x=arr[arr['length']-0x1];const result=[...arr];let i=-0x1;for(let j=0x0;j<arr['length']-0x1;j++){if(result[j]<=x){i++;const tmp=result[i];result[i]=result[j];result[j]=tmp;}}const tmp=result[i+0x1];result[i+0x1]=result[arr['length']-0x1];result[arr['length']-0x1]=tmp;return[i+0x1,result];};const res=partition(list);console['log'](res[0x1]['map']((x,i)=>i===res[0x0]?'['+x+']':x['toString']())['join']('\\x20'));", "test_cases": [["12\n13 19 9 5 12 8 7 4 21 2 6 11", "9 5 8 7 4 2 6 [11] 21 13 19 12"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nconst list = line[1].split(' ').map(x => parseInt(x));\n\nconst partition = arr => {\n    const x = arr[arr.length-1];\n    const result = [...arr];\n    let i = -1;\n    for (let j = 0; j < arr.length - 1; j++) {\n        if (result[j] <= x) {\n            i++;\n            const tmp = result[i];\n            result[i] = result[j];\n            result[j] = tmp;\n        }\n    }\n    const tmp = result[i+1];\n    result[i+1] = result[arr.length-1];\n    result[arr.length-1] = tmp;\n\n    return [i+1, result];\n}\n\nconst res = partition(list);\n\nconsole.log(res[1].map((x, i) => i === res[0] ? `[${x}]` : x.toString()).join(' '));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 553, "deobfuscated": "const config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nconst line = require(\"fs\").readFileSync(config.input, \"utf-8\").split(config.newline);\nconst list = line[1].split(\" \").map(x => parseInt(x));\nconst partition = arr => {\n  const x = arr[arr.length - 1];\n  const result = [...arr];\n  let i = -1;\n  for (let j = 0; j < arr.length - 1; j++) {\n    if (result[j] <= x) {\n      i++;\n      const tmp = result[i];\n      result[i] = result[j];\n      result[j] = tmp;\n    }\n  }\n  const tmp = result[i + 1];\n  result[i + 1] = result[arr.length - 1];\n  result[arr.length - 1] = tmp;\n  return [i + 1, result];\n};\nconst res = partition(list);\nconsole.log(res[1].map((x, i) => i === res[0] ? \"[\" + x + \"]\" : x.toString()).join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7932954671334806, "ngram_match_score": 0.603463050269111, "weighted_ngram_match_score": 0.7151382975319281, "syntax_match_score": 0.9016393442622951, "dataflow_match_score": 0.9529411764705882}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02287_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/[ |\\n]/)['slice'](0x1)['map']((k,i,a)=>'node\\x20'+ ++i+':\\x20key\\x20=\\x20'+k+',\\x20'+(i-0x1?'parent\\x20key\\x20=\\x20'+a[Math['floor'](i/0x2)-0x1]+',\\x20':'')+(0x2*i-0x1<a['length']?'left\\x20key\\x20=\\x20'+a[0x2*i-0x1]+',\\x20':'')+(0x2*i<a['length']?'right\\x20key\\x20=\\x20'+a[0x2*i]+',\\x20':''))['join']('\\x0a'));", "test_cases": [["5\n7 8 1 2 3", "node 1: key = 7, left key = 8, right key = 1, \nnode 2: key = 8, parent key = 7, left key = 2, right key = 3, \nnode 3: key = 1, parent key = 7, \nnode 4: key = 2, parent key = 8, \nnode 5: key = 3, parent key = 8,"]], "original": "console.log(require('fs').readFileSync('/dev/stdin','utf8').trim().split(/[ |\\n]/).slice(1).map((k,i,a)=>`node ${++i}: key = ${k}, `+((i-1)?`parent key = ${a[Math.floor(i/2)-1]}, `:'')+(2*i-1<a.length?`left key = ${a[2*i-1]}, `:'')+(2*i<a.length?`right key = ${a[2*i]}, `:'')).join('\\n'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 554, "deobfuscated": "console.log(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/[ |\\n]/).slice(1).map((k, i, a) => \"node \" + ++i + \": key = \" + k + \", \" + (i - 1 ? \"parent key = \" + a[Math.floor(i / 2) - 1] + \", \" : \"\") + (i * 2 - 1 < a.length ? \"left key = \" + a[i * 2 - 1] + \", \" : \"\") + (i * 2 < a.length ? \"right key = \" + a[i * 2] + \", \" : \"\")).join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.384667588611565, "ngram_match_score": 0.009117450878144072, "weighted_ngram_match_score": 0.043066417081629366, "syntax_match_score": 0.4864864864864865, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02417_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['trim']();input=input['toLowerCase']();var abc='abcdefghijklmnopqrstuvwxyz'['split']('');var obj={};for(var i=0x0;i<abc['length'];i++)obj[abc[i]]=0x0;input=input['replace'](/[a-z]/g,function(str){obj[str]++;return str;});abc['forEach'](function(v,i){console['log'](v+'\\x20:\\x20'+obj[v]);});", "test_cases": [["This is a pen.", "a : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.trim();\ninput=input.toLowerCase();\nvar abc='abcdefghijklmnopqrstuvwxyz'.split(\"\");\nvar obj={};\nfor(var i=0;i<abc.length;i++)obj[abc[i]]=0;\n\ninput=input.replace(/[a-z]/g,function(str){\nobj[str]++;\nreturn str;\n});\n\nabc.forEach(function(v,i){\nconsole.log(v+\" : \"+obj[v]);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 555, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.trim();\ninput = input.toLowerCase();\nvar abc = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nvar obj = {};\nfor (var i = 0; i < abc.length; i++) {\n  obj[abc[i]] = 0;\n}\ninput = input.replace(/[a-z]/g, function (str) {\n  obj[str]++;\n  return str;\n});\nabc.forEach(function (v, i) {\n  console.log(v + \" : \" + obj[v]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5553826598087113, "ngram_match_score": 0.06700574965630222, "weighted_ngram_match_score": 0.18309631814997143, "syntax_match_score": 0.9714285714285714, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02422_1", "type": "JavaScript", "obfuscated": "'use strict';main(require('fs')['readFileSync']('/dev/stdin','utf8')['replace'](/\\r?\\n$/,'')['split'](/\\r?\\n/));function main(lines){var str=lines['shift']();lines['shift']();var code;while(code=lines['shift']()){code=code['split']('\\x20');var from=+code[0x1],to=+code[0x2];switch(code[0x0]){case'print':console['log'](str['slice'](from,to+0x1));break;case'replace':str=str['slice'](0x0,from)+code[0x3]+str['slice'](to+0x1);break;case'reverse':str=str['slice'](0x0,from)+str['slice'](from,to+0x1)['split']('')['reverse']()['join']('')+str['slice'](to+0x1);break;}}}", "test_cases": [["abcde\n3\nreplace 1 3 xyz\nreverse 0 2\nprint 1 4", "xaze"], ["xyz\n3\nprint 0 2\nreplace 0 2 abc\nprint 0 2", "xyz\nabc"]], "original": "\"use strict\";\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").replace(/\\r?\\n$/, \"\").split(/\\r?\\n/));\n\nfunction main(lines){\n\tvar str = lines.shift();\n\tlines.shift();\n\tvar code;\n\twhile(code = lines.shift()){\n\t\tcode = code.split(\" \");\n\t\tvar from = +code[1], to = +code[2];\n\t\tswitch(code[0]){\n\t\t\tcase \"print\":\n\t\t\t\tconsole.log(str.slice(from, to+1));\n\t\t\t\tbreak;\n\t\t\tcase \"replace\":\n\t\t\t\tstr = str.slice(0, from) + code[3] + str.slice(to+1);\n\t\t\t\tbreak;\n\t\t\tcase \"reverse\":\n\t\t\t\tstr = str.slice(0, from) + str.slice(from, to+1).split(\"\").reverse().join(\"\") + str.slice(to+1);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 556, "deobfuscated": "'use strict';\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").replace(/\\r?\\n$/, \"\").split(/\\r?\\n/));\nfunction main(lines) {\n  var str = lines.shift();\n  lines.shift();\n  var code;\n  while (code = lines.shift()) {\n    code = code.split(\" \");\n    var from = +code[1];\n    var to = +code[2];\n    switch (code[0]) {\n      case \"print\":\n        console.log(str.slice(from, to + 1));\n        break;\n      case \"replace\":\n        str = str.slice(0, from) + code[3] + str.slice(to + 1);\n        break;\n      case \"reverse\":\n        str = str.slice(0, from) + str.slice(from, to + 1).split(\"\").reverse().join(\"\") + str.slice(to + 1);\n        break;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7534686516073793, "ngram_match_score": 0.4713040784657417, "weighted_ngram_match_score": 0.5942946658948101, "syntax_match_score": 0.9482758620689655, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0011326753256819533, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.00694444444444442, "new_decrease_halstead_effort": 0.04556081526673672}}
{"filename": "p02536_1", "type": "JavaScript", "obfuscated": "let lines=[];let reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){lines['push'](line);});reader['on']('close',function(){const [n,m]=lines[0x0]['split']('\\x20');const a=[];const b=[];for(let i=0x0;i<m;i++){[a[i],b[i]]=lines[i+0x1]['split']('\\x20');}const connected=[];connected['push'](a[0x0]);connected['push'](b[0x0]);ans=n-0x2;for(let i=0x1;i<m;i++){if(!connected['includes'](a[i])&&!connected['includes'](b[i])){ans--;}else if(!connected['includes'](a[i])){ans--;connected['push'](a[i]);}else if(!connected['includes'](b[i])){ans--;connected['push'](b[i]);}}console['log'](ans);});", "test_cases": [["3 1\n1 2", "1"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// 標準入力の読み込み\nreader.on('line', function(line) {\n    lines.push(line);\n});\n\nreader.on('close', function() {\n    // 処理の記述\n    const [n, m] = lines[0].split(' ');\n    const a = [];\n    const b = [];\n    for (let i = 0; i < m; i++) {\n        [a[i], b[i]] = lines[i+1].split(' ');\n    }\n    const connected = [];\n    connected.push(a[0]);\n    connected.push(b[0]);\n    ans = n-2;\n    for (let i = 1; i < m; i++) {\n        if ((!connected.includes(a[i])) && (!connected.includes(b[i]))) {\n            ans--;\n        } else if (!connected.includes(a[i])) {\n            ans--;\n            connected.push(a[i]);\n        } else if (!connected.includes(b[i])) {\n            ans--;\n            connected.push(b[i]);\n        }\n\n    }\n\n    // 表示\n    console.log(ans);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 557, "deobfuscated": "let lines = [];\nlet reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  lines.push(line);\n});\nreader.on(\"close\", function () {\n  const [n, m] = lines[0].split(\" \");\n  const a = [];\n  const b = [];\n  for (let i = 0; i < m; i++) {\n    [a[i], b[i]] = lines[i + 1].split(\" \");\n  }\n  const connected = [];\n  connected.push(a[0]);\n  connected.push(b[0]);\n  ans = n - 2;\n  for (let i = 1; i < m; i++) {\n    if (!connected.includes(a[i]) && !connected.includes(b[i])) {\n      ans--;\n    } else if (!connected.includes(a[i])) {\n      ans--;\n      connected.push(a[i]);\n    } else if (!connected.includes(b[i])) {\n      ans--;\n      connected.push(b[i]);\n    }\n  }\n  console.log(ans);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.817706726723817, "ngram_match_score": 0.6746152609799969, "weighted_ngram_match_score": 0.6869387270533107, "syntax_match_score": 0.9246575342465754, "dataflow_match_score": 0.9846153846153847}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02624_1", "type": "JavaScript", "obfuscated": "function*main(){const N=+(yield);let sum=0x0;for(let k=0x1;k<=N;k++)sum+=Math['floor'](k*Math['floor'](0x1+N/k)*Math['floor'](N/k)/0x2);console['log'](sum);}const iter=main();iter['next']();require('readline')['createInterface']({'input':process['stdin']})['on']('line',line=>iter['next'](line));", "test_cases": [["4", "23"], ["100", "26879"], ["10000000", "838627288460105"]], "original": "function *main() {\n  const N = +(yield);\n  \n  let sum = 0;\n  for (let k = 1; k <= N; k++)\n    sum += Math.floor(k * Math.floor(1+N/k) * Math.floor(N/k) / 2);\n  \n  console.log(sum);\n}\nconst iter = main();\niter.next();\nrequire(\"readline\").createInterface({input: process.stdin}).on(\"line\", line => iter.next(line));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 558, "deobfuscated": "function* main() {\n  const N = +(yield);\n  let sum = 0;\n  for (let k = 1; k <= N; k++) {\n    sum += Math.floor(k * Math.floor(1 + N / k) * Math.floor(N / k) / 2);\n  }\n  console.log(sum);\n}\nconst iter = main();\niter.next();\nrequire(\"readline\").createInterface({\n  input: process.stdin\n}).on(\"line\", line => iter.next(line));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7842528716417836, "ngram_match_score": 0.5338662241666582, "weighted_ngram_match_score": 0.665645262400476, "syntax_match_score": 0.9375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02658_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const N=input[0x0]['trim']();const values=input[0x1]['split']('\\x20');for(let i=0x0;i<N;i++){if(values[i]==0x0){console['log']('0');return;}}let result=BigInt(0x1);for(let i=0x0;i<N;i++){const nextVal=BigInt(values[i]);if(nextVal>BigInt(0xde0b6b3a7640000)){console['log']('-1');return;}result=result*nextVal;if(result>BigInt(0xde0b6b3a7640000)){console['log']('-1');return;}}console['log'](Number(result)['toString']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1000000000 1000000000", "1000000000000000000"], ["3\n101 9901 999999000001", "-1"], ["31\n4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0", "0"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = input[0].trim();\n  const values = input[1].split(\" \");\n\n  for (let i=0;i<N;i++) {\n    if (values[i] == 0) {\n    \tconsole.log(\"0\")\n\t    return\n    }\n  }\n  \n  let result = BigInt(1);\n  for (let i=0;i<N;i++) {\n    const nextVal = BigInt(values[i]);\n    \n    if (nextVal > BigInt(1000000000000000000)) {\n      console.log(\"-1\");\n      return\n    }\n    \n    result = result * nextVal;\n    \n    if (result > BigInt(1000000000000000000)) {\n    \tconsole.log(\"-1\");\n        return\n    }\n  }\n\n  console.log(Number(result).toString());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 559, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = input[0].trim();\n  const values = input[1].split(\" \");\n  for (let i = 0; i < N; i++) {\n    if (values[i] == 0) {\n      console.log(\"0\");\n      return;\n    }\n  }\n  let result = BigInt(1);\n  for (let i = 0; i < N; i++) {\n    const nextVal = BigInt(values[i]);\n    if (nextVal > BigInt(1000000000000000000)) {\n      console.log(\"-1\");\n      return;\n    }\n    result = result * nextVal;\n    if (result > BigInt(1000000000000000000)) {\n      console.log(\"-1\");\n      return;\n    }\n  }\n  console.log(Number(result).toString());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8577951848372652, "ngram_match_score": 0.6609123063426571, "weighted_ngram_match_score": 0.770268433006404, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02854_1", "type": "JavaScript", "obfuscated": "function Main(input){var N=parseInt(input[0x0],0xa);var A=input[0x1]['split']('\\x20');var total=0x0;for(var i=0x0;i<N;i++){A[i]=parseInt(A[i],0xa);total+=A[i];}var result=0x0;var mae=0x0;var ato=0x0;var target=0x0;for(var i=0x0;i<N;i++){if(mae+A[i]<total/0x2){mae+=A[i];}else if(mae+A[i]==total/0x2){console['log']('%s',0x0);return;}else{target=i;ato=total-mae-A[i];break;}}var diff=Math['abs'](ato-mae);var result=Math['abs'](A[i]-diff);console['log']('%s',result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["3\n2 4 3", "3"], ["12\n100 104 102 105 103 103 101 105 104 102 104 101", "0"]], "original": "function Main(input) {\n  var N = parseInt(input[0], 10);\n  var A = input[1].split(\" \");\n\n  var total = 0;\n  for (var i = 0; i < N; i++) {\n    A[i] = parseInt(A[i], 10);\n    total += A[i];\n  }\n//   console.log(\"total:%s\", total);\n\n  var result = 0;\n  var mae = 0;\n  var ato = 0;\n  var target = 0;\n  for (var i = 0; i < N; i++) {\n    if (mae + A[i] < total / 2) {\n      mae += A[i];\n    } else if (mae + A[i] == total / 2) {\n      console.log(\"%s\", 0);\n      return;\n    } else {\n      target = i;\n      ato = total - mae - A[i];\n      break;\n    }\n  }\n//   console.log(\"mae:%s\", mae);\n//   console.log(\"ato:%s\", ato);\n//   console.log(\"target:%s\", i);\n//   console.log(\"Ai:%s\", A[i]);\n\n  var diff = Math.abs(ato - mae);\n//   console.log(\"diff:%s\", diff);\n  var result = Math.abs(A[i] - diff);\n  console.log(\"%s\", result);\n}\n\nMain(\n  require(\"fs\")\n    .readFileSync(\"/dev/stdin\", \"utf8\")\n    .split(\"\\n\")\n);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 560, "deobfuscated": "function Main(input) {\n  var N = parseInt(input[0], 10);\n  var A = input[1].split(\" \");\n  var total = 0;\n  for (var i = 0; i < N; i++) {\n    A[i] = parseInt(A[i], 10);\n    total += A[i];\n  }\n  var result = 0;\n  var mae = 0;\n  var ato = 0;\n  var target = 0;\n  for (var i = 0; i < N; i++) {\n    if (mae + A[i] < total / 2) {\n      mae += A[i];\n    } else if (mae + A[i] == total / 2) {\n      console.log(\"%s\", 0);\n      return;\n    } else {\n      target = i;\n      ato = total - mae - A[i];\n      break;\n    }\n  }\n  var diff = Math.abs(ato - mae);\n  var result = Math.abs(A[i] - diff);\n  console.log(\"%s\", result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8987678696724574, "ngram_match_score": 0.7862337421189468, "weighted_ngram_match_score": 0.8088377365708825, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02927_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const args=input['split']('\\x0a')['map'](arg=>arg['split']('\\x20'));const M=parseInt(args[0x0][0x0],0xa);const D=parseInt(args[0x0][0x1],0xa);let cnt=0x0;for(let m=0x1;m<=M;m++){for(let j=0x1;j<=D;j++){const d1=j%0xa;const d10=Math['floor'](j/0xa);if(d1>=0x2&&d10>=0x2&&d1*d10===m){cnt++;}}}console['log'](cnt);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["15 40", "10"], ["12 31", "5"], ["1 1", "0"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst M = parseInt(args[0][0], 10)\n\tconst D = parseInt(args[0][1], 10)\n\tlet cnt = 0\n\n\tfor (let m = 1; m <= M; m++) {\n\t\tfor (let j = 1; j <= D; j++) {\n\t\t\tconst d1 = j % 10\n\t\t\tconst d10 = Math.floor(j / 10)\n\n\t\t\tif (d1 >= 2 && d10 >= 2 && (d1 * d10 === m)) {\n\t\t\t\tcnt++\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log(cnt)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 561, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const args = input.split(\"\\n\").map(arg => arg.split(\" \"));\n  const M = parseInt(args[0][0], 10);\n  const D = parseInt(args[0][1], 10);\n  let cnt = 0;\n  for (let m = 1; m <= M; m++) {\n    for (let j = 1; j <= D; j++) {\n      const d1 = j % 10;\n      const d10 = Math.floor(j / 10);\n      if (d1 >= 2 && d10 >= 2 && d1 * d10 === m) {\n        cnt++;\n      }\n    }\n  }\n  console.log(cnt);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6650588567919133, "ngram_match_score": 0.6190568537312876, "weighted_ngram_match_score": 0.6304833862705905, "syntax_match_score": 0.8470588235294118, "dataflow_match_score": 0.5636363636363636}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02937_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [s,t]=args['trim']()['split']`\\n`;const sl=s['length'],tl=t['length'];let i=-0x1,cyc=0x0;T:for(let j=0x0;j<tl;j++){for(let k=i+0x1;k<sl;k++){if(s[k]===t[j]){i=k;continue T;}}if(i===-0x1)return'-1';cyc++;i=-0x1;j--;}return''+(cyc*sl+i+0x1);})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["contest\nson", "10"], ["contest\nprogramming", "-1"], ["contest\nsentence", "33"]], "original": "console.log((args=>{\n  const [s,t] = args.trim().split`\\n`;\n  const sl = s.length, tl = t.length;\n  let i = -1, cyc = 0;\n  T: for ( let j = 0; j < tl; j++ ) {\n    for ( let k = i+1; k < sl; k++ ) {\n      if ( s[k] === t[j] ) {\n        i = k;\n        continue T;\n      }\n    }\n    if ( i === -1 ) return '-1';\n    cyc++;\n    i = -1;\n    j--;\n  }\n  return `${cyc*sl+i+1}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 562, "deobfuscated": "console.log((args => {\n  const [s, t] = args.trim().split`\\n`;\n  const sl = s.length;\n  const tl = t.length;\n  let i = -1;\n  let cyc = 0;\n  T: for (let j = 0; j < tl; j++) {\n    for (let k = i + 1; k < sl; k++) {\n      if (s[k] === t[j]) {\n        i = k;\n        continue T;\n      }\n    }\n    if (i === -1) {\n      return \"-1\";\n    }\n    cyc++;\n    i = -1;\n    j--;\n  }\n  return \"\" + (cyc * sl + i + 1);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6537234405412881, "ngram_match_score": 0.3842114464442929, "weighted_ngram_match_score": 0.4431823157208592, "syntax_match_score": 0.7875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03201_1", "type": "JavaScript", "obfuscated": "'use strict';function getPair(num){return parseInt(num['toString'](0x2)['split']('')['map'](x=>x==='1'?'0':'1')['reduce']((acc,cur)=>acc+cur,''),0x2)+0x1;}function main(input){const inputs=input['split']('\\x0a')['filter'](x=>x!=='');const A=inputs[0x1]['split']('\\x20')['map'](Number);let sortedA=A['sort']((a,b)=>b-a);let count=0x0;while(sortedA['length']>0x0){let i=sortedA[0x0];sortedA['splice'](0x0,0x1);let j=getPair(i);let indexJ=sortedA['findIndex'](x=>x===j);if(indexJ>=0x0){sortedA['splice'](indexJ,0x1);count++;}}console['log'](count);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2 3", "1"], ["5\n3 11 14 5 13", "2"]], "original": "\"use strict\";\n\nfunction getPair(num) {\n  return (\n    parseInt(\n      num\n        .toString(2)\n        .split(\"\")\n        .map(x => (x === \"1\" ? \"0\" : \"1\"))\n        .reduce((acc, cur) => acc + cur, \"\"),\n      2\n    ) + 1\n  );\n}\n\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n\n  const A = inputs[1].split(\" \").map(Number);\n\n  let sortedA = A.sort((a, b) => b - a);\n  let count = 0;\n  while (sortedA.length > 0) {\n    let i = sortedA[0];\n    sortedA.splice(0, 1);\n\n    let j = getPair(i);\n\n    let indexJ = sortedA.findIndex(x => x === j);\n\n    if (indexJ >= 0) {\n      sortedA.splice(indexJ, 1);\n      count++;\n    }\n  }\n\n  console.log(count);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 563, "deobfuscated": "'use strict';\n\nfunction getPair(num) {\n  return parseInt(num.toString(2).split(\"\").map(x => x === \"1\" ? \"0\" : \"1\").reduce((acc, cur) => acc + cur, \"\"), 2) + 1;\n}\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n  const A = inputs[1].split(\" \").map(Number);\n  let sortedA = A.sort((a, b) => b - a);\n  let count = 0;\n  while (sortedA.length > 0) {\n    let i = sortedA[0];\n    sortedA.splice(0, 1);\n    let j = getPair(i);\n    let indexJ = sortedA.findIndex(x => x === j);\n    if (indexJ >= 0) {\n      sortedA.splice(indexJ, 1);\n      count++;\n    }\n  }\n  console.log(count);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.864129004823467, "ngram_match_score": 0.7811007095406587, "weighted_ngram_match_score": 0.7940593775498197, "syntax_match_score": 0.8813559322033898, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03214_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var n=toInt(input[0x0]);var as=toIntArr(input[0x1]['split']('\\x20'));var sum=0x0;for(var i=0x0;i<n;i++){sum+=as[i];}var bs=as['map']((el,ind,arr)=>abs(sum-n*el));var ans=0x0;var min=bs[0x0];for(var i=0x1;i<n;i++){if(bs[i]<min){min=bs[i];ans=i;}}console['log'](ans);}", "test_cases": [["3\n1 2 3", "1"], ["4\n2 5 2 5", "0"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar as = toIntArr(input[1].split(' '));\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tsum += as[i];\n\t}\n\tvar bs = as.map((el,ind,arr)=>abs(sum - n*el));\n\tvar ans = 0;\n\tvar min = bs[0];\n\tfor(var i = 1; i < n; i++){\n\t\tif(bs[i] < min){\n\t\t\tmin = bs[i];\n\t\t\tans = i;\n\t\t}\n\t}\n\tconsole.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 564, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var n = toInt(input[0]);\n  var as = toIntArr(input[1].split(\" \"));\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    sum += as[i];\n  }\n  var bs = as.map((el, ind, arr) => abs(sum - n * el));\n  var ans = 0;\n  var min = bs[0];\n  for (var i = 1; i < n; i++) {\n    if (bs[i] < min) {\n      min = bs[i];\n      ans = i;\n    }\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6631802963877489, "ngram_match_score": 0.2574662207698057, "weighted_ngram_match_score": 0.4788385483647732, "syntax_match_score": 0.9256756756756757, "dataflow_match_score": 0.9907407407407407}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0003290024726894103, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.010695187165775444, "new_decrease_halstead_effort": -0.010695187165775444}}
{"filename": "p03229_1", "type": "JavaScript", "obfuscated": "function Main(input){var nums=input['split']('\\x0a')['map'](function(value){return value-0x0;});var N=nums['shift']();nums['sort'](function(a,b){return b-a;});var ary=new Array(N);var m=0x0;var r=N-0x1;for(var l=0x0;l<N/0x2;l++,r--){ary[m++]=nums[l];ary[m++]=nums[r];}var s=0x0,s1=0x0;m=N-0x1;for(var n=0x0;n<N-0x1;n++){r=Math['abs'](ary[m]-ary[n]);s+=r;m=n;}for(var n=0x0;n<N-0x1;n++){r=Math['abs'](ary[n]-ary[n+0x1]);s1+=r;}console['log'](Math['max'](s,s1));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n6\n8\n1\n2\n3", "21"], ["6\n3\n1\n4\n1\n5\n9", "25"], ["3\n5\n5\n1", "8"]], "original": "function Main(input) {\n    var nums = input.split(\"\\n\").map(function(value) { return value - 0; });\n    var N = nums.shift();\n    nums.sort(function(a,b) { return b - a; });\n    var ary = new Array(N);\n    var m = 0;\n    var r = N - 1;\n    for (var l = 0; l < N / 2; l++, r--) {\n      ary[m++] = nums[l];\n      ary[m++] = nums[r];\n    }\n    var s = 0, s1 = 0;\n    m = N - 1;\n    for (var n = 0; n < N - 1; n++) {\n      r = (Math.abs(ary[m] - ary[n]));\n      s += r;\n      m = n;\n    }\n    for (var n = 0; n < N - 1; n++) {\n      r = (Math.abs(ary[n] - ary[n+1]));\n      s1 += r;\n    }\n    console.log(Math.max(s, s1));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 565, "deobfuscated": "function Main(input) {\n  var nums = input.split(\"\\n\").map(function (value) {\n    return value - 0;\n  });\n  var N = nums.shift();\n  nums.sort(function (a, b) {\n    return b - a;\n  });\n  var ary = new Array(N);\n  var m = 0;\n  var r = N - 1;\n  for (var l = 0; l < N / 2; l++, r--) {\n    ary[m++] = nums[l];\n    ary[m++] = nums[r];\n  }\n  var s = 0;\n  var s1 = 0;\n  m = N - 1;\n  for (var n = 0; n < N - 1; n++) {\n    r = Math.abs(ary[m] - ary[n]);\n    s += r;\n    m = n;\n  }\n  for (var n = 0; n < N - 1; n++) {\n    r = Math.abs(ary[n] - ary[n + 1]);\n    s1 += r;\n  }\n  console.log(Math.max(s, s1));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8948572720554767, "ngram_match_score": 0.8226368342183802, "weighted_ngram_match_score": 0.867903365114638, "syntax_match_score": 0.8888888888888888, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0002046568362528145, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.005586592178770999, "new_decrease_halstead_effort": -0.005586592178770999}}
{"filename": "p03386_1", "type": "JavaScript", "obfuscated": "var lines=[];var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var A=Number(lines[0x0]['split']('\\x20')[0x0]);var B=Number(lines[0x0]['split']('\\x20')[0x1]);var K=Number(lines[0x0]['split']('\\x20')[0x2]);var ans='';for(var i=A;i<=B;i++){if(i<A+K){ans+=i['toString']();}else if(i>B-K){ans+=i['toString']();}}for(var i=0x0;i<ans['length'];i++){console['log'](ans[i]);}});", "test_cases": [["3 8 2", "3\n4\n7\n8"], ["4 8 3", "4\n5\n6\n7\n8"], ["2 9 100", "2\n3\n4\n5\n6\n7\n8\n9"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var A = Number(lines[0].split(\" \")[0])\n    var B = Number(lines[0].split(\" \")[1])\n    var K = Number(lines[0].split(\" \")[2])\n\n    var ans = \"\";\n    for (var i = A; i <= B; i++) {\n        if (i < A + K) { ans += i.toString() }\n        else if (i > B - K) { ans += i.toString() }\n    }\n    for (var i = 0; i < ans.length; i++) {\n        console.log(ans[i])\n    }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 566, "deobfuscated": "var lines = [];\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var A = Number(lines[0].split(\" \")[0]);\n  var B = Number(lines[0].split(\" \")[1]);\n  var K = Number(lines[0].split(\" \")[2]);\n  var ans = \"\";\n  for (var i = A; i <= B; i++) {\n    if (i < A + K) {\n      ans += i.toString();\n    } else if (i > B - K) {\n      ans += i.toString();\n    }\n  }\n  for (var i = 0; i < ans.length; i++) {\n    console.log(ans[i]);\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8658151604063353, "ngram_match_score": 0.7275801927626274, "weighted_ngram_match_score": 0.7356804488627139, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03548_1", "type": "JavaScript", "obfuscated": "function Main(input){var X=parseInt(input['split']('\\x20')[0x0]);var Y=parseInt(input['split']('\\x20')[0x1]);var Z=parseInt(input['split']('\\x20')[0x2]);var N=0x1;var x=0x0;while(!![]){x=N*Y+(N+0x1)*Z;if(x>X)break;N++;}console['log'](--N);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["13 3 1", "3"], ["12 3 1", "2"], ["100000 1 1", "49999"], ["64146 123 456", "110"], ["64145 123 456", "109"]], "original": "function Main(input){\n  var X = parseInt(input.split(' ')[0]);  // total\n  var Y = parseInt(input.split(' ')[1]);  // human space\n  var Z = parseInt(input.split(' ')[2]);  // void space\n\n  var N = 1; // human count\n  var x = 0; // space\n  while(true){\n    x = (N * Y) + (N + 1) * Z;\n    if(x > X) break;\n    N++;\n  }\n  console.log(--N);\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 567, "deobfuscated": "function Main(input) {\n  var X = parseInt(input.split(\" \")[0]);\n  var Y = parseInt(input.split(\" \")[1]);\n  var Z = parseInt(input.split(\" \")[2]);\n  var N = 1;\n  var x = 0;\n  while (true) {\n    x = N * Y + (N + 1) * Z;\n    if (x > X) {\n      break;\n    }\n    N++;\n  }\n  console.log(--N);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5432015368782429, "ngram_match_score": 0.26450540632420944, "weighted_ngram_match_score": 0.27594780001229174, "syntax_match_score": 0.8676470588235294, "dataflow_match_score": 0.7647058823529411}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007266381852312209, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03488372093023251, "new_decrease_halstead_effort": 0.17690731585100739}}
{"filename": "p03673_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=~~arg[0x0];const b=arg[0x1]['split']('\\x20')['map'](n=>~~n);let answer=[];for(let i=0x0;i<N;i++){if(i%0x2===0x0){answer['push'](b[i]);}else{answer['unshift'](b[i]);}}if(N%0x2!==0x0)answer=answer['reverse']();console['log'](answer['join']('\\x20'));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 2 3 4", "4 2 1 3"], ["3\n1 2 3", "3 1 2"], ["1\n1000000000", "1000000000"], ["6\n0 6 7 6 7 0", "0 6 6 0 7 7"]], "original": "\n\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = ~~arg[0];\n    const b = arg[1].split(\" \").map(n=>~~n);\n    \n    let answer = [];\n    \n    for(let i=0; i<N; i++) {\n        if(i % 2 === 0) {\n            answer.push(b[i]);\n        } else {\n            answer.unshift(b[i]);\n        }\n    }\n    \n    if(N % 2 !== 0) answer = answer.reverse();\n    \n    console.log(answer.join(\" \"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 568, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = ~~arg[0];\n  const b = arg[1].split(\" \").map(n => ~~n);\n  let answer = [];\n  for (let i = 0; i < N; i++) {\n    if (i % 2 === 0) {\n      answer.push(b[i]);\n    } else {\n      answer.unshift(b[i]);\n    }\n  }\n  if (N % 2 !== 0) {\n    answer = answer.reverse();\n  }\n  console.log(answer.join(\" \"));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7712417233780617, "ngram_match_score": 0.5183515737290185, "weighted_ngram_match_score": 0.6340310501203072, "syntax_match_score": 0.9325842696629213, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03992_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('');input['splice'](0x4,0x0,'\\x20');console['log'](input['join'](''));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["CODEFESTIVAL", "CODE FESTIVAL"], ["POSTGRADUATE", "POST GRADUATE"], ["ABCDEFGHIJKL", "ABCD EFGHIJKL"]], "original": "function Main(input) {\n\tinput = input.split(\"\");\n\tinput.splice(4,0,\" \");\n\tconsole.log(input.join(\"\"))\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 569, "deobfuscated": "function Main(input) {\n  input = input.split(\"\");\n  input.splice(4, 0, \" \");\n  console.log(input.join(\"\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7210247752753292, "ngram_match_score": 0.3759663529467017, "weighted_ngram_match_score": 0.5081327481546147, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00170_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var nww=[];for(var i=0x0;i<n;i++)nww[i]=arr['shift']()['split']('\\x20');nww=nww['map'](v=>[v[0x0],v[0x1]-0x0,v[0x2]-0x0]);var max=0x0;var ans=[];var bomb=function(arrA,arrB,sum,g){if(arrB['length']==0x0){if(max<g/sum){ans=arrA;max=g/sum;}return;}arrB['forEach'](v=>{if(sum<=nww[v][0x2]){var a=arrA['concat'](v);var b=arrB['slice']()['filter'](n=>v!=n);var c=sum+nww[v][0x1];var d=g+nww[v][0x1]*(arrA['length']+0x1);bomb(a,b,c,d);}});};var bombArr=[];for(var i=0x0;i<n;i++)bombArr['push'](i);bomb([],bombArr,0x0,0x0);console['log'](ans['map'](v=>nww[v][0x0])['reverse']()['join']('\\x0a'));}", "test_cases": [["4\nsandwich 80 120\napple 50 200\ncheese 20 40\ncake 100 100\n9\nonigiri 80 300\nonigiri 80 300\nanpan 70 280\nmikan 50 80\nkanzume 100 500\nchocolate 50 350\ncookie 30 80\npurin 40 400\ncracker 40 160\n0", "apple\ncake\nsandwich\ncheese\nkanzume\npurin\nchocolate\nonigiri\nonigiri\nanpan\nmikan\ncracker\ncookie"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var nww = [];\n   for (var i = 0; i < n; i++) nww[i] = arr.shift().split(\" \");\n   nww = nww.map(v => [v[0], v[1] - 0, v[2] - 0]);\n   var max = 0;\n   var ans = [];\n   var bomb = function (arrA, arrB, sum, g) {\n      if (arrB.length == 0) {\n         if (max < g / sum) {\n            ans = arrA;\n            max = g / sum;\n         }\n         return;\n      }\n      arrB.forEach(v => {\n         if (sum <= nww[v][2]) {\n            var a = arrA.concat(v);\n            var b = arrB.slice().filter(n => v != n);\n            var c = sum + nww[v][1];\n            var d = g + nww[v][1] * (arrA.length + 1);\n            bomb(a, b, c, d);\n         }\n      });\n   };\n   var bombArr = [];\n   for (var i = 0; i < n; i++) bombArr.push(i);\n   bomb([], bombArr, 0, 0);\n   console.log(ans.map(v => nww[v][0]).reverse().join(\"\\n\"));\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 570, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var nww = [];\n  for (var i = 0; i < n; i++) {\n    nww[i] = arr.shift().split(\" \");\n  }\n  nww = nww.map(v => [v[0], v[1] - 0, v[2] - 0]);\n  var max = 0;\n  var ans = [];\n  function bomb(arrA, arrB, sum, g) {\n    if (arrB.length == 0) {\n      if (max < g / sum) {\n        ans = arrA;\n        max = g / sum;\n      }\n      return;\n    }\n    arrB.forEach(v => {\n      if (sum <= nww[v][2]) {\n        var a = arrA.concat(v);\n        var b = arrB.slice().filter(n => v != n);\n        var c = sum + nww[v][1];\n        var d = g + nww[v][1] * (arrA.length + 1);\n        bomb(a, b, c, d);\n      }\n    });\n  }\n  var bombArr = [];\n  for (var i = 0; i < n; i++) {\n    bombArr.push(i);\n  }\n  bomb([], bombArr, 0, 0);\n  console.log(ans.map(v => nww[v][0]).reverse().join(\"\\n\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8432919978723707, "ngram_match_score": 0.8532425774458029, "weighted_ngram_match_score": 0.8694152099620475, "syntax_match_score": 0.9464285714285714, "dataflow_match_score": 0.7040816326530612}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.037735849056603765, "new_decrease_halstead_effort": 0.13210356987313676}}
{"filename": "p02396_1", "type": "JavaScript", "obfuscated": "var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){var nums=input['split']('\\x0a');var output='';for(var i=0x0;i<nums['length'];i++){nums[i]=Number(nums[i]);if(nums[i]==0x0){break;}output+='Case\\x20'+(i+0x1)+':\\x20'+nums[i]+'\\x0a';}console['log'](output);});", "test_cases": [["3\n5\n11\n7\n8\n19\n0", "Case 1: 3\nCase 2: 5\nCase 3: 11\nCase 4: 7\nCase 5: 8\nCase 6: 19"]], "original": "var input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on('end', function (){\n    var nums = input.split(\"\\n\");\n    var output = \"\";\n    \n    for(var i = 0; i < nums.length; i ++){\n        nums[i] = Number(nums[i]);\n        if(nums[i] == 0){\n            break;\n        }\n        output += \"Case \" + (i + 1) + \": \" + nums[i] + \"\\n\"; \n    }\n    console.log(output);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 571, "deobfuscated": "var input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  var nums = input.split(\"\\n\");\n  var output = \"\";\n  for (var i = 0; i < nums.length; i++) {\n    nums[i] = Number(nums[i]);\n    if (nums[i] == 0) {\n      break;\n    }\n    output += \"Case \" + (i + 1) + \": \" + nums[i] + \"\\n\";\n  }\n  console.log(output);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8313920544937902, "ngram_match_score": 0.6372942505005411, "weighted_ngram_match_score": 0.6882739674746197, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02420_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){var lines=stdin['toString']();var re=/[A-Za-z]+\\n([1-9][0-9]*\\n)+/g;var result=function(data){return data['map'](function(v){return v['slice'](-v[0x1])['map'](Number)['reduce'](function(str,num){return str['slice'](num)+str['slice'](0x0,num);},v[0x0]);})['join']('\\x0a');}(lines['match'](re)['map'](function(v){return v['trim']()['split']('\\x0a');}));console['log'](result);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["aabc\n3\n1\n2\n1\nvwxyz\n2\n3\n4\n-", "aabc\nxyzvw"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString();\n  var re = /[A-Za-z]+\\n([1-9][0-9]*\\n)+/g;\n  var result = (function(data) {\n    return data\n      .map(function(v) {\n        return v.slice(- v[1])\n          .map(Number)\n          .reduce(function(str,num) {\n            return str.slice(num) + str.slice(0,num);\n          },v[0]);\n      }).join('\\n');\n  }(lines.match(re).map(function(v){return v.trim().split('\\n');})\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 572, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  var lines = stdin.toString();\n  var re = /[A-Za-z]+\\n([1-9][0-9]*\\n)+/g;\n  var result = function (data) {\n    return data.map(function (v) {\n      return v.slice(-v[1]).map(Number).reduce(function (str, num) {\n        return str.slice(num) + str.slice(0, num);\n      }, v[0]);\n    }).join(\"\\n\");\n  }(lines.match(re).map(function (v) {\n    return v.trim().split(\"\\n\");\n  }));\n  console.log(result);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6101443270413739, "ngram_match_score": 0.33844941424610564, "weighted_ngram_match_score": 0.4164136082051045, "syntax_match_score": 0.9, "dataflow_match_score": 0.7857142857142857}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02554_1", "type": "JavaScript", "obfuscated": "const mod=0xa**0x9+0x7;function pow(x,y){var r=0x1;for(var i=0x1;i<=y;i++){r=r*x%mod;}return r;};function Main(input){const [N]=input['trim']()['split']('\\x20')['map'](x=>parseInt(x));var count=pow(0xa,N)-pow(0x9,N)*0x2+pow(0x8,N);count=count%mod;count=(count+mod)%mod;console['log'](count);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2", "2"], ["1", "0"], ["869121", "2511445"]], "original": "const mod = 10**9 +7;\n\nfunction pow (x,y){\n    var r = 1;\n    for (var i=1; i<=y; i++){\n        r = (r * x) % mod;\n    }\n    return r;\n};\n\n\nfunction Main (input){\n    const [N] = input.trim().split(' ').map(x => parseInt(x));\n    var count = pow(10,N)-(pow(9,N)*2)+pow(8,N);\n    count = count % mod;\n    count = (count + mod) % mod;\n    console.log(count)\n};\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 573, "deobfuscated": "const mod = 1000000007;\nfunction pow(x, y) {\n  var r = 1;\n  for (var i = 1; i <= y; i++) {\n    r = r * x % mod;\n  }\n  return r;\n}\n;\nfunction Main(input) {\n  const [N] = input.trim().split(\" \").map(x => parseInt(x));\n  var count = pow(10, N) - pow(9, N) * 2 + pow(8, N);\n  count = count % mod;\n  count = (count + mod) % mod;\n  console.log(count);\n}\n;\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5253259701290292, "ngram_match_score": 0.35385520441064156, "weighted_ngram_match_score": 0.46998032167509507, "syntax_match_score": 0.7974683544303798, "dataflow_match_score": 0.48}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04123711340206182, "new_decrease_halstead_effort": 0.1444739392781551}}
{"filename": "p02664_1", "type": "JavaScript", "obfuscated": "function Main(str){let newString='';for(let i=0x0;i<str['length'];i++){if(str[i]==='?'&&(str[i-0x1]&&str[i-0x1]==='P'||str[i+0x1]&&str[i+0x1]==='P')){newString=newString+'D';}else if(str[i]=='?'){newString=newString+'P';}else{newString=newString+str[i];}}console['log'](newString);}let input=require('fs')['readFileSync']('/dev/stdin','utf8');Main(input);", "test_cases": [["PD?D??P", "PDPDPDP"], ["P?P?", "PDPD"]], "original": "function Main(str) {\n  \tlet newString = '';\n\tfor(let i=0;i<str.length;i++) {\n    \tif(str[i] === '?' && (str[i-1] && str[i-1] === 'P' || str[i+1] && str[i+1] === 'P')) {\n        \tnewString = newString + 'D';\n        } else if(str[i] == '?') {\n        \tnewString = newString + 'P';\n        } else {\n        \tnewString = newString + str[i];\n        }\n    }\n  \n  \tconsole.log(newString);\n  \t\n}\n\nlet input = require('fs').readFileSync('/dev/stdin', 'utf8');\nMain(input);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 574, "deobfuscated": "function Main(str) {\n  let newString = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"?\" && (str[i - 1] && str[i - 1] === \"P\" || str[i + 1] && str[i + 1] === \"P\")) {\n      newString = newString + \"D\";\n    } else if (str[i] == \"?\") {\n      newString = newString + \"P\";\n    } else {\n      newString = newString + str[i];\n    }\n  }\n  console.log(newString);\n}\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nMain(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7070523067543164, "ngram_match_score": 0.35676123268109955, "weighted_ngram_match_score": 0.4714479943361661, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02726_1", "type": "JavaScript", "obfuscated": "function main(input){function dist(a,b){return Math['min'](b-a,Math['abs'](x-a)+Math['abs'](y-b)+0x1);}const inp=input['split']('\\x20');const n=inp[0x0];const x=inp[0x1];const y=inp[0x2];for(var i=0x1;i<n;i++){var cnt=0x0;for(var a=0x1;a<n;a++)for(var b=a+0x1;b<=n;b++)if(dist(a,b)==i)cnt++;console['log'](cnt);}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2 4", "5\n4\n1\n0"], ["3 1 3", "3\n0"], ["7 3 7", "7\n8\n4\n2\n0\n0"], ["10 4 8", "10\n12\n10\n8\n4\n1\n0\n0\n0"]], "original": "function main(input) {\n  function dist(a, b) {\n\t\treturn Math.min(b-a, Math.abs(x-a)+Math.abs(y-b)+1);\n\t}\n\t\n  const inp = input.split(' ');\n\tconst n = inp[0];\n\tconst x = inp[1];\n\tconst y = inp[2];\n  \n  for(var i=1;i<n; i++) {\n    var cnt = 0;\n    \n    for(var a=1; a<n; a++)\n      for(var b=a+1; b<=n; b++)\n        if(dist(a,b) == i)\n          cnt++;\n    \n    console.log(cnt);\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 575, "deobfuscated": "function main(input) {\n  function dist(a, b) {\n    return Math.min(b - a, Math.abs(x - a) + Math.abs(y - b) + 1);\n  }\n  const inp = input.split(\" \");\n  const n = inp[0];\n  const x = inp[1];\n  const y = inp[2];\n  for (var i = 1; i < n; i++) {\n    var cnt = 0;\n    for (var a = 1; a < n; a++) {\n      for (var b = a + 1; b <= n; b++) {\n        if (dist(a, b) == i) {\n          cnt++;\n        }\n      }\n    }\n    console.log(cnt);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6802091953132678, "ngram_match_score": 0.2970454389170216, "weighted_ngram_match_score": 0.5225567744348151, "syntax_match_score": 0.9012345679012346, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03209_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=parseInt(input[0x0]['split']('\\x20')[0x0]);var X=parseInt(input[0x0]['split']('\\x20')[0x1]);bans=new Array(0x32);all=new Array(0x32);bans[0x0]=0x1;all[0x0]=0x1;var ans=0x0;for(i=0x1;i<=0x32;i++){bans[i]=bans[i-0x1]*0x2+0x1;all[i]=all[i-0x1]*0x2+0x3;}var full=all[N];var bs=bans[N];var flag=0x0;if(X%0x2==0x0){X=all[N]-X;flag=0x1;}while(X>0x0){if(X>(full-0x1)/0x2){X=X-(full-0x1)/0x2-0x1;ans=ans+(bs-0x1)/0x2+0x1;full=(full-0x1)/0x2-0x1;bs=(bs-0x1)/0x2;}else{X=X-0x1;full=(full-0x1)/0x2-0x1;bs=(bs-0x1)/0x2;}}if(flag==0x1){ans=bans[N]-ans;}console['log']('%s',ans);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 7", "4"], ["1 1", "0"], ["50 4321098765432109", "2160549382716056"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var X = parseInt(input[0].split(\" \")[1]);\n  bans=new Array(50);\n  all=new Array(50);\n  bans[0]=1;\n  all[0]=1;\n  var ans = 0;\n  for(i=1;i<=50;i++){\n    bans[i]=bans[i-1]*2+1;\n    all[i]=all[i-1]*2+3;\n  }\n  var full=all[N];\n  var bs=bans[N];\n  var flag=0;\n  if(X%2==0){\n    X=all[N]-X;\n    flag=1;\n  }\n  while(X>0){\n\n    if(X>(full-1)/2){\n      X=X-(full-1)/2-1;\n      ans=ans+(bs-1)/2+1;\n      full=(full-1)/2-1;\n      bs=(bs-1)/2\n    }else{\n      X=X-1;\n      full=(full-1)/2-1;\n      bs=(bs-1)/2\n    }\n  }\n  if(flag==1){\n    ans=bans[N]-ans;\n  }\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 576, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var X = parseInt(input[0].split(\" \")[1]);\n  bans = new Array(50);\n  all = new Array(50);\n  bans[0] = 1;\n  all[0] = 1;\n  var ans = 0;\n  for (i = 1; i <= 50; i++) {\n    bans[i] = bans[i - 1] * 2 + 1;\n    all[i] = all[i - 1] * 2 + 3;\n  }\n  var full = all[N];\n  var bs = bans[N];\n  var flag = 0;\n  if (X % 2 == 0) {\n    X = all[N] - X;\n    flag = 1;\n  }\n  while (X > 0) {\n    if (X > (full - 1) / 2) {\n      X = X - (full - 1) / 2 - 1;\n      ans = ans + (bs - 1) / 2 + 1;\n      full = (full - 1) / 2 - 1;\n      bs = (bs - 1) / 2;\n    } else {\n      X = X - 1;\n      full = (full - 1) / 2 - 1;\n      bs = (bs - 1) / 2;\n    }\n  }\n  if (flag == 1) {\n    ans = bans[N] - ans;\n  }\n  console.log(\"%s\", ans);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6344033064762948, "ngram_match_score": 0.13744158851490418, "weighted_ngram_match_score": 0.4001716373902749, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03227_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const S=input['split']('\\x0a')[0x0];if(S['length']<=0x2){console['log'](S);}else{console['log'](S['split']('')['reverse']()['join'](''));}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abc", "cba"], ["ac", "ac"]], "original": "'use strict';\n\nfunction Main(input) {\n    const S = input.split('\\n')[0];\n    if (S.length <= 2) {\n        console.log(S);\n    } else {\n        console.log(S.split(\"\").reverse().join(\"\"));\n    }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 577, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const S = input.split(\"\\n\")[0];\n  if (S.length <= 2) {\n    console.log(S);\n  } else {\n    console.log(S.split(\"\").reverse().join(\"\"));\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8953773164926133, "ngram_match_score": 0.7848518349390632, "weighted_ngram_match_score": 0.7966574310313901, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03435_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const c=arg['map'](n=>n['split']('\\x20')['map'](l=>parseInt(l)));for(let a1=0x0;a1<=0x64;a1++){const b1=c[0x0][0x0]-a1;const b2=c[0x1][0x0]-a1;const b3=c[0x2][0x0]-a1;for(let a2=0x0;a2<=0x64;a2++){if(a2+b1!==c[0x0][0x1])continue;if(a2+b2!==c[0x1][0x1])continue;if(a2+b3!==c[0x2][0x1])continue;for(let a3=0x0;a3<=0x64;a3++){if(a3+b1!==c[0x0][0x2])continue;if(a3+b2!==c[0x1][0x2])continue;if(a3+b3!==c[0x2][0x2])continue;console['log']('Yes');return;}}}console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 0 1\n2 1 2\n1 0 1", "Yes"], ["2 2 2\n2 1 2\n2 2 2", "No"], ["0 8 8\n0 8 8\n0 8 8", "Yes"], ["1 8 6\n2 9 7\n0 7 7", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const c = arg.map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    // a1の仮定100通りを試す\n    for(let a1=0; a1<=100; a1++) {\n        // a1が決まればb1,b2,b3も決まる\n        const b1 = c[0][0] - a1;\n        const b2 = c[1][0] - a1;\n        const b3 = c[2][0] - a1;\n        \n        // そうすると、他のaの値も全て確定するので正しいか検証する\n        for(let a2=0; a2<=100; a2++) {\n            if(a2 + b1 !== c[0][1]) continue;\n            if(a2 + b2 !== c[1][1]) continue;\n            if(a2 + b3 !== c[2][1]) continue;\n\n            for(let a3=0; a3<=100; a3++) {\n                if(a3 + b1 !== c[0][2]) continue;\n                if(a3 + b2 !== c[1][2]) continue;\n                if(a3 + b3 !== c[2][2]) continue;\n                \n                console.log(\"Yes\");\n                return;\n            }\n        }\n    }\n    \n    console.log(\"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 578, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const c = arg.map(n => n.split(\" \").map(l => parseInt(l)));\n  for (let a1 = 0; a1 <= 100; a1++) {\n    const b1 = c[0][0] - a1;\n    const b2 = c[1][0] - a1;\n    const b3 = c[2][0] - a1;\n    for (let a2 = 0; a2 <= 100; a2++) {\n      if (a2 + b1 !== c[0][1]) {\n        continue;\n      }\n      if (a2 + b2 !== c[1][1]) {\n        continue;\n      }\n      if (a2 + b3 !== c[2][1]) {\n        continue;\n      }\n      for (let a3 = 0; a3 <= 100; a3++) {\n        if (a3 + b1 !== c[0][2]) {\n          continue;\n        }\n        if (a3 + b2 !== c[1][2]) {\n          continue;\n        }\n        if (a3 + b3 !== c[2][2]) {\n          continue;\n        }\n        console.log(\"Yes\");\n        return;\n      }\n    }\n  }\n  console.log(\"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6857056928905089, "ngram_match_score": 0.3733501933511264, "weighted_ngram_match_score": 0.49826045699878785, "syntax_match_score": 0.8712121212121212, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03487_1", "type": "JavaScript", "obfuscated": "var lines=[];var result=0x0;var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]);var a=lines[0x1]['split']('\\x20')['map'](value=>Number(value));a['sort']((a,b)=>a-b);var counter=Array(N)['fill'](0x0);var j=0x0;counter[0x0]=[a[0x0],0x1];for(var i=0x1;i<N;i++){if(a[i]!==a[i-0x1]){j++;counter[j]=[a[i],0x1];}else{var cnt=counter[j][0x1]+0x1;counter[j]=[a[i],cnt];}}for(var i=0x0;i<counter['length'];i++){if(counter[i][0x0]===counter[i][0x1]){continue;}else{if(counter[i]===0x0){continue;}else{result+=Math['min'](counter[i][0x1],Math['abs'](counter[i][0x0]-counter[i][0x1]));}}}console['log'](result);});", "test_cases": [["4\n3 3 3 3", "1"], ["5\n2 4 1 4 2", "2"], ["6\n1 2 2 3 3 3", "0"], ["1\n1000000000", "1"], ["8\n2 7 1 8 2 8 1 8", "5"]], "original": "var lines = [];\nvar result = 0;\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var a = lines[1].split(\" \").map(value => Number(value));\n\n    a.sort((a, b) => a - b);\n\n    var counter = Array(N).fill(0);\n    var j = 0;\n\n    counter[0] = [a[0], 1];\n    for (var i = 1; i < N; i++) {\n        if (a[i] !== a[i - 1]) { j++; counter[j] = [a[i], 1] }\n        else { var cnt = counter[j][1] + 1; counter[j] = [a[i], cnt]; }\n    }\n\n    for (var i = 0; i < counter.length; i++) {\n\n        if (counter[i][0] === counter[i][1]) { continue; }\n        else {\n            if (counter[i] === 0) { continue; }\n            else {\n                result += Math.min(counter[i][1], Math.abs((counter[i][0] - counter[i][1])));\n            }\n        }\n    }\n    console.log(result);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 579, "deobfuscated": "var lines = [];\nvar result = 0;\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0]);\n  var a = lines[1].split(\" \").map(value => Number(value));\n  a.sort((a, b) => a - b);\n  var counter = Array(N).fill(0);\n  var j = 0;\n  counter[0] = [a[0], 1];\n  for (var i = 1; i < N; i++) {\n    if (a[i] !== a[i - 1]) {\n      j++;\n      counter[j] = [a[i], 1];\n    } else {\n      var cnt = counter[j][1] + 1;\n      counter[j] = [a[i], cnt];\n    }\n  }\n  for (var i = 0; i < counter.length; i++) {\n    if (counter[i][0] === counter[i][1]) {\n      continue;\n    } else if (counter[i] === 0) {\n      continue;\n    } else {\n      result += Math.min(counter[i][1], Math.abs(counter[i][0] - counter[i][1]));\n    }\n  }\n  console.log(result);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8964602732002611, "ngram_match_score": 0.8527624876801413, "weighted_ngram_match_score": 0.858078605120903, "syntax_match_score": 0.875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04031_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=input['trim']()['split']('\\x0a');var N=parseInt(input[0x0]);var list=input[0x1]['split']('\\x20')['map'](a=>Number(a));var ave;var sum=0x0;var output=0x0;for(var i=0x0;i<list['length'];i++){sum+=list[i];}ave=Math['round'](sum/N);for(var i=0x0;i<list['length'];i++){output+=Math['pow'](list[i]-ave,0x2);}myout(output);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["2\n4 8", "8"], ["3\n1 1 3", "3"], ["3\n4 2 5", "5"], ["4\n-100 -100 -100 -100", "0"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\tinput = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var N = parseInt(input[0]);\n  var list = input[1].split(\" \").map((a)=>Number(a));\n  var ave;\n  var sum = 0;\n  var output = 0;\n  for(var i = 0; i < list.length; i++){\n    sum += list[i];\n  }\n  ave = Math.round(sum / N);\n  for(var i = 0; i < list.length; i++){\n    output += Math.pow((list[i] - ave),2);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 580, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  var N = parseInt(input[0]);\n  var list = input[1].split(\" \").map(a => Number(a));\n  var ave;\n  var sum = 0;\n  var output = 0;\n  for (var i = 0; i < list.length; i++) {\n    sum += list[i];\n  }\n  ave = Math.round(sum / N);\n  for (var i = 0; i < list.length; i++) {\n    output += Math.pow(list[i] - ave, 2);\n  }\n  myout(output);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7145265980890964, "ngram_match_score": 0.5009389338262878, "weighted_ngram_match_score": 0.5150621953722029, "syntax_match_score": 0.8421052631578947, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00728_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(line){before(line);});var log=console['log'];function before(line){var lines=line['split']('\\x0a');lines=lines['filter'](function(e){return e!=='';});main(lines);}function main(lines){var ls=lines['map'](function(e){return Number(e);});while(ls['length']>0x1){var tpl=ls['shift']();var arr=ls['slice'](0x0,tpl);ls=ls['slice'](tpl);var mid=arr['indexOf'](Math['min']['apply'](this,arr));arr['splice'](mid,0x1);var Mid=arr['indexOf'](Math['max']['apply'](this,arr));arr['splice'](Mid,0x1);var sum=arr['reduce'](function(p,c,i,a){return p+c;});log(Math['round'](sum/arr['length']));}}", "test_cases": [["3\n1000\n342\n0\n5\n2\n2\n9\n11\n932\n5\n300\n1000\n0\n200\n400\n8\n353\n242\n402\n274\n283\n132\n402\n523\n0", "342\n7\n300\n326"]], "original": "\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data',function(line){\n\tbefore(line);\n});\n\nvar log = console.log;\nfunction before(line){\n\tvar lines = line.split(\"\\n\");\n\tlines = lines.filter(function(e){\n\t\treturn (e !== \"\");\n\t});\n\tmain(lines);\n}\n\n//-----------\nfunction main(lines){\n\tvar ls = lines.map(function(e){return Number(e);});\n\twhile(ls.length > 1){\n\t\tvar tpl = ls.shift();\n\t\tvar arr = ls.slice(0,tpl);\n\t\tls = ls.slice(tpl);\n\t\tvar mid = arr.indexOf(Math.min.apply(this,arr));\n\t\tarr.splice(mid,1);\n\t\tvar Mid = arr.indexOf(Math.max.apply(this,arr));\n\t\tarr.splice(Mid,1);\n\t\tvar sum = arr.reduce(function(p,c,i,a){return p+c;});\n\t\tlog(Math.round(sum/arr.length));\n\t}\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 581, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (line) {\n  before(line);\n});\nvar log = console.log;\nfunction before(line) {\n  var lines = line.split(\"\\n\");\n  lines = lines.filter(function (e) {\n    return e !== \"\";\n  });\n  main(lines);\n}\nfunction main(lines) {\n  var ls = lines.map(function (e) {\n    return Number(e);\n  });\n  while (ls.length > 1) {\n    var tpl = ls.shift();\n    var arr = ls.slice(0, tpl);\n    ls = ls.slice(tpl);\n    var mid = arr.indexOf(Math.min.apply(this, arr));\n    arr.splice(mid, 1);\n    var Mid = arr.indexOf(Math.max.apply(this, arr));\n    arr.splice(Mid, 1);\n    var sum = arr.reduce(function (p, c, i, a) {\n      return p + c;\n    });\n    log(Math.round(sum / arr.length));\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6536978319212962, "ngram_match_score": 0.2798288976400927, "weighted_ngram_match_score": 0.42023374787454937, "syntax_match_score": 0.9147286821705426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.017747161225868835}}
{"filename": "p02237_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};line=require('fs')['readFileSync'](config['input'],'ascii')['trim']()['split'](config['newline']);n=Number(line['shift']());adj={};for(i in line){ary=line[i]['split']('\\x20');j=ary['shift']();ary['shift']();adj[j]=ary;}for(i=0x1;i<=n;i++){ary=[];for(j=0x1;j<=n;j++){if(adj[i]['indexOf'](String(j))!==-0x1)ary['push'](0x1);else ary['push'](0x0);}console['log'](ary['join']('\\x20'));}", "test_cases": [["4\n1 2 2 4\n2 1 4\n3 0\n4 1 3", "0 1 0 1\n0 0 0 1\n0 0 0 0\n0 0 1 0"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline);\nn = Number(line.shift());\nadj = {};\nfor (i in line) {\n  ary = line[i].split(' ');\n  j = ary.shift();\n  ary.shift();\n  adj[j] = ary;\n}\n\nfor (i = 1; i <= n; i++) {\n  ary = [];\n  for (j = 1; j <= n; j++) {\n    if (adj[i].indexOf(String(j)) !== -1) ary.push(1);\n    else ary.push(0);\n  }\n  console.log(ary.join(' '));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 582, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nline = require(\"fs\").readFileSync(config.input, \"ascii\").trim().split(config.newline);\nn = Number(line.shift());\nadj = {};\nfor (i in line) {\n  ary = line[i].split(\" \");\n  j = ary.shift();\n  ary.shift();\n  adj[j] = ary;\n}\nfor (i = 1; i <= n; i++) {\n  ary = [];\n  for (j = 1; j <= n; j++) {\n    if (adj[i].indexOf(String(j)) !== -1) {\n      ary.push(1);\n    } else {\n      ary.push(0);\n    }\n  }\n  console.log(ary.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7863219028501642, "ngram_match_score": 0.5998589334055148, "weighted_ngram_match_score": 0.6154286779951421, "syntax_match_score": 0.93, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02239_1", "type": "JavaScript", "obfuscated": "function main(_stdin){const stdin=_stdin['split']('\\x0a');const len=parseInt(stdin['shift'](),0xa);const data=stdin['filter']((e,i)=>i<len)['map'](e=>e['split']('\\x20')['map'](e=>parseInt(e,0xa)));const dists=[null,0x0];bfs(data[0x0],dists,data);for(const node of data){if(dists[node[0x0]]===undefined)dists[node[0x0]]=-0x1;}dists['shift']();dists['forEach']((e,i)=>{console['log'](i+0x1,e);});}function bfs(node,dists,data){const key=node[0x0];const next=dists[key]+0x1;const children=node['slice'](0x2);for(const child of children){if(dists[child]===undefined||dists[child]>next){const nextNode=data['find'](e=>e[0x0]===child);dists[child]=next;bfs(nextNode,dists,data);}}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 2 2 4\n2 1 4\n3 0\n4 1 3", "1 0\n2 1\n3 2\n4 1"]], "original": "function main(_stdin){\n    const stdin = _stdin.split('\\n');\n    const len = parseInt(stdin.shift(), 10);\n\n    const data = stdin.filter((e, i) => i < len).map(e => e.split(' ').map(e => parseInt(e, 10)));\n\n    const dists = [null, 0];\n\n    bfs(data[0], dists, data);\n\n    for(const node of data){\n        if(dists[node[0]] === undefined) dists[node[0]] = -1;\n    }\n    dists.shift();\n    dists.forEach((e, i) => {\n        console.log(i + 1,  e);\n    });\n}\n\nfunction bfs(node, dists, data){\n    const key = node[0];\n    const next = dists[key] + 1;\n    const children = node.slice(2);\n\n    for(const child of children){\n        if(dists[child] === undefined || dists[child] > next){\n            const nextNode = data.find(e => e[0] === child);\n            dists[child] = next;\n            bfs(nextNode, dists, data);\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 583, "deobfuscated": "function main(_stdin) {\n  const stdin = _stdin.split(\"\\n\");\n  const len = parseInt(stdin.shift(), 10);\n  const data = stdin.filter((e, i) => i < len).map(e => e.split(\" \").map(e => parseInt(e, 10)));\n  const dists = [null, 0];\n  bfs(data[0], dists, data);\n  for (const node of data) {\n    if (dists[node[0]] === undefined) {\n      dists[node[0]] = -1;\n    }\n  }\n  dists.shift();\n  dists.forEach((e, i) => {\n    console.log(i + 1, e);\n  });\n}\nfunction bfs(node, dists, data) {\n  const key = node[0];\n  const next = dists[key] + 1;\n  const children = node.slice(2);\n  for (const child of children) {\n    if (dists[child] === undefined || dists[child] > next) {\n      const nextNode = data.find(e => e[0] === child);\n      dists[child] = next;\n      bfs(nextNode, dists, data);\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8154131430502116, "ngram_match_score": 0.6466326829309493, "weighted_ngram_match_score": 0.7236479498995121, "syntax_match_score": 0.9516129032258065, "dataflow_match_score": 0.9397590361445783}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02314_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const list=input['trim']()['split']('\\x0a');let [n,m]=list[0x0]['split']('\\x20');n=Number(n);m=Number(m);let cm=list[0x1]['trim']()['split']('\\x20');cm=cm['map'](c=>Number(c));const dp=new Map();for(let i=0x0;i<m;i++){dp['set'](cm[i],0x1);}const max=n+0x1;for(let i=0x0;i<=n;i++){if(dp['has'](i)){continue;}let min=max;for(let j=0x0;j<m;j++){const target=i-cm[j];if(target<0x0||!dp['has'](target)){continue;}const count=dp['get'](target);min=Math['min'](count,min);}if(min<max){dp['set'](i,min+0x1);}}console['log'](dp['get'](n));", "test_cases": [["55 4\n1 5 10 50", "2"], ["15 6\n1 2 7 8 12 50", "2"], ["65 6\n1 2 7 8 12 50", "3"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst list = input.trim().split('\\n');\nlet [ n, m ] = list[0].split(' ');\nn = Number(n);\nm = Number(m);\nlet cm = list[1].trim().split(' ');\ncm = cm.map(c => Number(c));\n\nconst dp = new Map();\nfor (let i = 0; i < m; i++) {\n  dp.set(cm[i], 1);\n}\nconst max = n + 1;\nfor (let i = 0; i <= n; i++) {\n  if (dp.has(i)) {\n    continue;\n  }\n\n  let min = max;\n  for (let j = 0; j < m; j++) {\n    const target = i - cm[j];\n    if (target < 0 || !dp.has(target)) {\n      continue;\n    }\n    const count = dp.get(target);\n    min = Math.min(count, min);\n  }\n  if (min < max) {\n    dp.set(i, min + 1);\n  }\n}\n\nconsole.log(dp.get(n));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 584, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst list = input.trim().split(\"\\n\");\nlet [n, m] = list[0].split(\" \");\nn = Number(n);\nm = Number(m);\nlet cm = list[1].trim().split(\" \");\ncm = cm.map(c => Number(c));\nconst dp = new Map();\nfor (let i = 0; i < m; i++) {\n  dp.set(cm[i], 1);\n}\nconst max = n + 1;\nfor (let i = 0; i <= n; i++) {\n  if (dp.has(i)) {\n    continue;\n  }\n  let min = max;\n  for (let j = 0; j < m; j++) {\n    const target = i - cm[j];\n    if (target < 0 || !dp.has(target)) {\n      continue;\n    }\n    const count = dp.get(target);\n    min = Math.min(count, min);\n  }\n  if (min < max) {\n    dp.set(i, min + 1);\n  }\n}\nconsole.log(dp.get(n));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9247430157636063, "ngram_match_score": 0.8579541632109458, "weighted_ngram_match_score": 0.8651142853856478, "syntax_match_score": 1.0, "dataflow_match_score": 0.9759036144578314}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010488803592766383, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.0257863253441728}}
{"filename": "p02409_1", "type": "JavaScript", "obfuscated": "function initOfficialHouse(bMax,fMax,rMax){var o=Array(bMax);for(var b=0x0;b<bMax;b++){o[b]=Array(fMax);for(var f=0x0;f<fMax;f++){o[b][f]=Array(rMax);for(var r=0x0;r<rMax;r++){o[b][f][r]=0x0;}}}return o;}function toString(o){return o['map'](function(b){return b['map'](function(f){return'\\x20'+f['join']('\\x20');})['join']('\\x0a');})['join']('\\x0a####################\\x0a');}const chunk=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=chunk['trim']()['split']('\\x0a');lines['shift']();var o=initOfficialHouse(0x4,0x3,0xa);lines['forEach'](function(line){var bfrv=line['split']('\\x20')['map'](Number);var b=bfrv[0x0],f=bfrv[0x1],r=bfrv[0x2],v=bfrv[0x3];o[b-0x1][f-0x1][r-0x1]+=v;});console['log'](toString(o));", "test_cases": [["3\n1 1 3 8\n3 2 2 7\n4 3 8 1", "0 0 8 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 7 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 0 0"]], "original": "function initOfficialHouse(bMax, fMax, rMax) {\n    var o = Array(bMax);\n    for(var b = 0; b < bMax; b++) {\n        o[b] = Array(fMax);\n        for(var f = 0; f < fMax; f++) {\n            o[b][f] = Array(rMax);\n            for(var r = 0; r < rMax; r++) {\n                o[b][f][r] = 0;\n            }\n        }\n    }\n    return o;\n}\nfunction toString(o){\n    return o.map(function(b){\n        return b.map(function(f){\n            return ' ' + f.join(' ');\n        }).join('\\n');\n    }).join('\\n####################\\n');\n}\n\nconst chunk = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = chunk.trim().split('\\n');\nlines.shift(); // n\nvar o = initOfficialHouse(4, 3, 10);\nlines.forEach(function (line) {\n    var bfrv = line.split(' ').map(Number);\n    var b = bfrv[0], f = bfrv[1], r = bfrv[2], v = bfrv[3];\n    o[b - 1][f - 1][r - 1] += v;\n});\n\nconsole.log(toString(o));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 585, "deobfuscated": "function initOfficialHouse(bMax, fMax, rMax) {\n  var o = Array(bMax);\n  for (var b = 0; b < bMax; b++) {\n    o[b] = Array(fMax);\n    for (var f = 0; f < fMax; f++) {\n      o[b][f] = Array(rMax);\n      for (var r = 0; r < rMax; r++) {\n        o[b][f][r] = 0;\n      }\n    }\n  }\n  return o;\n}\nfunction toString(o) {\n  return o.map(function (b) {\n    return b.map(function (f) {\n      return \" \" + f.join(\" \");\n    }).join(\"\\n\");\n  }).join(\"\\n####################\\n\");\n}\nconst chunk = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = chunk.trim().split(\"\\n\");\nlines.shift();\nvar o = initOfficialHouse(4, 3, 10);\nlines.forEach(function (line) {\n  var bfrv = line.split(\" \").map(Number);\n  var b = bfrv[0];\n  var f = bfrv[1];\n  var r = bfrv[2];\n  var v = bfrv[3];\n  o[b - 1][f - 1][r - 1] += v;\n});\nconsole.log(toString(o));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7951630898829993, "ngram_match_score": 0.5916054321650516, "weighted_ngram_match_score": 0.6487691495891682, "syntax_match_score": 0.9513888888888888, "dataflow_match_score": 0.9888888888888889}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000338571419997713, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.015075376884422065, "new_decrease_halstead_effort": -0.015075376884422287}}
{"filename": "p02596_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const N=lines[0x0]-0x0;let tmp=0x0;for(let i=0x1;i<=0xf4240;i++){tmp*=0xa;tmp+=0x7;tmp%=N;if(tmp===0x0){console['log'](i);return;}}console['log'](-0x1);});function check(ans){return!![];}", "test_cases": [["101", "4"], ["2", "-1"], ["999983", "999982"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const N = lines[0]-0;\n    let tmp = 0;\n    for(let i=1;i<=1000000;i++){\n        tmp *= 10;\n        tmp += 7;\n        tmp %= N;\n        if(tmp === 0){\n            console.log(i);\n            return;\n        }\n    }\n    console.log(-1);\n});\n\nfunction check(ans){\n    \n    return true;\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 586, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  const N = lines[0] - 0;\n  let tmp = 0;\n  for (let i = 1; i <= 1000000; i++) {\n    tmp *= 10;\n    tmp += 7;\n    tmp %= N;\n    if (tmp === 0) {\n      console.log(i);\n      return;\n    }\n  }\n  console.log(-1);\n});\nfunction check(ans) {\n  return true;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7382908655544049, "ngram_match_score": 0.46163701122765743, "weighted_ngram_match_score": 0.5773770074287542, "syntax_match_score": 0.9411764705882353, "dataflow_match_score": 0.972972972972973}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0462857573201112, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.052631578947368474, "new_decrease_halstead_effort": 0.18999999999999995}}
{"filename": "p02661_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['trim']()['split'](/ |\\n/),cid=0x0;console['log'](main()['toString']());function main(){let n=+cin['shift']();let a=Array(n);let b=Array(n);for(let i=0x0;i<n;i++){a[i]=+cin['shift']();b[i]=+cin['shift']();}a=a['sort']((x,y)=>x-y);b=b['sort']((x,y)=>x-y);let min,max;if(n%0x2==0x0){if(a[n/0x2-0x1]!=a[n/0x2])min=a[n/0x2]-0x1/0x2;else min=a[0x2/n];if(b[n/0x2-0x1]!=b[n/0x2])max=b[n/0x2-0x1]+0x1/0x2;else max=b[n/0x2-0x1];return(max-min)*0x2+0x1;}else{min=a[(n-0x1)/0x2];max=b[(n-0x1)/0x2];return max-min+0x1;}}", "test_cases": [["2\n1 2\n2 3", "3"], ["3\n100 100\n10 10000\n1 1000000000", "9991"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.trim().split(/ |\\n/), cid = 0;\n\nconsole.log(main().toString());\n\n\nfunction main() {\n    let n = +cin.shift();\n    let a = Array(n);\n    let b = Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = +cin.shift();\n        b[i] = +cin.shift();\n    }\n    a = a.sort((x, y) => x - y);\n    b = b.sort((x, y) => x - y);\n    let min, max;\n    if (n % 2 == 0) {\n        // 偶数の時 中央値は X(2/n-1)とX(2/n)の平均値\n        // 最小値は、それぞれの値が異なるとき、A(2/n)-1/2、同じならA(2/n)\n        if (a[n / 2 - 1] != a[n / 2]) min = a[n / 2] - 1 / 2;\n        else min = a[2 / n];\n        if (b[n / 2 - 1] != b[n / 2]) max = b[n / 2 - 1] + 1 / 2;\n        else max = b[n / 2 - 1];\n        return (max - min) * 2 + 1;\n    } else {\n        min = a[(n - 1) / 2];\n        max = b[(n - 1) / 2];\n        return (max - min) + 1;\n    }\n\n\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 587, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.trim().split(/ |\\n/);\nvar cid = 0;\nconsole.log(main().toString());\nfunction main() {\n  let n = +cin.shift();\n  let a = Array(n);\n  let b = Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = +cin.shift();\n    b[i] = +cin.shift();\n  }\n  a = a.sort((x, y) => x - y);\n  b = b.sort((x, y) => x - y);\n  let min;\n  let max;\n  if (n % 2 == 0) {\n    if (a[n / 2 - 1] != a[n / 2]) {\n      min = a[n / 2] - 1 / 2;\n    } else {\n      min = a[2 / n];\n    }\n    if (b[n / 2 - 1] != b[n / 2]) {\n      max = b[n / 2 - 1] + 1 / 2;\n    } else {\n      max = b[n / 2 - 1];\n    }\n    return (max - min) * 2 + 1;\n  } else {\n    min = a[(n - 1) / 2];\n    max = b[(n - 1) / 2];\n    return max - min + 1;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8836401169623286, "ngram_match_score": 0.8000184938621834, "weighted_ngram_match_score": 0.8237139485094238, "syntax_match_score": 0.910828025477707, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00024347300510085823, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.009569377990430672, "new_decrease_halstead_effort": -0.009569377990430672}}
{"filename": "p02685_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');function pow(x,n){let res=0x1;while(n>0x0){if(n&0x1)res=mul(res,x);x=mul(x,x);n>>=0x1;}return res;}function inv(x){if(x==0x1)return 0x1;return pow(x,mod-0x2);}function mul(a,b){return((a>>0x10)*b%mod*0x10000+(a&0xffff)*b)%mod;}const mod=0x3b800001;(input=>{const lines=input['split']('\\x0a');let [N,M,K]=lines[0x0]['split']('\\x20')['map'](Number);let ans=0x0;let fa=0x1;let fa2=0x1;for(let k=0x0;k<=K;k++){fa=fa*(k||0x1)%mod;fa2=fa2*(k?N-k:0x1)%mod;let left=mul(fa2,inv(fa))%mod;ans+=mul(left,pow(M-0x1,N-(k+0x1)))*M%mod;}console['log'](ans%mod);})(input);", "test_cases": [["3 2 1", "6"], ["100 100 0", "73074801"], ["60522 114575 7559", "479519525"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nfunction pow (x ,n) {\n    let res = 1\n    while (n > 0) {\n        if (n & 1) res = mul(res, x)\n        x = mul(x, x)\n        n >>= 1\n    }\n    return res\n}\n\nfunction inv (x) {\n    if (x == 1) return 1;\n    return pow(x, mod - 2);\n}\n\nfunction mul (a, b) {\n    return ((a >> 16) * b % mod * 65536 + (a & 65535) * b) % mod\n}\n\nconst mod = 998244353\n\n;(input => {\n    const lines = input.split('\\n')\n    let [N, M, K] = lines[0].split(' ').map(Number)\n\n    let ans = 0\n    let fa = 1\n    let fa2 = 1\n    for (let k = 0; k <= K; k++) {\n        fa = fa * (k || 1) % mod\n        fa2 = fa2 * (k ? (N - k) : 1) % mod\n        let left = mul(fa2, inv(fa)) % mod\n        ans += mul(left, pow((M - 1), (N - (k + 1)))) * M % mod\n    }\n\n    console.log(ans % mod)\n \n})(input)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 588, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nfunction pow(x, n) {\n  let res = 1;\n  while (n > 0) {\n    if (n & 1) {\n      res = mul(res, x);\n    }\n    x = mul(x, x);\n    n >>= 1;\n  }\n  return res;\n}\nfunction inv(x) {\n  if (x == 1) {\n    return 1;\n  }\n  return pow(x, mod - 2);\n}\nfunction mul(a, b) {\n  return ((a >> 16) * b % mod * 65536 + (a & 65535) * b) % mod;\n}\nconst mod = 998244353;\n(input => {\n  const lines = input.split(\"\\n\");\n  let [N, M, K] = lines[0].split(\" \").map(Number);\n  let ans = 0;\n  let fa = 1;\n  let fa2 = 1;\n  for (let k = 0; k <= K; k++) {\n    fa = fa * (k || 1) % mod;\n    fa2 = fa2 * (k ? N - k : 1) % mod;\n    let left = mul(fa2, inv(fa)) % mod;\n    ans += mul(left, pow(M - 1, N - (k + 1))) * M % mod;\n  }\n  console.log(ans % mod);\n})(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6920379547226081, "ngram_match_score": 0.5295262038127844, "weighted_ngram_match_score": 0.5434263397153289, "syntax_match_score": 0.7681159420289855, "dataflow_match_score": 0.9270833333333334}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02735_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');l=inp['shift']()['split']('\\x20');H=l['shift']()*0x1;W=l['shift']()*0x1;l=[];m=[];for(i=0x0;i<H;i++){l['push'](inp['shift']()['split'](''));m[i]=[];for(j=0x0;j<W;j++){m[i][j]=0x0;}}if(l[0x0][0x0]=='#'){m[0x0][0x0]=0x1;}r=0x0;for(c=0x1;c<W;c++){m[r][c]=l[r][c-0x1]==l[r][c]?m[r][c-0x1]:m[r][c-0x1]+0x1;}c=0x0;for(r=0x1;r<H;r++){m[r][c]=l[r-0x1][c]==l[r][c]?m[r-0x1][c]:m[r-0x1][c]+0x1;}for(i=0x1;i<H;i++){r=i;for(c=i;c<W;c++){s=l[r][c-0x1]==l[r][c]?m[r][c-0x1]:m[r][c-0x1]+0x1;t=l[r-0x1][c]==l[r][c]?m[r-0x1][c]:m[r-0x1][c]+0x1;m[r][c]=Math['min'](s,t);}c=i;for(r=i;r<H;r++){s=l[r-0x1][c]==l[r][c]?m[r-0x1][c]:m[r-0x1][c]+0x1;t=l[r][c-0x1]==l[r][c]?m[r][c-0x1]:m[r][c-0x1]+0x1;m[r][c]=Math['min'](s,t);}}console['log'](Math['ceil'](m[H-0x1][W-0x1]/0x2));", "test_cases": [["3 3\n.##\n.#.\n##.", "1"], ["2 2\n#.\n.#", "2"], ["4 4\n..##\n#...\n###.\n###.", "0"], ["5 5\n.#.#.\n#.#.#\n.#.#.\n#.#.#\n.#.#.", "4"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\nH = l.shift() * 1\nW = l.shift() * 1 \nl = []\nm = []\nfor (i=0; i<H; i++) {\n  l.push(inp.shift().split(''))\n  m[i] = []\n  for (j=0; j<W; j++) {\n      m[i][j] = 0 \n  }\n}\nif (l[0][0] == \"#\") {\n    m[0][0] = 1\n}\nr = 0\nfor (c=1; c<W; c++) {\n  m[r][c] = l[r][c-1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1 \n}\nc = 0\nfor (r=1; r<H; r++) {\n  m[r][c] = l[r-1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1 \n}\nfor (i=1; i<H; i++) {\n    r = i\n    for (c=i; c<W; c++) {\n      s = l[r][c-1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1\n      t = l[r-1][c] == l[r][c] ? m[r-1][c] : m[r-1][c] + 1\n      m[r][c] = Math.min(s, t)\n    }\n    c = i\n    for (r=i; r<H; r++) {\n      s = l[r-1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1\n      t = l[r][c-1] == l[r][c] ? m[r][c- 1] : m[r][c-1] + 1\n      m[r][c] = Math.min(s, t)\n    }\n}\nconsole.log(Math.ceil(m[H-1][W-1] / 2))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 589, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nl = inp.shift().split(\" \");\nH = l.shift() * 1;\nW = l.shift() * 1;\nl = [];\nm = [];\nfor (i = 0; i < H; i++) {\n  l.push(inp.shift().split(\"\"));\n  m[i] = [];\n  for (j = 0; j < W; j++) {\n    m[i][j] = 0;\n  }\n}\nif (l[0][0] == \"#\") {\n  m[0][0] = 1;\n}\nr = 0;\nfor (c = 1; c < W; c++) {\n  m[r][c] = l[r][c - 1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1;\n}\nc = 0;\nfor (r = 1; r < H; r++) {\n  m[r][c] = l[r - 1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1;\n}\nfor (i = 1; i < H; i++) {\n  r = i;\n  for (c = i; c < W; c++) {\n    s = l[r][c - 1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1;\n    t = l[r - 1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1;\n    m[r][c] = Math.min(s, t);\n  }\n  c = i;\n  for (r = i; r < H; r++) {\n    s = l[r - 1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1;\n    t = l[r][c - 1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1;\n    m[r][c] = Math.min(s, t);\n  }\n}\nconsole.log(Math.ceil(m[H - 1][W - 1] / 2));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6930802893889303, "ngram_match_score": 0.33739728422312765, "weighted_ngram_match_score": 0.43492387333259325, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02795_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');let H=Number(input[0x0]['split']('\\x20'));let W=Number(input[0x1]['split']('\\x20'));let N=Number(input[0x2]['split']('\\x20'));let paintedRow=0x0;let paintedColumn=0x0;let paintedCell=0x0;while(0x1){if(W>=H){paintedCell+=W-paintedColumn;paintedRow++;}else{paintedCell+=H-paintedRow;paintedColumn++;}if(paintedCell>=N)break;}console['log'](paintedColumn+paintedRow);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n7\n10", "2"], ["14\n12\n112", "8"], ["2\n100\n200", "2"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet H = Number(input[0].split(' '))\n\tlet W = Number(input[1].split(' '))\n\tlet N = Number(input[2].split(' '))\n\tlet paintedRow = 0\n\tlet paintedColumn = 0\n\tlet paintedCell = 0\n\twhile(1) {\n\t\tif(W >= H) {\n\t\t\tpaintedCell += W - paintedColumn\n\t\t\tpaintedRow++\n\t\t} else {\n\t\t\tpaintedCell += H - paintedRow\n\t\t\tpaintedColumn++\n\t\t}\n\t\tif(paintedCell >= N) break\n\t}\n\tconsole.log(paintedColumn + paintedRow)\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 590, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  let H = Number(input[0].split(\" \"));\n  let W = Number(input[1].split(\" \"));\n  let N = Number(input[2].split(\" \"));\n  let paintedRow = 0;\n  let paintedColumn = 0;\n  let paintedCell = 0;\n  while (1) {\n    if (W >= H) {\n      paintedCell += W - paintedColumn;\n      paintedRow++;\n    } else {\n      paintedCell += H - paintedRow;\n      paintedColumn++;\n    }\n    if (paintedCell >= N) {\n      break;\n    }\n  }\n  console.log(paintedColumn + paintedRow);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5441056927679473, "ngram_match_score": 0.40992340660139637, "weighted_ngram_match_score": 0.4492451900733614, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 0.40816326530612246}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03005_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const K=parseInt(arg[0x0]['split']('\\x20')[0x1]);console['log'](K===0x1?0x0:N-K);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2", "1"], ["3 1", "0"], ["8 5", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n\n    console.log(K === 1 ? 0 : N - K);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 591, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const K = parseInt(arg[0].split(\" \")[1]);\n  console.log(K === 1 ? 0 : N - K);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9229848782414367, "ngram_match_score": 0.841050496142499, "weighted_ngram_match_score": 0.850889016823248, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03082_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){let lines=input['split']('\\x0a');let NX=lines['shift']()['trim']()['split'](/\\s/)['map'](v=>v-0x0);let n=NX[0x0],x=NX[0x1];let S=lines['shift']()['trim']()['split'](/\\s/)['map'](v=>v-0x0);const MOD=0x3b9aca00+0x7,MAX_N=0xd2,MAX_VAL=0x186a0+0xa;const add=(a,b)=>(a+b)%MOD;const mul=(a,b)=>a*b%MOD;let dp=new Array(MAX_N)['fill'](0x0)['map'](()=>new Array(MAX_VAL)['fill'](-0x1));const rec=(pos,rem)=>{if(pos==n)return rem;let ret=dp[pos][rem];if(ret!=-0x1)return ret;ret=0x0;dp[pos][rem]=add(ret,rec(pos+0x1,rem%S[pos]));dp[pos][rem]=add(dp[pos][rem],mul(n-pos-0x1,rec(pos+0x1,rem)));return dp[pos][rem];};S['sort']((a,b)=>b-a);console['log'](rec(0x0,x));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 19\n3 7", "3"], ["5 82\n22 11 6 5 13", "288"], ["10 100000\n50000 50001 50002 50003 50004 50005 50006 50007 50008 50009", "279669259"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let NX = lines.shift().trim().split(/\\s/).map((v) => v - 0);\n    let n = NX[0], x = NX[1];\n    let S = lines.shift().trim().split(/\\s/).map((v) => v - 0);\n    const MOD = 1e9 + 7, MAX_N = 210, MAX_VAL = 1e5 + 10;\n    const add = (a, b) => (a + b) % MOD;\n    const mul = (a, b) => (a * b) % MOD;\n    let dp = new Array(MAX_N).fill(0).map(() => new Array(MAX_VAL).fill(-1));\n    const rec = (pos, rem) => {\n        if (pos == n) return rem;\n        let ret = dp[pos][rem]\n        if (ret != -1) return ret;\n        ret = 0;\n        dp[pos][rem] = add(ret, rec(pos + 1, rem % S[pos]));\n        dp[pos][rem] = add(dp[pos][rem], mul(n - pos - 1, rec(pos + 1, rem)));\n        return dp[pos][rem];\n    }\n    S.sort((a, b) => b - a);\n    console.log(rec(0, x));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 592, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let NX = lines.shift().trim().split(/\\s/).map(v => v - 0);\n  let n = NX[0];\n  let x = NX[1];\n  let S = lines.shift().trim().split(/\\s/).map(v => v - 0);\n  const MOD = 1000000007;\n  const MAX_N = 210;\n  const MAX_VAL = 100010;\n  const add = (a, b) => (a + b) % MOD;\n  const mul = (a, b) => a * b % MOD;\n  let dp = new Array(MAX_N).fill(0).map(() => new Array(MAX_VAL).fill(-1));\n  const rec = (pos, rem) => {\n    if (pos == n) {\n      return rem;\n    }\n    let ret = dp[pos][rem];\n    if (ret != -1) {\n      return ret;\n    }\n    ret = 0;\n    dp[pos][rem] = add(ret, rec(pos + 1, rem % S[pos]));\n    dp[pos][rem] = add(dp[pos][rem], mul(n - pos - 1, rec(pos + 1, rem)));\n    return dp[pos][rem];\n  };\n  S.sort((a, b) => b - a);\n  console.log(rec(0, x));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.716923968784105, "ngram_match_score": 0.7175980031701771, "weighted_ngram_match_score": 0.7411333875845573, "syntax_match_score": 0.8475609756097561, "dataflow_match_score": 0.5614035087719298}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005527439795558697, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.008695652173912993, "new_decrease_halstead_effort": 0.1329157586851979}}
{"filename": "p03192_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');S=input[0x0]['split']('');var ans=0x0;for(i=0x0;i<S['length'];i++){if(S[i]=='2'){ans++;}}console['log']('%s',ans);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1222", "3"], ["3456", "0"], ["9592", "1"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  S= input[0].split(\"\");\n  var ans=0;\n  for(i=0;i<S.length;i++){\n    if(S[i]==\"2\"){\n      ans++;\n    }\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 593, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  S = input[0].split(\"\");\n  var ans = 0;\n  for (i = 0; i < S.length; i++) {\n    if (S[i] == \"2\") {\n      ans++;\n    }\n  }\n  console.log(\"%s\", ans);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6943018232434894, "ngram_match_score": 0.3122610128912594, "weighted_ngram_match_score": 0.46494628008269806, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03387_1", "type": "JavaScript", "obfuscated": "function Main(s){var s=s['split']('\\x0a')[0x0]['split']('\\x20')['map'](e=>parseInt(e,0xa))['sort']((a,b)=>b-a);var cnt=0x0;if((s[0x1]-s[0x2])%0x2===0x0){cnt+=s[0x0]-s[0x1];s[0x2]+=cnt;cnt+=(s[0x0]-s[0x2])/0x2;}else{s[0x0]++;s[0x1]++;cnt++;cnt+=s[0x0]-s[0x1];s[0x2]+=s[0x0]-s[0x1];cnt+=(s[0x0]-s[0x2])/0x2;}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 5 4", "2"], ["2 6 3", "5"], ["31 41 5", "23"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\")[0].split(\" \").map(e => parseInt(e, 10)).sort((a, b) => b - a);\n  var cnt = 0;\n  if ((s[1] - s[2]) % 2 === 0) {\n    cnt += s[0] - s[1];\n    s[2] += cnt;\n    cnt += (s[0] - s[2]) / 2;\n  } else {\n    s[0]++;\n    s[1]++;\n    cnt++;\n    cnt += s[0] - s[1];\n    s[2] += s[0] - s[1];\n    cnt += (s[0] - s[2]) / 2;\n  }\n  console.log(cnt);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 594, "deobfuscated": "function Main(s) {\n  var s = s.split(\"\\n\")[0].split(\" \").map(e => parseInt(e, 10)).sort((a, b) => b - a);\n  var cnt = 0;\n  if ((s[1] - s[2]) % 2 === 0) {\n    cnt += s[0] - s[1];\n    s[2] += cnt;\n    cnt += (s[0] - s[2]) / 2;\n  } else {\n    s[0]++;\n    s[1]++;\n    cnt++;\n    cnt += s[0] - s[1];\n    s[2] += s[0] - s[1];\n    cnt += (s[0] - s[2]) / 2;\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03739_1", "type": "JavaScript", "obfuscated": "function Main(s){var s=s['split']('\\x0a');var n=parseInt(s[0x0],0xa);var a=s[0x1]['split']('\\x20')['map'](e=>parseInt(e,0xa));var acc=0x0,cnt=0x0,arr=[];for(var i=0x0;i<n;i++){acc+=a[i];if(i===0x0){if(acc===0x0){if(a[i+0x1]>=0x0){acc-=a[i+0x1]-0x1;if(acc===0x0)acc--;cnt+=Math['abs'](acc);}else{acc+=Math['abs'](a[i+0x1])-0x1;if(acc===0x0)acc++;cnt+=acc;}}}else{if(arr[i-0x1]>0x0){if(acc>=0x0){cnt+=acc+0x1;acc-=acc+0x1;}}else{if(acc<=0x0){cnt+=Math['abs'](acc)+0x1;acc+=Math['abs'](acc)+0x1;}}}arr['push'](acc);}console['log'](cnt);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 -3 1 0", "4"], ["5\n3 -6 4 -5 7", "0"], ["6\n-1 4 3 2 -5 4", "8"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var n = parseInt(s[0], 10);\n  var a = s[1].split(\" \").map(e => parseInt(e, 10));\n  var acc = 0, cnt = 0, arr = [];\n  for (var i = 0; i < n; i++) {\n    acc += a[i];\n    if (i === 0) {\n      if (acc === 0) {\n        if (a[i + 1] >= 0) {\n          acc -= (a[i + 1] - 1);\n          if (acc === 0) acc--;\n          cnt += Math.abs(acc);\n        } else {\n          acc += (Math.abs(a[i + 1]) - 1);\n          if (acc === 0) acc++;\n          cnt += acc;\n        }\n      }\n    } else {\n      if (arr[i - 1] > 0) {\n        if (acc >= 0) {\n          cnt += (acc + 1);\n          acc -= (acc + 1);\n        }\n      } else {\n        if (acc <= 0) {\n          cnt += (Math.abs(acc) + 1);\n          acc += (Math.abs(acc) + 1);\n        }\n      }\n    }\n    arr.push(acc);\n  }\n  console.log(cnt);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 595, "deobfuscated": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var n = parseInt(s[0], 10);\n  var a = s[1].split(\" \").map(e => parseInt(e, 10));\n  var acc = 0;\n  var cnt = 0;\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    acc += a[i];\n    if (i === 0) {\n      if (acc === 0) {\n        if (a[i + 1] >= 0) {\n          acc -= a[i + 1] - 1;\n          if (acc === 0) {\n            acc--;\n          }\n          cnt += Math.abs(acc);\n        } else {\n          acc += Math.abs(a[i + 1]) - 1;\n          if (acc === 0) {\n            acc++;\n          }\n          cnt += acc;\n        }\n      }\n    } else if (arr[i - 1] > 0) {\n      if (acc >= 0) {\n        cnt += acc + 1;\n        acc -= acc + 1;\n      }\n    } else if (acc <= 0) {\n      cnt += Math.abs(acc) + 1;\n      acc += Math.abs(acc) + 1;\n    }\n    arr.push(acc);\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7822981894339611, "ngram_match_score": 0.6936719066715451, "weighted_ngram_match_score": 0.7088541843976328, "syntax_match_score": 0.7266666666666667, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0004997449940535859, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.010752688172043001, "new_decrease_halstead_effort": -0.010752688172043001}}
{"filename": "p03964_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]);t=new Array(n)['fill'](0x0);a=new Array(n)['fill'](0x0);for(i=0x0;i<n;i++){t[i]=parseInt(input[i+0x1]['split']('\\x20')[0x0]);a[i]=parseInt(input[i+0x1]['split']('\\x20')[0x1]);}var tvote=t[0x0];var avote=a[0x0];for(i=0x1;i<n;i++){if(Math['ceil'](tvote/t[i])*t[i]/t[i]*a[i]>=avote){tvote=Math['ceil'](tvote/t[i])*t[i];avote=Math['ceil'](tvote/t[i])*t[i]/t[i]*a[i];}else{tvote=Math['ceil'](avote/a[i])*a[i]/a[i]*t[i];avote=Math['ceil'](avote/a[i])*a[i];}}var ans=avote+tvote;console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n2 3\n1 1\n3 2", "10"], ["4\n1 1\n1 1\n1 5\n1 100", "101"], ["5\n3 10\n48 17\n31 199\n231 23\n3 2", "6930"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  t = new Array(n).fill(0);\n  a = new Array(n).fill(0);\n  for(i=0;i<n;i++){\n      t[i]=parseInt(input[i+1].split(\" \")[0]);\n      a[i]=parseInt(input[i+1].split(\" \")[1]);\n  }\n  var tvote=t[0];\n  var avote=a[0];\n  \n  for(i=1;i<n;i++){\n      if(((Math.ceil(tvote/t[i])*t[i])/t[i])*a[i]>=avote){\n          tvote=Math.ceil(tvote/t[i])*t[i];\n          avote=((Math.ceil(tvote/t[i])*t[i])/t[i])*a[i];\n      }else{\n          tvote=((Math.ceil(avote/a[i])*a[i])/a[i])*t[i];\n          avote=Math.ceil(avote/a[i])*a[i];\n      }\n  }\n  var ans=avote+tvote;\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 596, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  t = new Array(n).fill(0);\n  a = new Array(n).fill(0);\n  for (i = 0; i < n; i++) {\n    t[i] = parseInt(input[i + 1].split(\" \")[0]);\n    a[i] = parseInt(input[i + 1].split(\" \")[1]);\n  }\n  var tvote = t[0];\n  var avote = a[0];\n  for (i = 1; i < n; i++) {\n    if (Math.ceil(tvote / t[i]) * t[i] / t[i] * a[i] >= avote) {\n      tvote = Math.ceil(tvote / t[i]) * t[i];\n      avote = Math.ceil(tvote / t[i]) * t[i] / t[i] * a[i];\n    } else {\n      tvote = Math.ceil(avote / a[i]) * a[i] / a[i] * t[i];\n      avote = Math.ceil(avote / a[i]) * a[i];\n    }\n  }\n  var ans = avote + tvote;\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6374124159866641, "ngram_match_score": 0.1818244433139059, "weighted_ngram_match_score": 0.5376365413874673, "syntax_match_score": 0.8301886792452831, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02240_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};line=require('fs')['readFileSync'](config['input'],'ascii')['trim']()['split'](config['newline'])['map'](function(line){return line['split']('\\x20')['map'](Number);});n=line[0x0][0x0];m=line[0x0][0x1];q=line[m+0x1][0x0];adj=new Array(n);for(i=0x0;i<n;i++)adj[i]=null;conn=line['slice'](0x1,m+0x1);conn['sort'](function(a,b){if(a[0x0]===b[0x0])return a[0x1]-b[0x1];return a[0x0]-b[0x0];});for(i in conn){min0=id0=conn[i][0x0];min1=id1=conn[i][0x1];while(adj[min0]!==null)min0=adj[min0];while(adj[min1]!==null)min1=adj[min1];min=Math['min'](min0,min1);if(id0!==min)adj[id0]=min;if(id1!==min)adj[id1]=min;}q=line['slice'](m+0x2,m+0x2+q);for(i in q){min0=q[i][0x0];min1=q[i][0x1];while(adj[min0]!==null)min0=adj[min0];while(adj[min1]!==null)min1=adj[min1];console['log'](min0===min1?'yes':'no');}", "test_cases": [["10 9\n0 1\n0 2\n3 4\n5 7\n5 6\n6 7\n6 8\n7 8\n8 9\n3\n0 1\n5 9\n1 3", "yes\nyes\nno"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline)\n  .map(function (line) { return line.split(' ').map(Number); });\n\nn = line[0][0];\nm = line[0][1];\nq = line[m+1][0];\n\nadj = new Array(n);\nfor (i = 0; i < n; i++) adj[i] = null;\n\nconn = line.slice(1, m+1);\nconn.sort(function (a, b) {\n  if (a[0] === b[0]) return a[1] - b[1];\n  return a[0] - b[0];\n});\n\nfor (i in conn) {\n  min0 = id0 = conn[i][0];\n  min1 = id1 = conn[i][1];\n  while (adj[min0] !== null) min0 = adj[min0];\n  while (adj[min1] !== null) min1 = adj[min1];\n  min = Math.min(min0, min1);\n  if (id0 !== min) adj[id0] = min;\n  if (id1 !== min) adj[id1] = min;\n}\n\nq = line.slice(m+2, m+2+q);\nfor (i in q) {\n  min0 = q[i][0];\n  min1 = q[i][1];\n  while (adj[min0] !== null) min0 = adj[min0];\n  while (adj[min1] !== null) min1 = adj[min1];\n  console.log((min0 === min1) ? 'yes' : 'no');\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 597, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nline = require(\"fs\").readFileSync(config.input, \"ascii\").trim().split(config.newline).map(function (line) {\n  return line.split(\" \").map(Number);\n});\nn = line[0][0];\nm = line[0][1];\nq = line[m + 1][0];\nadj = new Array(n);\nfor (i = 0; i < n; i++) {\n  adj[i] = null;\n}\nconn = line.slice(1, m + 1);\nconn.sort(function (a, b) {\n  if (a[0] === b[0]) {\n    return a[1] - b[1];\n  }\n  return a[0] - b[0];\n});\nfor (i in conn) {\n  min0 = id0 = conn[i][0];\n  min1 = id1 = conn[i][1];\n  while (adj[min0] !== null) {\n    min0 = adj[min0];\n  }\n  while (adj[min1] !== null) {\n    min1 = adj[min1];\n  }\n  min = Math.min(min0, min1);\n  if (id0 !== min) {\n    adj[id0] = min;\n  }\n  if (id1 !== min) {\n    adj[id1] = min;\n  }\n}\nq = line.slice(m + 2, m + 2 + q);\nfor (i in q) {\n  min0 = q[i][0];\n  min1 = q[i][1];\n  while (adj[min0] !== null) {\n    min0 = adj[min0];\n  }\n  while (adj[min1] !== null) {\n    min1 = adj[min1];\n  }\n  console.log(min0 === min1 ? \"yes\" : \"no\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.752861330535102, "ngram_match_score": 0.5458196093843773, "weighted_ngram_match_score": 0.5913399984703164, "syntax_match_score": 0.8742857142857143, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02027130077336259}}
{"filename": "p02272_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');let input='';process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){main(input['split']('\\x0a'));});let count=0x0;function merge(A,left,mid,right){let n1=mid-left;let n2=right-mid;let L=[];let R=[];for(let i=0x0;i<n1;i++)L['push'](A[left+i]);for(let i=0x0;i<n2;i++)R['push'](A[mid+i]);L['push'](Number['MAX_SAFE_INTEGER']);R['push'](Number['MAX_SAFE_INTEGER']);let i=0x0,j=0x0;for(let k=left;k<right;k++){if(L[i]<R[j])A[k]=L[i++];else A[k]=R[j++];count++;}}function mergeSort(A,left,right,count){if(left+0x1>=right)return;let mid=Math['floor']((left+right)/0x2);mergeSort(A,left,mid);mergeSort(A,mid,right);merge(A,left,mid,right);}function main(lines){let n=Number(lines[0x0]);let A=lines[0x1]['split']('\\x20')['map'](Number);mergeSort(A,0x0,n);console['log'](A['join']('\\x20'));console['log'](count);}", "test_cases": [["10\n8 5 9 2 6 3 7 1 10 4", "1 2 3 4 5 6 7 8 9 10\n34"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nlet input = '';\nprocess.stdin.on('data', function(chunk) {input += chunk;});\nprocess.stdin.on('end', function() {main(input.split(\"\\n\"));});\n\nlet count = 0;\n\nfunction merge(A,left,mid,right) {\n\tlet n1 = mid - left;\n\tlet n2 = right - mid;\n\tlet L = [];\n\tlet R = [];\n\tfor (let i = 0; i < n1; i++) L.push(A[left+i]);\n\tfor (let i = 0; i < n2; i++) R.push(A[mid+i]);\n\tL.push(Number.MAX_SAFE_INTEGER);\n\tR.push(Number.MAX_SAFE_INTEGER);\n\n\tlet i = 0,j = 0;\n\tfor (let k = left; k < right; k++) {\n\t\tif (L[i] < R[j]) A[k] = L[i++];\n\t\telse A[k] = R[j++];\n\t\tcount++;\n\t}\n}\n\nfunction mergeSort(A,left,right,count) {\n\tif (left + 1 >= right) return;\n\tlet mid = Math.floor((left + right) / 2);\n\tmergeSort(A,left,mid);\n\tmergeSort(A,mid,right);\n\tmerge(A,left,mid,right);\n}\n\nfunction main(lines) {\n\tlet n = Number(lines[0]);\n\tlet A = lines[1].split(\" \").map(Number);\n\tmergeSort(A,0,n);\n\n\tconsole.log(A.join(\" \"));\n\tconsole.log(count);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 598, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nlet input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  main(input.split(\"\\n\"));\n});\nlet count = 0;\nfunction merge(A, left, mid, right) {\n  let n1 = mid - left;\n  let n2 = right - mid;\n  let L = [];\n  let R = [];\n  for (let i = 0; i < n1; i++) {\n    L.push(A[left + i]);\n  }\n  for (let i = 0; i < n2; i++) {\n    R.push(A[mid + i]);\n  }\n  L.push(Number.MAX_SAFE_INTEGER);\n  R.push(Number.MAX_SAFE_INTEGER);\n  let i = 0;\n  let j = 0;\n  for (let k = left; k < right; k++) {\n    if (L[i] < R[j]) {\n      A[k] = L[i++];\n    } else {\n      A[k] = R[j++];\n    }\n    count++;\n  }\n}\nfunction mergeSort(A, left, right, count) {\n  if (left + 1 >= right) {\n    return;\n  }\n  let mid = Math.floor((left + right) / 2);\n  mergeSort(A, left, mid);\n  mergeSort(A, mid, right);\n  merge(A, left, mid, right);\n}\nfunction main(lines) {\n  let n = Number(lines[0]);\n  let A = lines[1].split(\" \").map(Number);\n  mergeSort(A, 0, n);\n  console.log(A.join(\" \"));\n  console.log(count);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7914294981315206, "ngram_match_score": 0.5380199982303688, "weighted_ngram_match_score": 0.7003236926197358, "syntax_match_score": 0.9273743016759777, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00021086815242310486, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0038610038610038533, "new_decrease_halstead_effort": -0.0038610038610038533}}
{"filename": "p02386_1", "type": "JavaScript", "obfuscated": "function move(d1,d2,d3,d4,d5,d6){var x=this['toString']();if(x=='N')return[d2,d6,d3,d4,d1,d5];if(x=='E')return[d4,d2,d1,d6,d5,d3];}function roll(d1,d2,d3,d4,d5,d6){return[d1,d3,d5,d2,d4,d6];}function rolls(arr){for(var i=0x0;i<0x4;i++){obj[arr['join'](',')]=!![];arr=roll['apply'](null,arr);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr['shift']()-0x0;var OBJ={};var result='Yes';for(var i=0x0;i<n;i++){var obj={};var dice=Arr[i]['split']('\\x20')['map'](Number);for(var j=0x0;j<0x4;j++){rolls(dice);dice=move['apply']('N',dice);}dice=move['apply']('E',dice);rolls(dice);dice=move['apply']('E',dice);dice=move['apply']('E',dice);rolls(dice);for(var k in obj){if(OBJ['hasOwnProperty'](k))result='No';else OBJ[k]=!![];}if(result=='No')break;}console['log'](result);", "test_cases": [["3\n1 2 3 4 5 6\n6 2 4 3 5 1\n6 5 4 3 2 1", "No"], ["3\n1 2 3 4 5 6\n6 5 4 3 2 1\n5 4 3 2 1 6", "Yes"]], "original": "function move(d1,d2,d3,d4,d5,d6){\n   var x=this.toString();\n   if(x==\"N\")return [d2,d6,d3,d4,d1,d5];\n   if(x==\"E\")return [d4,d2,d1,d6,d5,d3];\n}\nfunction roll(d1,d2,d3,d4,d5,d6){\n   return [d1,d3,d5,d2,d4,d6];\n}\nfunction rolls(arr){\n   for(var i=0;i<4;i++){\n      obj[arr.join(\",\")]=true;\n      arr=roll.apply(null,arr);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nvar OBJ={};\nvar result=\"Yes\";\nfor(var i=0;i<n;i++){\n   var obj={};\n   var dice=Arr[i].split(\" \").map(Number);\n   for(var j=0;j<4;j++){\n      rolls(dice);\n      dice=move.apply(\"N\",dice);\n   }\n   dice=move.apply(\"E\",dice);\n   rolls(dice);\n   dice=move.apply(\"E\",dice);\n   dice=move.apply(\"E\",dice);\n   rolls(dice);\n   for(var k in obj){\n      if(OBJ.hasOwnProperty(k))result= \"No\";\n      else OBJ[k]=true;\n   }\n   if(result==\"No\")break;\n}\nconsole.log(result);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 599, "deobfuscated": "function move(d1, d2, d3, d4, d5, d6) {\n  var x = this.toString();\n  if (x == \"N\") {\n    return [d2, d6, d3, d4, d1, d5];\n  }\n  if (x == \"E\") {\n    return [d4, d2, d1, d6, d5, d3];\n  }\n}\nfunction roll(d1, d2, d3, d4, d5, d6) {\n  return [d1, d3, d5, d2, d4, d6];\n}\nfunction rolls(arr) {\n  for (var i = 0; i < 4; i++) {\n    obj[arr.join(\",\")] = true;\n    arr = roll.apply(null, arr);\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr.shift() - 0;\nvar OBJ = {};\nvar result = \"Yes\";\nfor (var i = 0; i < n; i++) {\n  var obj = {};\n  var dice = Arr[i].split(\" \").map(Number);\n  for (var j = 0; j < 4; j++) {\n    rolls(dice);\n    dice = move.apply(\"N\", dice);\n  }\n  dice = move.apply(\"E\", dice);\n  rolls(dice);\n  dice = move.apply(\"E\", dice);\n  dice = move.apply(\"E\", dice);\n  rolls(dice);\n  for (var k in obj) {\n    if (OBJ.hasOwnProperty(k)) {\n      result = \"No\";\n    } else {\n      OBJ[k] = true;\n    }\n  }\n  if (result == \"No\") {\n    break;\n  }\n}\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5100559759715912, "ngram_match_score": 0.034902346578967264, "weighted_ngram_match_score": 0.10961603583500518, "syntax_match_score": 0.8957055214723927, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.003219808660421153, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.024691358024691357, "new_decrease_halstead_effort": 0.09729766803840889}}
{"filename": "p02400_1", "type": "JavaScript", "obfuscated": "var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){var a=line['split']('\\x20');var b=parseInt(a[0x0],0xa);var c=b*b*Math['PI'];var d=b*0x2*Math['PI'];console['log'](c['toFixed'](0x6)+'\\x20'+d['toFixed'](0x6));process['exit']();});process['stdin']['on']('end',function(){});", "test_cases": [["2", "12.566371 12.566371"], ["3", "28.274334 18.849556"]], "original": "var lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var b = parseInt(a[0],10);\n  var c = b*b*Math.PI;\n  var d = b*2*Math.PI;\n  console.log(c.toFixed(6)+\" \"+d.toFixed(6));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 600, "deobfuscated": "var lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  var a = line.split(\" \");\n  var b = parseInt(a[0], 10);\n  var c = b * b * Math.PI;\n  var d = b * 2 * Math.PI;\n  console.log(c.toFixed(6) + \" \" + d.toFixed(6));\n  process.exit();\n});\nprocess.stdin.on(\"end\", function () {});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.671178727880041, "ngram_match_score": 0.329303926376117, "weighted_ngram_match_score": 0.4411252708583324, "syntax_match_score": 1.0, "dataflow_match_score": 0.9142857142857143}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02617_1", "type": "JavaScript", "obfuscated": "const [_n,..._edges]=require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\n/);const n=Number(_n);let result=n*(n+0x1)*(n+0x2)/0x6;for(const _edge of _edges){let [u,v]=_edge['split'](/\\s/)['map'](Number);if(u>v){[u,v]=[v,u];}result-=u*(n-v+0x1);}console['log'](result);", "test_cases": [["3\n1 3\n2 3", "7"], ["2\n1 2", "3"], ["10\n5 3\n5 7\n8 9\n1 9\n9 10\n8 4\n7 4\n6 10\n7 2", "113"]], "original": "const [_n, ..._edges] = require('fs')\n  .readFileSync('/dev/stdin', 'utf8')\n  .split(/\\n/)\nconst n = Number(_n)\n\nlet result = (n * (n + 1) * (n + 2)) / 6\n\nfor (const _edge of _edges) {\n  let [u, v] = _edge.split(/\\s/).map(Number)\n  if (u > v) {\n    [u, v] = [v, u]\n  }\n  result -= u * (n - v + 1)\n}\nconsole.log(result)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 601, "deobfuscated": "const [_n, ..._edges] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\n/);\nconst n = Number(_n);\nlet result = n * (n + 1) * (n + 2) / 6;\nfor (const _edge of _edges) {\n  let [u, v] = _edge.split(/\\s/).map(Number);\n  if (u > v) {\n    [u, v] = [v, u];\n  }\n  result -= u * (n - v + 1);\n}\nconsole.log(result);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7774987590982094, "ngram_match_score": 0.5907726232591584, "weighted_ngram_match_score": 0.6011896262484334, "syntax_match_score": 0.9180327868852459, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02648_1", "type": "JavaScript", "obfuscated": "console['log'](function(args){const tmp=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const N=tmp[0x0][0x0],Q=tmp[N+0x1][0x0];const V=[0x0],W=[0x0],v=[],L=[];for(let i=0x1;i<=N;i++){V['push'](tmp[i][0x0]);W['push'](tmp[i][0x1]);}let Lmax=0x0;for(let i=0x1;i<=Q;i++){v['push'](tmp[N+0x1+i][0x0]);L['push'](tmp[N+0x1+i][0x1]);if(L[i-0x1]>Lmax)Lmax=L[i-0x1];}const dp=[Array(Lmax+0x1)['fill'](0x0)];for(let i=0x1;i<=N;i++){dp[i]=[];for(let w=0x0;w<=Lmax;w++){if(w>=W[i])dp[i][w]=Math['max'](dp[i>>0x1][w-W[i]]+V[i],dp[i>>0x1][w]);else dp[i][w]=dp[i>>0x1][w];}}const max=[];for(let i=0x0;i<Q;i++){max['push'](dp[v[i]][L[i]]);}return max['join']('\\x0a');}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n1 2\n2 3\n3 4\n3\n1 1\n2 5\n3 5", "0\n3\n3"], ["15\n123 119\n129 120\n132 112\n126 109\n118 103\n115 109\n102 100\n130 120\n105 105\n132 115\n104 102\n107 107\n127 116\n121 104\n121 115\n8\n8 234\n9 244\n10 226\n11 227\n12 240\n13 237\n14 206\n15 227", "256\n255\n250\n247\n255\n259\n223\n253"]], "original": "console.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const N = tmp[0][0], Q = tmp[N+1][0];\n  const V = [0], W = [0], v = [], L = [];\n  for ( let i = 1; i <= N; i++ ) {\n    V.push( tmp[i][0] );\n    W.push( tmp[i][1] );\n  }\n  let Lmax = 0;\n  for ( let i = 1; i <= Q; i++ ) {\n    v.push( tmp[N+1+i][0] );\n    L.push( tmp[N+1+i][1] );\n    if ( L[i-1] > Lmax ) Lmax = L[i-1];\n  }\n  const dp = [Array(Lmax+1).fill(0)];\n  for ( let i = 1; i <= N; i++ ) {\n    dp[i] = [];\n    for ( let w = 0; w <= Lmax; w++ ) {\n      if ( w >= W[i] ) dp[i][w] = Math.max( dp[i>>1][w-W[i]] + V[i], dp[i>>1][w] );\n      else dp[i][w] = dp[i>>1][w];\n    }\n  }\n  const max = [];\n  for ( let i = 0; i < Q; i++ ) {\n    max.push( dp[v[i]][L[i]] );\n  }\n  return max.join('\\n');\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 602, "deobfuscated": "console.log(function (args) {\n  const tmp = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const N = tmp[0][0];\n  const Q = tmp[N + 1][0];\n  const V = [0];\n  const W = [0];\n  const v = [];\n  const L = [];\n  for (let i = 1; i <= N; i++) {\n    V.push(tmp[i][0]);\n    W.push(tmp[i][1]);\n  }\n  let Lmax = 0;\n  for (let i = 1; i <= Q; i++) {\n    v.push(tmp[N + 1 + i][0]);\n    L.push(tmp[N + 1 + i][1]);\n    if (L[i - 1] > Lmax) {\n      Lmax = L[i - 1];\n    }\n  }\n  const dp = [Array(Lmax + 1).fill(0)];\n  for (let i = 1; i <= N; i++) {\n    dp[i] = [];\n    for (let w = 0; w <= Lmax; w++) {\n      if (w >= W[i]) {\n        dp[i][w] = Math.max(dp[i >> 1][w - W[i]] + V[i], dp[i >> 1][w]);\n      } else {\n        dp[i][w] = dp[i >> 1][w];\n      }\n    }\n  }\n  const max = [];\n  for (let i = 0; i < Q; i++) {\n    max.push(dp[v[i]][L[i]]);\n  }\n  return max.join(\"\\n\");\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5796172661030273, "ngram_match_score": 0.29254848223667107, "weighted_ngram_match_score": 0.3265158202706764, "syntax_match_score": 0.9047619047619048, "dataflow_match_score": 0.7946428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00217966213709897, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.014545454545454639, "new_decrease_halstead_effort": -0.04110828418215462}}
{"filename": "p02806_1", "type": "JavaScript", "obfuscated": "function Main(input){var lines=input['split']('\\x0a');var titles=lines['map'](l=>l['split']('\\x20')[0x0])['splice'](0x1,lines['length']-0x2);var sleptAt=titles['indexOf'](lines[lines['length']-0x1]);var sum=0x0;for(var i=sleptAt+0x2;i<lines['length']-0x1;i++){sum+=Number(lines[i]['split']('\\x20')[0x1]);}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\ndwango 2\nsixth 5\nprelims 25\ndwango", "30"], ["1\nabcde 1000\nabcde", "0"], ["15\nypnxn 279\nkgjgwx 464\nqquhuwq 327\nrxing 549\npmuduhznoaqu 832\ndagktgdarveusju 595\nwunfagppcoi 200\ndhavrncwfw 720\njpcmigg 658\nwrczqxycivdqn 639\nmcmkkbnjfeod 992\nhtqvkgkbhtytsz 130\ntwflegsjz 467\ndswxxrxuzzfhkp 989\nszfwtzfpnscgue 958\npmuduhznoaqu", "6348"]], "original": "function Main(input) {\n\tvar lines = input.split(\"\\n\");\n\tvar titles = lines.map(l => l.split(' ')[0]).splice(1, lines.length - 2)\n\tvar sleptAt = titles.indexOf(lines[lines.length - 1])\n\tvar sum = 0\n\tfor(var i = sleptAt + 2; i < lines.length - 1 ; i ++) {\n\t\tsum+= Number(lines[i].split(' ')[1])\n\t}\n\tconsole.log(sum)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 603, "deobfuscated": "function Main(input) {\n  var lines = input.split(\"\\n\");\n  var titles = lines.map(l => l.split(\" \")[0]).splice(1, lines.length - 2);\n  var sleptAt = titles.indexOf(lines[lines.length - 1]);\n  var sum = 0;\n  for (var i = sleptAt + 2; i < lines.length - 1; i++) {\n    sum += Number(lines[i].split(\" \")[1]);\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7356752122513017, "ngram_match_score": 0.5110421700990553, "weighted_ngram_match_score": 0.5246819347201052, "syntax_match_score": 1.0, "dataflow_match_score": 0.9069767441860465}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02853_1", "type": "JavaScript", "obfuscated": "function Main(input){const chars=input['trim']()['split']('\\x20');const x=Math['floor'](chars[0x0]);const y=Math['floor'](chars[0x1]);let ans=0x0;if(x===0x1&&y===0x1){ans+=0x61a80;}if(x===0x1)ans+=0x493e0;if(y===0x1)ans+=0x493e0;if(x===0x2)ans+=0x30d40;if(y===0x2)ans+=0x30d40;if(x===0x3)ans+=0x186a0;if(y===0x3)ans+=0x186a0;console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 1", "1000000"], ["3 101", "100000"], ["4 4", "0"]], "original": "function Main(input) {\n  const chars = input.trim().split(' ');\n\n  const x = Math.floor(chars[0]);\n  const y = Math.floor(chars[1]);\n  \n  let ans = 0;\n  \n  if (x === 1 && y === 1) {\n    ans += 400000;\n  }\n  \n  if (x === 1) ans += 300000;\n  if (y === 1) ans += 300000;\n  if (x === 2) ans += 200000;\n  if (y === 2) ans += 200000;\n  if (x === 3) ans += 100000;\n  if (y === 3) ans += 100000;\n  \n  console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 604, "deobfuscated": "function Main(input) {\n  const chars = input.trim().split(\" \");\n  const x = Math.floor(chars[0]);\n  const y = Math.floor(chars[1]);\n  let ans = 0;\n  if (x === 1 && y === 1) {\n    ans += 400000;\n  }\n  if (x === 1) {\n    ans += 300000;\n  }\n  if (y === 1) {\n    ans += 300000;\n  }\n  if (x === 2) {\n    ans += 200000;\n  }\n  if (y === 2) {\n    ans += 200000;\n  }\n  if (x === 3) {\n    ans += 100000;\n  }\n  if (y === 3) {\n    ans += 100000;\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.785727990719099, "ngram_match_score": 0.5810357081225324, "weighted_ngram_match_score": 0.6743762547538635, "syntax_match_score": 0.8875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02913_1", "type": "JavaScript", "obfuscated": "const main=input=>{var N=input[0x0]-0x0;var str=input[0x1];var ans=0x0;var min=0x0;var max=~~(N/0x2);start:while(min<=max){var ave=~~((min+max)/0x2);for(var i=0x0;i<N-ave;i++){var base=str['substring'](i,i+ave);if(str['lastIndexOf'](base)>=i+ave){min=ave+0x1;ans=ave;continue start;}}max=ave-0x1;}console['log'](ans);};main(require('fs')['readFileSync']('/dev/stdin','UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["5\nababa", "2"], ["2\nxy", "0"], ["13\nstrangeorange", "5"]], "original": "const main = (input) => {\n  var N = input[0]-0;\n  var str = input[1];\n  var ans = 0;\n  var min = 0;\n  var max = ~~(N/2);\n  start:while(min<=max){\n    var ave = ~~((min+max)/2);\n    for(var i=0;i<N-ave;i++){\n      var base = str.substring(i,i+ave);\n      if(str.lastIndexOf(base) >= i+ave){\n        min = ave+1;\n        ans = ave;\n        continue start;\n      }\n    }\n    max = ave-1;\n  }\n  console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 605, "deobfuscated": "const main = input => {\n  var N = input[0] - 0;\n  var str = input[1];\n  var ans = 0;\n  var min = 0;\n  var max = ~~(N / 2);\n  start: while (min <= max) {\n    var ave = ~~((min + max) / 2);\n    for (var i = 0; i < N - ave; i++) {\n      var base = str.substring(i, i + ave);\n      if (str.lastIndexOf(base) >= i + ave) {\n        min = ave + 1;\n        ans = ave;\n        continue start;\n      }\n    }\n    max = ave - 1;\n  }\n  console.log(ans);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7023742088724864, "ngram_match_score": 0.32630388542311733, "weighted_ngram_match_score": 0.5393727253477271, "syntax_match_score": 0.9438202247191011, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03045_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const M=input[0x0]['split']('\\x20')[0x1]-0x0;var parent=new Array(N+0x1)['fill'](0x0);for(var i=0x1;i<=M;i++){if(root(input[i]['split']('\\x20')[0x0]-0x0)!==root(input[i]['split']('\\x20')[0x1]-0x0)){parent[root(input[i]['split']('\\x20')[0x1]-0x0)]=root(input[i]['split']('\\x20')[0x0])-0x0;}}console['log'](parent['reduce']((acc,cur)=>{return acc+(cur===0x0?0x1:0x0);},0x0)-0x1);function root(node){var array=[];var point=node;while(parent[point]!==0x0){array['push'](point);point=parent[point];}array['forEach'](e=>{parent[e]=point;});return point;}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 1\n1 2 1", "2"], ["6 5\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n5 6 5", "2"], ["100000 1\n1 100000 100", "99999"]], "original": "\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  var parent=new Array(N+1).fill(0);\n  for(var i=1;i<=M;i++){\n    if(root(input[i].split(' ')[0]-0)!==root(input[i].split(' ')[1]-0)){\n       parent[root(input[i].split(' ')[1]-0)]=root(input[i].split(' ')[0])-0;\n    }\n  }\n  console.log(parent.reduce((acc,cur)=>{\n    return acc+(cur===0?1:0);\n  },0)-1);\n  \n  function root(node){\n    var array=[];\n    var point=node;\n    while(parent[point]!==0){\n      array.push(point);\n      point=parent[point];\n    }\n    array.forEach(e=>{\n      parent[e]=point;\n    });\n    return point;\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 606, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const M = input[0].split(\" \")[1] - 0;\n  var parent = new Array(N + 1).fill(0);\n  for (var i = 1; i <= M; i++) {\n    if (root(input[i].split(\" \")[0] - 0) !== root(input[i].split(\" \")[1] - 0)) {\n      parent[root(input[i].split(\" \")[1] - 0)] = root(input[i].split(\" \")[0]) - 0;\n    }\n  }\n  console.log(parent.reduce((acc, cur) => {\n    return acc + (cur === 0 ? 1 : 0);\n  }, 0) - 1);\n  function root(node) {\n    var array = [];\n    var point = node;\n    while (parent[point] !== 0) {\n      array.push(point);\n      point = parent[point];\n    }\n    array.forEach(e => {\n      parent[e] = point;\n    });\n    return point;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5467166900350046, "ngram_match_score": 0.05844305905113049, "weighted_ngram_match_score": 0.1578354657947701, "syntax_match_score": 1.0, "dataflow_match_score": 0.9705882352941176}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03096_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split'](/\\s+/)['map'](x=>x-0x0);var N=input['shift']();var last=[];for(let i=0x0;i<0x1e8480;i++)last[i]='not\\x20yet';last[input[0x0]]=0x0;var dp=[0x1];var M=Math['pow'](0xa,0x9)+0x7;for(let i=0x1;i<N;i++){let c=input[i];if(last[c]==='not\\x20yet'||last[c]===i-0x1){last[c]=i;dp[i]=dp[i-0x1];continue;}dp[i]=(dp[i-0x1]+dp[last[c]])%M;last[c]=i;}console['log'](dp['pop']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1\n2\n1\n2\n2", "3"], ["6\n4\n2\n5\n4\n2\n4", "5"], ["7\n1\n3\n1\n2\n3\n3\n2", "5"]], "original": "\"use strict\"\nfunction Main(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  var N=input.shift();\n  var last=[];//last[hoge]で色hogeの最後の位置\n  for(let i=0;i<2000000;i++)last[i]=\"not yet\";\n  last[input[0]]=0;\n  var dp=[1];//dp[i]で石0~iまでの色の塗られ方の場合の数\n  var M=Math.pow(10,9)+7;\n  for(let i=1;i<N;i++){\n    let c=input[i];\n    if(last[c]===\"not yet\"||last[c]===i-1){\n      last[c]=i;\n      dp[i]=dp[i-1];\n      continue;\n    }\n    dp[i]=(dp[i-1]+dp[last[c]])%M;\n    last[c]=i;\n  }\n  console.log(dp.pop());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 607, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(/\\s+/).map(x => x - 0);\n  var N = input.shift();\n  var last = [];\n  for (let i = 0; i < 2000000; i++) {\n    last[i] = \"not yet\";\n  }\n  last[input[0]] = 0;\n  var dp = [1];\n  var M = Math.pow(10, 9) + 7;\n  for (let i = 1; i < N; i++) {\n    let c = input[i];\n    if (last[c] === \"not yet\" || last[c] === i - 1) {\n      last[c] = i;\n      dp[i] = dp[i - 1];\n      continue;\n    }\n    dp[i] = (dp[i - 1] + dp[last[c]]) % M;\n    last[c] = i;\n  }\n  console.log(dp.pop());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5069756511617478, "ngram_match_score": 0.013706811496277033, "weighted_ngram_match_score": 0.05023182918675004, "syntax_match_score": 0.963963963963964, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03194_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x20');var n=parseInt(input[0x0],0xa);var p=parseInt(input[0x1],0xa);var arr=[];var counts=[];var ans=0x1;var i=0x2;while(i<=p){while(p%i===0x0){arr['push'](i);p=Math['floor'](p/ i);}i++;}for(var i=0x0;i<arr['length'];i++){var key=arr[i];counts[key]=counts[key]?counts[key]+0x1:0x1;}var b=arr['filter'](function(x,i,self){return self['indexOf'](x)===i;});for(var i=0x0;i<b['length'];i++){if(counts[b[i]]>=n){ans*=b[i];}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 24", "2"], ["5 1", "1"], ["1 111", "111"], ["4 972439611840", "206"]], "original": "function Main(input) {\n  // 入力\n\tvar input = input.split(' ');\n\tvar n = parseInt(input[0], 10);\n  var p = parseInt(input[1], 10);\n  var arr = [];\n  var counts = [];\n  var ans = 1;\n\n  // 計算\n  var i =2;\n  while (i <= p) {\n    while (p % i === 0) {\n      arr.push(i);\n      p = Math.floor(p / i);\n    }\n    i++;\n  }\n\n  for(var i = 0; i < arr.length; i++) {\n    var key = arr[i];\n    counts[key] = (counts[key])? counts[key] + 1 : 1 ;\n  }\n\n  var b = arr.filter(function (x, i, self) {\n    return self.indexOf(x) === i;\n  });\n  for (var i = 0; i < b.length; i++) {\n    if (counts[b[i]] >= n) {\n      ans *= b[i];\n    }\n  }\n  console.log(ans);\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 608, "deobfuscated": "function Main(input) {\n  var input = input.split(\" \");\n  var n = parseInt(input[0], 10);\n  var p = parseInt(input[1], 10);\n  var arr = [];\n  var counts = [];\n  var ans = 1;\n  var i = 2;\n  while (i <= p) {\n    while (p % i === 0) {\n      arr.push(i);\n      p = Math.floor(p / i);\n    }\n    i++;\n  }\n  for (var i = 0; i < arr.length; i++) {\n    var key = arr[i];\n    counts[key] = counts[key] ? counts[key] + 1 : 1;\n  }\n  var b = arr.filter(function (x, i, self) {\n    return self.indexOf(x) === i;\n  });\n  for (var i = 0; i < b.length; i++) {\n    if (counts[b[i]] >= n) {\n      ans *= b[i];\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8893364206777515, "ngram_match_score": 0.8143522406848884, "weighted_ngram_match_score": 0.8212543115913351, "syntax_match_score": 0.9217391304347826, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03286_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a');let N=parseInt(input[0x0]);let res='';if(N===0x0){console['log'](0x0);return;}while(N!==0x0){res=String(Math['abs'](N%-0x2))+res;if(N%-0x2<0x0)N+=N<0x0?-0x1:0x1;N=parseInt(N/-0x2);}console['log'](res);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["-9", "1011"], ["123456789", "11000101011001101110100010101"], ["0", "0"]], "original": "'use strict'\nfunction Main(input) {\n  input = input.split(\"\\n\")\n  let N = parseInt(input[0])\n  let res = ''\n  if (N === 0) {\n    console.log(0)\n    return\n  }\n  while (N !== 0) {\n    res = String(Math.abs(N % -2)) + res\n    if (N % -2 < 0) N += N < 0 ? -1 : 1\n    N = parseInt(N / -2)\n  }\n  console.log(res)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 609, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  let N = parseInt(input[0]);\n  let res = \"\";\n  if (N === 0) {\n    console.log(0);\n    return;\n  }\n  while (N !== 0) {\n    res = String(Math.abs(N % -2)) + res;\n    if (N % -2 < 0) {\n      N += N < 0 ? -1 : 1;\n    }\n    N = parseInt(N / -2);\n  }\n  console.log(res);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7587211936789179, "ngram_match_score": 0.5477612496369257, "weighted_ngram_match_score": 0.5682046061598268, "syntax_match_score": 0.918918918918919, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03425_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const names=arg['slice'](0x1,N+0x1);const p=[0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x2];const q=[0x1,0x1,0x1,0x2,0x2,0x3,0x2,0x2,0x3,0x3];const r=[0x2,0x3,0x4,0x3,0x4,0x4,0x3,0x4,0x4,0x4];let march=[0x0,0x0,0x0,0x0,0x0];for(let i in names){if(names[i][0x0]==='M'){march[0x0]++;}if(names[i][0x0]==='A'){march[0x1]++;}if(names[i][0x0]==='R'){march[0x2]++;}if(names[i][0x0]==='C'){march[0x3]++;}if(names[i][0x0]==='H'){march[0x4]++;}}let answer=0x0;for(let i=0x0;i<0xa;i++){answer+=march[p[i]]*march[q[i]]*march[r[i]];}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI", "2"], ["4\nZZ\nZZZ\nZ\nZZZZZZZZZZ", "0"], ["5\nCHOKUDAI\nRNG\nMAKOTO\nAOKI\nRINGO", "7"]], "original": "\"use strict\";\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const names = arg.slice(1, N + 1);\n    \n    const p = [0, 0, 0, 0, 0, 0, 1, 1, 1, 2];\n    const q = [1, 1, 1, 2, 2, 3, 2, 2, 3, 3];\n    const r = [2, 3, 4, 3, 4, 4, 3, 4, 4, 4];\n    \n    let march = [0, 0, 0, 0, 0];\n    \n    for(let i in names) {\n        if(names[i][0] === \"M\") {\n            march[0]++;\n        }\n        \n        if(names[i][0] === \"A\") {\n            march[1]++;\n        }\n        \n        if(names[i][0] === \"R\") {\n            march[2]++;\n        }\n        \n        if(names[i][0] === \"C\") {\n            march[3]++;\n        }\n        \n        if(names[i][0] === \"H\") {\n            march[4]++;\n        }\n    }\n    \n    let answer = 0;\n    \n    for(let i=0; i<10; i++) {\n        answer += march[p[i]] * march[q[i]] * march[r[i]];\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 610, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const names = arg.slice(1, N + 1);\n  const p = [0, 0, 0, 0, 0, 0, 1, 1, 1, 2];\n  const q = [1, 1, 1, 2, 2, 3, 2, 2, 3, 3];\n  const r = [2, 3, 4, 3, 4, 4, 3, 4, 4, 4];\n  let march = [0, 0, 0, 0, 0];\n  for (let i in names) {\n    if (names[i][0] === \"M\") {\n      march[0]++;\n    }\n    if (names[i][0] === \"A\") {\n      march[1]++;\n    }\n    if (names[i][0] === \"R\") {\n      march[2]++;\n    }\n    if (names[i][0] === \"C\") {\n      march[3]++;\n    }\n    if (names[i][0] === \"H\") {\n      march[4]++;\n    }\n  }\n  let answer = 0;\n  for (let i = 0; i < 10; i++) {\n    answer += march[p[i]] * march[q[i]] * march[r[i]];\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8851457515424395, "ngram_match_score": 0.7350667971718595, "weighted_ngram_match_score": 0.8055162089978981, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03458_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=input[0x0]['split']('\\x20')['map'](a=>parseInt(a));var K=N[0x1];N=N[0x0];var x=[],y=[],c=[];for(var i=0x0;i<N;i++){x[i]=input[i+0x1]['split']('\\x20');y[i]=parseInt(x[i][0x1])%(K*0x2);c[i]=x[i][0x2]==='W'?0x0:0x1;x[i]=parseInt(x[i][0x0])%(K*0x2);}var ans=0x0;for(i=0x0;i<K;i++){var now=0x0;var Y1=new Array(K*0x2)['fill'](0x0),Y2=new Array(K*0x2)['fill'](0x0);for(var k=0x0;k<N;k++){if((((x[k]+i)/K^y[k]/K)&0x1)===c[k]){now++;Y1[y[k]]++;}else Y2[y[k]]++;}if(ans<now)ans=now;if(ans<N-now)ans=N-now;for(var j=0x0;j<K-0x1;j++){now+=Y2[j]-Y1[j]+Y2[j+K]-Y1[j+K];if(ans<now)ans=now;if(ans<N-now)ans=N-now;}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3\n0 1 W\n1 2 W\n5 3 B\n5 4 B", "4"], ["2 1000\n0 0 B\n0 1 W", "2"], ["6 2\n1 2 B\n2 1 W\n2 2 B\n1 0 B\n0 6 W\n4 5 W", "4"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar N = input[0].split(\" \").map(a => parseInt(a));\n\tvar K = N[1];\n\tN = N[0];\n\tvar x = [], y = [], c = [];\n\tfor(var i = 0; i < N; i++){\n\t\tx[i] = input[i+1].split(\" \");\n\t\ty[i] = parseInt(x[i][1]) % (K * 2);\n\t\tc[i] = (x[i][2] === \"W\" ? 0 : 1);\n\t\tx[i] = parseInt(x[i][0]) % (K * 2);\n\t}\n\tvar ans = 0;\n\tfor(i = 0; i < K; i++){\n\t\tvar now = 0;\n\t\tvar Y1 = new Array(K*2).fill(0), Y2 = new Array(K*2).fill(0);\n\t\tfor(var k = 0; k < N; k++){\n\t\t\tif((((x[k] + i) / K ^ y[k] / K) & 1) === c[k]){\n\t\t\t\tnow++;\n\t\t\t\tY1[y[k]]++;\n\t\t\t}else Y2[y[k]]++;\n\t\t}\n\t\tif(ans < now)ans = now;\n\t\tif(ans < N - now)ans = N - now;\n\t\tfor(var j = 0; j < K - 1; j++){\n\t\t\tnow += Y2[j] - Y1[j] + Y2[j+K] - Y1[j+K];\n\t\t\tif(ans < now)ans = now;\n\t\t\tif(ans < N - now)ans = N - now;\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 611, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0].split(\" \").map(a => parseInt(a));\n  var K = N[1];\n  N = N[0];\n  var x = [];\n  var y = [];\n  var c = [];\n  for (var i = 0; i < N; i++) {\n    x[i] = input[i + 1].split(\" \");\n    y[i] = parseInt(x[i][1]) % (K * 2);\n    c[i] = x[i][2] === \"W\" ? 0 : 1;\n    x[i] = parseInt(x[i][0]) % (K * 2);\n  }\n  var ans = 0;\n  for (i = 0; i < K; i++) {\n    var now = 0;\n    var Y1 = new Array(K * 2).fill(0);\n    var Y2 = new Array(K * 2).fill(0);\n    for (var k = 0; k < N; k++) {\n      if ((((x[k] + i) / K ^ y[k] / K) & 1) === c[k]) {\n        now++;\n        Y1[y[k]]++;\n      } else {\n        Y2[y[k]]++;\n      }\n    }\n    if (ans < now) {\n      ans = now;\n    }\n    if (ans < N - now) {\n      ans = N - now;\n    }\n    for (var j = 0; j < K - 1; j++) {\n      now += Y2[j] - Y1[j] + Y2[j + K] - Y1[j + K];\n      if (ans < now) {\n        ans = now;\n      }\n      if (ans < N - now) {\n        ans = N - now;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7488507081767748, "ngram_match_score": 0.48927866892789096, "weighted_ngram_match_score": 0.6172352748903192, "syntax_match_score": 0.8888888888888888, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005144326886188377, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.010600706713780994, "new_decrease_halstead_effort": -0.010600706713781216}}
{"filename": "p03546_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[H,W],...tmp]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>v|0x0));const A=tmp['slice'](0xa);const dp=tmp['slice'](0x0,0xa);for(let k=0x0;k<0xa;k++){for(let i=0x0;i<0xa;i++){for(let j=0x0;j<0xa;j++){dp[i][j]=Math['min'](dp[i][j],dp[i][k]+dp[k][j]);}}}let cost=0x0;for(let i=0x0;i<H;i++){for(let j=0x0;j<W;j++){if(A[i][j]===-0x1||A[i][j]===0x1)continue;cost+=dp[A[i][j]][0x1];}}return''+cost;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 4\n0 9 9 9 9 9 9 9 9 9\n9 0 9 9 9 9 9 9 9 9\n9 9 0 9 9 9 9 9 9 9\n9 9 9 0 9 9 9 9 9 9\n9 9 9 9 0 9 9 9 9 2\n9 9 9 9 9 0 9 9 9 9\n9 9 9 9 9 9 0 9 9 9\n9 9 9 9 9 9 9 0 9 9\n9 9 9 9 2 9 9 9 0 9\n9 2 9 9 9 9 9 9 9 0\n-1 -1 -1 -1\n8 1 1 8", "12"], ["5 5\n0 999 999 999 999 999 999 999 999 999\n999 0 999 999 999 999 999 999 999 999\n999 999 0 999 999 999 999 999 999 999\n999 999 999 0 999 999 999 999 999 999\n999 999 999 999 0 999 999 999 999 999\n999 999 999 999 999 0 999 999 999 999\n999 999 999 999 999 999 0 999 999 999\n999 999 999 999 999 999 999 0 999 999\n999 999 999 999 999 999 999 999 0 999\n999 999 999 999 999 999 999 999 999 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1", "0"], ["3 5\n0 4 3 6 2 7 2 5 3 3\n4 0 5 3 7 5 3 7 2 7\n5 7 0 7 2 9 3 2 9 1\n3 6 2 0 2 4 6 4 2 3\n3 5 7 4 0 6 9 7 6 7\n9 8 5 2 2 0 4 7 6 5\n5 4 6 3 2 3 0 5 4 3\n3 6 2 3 4 2 4 0 8 9\n4 6 5 4 3 5 3 2 0 8\n2 1 3 4 5 7 8 6 4 0\n3 5 2 6 1\n2 5 3 2 1\n6 9 2 5 6", "47"]], "original": "console.log((args=>{\n  const [[H,W],...tmp] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  const A = tmp.slice(10);\n  const dp = tmp.slice(0,10);\n  for ( let k = 0; k < 10; k++ ) {\n    for ( let i = 0; i < 10; i++ ) {\n      for ( let j = 0; j < 10; j++ ) {\n        dp[i][j] = Math.min( dp[i][j], dp[i][k] + dp[k][j] );\n      }\n    }\n  }\n  let cost = 0;\n  for ( let i = 0; i < H; i++ ) {\n    for ( let j = 0; j < W; j++ ) {\n      if ( A[i][j] === -1 || A[i][j] === 1 ) continue;\n      cost += dp[A[i][j]][1];\n    }\n  }\n  return `${cost}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 612, "deobfuscated": "console.log((args => {\n  const [[H, W], ...tmp] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  const A = tmp.slice(10);\n  const dp = tmp.slice(0, 10);\n  for (let k = 0; k < 10; k++) {\n    for (let i = 0; i < 10; i++) {\n      for (let j = 0; j < 10; j++) {\n        dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n      }\n    }\n  }\n  let cost = 0;\n  for (let i = 0; i < H; i++) {\n    for (let j = 0; j < W; j++) {\n      if (A[i][j] === -1 || A[i][j] === 1) {\n        continue;\n      }\n      cost += dp[A[i][j]][1];\n    }\n  }\n  return \"\" + cost;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6802264751439607, "ngram_match_score": 0.42353385104939867, "weighted_ngram_match_score": 0.4285195905100508, "syntax_match_score": 0.8688524590163934, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03549_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const lines=input['split']('\\x0a');const N=lines[0x0]['split']('\\x20')['map'](x=>parseInt(x))[0x0];const M=lines[0x0]['split']('\\x20')['map'](x=>parseInt(x))[0x1];let result=((N-M)*0x64+M*0x76c)*Math['pow'](0x2,M);console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 1", "3800"], ["10 2", "18400"], ["100 5", "608000"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = lines[0].split(' ').map(x => parseInt(x))[0];\n  const M = lines[0].split(' ').map(x => parseInt(x))[1];\n\n\n\n  let result = ((N-M)*100 + M*1900)*Math.pow(2,M);\n\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 613, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const N = lines[0].split(\" \").map(x => parseInt(x))[0];\n  const M = lines[0].split(\" \").map(x => parseInt(x))[1];\n  let result = ((N - M) * 100 + M * 1900) * Math.pow(2, M);\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.609826919806411, "ngram_match_score": 0.2388024180179508, "weighted_ngram_match_score": 0.3320842085761143, "syntax_match_score": 1.0, "dataflow_match_score": 0.868421052631579}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03712_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split']('\\x0a');input[0x0]=input[0x0]['split']('\\x20')['map'](v=>~~v);const h=input[0x0][0x0];const w=input[0x0][0x1];let tmp='#'['repeat'](w+0x2)+'\\x0a';for(let i=0x1;i<=h;i++){tmp+='#'+input[i]+'#\\x0a';}tmp+='#'['repeat'](w+0x2);console['log'](tmp);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3\nabc\narc", "#####\n#abc#\n#arc#\n#####"], ["1 1\nz", "###\n#z#\n###"]], "original": "'use strict'\n\nfunction main(input) {\n\n  input = input.split('\\n')\n  input[0] = input[0].split(' ').map(v => ~~v)\n  const h = input[0][0]\n  const w = input[0][1]\n\n  let tmp = '#'.repeat(w + 2) + '\\n'\n  for (let i = 1; i <= h; i++) {\n    tmp += '#' + input[i] + '#\\n'\n  }\n  tmp += '#'.repeat(w + 2)\n\n  console.log(tmp)\n\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 614, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(\"\\n\");\n  input[0] = input[0].split(\" \").map(v => ~~v);\n  const h = input[0][0];\n  const w = input[0][1];\n  let tmp = \"#\".repeat(w + 2) + \"\\n\";\n  for (let i = 1; i <= h; i++) {\n    tmp += \"#\" + input[i] + \"#\\n\";\n  }\n  tmp += \"#\".repeat(w + 2);\n  console.log(tmp);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6780591699620615, "ngram_match_score": 0.41595683477503553, "weighted_ngram_match_score": 0.42448497327833856, "syntax_match_score": 1.0, "dataflow_match_score": 0.8717948717948718}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00008_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};const MAX=0x32;map0=[];for(i=0x0;i<=MAX;i++)map0['push'](0x0);map1=[]['concat'](map0);map2=[]['concat'](map1);map3=[]['concat'](map2);for(i=0x0;i<=0x9;i++)map0[i]=0x1;function expand_map(map,smaller){for(var i=0x0;i<MAX;i++){for(var j=Math['max'](0x0,i-0x9);j<=i;j++){map[i]+=smaller[j];}}}expand_map(map1,map0);expand_map(map2,map1);expand_map(map3,map2);require('fs')['readFileSync'](config['input'],'ascii')['trim']()['split'](config['newline'])['forEach'](function(line){console['log'](map3[parseInt(line)]);});", "test_cases": [["35\n1", "4\n4"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nconst MAX = 50;\n\nmap0 = [];\nfor (i = 0; i <= MAX; i++) map0.push(0);\nmap1 = [].concat(map0);\nmap2 = [].concat(map1);\nmap3 = [].concat(map2);\n\nfor (i = 0; i <= 9; i++) map0[i] = 1;\n\nfunction expand_map(map, smaller) {\n\tfor (var i = 0; i < MAX; i++) {\n\t\tfor (var j = Math.max(0, i - 9); j <= i; j++) {\n\t\t\tmap[i] += smaller[j];\n\t\t}\n\t}\n}\n\nexpand_map(map1, map0);\nexpand_map(map2, map1);\nexpand_map(map3, map2);\n\nrequire('fs').readFileSync(config.input, 'ascii')\n\t.trim()\n\t.split(config.newline)\n\t.forEach(function (line) { console.log(map3[parseInt(line)]); })\n\t;", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 615, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nconst MAX = 50;\nmap0 = [];\nfor (i = 0; i <= MAX; i++) {\n  map0.push(0);\n}\nmap1 = [].concat(map0);\nmap2 = [].concat(map1);\nmap3 = [].concat(map2);\nfor (i = 0; i <= 9; i++) {\n  map0[i] = 1;\n}\nfunction expand_map(map, smaller) {\n  for (var i = 0; i < MAX; i++) {\n    for (var j = Math.max(0, i - 9); j <= i; j++) {\n      map[i] += smaller[j];\n    }\n  }\n}\nexpand_map(map1, map0);\nexpand_map(map2, map1);\nexpand_map(map3, map2);\nrequire(\"fs\").readFileSync(config.input, \"ascii\").trim().split(config.newline).forEach(function (line) {\n  console.log(map3[parseInt(line)]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8447673073434738, "ngram_match_score": 0.697012858826687, "weighted_ngram_match_score": 0.70860504311358, "syntax_match_score": 0.9734513274336283, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00009_1", "type": "JavaScript", "obfuscated": "var count=0x0;function isPrime(num){if(num<0x2)return![];for(var i=0x2;i<num;i++){if(num%i==0x0)return![];}count++;return!![];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var p=input['split']('\\x0a');for(var i=0x0;i<p['length'];i++){count=0x0;for(var j=0x2;j<=p[i];j++){isPrime(j);}console['log'](count);}", "test_cases": [["10\n3\n11", "4\n2\n5"]], "original": "var count=0;\n function isPrime(num) {\n     if(num < 2) return false;\n     for (var i = 2; i < num; i++) {\n         if(num%i==0)\n             return false;\n     }\n     count++;\n     return true;\n }\n var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n var p = input.split('\\n');\n  for(var i=0;i<p.length;i++){\n   count=0;\n   for(var j=2;j<=p[i];j++){\n  isPrime(j);\n }\n  console.log(count);\n }", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 616, "deobfuscated": "var count = 0;\nfunction isPrime(num) {\n  if (num < 2) {\n    return false;\n  }\n  for (var i = 2; i < num; i++) {\n    if (num % i == 0) {\n      return false;\n    }\n  }\n  count++;\n  return true;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar p = input.split(\"\\n\");\nfor (var i = 0; i < p.length; i++) {\n  count = 0;\n  for (var j = 2; j <= p[i]; j++) {\n    isPrime(j);\n  }\n  console.log(count);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6745782313293639, "ngram_match_score": 0.295069847048065, "weighted_ngram_match_score": 0.5093036843299966, "syntax_match_score": 0.8939393939393939, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.018267447462845476, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07291666666666663, "new_decrease_halstead_effort": 0.24102729905755305}}
{"filename": "p00221_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var mn=Arr['shift']()['split']('\\x20')['map'](Number);if(mn[0x0]==0x0&&mn[0x1]==0x0)break;var player=[];for(var i=0x0;i<mn[0x0];i++)player[i]=i+0x1;var arr=[];for(var i=0x0;i<mn[0x1];i++){var v=Arr['shift']();arr['push'](v);}var i=0x1;var k=0x0;var len=mn[0x0];for(var I=0x0;I<arr['length'];I++){var v=arr[I];var str='';if(i%0x3==0x0)str+='Fizz';if(i%0x5==0x0)str+='Buzz';if(str=='')str=i;if(v!=str){player[k]=![];len++;if(len==0x1)break;}i++;var H=0x0;do{H++;if(H>0x3e8)break;k++;if(k>=player['length']){player=player['filter'](function(v){return v!=![];});k=0x0;}}while(player[k]==![]);}player=player['filter'](function(v){return v!=![];});console['log'](player['join']('\\x20'));}", "test_cases": [["5 7\n1\n2\nFizz\n4\nBuzz\n6\n7\n3 5\n1\n2\n3\n4\n5\n0 0", "2 3 4 5\n1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var mn=(Arr.shift()).split(\" \").map(Number);\n   if(mn[0]==0 && mn[1]==0)break;\n   var player=[];\n   for(var i=0;i<mn[0];i++)player[i]=i+1;\n   var arr=[];\n   for(var i=0;i<mn[1];i++){\n      var v=Arr.shift();\n      arr.push(v);\n   }\n   var i=1;\n   var k=0;\n   var len=mn[0];\n   for(var I=0;I<arr.length;I++){\n      var v=arr[I];\n      var str=\"\";\n      if(i%3==0)str+=\"Fizz\";\n      if(i%5==0)str+=\"Buzz\";\n      if(str==\"\")str=i;\n      if(v!=str){\n         player[k]=false;\n         len++;\n         if(len==1)break;\n      }\n      i++;\n      var H=0;\n      do{\n      H++;\n      if(H>1000)break;\n      k++;\n      if(k>=player.length){\n         player=player.filter(function(v){return v!=false;});\n         k=0;\n      }\n      }while(player[k]==false);\n   }\n   player=player.filter(function(v){return v!=false;});\n   console.log(player.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 617, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var mn = Arr.shift().split(\" \").map(Number);\n  if (mn[0] == 0 && mn[1] == 0) {\n    break;\n  }\n  var player = [];\n  for (var i = 0; i < mn[0]; i++) {\n    player[i] = i + 1;\n  }\n  var arr = [];\n  for (var i = 0; i < mn[1]; i++) {\n    var v = Arr.shift();\n    arr.push(v);\n  }\n  var i = 1;\n  var k = 0;\n  var len = mn[0];\n  for (var I = 0; I < arr.length; I++) {\n    var v = arr[I];\n    var str = \"\";\n    if (i % 3 == 0) {\n      str += \"Fizz\";\n    }\n    if (i % 5 == 0) {\n      str += \"Buzz\";\n    }\n    if (str == \"\") {\n      str = i;\n    }\n    if (v != str) {\n      player[k] = false;\n      len++;\n      if (len == 1) {\n        break;\n      }\n    }\n    i++;\n    var H = 0;\n    do {\n      H++;\n      if (H > 1000) {\n        break;\n      }\n      k++;\n      if (k >= player.length) {\n        player = player.filter(function (v) {\n          return v != false;\n        });\n        k = 0;\n      }\n    } while (player[k] == false);\n  }\n  player = player.filter(function (v) {\n    return v != false;\n  });\n  console.log(player.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4795791012845813, "ngram_match_score": 0.015499703137169217, "weighted_ngram_match_score": 0.05416805335250736, "syntax_match_score": 0.8486486486486486, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.027957000483463723, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04263565891472865, "new_decrease_halstead_effort": 0.12555341103807582}}
{"filename": "p00990_1", "type": "JavaScript", "obfuscated": "function over(x){if(x>=0xa)x=x-0xa+0x1;return x;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var id=arr['shift']()['split']('');var a=arr['shift']()-0x0;var ary=arr['shift']()['split']('\\x20')['map'](Number);var k=[];var sum=0x0;id['forEach'](function(v,i){if(v=='*'){if(i%0x2==0x0)k['push'](0x1);else k['push'](0x2);}else{if(i%0x2==0x0)sum+=v-0x0;else sum+=over((v-0x0)*0x2);}});var dp=[];for(var i=0x0;i<=0x7;i++){dp[i]=[];for(var s=0x0;s<0xf4240;s++)dp[i][s]=![];}dp[0x0][sum]=0x1;for(var i=0x0;i<k['length'];i++){for(var j=0x0;j<ary['length'];j++){for(var s=0x0;s<0xf4240;s++){dp[i+0x1][s+over(ary[j]*k[i])]+=dp[i][s];}}}var ans=0x0;for(var s=0x0;s<0x186a0;s++)ans+=dp[k['length']][s*0xa];console['log'](ans);", "test_cases": [["5\n5*57*\n2\n3 9", "1"], ["15\n2***9*2*6*1199*\n9\n0 1 2 3 4 6 7 8 9", "478297"]], "original": "function over(x){\n   if(x>=10)x=x-10+1;\n   return x;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar id=arr.shift().split(\"\");\nvar a=arr.shift()-0;\nvar ary=arr.shift().split(\" \").map(Number);\nvar k=[];\nvar sum=0;\nid.forEach(function(v,i){\n   if(v==\"*\"){\n      if(i%2==0)k.push(1);\n      else k.push(2);\n   }else{\n      if(i%2==0)sum+=v-0;\n      else sum+=over((v-0)*2);\n   }\n});\nvar dp=[];\nfor(var i=0;i<=7;i++){\n   dp[i]=[];\n   for(var s=0;s<1000000;s++)dp[i][s]=false;\n}\n\ndp[0][sum]=1;\n\nfor(var i=0;i<k.length;i++){\n   for(var j=0;j<ary.length;j++){\n      for(var s=0;s<1000000;s++){\n         dp[i+1][s+over(ary[j]*k[i])]+=dp[i][s];\n      }\n   }\n\n}\nvar ans=0;\nfor(var s=0;s<100000;s++)ans+=dp[k.length][s*10];\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 618, "deobfuscated": "function over(x) {\n  if (x >= 10) {\n    x = x - 10 + 1;\n  }\n  return x;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar id = arr.shift().split(\"\");\nvar a = arr.shift() - 0;\nvar ary = arr.shift().split(\" \").map(Number);\nvar k = [];\nvar sum = 0;\nid.forEach(function (v, i) {\n  if (v == \"*\") {\n    if (i % 2 == 0) {\n      k.push(1);\n    } else {\n      k.push(2);\n    }\n  } else if (i % 2 == 0) {\n    sum += v - 0;\n  } else {\n    sum += over((v - 0) * 2);\n  }\n});\nvar dp = [];\nfor (var i = 0; i <= 7; i++) {\n  dp[i] = [];\n  for (var s = 0; s < 1000000; s++) {\n    dp[i][s] = false;\n  }\n}\ndp[0][sum] = 1;\nfor (var i = 0; i < k.length; i++) {\n  for (var j = 0; j < ary.length; j++) {\n    for (var s = 0; s < 1000000; s++) {\n      dp[i + 1][s + over(ary[j] * k[i])] += dp[i][s];\n    }\n  }\n}\nvar ans = 0;\nfor (var s = 0; s < 100000; s++) {\n  ans += dp[k.length][s * 10];\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.529799727020057, "ngram_match_score": 0.04739256943624827, "weighted_ngram_match_score": 0.18061462879942008, "syntax_match_score": 0.8911917098445595, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.007246376811594235, "new_decrease_halstead_effort": 0.07600853253027151}}
{"filename": "p02585_1", "type": "JavaScript", "obfuscated": "const main=input=>{input=input['trim']()['split']('\\x0a');const [n,k]=input[0x0]['split']('\\x20')['map'](Number);const directions=input[0x1]['split']('\\x20')['map'](v=>Number(v)-0x1);const scoreList=input[0x2]['split']('\\x20')['map'](Number);const ans=[new Array(n)['fill'](0x0)];for(let i=0x0;i<k;i++)ans['push']([]);for(let i=0x0;i<k;i++){for(let x=0x0;x<n;x++){const score=ans[i][x];ans[i+0x1][directions[x]]=score+scoreList[directions[x]];}}let max=-Infinity;for(let i=0x1;i<ans['length'];i++)max=Math['max'](max,Math['max'](...ans[i]));return console['log'](max);};process['env']['MYTEST']?test():main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2\n2 4 5 1 3\n3 4 -10 -8 8", "8"], ["2 3\n2 1\n10 -7", "13"], ["3 3\n3 1 2\n-1000 -2000 -3000", "-1000"], ["10 58\n9 1 6 7 8 4 3 2 10 5\n695279662 988782657 -119067776 382975538 -151885171 -177220596 -169777795 37619092 389386780 980092719", "29507023469"]], "original": "const main = (input) => {\n  input = input.trim().split('\\n')\n  const [n, k] = input[0].split(' ').map(Number)\n  const directions = input[1].split(' ').map(v => Number(v)-1)\n  const scoreList = input[2].split(' ').map(Number)\n\n  const ans = [new Array(n).fill(0)]\n  for (let i=0; i<k; i++) ans.push([])\n\n  for (let i=0; i<k; i++) {\n    for (let x=0; x<n; x++) {\n      const score = ans[i][x]\n      ans[i+1][directions[x]] = score + scoreList[directions[x]]\n    }\n  }\n\n  let max = -Infinity\n  for (let i=1; i<ans.length; i++) max = Math.max(max, Math.max(...ans[i]))\n  return console.log(max)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 619, "deobfuscated": "const main = input => {\n  input = input.trim().split(\"\\n\");\n  const [n, k] = input[0].split(\" \").map(Number);\n  const directions = input[1].split(\" \").map(v => Number(v) - 1);\n  const scoreList = input[2].split(\" \").map(Number);\n  const ans = [new Array(n).fill(0)];\n  for (let i = 0; i < k; i++) {\n    ans.push([]);\n  }\n  for (let i = 0; i < k; i++) {\n    for (let x = 0; x < n; x++) {\n      const score = ans[i][x];\n      ans[i + 1][directions[x]] = score + scoreList[directions[x]];\n    }\n  }\n  let max = -Infinity;\n  for (let i = 1; i < ans.length; i++) {\n    max = Math.max(max, Math.max(...ans[i]));\n  }\n  return console.log(max);\n};\nif (process.env.MYTEST) {\n  test();\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.505480696190858, "ngram_match_score": 0.20639479393190333, "weighted_ngram_match_score": 0.291356253170947, "syntax_match_score": 0.9264705882352942, "dataflow_match_score": 0.5977011494252874}, "code_complexity": {"difference_score": 1.5, "length_score": -1.5, "increase_maintainability": -0.11133541932602742, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.04761904761904767, "new_decrease_halstead_effort": -0.2871032104722151}}
{"filename": "p02665_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],A]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const a=[0x1-A[0x0]];for(let i=0x1;i<N;i++)a['push'](a[i-0x1]*0x2-A[i]);a['push'](0x0);let n=BigInt(A[N]);for(let i=N-0x1;i>=0x0;i--){const c=a[i+0x1]+A[i+0x1];if(a[i]>c)a[i]=c;else if(a[i]*0x2<c)return'-1';n+=BigInt(a[i]+A[i]);}return''+n;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n0 1 1 2", "7"], ["4\n0 0 1 0 2", "10"], ["2\n0 3 1", "-1"], ["1\n1 1", "-1"], ["10\n0 0 1 1 2 3 5 8 13 21 34", "264"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0));\n  const a = [1-A[0]];\n  for ( let i = 1; i < N; i++ ) a.push(a[i-1] * 2 - A[i]);\n  a.push(0);\n  let n = BigInt(A[N]);\n  for ( let i = N-1; i >= 0; i-- ) {\n    const c = a[i+1] + A[i+1];\n    if ( a[i] > c ) a[i] = c;\n    else if ( a[i] * 2 < c ) return '-1';\n    n += BigInt(a[i] + A[i]);\n  }\n  return `${n}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 620, "deobfuscated": "console.log((args => {\n  const [[N], A] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const a = [1 - A[0]];\n  for (let i = 1; i < N; i++) {\n    a.push(a[i - 1] * 2 - A[i]);\n  }\n  a.push(0);\n  let n = BigInt(A[N]);\n  for (let i = N - 1; i >= 0; i--) {\n    const c = a[i + 1] + A[i + 1];\n    if (a[i] > c) {\n      a[i] = c;\n    } else if (a[i] * 2 < c) {\n      return \"-1\";\n    }\n    n += BigInt(a[i] + A[i]);\n  }\n  return \"\" + n;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5821409325004389, "ngram_match_score": 0.2611451525719176, "weighted_ngram_match_score": 0.3316828416941021, "syntax_match_score": 0.8468468468468469, "dataflow_match_score": 0.8888888888888888}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02787_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x0a');const array=input[0x0]['split']('\\x20')['map'](s=>parseInt(s));const rest=input['slice'](0x1);const H=array[0x0];const N=array[0x1];const magic=[];for(let i=0x0;i<rest['length'];++i){const a=rest[i]['split']('\\x20')['map'](s=>parseInt(s));magic['push']([a[0x0],a[0x1]]);}magic['sort']((a,b)=>a[0x0]-b[0x0]);let dp=Array(H+0x1)['fill'](Infinity);dp[0x0]=0x0;for(let i=0x0;i<N;++i){const w=magic[i][0x0];const v=magic[i][0x1];for(let j=0x0;j<=H;++j){const min=Math['min'](j+w,H);dp[min]=Math['min'](dp[min],dp[j]+v);}}console['log'](dp[H]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["9 3\n8 3\n4 2\n2 1", "4"], ["100 6\n1 1\n2 3\n3 9\n4 27\n5 81\n6 243", "100"], ["9999 10\n540 7550\n691 9680\n700 9790\n510 7150\n415 5818\n551 7712\n587 8227\n619 8671\n588 8228\n176 2461", "139815"]], "original": "'use strict'\n\nfunction Main(input) {\n  input = input.trim().split('\\n')\n  const array = input[0].split(' ').map(s => parseInt(s))\n  const rest = input.slice(1)\n  const H = array[0]\n  const N = array[1]\n\n  const magic = []\n  for(let i = 0; i < rest.length; ++i) {\n    const a = rest[i].split(' ').map(s => parseInt(s))\n    magic.push([a[0], a[1]])\n  }\n  magic.sort((a, b) => a[0] - b[0])\n\n  let dp = Array(H+1).fill(Infinity)\n\n  dp[0] = 0\n  for(let i = 0; i < N; ++i) {\n    const w = magic[i][0]\n    const v = magic[i][1]\n    for(let j = 0; j <= H; ++j) {\n      \n      const min = Math.min(j + w, H)\n\n      dp[min] = Math.min(dp[min], dp[j] + v) \n    }\n\n    // console.log(`${i}までの魔法を利用`)\n    // console.log(dp)\n    // console.log('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')\n  }\n  \n  console.log(dp[H])\n  \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 621, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  const array = input[0].split(\" \").map(s => parseInt(s));\n  const rest = input.slice(1);\n  const H = array[0];\n  const N = array[1];\n  const magic = [];\n  for (let i = 0; i < rest.length; ++i) {\n    const a = rest[i].split(\" \").map(s => parseInt(s));\n    magic.push([a[0], a[1]]);\n  }\n  magic.sort((a, b) => a[0] - b[0]);\n  let dp = Array(H + 1).fill(Infinity);\n  dp[0] = 0;\n  for (let i = 0; i < N; ++i) {\n    const w = magic[i][0];\n    const v = magic[i][1];\n    for (let j = 0; j <= H; ++j) {\n      const min = Math.min(j + w, H);\n      dp[min] = Math.min(dp[min], dp[j] + v);\n    }\n  }\n  console.log(dp[H]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.701234193311396, "ngram_match_score": 0.4819352034665409, "weighted_ngram_match_score": 0.49345611523358857, "syntax_match_score": 1.0, "dataflow_match_score": 0.8295454545454546}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009931851806065373, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.021146753263640017}}
{"filename": "p02984_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const A=arg[0x1]['split']('\\x20')['map'](n=>parseInt(0x2*n));let offset=0x0;for(let i=0x0;i<N;i++){offset=A[i]-offset;}let x=offset/0x2;let cur=x;let answer=[];for(let i=0x0;i<N;i++){answer['push'](cur);cur=A[i]-cur;}console['log'](answer['join']('\\x20'));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n2 2 4", "4 0 4"], ["5\n3 8 7 5 5", "2 4 12 2 8"], ["3\n1000000000 1000000000 0", "0 2000000000 0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const A = arg[1].split(\" \").map(n=>parseInt(2 * n));\n    \n    let offset = 0;\n    \n    for(let i=0; i<N; i++) {\n        offset = A[i] - offset;\n    }\n    \n    let x = offset / 2;\n    \n    let cur = x;\n    \n    let answer = [];\n    \n    for(let i=0; i<N; i++) {\n        answer.push(cur);\n        cur = A[i] - cur;\n    }\n    \n    console.log(answer.join(\" \"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 622, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n => parseInt(n * 2));\n  let offset = 0;\n  for (let i = 0; i < N; i++) {\n    offset = A[i] - offset;\n  }\n  let x = offset / 2;\n  let cur = x;\n  let answer = [];\n  for (let i = 0; i < N; i++) {\n    answer.push(cur);\n    cur = A[i] - cur;\n  }\n  console.log(answer.join(\" \"));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8003530377356487, "ngram_match_score": 0.611658974761298, "weighted_ngram_match_score": 0.734197620625741, "syntax_match_score": 0.8555555555555555, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03050_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const N=parseInt(input);let ret=0x0;for(let i=0x1;i*i<N;i++){const ic=i-0x1;if(ic!==0x0&&N%ic===Math['trunc'](N/ ic)){ret+=ic;}const j=Math['trunc'](N/ i)-0x1;if(N%j===i){ret+=j;}}console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8", "10"], ["1000000000000", "2499686339916"]], "original": "\"use strict\";\nfunction Main(input) {\n  const N = parseInt(input);\n  let ret = 0;\n  for (let i = 1; (i * i) < N; i++) {\n    const ic = i - 1;\n    if (ic !== 0 && (N % ic) === Math.trunc(N / ic)) {\n      ret += ic;\n    }\n    const j =Math.trunc(N / i) - 1;\n    if ((N % j) === i) {\n      ret += j;\n    }\n  }\n  console.log(ret);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 623, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const N = parseInt(input);\n  let ret = 0;\n  for (let i = 1; i * i < N; i++) {\n    const ic = i - 1;\n    if (ic !== 0 && N % ic === Math.trunc(N / ic)) {\n      ret += ic;\n    }\n    const j = Math.trunc(N / i) - 1;\n    if (N % j === i) {\n      ret += j;\n    }\n  }\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8128255688056607, "ngram_match_score": 0.7416576912839316, "weighted_ngram_match_score": 0.7596445839387115, "syntax_match_score": 0.75, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03088_1", "type": "JavaScript", "obfuscated": "const main=input=>{const N=Number(input);console['log'](calc(N,'',0x0));};var map={};var w=['A','C','G','T'];function calc(N,lst4,cnt){var key=lst4+'_'+cnt;if(map[key])return map[key];if(cnt==N){return 0x1;}var ans=0x0;for(var i=0x0;i<0x4;i++){var next=lst4+w[i];var next3=next['slice'](-0x3);var next4=next['slice'](-0x4);if(next3[0x0]+next3[0x1]+next3[0x2]!='AGC'&&next3[0x0]+next3[0x2]+next3[0x1]!='AGC'&&next3[0x1]+next3[0x0]+next3[0x2]!='AGC'&&next4[0x0]+next4[0x1]+next4[0x3]!='AGC'&&next4[0x0]+next4[0x2]+next4[0x3]!='AGC'){ans+=calc(N,next['slice'](-0x4),cnt+0x1);ans%=0x3b9aca07;}}map[key]=ans;return ans;}main(require('fs')['readFileSync']('/dev/stdin','UTF-8'));", "test_cases": [["3", "61"], ["4", "230"], ["100", "388130742"]], "original": "const main = (input) => {\n  const N = Number(input);\n\n  console.log(calc(N, \"\", 0));\n}\n\nvar map = {}; // 最後の4文字+文字数\nvar w = ['A','C','G','T'];\nfunction calc(N, lst4, cnt){\n  var key = lst4 + \"_\" + cnt;\n  if(map[key]) return map[key];\n  if(cnt == N) {\n//    console.log(lst4);\n    return 1;\n  }\n  var ans = 0;\n  for(var i=0;i<4;i++){\n    var next = lst4+w[i];\n    var next3 = (next).slice(-3);\n    var next4 = (next).slice(-4);\n    if(\n      next3[0]+next3[1]+next3[2] != 'AGC' &&\n      next3[0]+next3[2]+next3[1] != 'AGC' &&\n      next3[1]+next3[0]+next3[2] != 'AGC' &&\n\n      next4[0]+next4[1]+next4[3] != 'AGC' &&\n      next4[0]+next4[2]+next4[3] != 'AGC'\n    ){\n      ans += calc(N, next.slice(-4), cnt+1);\n      ans %= 1000000007;\n    }\n  }\n  map[key] = ans;\n  return ans;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 624, "deobfuscated": "const main = input => {\n  const N = Number(input);\n  console.log(calc(N, \"\", 0));\n};\nvar map = {};\nvar w = [\"A\", \"C\", \"G\", \"T\"];\nfunction calc(N, lst4, cnt) {\n  var key = lst4 + \"_\" + cnt;\n  if (map[key]) {\n    return map[key];\n  }\n  if (cnt == N) {\n    return 1;\n  }\n  var ans = 0;\n  for (var i = 0; i < 4; i++) {\n    var next = lst4 + w[i];\n    var next3 = next.slice(-3);\n    var next4 = next.slice(-4);\n    if (next3[0] + next3[1] + next3[2] != \"AGC\" && next3[0] + next3[2] + next3[1] != \"AGC\" && next3[1] + next3[0] + next3[2] != \"AGC\" && next4[0] + next4[1] + next4[3] != \"AGC\" && next4[0] + next4[2] + next4[3] != \"AGC\") {\n      ans += calc(N, next.slice(-4), cnt + 1);\n      ans %= 1000000007;\n    }\n  }\n  map[key] = ans;\n  return ans;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6527166758795114, "ngram_match_score": 0.3155548623469803, "weighted_ngram_match_score": 0.4381689840282085, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03157_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [HW,...S]=args['trim']()['split']('\\x0a');const [H,W]=HW['split']('\\x20')['map'](v=>parseInt(v));const trail=Array['from']({'length':H},_=>Array(W)['fill'](![]));const dir=[[-0x1,0x0],[0x0,-0x1],[0x1,0x0],[0x0,0x1]];let p=0x0;for(let i=0x0;i<H;i++){for(let j=0x0;j<W;j++){if(trail[i][j])continue;const stack=[[i,j]];trail[i][j]=!![];let w=S[i][j]==='.'|0x0,b=w^0x1;while(stack['length']){const [x,y]=stack['pop']();for(const [dx,dy]of dir){const nx=x+dx,ny=y+dy;if(nx<0x0||H<=nx||ny<0x0||W<=ny||trail[nx][ny]||S[x][y]===S[nx][ny])continue;trail[nx][ny]=!![];if(S[nx][ny]==='#')b++;else w++;stack['push']([nx,ny]);}}p+=w*b;}}return''+p;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3 3\n.#.\n..#\n#..", "10"], ["2 4\n....\n....", "0"], ["4 3\n###\n###\n...\n###", "6"]], "original": "console.log((args=>{\n  const [HW,...S] = args.trim().split('\\n');\n  const [H,W] = HW.split(' ').map(v=>parseInt(v));\n  const trail = Array.from({length:H},_=>Array(W).fill(false));\n  const dir = [[-1,0],[0,-1],[1,0],[0,1]];\n  let p = 0;\n  for ( let i = 0; i < H; i++ ) {\n    for ( let j = 0; j < W; j++ ) {\n      if ( trail[i][j] ) continue;\n      const stack = [[i,j]];\n      trail[i][j] = true;\n      let w = S[i][j]==='.'|0, b = w^1;\n      while ( stack.length ) {\n        const [x,y] = stack.pop();\n        for ( const [dx,dy] of dir ) {\n          const nx = x+dx, ny = y+dy;\n          if ( nx < 0 || H <= nx || ny < 0 || W <= ny\n            || trail[nx][ny] || S[x][y] === S[nx][ny] ) continue;\n          trail[nx][ny] = true;\n          if ( S[nx][ny] === '#' ) b++; else w++;\n          stack.push([nx,ny]);\n        }\n      }\n      p += w * b;\n    }\n  }\n  return `${p}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 625, "deobfuscated": "console.log((args => {\n  const [HW, ...S] = args.trim().split(\"\\n\");\n  const [H, W] = HW.split(\" \").map(v => parseInt(v));\n  const trail = Array.from({\n    length: H\n  }, _ => Array(W).fill(false));\n  const dir = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n  let p = 0;\n  for (let i = 0; i < H; i++) {\n    for (let j = 0; j < W; j++) {\n      if (trail[i][j]) {\n        continue;\n      }\n      const stack = [[i, j]];\n      trail[i][j] = true;\n      let w = S[i][j] === \".\" | 0;\n      let b = w ^ 1;\n      while (stack.length) {\n        const [x, y] = stack.pop();\n        for (const [dx, dy] of dir) {\n          const nx = x + dx;\n          const ny = y + dy;\n          if (nx < 0 || H <= nx || ny < 0 || W <= ny || trail[nx][ny] || S[x][y] === S[nx][ny]) {\n            continue;\n          }\n          trail[nx][ny] = true;\n          if (S[nx][ny] === \"#\") {\n            b++;\n          } else {\n            w++;\n          }\n          stack.push([nx, ny]);\n        }\n      }\n      p += w * b;\n    }\n  }\n  return \"\" + p;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.644773819814823, "ngram_match_score": 0.33895883063570037, "weighted_ngram_match_score": 0.4286886371757802, "syntax_match_score": 0.8484848484848485, "dataflow_match_score": 0.9629629629629629}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03186_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split']('\\x20')['map'](Number);let badKusuri=input[0x0];let goodKusuri=input[0x1];let goodPoison=input[0x2];for(;goodKusuri>0x0&&goodPoison>0x0;){goodKusuri--;goodPoison--;}if(goodPoison==0x0){goodKusuri=0x0;}else{for(;badKusuri>0x0&&goodPoison>0x0;){badKusuri--;goodPoison--;}}if(goodPoison>0x0){goodPoison--;}console['log'](input[0x1]+input[0x2]-(goodKusuri+goodPoison));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 1 4", "5"], ["5 2 9", "10"], ["8 8 1", "9"]], "original": "'use strict';\n\nfunction Main(input) {\n\n  input = input.trim().split(\" \").map(Number);\n  let badKusuri = input[0];\n  let goodKusuri = input[1];\n  let goodPoison = input[2];\n  \n  for(;(goodKusuri>0)&&(goodPoison>0);){\n  \tgoodKusuri--;\n    goodPoison--;\n  }\n  \n  if(goodPoison == 0){\n  \tgoodKusuri = 0;\n  } else {\n  \tfor(;(badKusuri>0)&&(goodPoison>0);){\n  \t\tbadKusuri--;\n      \tgoodPoison--;\n  \t}\n  }\n  \n  if(goodPoison > 0){\n  \tgoodPoison--;\n  }\n  \n  console.log((input[1] + input[2]) - (goodKusuri + goodPoison));\n  \n  \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 626, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(\" \").map(Number);\n  let badKusuri = input[0];\n  let goodKusuri = input[1];\n  let goodPoison = input[2];\n  while (goodKusuri > 0 && goodPoison > 0) {\n    goodKusuri--;\n    goodPoison--;\n  }\n  if (goodPoison == 0) {\n    goodKusuri = 0;\n  } else {\n    while (badKusuri > 0 && goodPoison > 0) {\n      badKusuri--;\n      goodPoison--;\n    }\n  }\n  if (goodPoison > 0) {\n    goodPoison--;\n  }\n  console.log(input[1] + input[2] - (goodKusuri + goodPoison));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.72954343349705, "ngram_match_score": 0.4721035793517954, "weighted_ngram_match_score": 0.6595533007038203, "syntax_match_score": 0.7865168539325843, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03319_1", "type": "JavaScript", "obfuscated": "function Main(input){var NKA=input['split']('\\x0a');var NK=NKA[0x0]['split']('\\x20');var N=parseInt(NK[0x0],0xa);var K=parseInt(NK[0x1],0xa);var A=NKA[0x1]['split']('\\x20')['map'](v=>parseInt(v,0xa));var minPoint=A['indexOf'](0x1);var left=Math['ceil'](minPoint/(K-0x1));var right=Math['ceil']((N-minPoint-0x1)/(K-0x1));console['log'](left+right);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 3\n2 3 1 4", "2"], ["3 3\n1 2 3", "1"], ["8 3\n7 3 1 8 4 6 2 5", "4"]], "original": "function Main(input) {\n    var NKA = input.split('\\n')\n    var NK = NKA[0].split(' ')\n    var N = parseInt(NK[0], 10)\n    var K = parseInt(NK[1], 10)\n    var A = NKA[1].split(' ').map(v => parseInt(v, 10))\n\n    var minPoint = A.indexOf(1)\n    var left = Math.ceil(minPoint / (K - 1))\n    var right = Math.ceil((N - minPoint - 1) / (K - 1))\n    \n    console.log(left + right);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 627, "deobfuscated": "function Main(input) {\n  var NKA = input.split(\"\\n\");\n  var NK = NKA[0].split(\" \");\n  var N = parseInt(NK[0], 10);\n  var K = parseInt(NK[1], 10);\n  var A = NKA[1].split(\" \").map(v => parseInt(v, 10));\n  var minPoint = A.indexOf(1);\n  var left = Math.ceil(minPoint / (K - 1));\n  var right = Math.ceil((N - minPoint - 1) / (K - 1));\n  console.log(left + right);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7657817874246473, "ngram_match_score": 0.554747868647616, "weighted_ngram_match_score": 0.566071588743281, "syntax_match_score": 1.0, "dataflow_match_score": 0.9423076923076923}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03427_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{const lines=input['split']('\\x0a');if(lines[0x0]['length']===0x1){console['log'](lines[0x0]);return;}const len9=lines[0x0]['length']-0x1;const head=parseInt(lines[0x0][0x0])-0x1;console['log'](head+len9*0x9);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["100", "18"], ["9995", "35"], ["3141592653589793", "137"]], "original": "\"use strict\"\n\nconst main = (input) => {\n  const lines = input.split(\"\\n\")\n  if (lines[0].length === 1) {\n    console.log(lines[0])\n    return\n  }\n  const len9 = lines[0].length - 1\n  const head = parseInt(lines[0][0]) - 1\n  console.log(head + len9 * 9)\n}\n\nmain (require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 628, "deobfuscated": "'use strict';\n\nconst main = input => {\n  const lines = input.split(\"\\n\");\n  if (lines[0].length === 1) {\n    console.log(lines[0]);\n    return;\n  }\n  const len9 = lines[0].length - 1;\n  const head = parseInt(lines[0][0]) - 1;\n  console.log(head + len9 * 9);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7039353021808875, "ngram_match_score": 0.44904548276089756, "weighted_ngram_match_score": 0.45760481687174326, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03545_1", "type": "JavaScript", "obfuscated": "'use strict';var lines=require('fs')['readFileSync'](0x0,'utf8')['split']('\\x0a');var str=lines[0x0];var n=str['length']-0x1;var dfs=(i,sum,order)=>{if(i===n)return eval(order+str[n])==0x7?order+str[n]:'';var temp=dfs(i+0x1,sum,order+str[i]+'+');return temp?temp:dfs(i+0x1,sum,order+str[i]+'-');};var ans=dfs(0x0,0x0,'');console['log'](ans?ans+'=7':'');", "test_cases": [["1222", "1+2+2+2=7"], ["0290", "0-2+9+0=7"], ["3242", "3+2+4-2=7"]], "original": "'use strict'\nvar lines = require('fs').readFileSync(0, 'utf8').split('\\n')\nvar str = lines[0]\nvar n = str.length - 1;\nvar dfs = (i, sum, order) => {\n  if (i === n) return eval(order + str[n]) == 7 ? order + str[n] : '';\n  var temp = dfs(i + 1, sum, order + str[i] + '+')\n  return  temp ? temp : dfs(i + 1, sum, order + str[i] + '-');\n}\n\nvar ans = dfs(0, 0, '');\nconsole.log(ans ? ans + '=7' : '');", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 629, "deobfuscated": "'use strict';\n\nvar lines = require(\"fs\").readFileSync(0, \"utf8\").split(\"\\n\");\nvar str = lines[0];\nvar n = str.length - 1;\nvar dfs = (i, sum, order) => {\n  if (i === n) {\n    if (eval(order + str[n]) == 7) {\n      return order + str[n];\n    } else {\n      return \"\";\n    }\n  }\n  var temp = dfs(i + 1, sum, order + str[i] + \"+\");\n  if (temp) {\n    return temp;\n  } else {\n    return dfs(i + 1, sum, order + str[i] + \"-\");\n  }\n};\nvar ans = dfs(0, 0, \"\");\nconsole.log(ans ? ans + \"=7\" : \"\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6587500215161123, "ngram_match_score": 0.4784811665003072, "weighted_ngram_match_score": 0.5632649513101735, "syntax_match_score": 0.8611111111111112, "dataflow_match_score": 0.7321428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03591_1", "type": "JavaScript", "obfuscated": "function Main(input){if(input['substr'](0x0,0x4)=='YAKI'){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["YAKINIKU", "Yes"], ["TAKOYAKI", "No"], ["YAK", "No"]], "original": "function Main(input) {\n\tif(input.substr(0,4)==\"YAKI\"){\n\t\tconsole.log(\"Yes\")\n\t}else{\n\t\tconsole.log(\"No\")\n\t}\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 630, "deobfuscated": "function Main(input) {\n  if (input.substr(0, 4) == \"YAKI\") {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5467814797959971, "ngram_match_score": 0.060745880708766846, "weighted_ngram_match_score": 0.12638003847522164, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03797_1", "type": "JavaScript", "obfuscated": "'use strict';const create=()=>{const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const res={'list':input,'index':0x0,'max':input['length'],'hasNext':function(){return this['index']<this['max'];},'next':function(){if(!this['hasNext']()){throw'ArrayIndexOutOfBoundsException';}else{return this['list'][this['index']++];}}};return res;};const o=create();const next=()=>o['next']();const nextInt=()=>parseInt(o['next']());const nextStrArray=()=>o['next']()['split']('\\x20');const nextIntArray=()=>o['next']()['split']('\\x20')['map'](el=>parseInt(el));const nextCharArray=()=>o['next']()['split']('');const hasNext=()=>o['hasNext']();const myout=(...x)=>console['log'](...x);const Main=()=>{const [n,m]=nextIntArray();let ans=m<=0x2*n?Math['floor'](M/0x2):Math['floor']((0x2*n+m)/0x4);console['log'](ans);};Main();", "test_cases": [["1 6", "2"], ["12345 678901", "175897"]], "original": "\"use strict\"\nconst create = () => {\n    const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n    const res = {\n        \"list\": input, \"index\": 0, \"max\": input.length,\n        \"hasNext\": function () { return this.index < this.max },\n        \"next\": function () { if (!this.hasNext()) { throw \"ArrayIndexOutOfBoundsException\"; } else { return this.list[this.index++]; } }\n    };\n    return res;\n}\nconst o = create();\nconst next = () => o.next()\nconst nextInt = () => parseInt(o.next())\nconst nextStrArray = () => o.next().split(\" \")\nconst nextIntArray = () => o.next().split(\" \").map(el => parseInt(el))\nconst nextCharArray = () => o.next().split(\"\")\nconst hasNext = () => o.hasNext()\nconst myout = (...x) => console.log(...x)\nconst Main = () => {\n    const [n, m] = nextIntArray()\n    let ans = m <= 2 * n ? Math.floor(M / 2) : Math.floor((2 * n + m) / 4)\n    console.log(ans)\n}\nMain()\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 631, "deobfuscated": "'use strict';\n\nconst create = () => {\n  const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n  const res = {\n    list: input,\n    index: 0,\n    max: input.length,\n    hasNext: function () {\n      return this.index < this.max;\n    },\n    next: function () {\n      if (!this.hasNext()) {\n        throw \"ArrayIndexOutOfBoundsException\";\n      } else {\n        return this.list[this.index++];\n      }\n    }\n  };\n  return res;\n};\nconst o = create();\nconst next = () => o.next();\nconst nextInt = () => parseInt(o.next());\nconst nextStrArray = () => o.next().split(\" \");\nconst nextIntArray = () => o.next().split(\" \").map(el => parseInt(el));\nconst nextCharArray = () => o.next().split(\"\");\nconst hasNext = () => o.hasNext();\nconst myout = (...x) => console.log(...x);\nconst Main = () => {\n  const [n, m] = nextIntArray();\n  let ans = m <= n * 2 ? Math.floor(M / 2) : Math.floor((n * 2 + m) / 4);\n  console.log(ans);\n};\nMain();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.616408288567457, "ngram_match_score": 0.6248567973628217, "weighted_ngram_match_score": 0.63699001478395, "syntax_match_score": 0.8390804597701149, "dataflow_match_score": 0.36470588235294116}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01093_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['trim']()['split']('\\x0a');while(line=lines['shift']()){const numbers=line['split']('\\x20')['map'](Number);if(numbers['length']>0x1){const diffList=[];numbers['map']((num1,ind1)=>{numbers['map']((num2,ind2)=>{if(ind1!==ind2){const diff=Math['abs'](num1-num2);const pair=num1+'\\x20'+num2;diffList['push']([pair,diff]);}});});const sorted=diffList['sort']((p1,p2)=>p1[0x1]-p2[0x1])[0x0];console['log'](sorted[0x1]);}}", "test_cases": [["5\n10 10 10 10 10\n5\n1 5 8 9 11\n7\n11 34 83 47 59 29 70\n0", "0\n1\n5"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n \nconst lines = input.trim().split('\\n');\n \nwhile (line = lines.shift()) {\n \n    const numbers = line.split(' ').map(Number);\n\n    if(numbers.length > 1){\n        const diffList = [];\n \n        numbers.map((num1, ind1) => {\n            numbers.map((num2, ind2) => {\n                if (ind1 !== ind2) {\n                    const diff = Math.abs(num1 - num2);\n                    const pair = `${num1} ${num2}`;\n                    diffList.push([pair, diff]);\n                }\n            })\n        })\n \n        const sorted = diffList.sort((p1, p2) => p1[1] - p2[1])[0];\n        console.log(sorted[1]);\n    }\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 632, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.trim().split(\"\\n\");\nwhile (line = lines.shift()) {\n  const numbers = line.split(\" \").map(Number);\n  if (numbers.length > 1) {\n    const diffList = [];\n    numbers.map((num1, ind1) => {\n      numbers.map((num2, ind2) => {\n        if (ind1 !== ind2) {\n          const diff = Math.abs(num1 - num2);\n          const pair = num1 + \" \" + num2;\n          diffList.push([pair, diff]);\n        }\n      });\n    });\n    const sorted = diffList.sort((p1, p2) => p1[1] - p2[1])[0];\n    console.log(sorted[1]);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7210554211681848, "ngram_match_score": 0.6393823379944823, "weighted_ngram_match_score": 0.7096511306389768, "syntax_match_score": 0.7659574468085106, "dataflow_match_score": 0.7692307692307693}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02242_1", "type": "JavaScript", "obfuscated": "console['log']('0\\x200');console['log']('1\\x202');console['log']('2\\x202');console['log']('3\\x201');console['log']('4\\x203');", "test_cases": [["5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3", "0 0\n1 2\n2 2\n3 1\n4 3"]], "original": "console.log(\"0 0\");\nconsole.log(\"1 2\");\nconsole.log(\"2 2\");\nconsole.log(\"3 1\");\nconsole.log(\"4 3\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 633, "deobfuscated": "console.log(\"0 0\");\nconsole.log(\"1 2\");\nconsole.log(\"2 2\");\nconsole.log(\"3 1\");\nconsole.log(\"4 3\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 1.0, "ngram_match_score": 1.0, "weighted_ngram_match_score": 1.0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02421_1", "type": "JavaScript", "obfuscated": "var input='';var readable=process['stdin'];readable['resume']();readable['setEncoding']('utf-8');readable['on']('data',function(chunk){input+=chunk;});readable['on']('end',function(){var data=input['split']('\\x0a');var n=data[0x0];var tscore=0x0;var hscore=0x0;for(var i=0x1;i<data['length'];i++){var taha=data[i]['split']('\\x20');if(taha[0x0]<taha[0x1]){hscore+=0x3;}else if(taha[0x1]<taha[0x0]){tscore+=0x3;}else{hscore+=0x1;tscore+=0x1;}}console['log'](tscore+'\\x20'+hscore);});", "test_cases": [["3\ncat dog\nfish fish\nlion tiger", "1 7"]], "original": "var input = '';\nvar readable = process.stdin;\nreadable.resume();\nreadable.setEncoding( 'utf-8' );\nreadable.on( 'data', function( chunk ) {\n  input += chunk;\n});\n\nreadable.on( 'end', function() {\n  var data = input.split( \"\\n\" );\n  var n = data[0];\n  var tscore = 0;\n  var hscore = 0;\n  for( var i=1; i<data.length; i++ ) {\n    var taha = data[i].split( ' ' );\n    if( taha[0] < taha[1] ) {\n      hscore += 3;\n    } else if( taha[1] < taha[0] ) {\n      tscore += 3;\n    } else {\n      hscore += 1;\n      tscore += 1;\n    }\n  }\n  console.log( tscore+' '+hscore );  \n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 634, "deobfuscated": "var input = \"\";\nvar readable = process.stdin;\nreadable.resume();\nreadable.setEncoding(\"utf-8\");\nreadable.on(\"data\", function (chunk) {\n  input += chunk;\n});\nreadable.on(\"end\", function () {\n  var data = input.split(\"\\n\");\n  var n = data[0];\n  var tscore = 0;\n  var hscore = 0;\n  for (var i = 1; i < data.length; i++) {\n    var taha = data[i].split(\" \");\n    if (taha[0] < taha[1]) {\n      hscore += 3;\n    } else if (taha[1] < taha[0]) {\n      tscore += 3;\n    } else {\n      hscore += 1;\n      tscore += 1;\n    }\n  }\n  console.log(tscore + \" \" + hscore);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7285634368580246, "ngram_match_score": 0.44927600320145994, "weighted_ngram_match_score": 0.4649777442306385, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02534_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\\x0a');let K=lines[0x0]['trim']()-0x0;let ans='';for(let i=0x0;i<K;i++){ans+='ACL';}console['log'](ans);", "test_cases": [["3", "ACLACLACL"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nconst lines = input.split('\\n')\nlet K = lines[0].trim() - 0\n\nlet ans = ''\n\nfor (let i = 0; i < K; i++) {\n    ans += 'ACL'\n}\n\nconsole.log(ans)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 635, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.split(\"\\n\");\nlet K = lines[0].trim() - 0;\nlet ans = \"\";\nfor (let i = 0; i < K; i++) {\n  ans += \"ACL\";\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7926256742874085, "ngram_match_score": 0.5796643446996922, "weighted_ngram_match_score": 0.590838352449942, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02631_1", "type": "JavaScript", "obfuscated": "const [n,aStr]=require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\n/);let as=aStr['split'](/\\s/)['map'](Number);let total=as['reduce']((a,b)=>a^b);console['log'](as['map'](n=>n^total)['join']('\\x20'));", "test_cases": [["4\n20 11 9 24", "26 5 7 22"]], "original": "const [n, aStr] = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/)\nlet as = aStr.split(/\\s/).map(Number)\nlet total = as.reduce((a, b) => a ^ b)\nconsole.log(as.map(n => n ^ total).join(' '))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 636, "deobfuscated": "const [n, aStr] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\n/);\nlet as = aStr.split(/\\s/).map(Number);\nlet total = as.reduce((a, b) => a ^ b);\nconsole.log(as.map(n => n ^ total).join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.762454493815248, "ngram_match_score": 0.5185115734210497, "weighted_ngram_match_score": 0.531306401839942, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02793_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],A]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>0x0|v));const MOD=0x3b9aca00+0x7,MAX=Math['max'](...A);const mul=(a,b)=>((a>>0x10)*b%MOD*0x10000+(a&0xffff)*b)%MOD;const isP=Array(0xf4240+0x1)['fill'](!![]);const px=new Map();for(let p=0x2;p<=MAX;p++){if(!isP[p])continue;for(let i=p+p;i<=MAX;i=i+p)isP[i]=![];px['set'](p,0x0);}const ap=[];for(let i=0x0;i<N;i++){let a=A[i];ap['push'](new Map());for(const [p,x]of px){if(a===0x1)break;let s=0x0;while(a%p===0x0){a/=p;s++;}if(s)ap[i]['set'](p,s);if(s>x)px['set'](p,s);}}let sum=0x0;for(let i=0x0;i<N;i++){let B=0x1;for(const [p,q]of px){if(!q)continue;B=mul(B,p**(q-(ap[i]['get'](p)|0x0)));}sum=(sum+B)%MOD;}return sum;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n2 3 4", "13"], ["5\n12 12 12 12 12", "5"], ["3\n1000000 999999 999998", "996989508"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>0|v));\n  const MOD = 1e9+7, MAX = Math.max(...A);\n  const mul = (a,b) => ((a>>16)*b%MOD*65536+(a&65535)*b)%MOD;\n  const isP = Array(1e6+1).fill(true);\n  const px = new Map();\n  for ( let p = 2; p <= MAX; p++ ) {\n    if ( !isP[p] ) continue;\n    for ( let i = p+p; i <= MAX; i=i+p ) isP[i] = false;\n    px.set(p,0);\n  }\n  const ap = [];\n  for ( let i = 0; i < N; i++ ) {\n    let a = A[i];\n    ap.push(new Map());\n    for ( const [p,x] of px ) {\n      if ( a === 1 )break;\n      let s = 0;\n      while ( a % p === 0 ) {\n        a/=p;\n        s++;\n      }\n      if ( s ) ap[i].set(p,s);\n      if ( s > x ) px.set(p,s);\n    }\n  }\n  let sum = 0;\n  for ( let i = 0; i < N; i++ ) {\n    let B = 1;\n    for ( const [p,q] of px ) {\n      if ( !q ) continue;\n      B = mul( B, p ** (q-(ap[i].get(p)|0)) );\n    }\n    sum = ( sum + B ) % MOD;\n  }\n  return sum;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 637, "deobfuscated": "console.log((args => {\n  const [[N], A] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  const MOD = 1000000007;\n  const MAX = Math.max(...A);\n  const mul = (a, b) => ((a >> 16) * b % MOD * 65536 + (a & 65535) * b) % MOD;\n  const isP = Array(1000001).fill(true);\n  const px = new Map();\n  for (let p = 2; p <= MAX; p++) {\n    if (!isP[p]) {\n      continue;\n    }\n    for (let i = p + p; i <= MAX; i = i + p) {\n      isP[i] = false;\n    }\n    px.set(p, 0);\n  }\n  const ap = [];\n  for (let i = 0; i < N; i++) {\n    let a = A[i];\n    ap.push(new Map());\n    for (const [p, x] of px) {\n      if (a === 1) {\n        break;\n      }\n      let s = 0;\n      while (a % p === 0) {\n        a /= p;\n        s++;\n      }\n      if (s) {\n        ap[i].set(p, s);\n      }\n      if (s > x) {\n        px.set(p, s);\n      }\n    }\n  }\n  let sum = 0;\n  for (let i = 0; i < N; i++) {\n    let B = 1;\n    for (const [p, q] of px) {\n      if (!q) {\n        continue;\n      }\n      B = mul(B, p ** (q - (ap[i].get(p) | 0)));\n    }\n    sum = (sum + B) % MOD;\n  }\n  return sum;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4755524938748916, "ngram_match_score": 0.29785332258342745, "weighted_ngram_match_score": 0.35609617120338244, "syntax_match_score": 0.7736842105263158, "dataflow_match_score": 0.4745762711864407}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02928_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const input1=input[0x0]['split']('\\x20');const N=parseInt(input1[0x0]);const K=parseInt(input1[0x1]);const As=input[0x1]['split']('\\x20')['map'](x=>parseInt(x));var count=0x0;for(i=0x0;i<N;i++){var u=As['slice'](i+0x1)['filter'](x=>x<As[i])['length'];var v=As['filter'](x=>x<As[i])['length'];count+=u*K%(0x3b9aca00+0x7);count+=v*(K-0x1)*K/0x2%(0x3b9aca00+0x7);count=count%(0x3b9aca00+0x7);}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2\n2 1", "3"], ["3 5\n1 1 1", "0"], ["10 998244353\n10 9 8 7 5 6 3 4 2 1", "185297239"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst input1 = input[0].split(\" \")\n\tconst N = parseInt(input1[0])\n\tconst K = parseInt(input1[1])\n\tconst As = input[1].split(\" \").map(x => parseInt(x))\n\n\tvar count = 0\n\tfor(i=0; i < N; i++){\n\t\tvar u = As.slice(i+1).filter(x => x < As[i]).length\n\t\tvar v = As.filter(x => x < As[i]).length\n\t\tcount += (u * K) % (1000000000 + 7);\n\t\tcount += (v * (K-1)*K / 2) % (1000000000 + 7);\n\t\tcount = count % (1000000000 + 7);\n\t}\n\n\tconsole.log(count)\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 638, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const input1 = input[0].split(\" \");\n  const N = parseInt(input1[0]);\n  const K = parseInt(input1[1]);\n  const As = input[1].split(\" \").map(x => parseInt(x));\n  var count = 0;\n  for (i = 0; i < N; i++) {\n    var u = As.slice(i + 1).filter(x => x < As[i]).length;\n    var v = As.filter(x => x < As[i]).length;\n    count += u * K % 1000000007;\n    count += v * (K - 1) * K / 2 % 1000000007;\n    count = count % 1000000007;\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6218247001413941, "ngram_match_score": 0.36001146159652553, "weighted_ngram_match_score": 0.38794573076613653, "syntax_match_score": 0.7981651376146789, "dataflow_match_score": 0.9411764705882353}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0023078458764071996, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.045454545454545414, "new_decrease_halstead_effort": 0.061048338899515664}}
{"filename": "p03128_1", "type": "JavaScript", "obfuscated": "function main(input){var n=input[0x0]['split']('\\x20')[0x0]-0x0;var m=input[0x0]['split']('\\x20')[0x1]-0x0;var nummap=[0x0,0x2,0x5,0x5,0x4,0x5,0x6,0x3,0x7,0x6];var mattis=input[0x1]['split']('\\x20')['map'](v=>{return{'val':v,'num':nummap[v-0x0]};});var ans='';var dp=[];dp[0x0]='';for(var i=0x1;i<=n;i++){for(var j=0x0;j<m;j++){var matti=mattis[j];if(dp[i-matti['num']]!==undefined){var tv=(dp[i-matti['num']]?dp[i-matti['num']]:'')+matti['val'];if(dp[i]===undefined||diff(tv,dp[i])>0x0){dp[i]=tv;}}}}console['log'](dp[n]);}function diff(a,b){if(a['length']!=b['length'])return a['length']-b['length'];for(var i=0x0;i<a['length'];i++){if(a[i]!=b[i])return a[i]-b[i];}return 0x0;}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["20 4\n3 7 8 4", "777773"], ["101 9\n9 8 7 6 5 4 3 2 1", "71111111111111111111111111111111111111111111111111"], ["15 3\n5 4 6", "654"]], "original": "function main(input) {\n  var n = input[0].split(\" \")[0]-0;\n  var m = input[0].split(\" \")[1]-0;\n  var nummap = [0,2,5,5,4,5,6,3,7,6];\n  var mattis = input[1].split(\" \").map(v=>{return {val:v, num:nummap[v-0]}});\n  var ans = \"\";\n  var dp = [];\n  dp[0] = \"\";\n  for(var i=1;i<=n;i++){\n    for(var j=0;j<m;j++){\n      var matti = mattis[j];\n      if(dp[i-matti.num] !== undefined){\n        var tv = (dp[i-matti.num]?dp[i-matti.num]:\"\") + matti.val;\n        if(dp[i] === undefined || diff(tv, dp[i]) > 0){\n          dp[i] = tv;\n        }\n      }\n    }\n  }\n  console.log(dp[n]);\n}\nfunction diff(a, b){\n  if(a.length != b.length) return a.length-b.length;\n  for(var i=0;i<a.length;i++){\n    if(a[i]!=b[i]) return a[i]-b[i];\n  }\n  return 0;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 639, "deobfuscated": "function main(input) {\n  var n = input[0].split(\" \")[0] - 0;\n  var m = input[0].split(\" \")[1] - 0;\n  var nummap = [0, 2, 5, 5, 4, 5, 6, 3, 7, 6];\n  var mattis = input[1].split(\" \").map(v => {\n    return {\n      val: v,\n      num: nummap[v - 0]\n    };\n  });\n  var ans = \"\";\n  var dp = [];\n  dp[0] = \"\";\n  for (var i = 1; i <= n; i++) {\n    for (var j = 0; j < m; j++) {\n      var matti = mattis[j];\n      if (dp[i - matti.num] !== undefined) {\n        var tv = (dp[i - matti.num] ? dp[i - matti.num] : \"\") + matti.val;\n        if (dp[i] === undefined || diff(tv, dp[i]) > 0) {\n          dp[i] = tv;\n        }\n      }\n    }\n  }\n  console.log(dp[n]);\n}\nfunction diff(a, b) {\n  if (a.length != b.length) {\n    return a.length - b.length;\n  }\n  for (var i = 0; i < a.length; i++) {\n    if (a[i] != b[i]) {\n      return a[i] - b[i];\n    }\n  }\n  return 0;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6799481791741203, "ngram_match_score": 0.26213251008635374, "weighted_ngram_match_score": 0.5025320014819222, "syntax_match_score": 0.9551282051282052, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03155_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a')['map'](Number);console['log']((input[0x0]+0x1-input[0x1])*(input[0x0]+0x1-input[0x2]));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n2\n3", "2"], ["100\n1\n1", "10000"], ["5\n4\n2", "8"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\").map(Number)\n\tconsole.log((input[0]+1-input[1])*(input[0]+1-input[2]));\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 640, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\").map(Number);\n  console.log((input[0] + 1 - input[1]) * (input[0] + 1 - input[2]));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6679361236162831, "ngram_match_score": 0.18759202316167214, "weighted_ngram_match_score": 0.48415247130346006, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03167_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});let C=0x3b9aca00+0x7;let H=parseInt(input[0x0][0x0],0xa);let W=parseInt(input[0x0][0x1],0xa);let DP=[];for(let i=0x0;i<H;i++){DP['push'](Array['from']({'length':W},()=>0x0));}DP[0x0][0x0]=0x1;for(let i=0x1;i<H+W-0x1;i++){for(let j=0x0;j<=Math['min'](i,H-0x1);j++){if(input[j+0x1][0x0][i-j]==='#'||i-j>=W)continue;if(j>0x0&&i-j>0x0){DP[j][i-j]=(DP[j-0x1][i-j]+DP[j][i-j-0x1])%C;}else if(j>0x0){DP[j][i-j]=DP[j-0x1][i-j];}else{DP[j][i-j]=DP[j][i-j-0x1];}}}console['log'](DP['pop']()['pop']());}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 4\n...#\n.#..\n....", "3"], ["5 2\n..\n#.\n..\n.#\n..", "0"], ["5 5\n..#..\n.....\n#...#\n.....\n..#..", "24"], ["20 20\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................", "345263555"]], "original": "\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n\tlet C = 1e9 + 7;\n\tlet H = parseInt(input[0][0], 10);\n\tlet W = parseInt(input[0][1], 10);\n\tlet DP = [];\n\tfor (let i = 0; i < H; i++){\n\t\tDP.push(Array.from({length: W}, () => 0));\n\t}\n\tDP[0][0] = 1;\n\tfor (let i = 1; i < H + W - 1; i ++){\n\t\tfor (let j = 0; j <= Math.min(i, H - 1); j++){\n\t\t\t// console.log(i, j);\n\t\t\tif (input[j + 1][0][i - j] === '#' || i - j >= W) continue;\n\t\t\tif (j > 0 && i - j > 0) {\n\t\t\t\tDP[j][i - j] = (DP[j - 1][i - j] + DP[j][i - j - 1]) % C;\n\t\t\t} else if (j > 0){\n\t\t\t\tDP[j][i - j] = DP[j - 1][i - j];\n\t\t\t} else {\n\t\t\t\tDP[j][i - j] = DP[j][i - j - 1];\n\t\t\t}\n\t\t\t// console.log(DP);\n\t\t}\n\t}\n\t// console.log(DP);\n\tconsole.log(DP.pop().pop());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 641, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  let C = 1000000007;\n  let H = parseInt(input[0][0], 10);\n  let W = parseInt(input[0][1], 10);\n  let DP = [];\n  for (let i = 0; i < H; i++) {\n    DP.push(Array.from({\n      length: W\n    }, () => 0));\n  }\n  DP[0][0] = 1;\n  for (let i = 1; i < H + W - 1; i++) {\n    for (let j = 0; j <= Math.min(i, H - 1); j++) {\n      if (input[j + 1][0][i - j] === \"#\" || i - j >= W) {\n        continue;\n      }\n      if (j > 0 && i - j > 0) {\n        DP[j][i - j] = (DP[j - 1][i - j] + DP[j][i - j - 1]) % C;\n      } else if (j > 0) {\n        DP[j][i - j] = DP[j - 1][i - j];\n      } else {\n        DP[j][i - j] = DP[j][i - j - 1];\n      }\n    }\n  }\n  console.log(DP.pop().pop());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7230290510408401, "ngram_match_score": 0.7587761466617132, "weighted_ngram_match_score": 0.7658701779835748, "syntax_match_score": 0.9337349397590361, "dataflow_match_score": 0.43373493975903615}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00047896379891354535, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.008333333333333304, "new_decrease_halstead_effort": -0.007554299582535062}}
{"filename": "p03193_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var mem=input[0x0]['split']('\\x20')['map'](Number);var sum=0x0;for(var i=0x1;i<input['length'];i++){var n=input[i]['split']('\\x20')['map'](Number);if(n[0x0]>=mem[0x1]&&n[0x1]>=mem[0x2])sum++;}console['log'](sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3 5 2\n10 3\n5 2\n2 5", "2"], ["10 587586158 185430194\n894597290 708587790\n680395892 306946994\n590262034 785368612\n922328576 106880540\n847058850 326169610\n936315062 193149191\n702035777 223363392\n11672949 146832978\n779291680 334178158\n615808191 701464268", "8"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar mem = input[0].split(\" \").map(Number);\n\tvar sum = 0;\n\tfor(var i=1;i<input.length;i++){\n\t\tvar n = input[i].split(\" \").map(Number);\n\t\tif(n[0]>=mem[1]&&n[1]>=mem[2]) sum++;\n\t}\n\tconsole.log(sum)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 642, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var mem = input[0].split(\" \").map(Number);\n  var sum = 0;\n  for (var i = 1; i < input.length; i++) {\n    var n = input[i].split(\" \").map(Number);\n    if (n[0] >= mem[1] && n[1] >= mem[2]) {\n      sum++;\n    }\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7478891751973773, "ngram_match_score": 0.39761201047249856, "weighted_ngram_match_score": 0.6809012120561411, "syntax_match_score": 0.9130434782608695, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03504_1", "type": "JavaScript", "obfuscated": "function max(array){var result=-0x1*Infinity;for(num of array){if(result<num){result=num;}}return result;}function main(input){const lines=input['split']('\\x0a');const nums=lines['map'](line=>line['split']('\\x20')['map'](x=>parseInt(x)));var n_c=nums['shift']();const N=n_c[0x0];const C=n_c[0x1];const t=Array(0x30d42);const max_recorders=Array(0x30d42);max_recorders['fill'](0x0);for(var c=0x1;c<=C;c++){t['fill'](0x0);for(var n=0x0;n<N;n++){if(nums[n][0x2]==c){t[nums[n][0x0]*0x2-0x1]++;t[nums[n][0x1]*0x2]--;}}for(var i=0x1;i<0x30d42;i++){t[i]+=t[i-0x1];}for(var i=0x1;i<0x30d42;i++){if(t[i]>0x0){max_recorders[i]++;}}}console['log'](max(max_recorders));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n1 7 2\n7 8 1\n8 12 1", "2"], ["3 4\n1 3 2\n3 4 4\n1 4 3", "3"], ["9 4\n56 60 4\n33 37 2\n89 90 3\n32 43 1\n67 68 3\n49 51 3\n31 32 3\n70 71 1\n11 12 3", "2"]], "original": "function max(array){\n  var result = -1 * Infinity;\n  for(num of array){\n    if(result < num){result = num;}\n  }\n  return result;\n}\n\nfunction main(input){\n  const lines = input.split('\\n')\n  const nums = lines.map(line => line.split(' ').map(x => parseInt(x)));\n\n  var n_c= nums.shift();\n  const N = n_c[0];\n  const C = n_c[1];\n  const t = Array(200002);\n  const max_recorders = Array(200002);\n  max_recorders.fill(0);\n\n  for(var c=1;c<=C;c++){\n    t.fill(0)\n\n    for(var n=0;n<N;n++){\n      if(nums[n][2]==c){\n        t[nums[n][0]*2-1]++;\n        t[nums[n][1]*2]--;\n      }\n    }\n\n    for(var i=1;i<200002;i++){\n      t[i] += t[i-1];\n    }\n\n    for(var i=1;i<200002;i++){\n      if(t[i]>0){\n        max_recorders[i]++;\n      }\n    }\n\n\n  }\n\n//  console.log(nums);\n//  console.log(t);\n  console.log(max(max_recorders));\n//  console.log((max_recorders));\n}\n\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 643, "deobfuscated": "function max(array) {\n  var result = -1 * Infinity;\n  for (num of array) {\n    if (result < num) {\n      result = num;\n    }\n  }\n  return result;\n}\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const nums = lines.map(line => line.split(\" \").map(x => parseInt(x)));\n  var n_c = nums.shift();\n  const N = n_c[0];\n  const C = n_c[1];\n  const t = Array(200002);\n  const max_recorders = Array(200002);\n  max_recorders.fill(0);\n  for (var c = 1; c <= C; c++) {\n    t.fill(0);\n    for (var n = 0; n < N; n++) {\n      if (nums[n][2] == c) {\n        t[nums[n][0] * 2 - 1]++;\n        t[nums[n][1] * 2]--;\n      }\n    }\n    for (var i = 1; i < 200002; i++) {\n      t[i] += t[i - 1];\n    }\n    for (var i = 1; i < 200002; i++) {\n      if (t[i] > 0) {\n        max_recorders[i]++;\n      }\n    }\n  }\n  console.log(max(max_recorders));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6635603806747628, "ngram_match_score": 0.2536768032785681, "weighted_ngram_match_score": 0.42207009576456894, "syntax_match_score": 1.0, "dataflow_match_score": 0.978494623655914}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03575_1", "type": "JavaScript", "obfuscated": "function Main(input){var N=input[0x0]['split']('\\x20')[0x0]-0x0;var M=input[0x0]['split']('\\x20')[0x1]-0x0;var list={};for(var i=0x1;i<=M;i++){var a=input[i]['split']('\\x20')[0x0]-0x0;var b=input[i]['split']('\\x20')[0x1]-0x0;list[a]=list[a]||{};list[b]=list[b]||{};list[a][b]=i;list[b][a]=i;}var ans=0x0;for(var i=0x1;i<=M;i++){if(check(list,i)!=N)ans++;}console['log'](ans);}function check(list,i){var stack=[0x1];var checked={};while(stack['length']>0x0){var now=stack['splice'](0x0,0x1)[0x0];if(checked[now])continue;checked[now]=!![];var next=Object['keys'](list[now]);next['forEach'](nxt=>{if(list[now][nxt]!=i){stack['push'](nxt);}});}return Object['keys'](checked)['length'];}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7", "4"], ["3 3\n1 2\n1 3\n2 3", "0"], ["6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "5"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var N = input[0].split(\" \")[0]-0;\n    var M = input[0].split(\" \")[1]-0;\n    var list = {};\n    for(var i=1;i<=M;i++){\n        var a = input[i].split(\" \")[0]-0;\n        var b = input[i].split(\" \")[1]-0;\n        list[a] = list[a]||{};\n        list[b] = list[b]||{};\n        list[a][b] = i;\n        list[b][a] = i;\n    }\n    \n    var ans = 0;\n    for(var i=1;i<=M;i++){\n        if(check(list, i)!=N)ans++;\n    }\n    \n    console.log(ans);\n}\n\n\nfunction check(list, i){\n    var stack = [1];\n    var checked = {};\n    while(stack.length>0){\n        var now = stack.splice(0,1)[0];\n        if(checked[now]) continue;\n        checked[now] = true;\n        var next = Object.keys(list[now]);\n        next.forEach(nxt=>{\n            if(list[now][nxt]!=i){\n                stack.push(nxt);\n            }\n        });\n    }\n    return Object.keys(checked).length;\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 644, "deobfuscated": "function Main(input) {\n  var N = input[0].split(\" \")[0] - 0;\n  var M = input[0].split(\" \")[1] - 0;\n  var list = {};\n  for (var i = 1; i <= M; i++) {\n    var a = input[i].split(\" \")[0] - 0;\n    var b = input[i].split(\" \")[1] - 0;\n    list[a] = list[a] || {};\n    list[b] = list[b] || {};\n    list[a][b] = i;\n    list[b][a] = i;\n  }\n  var ans = 0;\n  for (var i = 1; i <= M; i++) {\n    if (check(list, i) != N) {\n      ans++;\n    }\n  }\n  console.log(ans);\n}\nfunction check(list, i) {\n  var stack = [1];\n  var checked = {};\n  while (stack.length > 0) {\n    var now = stack.splice(0, 1)[0];\n    if (checked[now]) {\n      continue;\n    }\n    checked[now] = true;\n    var next = Object.keys(list[now]);\n    next.forEach(nxt => {\n      if (list[now][nxt] != i) {\n        stack.push(nxt);\n      }\n    });\n  }\n  return Object.keys(checked).length;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7141352930083861, "ngram_match_score": 0.36070891205046296, "weighted_ngram_match_score": 0.5637334945509827, "syntax_match_score": 0.9320987654320988, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.001328706214135611, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013636363636363669, "new_decrease_halstead_effort": 0.09303405572755408}}
{"filename": "p03592_1", "type": "JavaScript", "obfuscated": "function Main(input){const Param=input['split']('\\x20');const N=i(Param[0x0]);const M=i(Param[0x1]);const K=i(Param[0x2]);for(var n=0x0;n<N;n++){for(var m=0x0;m<M;m++){var b=calcBlack(n,m,N,M);if(b==K)return console['log']('Yes');}}console['log']('No');}function calcBlack(n,m,N,M){return N*n-m*n+(M*m-n*m);}function i(x){return parseInt(x,0xa);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2 2", "Yes"], ["2 2 1", "No"], ["3 5 8", "Yes"], ["7 9 20", "No"]], "original": "function Main(input) {\n    const Param = input.split(' ')\n    const N = i(Param[0])\n    const M = i(Param[1])\n    const K = i(Param[2])\n    for(var n = 0; n < N;n++){\n        for(var m = 0; m < M;m++){\n            var b = calcBlack(n, m, N, M)\n            if(b == K) return console.log('Yes')\n        }    \n    }\n    console.log('No')\n}\nfunction calcBlack(n, m, N, M){\n    return (N * n - m * n) + (M * m - n * m)\n}\nfunction i(x){ return parseInt(x, 10)}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 645, "deobfuscated": "function Main(input) {\n  const Param = input.split(\" \");\n  const N = i(Param[0]);\n  const M = i(Param[1]);\n  const K = i(Param[2]);\n  for (var n = 0; n < N; n++) {\n    for (var m = 0; m < M; m++) {\n      var b = calcBlack(n, m, N, M);\n      if (b == K) {\n        return console.log(\"Yes\");\n      }\n    }\n  }\n  console.log(\"No\");\n}\nfunction calcBlack(n, m, N, M) {\n  return N * n - m * n + (M * m - n * m);\n}\nfunction i(x) {\n  return parseInt(x, 10);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6778950967583346, "ngram_match_score": 0.38966767696645926, "weighted_ngram_match_score": 0.4614475937878093, "syntax_match_score": 0.8604651162790697, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03760_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){s=s['split']('\\x0a');const o=s[0x0]['split']('');const e=s[0x1]['split']('');let ans='';for(let i=0x0;i<o['length']+e['length'];i++){if(o[i])ans+=o[i];if(e[i])ans+=e[i];}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["xyz\nabc", "xaybzc"], ["atcoderbeginnercontest\natcoderregularcontest", "aattccooddeerrbreeggiunlnaerrccoonntteesstt"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n\n  const o = s[0].split('');\n  const e = s[1].split('');\n\n  let ans = '';\n\n  for (let i = 0; i < o.length + e.length; i++) {\n    if (o[i]) ans += o[i];\n    if (e[i]) ans += e[i];\n  }\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 646, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  s = s.split(\"\\n\");\n  const o = s[0].split(\"\");\n  const e = s[1].split(\"\");\n  let ans = \"\";\n  for (let i = 0; i < o.length + e.length; i++) {\n    if (o[i]) {\n      ans += o[i];\n    }\n    if (e[i]) {\n      ans += e[i];\n    }\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7453013688825634, "ngram_match_score": 0.545794605885007, "weighted_ngram_match_score": 0.6002950051176177, "syntax_match_score": 0.8939393939393939, "dataflow_match_score": 0.9411764705882353}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03774_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x0a');const N=parseInt(input[0x0]['split']('\\x20')[0x0]);const M=parseInt(input[0x0]['split']('\\x20')[0x1]);let arr=input['slice'](0x1,N+0x1);let points=input['slice'](N+0x1,M+N+0x1);const parse=v=>{let temp=v['split']('\\x20')['map'](vv=>parseInt(vv));return{'x':temp[0x0],'y':temp[0x1]};};arr=arr['map'](parse);points=points['map'](parse);let indexArr=[];arr['forEach']((v,i)=>{let minDist=0x3b9aca00;let index=0x0;points['forEach']((w,j)=>{let dist=Math['abs'](v['x']-w['x'])+Math['abs'](v['y']-w['y']);if(dist<minDist){minDist=dist;index=j;}});indexArr['push'](index);});indexArr['forEach'](v=>console['log'](v+0x1));};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["2 2\n2 0\n0 0\n-1 0\n1 0", "2\n1"], ["3 4\n10 10\n-10 -10\n3 3\n1 2\n2 3\n3 5\n3 5", "3\n1\n2"], ["5 5\n-100000000 -100000000\n-100000000 100000000\n100000000 -100000000\n100000000 100000000\n0 0\n0 0\n100000000 100000000\n100000000 -100000000\n-100000000 100000000\n-100000000 -100000000", "5\n4\n3\n2\n1"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0].split(' ')[0])\n    const M = parseInt(input[0].split(' ')[1])\n    let arr = input.slice(1, N + 1)\n    let points = input.slice(N + 1, M + N + 1)\n\n    const parse = (v) => {\n        let temp = v.split(' ').map(vv => parseInt(vv))\n        return {\n            x: temp[0],\n            y: temp[1]\n        }\n    }\n    arr = arr.map(parse)\n    points = points.map(parse)\n\n\n    let indexArr = []\n    arr.forEach((v, i) => {\n        let minDist = 1000000000\n        let index = 0\n        points.forEach((w, j) => {\n            let dist = Math.abs(v.x - w.x) + Math.abs(v.y - w.y)\n            if(dist < minDist){\n                minDist = dist\n                index = j\n            }\n        })\n        indexArr.push(index)\n    })\n\n    indexArr.forEach(v => console.log(v + 1))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 647, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0].split(\" \")[0]);\n  const M = parseInt(input[0].split(\" \")[1]);\n  let arr = input.slice(1, N + 1);\n  let points = input.slice(N + 1, M + N + 1);\n  const parse = v => {\n    let temp = v.split(\" \").map(vv => parseInt(vv));\n    return {\n      x: temp[0],\n      y: temp[1]\n    };\n  };\n  arr = arr.map(parse);\n  points = points.map(parse);\n  let indexArr = [];\n  arr.forEach((v, i) => {\n    let minDist = 1000000000;\n    let index = 0;\n    points.forEach((w, j) => {\n      let dist = Math.abs(v.x - w.x) + Math.abs(v.y - w.y);\n      if (dist < minDist) {\n        minDist = dist;\n        index = j;\n      }\n    });\n    indexArr.push(index);\n  });\n  indexArr.forEach(v => console.log(v + 1));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5956036473217607, "ngram_match_score": 0.44495410294436544, "weighted_ngram_match_score": 0.46457458030240895, "syntax_match_score": 0.9328859060402684, "dataflow_match_score": 0.54}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03807_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var arr=input[0x1]['split']('\\x20')['map'](Number);var m=0x0;var n=0x0;for(var i=0x0;i<arr['length'];i++){if(arr[i]%0x2==0x0)m++;else n++;}console['log'](n%0x2==0x0&&(n/0x2+m)%0x2==0x0?'YES':'NO');}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n1 2 3", "YES"], ["5\n1 2 3 4 5", "NO"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar arr = input[1].split(\" \").map(Number);\n\tvar m=0;\n\tvar n=0;\n\tfor(var i=0;i<arr.length;i++){\n\t\tif(arr[i]%2==0) m++;\n\t\telse n++;\n\t}\n // console.log(n,m)\n\tconsole.log((n%2==0&&((n/2)+m)%2==0)?\"YES\":\"NO\")\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 648, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var arr = input[1].split(\" \").map(Number);\n  var m = 0;\n  var n = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 0) {\n      m++;\n    } else {\n      n++;\n    }\n  }\n  console.log(n % 2 == 0 && (n / 2 + m) % 2 == 0 ? \"YES\" : \"NO\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6064520615511677, "ngram_match_score": 0.18598061211004613, "weighted_ngram_match_score": 0.486402976560378, "syntax_match_score": 0.7534246575342466, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03853_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']();var tate=parseInt(input['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);for(var i=0x1;i<=tate;i++){console['log'](input['split']('\\x0a')[i]);console['log'](input['split']('\\x0a')[i]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2\n*.\n.*", "*.\n*.\n.*\n.*"], ["1 4\n***.", "***.\n***."], ["9 20\n.....***....***.....\n....*...*..*...*....\n...*.....**.....*...\n...*.....*......*...\n....*.....*....*....\n.....**..*...**.....\n.......*..*.*.......\n........**.*........\n.........**.........", ".....***....***.....\n.....***....***.....\n....*...*..*...*....\n....*...*..*...*....\n...*.....**.....*...\n...*.....**.....*...\n...*.....*......*...\n...*.....*......*...\n....*.....*....*....\n....*.....*....*....\n.....**..*...**.....\n.....**..*...**.....\n.......*..*.*.......\n.......*..*.*.......\n........**.*........\n........**.*........\n.........**.........\n.........**........."]], "original": "function Main(input) {\n\tinput = input.trim();\n  var tate = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  for(var i = 1; i <= tate; i++){\n    console.log(input.split(\"\\n\")[i]);\n    console.log(input.split(\"\\n\")[i]);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 649, "deobfuscated": "function Main(input) {\n  input = input.trim();\n  var tate = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  for (var i = 1; i <= tate; i++) {\n    console.log(input.split(\"\\n\")[i]);\n    console.log(input.split(\"\\n\")[i]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8732491286570574, "ngram_match_score": 0.714022021970798, "weighted_ngram_match_score": 0.7789744926574317, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00010_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['some'](function(i){j=i['split']('\\x20');if(j['length']==0x6)a=j[0x0],b=j[0x1],c=j[0x2],d=j[0x3],e=j[0x4],f=j[0x5],g=a*a,h=b*b,k=c*c,l=d*d,m=e*e,n=f*f,p=((b-f)*(h-l+g-k)-(b-d)*(h-n+g-m))/(0x2*(b-f)*(a-c)-0x2*(b-d)*(a-e)),q=((a-e)*(g-k+h-l)-(a-c)*(g-m+h-n))/(0x2*(a-e)*(b-d)-0x2*(a-c)*(b-f)),console['log'](p['toFixed'](0x3),q['toFixed'](0x3),Math['sqrt']((a-p)*(a-p)+(b-q)*(b-q))['toFixed'](0x3));});", "test_cases": [["1\n0.0 0.0 2.0 0.0 2.0 2.0", "1.000 1.000 1.414"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){j=i.split(' ');if(j.length==6)a=j[0],b=j[1],c=j[2],d=j[3],e=j[4],f=j[5],g=a*a,h=b*b,k=c*c,l=d*d,m=e*e,n=f*f,p=((b-f)*(h-l+g-k)-(b-d)*(h-n+g-m))/(2*(b-f)*(a-c)-2*(b-d)*(a-e)),q=((a-e)*(g-k+h-l)-(a-c)*(g-m+h-n))/(2*(a-e)*(b-d)-2*(a-c)*(b-f)),console.log(p.toFixed(3),q.toFixed(3),Math.sqrt((a-p)*(a-p)+(b-q)*(b-q)).toFixed(3))})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 650, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").some(function (i) {\n  j = i.split(\" \");\n  if (j.length == 6) {\n    a = j[0];\n    b = j[1];\n    c = j[2];\n    d = j[3];\n    e = j[4];\n    f = j[5];\n    g = a * a;\n    h = b * b;\n    k = c * c;\n    l = d * d;\n    m = e * e;\n    n = f * f;\n    p = ((b - f) * (h - l + g - k) - (b - d) * (h - n + g - m)) / ((b - f) * 2 * (a - c) - (b - d) * 2 * (a - e));\n    q = ((a - e) * (g - k + h - l) - (a - c) * (g - m + h - n)) / ((a - e) * 2 * (b - d) - (a - c) * 2 * (b - f));\n    console.log(p.toFixed(3), q.toFixed(3), Math.sqrt((a - p) * (a - p) + (b - q) * (b - q)).toFixed(3));\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4580536912751678, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.8322147651006712, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 3.5, "length_score": -3.5, "increase_maintainability": -0.23473308366911405, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00029_1", "type": "JavaScript", "obfuscated": "process['stdin']['on']('data',function(c,o,m){o={},n=0x0,s='';(c+'')['trim']()['split']('\\x20')['some'](function(a){n<(o[a=a['toLowerCase']()]?++o[a]:o[a]=0x1)&&(n=o[m=a]);s['length']<a['length']&&(s=a);});console['log'](m+'\\x20'+s);})['resume']();", "test_cases": [["Thank you for your mail and your lectures", "your lectures"]], "original": "process.stdin.on(\"data\",function(c,o,m){\n\to={},n=0,s=\"\";\n\t(c+\"\").trim().split(\" \").some(function(a){\n\t\tn<(o[a=a.toLowerCase()]?++o[a]:(o[a]=1))&&(n=o[m=a]);\n\t\ts.length<a.length&&(s=a);\n\t});\n\tconsole.log(m+\" \"+s);\n}).resume();", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 651, "deobfuscated": "process.stdin.on(\"data\", function (c, o, m) {\n  o = {};\n  n = 0;\n  s = \"\";\n  (c + \"\").trim().split(\" \").some(function (a) {\n    if (n < (o[a = a.toLowerCase()] ? ++o[a] : o[a] = 1)) {\n      n = o[m = a];\n    }\n    if (s.length < a.length) {\n      s = a;\n    }\n  });\n  console.log(m + \" \" + s);\n}).resume();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4179417211182628, "ngram_match_score": 0.0038111203719291505, "weighted_ngram_match_score": 0.025098621243978974, "syntax_match_score": 0.6428571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.6666666666666667, "length_score": -0.6666666666666667, "increase_maintainability": -0.07210198723898675, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02384_1", "type": "JavaScript", "obfuscated": "ptrn=[[0x0,0x1,0x2],[0x0,0x2,0x4],[0x0,0x4,0x3],[0x0,0x3,0x1],[0x1,0x5,0x2],[0x1,0x2,0x0],[0x1,0x0,0x3],[0x1,0x3,0x5],[0x2,0x1,0x5],[0x2,0x5,0x4],[0x2,0x4,0x0],[0x2,0x0,0x1]];function dice(num){this['n']=num;this['check']=function(top,front){top=this['n']['indexOf'](top);front=this['n']['indexOf'](front);var flag=!![];if(top>0x2){top=0x5-top;flag=![];}for(let i=0x4*top;i<0xc;i++){if(flag&&ptrn[i][0x1]===front){console['log'](this['n'][ptrn[i][0x2]]);break;}else if(!flag&&ptrn[i][0x2]===front){console['log'](this['n'][ptrn[i][0x1]]);break;}}};}function Main(input){input=input['split']('\\x0a');var dice_a=new dice(input[0x0]['split']('\\x20'));input['slice'](0x2,0x2+Number(input[0x1]))['forEach'](function(d){t=d['split']('\\x20');dice_a['check'](t[0x0],t[0x1]);});}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 2 3 4 5 6\n3\n6 5\n1 3\n3 2", "3\n5\n6"]], "original": "ptrn = [[0, 1, 2], [0, 2, 4], [0, 4, 3], [0, 3, 1],\n        [1, 5, 2], [1, 2, 0], [1, 0, 3], [1, 3, 5],\n        [2, 1, 5], [2, 5, 4], [2, 4, 0], [2, 0, 1]];\nfunction dice(num) {\n  this.n = num;  // array\n  this.check = function(top, front) {\n    top = this.n.indexOf(top);\n    front = this.n.indexOf(front);\n    var flag = true;\n    if(top > 2) {\n      top = 5 - top;\n      flag = false;\n    }\n    for(let i = 4 * top; i < 12; i++) {\n      if(flag && ptrn[i][1] === front) {\n        console.log(this.n[ptrn[i][2]]);\n        break;\n      }else if(!flag && ptrn[i][2] === front) {\n        console.log(this.n[ptrn[i][1]]);\n        break;\n      }\n    }\n  }\n}\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var dice_a = new dice(input[0].split(\" \"));\n  input.slice(2, 2+Number(input[1])).forEach(function(d){\n    t = d.split(\" \");\n    dice_a.check(t[0], t[1]);\n  });\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 652, "deobfuscated": "ptrn = [[0, 1, 2], [0, 2, 4], [0, 4, 3], [0, 3, 1], [1, 5, 2], [1, 2, 0], [1, 0, 3], [1, 3, 5], [2, 1, 5], [2, 5, 4], [2, 4, 0], [2, 0, 1]];\nfunction dice(num) {\n  this.n = num;\n  this.check = function (top, front) {\n    top = this.n.indexOf(top);\n    front = this.n.indexOf(front);\n    var flag = true;\n    if (top > 2) {\n      top = 5 - top;\n      flag = false;\n    }\n    for (let i = top * 4; i < 12; i++) {\n      if (flag && ptrn[i][1] === front) {\n        console.log(this.n[ptrn[i][2]]);\n        break;\n      } else if (!flag && ptrn[i][2] === front) {\n        console.log(this.n[ptrn[i][1]]);\n        break;\n      }\n    }\n  };\n}\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var dice_a = new dice(input[0].split(\" \"));\n  input.slice(2, 2 + Number(input[1])).forEach(function (d) {\n    t = d.split(\" \");\n    dice_a.check(t[0], t[1]);\n  });\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8704766355519539, "ngram_match_score": 0.750161959445275, "weighted_ngram_match_score": 0.799312150330108, "syntax_match_score": 0.9324324324324325, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004634505235323605, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020161290322580627, "new_decrease_halstead_effort": 0.0626480685893045}}
{"filename": "p02385_1", "type": "JavaScript", "obfuscated": "function move(x,arr){var d1=arr[0x0];var d2=arr[0x1];var d3=arr[0x2];var d4=arr[0x3];var d5=arr[0x4];var d6=arr[0x5];var after=[];if(x=='N')after=[d2,d6,d3,d4,d1,d5];if(x=='S')after=[d5,d1,d3,d4,d6,d2];if(x=='E')after=[d4,d2,d1,d6,d5,d3];if(x=='W')after=[d3,d2,d6,d1,d5,d4];return after;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var diceA=Arr[0x0]['split']('\\x20')['map'](Number);var diceB=Arr[0x1]['split']('\\x20')['map'](Number);var NSEW='NSEW'['split']('');for(var i=0x0;i<0x64;i++){var r=Math['floor'](Math['random']()*0x4);diceA=move(NSEW[r],diceA);var flag=diceA['every'](function(v,i){return v==diceB[i];});if(flag)break;}console['log'](flag?'Yes':'No');", "test_cases": [["1 2 3 4 5 6\n6 2 4 3 5 1", "Yes"], ["1 2 3 4 5 6\n6 5 4 3 2 1", "No"]], "original": "function move(x,arr){\nvar d1=arr[0];\nvar d2=arr[1];\nvar d3=arr[2];\nvar d4=arr[3];\nvar d5=arr[4];\nvar d6=arr[5];\nvar after=[];\nif(x==\"N\")after=[d2,d6,d3,d4,d1,d5];\nif(x==\"S\")after=[d5,d1,d3,d4,d6,d2];\nif(x==\"E\")after=[d4,d2,d1,d6,d5,d3];\nif(x==\"W\")after=[d3,d2,d6,d1,d5,d4];\nreturn after;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar diceA=Arr[0].split(\" \").map(Number);\nvar diceB=Arr[1].split(\" \").map(Number);\nvar NSEW=\"NSEW\".split(\"\");\n\nfor(var i=0;i<100;i++){\n   var r = Math.floor(Math.random () * 4) ;\n   diceA=move(NSEW[r],diceA)\n   var flag=diceA.every(function(v,i){return (v==diceB[i]);});\n   if(flag)break;\n}\nconsole.log(flag?\"Yes\":\"No\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 653, "deobfuscated": "function move(x, arr) {\n  var d1 = arr[0];\n  var d2 = arr[1];\n  var d3 = arr[2];\n  var d4 = arr[3];\n  var d5 = arr[4];\n  var d6 = arr[5];\n  var after = [];\n  if (x == \"N\") {\n    after = [d2, d6, d3, d4, d1, d5];\n  }\n  if (x == \"S\") {\n    after = [d5, d1, d3, d4, d6, d2];\n  }\n  if (x == \"E\") {\n    after = [d4, d2, d1, d6, d5, d3];\n  }\n  if (x == \"W\") {\n    after = [d3, d2, d6, d1, d5, d4];\n  }\n  return after;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar diceA = Arr[0].split(\" \").map(Number);\nvar diceB = Arr[1].split(\" \").map(Number);\nvar NSEW = \"NSEW\".split(\"\");\nfor (var i = 0; i < 100; i++) {\n  var r = Math.floor(Math.random() * 4);\n  diceA = move(NSEW[r], diceA);\n  var flag = diceA.every(function (v, i) {\n    return v == diceB[i];\n  });\n  if (flag) {\n    break;\n  }\n}\nconsole.log(flag ? \"Yes\" : \"No\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5129048128165158, "ngram_match_score": 0.04950027499998349, "weighted_ngram_match_score": 0.1618411984883018, "syntax_match_score": 0.8402777777777778, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02695_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');(input=>{const rows=input['split']('\\x0a');const [N,M,Q]=rows[0x0]['split']('\\x20')['map'](Number);const A=[];for(let i=0x0;i<Q;i++){A[i]=rows[i+0x1]['split']('\\x20')['map'](Number);}const ss=[];const s=[];let d=0x0;let v=0x0;while(v!==undefined){if(d===N){ss['push']([...s]);s['pop']();v++;d--;}else if(v>=M){v=s['pop']();d--;}else{s['push'](v+0x1);d++;}}let res=0x0;ss['forEach'](s=>{let sum=0x0;A['forEach'](a=>{if(s[a[0x1]-0x1]-s[a[0x0]-0x1]===a[0x2]){sum+=a[0x3];}});res=Math['max'](res,sum);});console['log'](res);})(input);", "test_cases": [["3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10", "110"], ["4 6 10\n2 4 1 86568\n1 4 0 90629\n2 3 0 90310\n3 4 1 29211\n3 4 3 78537\n3 4 2 8580\n1 2 1 96263\n1 4 2 2156\n1 2 0 94325\n1 4 3 94328", "357500"], ["10 10 1\n1 10 9 1", "1"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n;(input => {\n    const rows = input.split('\\n')\n    const [N, M, Q] = rows[0].split(' ').map(Number)\n    const A = []\n    for (let i = 0; i < Q; i++) {\n        A[i] = rows[i + 1].split(' ').map(Number)\n    }\n\n    const ss = []\n    const s = []\n    let d = 0\n    let v = 0\n    while (v !== undefined) {\n        if (d === N) {\n            ss.push([...s])\n            s.pop()\n            v++\n            d--\n        } else if (v >= M) {\n            v = s.pop()\n            d--\n        } else {\n            s.push(v + 1)\n            d++\n        }\n    }\n\n    let res = 0\n    ss.forEach(s => {\n        let sum = 0\n        A.forEach(a => {\n            if (s[a[1] - 1] - s[a[0] - 1] === a[2]) {\n                sum += a[3]\n            }\n        })\n        res = Math.max(res, sum)\n    })\n\n    console.log(res)\n\n})(input)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 654, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n(input => {\n  const rows = input.split(\"\\n\");\n  const [N, M, Q] = rows[0].split(\" \").map(Number);\n  const A = [];\n  for (let i = 0; i < Q; i++) {\n    A[i] = rows[i + 1].split(\" \").map(Number);\n  }\n  const ss = [];\n  const s = [];\n  let d = 0;\n  let v = 0;\n  while (v !== undefined) {\n    if (d === N) {\n      ss.push([...s]);\n      s.pop();\n      v++;\n      d--;\n    } else if (v >= M) {\n      v = s.pop();\n      d--;\n    } else {\n      s.push(v + 1);\n      d++;\n    }\n  }\n  let res = 0;\n  ss.forEach(s => {\n    let sum = 0;\n    A.forEach(a => {\n      if (s[a[1] - 1] - s[a[0] - 1] === a[2]) {\n        sum += a[3];\n      }\n    });\n    res = Math.max(res, sum);\n  });\n  console.log(res);\n})(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7407526938680653, "ngram_match_score": 0.5732766535218748, "weighted_ngram_match_score": 0.586917220541936, "syntax_match_score": 1.0, "dataflow_match_score": 0.8028169014084507}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02873_1", "type": "JavaScript", "obfuscated": "function Main(input){var S=input['split']('');var Slong=S['length'];var Muki='>';var Out=0x1;var V=[];var Left=0x0;var Right=0x0;var Sum=0x0;for(var i=0x0;i<Slong;i++){if(S[i]==Muki){if(Muki=='>'){Left++;}else{Right++;}Out=0x0;}else{if(Muki=='<'){V['push']({'L':Left,'R':Right});Muki='>';Left=0x0;Right=0x0;Left++;Out=0x1;}else{Muki='<';Right++;Out=0x0;}}}if(Out==0x0){V['push']({'L':Left,'R':Right});}for(var i=0x1;i<V['length'];i++){if(V[i-0x1]['R']<V[i]['L']){V[i-0x1]['R']--;}else{V[i]['L']--;}}for(var i=0x0;i<V['length'];i++){Sum+=V[i]['L']*(V[i]['L']+0x1)/0x2;Sum+=V[i]['R']*(V[i]['R']+0x1)/0x2;}console['log'](Sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["<>>", "3"], ["<>>><<><<<<<>>><", "28"]], "original": "function Main(input) {\n  var S = input.split(\"\");\n  var Slong = S.length\n  var Muki = \">\";\n  var Out = 1;\n  var V = [];\n  var Left = 0;\n  var Right = 0;\n  var Sum = 0;\n  for(var i = 0;i<Slong;i++){\n\n    if(S[i] == Muki){\n      if(Muki == \">\"){\n        Left ++;\n    }else{\n      Right ++;\n    }\n    Out = 0;\n  }else{\n    if(Muki == \"<\"){\n      V.push({L:Left,R:Right})\n      Muki = \">\"\n      Left = 0;\n      Right = 0;\n      Left ++;\n      Out = 1;\n    }else{\n      Muki = \"<\"\n      Right ++;\n      Out = 0;\n    }\n  }\n  }\n  if(Out == 0){\n  V.push({L:Left,R:Right})\n  }\n  \n//console.log(V);\nfor(var i=1;i<V.length;i++){\n  if(V[i-1].R < V[i].L){\n    V[i-1].R --; \n  }else{\n    V[i].L --;\n  }\n}\n//  console.log(V);\nfor(var i=0;i<V.length;i++){\n    Sum += (V[i].L*(V[i].L+1))/2;\n//    console.log((V[i].L*(V[i].L+1))/2);\n    Sum += (V[i].R*(V[i].R+1))/2;\n//    console.log((V[i].R*(V[i].R+1))/2);\n  }\n  console.log(Sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 655, "deobfuscated": "function Main(input) {\n  var S = input.split(\"\");\n  var Slong = S.length;\n  var Muki = \">\";\n  var Out = 1;\n  var V = [];\n  var Left = 0;\n  var Right = 0;\n  var Sum = 0;\n  for (var i = 0; i < Slong; i++) {\n    if (S[i] == Muki) {\n      if (Muki == \">\") {\n        Left++;\n      } else {\n        Right++;\n      }\n      Out = 0;\n    } else if (Muki == \"<\") {\n      V.push({\n        L: Left,\n        R: Right\n      });\n      Muki = \">\";\n      Left = 0;\n      Right = 0;\n      Left++;\n      Out = 1;\n    } else {\n      Muki = \"<\";\n      Right++;\n      Out = 0;\n    }\n  }\n  if (Out == 0) {\n    V.push({\n      L: Left,\n      R: Right\n    });\n  }\n  for (var i = 1; i < V.length; i++) {\n    if (V[i - 1].R < V[i].L) {\n      V[i - 1].R--;\n    } else {\n      V[i].L--;\n    }\n  }\n  for (var i = 0; i < V.length; i++) {\n    Sum += V[i].L * (V[i].L + 1) / 2;\n    Sum += V[i].R * (V[i].R + 1) / 2;\n  }\n  console.log(Sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6573876642955658, "ngram_match_score": 0.29829201180697534, "weighted_ngram_match_score": 0.43714099831646447, "syntax_match_score": 0.8941176470588236, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03401_1", "type": "JavaScript", "obfuscated": "function main(input){var n=input[0x0]-0x0;var list=[0x0]['concat'](input[0x1]['split']('\\x20')['map'](v=>v-0x0),[0x0]);var llist=[];llist[0x0]=0x0;var rlist=[];rlist[n]=0x0;for(var i=0x1;i<=n;i++){llist[i]=llist[i-0x1]+Math['abs'](list[i]-list[i-0x1]);rlist[n-i]=rlist[n-i+0x1]+Math['abs'](list[n-i+0x1]-list[n-i+0x2]);}for(var i=0x1;i<=n;i++){var ans=0x0;ans+=llist[i-0x1];ans+=rlist[i]||0x0;ans+=Math['abs'](list[i-0x1]-list[i+0x1]);console['log'](ans);}}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["3\n3 5 -1", "12\n8\n10"], ["5\n1 1 1 2 0", "4\n4\n4\n2\n4"], ["6\n-679 -2409 -3258 3095 -3291 -4462", "21630\n21630\n19932\n8924\n21630\n19288"]], "original": "function main(input) {\n    var n = input[0]-0;\n    var list = [0].concat(input[1].split(\" \").map(v=>v-0), [0]);\n    var llist = []; llist[0] = 0;\n    var rlist = []; rlist[n] = 0;\n    for(var i=1;i<=n;i++){\n        llist[i] = llist[i-1] + Math.abs(list[i]-list[i-1]);\n        rlist[n-i] = rlist[n-i+1] + Math.abs(list[n-i+1]-list[n-i+2]);\n    }\n    for(var i=1;i<=n;i++){\n        var ans = 0;\n        ans += llist[i-1];\n        ans += rlist[i]||0;\n        ans += Math.abs(list[i-1]-list[i+1]);\n        console.log(ans);\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 656, "deobfuscated": "function main(input) {\n  var n = input[0] - 0;\n  var list = [0].concat(input[1].split(\" \").map(v => v - 0), [0]);\n  var llist = [];\n  llist[0] = 0;\n  var rlist = [];\n  rlist[n] = 0;\n  for (var i = 1; i <= n; i++) {\n    llist[i] = llist[i - 1] + Math.abs(list[i] - list[i - 1]);\n    rlist[n - i] = rlist[n - i + 1] + Math.abs(list[n - i + 1] - list[n - i + 2]);\n  }\n  for (var i = 1; i <= n; i++) {\n    var ans = 0;\n    ans += llist[i - 1];\n    ans += rlist[i] || 0;\n    ans += Math.abs(list[i - 1] - list[i + 1]);\n    console.log(ans);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6869260316204209, "ngram_match_score": 0.2516290629340375, "weighted_ngram_match_score": 0.49607506354764586, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03463_1", "type": "JavaScript", "obfuscated": "'use strict';let input=require('fs')['readFileSync']('/dev/stdin','utf8');let N=input['split']('\\x20')[0x0]*0x1;let A=input['split']('\\x20')[0x1]*0x1;let B=input['split']('\\x20')[0x2]*0x1;let dist=Math['abs'](A-B)%0x2;let ans=dist==0x0?'Alice':'Borys';console['log'](ans);", "test_cases": [["5 2 4", "Alice"], ["2 1 2", "Borys"], ["58 23 42", "Borys"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet N = input.split(' ')[0]*1;\nlet A = input.split(' ')[1]*1;\nlet B = input.split(' ')[2]*1;\nlet dist = Math.abs(A - B)%2;\nlet ans = dist == 0? \"Alice\" : \"Borys\";\nconsole.log(ans);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 657, "deobfuscated": "'use strict';\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet N = input.split(\" \")[0] * 1;\nlet A = input.split(\" \")[1] * 1;\nlet B = input.split(\" \")[2] * 1;\nlet dist = Math.abs(A - B) % 2;\nlet ans = dist == 0 ? \"Alice\" : \"Borys\";\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6895288764078233, "ngram_match_score": 0.39296597210847634, "weighted_ngram_match_score": 0.5040384224117056, "syntax_match_score": 1.0, "dataflow_match_score": 0.8611111111111112}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03476_1", "type": "JavaScript", "obfuscated": "console['log'](function(args){const [[Q],...tmp]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const MAX=0x186a0;const a=Array(MAX)['fill'](!![]);const s=Array(MAX+0x2)['fill'](0x0);a[0x0]=![];s[0x2]=0x1;for(let i=0x1;i<MAX;i++){if(a[i]){const n=0x2*i+0x1;if(~i&0x1&&a[i/0x2])s[i+0x1]+=0x1;for(let j=i+n;j<MAX;j=j+n)a[j]=![];}s[i+0x2]+=s[i+0x1];}const x=[];for(let i=0x0;i<Q;i++){const l=(tmp[i][0x0]-0x1)/0x2;const r=(tmp[i][0x1]-0x1)/0x2+0x1;x['push'](s[r]-s[l]);}return x['join']('\\x0a');}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["1\n3 7", "2"], ["4\n13 13\n7 11\n7 11\n2017 2017", "1\n0\n0\n1"], ["6\n1 53\n13 91\n37 55\n19 51\n73 91\n13 49", "4\n4\n1\n1\n1\n2"]], "original": "console.log(function(args){\n  const [[Q],...tmp] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const MAX = 1e5;\n  const a = Array(MAX).fill(true);\n  const s = Array(MAX+2).fill(0);\n  a[0] = false; s[2] = 1;\n  for ( let i = 1; i < MAX; i++ ) {\n    if ( a[i] ) {\n      const n = 2*i+1;\n      if ( ~i&1 && a[i/2] ) s[i+1] += 1;\n      for ( let j = i+n; j < MAX; j=j+n ) a[j] = false;\n    }\n    s[i+2] += s[i+1];\n  }\n  const x = [];\n  for ( let i = 0; i < Q; i++ ) {\n    const l = ( tmp[i][0] - 1 ) / 2;\n    const r = ( tmp[i][1] - 1 ) / 2 + 1;\n    x.push( s[r] - s[l] );\n  }\n  return x.join('\\n');\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 658, "deobfuscated": "console.log(function (args) {\n  const [[Q], ...tmp] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const MAX = 100000;\n  const a = Array(MAX).fill(true);\n  const s = Array(MAX + 2).fill(0);\n  a[0] = false;\n  s[2] = 1;\n  for (let i = 1; i < MAX; i++) {\n    if (a[i]) {\n      const n = i * 2 + 1;\n      if (~i & 1 && a[i / 2]) {\n        s[i + 1] += 1;\n      }\n      for (let j = i + n; j < MAX; j = j + n) {\n        a[j] = false;\n      }\n    }\n    s[i + 2] += s[i + 1];\n  }\n  const x = [];\n  for (let i = 0; i < Q; i++) {\n    const l = (tmp[i][0] - 1) / 2;\n    const r = (tmp[i][1] - 1) / 2 + 1;\n    x.push(s[r] - s[l]);\n  }\n  return x.join(\"\\n\");\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5991787935140174, "ngram_match_score": 0.30445882925272627, "weighted_ngram_match_score": 0.3564219736949996, "syntax_match_score": 0.8835616438356164, "dataflow_match_score": 0.8522727272727273}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006567452443493771, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03482587064676612, "new_decrease_halstead_effort": 0.13078483465850665}}
{"filename": "p03550_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['split']('\\x0a');const NZW=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x));const N=NZW[0x0];const Z=NZW[0x1];const W=NZW[0x2];const A=lines['shift']()['split']('\\x20')['map'](x=>parseInt(x));const initial=Math['abs'](Z-W);var fetch_n_1=Math['abs'](A[N-0x1]-A[N-0x2]);if(N<0x2){fetch_n_1=0x0;}const fetch_n=Math['abs'](A[N-0x1]-W);const result=Math['max'](initial,fetch_n_1,fetch_n);console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 100 100\n10 1000 100", "900"], ["3 100 1000\n10 100 100", "900"], ["5 1 1\n1 1 1 1 1", "0"], ["1 1 1\n1000000000", "999999999"]], "original": "function main(input){\n  const lines = input.split('\\n');\n  const NZW = lines.shift().split(' ').map(x => parseInt(x));\n  const N = NZW[0];\n  const Z = NZW[1];\n  const W = NZW[2];\n  const A = lines.shift().split(' ').map(x => parseInt(x));\n\n  // 初期を維持、n-1取る、n取る\n\n  const initial = Math.abs(Z-W);\n  var fetch_n_1 = Math.abs(A[N-1] - A[N-2]);\n  if(N<2){fetch_n_1=0}\n  const fetch_n = Math.abs(A[N-1]-W);\n\n  const result = Math.max(initial, fetch_n_1, fetch_n)\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 659, "deobfuscated": "function main(input) {\n  const lines = input.split(\"\\n\");\n  const NZW = lines.shift().split(\" \").map(x => parseInt(x));\n  const N = NZW[0];\n  const Z = NZW[1];\n  const W = NZW[2];\n  const A = lines.shift().split(\" \").map(x => parseInt(x));\n  const initial = Math.abs(Z - W);\n  var fetch_n_1 = Math.abs(A[N - 1] - A[N - 2]);\n  if (N < 2) {\n    fetch_n_1 = 0;\n  }\n  const fetch_n = Math.abs(A[N - 1] - W);\n  const result = Math.max(initial, fetch_n_1, fetch_n);\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6942624108422326, "ngram_match_score": 0.35810402653466983, "weighted_ngram_match_score": 0.4814456168342606, "syntax_match_score": 1.0, "dataflow_match_score": 0.9375}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03696_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=input['trim']()['split']('\\x0a');var tmpInput=JSON['parse'](JSON['stringify'](input[0x1]));var left=0x0;var right=0x0;while(tmpInput['indexOf']('()')!=-0x1){tmpInput=tmpInput['replace']('()','');}for(var i=0x0;i<tmpInput['length'];i++){var tmp=tmpInput['slice'](i,i+0x1);if(tmp=='('){left++;}else if(tmp==')'){right++;}}for(var i=0x0;i<right;i++){input[0x1]='('+input[0x1];}for(var i=0x0;i<left;i++){input[0x1]+=')';}myout(input[0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n())", "(())"], ["6\n)))())", "(((()))())"], ["8\n))))((((", "(((())))(((())))"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\tinput = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var tmpInput = JSON.parse(JSON.stringify(input[1]));\n  var left = 0;\n  var right = 0;\n  while(tmpInput.indexOf(\"()\") != -1){\n  \ttmpInput = tmpInput.replace(\"()\",\"\");\n\t}\n  //myout(tmpInput);\n  for(var i = 0; i < tmpInput.length; i++){\n    var tmp = tmpInput.slice(i, i + 1);\n    if(tmp == \"(\"){\n       left++;\n    }else if(tmp == \")\"){\n       right++;\n    }\n  }\n  for(var i = 0; i < right; i++){\n    input[1] = \"(\" + input[1];\n  }\n  for(var i = 0; i < left; i++){\n    input[1] += \")\";\n  }\n  myout(input[1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 660, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  var tmpInput = JSON.parse(JSON.stringify(input[1]));\n  var left = 0;\n  var right = 0;\n  while (tmpInput.indexOf(\"()\") != -1) {\n    tmpInput = tmpInput.replace(\"()\", \"\");\n  }\n  for (var i = 0; i < tmpInput.length; i++) {\n    var tmp = tmpInput.slice(i, i + 1);\n    if (tmp == \"(\") {\n      left++;\n    } else if (tmp == \")\") {\n      right++;\n    }\n  }\n  for (var i = 0; i < right; i++) {\n    input[1] = \"(\" + input[1];\n  }\n  for (var i = 0; i < left; i++) {\n    input[1] += \")\";\n  }\n  myout(input[1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.732955492338538, "ngram_match_score": 0.45857125982100794, "weighted_ngram_match_score": 0.47325070953314363, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03861_1", "type": "JavaScript", "obfuscated": "const padLeft=(w,l,c)=>([...Array(l)]['map'](_=>c)['join']('')+w)['slice'](l*-0x1);const split=(w,n)=>(ws=>ws['reduce']((acc,_,i)=>i%n?acc:[...acc,ws['slice'](i,i+n)['join']('')],[]))([...w]);const arrange=n=>(x=>x[0x0]?[x[0x0]-0x1,x[0x1]+0x2540be400]:x)(split(padLeft(n,0x14,'0'),0xa)['map'](x=>+x));const solve0=(a,b,x)=>Math['floor'](b/x)-Math['floor'](a/x);const solve1=(a,b,x)=>Math['floor'](b/x)-(a==0x0?-0x1:Math['floor']((a-0x1)/x));const nullOrStr=n=>n?String(n):'';const fn2=(a2,b2,x)=>''+nullOrStr(solve0(+a2[0x0],b2[0x0],x))+solve1(a2[0x1],b2[0x1],x);const fn1=(a,b,x)=>fn2(arrange(a),arrange(b),x);const main=input=>fn1(...input['split']('\\x20'));console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4 8 2", "3"], ["0 5 1", "6"], ["9 9 2", "0"], ["1 1000000000000000000 3", "333333333333333333"]], "original": "const padLeft = (w, l, c) => ([...Array(l)].map(_ => c).join('') + w).slice(l * -1);\nconst split = (w, n) => (ws => ws.reduce((acc, _, i) => i % n ? acc : [...acc, ws.slice(i, i + n).join('')], []))([...w]);\nconst arrange = n => (x => x[0] ? [x[0] - 1, x[1] + 10000000000] : x)(split(padLeft(n, 20, '0'), 10).map(x => +x));\n\nconst solve0 = (a, b, x) => Math.floor(b / x) -  Math.floor(a / x);\nconst solve1 = (a, b, x) => Math.floor(b / x) - (a == 0 ? -1 : Math.floor((a - 1) / x));\n\nconst nullOrStr = n => n ? String(n) : '';\n\nconst fn2 = (a2, b2, x) => `${nullOrStr(solve0(+a2[0], b2[0], x))}${solve1(a2[1], b2[1], x)}`;\nconst fn1 = (a, b, x) => fn2(arrange(a), arrange(b), x);\n\nconst main = input => (fn1)(...input.split(' '));\n\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 661, "deobfuscated": "const padLeft = (w, l, c) => ([...Array(l)].map(_ => c).join(\"\") + w).slice(l * -1);\nconst split = (w, n) => (ws => ws.reduce((acc, _, i) => i % n ? acc : [...acc, ws.slice(i, i + n).join(\"\")], []))([...w]);\nconst arrange = n => (x => x[0] ? [x[0] - 1, x[1] + 10000000000] : x)(split(padLeft(n, 20, \"0\"), 10).map(x => +x));\nconst solve0 = (a, b, x) => Math.floor(b / x) - Math.floor(a / x);\nconst solve1 = (a, b, x) => Math.floor(b / x) - (a == 0 ? -1 : Math.floor((a - 1) / x));\nconst nullOrStr = n => n ? String(n) : \"\";\nconst fn2 = (a2, b2, x) => \"\" + nullOrStr(solve0(+a2[0], b2[0], x)) + solve1(a2[1], b2[1], x);\nconst fn1 = (a, b, x) => fn2(arrange(a), arrange(b), x);\nconst main = input => fn1(...input.split(\" \"));\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9003470349243106, "ngram_match_score": 0.8262925771013437, "weighted_ngram_match_score": 0.8545241340244698, "syntax_match_score": 0.9285714285714286, "dataflow_match_score": 0.992}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03993_1", "type": "JavaScript", "obfuscated": "var lines=[];var result=0x0;var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){lines['push'](x);});rl['on']('close',function(){var N=Number(lines[0x0]);var a=lines[0x1]['split']('\\x20')['map'](value=>Number(value));for(var i=0x0;i<N;i++){if(i<a[i]){if(a[a[i]-0x1]===i+0x1){result++;}}}console['log'](result);});", "test_cases": [["4\n2 1 4 3", "2"], ["3\n2 3 1", "0"], ["5\n5 5 5 5 1", "1"]], "original": "var lines = []; var result = 0;\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var a = lines[1].split(\" \").map(value => Number(value));\n\n    for (var i = 0; i < N; i++) {\n        if (i < a[i]) {\n            if (a[a[i] - 1] === i + 1) { result++; }\n        }\n    }\n    console.log(result);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 662, "deobfuscated": "var lines = [];\nvar result = 0;\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  lines.push(x);\n});\nrl.on(\"close\", function () {\n  var N = Number(lines[0]);\n  var a = lines[1].split(\" \").map(value => Number(value));\n  for (var i = 0; i < N; i++) {\n    if (i < a[i]) {\n      if (a[a[i] - 1] === i + 1) {\n        result++;\n      }\n    }\n  }\n  console.log(result);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9343113264655871, "ngram_match_score": 0.8662266617882527, "weighted_ngram_match_score": 0.8710186440740958, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00020_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');console['log'](input['trim']()['toUpperCase']());", "test_cases": [["this is a pen.", "THIS IS A PEN."]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconsole.log(input.trim().toUpperCase());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 663, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconsole.log(input.trim().toUpperCase());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6110905985260942, "ngram_match_score": 0.21711852081087685, "weighted_ngram_match_score": 0.22724387329349988, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00046_1", "type": "JavaScript", "obfuscated": "i=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/\\n/)['sort'](function(a,b){return a-b;}),console['log'](i[i['length']-0x1]-i[0x0]);", "test_cases": [["3776.0\n1819.0\n645.2\n2004.1\n1208.6", "3130.8"]], "original": "i=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split(/\\n/).sort(function(a,b){return a-b}),console.log(i[i.length-1]-i[0])", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 664, "deobfuscated": "i = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n/).sort(function (a, b) {\n  return a - b;\n});\nconsole.log(i[i.length - 1] - i[0]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47857142857142854, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.9142857142857143, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.5, "length_score": -0.5, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02383_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');const reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});const lines=[];reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{let [top,back,right,left,front,bottom]=lines[0x0]['split']('\\x20')['map'](Number);const rs=lines[0x1];for(let i=0x0;i<rs['length'];i++){switch(rs[i]){case'N':[top,front,bottom,back]=[back,top,front,bottom];break;case'S':[top,front,bottom,back]=[front,bottom,back,top];break;case'W':[top,left,bottom,right]=[right,top,left,bottom];break;case'E':[top,left,bottom,right]=[left,bottom,right,top];break;}}console['log'](top);});", "test_cases": [["1 2 4 8 16 32\nSE", "8"], ["1 2 4 8 16 32\nEESWN", "32"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\n\nconst reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst lines = [];\n\nreader.on(\"line\", (line) => {\n  lines.push(line);\n});\n\nreader.on(\"close\", () => {\n  let [top, back, right, left, front, bottom] = lines[0].split(\" \").map(Number);\n  const rs = lines[1];\n  for (let i = 0; i < rs.length; i++) {\n    switch (rs[i]) {\n      case \"N\":\n        [top, front, bottom, back] = [back, top, front, bottom];\n        break;\n      case \"S\":\n        [top, front, bottom, back] = [front, bottom, back, top];\n        break;\n      case \"W\":\n        [top, left, bottom, right] = [right, top, left, bottom];\n        break;\n      case \"E\":\n        [top, left, bottom, right] = [left, bottom, right, top];\n        break;\n    }\n  }\n  console.log(top);\n});\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 665, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nconst reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nconst lines = [];\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  let [top, back, right, left, front, bottom] = lines[0].split(\" \").map(Number);\n  const rs = lines[1];\n  for (let i = 0; i < rs.length; i++) {\n    switch (rs[i]) {\n      case \"N\":\n        [top, front, bottom, back] = [back, top, front, bottom];\n        break;\n      case \"S\":\n        [top, front, bottom, back] = [front, bottom, back, top];\n        break;\n      case \"W\":\n        [top, left, bottom, right] = [right, top, left, bottom];\n        break;\n      case \"E\":\n        [top, left, bottom, right] = [left, bottom, right, top];\n        break;\n    }\n  }\n  console.log(top);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9615284538228328, "ngram_match_score": 0.9507128404814459, "weighted_ngram_match_score": 0.9520047483947913, "syntax_match_score": 0.9433962264150944, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02651_1", "type": "JavaScript", "obfuscated": "function Main(input){let t=input['split']('\\x0a')[0x0],n,a=new Array(n),s=new Array(n),x=0x0;for(let i=0x0;i<t;i++){n=input['split']('\\x0a')[i*0x3+0x1];a=input['split']('\\x0a')[i*0x3+0x2]['split']('\\x20');s=input['split']('\\x0a')[i*0x3+0x3]['split']('');let tmp;for(let j=0x0;j<n;j++){tmp=x^a[j];if(s[j]==0x0){if(tmp==0x0)x=tmp;}else x=tmp;}if(x==0x0){console['log'](0x0);}else console['log'](0x1);x=0x0;}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n2\n1 2\n10\n2\n1 1\n10\n6\n2 3 4 5 6 7\n111000", "1\n0\n0"]], "original": "function Main(input) {\n  let t = input.split(\"\\n\")[0], n , a = new Array(n), s = new Array(n), x = 0;\n  \n  for (let i = 0; i < t; i++) {\n    n = input.split(\"\\n\")[i*3+1];\n    a = input.split(\"\\n\")[i*3+2].split(\" \");\n    s = input.split(\"\\n\")[i*3+3].split(\"\");\n\n    let tmp;\n\n    for (let j = 0; j < n; j++) {\n      tmp = x ^ a[j];\n      \n      if (s[j] == 0) {\n        if (tmp == 0) x = tmp;\n      } else x = tmp;      \n    }\n    \n    if (x == 0) {\n      console.log(0)\n    } else console.log(1);\n    \n    x = 0;\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 666, "deobfuscated": "function Main(input) {\n  let t = input.split(\"\\n\")[0];\n  let n;\n  let a = new Array(n);\n  let s = new Array(n);\n  let x = 0;\n  for (let i = 0; i < t; i++) {\n    n = input.split(\"\\n\")[i * 3 + 1];\n    a = input.split(\"\\n\")[i * 3 + 2].split(\" \");\n    s = input.split(\"\\n\")[i * 3 + 3].split(\"\");\n    let tmp;\n    for (let j = 0; j < n; j++) {\n      tmp = x ^ a[j];\n      if (s[j] == 0) {\n        if (tmp == 0) {\n          x = tmp;\n        }\n      } else {\n        x = tmp;\n      }\n    }\n    if (x == 0) {\n      console.log(0);\n    } else {\n      console.log(1);\n    }\n    x = 0;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7872782579063753, "ngram_match_score": 0.5667363976825207, "weighted_ngram_match_score": 0.7062704392527147, "syntax_match_score": 0.8761061946902655, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0011580245184839022, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.027027027027026973, "new_decrease_halstead_effort": -0.027027027027027195}}
{"filename": "p02865_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var lines=[];var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const N=+lines[0x0];console['log'](N%0x2?(N-0x1)/0x2:N/0x2-0x1);});", "test_cases": [["4", "1"], ["999999", "499999"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const N = +lines[0];\n\tconsole.log(N%2?(N-1)/2:N/2-1);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 667, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar lines = [];\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", line => {\n  lines.push(line);\n});\nreader.on(\"close\", () => {\n  const N = +lines[0];\n  console.log(N % 2 ? (N - 1) / 2 : N / 2 - 1);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7057288282681666, "ngram_match_score": 0.3847677417434837, "weighted_ngram_match_score": 0.576863927436843, "syntax_match_score": 0.9047619047619048, "dataflow_match_score": 0.9565217391304348}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03246_1", "type": "JavaScript", "obfuscated": "line=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');n=parseInt(line[0x0]);v=line[0x1]['split']('\\x20');var odds={};var even={};for(var i=0x0;i<v['length'];i++){di=i&0x1?even:odds;di[v[i]]=!di[v[i]]?0x1:di[v[i]]+0x1;}var a=[];var b=[];for(var k in odds)a['push']({'v':k,'n':odds[k]});for(var k in even)b['push']({'v':k,'n':even[k]});a['sort']((x,y)=>y['n']-x['n']);b['sort']((x,y)=>y['n']-x['n']);va=a[0x0];vb=b[0x0];if(va['v']===vb['v']){if(va['n']>vb['n'])vb=!b[0x1]?{'n':0x0}:b[0x1];else va=!a[0x1]?{'n':0x0}:a[0x1];}log=console['log'];log(n/0x2-va['n']+n/0x2-vb['n']);", "test_cases": [["4\n3 1 3 2", "1"], ["6\n105 119 105 119 105 119", "0"], ["4\n1 1 1 1", "2"]], "original": "line = require('fs')\n  .readFileSync('/dev/stdin', 'utf8')\n  .split('\\n')\n\nn = parseInt(line[0])\nv = line[1].split(' ')\n\nvar odds = {}\nvar even = {}\nfor (var i = 0; i < v.length; i++) {\n  di = i & 1 ? even : odds\n  di[v[i]] = !di[v[i]] ? 1 : di[v[i]] + 1\n}\n\nvar a = []\nvar b = []\nfor (var k in odds) a.push({ v: k, n: odds[k] })\nfor (var k in even) b.push({ v: k, n: even[k] })\n\na.sort((x, y) => y.n - x.n)\nb.sort((x, y) => y.n - x.n)\n\nva = a[0]\nvb = b[0]\nif (va.v === vb.v) {\n  if (va.n > vb.n) vb = !b[1] ? { n: 0 } : b[1]\n  else va = !a[1] ? { n: 0 } : a[1]\n}\n\nlog = console.log\n// log('n', n)\n// log('v', v)\n// log('sorted', a, b)\n// log('select', va, vb)\nlog(n / 2 - va.n + n / 2 - vb.n)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 668, "deobfuscated": "line = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nn = parseInt(line[0]);\nv = line[1].split(\" \");\nvar odds = {};\nvar even = {};\nfor (var i = 0; i < v.length; i++) {\n  di = i & 1 ? even : odds;\n  di[v[i]] = !di[v[i]] ? 1 : di[v[i]] + 1;\n}\nvar a = [];\nvar b = [];\nfor (var k in odds) {\n  a.push({\n    v: k,\n    n: odds[k]\n  });\n}\nfor (var k in even) {\n  b.push({\n    v: k,\n    n: even[k]\n  });\n}\na.sort((x, y) => y.n - x.n);\nb.sort((x, y) => y.n - x.n);\nva = a[0];\nvb = b[0];\nif (va.v === vb.v) {\n  if (va.n > vb.n) {\n    vb = !b[1] ? {\n      n: 0\n    } : b[1];\n  } else {\n    va = !a[1] ? {\n      n: 0\n    } : a[1];\n  }\n}\nlog = console.log;\nlog(n / 2 - va.n + n / 2 - vb.n);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.761441973063059, "ngram_match_score": 0.5420173533116264, "weighted_ngram_match_score": 0.5520264010095753, "syntax_match_score": 0.9517241379310345, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0036012665438970304, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.08423802790635437}}
{"filename": "p03271_1", "type": "JavaScript", "obfuscated": "var p=require('fs')['readFileSync']('/dev/stdin','utf8');p=p['split']('\\x0a')['map'](a=>+a);console['log'](main());function main(){var N='No';var n=p[0x0];var t=0x0;for(i=0x1;i<=n;i++){while(t>i){if(p[i]!==i)return N;i++;}var j=i;while(p[j]!==i){j++;if(p[j]!==j)return N;j++;}t=j;while(j>i){if(p[j-0x2]<p[j-0x1])return N;p[j]=p[j-0x2];j-=0x2;}}return'Yes';}", "test_cases": [["5\n5\n2\n1\n4\n3", "Yes"], ["4\n3\n2\n4\n1", "No"], ["7\n3\n2\n1\n6\n5\n4\n7", "Yes"], ["6\n5\n3\n4\n1\n2\n6", "No"]], "original": "var p=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\np = p.split(\"\\n\").map(a=>+a);\nconsole.log(main());\nfunction main(){\n  var N = \"No\";\n  var n = p[0];\n  var t = 0;\n  for(i = 1; i <= n; i++){\n    while(t > i){if(p[i] !== i)return N;i++;}\n    var j = i;\n    while(p[j] !== i){\n      j++;\n      if(p[j] !== j)return N;\n      j++;\n    }\n    t = j;\n    while(j > i){\n      if(p[j-2] < p[j-1])return N;\n      p[j] = p[j-2]; j -= 2;\n    }\n  }\n  return \"Yes\";\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 669, "deobfuscated": "var p = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\np = p.split(\"\\n\").map(a => +a);\nconsole.log(main());\nfunction main() {\n  var N = \"No\";\n  var n = p[0];\n  var t = 0;\n  for (i = 1; i <= n; i++) {\n    while (t > i) {\n      if (p[i] !== i) {\n        return N;\n      }\n      i++;\n    }\n    var j = i;\n    while (p[j] !== i) {\n      j++;\n      if (p[j] !== j) {\n        return N;\n      }\n      j++;\n    }\n    t = j;\n    while (j > i) {\n      if (p[j - 2] < p[j - 1]) {\n        return N;\n      }\n      p[j] = p[j - 2];\n      j -= 2;\n    }\n  }\n  return \"Yes\";\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6481972102905398, "ngram_match_score": 0.2879595682707605, "weighted_ngram_match_score": 0.4506626062247321, "syntax_match_score": 0.8541666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03311_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;var array=input[0x1]['split']('\\x20')['map']((e,i)=>{return e-i-0x1;})['sort']((a,b)=>{return a-b;});console['log'](array['reduce']((acc,cur)=>{return acc+Math['abs'](cur-array[Math['floor'](array['length']/0x2)]);},0x0));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function permutation(n,k){var ret=[[]];var next;for(var i=0x0;i<k;i++){next=[];ret['forEach'](e=>{for(var k=0x1;k<=n;k++){if(!e['includes'](k)){next['push'](e['concat']([k]));}}});ret=next['concat']([]);}return ret;}", "test_cases": [["5\n2 2 3 5 5", "2"], ["9\n1 2 3 4 5 6 7 8 9", "0"], ["6\n6 5 4 3 2 1", "18"], ["7\n1 1 1 1 2 3 4", "6"]], "original": "\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  var array=input[1].split(' ').map((e,i)=>{\n    return e-i-1;\n  }).sort((a,b)=>{\n    return a-b;\n  });\n  console.log(array.reduce((acc,cur)=>{\n    return acc+Math.abs(cur-array[Math.floor(array.length/2)]);\n  },0));\n\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction permutation(n,k){\n    var ret=[[]];\n    var next;\n    for(var i=0;i<k;i++){\n        next=[];\n        ret.forEach(e=>{\n            for(var k=1;k<=n;k++){\n                if(!e.includes(k)){\n                    next.push(e.concat([k]));\n                }\n            }\n        });\n        ret=next.concat([]);\n    }\n    return ret;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 670, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  var array = input[1].split(\" \").map((e, i) => {\n    return e - i - 1;\n  }).sort((a, b) => {\n    return a - b;\n  });\n  console.log(array.reduce((acc, cur) => {\n    return acc + Math.abs(cur - array[Math.floor(array.length / 2)]);\n  }, 0));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction permutation(n, k) {\n  var ret = [[]];\n  var next;\n  for (var i = 0; i < k; i++) {\n    next = [];\n    ret.forEach(e => {\n      for (var k = 1; k <= n; k++) {\n        if (!e.includes(k)) {\n          next.push(e.concat([k]));\n        }\n      }\n    });\n    ret = next.concat([]);\n  }\n  return ret;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5584288231913819, "ngram_match_score": 0.07506217387360642, "weighted_ngram_match_score": 0.18990311889192105, "syntax_match_score": 1.0, "dataflow_match_score": 0.96875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03380_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var a=s[0x1]['split']('\\x20')['map'](a=>+a);const n=+s[0x0];var m=Math['max'](...a);var b=[...a]['sort']((a,b)=>a-b);var c=0x218711a00;for(var i=0x0;i<n-0x1;i++){if(Math['abs'](m/0x2-b[i])<c)c=Math['abs'](m/0x2-b[i]);else break;}console['log']('%d\\x20%d',m,b[i-0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n6 9 4 2 11", "11 6"], ["2\n100 0", "100 0"]], "original": "function Main(s) {\n  s = s.split(\"\\n\");\n  var a = s[1].split(\" \").map(a => +a);\n  const n = +s[0];\n  var m = Math.max(...a);\n  var b = [...a].sort((a,b)=> a-b);\n  var c = 9e9;\n  for(var i = 0; i < n - 1; i++){\n    if(Math.abs(m / 2 - b[i]) < c)c = Math.abs(m / 2 - b[i]);\n    else break;\n  }\n  console.log(\"%d %d\", m, b[i-1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 671, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var a = s[1].split(\" \").map(a => +a);\n  const n = +s[0];\n  var m = Math.max(...a);\n  var b = [...a].sort((a, b) => a - b);\n  var c = 9000000000;\n  for (var i = 0; i < n - 1; i++) {\n    if (Math.abs(m / 2 - b[i]) < c) {\n      c = Math.abs(m / 2 - b[i]);\n    } else {\n      break;\n    }\n  }\n  console.log(\"%d %d\", m, b[i - 1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7897628273727794, "ngram_match_score": 0.5466459872449387, "weighted_ngram_match_score": 0.6910570076394371, "syntax_match_score": 0.9213483146067416, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03438_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]);a=new Array(n)['fill'](0x0);b=new Array(n)['fill'](0x0);tmpa=input[0x1]['split']('\\x20');tmpb=input[0x2]['split']('\\x20');var suma=0x0;var sumb=0x0;var dif=0x0;for(i=0x0;i<n;i++){a[i]=parseInt(tmpa[i]);suma+=a[i];b[i]=parseInt(tmpb[i]);sumb+=b[i];dif+=Math['abs'](a[i]-b[i]);}var ans='No';if(suma<=sumb&&dif<=(sumb-suma)*0x3){ans='Yes';}console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2 3\n5 2 2", "Yes"], ["5\n3 1 4 1 5\n2 7 1 8 2", "No"], ["5\n2 7 1 8 2\n3 1 4 1 5", "No"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n).fill(0);\n  b = new Array(n).fill(0);\n  tmpa = input[1].split(\" \");\n  tmpb = input[2].split(\" \");\n  var suma=0;\n  var sumb=0;\n  var dif=0;\n\n  for(i=0;i<n;i++){\n    a[i]=parseInt(tmpa[i]);\n    suma += a[i];\n    b[i]=parseInt(tmpb[i]);\n    sumb += b[i];\n    dif+=Math.abs(a[i]-b[i]);\n  }\n  var ans =\"No\";\n  if(suma<=sumb&&dif<=(sumb-suma)*3){\n    ans=\"Yes\";\n  }\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 672, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n).fill(0);\n  b = new Array(n).fill(0);\n  tmpa = input[1].split(\" \");\n  tmpb = input[2].split(\" \");\n  var suma = 0;\n  var sumb = 0;\n  var dif = 0;\n  for (i = 0; i < n; i++) {\n    a[i] = parseInt(tmpa[i]);\n    suma += a[i];\n    b[i] = parseInt(tmpb[i]);\n    sumb += b[i];\n    dif += Math.abs(a[i] - b[i]);\n  }\n  var ans = \"No\";\n  if (suma <= sumb && dif <= (sumb - suma) * 3) {\n    ans = \"Yes\";\n  }\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.74987262160974, "ngram_match_score": 0.36421706948981364, "weighted_ngram_match_score": 0.6352734169491463, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03559_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var N=parseInt(input[0x0][0x0],0xa);var vec_A=input[0x1]['map'](e=>parseInt(e,0xa));var vec_B=input[0x2]['map'](e=>parseInt(e,0xa));var vec_C=input[0x3]['map'](e=>parseInt(e,0xa));function compareFunc(a,b){return b-a;}vec_A['sort'](compareFunc);vec_B['sort'](compareFunc);vec_C['sort'](compareFunc);var s=0x0;var t=-0x1;var vec_sumB=Array['from']({'length':N},()=>0x0);var tmpAdj=0x0;var ans=0x0;for(var i=0x0;i<N;i++){while(s<N&&vec_B[s]>vec_A[i]){while(t<N-0x1&&vec_C[t+0x1]>vec_B[s]){t++;}if(s>0x0)tmpAdj=vec_sumB[s-0x1];else tmpAdj=0x0;vec_sumB[s]=tmpAdj+t+0x1;s++;}s=Math['max'](0x0,s-0x1);ans+=vec_sumB[s];}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 5\n2 4\n3 6", "3"], ["3\n1 1 1\n2 2 2\n3 3 3", "27"], ["6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288", "87"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar N = parseInt(input[0][0], 10);\n\tvar vec_A = input[1].map(e => parseInt(e, 10));\n\tvar vec_B = input[2].map(e => parseInt(e, 10));\n\tvar vec_C = input[3].map(e => parseInt(e, 10));\n\tfunction compareFunc(a, b) {\n\t\treturn b - a;\n\t}\n\tvec_A.sort(compareFunc);\n\tvec_B.sort(compareFunc);\n\tvec_C.sort(compareFunc);\n\n\tvar s = 0;\n\tvar t = -1;\n\tvar vec_sumB = Array.from({length: N}, () => 0);\n\tvar tmpAdj = 0;  \n\tvar ans = 0;\n\tfor (var i = 0; i < N; i++){\n\t\twhile (s < N && vec_B[s] > vec_A[i]){\n\t\t\twhile (t < (N - 1) && vec_C[t + 1] > vec_B[s]){\n\t\t\t\tt ++;\n\t\t\t}\n\t\t\tif (s > 0) tmpAdj = vec_sumB[s - 1];\n\t\t\telse tmpAdj = 0;\n\t\t\tvec_sumB[s] = tmpAdj + t + 1;\n\t\t\ts ++;        \n\t\t}\n\t\ts = Math.max(0, s - 1);\n\t\tans += vec_sumB[s];\n\t}\t\n\tconsole.log(ans);\n}\n  \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 673, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var N = parseInt(input[0][0], 10);\n  var vec_A = input[1].map(e => parseInt(e, 10));\n  var vec_B = input[2].map(e => parseInt(e, 10));\n  var vec_C = input[3].map(e => parseInt(e, 10));\n  function compareFunc(a, b) {\n    return b - a;\n  }\n  vec_A.sort(compareFunc);\n  vec_B.sort(compareFunc);\n  vec_C.sort(compareFunc);\n  var s = 0;\n  var t = -1;\n  var vec_sumB = Array.from({\n    length: N\n  }, () => 0);\n  var tmpAdj = 0;\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    while (s < N && vec_B[s] > vec_A[i]) {\n      while (t < N - 1 && vec_C[t + 1] > vec_B[s]) {\n        t++;\n      }\n      if (s > 0) {\n        tmpAdj = vec_sumB[s - 1];\n      } else {\n        tmpAdj = 0;\n      }\n      vec_sumB[s] = tmpAdj + t + 1;\n      s++;\n    }\n    s = Math.max(0, s - 1);\n    ans += vec_sumB[s];\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8553724590430619, "ngram_match_score": 0.7244780487486527, "weighted_ngram_match_score": 0.7777571290385019, "syntax_match_score": 0.9192546583850931, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03723_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var tm=+new Date()+0x384;var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var [a,b,c]=nexts(0x3);var cnt=0x0;while(new Date()<tm){if(a%0x2||b%0x2||c%0x2)return cnt;var a2=b+c>>0x1,b2=a+c>>0x1,c2=a+b>>0x1;a=a2,b=b2,c=c2;cnt++;}return-0x1;}", "test_cases": [["4 12 20", "3"], ["14 14 14", "-1"], ["454 414 444", "1"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar tm = +(new Date()) + 900;\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var [a,b,c] = nexts(3);\n  var cnt = 0;\n  while(new Date() < tm){\n    if(a % 2 || b % 2 || c % 2)return cnt;\n    var a2 = b+c >> 1, b2 = a+c >> 1, c2 = a+b >> 1;\n    a = a2, b = b2, c = c2;\n    cnt++;\n  }\n  return -1;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 674, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar tm = +new Date() + 900;\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var [a, b, c] = nexts(3);\n  var cnt = 0;\n  while (new Date() < tm) {\n    if (a % 2 || b % 2 || c % 2) {\n      return cnt;\n    }\n    var a2 = b + c >> 1;\n    var b2 = a + c >> 1;\n    var c2 = a + b >> 1;\n    a = a2;\n    b = b2;\n    c = c2;\n    cnt++;\n  }\n  return -1;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.578537309099301, "ngram_match_score": 0.1321988267821567, "weighted_ngram_match_score": 0.34092476858940646, "syntax_match_score": 0.841025641025641, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.11111111111111116, "length_score": -0.11111111111111116, "increase_maintainability": -0.021608747474747836, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03053435114503822, "new_decrease_halstead_effort": 0.015196380312765267}}
{"filename": "p03731_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a');var input0=input[0x0]['split']('\\x20');var N=parseInt(input0[0x0]);var T=parseInt(input0[0x1]);var t=input[0x1]['split']('\\x20');for(var i=0x0;i<N;i++){t[i]=parseInt(t[i]);}var count=0x0;var t_i;for(var i=0x1;i<N;i++){t_i=t[i]-t[i-0x1];if(t_i<T){count+=t_i;}else{count+=T;}}console['log'](count+T);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 4\n0 3", "7"], ["2 4\n0 5", "8"], ["4 1000000000\n0 1000 1000000 1000000000", "2000000000"], ["1 1\n0", "1"], ["9 10\n0 3 5 7 100 110 200 300 311", "67"]], "original": "\"use strict\";\n\n// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var input0 = input[0].split(\" \");\n  var N = parseInt(input0[0]);\n  var T = parseInt(input0[1]);\n  var t = input[1].split(\" \");\n  for (var i=0; i<N; i++) {\n    t[i] = parseInt(t[i]);\n  }\n  \n  var count = 0;\n  var t_i;\n  for (var i=1; i<N; i++) {\n    t_i = t[i]-t[i-1];\n    if (t_i<T) {\n      count += t_i;\n    } else {\n      count += T;\n    }\n  }\n  \n  console.log (count+T);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 675, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var input0 = input[0].split(\" \");\n  var N = parseInt(input0[0]);\n  var T = parseInt(input0[1]);\n  var t = input[1].split(\" \");\n  for (var i = 0; i < N; i++) {\n    t[i] = parseInt(t[i]);\n  }\n  var count = 0;\n  var t_i;\n  for (var i = 1; i < N; i++) {\n    t_i = t[i] - t[i - 1];\n    if (t_i < T) {\n      count += t_i;\n    } else {\n      count += T;\n    }\n  }\n  console.log(count + T);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8339707041662313, "ngram_match_score": 0.6097231986848526, "weighted_ngram_match_score": 0.7261596179800726, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03761_1", "type": "JavaScript", "obfuscated": "function main(input){var n=input[0x0]-0x0;var lists=[];var ansmap={};for(var i=0x1;i<=n;i++){var str=input[i];var map={};for(var j=0x0;j<str['length'];j++){map[str[j]]=map[str[j]]?map[str[j]]+0x1:0x1;ansmap[str[j]]=0x3c;}lists['push'](map);}var keys=Object['keys'](ansmap)['sort']((a,b)=>a>b?0x1:-0x1);for(var i=0x0;i<n;i++){var list=lists[i];for(var j=0x0;j<keys['length'];j++){ansmap[keys[j]]=Math['min'](ansmap[keys[j]],list[keys[j]]||0x0);}}var ans='';keys['forEach'](key=>{for(var i=0x0;i<ansmap[key];i++)ans+=key;});console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["3\ncbaa\ndaacc\nacacac", "aac"], ["3\na\naa\nb", ""]], "original": "function main(input) {\n    var n = input[0]-0;\n    var lists = [];\n    var ansmap = {};\n    for(var i=1;i<=n;i++){\n        var str = input[i];\n        var map = {};\n        for(var j=0;j<str.length;j++){\n            map[str[j]] = map[str[j]]?map[str[j]]+1:1;\n            ansmap[str[j]] = 60;\n        }\n        lists.push(map);\n    }\n    var keys = Object.keys(ansmap).sort((a,b)=>a>b?1:-1);\n    for(var i=0;i<n;i++){\n        var list = lists[i];\n        for(var j=0;j<keys.length;j++){\n            ansmap[keys[j]] = Math.min(ansmap[keys[j]], list[keys[j]]||0);\n        }\n    }\n    var ans = \"\";\n    keys.forEach(key=>{\n        for(var i=0;i<ansmap[key];i++) ans += key;\n    })\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 676, "deobfuscated": "function main(input) {\n  var n = input[0] - 0;\n  var lists = [];\n  var ansmap = {};\n  for (var i = 1; i <= n; i++) {\n    var str = input[i];\n    var map = {};\n    for (var j = 0; j < str.length; j++) {\n      map[str[j]] = map[str[j]] ? map[str[j]] + 1 : 1;\n      ansmap[str[j]] = 60;\n    }\n    lists.push(map);\n  }\n  var keys = Object.keys(ansmap).sort((a, b) => a > b ? 1 : -1);\n  for (var i = 0; i < n; i++) {\n    var list = lists[i];\n    for (var j = 0; j < keys.length; j++) {\n      ansmap[keys[j]] = Math.min(ansmap[keys[j]], list[keys[j]] || 0);\n    }\n  }\n  var ans = \"\";\n  keys.forEach(key => {\n    for (var i = 0; i < ansmap[key]; i++) {\n      ans += key;\n    }\n  });\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6841021435562068, "ngram_match_score": 0.26984060921979647, "weighted_ngram_match_score": 0.5327444355932661, "syntax_match_score": 0.9338235294117647, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0012719302190067339, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.024095613813439387}}
{"filename": "p03845_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('ascii');var input_stdin='';var input_stdin_array='';var input_currentline=0x0;process['stdin']['on']('data',function(data){input_stdin+=data;});process['on']('SIGINT',function(){input_stdin_array=input_stdin['split']('\\x0a');main();process['exit']();});process['stdin']['on']('end',function(){input_stdin_array=input_stdin['split']('\\x0a');main();});function readLine(){return input_stdin_array[input_currentline++];}function main(){var N=parseInt(readLine());var s=readLine()['split']('\\x20');var T=[0x0];var sum=0x0;for(var i=0x1;i<=N;i++){T['push'](parseInt(s[i-0x1]));sum+=T[i];}var M=parseInt(readLine());for(var k=0x0;k<M;k++){s=readLine()['split']('\\x20');var i=parseInt(s[0x0]);var x=parseInt(s[0x1]);console['log'](sum-T[i]+x);}}", "test_cases": [["3\n2 1 4\n2\n1 1\n2 3", "6\n9"], ["5\n7 2 3 8 5\n3\n4 2\n1 7\n4 13", "19\n25\n30"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.on('SIGINT', function(){\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();\n    process.exit();\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n\tvar N = parseInt(readLine());\n\tvar s = readLine().split(\" \");\n\tvar T = [0];\n\tvar sum=0;\n\tfor (var i=1; i <= N; i++){\n\t\tT.push(parseInt(s[i-1]));\n\t\tsum += T[i];\n\t}\n\tvar M = parseInt(readLine());\n\tfor (var k=0; k < M; k++){\n\t\ts = readLine().split(\" \");\n\t\tvar i = parseInt(s[0]);\n\t\tvar x = parseInt(s[1]);\n\t\tconsole.log(sum - T[i] + x);\n\t}\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 677, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\nprocess.stdin.on(\"data\", function (data) {\n  input_stdin += data;\n});\nprocess.on(\"SIGINT\", function () {\n  input_stdin_array = input_stdin.split(\"\\n\");\n  main();\n  process.exit();\n});\nprocess.stdin.on(\"end\", function () {\n  input_stdin_array = input_stdin.split(\"\\n\");\n  main();\n});\nfunction readLine() {\n  return input_stdin_array[input_currentline++];\n}\nfunction main() {\n  var N = parseInt(readLine());\n  var s = readLine().split(\" \");\n  var T = [0];\n  var sum = 0;\n  for (var i = 1; i <= N; i++) {\n    T.push(parseInt(s[i - 1]));\n    sum += T[i];\n  }\n  var M = parseInt(readLine());\n  for (var k = 0; k < M; k++) {\n    s = readLine().split(\" \");\n    var i = parseInt(s[0]);\n    var x = parseInt(s[1]);\n    console.log(sum - T[i] + x);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8475788919864591, "ngram_match_score": 0.6727683611812558, "weighted_ngram_match_score": 0.7175472067645806, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03846_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x1]['split']('\\x20');var c=Math['pow'](parseInt(tmp['length']/0x2),0x2);var d=0x0;for(j=tmp['length']-0x1;j>=0x0;j--){for(i=0x0;i<tmp['length'];i++){if(tmp[i]==j){d++;}}if(d!=0x2&&j>0x0){c=0x0;break;}if(d!=0x1&&j==0x0){c=0x0;break;}d=0x0;j--;}c=c%(Math['pow'](0xa,0x9)+0x7);console['log']('%s',c);}function debug(){var input=document['getElementById']('input')['value'];Main(input);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n2 4 4 0 2", "4"], ["7\n6 4 0 2 4 0 2", "0"], ["8\n7 5 1 1 7 3 5 3", "16"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    tmp = input[1].split(\" \");\n    var c = Math.pow(parseInt(tmp.length / 2) , 2);\n    var d = 0;\n    for(j=tmp.length-1;j>=0;j--){\n      for(i=0;i<tmp.length;i++){\n         if(tmp[i] == j){\n            d++;\n         }\n      }\n      if(d!=2 && j>0){\n         c = 0;\n         break;\n      }\n      if(d!=1 && j==0){\n         c = 0;\n         break;\n      }\n    d = 0;\n    j--;\n    }\n    c = c % (Math.pow(10,9)+7);\n    console.log('%s', c);\n}\n\nfunction debug(){\n\tvar input = document.getElementById(\"input\").value;\n\tMain(input);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 678, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[1].split(\" \");\n  var c = Math.pow(parseInt(tmp.length / 2), 2);\n  var d = 0;\n  for (j = tmp.length - 1; j >= 0; j--) {\n    for (i = 0; i < tmp.length; i++) {\n      if (tmp[i] == j) {\n        d++;\n      }\n    }\n    if (d != 2 && j > 0) {\n      c = 0;\n      break;\n    }\n    if (d != 1 && j == 0) {\n      c = 0;\n      break;\n    }\n    d = 0;\n    j--;\n  }\n  c = c % (Math.pow(10, 9) + 7);\n  console.log(\"%s\", c);\n}\nfunction debug() {\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7621410431230625, "ngram_match_score": 0.41313508989180076, "weighted_ngram_match_score": 0.6354290826004494, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03945_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var s=input[0x0];if(s['match'](/BW/g)){var l1=s['match'](/BW/g)['length'];}else{l1=0x0;}if(s['match'](/WB/g)){var l2=s['match'](/WB/g)['length'];}else{l2=0x0;}console['log']('%s',l1+l2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["BBBWW", "1"], ["WWWWWW", "0"], ["WBWBWBWBWB", "9"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var s = input[0];\n  if(s.match(/BW/g)){\n  var l1 = s.match(/BW/g).length;\n  }else{\n    l1=0;\n  }\n  if(s.match(/WB/g)){\n  var l2 = s.match(/WB/g).length;\n  }else{\n    l2=0;\n  }\n  console.log('%s', l1+l2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 679, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var s = input[0];\n  if (s.match(/BW/g)) {\n    var l1 = s.match(/BW/g).length;\n  } else {\n    l1 = 0;\n  }\n  if (s.match(/WB/g)) {\n    var l2 = s.match(/WB/g).length;\n  } else {\n    l2 = 0;\n  }\n  console.log(\"%s\", l1 + l2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7116257366168516, "ngram_match_score": 0.33631398011857205, "weighted_ngram_match_score": 0.5101889663488341, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00031_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a')['map'](Number);var n=p['length'];for(var i=0x0;i<n;i++){var g=p['shift']();var s=[];g['toString'](0x2)['split']('')['reverse']()['map'](function(e,i){if(e==0x1){s['push'](Math['pow'](0x2,i));}});console['log'](s['join']('\\x20'));}}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["5\n7\n127", "1 4\n1 2 4\n1 2 4 8 16 32 64"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n').map(Number);\n  var n = p.length;\n  for (var i = 0; i < n; i++) {\n    var g = p.shift();\n    var s = [];\n    g.toString(2).split('').reverse().map(function(e, i) {\n      if (e == 1) {\n        s.push(Math.pow(2, i));\n      }\n    });\n    console.log(s.join(' '));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 680, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\").map(Number);\n  var n = p.length;\n  for (var i = 0; i < n; i++) {\n    var g = p.shift();\n    var s = [];\n    g.toString(2).split(\"\").reverse().map(function (e, i) {\n      if (e == 1) {\n        s.push(Math.pow(2, i));\n      }\n    });\n    console.log(s.join(\" \"));\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8634547308780952, "ngram_match_score": 0.7216768874122228, "weighted_ngram_match_score": 0.7654753694334911, "syntax_match_score": 1.0, "dataflow_match_score": 0.9666666666666667}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00033_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Number(p['shift']());for(var i=0x0;i<n;i++){var a=p['shift']()['split']('\\x20')['map'](Number);console['log'](order(a));}}(require('fs')['readFileSync']('/dev/stdin','utf8')));function order(a){var r=[];var x;var c=a['shift']();while(x=a['shift']()){if(x>c){c=x;continue;}r['push'](x);}var m=-Infinity;while(x=r['shift']()){if(x>m){m=x;continue;}return'NO';}return'YES';}", "test_cases": [["2\n3 1 4 2 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "YES\nNO"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var a = p.shift().split(' ').map(Number);\n    console.log(order(a));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction order(a) {\n  var r = [];\n  var x;\n  var c = a.shift();\n  while (x = a.shift()) {\n    if (x > c) {\n      c = x;\n      continue;\n    }\n    r.push(x);\n  }\n  var m = - Infinity;\n  while (x = r.shift()) {\n    if (x > m) {\n      m = x;\n      continue;\n    }\n    return 'NO';\n  }\n  return 'YES';\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 681, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\");\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var a = p.shift().split(\" \").map(Number);\n    console.log(order(a));\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction order(a) {\n  var r = [];\n  var x;\n  var c = a.shift();\n  while (x = a.shift()) {\n    if (x > c) {\n      c = x;\n      continue;\n    }\n    r.push(x);\n  }\n  var m = -Infinity;\n  while (x = r.shift()) {\n    if (x > m) {\n      m = x;\n      continue;\n    }\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8805008132253557, "ngram_match_score": 0.7864029286364799, "weighted_ngram_match_score": 0.796824814060861, "syntax_match_score": 1.0, "dataflow_match_score": 0.9387755102040817}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00101_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();input=input['split'](/\\n/);for(let i=0x1;i<input['length'];i++){console['log'](input[i]['replace']('Hoshino','Hoshina'));}", "test_cases": [["3\nHoshino\nHashino\nMasayuki Hoshino was the grandson of Ieyasu Tokugawa.", "Hoshina\nHashino\nMasayuki Hoshina was the grandson of Ieyasu Tokugawa."]], "original": "var input = require('fs').readFileSync(\"/dev/stdin\", \"utf8\").trim();\ninput = input.split(/\\n/);\nfor(let i=1;i<input.length;i++){\n  console.log(input[i].replace('Hoshino','Hoshina'));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 682, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\ninput = input.split(/\\n/);\nfor (let i = 1; i < input.length; i++) {\n  console.log(input[i].replace(\"Hoshino\", \"Hoshina\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6241269709617119, "ngram_match_score": 0.17001078098404226, "weighted_ngram_match_score": 0.3264971028628052, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00428_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var NM=Arr['shift']();if(NM=='0\\x200')break;var nm=NM['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];var arr=[];for(var i=0x0;i<m;i++)arr['push']({'x':i+0x1,'sum':0x0});for(var i=0x0;i<n;i++){var data=Arr['shift']()['split']('\\x20')['map'](Number);arr['forEach'](function(v,j){arr[j]['sum']+=data[j];});}arr['sort'](function(a,b){a=a['sum'];b=b['sum'];return b-a;});var c=[];arr['forEach'](function(v){c['push'](v['x']);});console['log'](c['join']('\\x20'));}", "test_cases": [["4 6\n1 0 1 0 1 1\n1 1 0 1 0 0\n1 1 1 0 0 0\n1 0 1 0 1 0\n4 6\n1 0 1 0 1 1\n1 1 0 1 0 0\n1 1 1 0 0 0\n1 0 1 0 1 0\n0 0", "1 3 2 5 4 6\n1 3 2 5 4 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var NM=Arr.shift();\n   if(NM==\"0 0\")break;\n   var nm=NM.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var arr=[];\n   for(var i=0;i<m;i++)arr.push({x:(i+1),sum:0});\n   for(var i=0;i<n;i++){\n      var data=(Arr.shift()).split(\" \").map(Number);\n      arr.forEach(function(v,j){arr[j].sum+=data[j];});\n   }\n   arr.sort(function(a,b){\n      a=a.sum;\n      b=b.sum;\n      return b-a;\n   });\n   var c=[];\n   arr.forEach(function(v){c.push(v.x);});\n   console.log(c.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 683, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var NM = Arr.shift();\n  if (NM == \"0 0\") {\n    break;\n  }\n  var nm = NM.split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  var arr = [];\n  for (var i = 0; i < m; i++) {\n    arr.push({\n      x: i + 1,\n      sum: 0\n    });\n  }\n  for (var i = 0; i < n; i++) {\n    var data = Arr.shift().split(\" \").map(Number);\n    arr.forEach(function (v, j) {\n      arr[j].sum += data[j];\n    });\n  }\n  arr.sort(function (a, b) {\n    a = a.sum;\n    b = b.sum;\n    return b - a;\n  });\n  var c = [];\n  arr.forEach(function (v) {\n    c.push(v.x);\n  });\n  console.log(c.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.474522444529739, "ngram_match_score": 0.019956860997421777, "weighted_ngram_match_score": 0.0606146689463518, "syntax_match_score": 0.8175182481751825, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.016304347826086918, "new_decrease_halstead_effort": 0.08945094760312144}}
{"filename": "p02315_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var p=input[0x0]['split']('\\x20')['map'](Number);var max=p[0x1]-0x0;var dp=new Array(p[0x0]+0x1);for(var n=0x0;n<p[0x0]+0x1;n++){dp[n]=new Array(max+0x1)['fill'](0x0);}for(var i=0x1;i<input['length'];i++){var mem=input[i]['split']('\\x20')['map'](Number);for(var j=0x0;j<=max;j++){if(j>=mem[0x1])dp[i][j]=Math['max'](dp[i-0x1][j-mem[0x1]]+mem[0x0],dp[i-0x1][j]);else dp[i][j]=dp[i-0x1][j];}}console['log'](dp[p[0x0]][max]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["4 5\n4 2\n5 2\n2 1\n8 3", "13"], ["2 20\n5 9\n4 10", "9"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar p = input[0].split(\" \").map(Number);\n\tvar max = p[1]-0;\n\tvar dp = new Array(p[0]+1);\n\t//.fill(new Array(max+1));\n\t//dp[0] = new Array(max+1).fill(0)\n\tfor(var n=0;n<p[0]+1;n++){\n\t    dp[n] = new Array(max+1).fill(0);\n\t}\n\t//\tconsole.log(dp)\n    for(var i=1;i<input.length;i++){\n    var mem = input[i].split(\" \").map(Number);\n    for(var j=0;j<=max;j++){\n        //console.log(i,j)\n      if(j>=mem[1]) dp[i][j] = Math.max(dp[i-1][j-mem[1]]+mem[0],dp[i-1][j])\n      else dp[i][j] = dp[i-1][j];\n    }\n  }\n  console.log(dp[p[0]][max])\n // console.log(dp)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 684, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var p = input[0].split(\" \").map(Number);\n  var max = p[1] - 0;\n  var dp = new Array(p[0] + 1);\n  for (var n = 0; n < p[0] + 1; n++) {\n    dp[n] = new Array(max + 1).fill(0);\n  }\n  for (var i = 1; i < input.length; i++) {\n    var mem = input[i].split(\" \").map(Number);\n    for (var j = 0; j <= max; j++) {\n      if (j >= mem[1]) {\n        dp[i][j] = Math.max(dp[i - 1][j - mem[1]] + mem[0], dp[i - 1][j]);\n      } else {\n        dp[i][j] = dp[i - 1][j];\n      }\n    }\n  }\n  console.log(dp[p[0]][max]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6343277468862144, "ngram_match_score": 0.22156569088644248, "weighted_ngram_match_score": 0.388916028365732, "syntax_match_score": 0.926829268292683, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0014627713055856972, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02942216646275786}}
{"filename": "p02708_1", "type": "JavaScript", "obfuscated": "const main=input=>{const mod=0xa**0x9+0x7;const [n,k]=input['trim']()['split']('\\x20')['map'](Number);let ans=0x0;for(let i=k;i<=n+0x1;i++){const s_sum=(i-0x1)*i/0x2;const b_f=n-i+0x1;const b_sum=(b_f+n)*i/0x2;ans+=b_sum-s_sum+0x1;}return console['log']((ans%mod+mod)%mod);};process['env']['MYTEST']?process['env']['MYTEST']==='test'?test():main(require('fs')['readFileSync']('dev/stdin','utf8')):main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2", "10"], ["200000 200001", "1"], ["141421 35623", "220280457"]], "original": "const main = (input) => {\n  const mod = 10**9 + 7\n  const [n, k] = input.trim().split(' ').map(Number)\n  \n\n  let ans = 0\n\n  for (let i=k; i<=n+1; i++) {\n    const s_sum = (i-1) * i / 2\n\n    const b_f = n - i + 1\n\n    const b_sum = (b_f + n) * i / 2\n\n    ans += b_sum - s_sum + 1\n  }\n\n  return console.log((ans % mod + mod) % mod)\n}\n\nprocess.env.MYTEST\n  ? (process.env.MYTEST === 'test' ? test() : main(require('fs').readFileSync('dev/stdin', 'utf8')))\n  : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 685, "deobfuscated": "const main = input => {\n  const mod = 1000000007;\n  const [n, k] = input.trim().split(\" \").map(Number);\n  let ans = 0;\n  for (let i = k; i <= n + 1; i++) {\n    const s_sum = (i - 1) * i / 2;\n    const b_f = n - i + 1;\n    const b_sum = (b_f + n) * i / 2;\n    ans += b_sum - s_sum + 1;\n  }\n  return console.log((ans % mod + mod) % mod);\n};\nif (process.env.MYTEST) {\n  if (process.env.MYTEST === \"test\") {\n    test();\n  } else {\n    main(require(\"fs\").readFileSync(\"dev/stdin\", \"utf8\"));\n  }\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4805164378821701, "ngram_match_score": 0.39046167524677167, "weighted_ngram_match_score": 0.4706032491520495, "syntax_match_score": 0.8494623655913979, "dataflow_match_score": 0.21153846153846154}, "code_complexity": {"difference_score": 3.0, "length_score": -3.0, "increase_maintainability": -0.17018862252113065, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.05128205128205132, "new_decrease_halstead_effort": -0.2494385246497468}}
{"filename": "p02850_1", "type": "JavaScript", "obfuscated": "'use strict';function main(inp){inp=inp['trim']()['split']('\\x0a');const N=Number(inp['shift']());let G=[...new Array(N)]['map'](a=>[]);let vp=new Array();inp['forEach'](r=>{r=r['split']('\\x20')['map'](n=>n-0x1);G[r[0x0]]['push'](r[0x1]);G[r[0x1]]['push'](r[0x0]);vp['push'](r[0x0]+'-'+r[0x1]);});let K=0x0;let I=new Map();let cs=new Array(N)['fill'](0x0);let used=new Array(N)['fill'](0x0);let que=new Array();used[0x0]=0x1;que['push'](0x0);while(que['length']){let v=que['shift']();if(K<G[v]['length'])K=G[v]['length'];let cur=0x1;for(const u of G[v]){if(used[u])continue;if(cur===cs[v])cur++;cs[u]=I[u+'-'+v]=I[v+'-'+u]=cur++;used[u]=0x1;que['push'](u);}}console['log'](K);vp['forEach'](v=>{console['log'](I[v]);});}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 2\n2 3", "2\n1\n2"], ["8\n1 2\n2 3\n2 4\n2 5\n4 7\n5 6\n6 8", "4\n1\n2\n3\n4\n1\n1\n2"], ["6\n1 2\n1 3\n1 4\n1 5\n1 6", "5\n1\n2\n3\n4\n5"]], "original": "'use strict'\nfunction main(inp) {\n  inp = inp.trim().split('\\n')\n  const N = Number(inp.shift())\n  let G = [...new Array(N)].map(a => [])\n  let vp = new Array()\n  \n  inp.forEach(r => {\n    r = r.split(' ').map(n => n - 1)\n    G[r[0]].push(r[1])\n    G[r[1]].push(r[0])\n    vp.push(r[0]+'-'+r[1])\n  })\n\n  let K = 0;\n  let I = new Map()\n  let cs = new Array(N).fill(0)\n  let used = new Array(N).fill(0)\n  let que = new Array()\n\n  used[0] = 1\n  que.push(0)\n\n  while(que.length) {\n    let v = que.shift()\n    if (K < G[v].length) K = G[v].length\n    let cur = 1\n    for (const u of G[v]) {\n      if (used[u]) continue;\n      if (cur === cs[v]) cur++\n      cs[u] = I[u+'-'+v] = I[v+'-'+u] = cur++\n      used[u] = 1\n      que.push(u)\n    }\n  }\n\n  console.log(K)\n  vp.forEach(v => {\n    console.log(I[v])\n  })\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 686, "deobfuscated": "'use strict';\n\nfunction main(inp) {\n  inp = inp.trim().split(\"\\n\");\n  const N = Number(inp.shift());\n  let G = [...new Array(N)].map(a => []);\n  let vp = new Array();\n  inp.forEach(r => {\n    r = r.split(\" \").map(n => n - 1);\n    G[r[0]].push(r[1]);\n    G[r[1]].push(r[0]);\n    vp.push(r[0] + \"-\" + r[1]);\n  });\n  let K = 0;\n  let I = new Map();\n  let cs = new Array(N).fill(0);\n  let used = new Array(N).fill(0);\n  let que = new Array();\n  used[0] = 1;\n  que.push(0);\n  while (que.length) {\n    let v = que.shift();\n    if (K < G[v].length) {\n      K = G[v].length;\n    }\n    let cur = 1;\n    for (const u of G[v]) {\n      if (used[u]) {\n        continue;\n      }\n      if (cur === cs[v]) {\n        cur++;\n      }\n      cs[u] = I[u + \"-\" + v] = I[v + \"-\" + u] = cur++;\n      used[u] = 1;\n      que.push(u);\n    }\n  }\n  console.log(K);\n  vp.forEach(v => {\n    console.log(I[v]);\n  });\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.676924264650464, "ngram_match_score": 0.34553475736692285, "weighted_ngram_match_score": 0.4153537905966352, "syntax_match_score": 0.9468085106382979, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02883_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const K=input[0x0]['split']('\\x20')[0x1]-0x0;var A=input[0x1]['split']('\\x20')['map'](e=>{return e-0x0;})['sort']((a,b)=>{return a-b;});var F=input[0x2]['split']('\\x20')['map'](e=>{return e-0x0;})['sort']((a,b)=>{return b-a;});var possible=0x0;for(var i=0x0;i<N;i++){possible=Math['max'](possible,A[i]*F[i]);}var impossible=-0x1;var temp;var sum;while(possible-impossible>0x1){temp=Math['ceil']((impossible+possible)/0x2);sum=0x0;for(var i=0x0;i<N;i++){sum+=Math['max'](0x0,A[i]-Math['floor'](temp/F[i]));}if(sum<=K){possible=temp;}else{impossible=temp;}}console['log'](possible);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 5\n4 2 1\n2 3 1", "2"], ["3 8\n4 2 1\n2 3 1", "0"], ["11 14\n3 1 4 1 5 9 2 6 5 3 5\n8 9 7 9 3 2 3 8 4 6 2", "12"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const K=input[0].split(' ')[1]-0;\n  var A=input[1].split(' ').map(e=>{\n    return e-0;\n  }).sort((a,b)=>{\n    return a-b;\n  });\n  var F=input[2].split(' ').map(e=>{\n    return e-0;\n  }).sort((a,b)=>{\n    return b-a;\n  });\n  var possible=0;\n  for(var i=0;i<N;i++){\n    possible=Math.max(possible,A[i]*F[i]);\n  }\n  var impossible=-1;\n  var temp;\n  var sum;\n  while(possible-impossible>1){\n    temp=Math.ceil((impossible+possible)/2);\n    sum=0;\n    for(var i=0;i<N;i++){\n      sum+=Math.max(0,A[i]-Math.floor(temp/F[i]));\n    }\n    if(sum<=K){\n      possible=temp;\n    }else{\n      impossible=temp;\n    }\n  }\n  console.log(possible);\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 687, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const K = input[0].split(\" \")[1] - 0;\n  var A = input[1].split(\" \").map(e => {\n    return e - 0;\n  }).sort((a, b) => {\n    return a - b;\n  });\n  var F = input[2].split(\" \").map(e => {\n    return e - 0;\n  }).sort((a, b) => {\n    return b - a;\n  });\n  var possible = 0;\n  for (var i = 0; i < N; i++) {\n    possible = Math.max(possible, A[i] * F[i]);\n  }\n  var impossible = -1;\n  var temp;\n  var sum;\n  while (possible - impossible > 1) {\n    temp = Math.ceil((impossible + possible) / 2);\n    sum = 0;\n    for (var i = 0; i < N; i++) {\n      sum += Math.max(0, A[i] - Math.floor(temp / F[i]));\n    }\n    if (sum <= K) {\n      possible = temp;\n    } else {\n      impossible = temp;\n    }\n  }\n  console.log(possible);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5423979027162595, "ngram_match_score": 0.05478588079129945, "weighted_ngram_match_score": 0.15562205660435122, "syntax_match_score": 1.0, "dataflow_match_score": 0.9591836734693877}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02960_1", "type": "JavaScript", "obfuscated": "'use strict';function main(inp){inp=inp['trim']();const MOD=0x3b9aca07;let dp=[new Array(0xd)['fill'](0x0)];dp[0x0][0x0]=0x1;for(let i=0x0;i<inp['length'];i++){dp[i+0x1]=new Array(0xd)['fill'](0x0);const c=inp[i]==='?'?-0x1:inp[i]-0x0;for(let j=0x0;j<0xa;j++){if(c!==-0x1&&c!==j)continue;for(let k=0x0;k<0xd;k++){dp[i+0x1][(k*0xa+j)%0xd]+=dp[i][k];}}for(let j=0x0;j<0xd;j++){dp[i+0x1][j]%=MOD;}}console['log'](dp[inp['length']][0x5]);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["??2??5", "768"], ["?44", "1"], ["7?4", "0"], ["?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???", "153716888"]], "original": "'use strict'\nfunction main(inp) {\n  inp = inp.trim()\n\n  const MOD = 1000000007\n  let dp = [new Array(13).fill(0)]\n  dp[0][0] = 1\n  \n  for (let i = 0; i < inp.length; i++) {\n    dp[i + 1] = new Array(13).fill(0)\n    const c = inp[i] === '?' ? -1 : inp[i] - 0\n    for (let j = 0; j < 10; j++) {\n      if (c !== -1 && c !== j) continue\n      for (let k = 0; k < 13; k++) {\n        dp[i+1][(k * 10 + j) % 13] += dp[i][k]\n      }\n    }\n    for (let j = 0; j < 13; j++) {\n      dp[i+1][j] %= MOD\n    }\n  }\n  console.log(dp[inp.length][5])\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 688, "deobfuscated": "'use strict';\n\nfunction main(inp) {\n  inp = inp.trim();\n  const MOD = 1000000007;\n  let dp = [new Array(13).fill(0)];\n  dp[0][0] = 1;\n  for (let i = 0; i < inp.length; i++) {\n    dp[i + 1] = new Array(13).fill(0);\n    const c = inp[i] === \"?\" ? -1 : inp[i] - 0;\n    for (let j = 0; j < 10; j++) {\n      if (c !== -1 && c !== j) {\n        continue;\n      }\n      for (let k = 0; k < 13; k++) {\n        dp[i + 1][(k * 10 + j) % 13] += dp[i][k];\n      }\n    }\n    for (let j = 0; j < 13; j++) {\n      dp[i + 1][j] %= MOD;\n    }\n  }\n  console.log(dp[inp.length][5]);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8056067093998828, "ngram_match_score": 0.6271250477125846, "weighted_ngram_match_score": 0.6660982500639375, "syntax_match_score": 0.9292035398230089, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02990_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=parseInt(input[0x0]['split']('\\x20')[0x0]);var K=parseInt(input[0x0]['split']('\\x20')[0x1]);var anssub=new Array();var mod=Math['pow'](0xa,0x9)+0x7;for(var i=0x1;i<=K;i++){var a=combination(N-K+0x1,i)%mod;var b=combination(K-0x1,i-0x1)%mod;var c=a*b%mod;anssub['push'](c);}var ans=anssub['join']('\\x0a');console['log']('%s',ans);return ans;}function permutation(n,r){for(var i=0x0,res=0x1;i<r;i++){res*=n-i;}return res;}function combination(n,r){return permutation(n,r)/permutation(r,r);}function debug(n){var input=document['getElementById']('input'+n)['value'];var ans=Main(input);var result='WA';if(ans==document['getElementById']('output'+n)['value']['split']('\\x0a')[0x0]){result='AC';}document['getElementById']('result'+n)['innerHTML']=result;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3", "3\n6\n1"], ["2000 3", "1998\n3990006\n327341989"]], "original": "\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var K = parseInt(input[0].split(\" \")[1]);\n  var anssub=new Array();\n  var mod =Math.pow(10,9)+7;\n  for(var i=1;i<=K;i++){\n    var a = combination(N-K+1,i)%mod;\n    var b = combination(K-1,i-1)%mod;\n    var c = a*b%mod;\n    anssub.push(c);\n  }\n  var ans = anssub.join(\"\\n\");\n\n  console.log('%s', ans);\n  return ans;\n}\nfunction permutation(n, r) {\n  for(var i = 0, res = 1; i < r; i++) {\n  res *= n - i;\n  }\n  return res;\n}\n  \nfunction combination(n, r) {\n  return permutation(n, r) / permutation(r, r);\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 689, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var K = parseInt(input[0].split(\" \")[1]);\n  var anssub = new Array();\n  var mod = Math.pow(10, 9) + 7;\n  for (var i = 1; i <= K; i++) {\n    var a = combination(N - K + 1, i) % mod;\n    var b = combination(K - 1, i - 1) % mod;\n    var c = a * b % mod;\n    anssub.push(c);\n  }\n  var ans = anssub.join(\"\\n\");\n  console.log(\"%s\", ans);\n  return ans;\n}\nfunction permutation(n, r) {\n  for (var i = 0, res = 1; i < r; i++) {\n    res *= n - i;\n  }\n  return res;\n}\nfunction combination(n, r) {\n  return permutation(n, r) / permutation(r, r);\n}\nfunction debug(n) {\n  var input = document.getElementById(\"input\" + n).value;\n  var ans = Main(input);\n  var result = \"WA\";\n  if (ans == document.getElementById(\"output\" + n).value.split(\"\\n\")[0]) {\n    result = \"AC\";\n  }\n  document.getElementById(\"result\" + n).innerHTML = result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.778837486318754, "ngram_match_score": 0.4360988041732486, "weighted_ngram_match_score": 0.6792511411017675, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03156_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{let xs=input['trim']()['split']('\\x0a');let N=Number(xs[0x0]);let A=Number(xs[0x1]['split']('\\x20')[0x0]);let B=Number(xs[0x1]['split']('\\x20')[0x1]);let P1=[];let P2=[];let P3=[];let P=xs[0x2]['split']('\\x20')['map'](v=>parseInt(v,0xa));for(let i=0x0;i<N;i++){if(P[i]<=A){P1['push'](P[i]);}else if(P[i]<=B){P2['push'](P[i]);}else{P3['push'](P[i]);}}let ans=Math['min'](P1['length'],P2['length'],P3['length']);console['log'](ans);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\n5 15\n1 10 16 2 7 20 12", "2"], ["8\n3 8\n5 5 5 10 10 10 15 20", "0"], ["3\n5 6\n5 6 10", "1"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0]);\n   let A = Number(xs[1].split(\" \")[0]);\n   let B = Number(xs[1].split(\" \")[1]);\n   let P1 = [];\n   let P2 = [];\n   let P3 = [];\n   let P = xs[2].split(' ').map(v=>parseInt(v,10));\n   \n   for(let i=0; i<N; i++){\n     if(P[i]<=A){\n       P1.push(P[i]);\n     }else if(P[i]<=B){\n       P2.push(P[i]);\n     }else{\n       P3.push(P[i])\n     }\n   }\n   let ans =Math.min(P1.length,P2.length,P3.length);\n   console.log(ans)\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 690, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  let xs = input.trim().split(\"\\n\");\n  let N = Number(xs[0]);\n  let A = Number(xs[1].split(\" \")[0]);\n  let B = Number(xs[1].split(\" \")[1]);\n  let P1 = [];\n  let P2 = [];\n  let P3 = [];\n  let P = xs[2].split(\" \").map(v => parseInt(v, 10));\n  for (let i = 0; i < N; i++) {\n    if (P[i] <= A) {\n      P1.push(P[i]);\n    } else if (P[i] <= B) {\n      P2.push(P[i]);\n    } else {\n      P3.push(P[i]);\n    }\n  }\n  let ans = Math.min(P1.length, P2.length, P3.length);\n  console.log(ans);\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5756968883260801, "ngram_match_score": 0.394177662100685, "weighted_ngram_match_score": 0.5833963146624213, "syntax_match_score": 0.9590163934426229, "dataflow_match_score": 0.36619718309859156}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03296_1", "type": "JavaScript", "obfuscated": "'use strict';function myin(){return require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();}function myout(t){console['log'](t);}function myconv(i,no){switch(no){case 0x0:return i;case 0x1:return parseInt(i);case 0x2:return i['split']('\\x20');case 0x3:return i['split']('\\x0a');case 0x4:return i['split']('\\x20')['map'](a=>Number(a));case 0x5:return i['split']('\\x0a')['map'](a=>Number(a));case 0x6:return i['split']('');case 0x7:return i['split']('')['map'](a=>Number(a));}}function Main(input){input=myconv(input,0x3);var N=myconv(input[0x0],0x1);var list=myconv(input[0x1],0x4);var output=0x0;for(var i=0x0;i<N-0x1;i++){var mae=list[i];var ato=list[i+0x1];if(mae==ato){output++;list[i+0x1]=-0x1;}}myout(output);}Main(myin());", "test_cases": [["5\n1 1 2 2 2", "2"], ["3\n1 2 1", "0"], ["5\n1 1 1 1 1", "2"], ["14\n1 2 2 3 3 3 4 4 4 4 1 2 3 4", "4"]], "original": "'use strict'\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  var N = myconv(input[0],1);\n  var list = myconv(input[1],4);\n  var output = 0;\n  for(var i = 0; i < N - 1; i++){\n    var mae = list[i];\n    var ato = list[i+1];\n    if(mae == ato){\n       output++;\n      list[i+1] = -1;\n       }\n  }\n  myout(output);\n}\n  \nMain(myin());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 691, "deobfuscated": "'use strict';\n\nfunction myin() {\n  return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\n}\nfunction myout(t) {\n  console.log(t);\n}\nfunction myconv(i, no) {\n  switch (no) {\n    case 0:\n      return i;\n    case 1:\n      return parseInt(i);\n    case 2:\n      return i.split(\" \");\n    case 3:\n      return i.split(\"\\n\");\n    case 4:\n      return i.split(\" \").map(a => Number(a));\n    case 5:\n      return i.split(\"\\n\").map(a => Number(a));\n    case 6:\n      return i.split(\"\");\n    case 7:\n      return i.split(\"\").map(a => Number(a));\n  }\n}\nfunction Main(input) {\n  input = myconv(input, 3);\n  var N = myconv(input[0], 1);\n  var list = myconv(input[1], 4);\n  var output = 0;\n  for (var i = 0; i < N - 1; i++) {\n    var mae = list[i];\n    var ato = list[i + 1];\n    if (mae == ato) {\n      output++;\n      list[i + 1] = -1;\n    }\n  }\n  myout(output);\n}\nMain(myin());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6050008250025553, "ngram_match_score": 0.221545724981604, "weighted_ngram_match_score": 0.3345119967973247, "syntax_match_score": 0.8639455782312925, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03341_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const A=arg[0x1]['split']('');const Rsum=A['filter'](n=>n==='E')['length'];const Lsum=N-Rsum;let Rcnt=0x0;let Lcnt=0x0;let answer=Infinity;for(let i=0x0;i<N;i++){const needMoveLeft=Lcnt;let needMoveRight=Rsum-Rcnt;if(A[i]==='E'){needMoveRight--;}answer=Math['min'](answer,needMoveLeft+needMoveRight);if(A[i]==='W'){Lcnt++;}else{Rcnt++;}}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\nWEEWW", "1"], ["12\nWEWEWEEEWWWE", "4"], ["8\nWWWWWEEE", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const A = arg[1].split(\"\");\n    \n    const Rsum = A.filter(n=>n===\"E\").length;\n    const Lsum = N - Rsum;\n    \n    let Rcnt = 0;\n    let Lcnt = 0;\n    \n    let answer = Infinity;\n    \n    for(let i=0; i<N; i++) {\n        // 左半分\n        const needMoveLeft = Lcnt;\n        \n        // 右半分\n        let needMoveRight = Rsum - Rcnt;\n        \n        if(A[i] === \"E\") {\n            needMoveRight--;\n        }\n    \n        answer = Math.min(answer, needMoveLeft + needMoveRight);\n        \n        \n        if(A[i] === \"W\") {\n            Lcnt++;\n        } else {\n            Rcnt++;\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 692, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const A = arg[1].split(\"\");\n  const Rsum = A.filter(n => n === \"E\").length;\n  const Lsum = N - Rsum;\n  let Rcnt = 0;\n  let Lcnt = 0;\n  let answer = Infinity;\n  for (let i = 0; i < N; i++) {\n    const needMoveLeft = Lcnt;\n    let needMoveRight = Rsum - Rcnt;\n    if (A[i] === \"E\") {\n      needMoveRight--;\n    }\n    answer = Math.min(answer, needMoveLeft + needMoveRight);\n    if (A[i] === \"W\") {\n      Lcnt++;\n    } else {\n      Rcnt++;\n    }\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8496781140310232, "ngram_match_score": 0.6663741023795964, "weighted_ngram_match_score": 0.7323383537444966, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03346_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [N,...P]=args['trim']()['split']('\\x0a')['map'](v=>v|0x0);const dp=Array(N)['fill'](0x0);for(let i=0x0;i<N;i++)dp[P[i]+0x1]=dp[P[i]]+0x1;return''+(N-dp['reduce']((a,b)=>a>b?a:b,0x0));})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4\n1\n3\n2\n4", "2"], ["6\n3\n2\n5\n1\n4\n6", "4"], ["8\n6\n3\n1\n2\n7\n4\n8\n5", "5"]], "original": "console.log((args=>{\n  const [N,...P] = args.trim().split('\\n').map(v=>v|0);\n  const dp = Array(N).fill(0);\n  for ( let i = 0; i < N; i++ ) dp[P[i]+1] = dp[P[i]] + 1;\n  return `${N-dp.reduce((a,b)=>(a>b)?a:b,0)}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 693, "deobfuscated": "console.log((args => {\n  const [N, ...P] = args.trim().split(\"\\n\").map(v => v | 0);\n  const dp = Array(N).fill(0);\n  for (let i = 0; i < N; i++) {\n    dp[P[i] + 1] = dp[P[i]] + 1;\n  }\n  return \"\" + (N - dp.reduce((a, b) => a > b ? a : b, 0));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5458068153698192, "ngram_match_score": 0.20583867457161287, "weighted_ngram_match_score": 0.38890244618271747, "syntax_match_score": 0.7313432835820896, "dataflow_match_score": 0.8571428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03524_1", "type": "JavaScript", "obfuscated": "function main(input){const s=input['trim']();let array=s['split']('')['reduce']((a,c)=>{a[c['charCodeAt']()-'a'['charCodeAt']()]++;return a;},[0x0,0x0,0x0]);if(Math['max'](...array)-Math['min'](...array)>=0x2){console['log']('NO');}else{console['log']('YES');}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abac", "YES"], ["aba", "NO"], ["babacccabab", "YES"]], "original": "function main(input) {\n  const s = input.trim()\n\n  let array = s.split('').reduce((a, c) => {\n    a[c.charCodeAt() - 'a'.charCodeAt()]++\n    return a\n  }, [0, 0, 0])\n\n  if (Math.max(...array) - Math.min(...array) >= 2) {\n    console.log('NO')\n  } else {\n    console.log('YES')\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 694, "deobfuscated": "function main(input) {\n  const s = input.trim();\n  let array = s.split(\"\").reduce((a, c) => {\n    a[c.charCodeAt() - \"a\".charCodeAt()]++;\n    return a;\n  }, [0, 0, 0]);\n  if (Math.max(...array) - Math.min(...array) >= 2) {\n    console.log(\"NO\");\n  } else {\n    console.log(\"YES\");\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6800515862886675, "ngram_match_score": 0.46092611919700416, "weighted_ngram_match_score": 0.47356594024338006, "syntax_match_score": 1.0, "dataflow_match_score": 0.7857142857142857}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03660_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]);a=new Array(n-0x1)['fill'](0x0);b=new Array(n-0x1)['fill'](0x0);for(i=0x0;i<n-0x1;i++){tmp=input[i+0x1]['split']('\\x20');a[i]=parseInt(tmp[0x0])-0x1;b[i]=parseInt(tmp[0x1])-0x1;}d1=new Array(n)['fill'](n);d1[0x0]=0x0;d2=new Array(n)['fill'](n);d2[n-0x1]=0x0;function f(x,d){for(i=0x0;i<n-0x1;i++){if(a[i]==x&&d[b[i]]>d[a[i]]){d[b[i]]=d[a[i]]+0x1;var j=i;f(b[i],d);i=j;}if(b[i]==x&&d[a[i]]>d[b[i]]){d[a[i]]=d[b[i]]+0x1;var j=i;f(a[i],d);i=j;}}return d;}d1=f(0x0,d1);d2=f(n-0x1,d2);var x=0x0;for(i=0x0;i<n;i++){if(i!=0x0&&i!=n-0x1){if(d1[i]<=d2[i]){x++;}}}var ans='Fennec';if(x<=n-0x2-x){ans='Snuke';}console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7\n3 6\n1 2\n3 1\n7 4\n5 7\n1 4", "Fennec"], ["4\n1 4\n4 2\n2 3", "Snuke"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n-1).fill(0);\n  b = new Array(n-1).fill(0);\n  for(i=0;i<n-1;i++){\n    tmp = input[i+1].split(\" \");\n    a[i]=parseInt(tmp[0])-1;\n    b[i]=parseInt(tmp[1])-1;\n  }\n  d1 = new Array(n).fill(n);\n  d1[0]=0;\n  d2 = new Array(n).fill(n);\n  d2[n-1]=0;\n  function f(x,d){\n    for(i=0;i<n-1;i++){\n      if(a[i]==x&&d[b[i]]>d[a[i]]){\n        d[b[i]]=d[a[i]]+1;\n        var j =i;\n        f(b[i],d);\n        i=j;\n      }\n      if(b[i]==x&&d[a[i]]>d[b[i]]){\n        d[a[i]]=d[b[i]]+1;\n        var j =i;\n        f(a[i],d);\n        i=j;\n      }\n    }\n    return d;\n  }\n  d1=f(0,d1);\n  d2=f(n-1,d2);\n  var x=0;\n  for(i=0;i<n;i++){\n    if(i!=0&&i!=n-1){\n      if(d1[i]<=d2[i]){\n        x++;\n      }\n    }\n  }\n  var ans=\"Fennec\";\n  if(x<=n-2-x){\n    ans=\"Snuke\";\n  }\n\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 695, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n - 1).fill(0);\n  b = new Array(n - 1).fill(0);\n  for (i = 0; i < n - 1; i++) {\n    tmp = input[i + 1].split(\" \");\n    a[i] = parseInt(tmp[0]) - 1;\n    b[i] = parseInt(tmp[1]) - 1;\n  }\n  d1 = new Array(n).fill(n);\n  d1[0] = 0;\n  d2 = new Array(n).fill(n);\n  d2[n - 1] = 0;\n  function f(x, d) {\n    for (i = 0; i < n - 1; i++) {\n      if (a[i] == x && d[b[i]] > d[a[i]]) {\n        d[b[i]] = d[a[i]] + 1;\n        var j = i;\n        f(b[i], d);\n        i = j;\n      }\n      if (b[i] == x && d[a[i]] > d[b[i]]) {\n        d[a[i]] = d[b[i]] + 1;\n        var j = i;\n        f(a[i], d);\n        i = j;\n      }\n    }\n    return d;\n  }\n  d1 = f(0, d1);\n  d2 = f(n - 1, d2);\n  var x = 0;\n  for (i = 0; i < n; i++) {\n    if (i != 0 && i != n - 1) {\n      if (d1[i] <= d2[i]) {\n        x++;\n      }\n    }\n  }\n  var ans = \"Fennec\";\n  if (x <= n - 2 - x) {\n    ans = \"Snuke\";\n  }\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6377191977269422, "ngram_match_score": 0.15160276276654186, "weighted_ngram_match_score": 0.3992740281412268, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03715_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var H=parseInt(input[0x0][0x0],0xa);var W=parseInt(input[0x0][0x1],0xa);var ans=calc(H,W);console['log'](ans);}function calc(H,W){if(H%0x3===0x0||W%0x3===0x0)return 0x0;var result=H*W;var tmp;var oldtmp=result;for(var i=0x0;i<=W;i++){tmp=Math['max'](Math['abs'](i*H-(W-i)*Math['ceil'](H/0x2)),Math['abs'](i*H-(W-i)*Math['floor'](H/0x2)),H%0x2*(W-i));result=Math['min'](result,tmp);if(tmp>oldtmp)break;oldtmp=tmp;}[W,H]=[H,W];oldtmp=H*W;for(var i=0x0;i<=W;i++){tmp=Math['max'](Math['abs'](i*H-(W-i)*Math['ceil'](H/0x2)),Math['abs'](i*H-(W-i)*Math['floor'](H/0x2)),H%0x2*(W-i));result=Math['min'](result,tmp);if(tmp>oldtmp)break;oldtmp=tmp;}return Math['min'](result,H,W);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 5", "0"], ["4 5", "2"], ["5 5", "4"], ["100000 2", "1"], ["100000 100000", "50000"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar H = parseInt(input[0][0], 10);\n\tvar W = parseInt(input[0][1], 10);\n\tvar ans = calc(H, W);\n\tconsole.log(ans);\n}\n\nfunction calc(H, W){\n\tif (H % 3 === 0 || W % 3 === 0) return 0;\n\tvar result = H * W;\n\tvar tmp;\n\tvar oldtmp = result;\n\tfor (var i = 0; i <= W; i++){\n\t\ttmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), (H % 2) * (W - i));\n\t\tresult = Math.min(result, tmp);\n\t\tif (tmp > oldtmp) break;\n\t\toldtmp = tmp;\n\t}\n\t[W, H] = [H, W];\n\toldtmp =  H * W;\n\tfor (var i = 0; i <= W; i++){\n\t\ttmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), (H % 2) * (W - i));\n\t\tresult = Math.min(result, tmp);\n\t\tif (tmp > oldtmp) break;\n\t\toldtmp = tmp;\n\t}\n\treturn Math.min(result, H, W);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 696, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var H = parseInt(input[0][0], 10);\n  var W = parseInt(input[0][1], 10);\n  var ans = calc(H, W);\n  console.log(ans);\n}\nfunction calc(H, W) {\n  if (H % 3 === 0 || W % 3 === 0) {\n    return 0;\n  }\n  var result = H * W;\n  var tmp;\n  var oldtmp = result;\n  for (var i = 0; i <= W; i++) {\n    tmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), H % 2 * (W - i));\n    result = Math.min(result, tmp);\n    if (tmp > oldtmp) {\n      break;\n    }\n    oldtmp = tmp;\n  }\n  [W, H] = [H, W];\n  oldtmp = H * W;\n  for (var i = 0; i <= W; i++) {\n    tmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), H % 2 * (W - i));\n    result = Math.min(result, tmp);\n    if (tmp > oldtmp) {\n      break;\n    }\n    oldtmp = tmp;\n  }\n  return Math.min(result, H, W);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8777281783662613, "ngram_match_score": 0.7880950601754768, "weighted_ngram_match_score": 0.8398389298853128, "syntax_match_score": 0.8829787234042553, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03987_1", "type": "JavaScript", "obfuscated": "'use strict';const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');const N=+lines[0x0];const A=lines[0x1]['split']('\\x20');let indices=[];for(let i=0x0;i<N;i++){A[i]=+A[i];indices[indices['length']]=i;}indices=indices['sort']((a,b)=>A[a]-A[b]);let sum=0x0,que=[[0x0,N-0x1,0x0]];while(que['length']>0x0){let lri=que['shift'](),left=lri[0x0],right=lri[0x1],index=lri[0x2];if(left>right)continue;let i=index;while(indices[i]<left||indices[i]>right)i++;let ind=indices[i];sum+=A[ind]*(ind-left+0x1)*(right-ind+0x1);if(left<=ind-0x1)que[que['length']]=[left,ind-0x1,i+0x1];if(ind+0x1<=right)que[que['length']]=[ind+0x1,right,i+0x1];}console['log'](sum);", "test_cases": [["3\n2 1 3", "9"], ["4\n1 3 2 4", "19"], ["8\n5 4 8 1 2 6 7 3", "85"]], "original": "'use strict';\n\nconst lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nconst N = +lines[0];\nconst A = lines[1].split(' ');\n\nlet indices = [];\nfor (let i = 0; i < N; i++) {\n\tA[i] = +A[i];\n\tindices[indices.length] = i;\n}\n\nindices = indices.sort((a, b) => A[a] - A[b]);\n\nlet sum = 0,\n\tque = [[0, N - 1, 0]];\n\nwhile (que.length > 0) {\n\tlet lri = que.shift(),\n\t\tleft = lri[0],\n\t\tright = lri[1],\n\t\tindex = lri[2];\n\t\n\tif (left > right) continue;\n\t\n\tlet i = index;\n\twhile (indices[i] < left || indices[i] > right) i++;\n\tlet ind = indices[i];\n\t\n\tsum += A[ind] * (ind - left + 1) * (right - ind + 1);\n\tif (left <= ind - 1) que[que.length] = [left, ind - 1, i + 1];\n\tif (ind + 1 <= right) que[que.length] = [ind + 1, right, i + 1];\n}\n\nconsole.log(sum);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 697, "deobfuscated": "'use strict';\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nconst N = +lines[0];\nconst A = lines[1].split(\" \");\nlet indices = [];\nfor (let i = 0; i < N; i++) {\n  A[i] = +A[i];\n  indices[indices.length] = i;\n}\nindices = indices.sort((a, b) => A[a] - A[b]);\nlet sum = 0;\nlet que = [[0, N - 1, 0]];\nwhile (que.length > 0) {\n  let lri = que.shift();\n  let left = lri[0];\n  let right = lri[1];\n  let index = lri[2];\n  if (left > right) {\n    continue;\n  }\n  let i = index;\n  while (indices[i] < left || indices[i] > right) {\n    i++;\n  }\n  let ind = indices[i];\n  sum += A[ind] * (ind - left + 1) * (right - ind + 1);\n  if (left <= ind - 1) {\n    que[que.length] = [left, ind - 1, i + 1];\n  }\n  if (ind + 1 <= right) {\n    que[que.length] = [ind + 1, right, i + 1];\n  }\n}\nconsole.log(sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8685135138247844, "ngram_match_score": 0.747042625718813, "weighted_ngram_match_score": 0.813757491816206, "syntax_match_score": 0.9343065693430657, "dataflow_match_score": 0.9789473684210527}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0008183426058384624, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.019230769230769162, "new_decrease_halstead_effort": -0.019230769230769162}}
{"filename": "p04047_1", "type": "JavaScript", "obfuscated": "const main=input=>{const data=input['split'](/\\n/);const num=data[0x0];const hoge=data[0x1]['split'](/\\s/)['map'](a=>parseInt(a,0xa))['sort']((a,b)=>{if(a<b)return 0x1;if(a>b)return-0x1;return 0x0;});var res=0x0;for(i=0x0;i<num;i++){res+=hoge[i*0x2+0x1];}console['log'](res);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 3 1 2", "3"], ["5\n100 1 2 3 14 15 58 58 58 29", "135"]], "original": "const main = (input) =>  {\n  const data = input.split(/\\n/);\n  const num = data[0]\n  const hoge = data[1].split(/\\s/).map((a) => parseInt(a, 10)).sort((a, b) => {\n    if (a < b ) return 1;\n    if (a > b ) return -1;\n    return 0;\n  })\n  var res = 0;\n  for (i = 0; i < num; i ++ ) {\n    res += (hoge[i*2 + 1]);\n  }\n  console.log(res)\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 698, "deobfuscated": "const main = input => {\n  const data = input.split(/\\n/);\n  const num = data[0];\n  const hoge = data[1].split(/\\s/).map(a => parseInt(a, 10)).sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return -1;\n    }\n    return 0;\n  });\n  var res = 0;\n  for (i = 0; i < num; i++) {\n    res += hoge[i * 2 + 1];\n  }\n  console.log(res);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6686629845686649, "ngram_match_score": 0.4833758214476535, "weighted_ngram_match_score": 0.5112761168270062, "syntax_match_score": 0.68, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00013_1", "type": "JavaScript", "obfuscated": "q=[];require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['some'](function(i){i!=0x0?q['push'](i):console['log'](q['pop']());});", "test_cases": [["1\n6\n0\n8\n10\n0\n0\n0", "6\n10\n8\n1"]], "original": "q=[];require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){i!=0?q.push(i):console.log(q.pop())})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 699, "deobfuscated": "q = [];\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").some(function (i) {\n  if (i != 0) {\n    q.push(i);\n  } else {\n    console.log(q.pop());\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4473684210526316, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.7894736842105263, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 1.0, "length_score": -1.0, "increase_maintainability": -0.15365627330287124, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.023809523809523725, "new_decrease_halstead_effort": -0.18509751165164934}}
{"filename": "p00050_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin','utf8')['replace'](/apple/,'\\x09')['replace'](/peach/,'apple')['replace'](/\\t/,'peach')['trim']());", "test_cases": [["the cost of one peach is higher than that of one apple.", "the cost of one apple is higher than that of one peach."]], "original": "console.log(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").replace(/apple/,'\\t').replace(/peach/,'apple').replace(/\\t/,'peach').trim())", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 700, "deobfuscated": "console.log(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").replace(/apple/, \"\\t\").replace(/peach/, \"apple\").replace(/\\t/, \"peach\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 1.0, "dataflow_match_score": 0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00058_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);(function(x1,y1,x2,y2,x3,y3,x4,y4){var k1;var k2;if(x2-x1!==0x0)k1=((y2-y1)/(x2-x1))['toFixed'](0xb);else k1=Infinity;if(x4-x3!==0x0)k2=(y4-y3)/(x4-x3)['toFixed'](0xb);else k2=Infinity;var ans='NO';if(k1==0x0&&k2==Infinity)ans='YES';if(k2==0x0&&k1==Infinity)ans='YES';if(k1==-0x1*k2&&(k1!=0x0&&k2!=0x0))ans='YES';console['log'](ans);}['apply'](null,arr));}", "test_cases": [["1.0 1.0 2.0 2.0 0.0 0.0 1.0 -1.0\n0.0 0.0 2.0 0.0 -1.0 2.0 2.0 2.0\n10.0 6.0 3.4 5.2 6.8 9.5 4.3 2.1\n2.5 3.5 2.5 4.5 -3.3 -2.3 6.8 -2.3", "YES\nNO\nNO\nYES"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   (function(x1, y1, x2, y2, x3, y3, x4, y4){\n      var k1;\n      var k2;\n      if(x2-x1!==0)k1=((y2-y1)/(x2-x1)).toFixed(11);\n      else k1=Infinity;\n      if(x4-x3!==0)k2=(y4-y3)/(x4-x3).toFixed(11);\n      else k2=Infinity;\n      var ans=\"NO\";\n      if(k1==0 && k2==Infinity)ans=\"YES\";\n      if(k2==0 && k1==Infinity)ans=\"YES\";\n      if(k1==(-1*k2) && (k1!=0 && k2!=0))ans=\"YES\";\n      console.log(ans);\n   }).apply(null,arr);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 701, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  (function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    var k1;\n    var k2;\n    if (x2 - x1 !== 0) {\n      k1 = ((y2 - y1) / (x2 - x1)).toFixed(11);\n    } else {\n      k1 = Infinity;\n    }\n    if (x4 - x3 !== 0) {\n      k2 = (y4 - y3) / (x4 - x3).toFixed(11);\n    } else {\n      k2 = Infinity;\n    }\n    var ans = \"NO\";\n    if (k1 == 0 && k2 == Infinity) {\n      ans = \"YES\";\n    }\n    if (k2 == 0 && k1 == Infinity) {\n      ans = \"YES\";\n    }\n    if (k1 == k2 * -1 && k1 != 0 && k2 != 0) {\n      ans = \"YES\";\n    }\n    console.log(ans);\n  }).apply(null, arr);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5165896968413091, "ngram_match_score": 0.06800913183865562, "weighted_ngram_match_score": 0.22599193194934508, "syntax_match_score": 0.7723577235772358, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00070_1", "type": "JavaScript", "obfuscated": "function perm(xs,n,s,callback){var x,i,len=xs['length'];s=s||[];if(n===0x0){callback(s);}else{for(i=0x0;i<len;i++){x=xs['shift']();s['push'](x);perm(xs,n-0x1,s,callback);s['pop']();xs['push'](x);}}}function main(){input['forEach'](function(line){var n,s,r=0x0;if(line['trim']()==='')return;line=line['split']('\\x20')['map'](parseFloat);n=line[0x0];s=line[0x1];perm([0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9],n,[],function(xs){r+=xs['reduce'](function(m,x,i){return m+x*(i+0x1);},0x0)===s?0x1:0x0;});console['log'](r);});}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["3 10\n3 1", "8\n0"]], "original": "function perm(xs, n, s, callback) {\n  var\n  x, i, len = xs.length;\n  s = s || [];\n  if(n === 0) {\n    callback(s);\n  }else{\n    for(i = 0; i < len; i++){\n      x = xs.shift();\n      s.push(x);\n      perm(xs, n - 1, s, callback);\n      s.pop();\n      xs.push(x);\n    }\n  }\n}\n\nfunction main() {\n  input.forEach(function(line) {\n    var\n    n, s,\n    r = 0;\n    if(line.trim() === '') return;\n    line = line.split(' ').map(parseFloat);\n    n = line[0]; s = line[1];\n    perm([0,1,2,3,4,5,6,7,8,9], n, [], function(xs) {\n      r += xs.reduce(function(m, x, i) {\n        return m + x * (i + 1);\n      }, 0) === s ? 1 : 0;\n    });\n    console.log(r);\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 702, "deobfuscated": "function perm(xs, n, s, callback) {\n  var x;\n  var i;\n  var len = xs.length;\n  s = s || [];\n  if (n === 0) {\n    callback(s);\n  } else {\n    for (i = 0; i < len; i++) {\n      x = xs.shift();\n      s.push(x);\n      perm(xs, n - 1, s, callback);\n      s.pop();\n      xs.push(x);\n    }\n  }\n}\nfunction main() {\n  input.forEach(function (line) {\n    var n;\n    var s;\n    var r = 0;\n    if (line.trim() === \"\") {\n      return;\n    }\n    line = line.split(\" \").map(parseFloat);\n    n = line[0];\n    s = line[1];\n    perm([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], n, [], function (xs) {\n      r += xs.reduce(function (m, x, i) {\n        return m + x * (i + 1);\n      }, 0) === s ? 1 : 0;\n    });\n    console.log(r);\n  });\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7584809332262477, "ngram_match_score": 0.5013970016903562, "weighted_ngram_match_score": 0.6153292789853352, "syntax_match_score": 0.9171974522292994, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0008322594755822976, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.019323671497584627, "new_decrease_halstead_effort": -0.019323671497584627}}
{"filename": "p02241_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};A=require('fs')['readFileSync'](config['input'],'ascii')['trim']()['split'](config['newline'])['map'](function(line){return line['trim']()['split']('\\x20')['map'](Number);});n=Number(A['shift']()[0x0]);cnt=0x1;cost=0x0;conn=new Array(n);conn[0x0]=!![];for(i=0x1;i<n;i++)conn[i]=![];while(cnt<n){min=Number['MAX_SAFE_INTEGER'];for(i in conn){if(!conn[i])continue;Ai=A[i];for(j in conn){if(conn[j])continue;if(Ai[j]!==-0x1&&Ai[j]<min){min=Ai[j];min_j=j;}}}conn[min_j]=!![];cost+=min;cnt++;}console['log'](cost);", "test_cases": [["5\n -1 2 3 1 -1\n 2 -1 -1 4 -1\n 3 -1 -1 1 1\n 1 4 1 -1 3\n -1 -1 1 3 -1", "5"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nA = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline)\n  .map(function (line) { return line.trim().split(' ').map(Number); });\nn = Number(A.shift()[0]);\n\ncnt = 1;\ncost = 0;\nconn = new Array(n);\nconn[0] = true;\nfor (i = 1; i < n; i++) conn[i] = false;\n\nwhile (cnt < n) {\n  min = Number.MAX_SAFE_INTEGER;\n  for (i in conn) {\n    if (!conn[i]) continue;\n    Ai = A[i];\n    for (j in conn) {\n      if (conn[j]) continue;\n      if (Ai[j] !== -1 && Ai[j] < min) {\n        min = Ai[j];\n        min_j = j;\n      }\n    }\n  }\n  conn[min_j] = true;\n  cost += min;\n  cnt++;\n}\n\nconsole.log(cost);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 703, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nA = require(\"fs\").readFileSync(config.input, \"ascii\").trim().split(config.newline).map(function (line) {\n  return line.trim().split(\" \").map(Number);\n});\nn = Number(A.shift()[0]);\ncnt = 1;\ncost = 0;\nconn = new Array(n);\nconn[0] = true;\nfor (i = 1; i < n; i++) {\n  conn[i] = false;\n}\nwhile (cnt < n) {\n  min = Number.MAX_SAFE_INTEGER;\n  for (i in conn) {\n    if (!conn[i]) {\n      continue;\n    }\n    Ai = A[i];\n    for (j in conn) {\n      if (conn[j]) {\n        continue;\n      }\n      if (Ai[j] !== -1 && Ai[j] < min) {\n        min = Ai[j];\n        min_j = j;\n      }\n    }\n  }\n  conn[min_j] = true;\n  cost += min;\n  cnt++;\n}\nconsole.log(cost);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8268256237614351, "ngram_match_score": 0.6902074886623548, "weighted_ngram_match_score": 0.7018407690952498, "syntax_match_score": 0.9152542372881356, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.048484848484848464, "new_decrease_halstead_effort": 0.14164793141361864}}
{"filename": "p02720_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const k=parseInt(input[0x0]);let i=0x1;let runruncounter=0x0;while(!![]){const j=(i+'')['split']('')['map'](a=>parseInt(a));let judge=!![];for(let l=0x1;l<j['length'];l++){if(Math['abs'](j[l]-j[l-0x1])>0x1){judge=![];if(j[l]===0x9){j[l-0x1]+=0x1;j[l]=0x0;}else{j[l]+=0x1;}i=parseInt(j['join'](''));break;}}if(judge){runruncounter++;if(runruncounter===k){console['log'](i);break;}i++;}}}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["15", "23"], ["1", "1"], ["13", "21"], ["100000", "3234566667"]], "original": "\"use strict\";\nfunction main(input) {\n  const k = parseInt(input[0]);\n  let i = 1;\n  let runruncounter = 0;\n  while(true){\n    const j =  (i+\"\").split(\"\").map(a => parseInt(a));\n    let judge = true;\n\n    for(let l=1;l<j.length;l++){\n      //console.log(i);\n      if(Math.abs(j[l]-j[l-1])>1){\n        judge = false;\n        if(j[l]===9){\n          j[l-1]+=1;\n          j[l]=0;\n        }else{\n          j[l]+=1;\n        }\n        //console.log(i +\" \" + j + \" \" + runruncounter  )\n        i = parseInt(j.join(\"\"));\n        break;\n      }\n    }\n\n    if(judge){\n      runruncounter++;\n      if(runruncounter===k){\n        console.log(i);\n        break;\n      }\n      i++;\n    }\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 704, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const k = parseInt(input[0]);\n  let i = 1;\n  let runruncounter = 0;\n  while (true) {\n    const j = (i + \"\").split(\"\").map(a => parseInt(a));\n    let judge = true;\n    for (let l = 1; l < j.length; l++) {\n      if (Math.abs(j[l] - j[l - 1]) > 1) {\n        judge = false;\n        if (j[l] === 9) {\n          j[l - 1] += 1;\n          j[l] = 0;\n        } else {\n          j[l] += 1;\n        }\n        i = parseInt(j.join(\"\"));\n        break;\n      }\n    }\n    if (judge) {\n      runruncounter++;\n      if (runruncounter === k) {\n        console.log(i);\n        break;\n      }\n      i++;\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6965164273764997, "ngram_match_score": 0.31925217089771296, "weighted_ngram_match_score": 0.46681353860828584, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009151994401641161, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05517241379310345, "new_decrease_halstead_effort": 0.18133539509384378}}
{"filename": "p02845_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var N=parseInt(input[0x0][0x0],0xa);var RGBWithoutOrder=[0x1,0x0,0x0];var tmp1,tmp2,flag;var ans=0x3;for(var i=0x1;i<N;i++){tmp2=0x0;tmp1=parseInt(input[0x1][i],0xa);for(var x of RGBWithoutOrder){if(x===tmp1)tmp2++;}ans*=tmp2;ans%=0x3b9aca00+0x7;for(var j=0x0;j<0x3;j++){if(RGBWithoutOrder[j]===tmp1){RGBWithoutOrder[j]++;break;}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n0 1 2 3 4 5", "3"], ["3\n0 0 0", "6"], ["54\n0 0 1 0 1 2 1 2 3 2 3 3 4 4 5 4 6 5 7 8 5 6 6 7 7 8 8 9 9 10 10 11 9 12 10 13 14 11 11 12 12 13 13 14 14 15 15 15 16 16 16 17 17 17", "115295190"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n    var N = parseInt(input[0][0], 10);\n    var RGBWithoutOrder = [1, 0, 0];\n    var tmp1, tmp2, flag;\n    var ans = 3;\n    for (var i = 1; i < N; i++){\n        tmp2 = 0;\n        tmp1 = parseInt(input[1][i], 10);\n        for (var x of RGBWithoutOrder){\n            if (x === tmp1) tmp2 ++;\n        }\n        ans *= tmp2;\n        ans %= (1e+9 + 7);\n\n        for (var j = 0; j < 3; j++){\n            if (RGBWithoutOrder[j] === tmp1){\n                RGBWithoutOrder[j] ++;\n                break;\n            }\n        }\n    }\n    console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 705, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var N = parseInt(input[0][0], 10);\n  var RGBWithoutOrder = [1, 0, 0];\n  var tmp1;\n  var tmp2;\n  var flag;\n  var ans = 3;\n  for (var i = 1; i < N; i++) {\n    tmp2 = 0;\n    tmp1 = parseInt(input[1][i], 10);\n    for (var x of RGBWithoutOrder) {\n      if (x === tmp1) {\n        tmp2++;\n      }\n    }\n    ans *= tmp2;\n    ans %= 1000000007;\n    for (var j = 0; j < 3; j++) {\n      if (RGBWithoutOrder[j] === tmp1) {\n        RGBWithoutOrder[j]++;\n        break;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.74861963832068, "ngram_match_score": 0.6151654391823539, "weighted_ngram_match_score": 0.668828920422895, "syntax_match_score": 0.8673469387755102, "dataflow_match_score": 0.8431372549019608}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.001885356284144546, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0567037019636214}}
{"filename": "p03054_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split'](/\\s+/);var H=input['shift']()-0x0;var W=input['shift']()-0x0;var N=input['shift']()-0x0;var sr=input['shift']()-0x0;var sc=input['shift']()-0x0;var S=input['shift']();var T=input['shift']();var dp=[[sc,sc,sr,sr]];for(let i=0x0;i<N;i++){dp[i+0x1]=[];dp[i+0x1][0x0]=dp[i][0x0]-(S[i]==='L'?0x1:0x0);dp[i+0x1][0x1]=dp[i][0x1]+(S[i]==='R'?0x1:0x0);dp[i+0x1][0x2]=dp[i][0x2]-(S[i]==='U'?0x1:0x0);dp[i+0x1][0x3]=dp[i][0x3]+(S[i]==='D'?0x1:0x0);if(dp[i+0x1][0x0]===0x0||dp[i+0x1][0x1]===W+0x1||dp[i+0x1][0x2]===0x0||dp[i+0x1][0x3]===H+0x1){console['log']('NO');return;}dp[i+0x1][0x0]=Math['min'](dp[i+0x1][0x0]+(T[i]==='R'?0x1:0x0),W);dp[i+0x1][0x1]=Math['max'](dp[i+0x1][0x1]-(T[i]==='L'?0x1:0x0),0x1);dp[i+0x1][0x2]=Math['min'](dp[i+0x1][0x2]+(T[i]==='D'?0x1:0x0),H);dp[i+0x1][0x3]=Math['max'](dp[i+0x1][0x3]-(T[i]==='U'?0x1:0x0),0x1);}console['log']('YES');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 3\n2 2\nRRL\nLUD", "YES"], ["4 3 5\n2 2\nUDRRR\nLLDUD", "NO"], ["5 6 11\n2 1\nRLDRRUDDLRL\nURRDRLLDLRD", "NO"]], "original": "'use strict'\nfunction Main(input){\n  input=input.split(/\\s+/);\n  var H=input.shift()-0;\n  var W=input.shift()-0;\n  var N=input.shift()-0;\n  var sr=input.shift()-0;\n  var sc=input.shift()-0;\n  var S=input.shift();\n  var T=input.shift();\n  var dp=[[sc,sc,sr,sr]];\n  for(let i=0;i<N;i++){\n    dp[i+1]=[];\n    dp[i+1][0]=dp[i][0]-(S[i]==='L'?1:0);\n    dp[i+1][1]=dp[i][1]+(S[i]==='R'?1:0);\n    dp[i+1][2]=dp[i][2]-(S[i]==='U'?1:0);\n    dp[i+1][3]=dp[i][3]+(S[i]==='D'?1:0);\n    if(dp[i+1][0]===0||dp[i+1][1]===W+1||dp[i+1][2]===0||dp[i+1][3]===H+1){\n      console.log('NO');\n      return;\n    }\n    dp[i+1][0]=Math.min(dp[i+1][0]+(T[i]==='R'?1:0), W)\n    dp[i+1][1]=Math.max(dp[i+1][1]-(T[i]==='L'?1:0), 1)\n    dp[i+1][2]=Math.min(dp[i+1][2]+(T[i]==='D'?1:0), H)\n    dp[i+1][3]=Math.max(dp[i+1][3]-(T[i]==='U'?1:0), 1)\n  }\n  console.log('YES');\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 706, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(/\\s+/);\n  var H = input.shift() - 0;\n  var W = input.shift() - 0;\n  var N = input.shift() - 0;\n  var sr = input.shift() - 0;\n  var sc = input.shift() - 0;\n  var S = input.shift();\n  var T = input.shift();\n  var dp = [[sc, sc, sr, sr]];\n  for (let i = 0; i < N; i++) {\n    dp[i + 1] = [];\n    dp[i + 1][0] = dp[i][0] - (S[i] === \"L\" ? 1 : 0);\n    dp[i + 1][1] = dp[i][1] + (S[i] === \"R\" ? 1 : 0);\n    dp[i + 1][2] = dp[i][2] - (S[i] === \"U\" ? 1 : 0);\n    dp[i + 1][3] = dp[i][3] + (S[i] === \"D\" ? 1 : 0);\n    if (dp[i + 1][0] === 0 || dp[i + 1][1] === W + 1 || dp[i + 1][2] === 0 || dp[i + 1][3] === H + 1) {\n      console.log(\"NO\");\n      return;\n    }\n    dp[i + 1][0] = Math.min(dp[i + 1][0] + (T[i] === \"R\" ? 1 : 0), W);\n    dp[i + 1][1] = Math.max(dp[i + 1][1] - (T[i] === \"L\" ? 1 : 0), 1);\n    dp[i + 1][2] = Math.min(dp[i + 1][2] + (T[i] === \"D\" ? 1 : 0), H);\n    dp[i + 1][3] = Math.max(dp[i + 1][3] - (T[i] === \"U\" ? 1 : 0), 1);\n  }\n  console.log(\"YES\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.504991191294266, "ngram_match_score": 0.0028352667448330498, "weighted_ngram_match_score": 0.017129498432230578, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03168_1", "type": "JavaScript", "obfuscated": "console['log'](function(args){const tmp=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20'));const N=tmp['shift']()[0x0]|0x0;const p=tmp[0x0]['map'](parseFloat);const dp=Array(N)['fill'](0x0)['map'](r=>Array(N+0x1)['fill'](0x0));dp[0x0][0x0]=0x1-p[0x0];dp[0x0][0x1]=p[0x0];for(let i=0x0;i<N-0x1;i++){for(let j=0x0;j<=i+0x1;j++){dp[i+0x1][j+0x1]+=dp[i][j]*p[i+0x1];dp[i+0x1][j]+=dp[i][j]*(0x1-p[i+0x1]);}}return dp[N-0x1]['slice']((N+0x1)/0x2)['reduce']((a,b)=>a+b)['toString']();}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n0.30 0.60 0.80", "0.612"], ["1\n0.50", "0.5"], ["5\n0.42 0.01 0.42 0.99 0.42", "0.3821815872"]], "original": "console.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ') );\n  const N = tmp.shift()[0]|0;\n  const p = tmp[0].map(parseFloat);\n  const dp = Array(N).fill(0).map(r=>Array(N+1).fill(.0));\n  dp[0][0] = 1.0 - p[0];\n  dp[0][1] = p[0];\n  for ( let i = 0; i < N-1; i++ ) {\n    for ( let j = 0; j <= i + 1; j++ ) {\n      dp[i+1][j+1] += dp[i][j] * p[i+1];\n      dp[i+1][j] += dp[i][j] * (1.0-p[i+1]);\n    }\n  }\n  return dp[N-1].slice((N+1)/2).reduce((a,b)=>a+b).toString();\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 707, "deobfuscated": "console.log(function (args) {\n  const tmp = args.trim().split(\"\\n\").map(r => r.split(\" \"));\n  const N = tmp.shift()[0] | 0;\n  const p = tmp[0].map(parseFloat);\n  const dp = Array(N).fill(0).map(r => Array(N + 1).fill(0));\n  dp[0][0] = 1 - p[0];\n  dp[0][1] = p[0];\n  for (let i = 0; i < N - 1; i++) {\n    for (let j = 0; j <= i + 1; j++) {\n      dp[i + 1][j + 1] += dp[i][j] * p[i + 1];\n      dp[i + 1][j] += dp[i][j] * (1 - p[i + 1]);\n    }\n  }\n  return dp[N - 1].slice((N + 1) / 2).reduce((a, b) => a + b).toString();\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.570874738149273, "ngram_match_score": 0.2732417736303162, "weighted_ngram_match_score": 0.3948725635821606, "syntax_match_score": 1.0, "dataflow_match_score": 0.6153846153846154}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03173_1", "type": "JavaScript", "obfuscated": "'use strict';(function(input){input=input['trim']()['split'](/\\s+/)['map'](x=>x-0x0);const N=input['shift']();const a=input;var ans=0x0;while(a['length']>0x1){let x=a['splice'](a['indexOf'](Math['min']['apply'](null,a)),0x1)[0x0];let y=a['splice'](a['indexOf'](Math['min']['apply'](null,a)),0x1)[0x0];a['push'](x+y);ans+=x+y;}console['log'](ans);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4\n10 20 30 40", "190"], ["5\n10 10 10 10 10", "120"], ["3\n1000000000 1000000000 1000000000", "5000000000"], ["6\n7 6 8 6 1 1", "68"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const N=input.shift();\n  const a=input;\n  \n  var ans=0;\n  while(a.length>1){\n    let x=a.splice(a.indexOf(Math.min.apply(null,a)),1)[0];\n    let y=a.splice(a.indexOf(Math.min.apply(null,a)),1)[0];\n    a.push(x+y);\n    ans+=x+y;\n  }\n  \n  console.log(ans);\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 708, "deobfuscated": "'use strict';\n\n(function (input) {\n  input = input.trim().split(/\\s+/).map(x => x - 0);\n  const N = input.shift();\n  const a = input;\n  var ans = 0;\n  while (a.length > 1) {\n    let x = a.splice(a.indexOf(Math.min.apply(null, a)), 1)[0];\n    let y = a.splice(a.indexOf(Math.min.apply(null, a)), 1)[0];\n    a.push(x + y);\n    ans += x + y;\n  }\n  console.log(ans);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5130975600190179, "ngram_match_score": 0.012650662740918714, "weighted_ngram_match_score": 0.03973957733515268, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03268_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a');const line0=input[0x0]['split']('\\x20');let N=parseInt(line0[0x0]);let K=parseInt(line0[0x1]);if(K%0x2===0x0){console['log'](Math['floor'](N/K)**0x3+Math['floor']((N+K/0x2)/K)**0x3);}else{console['log'](Math['floor'](N/K)**0x3);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2", "9"], ["5 3", "1"], ["31415 9265", "27"], ["35897 932", "114191"]], "original": "\"use strict\";\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const line0 = input[0].split(\" \");\n  let N = parseInt(line0[0]);\n  let K = parseInt(line0[1]);\n  if (K % 2 === 0) {\n    console.log(Math.floor(N / K) ** 3 + Math.floor((N + K / 2) / K) ** 3);\n  } else {\n    console.log(Math.floor(N / K) ** 3);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 709, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const line0 = input[0].split(\" \");\n  let N = parseInt(line0[0]);\n  let K = parseInt(line0[1]);\n  if (K % 2 === 0) {\n    console.log(Math.floor(N / K) ** 3 + Math.floor((N + K / 2) / K) ** 3);\n  } else {\n    console.log(Math.floor(N / K) ** 3);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9819868445677541, "ngram_match_score": 0.9626001672056171, "weighted_ngram_match_score": 0.9653472110653992, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03347_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [N,...A]=args['trim']()['split']('\\x0a')['map'](v=>v|0x0);if(A[0x0]>0x0)return'-1';let m=0x0;for(let i=0x1;i<N;i++){if(A[i]>i||A[i]>A[i-0x1]+0x1)return'-1';if(A[i]===A[i-0x1]+0x1)m++;else if(A[i]<=A[i-0x1])m+=A[i];}return''+m;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4\n0\n1\n1\n2", "3"], ["3\n1\n2\n1", "-1"], ["9\n0\n1\n1\n0\n1\n2\n2\n1\n2", "8"]], "original": "console.log((args=>{\n  const [N,...A] = args.trim().split('\\n').map(v=>v|0);\n  if ( A[0] > 0 ) return '-1';\n  let m = 0;\n  for ( let i = 1; i < N; i++ ) {\n    if ( A[i] > i || A[i] > A[i-1]+1) return '-1'\n    if ( A[i] === A[i-1]+1 ) m++;\n    else if ( A[i] <= A[i-1] ) m += A[i];\n  }\n  return `${m}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 710, "deobfuscated": "console.log((args => {\n  const [N, ...A] = args.trim().split(\"\\n\").map(v => v | 0);\n  if (A[0] > 0) {\n    return \"-1\";\n  }\n  let m = 0;\n  for (let i = 1; i < N; i++) {\n    if (A[i] > i || A[i] > A[i - 1] + 1) {\n      return \"-1\";\n    }\n    if (A[i] === A[i - 1] + 1) {\n      m++;\n    } else if (A[i] <= A[i - 1]) {\n      m += A[i];\n    }\n  }\n  return \"\" + m;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5469504499791056, "ngram_match_score": 0.2025105336244068, "weighted_ngram_match_score": 0.27908181309461044, "syntax_match_score": 0.7831325301204819, "dataflow_match_score": 0.9230769230769231}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03464_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[K],A]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>v|0x0));let min=0x2,max=0x3;for(let i=K-0x2;i>=0x0;i--){if(max+A[i+0x1]-0x1<A[i])return'-1';min=Math['ceil'](min/A[i])*A[i];max=Math['floor'](max/A[i])*A[i]+A[i]-0x1;}return min+'\\x20'+max;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4\n3 4 3 2", "6 8"], ["5\n3 4 100 3 2", "-1"], ["10\n2 2 2 2 2 2 2 2 2 2", "2 3"]], "original": "console.log((args=>{\n  const [[K],A] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let min = 2, max = 3;\n  for ( let i = K-2; i >= 0; i-- ) {\n    if ( max + A[i+1] - 1 < A[i] ) return '-1';\n    min = Math.ceil(min/A[i])*A[i];\n    max = Math.floor(max/A[i])*A[i] + A[i] - 1;\n  }\n  return `${min} ${max}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 711, "deobfuscated": "console.log((args => {\n  const [[K], A] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  let min = 2;\n  let max = 3;\n  for (let i = K - 2; i >= 0; i--) {\n    if (max + A[i + 1] - 1 < A[i]) {\n      return \"-1\";\n    }\n    min = Math.ceil(min / A[i]) * A[i];\n    max = Math.floor(max / A[i]) * A[i] + A[i] - 1;\n  }\n  return min + \" \" + max;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5551103814447307, "ngram_match_score": 0.16018539308247184, "weighted_ngram_match_score": 0.24630264432435794, "syntax_match_score": 0.813953488372093, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03617_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var [q,h,s,d]=nexts(0x4);var n=next();if(q*0x2<h)h=q*0x2;if(h*0x2<s)s=h*0x2;if(s*0x2<d)d=s*0x2;return BigInt(n/0x2|0x0)*BigInt(d)+BigInt((n&0x1)*s);}", "test_cases": [["20 30 70 90\n3", "150"], ["10000 1000 100 10\n1", "100"], ["10 100 1000 10000\n1", "40"], ["12345678 87654321 12345678 87654321\n123456789", "1524157763907942"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var [q,h,s,d] = nexts(4);\n  var n = next();\n  if(q*2 < h)h = q*2;\n  if(h*2 < s)s = h*2;\n  if(s*2 < d)d = s*2;\n  return BigInt(n/2|0)*BigInt(d) + BigInt((n&1)*s);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 712, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var [q, h, s, d] = nexts(4);\n  var n = next();\n  if (q * 2 < h) {\n    h = q * 2;\n  }\n  if (h * 2 < s) {\n    s = h * 2;\n  }\n  if (s * 2 < d) {\n    d = s * 2;\n  }\n  return BigInt(n / 2 | 0) * BigInt(d) + BigInt((n & 1) * s);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5172204057268184, "ngram_match_score": 0.03846296019803936, "weighted_ngram_match_score": 0.15021032937590062, "syntax_match_score": 0.8802083333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0714285714285714, "length_score": -0.0714285714285714, "increase_maintainability": -0.014171112914237338, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02371541501976293, "new_decrease_halstead_effort": 0.023889335448044835}}
{"filename": "p03637_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=parseInt(input[0x0]);tmp=input[0x1]['split']('\\x20');a=new Array(n);var odd=0x0;var even=0x0;var four=0x0;for(i=0x0;i<n;i++){a[i]=parseInt(tmp[i]);if(a[i]%0x4==0x0){four++;}else if(a[i]%0x2==0x0){even++;}else{odd++;}}var ans='No';if(odd<=four){ans='Yes';}else if(four+0x1==odd&&even==0x0){ans='Yes';}console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n1 10 100", "Yes"], ["4\n1 2 3 4", "No"], ["3\n1 4 1", "Yes"], ["2\n1 1", "No"], ["6\n2 7 1 8 2 8", "Yes"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  tmp = input[1].split(\" \");\n  a = new Array(n);\n  var odd=0;\n  var even=0;\n  var four=0;\n  for(i=0;i<n;i++){\n    a[i]=parseInt(tmp[i]);\n    if(a[i]%4==0){\n      four++;\n    }else if(a[i]%2==0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  var ans =\"No\";\n  if(odd<=four){\n    ans=\"Yes\";\n  }else if(four+1==odd&&even==0){\n    ans=\"Yes\";\n  }\n\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 713, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  tmp = input[1].split(\" \");\n  a = new Array(n);\n  var odd = 0;\n  var even = 0;\n  var four = 0;\n  for (i = 0; i < n; i++) {\n    a[i] = parseInt(tmp[i]);\n    if (a[i] % 4 == 0) {\n      four++;\n    } else if (a[i] % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  var ans = \"No\";\n  if (odd <= four) {\n    ans = \"Yes\";\n  } else if (four + 1 == odd && even == 0) {\n    ans = \"Yes\";\n  }\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6943722670380342, "ngram_match_score": 0.2460363675002932, "weighted_ngram_match_score": 0.5314527006518438, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03778_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['split']('\\x20')['map'](v=>parseInt(v));const W=input[0x0];const a=input[0x1];const b=input[0x2];const aw=a+W;const bw=b+W;let arr=[];if(a<=b){arr=[a,aw,b,bw];}else{arr=[b,bw,a,aw];}if(arr[0x1]<arr[0x2]){console['log'](arr[0x2]-arr[0x1]);}else{console['log'](0x0);}};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));", "test_cases": [["3 2 6", "1"], ["3 1 3", "0"], ["5 10 1", "4"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split(' ').map(v => parseInt(v))\n    const W = input[0]\n    const a = input[1]\n    const b = input[2]\n    const aw = a + W\n    const bw = b + W\n\n    let arr = []\n    if(a <= b){\n        arr = [a, aw, b, bw]\n    }else{\n        arr = [b, bw, a, aw]\n    }\n    if(arr[1] < arr[2]){\n        console.log(arr[2] - arr[1])\n    }else{\n        console.log(0)\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 714, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.split(\" \").map(v => parseInt(v));\n  const W = input[0];\n  const a = input[1];\n  const b = input[2];\n  const aw = a + W;\n  const bw = b + W;\n  let arr = [];\n  if (a <= b) {\n    arr = [a, aw, b, bw];\n  } else {\n    arr = [b, bw, a, aw];\n  }\n  if (arr[1] < arr[2]) {\n    console.log(arr[2] - arr[1]);\n  } else {\n    console.log(0);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.565439043121302, "ngram_match_score": 0.2874637904159405, "weighted_ngram_match_score": 0.33091002912809114, "syntax_match_score": 0.9375, "dataflow_match_score": 0.7058823529411765}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03815_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');let x=Number(input[0x0]['split']('\\x20')[0x0]);if(x%0xb>0x6){console['log'](Math['floor'](x/0xb)*0x2+0x2);}else if(x%0xb>0x0){console['log'](Math['floor'](x/0xb)*0x2+0x1);}else{console['log'](Math['floor'](x/0xb)*0x2);}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7", "2"], ["149696127901", "27217477801"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet x = Number(input[0].split(' ')[0])\n\tif(x % 11 > 6) {\n\t\tconsole.log(Math.floor(x / 11) * 2 + 2)\n\t} else if(x % 11 > 0) {\n\t\tconsole.log(Math.floor(x / 11) * 2 + 1)\n\t} else {\n\t\tconsole.log(Math.floor(x / 11) * 2)\n\t}\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 715, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  let x = Number(input[0].split(\" \")[0]);\n  if (x % 11 > 6) {\n    console.log(Math.floor(x / 11) * 2 + 2);\n  } else if (x % 11 > 0) {\n    console.log(Math.floor(x / 11) * 2 + 1);\n  } else {\n    console.log(Math.floor(x / 11) * 2);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7429360064079967, "ngram_match_score": 0.6397641948735671, "weighted_ngram_match_score": 0.6728889216675108, "syntax_match_score": 1.0, "dataflow_match_score": 0.6590909090909091}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03946_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x0]['split']('\\x20');var n=parseInt(tmp[0x0]);a=new Array(n)['fill'](0x0);for(i=0x0;i<n;i++){a[i]=parseInt(input[0x1]['split']('\\x20')[i]);}b=new Array(n)['fill'](0x0);var min=Math['pow'](0xa,0x9);var max=-0x1;for(i=0x0;i<n;i++){min=Math['min'](min,a[i]);if(max<a[i]-min){ans=0x1;}if(max==a[i]-min){ans++;}max=Math['max'](max,a[i]-min);}console['log']('%s',ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n100 50 200", "1"], ["5 8\n50 30 40 10 20", "2"], ["10 100\n7 10 4 5 9 3 6 8 2 1", "2"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var n = parseInt(tmp[0]);\n  a = new Array(n).fill(0);\n  for(i=0;i<n;i++){\n    a[i]=parseInt(input[1].split(\" \")[i]);\n  }\n  b = new Array(n).fill(0);\n  var min=Math.pow(10,9);\n  var max=-1;\n  for(i=0;i<n;i++){\n    min=Math.min(min,a[i]);\n    if(max<a[i]-min){\n      ans=1;\n    }\n    if(max==a[i]-min){\n      ans++;\n    }\n    max=Math.max(max,a[i]-min);\n  }\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 716, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var n = parseInt(tmp[0]);\n  a = new Array(n).fill(0);\n  for (i = 0; i < n; i++) {\n    a[i] = parseInt(input[1].split(\" \")[i]);\n  }\n  b = new Array(n).fill(0);\n  var min = Math.pow(10, 9);\n  var max = -1;\n  for (i = 0; i < n; i++) {\n    min = Math.min(min, a[i]);\n    if (max < a[i] - min) {\n      ans = 1;\n    }\n    if (max == a[i] - min) {\n      ans++;\n    }\n    max = Math.max(max, a[i] - min);\n  }\n  console.log(\"%s\", ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7225289052684697, "ngram_match_score": 0.28806567885305495, "weighted_ngram_match_score": 0.6020499422208239, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002409778814511987, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05392763368291131}}
{"filename": "p04015_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split']('\\x0a');var tmp=input[0x0]['split']('\\x20');var N=Number(tmp[0x0]);var A=Number(tmp[0x1]);var x=[0x0];x=x['concat'](input[0x1]['split']('\\x20')['map'](Number));var dp=new Array(N+0x1);for(var i=0x0;i<=N;++i){dp[i]=new Array(N+0x1);for(var j=0x0;j<=N;++j){dp[i][j]=new Array(A*N+0x1)['fill'](0x0);}}for(var i=0x0;i<N;++i)dp[i][0x0][0x0]=0x1;for(var i=0x1;i<=N;++i){for(var j=0x1;j<=i;++j){for(var k=0x1;k<=A*N;++k){if(k<x[i]){dp[i][j][k]=dp[i-0x1][j][k];}else{dp[i][j][k]=dp[i-0x1][j][k]+dp[i-0x1][j-0x1][k-x[i]];}}}}var ans=0x0;for(var j=0x1;j<=N;++j){ans+=dp[N][j][j*A];}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 8\n7 9 8 9", "5"], ["3 8\n6 6 9", "0"], ["8 5\n3 6 2 8 7 6 5 9", "19"], ["33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "8589934591"]], "original": "function main(input) {\n  input = input.split('\\n');\n  var tmp = input[0].split(' ');\n\n  var N = Number(tmp[0]);\n  var A = Number(tmp[1]);\n\n  var x = [0];\n  x = x.concat(input[1].split(' ').map(Number));\n\n  var dp = new Array(N + 1);\n  for (var i = 0; i <= N; ++i) {\n    dp[i] = new Array(N + 1);\n    for (var j = 0; j <= N; ++j) {\n      dp[i][j] = new Array(A * N + 1).fill(0);\n    }\n  }\n\n  for (var i = 0; i < N; ++i) dp[i][0][0] = 1;\n\n  for (var i = 1; i <= N; ++i) {\n    for (var j = 1; j <= i; ++j) {\n      for (var k = 1; k <= A * N; ++k) {\n        if (k < x[i]) {\n          dp[i][j][k] = dp[i - 1][j][k];\n        } else {\n          dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - x[i]];\n        }\n      }\n    }\n  }\n\n  var ans = 0;\n  for (var j = 1; j <= N; ++j) {\n    ans += dp[N][j][j * A];\n  }\n\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 717, "deobfuscated": "function main(input) {\n  input = input.split(\"\\n\");\n  var tmp = input[0].split(\" \");\n  var N = Number(tmp[0]);\n  var A = Number(tmp[1]);\n  var x = [0];\n  x = x.concat(input[1].split(\" \").map(Number));\n  var dp = new Array(N + 1);\n  for (var i = 0; i <= N; ++i) {\n    dp[i] = new Array(N + 1);\n    for (var j = 0; j <= N; ++j) {\n      dp[i][j] = new Array(A * N + 1).fill(0);\n    }\n  }\n  for (var i = 0; i < N; ++i) {\n    dp[i][0][0] = 1;\n  }\n  for (var i = 1; i <= N; ++i) {\n    for (var j = 1; j <= i; ++j) {\n      for (var k = 1; k <= A * N; ++k) {\n        if (k < x[i]) {\n          dp[i][j][k] = dp[i - 1][j][k];\n        } else {\n          dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - x[i]];\n        }\n      }\n    }\n  }\n  var ans = 0;\n  for (var j = 1; j <= N; ++j) {\n    ans += dp[N][j][j * A];\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9483690182919233, "ngram_match_score": 0.9012175185997565, "weighted_ngram_match_score": 0.9151156974250798, "syntax_match_score": 0.9771428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00047_1", "type": "JavaScript", "obfuscated": "var a='A';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input=chunk['trim']()['split'](',');if(input[0x0]==a)a=input[0x1];else if(input[0x1]==a)a=input[0x0];});process['stdin']['on']('end',function(){console['log'](a);});", "test_cases": [["B,C\nA,C\nC,B\nA,B\nC,B", "A"]], "original": "var a = 'A';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk)\n{\n  input = chunk.trim().split(',');\n  if(input[0] == a)\n    a = input[1];\n  else if(input[1] == a)\n    a = input[0];\n});\nprocess.stdin.on('end', function(){console.log(a);});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 718, "deobfuscated": "var a = \"A\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input = chunk.trim().split(\",\");\n  if (input[0] == a) {\n    a = input[1];\n  } else if (input[1] == a) {\n    a = input[0];\n  }\n});\nprocess.stdin.on(\"end\", function () {\n  console.log(a);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5113933011759817, "ngram_match_score": 0.07877080630167606, "weighted_ngram_match_score": 0.1143433820088083, "syntax_match_score": 0.8524590163934426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00056_1", "type": "JavaScript", "obfuscated": "function main(){var i,j,n,m,x,len=input['length'];for(i=0x0;i<len;i++){n=parseInt(input[i],0xa);if(n===0x0)break;if(n%0x2===0x1){console['log'](0x0);continue;}m=~~(n/0x2);for(x=0x0,j=0x0;primes[j]<=m;j++){if(primes['indexOf'](n-primes[j])!==-0x1)x++;}console['log'](x);}}var primes=function(n){var i,j,flag,primes=[0x2];if(n<0x2)return[];for(i=0x3;i<=n;i+=0x2){flag=!![];for(j=0x0;primes[j]<i*i;j++){if(i%primes[j]==0x0){flag=![];break;}}if(flag){primes['push'](i);}}return primes;}(0xc350);var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["10\n11\n0", "2\n0"]], "original": "function main() {\n  var\n  i, j, n, m, x,\n  len = input.length;\n  for(i = 0; i < len; i++) {\n    n = parseInt(input[i], 10);\n    if(n === 0) break;\n    if(n % 2 === 1){\n      console.log(0);\n      continue;\n    }\n    m = ~~(n / 2);\n    for(x = 0, j = 0; primes[j] <= m; j++) {\n      if(primes.indexOf(n - primes[j]) !== -1) x++;\n    }\n    console.log(x);\n  }\n}\n\nvar\nprimes = (function(n){\n  var\n  i, j, flag,\n  primes = [2];\n  if(n < 2) return [];\n  for(i = 3;i <= n; i += 2) {\n    flag = true;\n    for(j = 0; primes[j] < i*i; j++) {\n      if(i % primes[j] == 0) {\n        flag = false;\n        break;\n      }\n    }\n    if(flag) {\n      primes.push(i);\n    }\n  }\n  return primes;\n})(50000);\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 719, "deobfuscated": "function main() {\n  var i;\n  var j;\n  var n;\n  var m;\n  var x;\n  var len = input.length;\n  for (i = 0; i < len; i++) {\n    n = parseInt(input[i], 10);\n    if (n === 0) {\n      break;\n    }\n    if (n % 2 === 1) {\n      console.log(0);\n      continue;\n    }\n    m = ~~(n / 2);\n    x = 0;\n    j = 0;\n    for (; primes[j] <= m; j++) {\n      if (primes.indexOf(n - primes[j]) !== -1) {\n        x++;\n      }\n    }\n    console.log(x);\n  }\n}\nvar primes = function (n) {\n  var i;\n  var j;\n  var flag;\n  var primes = [2];\n  if (n < 2) {\n    return [];\n  }\n  for (i = 3; i <= n; i += 2) {\n    flag = true;\n    for (j = 0; primes[j] < i * i; j++) {\n      if (i % primes[j] == 0) {\n        flag = false;\n        break;\n      }\n    }\n    if (flag) {\n      primes.push(i);\n    }\n  }\n  return primes;\n}(50000);\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.693153654342164, "ngram_match_score": 0.3961093650213118, "weighted_ngram_match_score": 0.49698718005818776, "syntax_match_score": 0.8795180722891566, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.045454545454545414, "length_score": -0.045454545454545414, "increase_maintainability": -0.0056067254168300495, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.014150943396226356, "new_decrease_halstead_effort": 0.0753232978204127}}
{"filename": "p00086_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');while(lines['length']>0x0){var path=[];var line;while((line=lines['shift']())!='0\\x200'){var nums=line['split']('\\x20');var from=+nums[0x0];var to=+nums[0x1];path[from]=(path[from]||0x0)+0x1;path[to]=(path[to]||0x0)+0x1;}var odds=path['filter'](function(n){return n%0x2==0x1;});if(path[0x1]%0x2==0x1&&path[0x2]%0x2==0x1&&odds['length']>0x2)console['log']('NG');else console['log']('OK');}", "test_cases": [["1 3\n3 4\n3 5\n3 6\n4 6\n4 7\n4 7\n5 6\n6 7\n5 8\n5 8\n6 8\n6 9\n7 9\n8 9\n9 2\n0 0\n1 3\n3 4\n3 4\n4 2\n0 0", "OK\nNG"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nwhile (lines.length > 0) {\n    var path = [];\n    var line;\n    while ((line = lines.shift()) != '0 0') {\n        var nums = line.split(' ');\n        var from = +nums[0];\n        var to = +nums[1];\n\n        path[from] = (path[from] || 0) +1;\n        path[to] = (path[to] || 0) +1;\n    }\n    var odds = path.filter(function(n){return n % 2 == 1});\n    if (path[1] % 2 == 1 && path[2] % 2 == 1 && odds.length > 2)\n        console.log('NG');\n    else\n        console.log('OK');\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 720, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nwhile (lines.length > 0) {\n  var path = [];\n  var line;\n  while ((line = lines.shift()) != \"0 0\") {\n    var nums = line.split(\" \");\n    var from = +nums[0];\n    var to = +nums[1];\n    path[from] = (path[from] || 0) + 1;\n    path[to] = (path[to] || 0) + 1;\n  }\n  var odds = path.filter(function (n) {\n    return n % 2 == 1;\n  });\n  if (path[1] % 2 == 1 && path[2] % 2 == 1 && odds.length > 2) {\n    console.log(\"NG\");\n  } else {\n    console.log(\"OK\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8033657341279541, "ngram_match_score": 0.5895726230705292, "weighted_ngram_match_score": 0.6729099212844243, "syntax_match_score": 0.9509803921568627, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00102_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var data=[];var N;for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);if(arr['length']==0x1){if(i==0x0){N=arr[0x0];continue;}var DATA=[];for(var j=0x0;j<N+0x1;j++){DATA['push'](0x0);}for(var k=0x0;k<N;k++){var v=data[k];for(var l=0x0;l<N+0x1;l++){DATA[l]+=v[l];}v=v['map'](function(val){return('\\x20\\x20\\x20\\x20\\x20'+val)['slice'](-0x5);});console['log'](v['join'](''));}DATA=DATA['map'](function(val){return('\\x20\\x20\\x20\\x20\\x20'+val)['slice'](-0x5);});console['log'](DATA['join'](''));if(arr[0x0]==0x0)break;data=[];N=arr[0x0];}else{var sum=arr['reduce'](function(a,b){return a+b;});arr['push'](sum);data['push'](arr);}}", "test_cases": [["4\n52 96 15 20\n86 22 35 45\n45 78 54 36\n16 86 74 55\n4\n52 96 15 20\n86 22 35 45\n45 78 54 36\n16 86 74 55\n0", "52   96   15   20  183\n   86   22   35   45  188\n   45   78   54   36  213\n   16   86   74   55  231\n  199  282  178  156  815\n   52   96   15   20  183\n   86   22   35   45  188\n   45   78   54   36  213\n   16   86   74   55  231\n  199  282  178  156  815"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar data=[];\nvar N;\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   if(arr.length==1){\n      if(i==0){N=arr[0];continue;}\n      var DATA=[];\n      for(var j=0;j<N+1;j++){DATA.push(0);}\n      for(var k=0;k<N;k++){\n         var v=data[k];\n         for(var l=0;l<N+1;l++){DATA[l]+=v[l];}\n         v=v.map(function(val){return (\"     \"+val).slice(-5);});\n         console.log(v.join(\"\"));\n      }\n      DATA=DATA.map(function(val){return (\"     \"+val).slice(-5);});\n      console.log(DATA.join(\"\"));\n      if(arr[0]==0)break;\n      data=[];\n      N=arr[0];\n   }else{\n      var sum=arr.reduce(function(a,b){return a+b;});\n      arr.push(sum);\n      data.push(arr);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 721, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar data = [];\nvar N;\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  if (arr.length == 1) {\n    if (i == 0) {\n      N = arr[0];\n      continue;\n    }\n    var DATA = [];\n    for (var j = 0; j < N + 1; j++) {\n      DATA.push(0);\n    }\n    for (var k = 0; k < N; k++) {\n      var v = data[k];\n      for (var l = 0; l < N + 1; l++) {\n        DATA[l] += v[l];\n      }\n      v = v.map(function (val) {\n        return (\"     \" + val).slice(-5);\n      });\n      console.log(v.join(\"\"));\n    }\n    DATA = DATA.map(function (val) {\n      return (\"     \" + val).slice(-5);\n    });\n    console.log(DATA.join(\"\"));\n    if (arr[0] == 0) {\n      break;\n    }\n    data = [];\n    N = arr[0];\n  } else {\n    var sum = arr.reduce(function (a, b) {\n      return a + b;\n    });\n    arr.push(sum);\n    data.push(arr);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5191575117357634, "ngram_match_score": 0.030859970243651034, "weighted_ngram_match_score": 0.10935389172830451, "syntax_match_score": 0.9364161849710982, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00741_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){var dy=[-0x1,-0x1,-0x1,0x0,0x0,0x1,0x1,0x1];var dx=[-0x1,0x0,0x1,-0x1,0x1,-0x1,0x0,0x1];for(var i=0x0;i<0x8;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||yy>=H||xx<0x0||xx>=W)continue;if(yx[yy][xx]=='a'){yx[yy][xx]=cnt;bomb(yy,xx);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var WH=Arr['shift']()['split']('\\x20')['map'](Number);var W=WH[0x0];var H=WH[0x1];if(W==0x0&&H==0x0)break;var yx=[];var Y,X;for(var i=0x0;i<H;i++){var str=Arr['shift']();str=str['replace'](/1/g,'a');var arr=str['split']('\\x20');yx['push'](arr);}var cnt=0x0;for(var i=0x0;i<H;i++){for(var j=0x0;j<W;j++){if(yx[i][j]=='a'){cnt++;yx[i][j]=cnt;bomb(i,j);}}}console['log'](cnt);}", "test_cases": [["1 1\n0\n2 2\n0 1\n1 0\n3 2\n1 1 1\n1 1 1\n5 4\n1 0 1 0 0\n1 0 0 0 0\n1 0 1 0 1\n1 0 0 1 0\n5 4\n1 1 1 0 1\n1 0 1 0 1\n1 0 1 0 1\n1 0 1 1 1\n5 5\n1 0 1 0 1\n0 0 0 0 0\n1 0 1 0 1\n0 0 0 0 0\n1 0 1 0 1\n0 0", "0\n1\n1\n3\n1\n9"]], "original": "function bomb(y,x){\n   var dy=[-1,-1,-1,0,0,1,1,1];\n   var dx=[-1,0,1,-1,1,-1,0,1];\n   for(var i=0;i<8;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=H || xx<0 || xx>=W)continue;\n      if(yx[yy][xx]==\"a\"){yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var WH=(Arr.shift()).split(\" \").map(Number);\n   var W=WH[0];\n   var H=WH[1];\n   if(W==0 && H==0)break;\n      var yx=[];\n      var Y,X;\n      for(var i=0;i<H;i++){\n         var str=Arr.shift();\n         str=str.replace(/1/g,\"a\");\n         var arr=str.split(\" \");\n         yx.push(arr);\n      }\n     var cnt=0;\n     for(var i=0;i<H;i++){\n        for(var j=0;j<W;j++){\n           if(yx[i][j]==\"a\"){cnt++;yx[i][j]=cnt;bomb(i,j);}\n        }\n     }\n      console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 722, "deobfuscated": "function bomb(y, x) {\n  var dy = [-1, -1, -1, 0, 0, 1, 1, 1];\n  var dx = [-1, 0, 1, -1, 1, -1, 0, 1];\n  for (var i = 0; i < 8; i++) {\n    var yy = y + dy[i];\n    var xx = x + dx[i];\n    if (yy < 0 || yy >= H || xx < 0 || xx >= W) {\n      continue;\n    }\n    if (yx[yy][xx] == \"a\") {\n      yx[yy][xx] = cnt;\n      bomb(yy, xx);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var WH = Arr.shift().split(\" \").map(Number);\n  var W = WH[0];\n  var H = WH[1];\n  if (W == 0 && H == 0) {\n    break;\n  }\n  var yx = [];\n  var Y;\n  var X;\n  for (var i = 0; i < H; i++) {\n    var str = Arr.shift();\n    str = str.replace(/1/g, \"a\");\n    var arr = str.split(\" \");\n    yx.push(arr);\n  }\n  var cnt = 0;\n  for (var i = 0; i < H; i++) {\n    for (var j = 0; j < W; j++) {\n      if (yx[i][j] == \"a\") {\n        cnt++;\n        yx[i][j] = cnt;\n        bomb(i, j);\n      }\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5248356610212608, "ngram_match_score": 0.05272111074503584, "weighted_ngram_match_score": 0.17305831494920237, "syntax_match_score": 0.8735632183908046, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0077821011673151474, "new_decrease_halstead_effort": 0.07931408922269478}}
{"filename": "p02262_1", "type": "JavaScript", "obfuscated": "const config={'input':'/dev/stdin','newline':'\\x0a'};const line=require('fs')['readFileSync'](config['input'],'utf-8')['split'](config['newline']);let cnt=0x0;const isort=(arr,g)=>{for(let i=g;i<arr['length'];i++){let v=arr[i];let j=i-g;while(j>=0x0&&arr[j]>v){arr[j+g]=arr[j];j=j-g;cnt++;}arr[j+g]=v;}return arr;};const shellSort=arr=>{const g=arr['map']((_,i)=>0x3*i+0x1)['filter'](x=>x<=arr['length'])['reverse']();console['log'](g['length']);console['log'](g['map'](x=>x['toString']())['join']('\\x20'));for(i=0x0;i<arr['length'];i++){arr=isort(arr,g[i]);}return arr;};const n=parseInt(line[0x0]);const data=line['slice'](0x1,n+0x1)['map'](x=>parseInt(x));const sorted=shellSort(data);console['log'](cnt);console['log'](sorted['map'](x=>x['toString']())['join']('\\x0a'));", "test_cases": [["5\n5\n1\n4\n3\n2", "2\n4 1\n3\n1\n2\n3\n4\n5"], ["3\n3\n2\n1", "1\n1\n3\n1\n2\n3"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nlet cnt = 0;\n\nconst isort = (arr, g) => {\n    for (let i = g; i < arr.length; i++) {\n        let v = arr[i];\n        let j = i - g;\n        while (j >= 0 && arr[j] > v) {\n            arr[j+g] = arr[j];\n            j = j - g;\n            cnt++;\n        }\n        arr[j+g] = v;\n    }\n\n    return arr;\n};\n\nconst shellSort = (arr) => {\n    const g = arr.map((_, i) => 3 * i + 1).filter(x => x <= arr.length).reverse();\n\n    console.log(g.length);\n    console.log(g.map(x => x.toString()).join(' '));\n\n    for (i = 0; i < arr.length; i++) {\n        arr = isort(arr, g[i]);\n    }\n\n    return arr;\n};\n\nconst n = parseInt(line[0]);\nconst data = line.slice(1, n+1).map(x => parseInt(x));\nconst sorted = shellSort(data);\n\nconsole.log(cnt);\nconsole.log(sorted.map(x => x.toString()).join('\\n'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 723, "deobfuscated": "const config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nconst line = require(\"fs\").readFileSync(config.input, \"utf-8\").split(config.newline);\nlet cnt = 0;\nconst isort = (arr, g) => {\n  for (let i = g; i < arr.length; i++) {\n    let v = arr[i];\n    let j = i - g;\n    while (j >= 0 && arr[j] > v) {\n      arr[j + g] = arr[j];\n      j = j - g;\n      cnt++;\n    }\n    arr[j + g] = v;\n  }\n  return arr;\n};\nconst shellSort = arr => {\n  const g = arr.map((_, i) => i * 3 + 1).filter(x => x <= arr.length).reverse();\n  console.log(g.length);\n  console.log(g.map(x => x.toString()).join(\" \"));\n  for (i = 0; i < arr.length; i++) {\n    arr = isort(arr, g[i]);\n  }\n  return arr;\n};\nconst n = parseInt(line[0]);\nconst data = line.slice(1, n + 1).map(x => parseInt(x));\nconst sorted = shellSort(data);\nconsole.log(cnt);\nconsole.log(sorted.map(x => x.toString()).join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8501013640314539, "ngram_match_score": 0.7628138851151842, "weighted_ngram_match_score": 0.8033994078329608, "syntax_match_score": 0.8950617283950617, "dataflow_match_score": 0.9391304347826087}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02317_1", "type": "JavaScript", "obfuscated": "function main(){var input=getInput();var ls=input['split']('\\x0a');var n=parseInt(ls[0x0]);var nums=ls['slice'](0x1,n+0x1)['map'](function(s){return parseInt(s);});console['log'](lis(nums));}function lis(xs){var table=[xs[0x0]];for(var i=0x1;i<xs['length'];i++){var x=xs[i];table[search(table,x)+0x1]=x;}return table['length'];}function search(table,x){var l=0x0,h=table['length'];if(table['length']==0x0||x<=table[0x0]){return-0x1;}while(l+0x1<h){var pivot=(l+h+0x1)/0x2;if(table[pivot]<x){l=pivot;}else{h=pivot;}}return l;}nodeJS=typeof require!='undefined';function getInput(){if(!nodeJS){return document['getElementById']('input')['value'];}return require('fs')['readFileSync']('/dev/stdin')['toString']();}if(nodeJS){main();}", "test_cases": [["5\n5\n1\n3\n2\n4", "3"], ["3\n1\n1\n1", "1"]], "original": "function main() {\n  var input = getInput();\n  var ls = input.split('\\n');\n\n  var n = parseInt(ls[0])\n  var nums = ls.slice(1, n+1).map(function(s) {\n    return parseInt(s);\n  })\n  \n  console.log(lis(nums))\n}\n\nfunction lis(xs) {\n  var table = [xs[0]];\n  for (var i = 1; i < xs.length; i++) {\n    var x = xs[i];\n    table[search(table, x) + 1] = x;\n  }\n  return table.length;\n}\n \n\n/**\n * Returns i s.t. table[i] < x && x <= table[i+1]\n */\nfunction search(table, x) {\n  var l = 0, h = table.length;\n  \n  if (table.length == 0 || x <= table[0]) {\n    return -1;\n  }\n  \n  while (l + 1 < h) {\n    var pivot = (l + h + 1) / 2;\n    if (table[pivot] < x) {\n      l = pivot;\n    } else {\n      h = pivot;\n    }\n  }\n  return l;\n}\n\nnodeJS = typeof require != 'undefined';\n\nfunction getInput() {\n  if (!nodeJS) {\n    return document.getElementById('input').value\n  }\n  return require('fs').readFileSync('/dev/stdin').toString();\n}\n\nif (nodeJS) {\n  main()\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 724, "deobfuscated": "function main() {\n  var input = getInput();\n  var ls = input.split(\"\\n\");\n  var n = parseInt(ls[0]);\n  var nums = ls.slice(1, n + 1).map(function (s) {\n    return parseInt(s);\n  });\n  console.log(lis(nums));\n}\nfunction lis(xs) {\n  var table = [xs[0]];\n  for (var i = 1; i < xs.length; i++) {\n    var x = xs[i];\n    table[search(table, x) + 1] = x;\n  }\n  return table.length;\n}\nfunction search(table, x) {\n  var l = 0;\n  var h = table.length;\n  if (table.length == 0 || x <= table[0]) {\n    return -1;\n  }\n  while (l + 1 < h) {\n    var pivot = (l + h + 1) / 2;\n    if (table[pivot] < x) {\n      l = pivot;\n    } else {\n      h = pivot;\n    }\n  }\n  return l;\n}\nnodeJS = typeof require != \"undefined\";\nfunction getInput() {\n  if (!nodeJS) {\n    return document.getElementById(\"input\").value;\n  }\n  return require(\"fs\").readFileSync(\"/dev/stdin\").toString();\n}\nif (nodeJS) {\n  main();\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8712351018261572, "ngram_match_score": 0.7495602808204471, "weighted_ngram_match_score": 0.7637489208104227, "syntax_match_score": 0.9716312056737588, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000329988699752537, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.005347593582887722, "new_decrease_halstead_effort": -0.005347593582887722}}
{"filename": "p02633_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{let X=parseInt(arg);let result=0x168/X;result=String(result);var answer=result['replace']('.','');console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["90", "4"], ["1", "360"]], "original": "\"use strict\";\n\nconst main = (arg) => {\n  let X = parseInt(arg);\n  let result = 360 / X;\n  result = String(result);\n  var answer = result.replace(\".\", \"\");\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 725, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  let X = parseInt(arg);\n  let result = 360 / X;\n  result = String(result);\n  var answer = result.replace(\".\", \"\");\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8910493510643587, "ngram_match_score": 0.8390782502060267, "weighted_ngram_match_score": 0.8470703735636033, "syntax_match_score": 0.8780487804878049, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02744_1", "type": "JavaScript", "obfuscated": "function Main(input){var N=input[0x0]-0x0;var list=['a','b','c','d','e','f','g','h','i','j','k'];var ans={0x0:[],0x1:['a']};for(var i=0x2;i<=N;i++){ans[i]=[];var preAns=ans[i-0x1];var nowAns=ans[i];preAns['forEach'](preans=>{var max='a';preans['split']('')['forEach'](v=>{max=max<v?v:max;});var endflg=![];for(var i=0x0;i<list['length']-0x1;i++){nowAns['push'](preans+list[i]);if(endflg)break;if(max==list[i])endflg=!![];}});}console['log'](ans[N]['join']('\\x0a'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["1", "a"], ["2", "aa\nab"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var N = input[0]-0;\n    var list = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\", \"k\"];\n    var ans = {0:[], 1:[\"a\"]};\n    for(var i=2;i<=N;i++){\n        ans[i] = [];\n        var preAns = ans[i-1];\n        var nowAns = ans[i];\n        preAns.forEach(preans=>{\n            var max = \"a\";\n            preans.split(\"\").forEach(v=>{\n                max = max<v?v:max;\n            });\n            var endflg = false;\n            for(var i=0;i<list.length-1;i++){\n                nowAns.push(preans + list[i]);\n                \n                if(endflg) break;\n                if(max == list[i])endflg=true;\n            }\n        });\n        \n    }\n    console.log(ans[N].join(\"\\n\"));\n}\n\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 726, "deobfuscated": "function Main(input) {\n  var N = input[0] - 0;\n  var list = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"];\n  var ans = {\n    0: [],\n    1: [\"a\"]\n  };\n  for (var i = 2; i <= N; i++) {\n    ans[i] = [];\n    var preAns = ans[i - 1];\n    var nowAns = ans[i];\n    preAns.forEach(preans => {\n      var max = \"a\";\n      preans.split(\"\").forEach(v => {\n        max = max < v ? v : max;\n      });\n      var endflg = false;\n      for (var i = 0; i < list.length - 1; i++) {\n        nowAns.push(preans + list[i]);\n        if (endflg) {\n          break;\n        }\n        if (max == list[i]) {\n          endflg = true;\n        }\n      }\n    });\n  }\n  console.log(ans[N].join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.646799332155012, "ngram_match_score": 0.24135706884031938, "weighted_ngram_match_score": 0.45874348558618006, "syntax_match_score": 0.8870967741935484, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02792_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const cnt=[];for(let i=0x0;i<0xa;i++){cnt['push'](new Array(0xa)['fill'](0x0));}for(let i=0x1;i<=N;i++){const S=String(i);const head=parseInt(S[0x0]);const tail=parseInt(S[S['length']-0x1]);cnt[head][tail]++;}let answer=0x0;for(let i=0x0;i<0xa;i++){for(let j=0x0;j<0xa;j++){answer+=cnt[i][j]*cnt[j][i];}}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["25", "17"], ["1", "1"], ["100", "108"], ["2020", "40812"], ["200000", "400000008"]], "original": "\"use strict\";\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    \n    const cnt = [];\n    \n    for(let i=0; i<10; i++) {\n        cnt.push(new Array(10).fill(0));\n    }\n    \n    for(let i=1; i<=N; i++) {\n        const S = String(i);\n        const head = parseInt(S[0]);\n        const tail = parseInt(S[S.length-1]);\n        \n        cnt[head][tail]++;\n    }\n    \n    // console.log(cnt.join(\"\\n\"));\n    \n    let answer = 0;\n    \n    for(let i=0; i<10; i++) {\n        for(let j=0; j<10; j++) {\n            answer += cnt[i][j] * cnt[j][i];\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 727, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const cnt = [];\n  for (let i = 0; i < 10; i++) {\n    cnt.push(new Array(10).fill(0));\n  }\n  for (let i = 1; i <= N; i++) {\n    const S = String(i);\n    const head = parseInt(S[0]);\n    const tail = parseInt(S[S.length - 1]);\n    cnt[head][tail]++;\n  }\n  let answer = 0;\n  for (let i = 0; i < 10; i++) {\n    for (let j = 0; j < 10; j++) {\n      answer += cnt[i][j] * cnt[j][i];\n    }\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7678773915206982, "ngram_match_score": 0.46345293508203217, "weighted_ngram_match_score": 0.6080566310007609, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02846_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var T=input[0x0]['split']('\\x20');var A=input[0x1]['split']('\\x20');var B=input[0x2]['split']('\\x20');for(var i=0x0;i<0x2;i++){T[i]=Number(T[i]);A[i]=Number(A[i]);B[i]=Number(B[i]);}var sa=new Array(0x2);sa[0x0]=T[0x0]*A[0x0]-T[0x0]*B[0x0];sa[0x1]=T[0x1]*A[0x1]-T[0x1]*B[0x1];var x=0x0;var xmae=0x1;var pm=0x0;var count=-0x1;if(sa[0x0]==sa[0x1]*-0x1){console['log']('infinity');}else{for(var i=0x0;i<0x1;i){count++;xmae=x;x+=sa[count%0x2];if(x*xmae>0x0){i=0x1;}else if(x==0x0){i=0x1;count++;}}console['log'](count-0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 2\n10 10\n12 4", "1"], ["100 1\n101 101\n102 1", "infinity"], ["12000 15700\n3390000000 3810000000\n5550000000 2130000000", "113"]], "original": "function Main(input) {\n  input = input.split('\\n');\n  var T = input[0].split(' ');\n  var A = input[1].split(' ');\n  var B = input[2].split(' ');\n  for(var i=0; i<2; i++){\n  T[i] = Number(T[i]);\n  A[i] = Number(A[i]);\n  B[i] = Number(B[i]);\n  }\n  var sa = new Array(2);\n  sa[0] = T[0]*A[0]-T[0]*B[0];\n  sa[1] = T[1]*A[1]-T[1]*B[1];\n  var x = 0;\n  var xmae = 1;\n  var pm = 0;\n  var count = -1;\n  if(sa[0] == sa[1]*-1){\n     console.log('infinity');\n  }else{\n     for(var i=0; i<1; i){\n       count++;\n       xmae = x;\n       x += sa[count%2];\n       if(x*xmae > 0){\n          i = 1;\n          }else if(x == 0){\n                   i = 1;\n            count++;\n                   }\n     }\n    console.log(count-1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 728, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var T = input[0].split(\" \");\n  var A = input[1].split(\" \");\n  var B = input[2].split(\" \");\n  for (var i = 0; i < 2; i++) {\n    T[i] = Number(T[i]);\n    A[i] = Number(A[i]);\n    B[i] = Number(B[i]);\n  }\n  var sa = new Array(2);\n  sa[0] = T[0] * A[0] - T[0] * B[0];\n  sa[1] = T[1] * A[1] - T[1] * B[1];\n  var x = 0;\n  var xmae = 1;\n  var pm = 0;\n  var count = -1;\n  if (sa[0] == sa[1] * -1) {\n    console.log(\"infinity\");\n  } else {\n    for (var i = 0; i < 1; i) {\n      count++;\n      xmae = x;\n      x += sa[count % 2];\n      if (x * xmae > 0) {\n        i = 1;\n      } else if (x == 0) {\n        i = 1;\n        count++;\n      }\n    }\n    console.log(count - 1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7258687318093349, "ngram_match_score": 0.36737767542442173, "weighted_ngram_match_score": 0.5360972518129179, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03091_1", "type": "JavaScript", "obfuscated": "'use strict';function I(s,f){this['_s']=s['split']('\\x0a');this['_c']=0x0;this['_l']=0x0;this['_f']=f||Number;}I['prototype']['a']=function(){var l=this['_s'][this['_l']];if(!l)return;var t=l['trim']()['split']('\\x20');var a=t[this['_c']];this['_c']++;if(t['length']===this['_c']){this['_c']=0x0;this['_l']++;}return this['_f'](a);};I['prototype']['l']=function(){var l=this['_s'][this['_l']];if(!l)return;this['_c']=0x0;this['_l']++;return l['split']('\\x20')['map'](this['_f']);};module['exports']=I;function main(input){const o=new I(input);const N=o['a']();const M=o['a']();const adj=[];for(let i=0x1;i<=N;i++){adj[i]=[];}for(let i=0x0;i<M;i++){let ai=o['a']();let bi=o['a']();adj[ai]['push'](bi);adj[bi]['push'](ai);}let flag1=![];let flag2=!![];for(let i=0x1;i<=N;i++){if(adj[i]['length']===0x6){flag1=!![];}if(adj[i]['length']%0x2!==0x0){flag2=![];}}console['log'](flag1&&flag2?'Yes':'No');}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 9\n1 2\n1 3\n2 3\n1 4\n1 5\n4 5\n1 6\n1 7\n6 7", "Yes"], ["3 3\n1 2\n2 3\n3 1", "No"], ["18 27\n17 7\n12 15\n18 17\n13 18\n13 6\n5 7\n7 1\n14 5\n15 11\n7 6\n1 9\n5 4\n18 16\n4 6\n7 2\n7 11\n6 3\n12 14\n5 2\n10 5\n7 8\n10 15\n3 15\n9 8\n7 15\n5 16\n18 15", "Yes"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s.split(\"\\n\");this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s[this._l];if(!l)return;this._c=0;this._l++;return l.split(\" \").map(this._f)};module.exports=I;\n\nfunction main(input) {\n  const o = new I(input);\n\n  const N = o.a();\n  const M = o.a();\n\n  const adj = [];\n  for (let i = 1; i <= N; i++) {\n    adj[i] = [];\n  }\n\n  for (let i = 0; i < M; i++) {\n    let ai = o.a();\n    let bi = o.a();\n    adj[ai].push(bi);\n    adj[bi].push(ai);\n  }\n\n  let flag1 = false;\n  let flag2 = true;\n  for (let i = 1; i <= N; i++) {\n    if (adj[i].length === 6) {\n      flag1 = true;\n    }\n\n    if (adj[i].length % 2 !== 0) {\n      flag2 = false;\n    }\n  }\n\n  console.log((flag1 && flag2) ? \"Yes\" : \"No\");\n\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 729, "deobfuscated": "'use strict';\n\nfunction I(s, f) {\n  this._s = s.split(\"\\n\");\n  this._c = 0;\n  this._l = 0;\n  this._f = f || Number;\n}\nI.prototype.a = function () {\n  var l = this._s[this._l];\n  if (!l) {\n    return;\n  }\n  var t = l.trim().split(\" \");\n  var a = t[this._c];\n  this._c++;\n  if (t.length === this._c) {\n    this._c = 0;\n    this._l++;\n  }\n  return this._f(a);\n};\nI.prototype.l = function () {\n  var l = this._s[this._l];\n  if (!l) {\n    return;\n  }\n  this._c = 0;\n  this._l++;\n  return l.split(\" \").map(this._f);\n};\nmodule.exports = I;\nfunction main(input) {\n  const o = new I(input);\n  const N = o.a();\n  const M = o.a();\n  const adj = [];\n  for (let i = 1; i <= N; i++) {\n    adj[i] = [];\n  }\n  for (let i = 0; i < M; i++) {\n    let ai = o.a();\n    let bi = o.a();\n    adj[ai].push(bi);\n    adj[bi].push(ai);\n  }\n  let flag1 = false;\n  let flag2 = true;\n  for (let i = 1; i <= N; i++) {\n    if (adj[i].length === 6) {\n      flag1 = true;\n    }\n    if (adj[i].length % 2 !== 0) {\n      flag2 = false;\n    }\n  }\n  console.log(flag1 && flag2 ? \"Yes\" : \"No\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8293627533948098, "ngram_match_score": 0.5320530569688792, "weighted_ngram_match_score": 0.8707060134823977, "syntax_match_score": 0.9146919431279621, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005626797239167924, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03322259136212624, "new_decrease_halstead_effort": 0.03322259136212624}}
{"filename": "p03165_1", "type": "JavaScript", "obfuscated": "function main(input){const lines=input['split']('\\x0a');const S=lines['shift']()['split']('');const T=lines['shift']()['split']('');dp=[];for(var i=0x0;i<=S['length'];i++){dp['push'](Array(T['length']+0x1)['fill'](0x0));}for(var i=0x1;i<=S['length'];i++){for(var j=0x1;j<=T['length'];j++){if(S[i-0x1]==T[j-0x1]){dp[i][j]=Math['max'](dp[i][j],dp[i-0x1][j-0x1]+0x1);}else{dp[i][j]=Math['max'](dp[i-0x1][j],dp[i][j-0x1]);}}}var i=S['length'];var j=T['length'];var result=[];while(i!=0x0&&j!=0x0){if(S[i-0x1]==T[j-0x1]){result['unshift'](S[i-0x1]);i--;j--;}else{if(dp[i-0x1][j]<dp[i][j-0x1]){j--;}else{i--;}}}console['log'](result['join'](''));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["axyb\nabyxb", "axb"], ["aa\nxayaz", "aa"], ["a\nz", ""], ["abracadabra\navadakedavra", "aaadara"]], "original": "function main(input){\n  const lines = input.split('\\n');\n  const S = lines.shift().split('');\n  const T = lines.shift().split('');\n\n//  console.log(S);\n//  console.log(T);\n\n  dp = []\n  for(var i=0;i<=S.length;i++){\n    dp.push( Array(T.length+1).fill(0) );\n  }\n\n  for(var i=1;i<=S.length;i++){\n    for(var j=1;j<=T.length;j++){\n      if(S[i-1]==T[j-1]){\n        dp[i][j]=Math.max(dp[i][j], dp[i-1][j-1]+1);\n      }else{\n        dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1]);\n      }\n    }\n  }\n\n  var i = S.length;\n  var j = T.length;\n  var result = [];\n  while(i!=0 &&  j!=0){\n//  console.log([i,j]);\n//  console.log([S[i-1],T[j-1]]);\n    if(S[i-1]==T[j-1]){\n      result.unshift(S[i-1]);\n      i--;\n      j--;\n    }else{\n      if(dp[i-1][j] < dp[i][j-1]){\n        j--;\n      }else{\n        i--;\n      }\n    }\n  }\n\n//  console.log(dp);\n  console.log(result.join(''));\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 730, "deobfuscated": "function main(input) {\n  const lines = input.split(\"\\n\");\n  const S = lines.shift().split(\"\");\n  const T = lines.shift().split(\"\");\n  dp = [];\n  for (var i = 0; i <= S.length; i++) {\n    dp.push(Array(T.length + 1).fill(0));\n  }\n  for (var i = 1; i <= S.length; i++) {\n    for (var j = 1; j <= T.length; j++) {\n      if (S[i - 1] == T[j - 1]) {\n        dp[i][j] = Math.max(dp[i][j], dp[i - 1][j - 1] + 1);\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n      }\n    }\n  }\n  var i = S.length;\n  var j = T.length;\n  var result = [];\n  while (i != 0 && j != 0) {\n    if (S[i - 1] == T[j - 1]) {\n      result.unshift(S[i - 1]);\n      i--;\n      j--;\n    } else if (dp[i - 1][j] < dp[i][j - 1]) {\n      j--;\n    } else {\n      i--;\n    }\n  }\n  console.log(result.join(\"\"));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5908814319132611, "ngram_match_score": 0.14782356718726558, "weighted_ngram_match_score": 0.28520074898574127, "syntax_match_score": 0.953757225433526, "dataflow_match_score": 0.9767441860465116}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03170_1", "type": "JavaScript", "obfuscated": "'use strict';(function(input){input=input['trim']()['split'](/\\s+/)['map'](x=>x-0x0);const N=input['shift']();const K=input['shift']();const A=input;const dp=new Array(K+0x2)['fill']('tbd');dp[K+0x1]=!![];for(let i=K+0x1;i>=0x0;i--){if(dp[i])if(dp[i-0x1]===!![]){i--;continue;}for(let j=0x1;j<=A[0x0];j++)if(i-j>=0x0)if(dp[i-j]==='tbd')dp[i-j]=![];if(!dp[i])for(let a=0x0;a<N;a++)if(i-A[a]>=0x0)dp[i-A[a]]=!![];}if(dp[0x0])console['log']('First');else console['log']('Second');}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 4\n2 3", "First"], ["2 5\n2 3", "Second"], ["2 7\n2 3", "First"], ["3 20\n1 2 3", "Second"], ["3 21\n1 2 3", "First"], ["1 100000\n1", "Second"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const N=input.shift();\n  const K=input.shift();\n  const A=input;\n  const dp=new Array(K+2).fill('tbd');\n  \n  dp[K+1]=true;\n  for(let i=K+1;i>=0;i--){\n    if(dp[i])\n      if(dp[i-1]===true){\n        i--;\n        continue;\n      }\n      for(let j=1;j<=A[0];j++)\n        if(i-j>=0)\n          if(dp[i-j]==='tbd')\n            dp[i-j]=false;\n    if(!dp[i])\n      for(let a=0;a<N;a++)\n        if(i-A[a]>=0)\n          dp[i-A[a]]=true;\n  }\n  \n  if(dp[0])console.log('First');\n  else console.log('Second');\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 731, "deobfuscated": "'use strict';\n\n(function (input) {\n  input = input.trim().split(/\\s+/).map(x => x - 0);\n  const N = input.shift();\n  const K = input.shift();\n  const A = input;\n  const dp = new Array(K + 2).fill(\"tbd\");\n  dp[K + 1] = true;\n  for (let i = K + 1; i >= 0; i--) {\n    if (dp[i]) {\n      if (dp[i - 1] === true) {\n        i--;\n        continue;\n      }\n    }\n    for (let j = 1; j <= A[0]; j++) {\n      if (i - j >= 0) {\n        if (dp[i - j] === \"tbd\") {\n          dp[i - j] = false;\n        }\n      }\n    }\n    if (!dp[i]) {\n      for (let a = 0; a < N; a++) {\n        if (i - A[a] >= 0) {\n          dp[i - A[a]] = true;\n        }\n      }\n    }\n  }\n  if (dp[0]) {\n    console.log(\"First\");\n  } else {\n    console.log(\"Second\");\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47758480639636935, "ngram_match_score": 0.010172508664089693, "weighted_ngram_match_score": 0.045348038332217434, "syntax_match_score": 0.8712121212121212, "dataflow_match_score": 0.9836065573770492}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0066191723419384285, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06077348066298338, "new_decrease_halstead_effort": 0.15726332835962842}}
{"filename": "p03197_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a')['map'](Number);input['shift']();var n=arrsum(input);if(n==input['length']){n=0x1;}if(n%0x2==0x1){console['log']('first');}else{console['log']('second');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());function arrsum(arr){var sum=0x0;for(var i=0x0,len=arr['length'];i<len;++i){sum+=arr[i];};return sum;}", "test_cases": [["2\n1\n2", "first"], ["3\n100000\n30000\n20000", "second"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\").map(Number);\n  input.shift();\n  var n = arrsum(input);\n  if(n==input.length){\n  n = 1;\n  }\n  if(n%2==1){\n  console.log(\"first\");\n  }else{\n  console.log(\"second\");\n  }\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\nfunction arrsum(arr){\n    var sum = 0;\n    for (var i=0,len=arr.length; i<len; ++i) {\n        sum += arr[i];\n    };\n    return sum;\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 732, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\").map(Number);\n  input.shift();\n  var n = arrsum(input);\n  if (n == input.length) {\n    n = 1;\n  }\n  if (n % 2 == 1) {\n    console.log(\"first\");\n  } else {\n    console.log(\"second\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\nfunction arrsum(arr) {\n  var sum = 0;\n  for (var i = 0, len = arr.length; i < len; ++i) {\n    sum += arr[i];\n  }\n  ;\n  return sum;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7268999931673393, "ngram_match_score": 0.35238950322900364, "weighted_ngram_match_score": 0.5552104694403536, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03228_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const tmp=input['split']('\\x20');let A=parseInt(tmp[0x0],0xa);let B=parseInt(tmp[0x1],0xa);const K=tmp[0x2];for(let i=0x0;i<K;i++){if(i%0x2==0x0){if(A%0x2==0x1){A--;}B+=A/0x2;A/=0x2;}else{if(B%0x2==0x1){B--;}A+=B/0x2;B/=0x2;}}console['log'](A,B);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 4 2", "5 3"], ["3 3 3", "1 3"], ["314159265 358979323 84", "448759046 224379523"]], "original": "'use strict';\n\nfunction Main(input) {\n    const tmp = input.split(' ');\n    let A = parseInt(tmp[0], 10);\n    let B = parseInt(tmp[1], 10);\n    const K = tmp[2];\n\n    for (let i = 0; i < K; i++) {\n        if (i % 2 == 0) {\n            if (A % 2 == 1) {\n                A--;\n            }\n            B += A / 2;\n            A /= 2;\n        } else {\n            if (B % 2 == 1) {\n                B--;\n            }\n            A += B / 2;\n            B /= 2;\n        }\n    }\n    console.log(A, B);\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 733, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const tmp = input.split(\" \");\n  let A = parseInt(tmp[0], 10);\n  let B = parseInt(tmp[1], 10);\n  const K = tmp[2];\n  for (let i = 0; i < K; i++) {\n    if (i % 2 == 0) {\n      if (A % 2 == 1) {\n        A--;\n      }\n      B += A / 2;\n      A /= 2;\n    } else {\n      if (B % 2 == 1) {\n        B--;\n      }\n      A += B / 2;\n      B /= 2;\n    }\n  }\n  console.log(A, B);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9678326005281503, "ngram_match_score": 0.9338314270813591, "weighted_ngram_match_score": 0.9374989750312421, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03318_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){const K=Number(s['split']('\\x0a')[0x0]);const list=['1','2','3','4','5','6','7','8','9','19','29','39','49','59','69','79','89','99','199'];const head=['2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'];let rest='99';for(let i=0x0;i<=0x14;i++){for(let j=0x0;j<head['length'];j++){list['push'](head[j]+rest);}rest+='9';}const ans=list['slice'](0x0,K)['join']('\\x0a');console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "1\n2\n3\n4\n5\n6\n7\n8\n9\n19"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const K = Number(s.split('\\n')[0]);\n\n  const list = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '19', '29', '39', '49', '59', '69', '79', '89', '99', '199'];\n\n  const head = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'];\n\n  let rest = '99';\n\n  for (let i = 0; i <= 20; i++) {\n    for (let j = 0; j < head.length; j++) {\n      list.push(head[j] + rest);\n    }\n    rest += '9';\n  }\n\n  const ans = list.slice(0, K).join('\\n');\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 734, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  const K = Number(s.split(\"\\n\")[0]);\n  const list = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"19\", \"29\", \"39\", \"49\", \"59\", \"69\", \"79\", \"89\", \"99\", \"199\"];\n  const head = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"];\n  let rest = \"99\";\n  for (let i = 0; i <= 20; i++) {\n    for (let j = 0; j < head.length; j++) {\n      list.push(head[j] + rest);\n    }\n    rest += \"9\";\n  }\n  const ans = list.slice(0, K).join(\"\\n\");\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6664138408223119, "ngram_match_score": 0.4251538470310134, "weighted_ngram_match_score": 0.44598096831302886, "syntax_match_score": 1.0, "dataflow_match_score": 0.7945205479452054}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03354_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split'](/\\s+/)['map'](x=>x-0x0);var N=input['shift'](),M=input['shift']();var p=input['splice'](0x0,N);var nodes=[];for(let k=0x0;k<N;k++)nodes[k]=new Node(k);for(let k=0x0;k<M;k++)nodes[input[0x2*k]-0x1]['merge'](nodes[input[0x2*k+0x1]-0x1]);var counter=0x0;for(let k=0x0;k<N;k++)if(nodes[k]['top']()===nodes[p[k]-0x1]['top']())counter++;console['log'](counter);}function Node(v){var t=this;t['value']=v;t['parent']=null;t['weight']=0x1;}Node['prototype']['top']=function(){var t=this;var p=t['parent'];if(!p)return t;else return p['top']();};Node['prototype']['adopt']=function(progeny){var t=this['top']();var c=progeny['top']();c['parent']=t;t['weight']+=c['weight'];};Node['prototype']['merge']=function(b){var a=this['top']();b=b['top']();if(a===b)return;if(a['weight']<b['weight'])b['adopt'](a);else a['adopt'](b);};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2\n5 3 1 4 2\n1 3\n5 4", "2"], ["3 2\n3 2 1\n1 2\n2 3", "3"], ["10 8\n5 3 6 8 7 10 9 1 2 4\n3 1\n4 1\n5 9\n2 5\n6 5\n3 5\n8 9\n7 9", "8"], ["5 1\n1 2 3 4 5\n1 5", "5"]], "original": "'use strict'\nfunction Main(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  var N=input.shift(), M=input.shift();\n  var p=input.splice(0,N);\n  var nodes=[];\n  for(let k=0;k<N;k++)\n    nodes[k]=new Node(k);\n  for(let k=0;k<M;k++)\n    nodes[input[2*k]-1].merge(nodes[input[2*k+1]-1]);\n  var counter=0;\n  for(let k=0;k<N;k++)\n    if(nodes[k].top()===nodes[p[k]-1].top())\n      counter++;\n  console.log(counter);\n}\n\nfunction Node(v){\n  var t=this;\n  t.value=v;\n  t.parent=null;\n  t.weight=1;\n}\n\nNode.prototype.top=function(){\n  var t=this;\n  var p=t.parent;\n  if(!p)return t;\n  else return p.top();  \n}\n\nNode.prototype.adopt=function(progeny){\n  var t=this.top();\n  var c=progeny.top();\n  c.parent=t;\n  t.weight+=c.weight;\n}\n\nNode.prototype.merge=function(b){\n  var a=this.top();\n  b=b.top();\n  if(a===b)return;\n  if(a.weight<b.weight)b.adopt(a);\n  else a.adopt(b);\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 735, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(/\\s+/).map(x => x - 0);\n  var N = input.shift();\n  var M = input.shift();\n  var p = input.splice(0, N);\n  var nodes = [];\n  for (let k = 0; k < N; k++) {\n    nodes[k] = new Node(k);\n  }\n  for (let k = 0; k < M; k++) {\n    nodes[input[k * 2] - 1].merge(nodes[input[k * 2 + 1] - 1]);\n  }\n  var counter = 0;\n  for (let k = 0; k < N; k++) {\n    if (nodes[k].top() === nodes[p[k] - 1].top()) {\n      counter++;\n    }\n  }\n  console.log(counter);\n}\nfunction Node(v) {\n  var t = this;\n  t.value = v;\n  t.parent = null;\n  t.weight = 1;\n}\nNode.prototype.top = function () {\n  var t = this;\n  var p = t.parent;\n  if (!p) {\n    return t;\n  } else {\n    return p.top();\n  }\n};\nNode.prototype.adopt = function (progeny) {\n  var t = this.top();\n  var c = progeny.top();\n  c.parent = t;\n  t.weight += c.weight;\n};\nNode.prototype.merge = function (b) {\n  var a = this.top();\n  b = b.top();\n  if (a === b) {\n    return;\n  }\n  if (a.weight < b.weight) {\n    b.adopt(a);\n  } else {\n    a.adopt(b);\n  }\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4707147630106623, "ngram_match_score": 0.012288670952506707, "weighted_ngram_match_score": 0.041424652446926426, "syntax_match_score": 0.8291457286432161, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0001962478438055637, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0036363636363636598, "new_decrease_halstead_effort": -0.0036363636363636598}}
{"filename": "p03355_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var s=input[0x0];var k=toInt(input[0x1]);var l=s['length'];var arr=[];var x;for(var i=0x0;i<l;i++){for(var j=i;j<i+0x5;j++){x=s['slice'](i,j+0x1);if(arr['indexOf'](x)===-0x1)arr['push'](x);}}arr['sort']((a,b)=>a<b?-0x1:0x1);ans=arr[k-0x1];console['log'](ans);}", "test_cases": [["aba\n4", "b"], ["atcoderandatcodeer\n5", "andat"], ["z\n1", "z"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\t//input = input.map(e => toIntArr(e.split(' ')));\n\tvar s = input[0];\n\tvar k = toInt(input[1]);\n\tvar l = s.length;\n\tvar arr = [];\n\tvar x;\n \n\tfor(var i = 0; i < l; i++){\n\t\tfor(var j = i ; j < i+5; j++){\n\t\t\tx = s.slice(i,j+1);\n\t\t\tif(arr.indexOf(x)===-1) arr.push(x);\n\t\t}\n\t}\n \n\tarr.sort((a,b)=>a<b? -1: 1);\n\tans = arr[k-1];\n \n\tconsole.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 736, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var s = input[0];\n  var k = toInt(input[1]);\n  var l = s.length;\n  var arr = [];\n  var x;\n  for (var i = 0; i < l; i++) {\n    for (var j = i; j < i + 5; j++) {\n      x = s.slice(i, j + 1);\n      if (arr.indexOf(x) === -1) {\n        arr.push(x);\n      }\n    }\n  }\n  arr.sort((a, b) => a < b ? -1 : 1);\n  ans = arr[k - 1];\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6132378027415796, "ngram_match_score": 0.19374471582486058, "weighted_ngram_match_score": 0.37920649514145777, "syntax_match_score": 0.88, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00027227914265071096, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.010471204188481575, "new_decrease_halstead_effort": -0.010471204188481797}}
{"filename": "p03419_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [N,M]=args['trim']()['split']('\\x20')['map'](v=>v-0x2);return''+Math['abs'](N*M);})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 2", "0"], ["1 7", "5"], ["314 1592", "496080"]], "original": "console.log((args=>{\n  const [N,M] = args.trim().split(' ').map(v=>v-2);\n  return `${Math.abs(N*M)}`\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 737, "deobfuscated": "console.log((args => {\n  const [N, M] = args.trim().split(\" \").map(v => v - 2);\n  return \"\" + Math.abs(N * M);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.3848589659123789, "ngram_match_score": 0.012021577610863726, "weighted_ngram_match_score": 0.033183516807882445, "syntax_match_score": 0.725, "dataflow_match_score": 0.7692307692307693}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03437_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');ans=input[0x0]/ input[0x1];num=0x0;var a=Number['isInteger'](ans);if(a===!![]){ans=-0x1;}else{while(!![]){num++;cal=input[0x0]*num/ input[0x1];var b=Number['isInteger'](cal);if(b===!![]){ans=input[0x0]*(num-0x1);break;}if(input[0x0]>Math['pow'](0xa,0x9)|input[0x1]>Math['pow'](0xa,0x9)|input[0x0]*(num-0x1)>Math['pow'](0xa,0x12)){ans=-0x1;break;}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8 6", "16"], ["3 3", "-1"]], "original": "function Main(input) {\n\tinput = input.split(\" \");\n\tans = (input[0]/input[1]);\n  num =0;\nvar a = Number.isInteger(ans);\nif(a===true){ans=-1;}else{\nwhile(true){\nnum++;\ncal = ((input[0]*num)/input[1])\nvar b = Number.isInteger(cal)\n  if(b===true){ans=(input[0]*(num-1));break;}\n  if(input[0]>Math.pow(10,9)|input[1]>Math.pow(10,9)|(input[0]*(num-1))>Math.pow(10,18)){\n  ans=-1;break;\n  }\n}\n}\n  console.log(ans)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 738, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  ans = input[0] / input[1];\n  num = 0;\n  var a = Number.isInteger(ans);\n  if (a === true) {\n    ans = -1;\n  } else {\n    while (true) {\n      num++;\n      cal = input[0] * num / input[1];\n      var b = Number.isInteger(cal);\n      if (b === true) {\n        ans = input[0] * (num - 1);\n        break;\n      }\n      if (input[0] > Math.pow(10, 9) | input[1] > Math.pow(10, 9) | input[0] * (num - 1) > Math.pow(10, 18)) {\n        ans = -1;\n        break;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5872526038534789, "ngram_match_score": 0.16454453969962823, "weighted_ngram_match_score": 0.4320849233333351, "syntax_match_score": 0.7523809523809524, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007771372486680805, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06338028169014087, "new_decrease_halstead_effort": 0.17198027019190276}}
{"filename": "p03544_1", "type": "JavaScript", "obfuscated": "function main(s){var n=Number(s['split']('\\x0a')[0x0]);if(n===0x0){console['log'](0x2);return;}if(n===0x1){console['log'](0x1);return;}if(n===0x4d){console['log']('12360848946698171');return;}if(n===0x4e){console['log']('20000273725560978');return;}if(n===0x4f){console['log']('32361122672259149');return;}if(n===0x50){console['log']('52361396397820127');return;}if(n===0x51){console['log']('84722519070079276');return;}if(n===0x52){console['log']('137083915467899403');return;}if(n===0x53){console['log']('221806434537978679');return;}if(n===0x54){console['log']('358890350005878082');return;}if(n===0x55){console['log']('580696784543856761');return;}if(n===0x56){console['log']('939587134549734843');return;}var x=0x2;var y=0x1;var z=0x0;for(var i=0x2;i<=n;i++){z=x+y;x=y;y=z;}console['log'](z);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5", "11"], ["86", "939587134549734843"]], "original": "function main(s) {\n\tvar n = Number(s.split(\"\\n\")[0]);\n\tif (n === 0) {console.log(2); return;}\n\tif (n === 1) {console.log(1); return;}\n\tif (n === 77) {console.log(\"12360848946698171\"); return;}\n\tif (n === 78) {console.log(\"20000273725560978\"); return;}\n\tif (n === 79) {console.log(\"32361122672259149\"); return;}\n\tif (n === 80) {console.log(\"52361396397820127\"); return;}\n\tif (n === 81) {console.log(\"84722519070079276\"); return;}\n\tif (n === 82) {console.log(\"137083915467899403\"); return;}\n\tif (n === 83) {console.log(\"221806434537978679\"); return;}\n\tif (n === 84) {console.log(\"358890350005878082\"); return;}\n\tif (n === 85) {console.log(\"580696784543856761\"); return;}\n\tif (n === 86) {console.log(\"939587134549734843\"); return;}\n\tvar x = 2;\n\tvar y = 1;\n\tvar z = 0;\n\tfor (var i = 2; i <= n; i++) {\n\t\tz = x + y;\n\t\tx = y;\n\t\ty = z;\n\t}\n\tconsole.log(z);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 739, "deobfuscated": "function main(s) {\n  var n = Number(s.split(\"\\n\")[0]);\n  if (n === 0) {\n    console.log(2);\n    return;\n  }\n  if (n === 1) {\n    console.log(1);\n    return;\n  }\n  if (n === 77) {\n    console.log(\"12360848946698171\");\n    return;\n  }\n  if (n === 78) {\n    console.log(\"20000273725560978\");\n    return;\n  }\n  if (n === 79) {\n    console.log(\"32361122672259149\");\n    return;\n  }\n  if (n === 80) {\n    console.log(\"52361396397820127\");\n    return;\n  }\n  if (n === 81) {\n    console.log(\"84722519070079276\");\n    return;\n  }\n  if (n === 82) {\n    console.log(\"137083915467899403\");\n    return;\n  }\n  if (n === 83) {\n    console.log(\"221806434537978679\");\n    return;\n  }\n  if (n === 84) {\n    console.log(\"358890350005878082\");\n    return;\n  }\n  if (n === 85) {\n    console.log(\"580696784543856761\");\n    return;\n  }\n  if (n === 86) {\n    console.log(\"939587134549734843\");\n    return;\n  }\n  var x = 2;\n  var y = 1;\n  var z = 0;\n  for (var i = 2; i <= n; i++) {\n    z = x + y;\n    x = y;\n    y = z;\n  }\n  console.log(z);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7887029072375917, "ngram_match_score": 0.51635705570838, "weighted_ngram_match_score": 0.638454573241987, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03588_1", "type": "JavaScript", "obfuscated": "function Main(input){var max=0x0;var ans=0x0;input=input['split']('\\x0a');for(var i=0x1;i<input['length'];i++){var mem=input[i]['split']('\\x20')['map'](Number);if(max<mem[0x0]){max=mem[0x0];ans=mem[0x0]+mem[0x1];}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\n4 7\n2 9\n6 2", "8"], ["5\n1 10\n3 6\n5 2\n4 4\n2 8", "7"], ["2\n1 1000000000\n1000000000 1", "1000000001"]], "original": "function Main(input){\n\tvar max = 0;\n\tvar ans = 0;\n\tinput = input.split(\"\\n\");\n\tfor(var i=1;i<input.length;i++){\n\t\tvar mem = input[i].split(\" \").map(Number);\n\t\tif(max<mem[0]){\n\t\t\tmax = mem[0];\n\t\t\tans = mem[0]+mem[1];\n\t\t}\n\t}\n\tconsole.log(ans)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 740, "deobfuscated": "function Main(input) {\n  var max = 0;\n  var ans = 0;\n  input = input.split(\"\\n\");\n  for (var i = 1; i < input.length; i++) {\n    var mem = input[i].split(\" \").map(Number);\n    if (max < mem[0]) {\n      max = mem[0];\n      ans = mem[0] + mem[1];\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7353818423297844, "ngram_match_score": 0.3678444166737213, "weighted_ngram_match_score": 0.5736829526454161, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03687_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const S=args['trim']()['split']``['map'](c=>c['charCodeAt']()-0x61);const N=S['length'];const a=Array(0x1a)['fill'](-0x1);for(let i=0x0;i<0x1a;i++){let d=0x0;for(let j=0x0;j<N;j++){d=S[j]===i?0x0:d+0x1;if(a[i]<d)a[i]=d;}}return Math['min'](...a['filter'](v=>v>=0x0));})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["serval", "3"], ["jackal", "2"], ["zzz", "0"], ["whbrjpjyhsrywlqjxdbrbaomnw", "8"]], "original": "console.log((args=>{\n  const S = args.trim().split``.map(c=>c.charCodeAt()-97);\n  const N = S.length;\n  const a = Array(26).fill(-1);\n  for ( let i = 0; i < 26; i++ ) {\n    let d = 0;\n    for ( let j = 0; j < N; j++ ) {\n      d = S[j] === i ? 0 : d + 1;\n      if ( a[i] < d ) a[i] = d;\n    }\n  }\n  return Math.min(...a.filter(v=>v>=0));\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 741, "deobfuscated": "console.log((args => {\n  const S = args.trim().split``.map(c => c.charCodeAt() - 97);\n  const N = S.length;\n  const a = Array(26).fill(-1);\n  for (let i = 0; i < 26; i++) {\n    let d = 0;\n    for (let j = 0; j < N; j++) {\n      d = S[j] === i ? 0 : d + 1;\n      if (a[i] < d) {\n        a[i] = d;\n      }\n    }\n  }\n  return Math.min(...a.filter(v => v >= 0));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7367906429483605, "ngram_match_score": 0.5250006480488748, "weighted_ngram_match_score": 0.576923828506472, "syntax_match_score": 0.8452380952380952, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04005_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20')['map'](Number);if(input[0x0]%0x2==0x0&&input[0x1]%0x2==0x0&&input[0x2]%0x2==0x0){console['log'](0x0);}else{input=input['sort'](function(a,b){return a-b;});console['log'](input[0x1]*input[0x0]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3 3 3", "9"], ["2 2 4", "0"], ["5 3 5", "15"]], "original": "function Main(input){\n  input = input.split(\" \").map(Number);\n  if(input[0]%2==0&&input[1]%2==0&&input[2]%2==0){\n    console.log(0);\n  }else{\n    input = input.sort(function(a,b){return a-b;});\n    console.log(input[1]*input[0]);\n  }\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 742, "deobfuscated": "function Main(input) {\n  input = input.split(\" \").map(Number);\n  if (input[0] % 2 == 0 && input[1] % 2 == 0 && input[2] % 2 == 0) {\n    console.log(0);\n  } else {\n    input = input.sort(function (a, b) {\n      return a - b;\n    });\n    console.log(input[1] * input[0]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5659841667020551, "ngram_match_score": 0.0643346787307468, "weighted_ngram_match_score": 0.19960198807747329, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00016_1", "type": "JavaScript", "obfuscated": "m='+=+j[0]*Math.',n='(s*Math.PI/180)',x=y=s=0x0;require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['some'](function(i){j=i['split'](','),eval('x'+m+'sin'+n+',y'+m+'cos'+n),s+=+j[0x1];});console['log'](~~x),console['log'](~~y);", "test_cases": [["56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0", "171\n-302"]], "original": "m='+=+j[0]*Math.',n='(s*Math.PI/180)',x=y=s=0;require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){j=i.split(','),eval('x'+m+'sin'+n+',y'+m+'cos'+n),s+=+j[1]});console.log(~~x),console.log(~~y)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 743, "deobfuscated": "m = \"+=+j[0]*Math.\";\nn = \"(s*Math.PI/180)\";\nx = y = s = 0;\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").some(function (i) {\n  j = i.split(\",\");\n  eval(\"x\" + m + \"sin\" + n + \",y\" + m + \"cos\" + n);\n  s += +j[1];\n});\nconsole.log(~~x);\nconsole.log(~~y);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4552238805970149, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.8208955223880597, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 1.25, "length_score": -1.25, "increase_maintainability": -0.11894014120093699, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00028_1", "type": "JavaScript", "obfuscated": "for(a=[],b=0x64;b--;)c=a[b]=0x0;require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a')['some'](function(i){if(+i)a[+i]++,c=a[+i]>c?a[+i]:c;});a['some'](function(i,j){if(i==c)console['log'](j);});", "test_cases": [["5\n6\n3\n5\n8\n7\n5\n3\n9\n7\n3\n4", "3\n5"]], "original": "for(a=[],b=100;b--;)c=a[b]=0;require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').some(function(i){if(+i)a[+i]++,c=a[+i]>c?a[+i]:c});a.some(function(i,j){if(i==c)console.log(j)})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 744, "deobfuscated": "a = [];\nb = 100;\nwhile (b--) {\n  c = a[b] = 0;\n}\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\").some(function (i) {\n  if (+i) {\n    a[+i]++;\n    c = a[+i] > c ? a[+i] : c;\n  }\n});\na.some(function (i, j) {\n  if (i == c) {\n    console.log(j);\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4107675111773472, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.6885245901639344, "dataflow_match_score": 0.9545454545454546}, "code_complexity": {"difference_score": 0.375, "length_score": -0.375, "increase_maintainability": -0.02618582487896126, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00030_1", "type": "JavaScript", "obfuscated": "function comb(r){var c=[];c[0x0]=-0x1;var k=0x1;c[0x1]=0x0;var ret=[];while(k!=0x0){for(var i=k+0x1;i<=r;i++){c[i]=c[i-0x1]+0x1;}var arr=[];for(var i=0x1;i<=r;i++){arr['push'](c[i]);}ret['push'](arr);k=r;while(c[k]==0x9-r+k)k=k-0x1;c[k]=c[k]+0x1;}return ret;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split']('\\x0a');var line;while(line=lines['shift']()){var nums=line['split']('\\x20');var n=+nums[0x0];var s=+nums[0x1];if(n+s==0x0)break;var c=comb(n);var cnt=0x0;for(var i=0x0;i<c['length'];i++){var arr=c[i];if(s==arr['reduce'](function(prev,now){return prev+now;})){cnt++;}}console['log'](cnt);}", "test_cases": [["3 6\n3 1\n0 0", "3\n0"]], "original": "function comb(r) {\n\tvar c = [];\n\tc[0] = -1;\n\tvar k = 1;\n\tc[1] = 0;\n\tvar ret = [];\n\n\twhile (k != 0) {\n\t\tfor (var i = k + 1; i <= r; i++) {\n\t\t\tc[i] = c[i - 1] + 1;\n\t\t}\n\n\t\tvar arr = []\n\t\tfor (var i = 1; i <= r; i++) {\n\t\t\tarr.push(c[i]);\n\t\t}\n\t\tret.push(arr);\n\n\t\tk = r;\n\t\twhile (c[k] == 9 - r + k)\n\t\t\tk = k - 1;\n\n\t\tc[k] = c[k] + 1;\n\t}\n\n\treturn ret;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n\tvar nums = line.split(' ');\n\tvar n = +nums[0];\n\tvar s = +nums[1];\n\tif (n + s == 0)\n\t\tbreak;\n\n\tvar c = comb(n);\n\n\tvar cnt = 0;\n\tfor (var i = 0; i < c.length; i++) {\n\t\tvar arr = c[i];\n\t\tif (s == arr.reduce(function(prev, now){return prev + now;})) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\n\tconsole.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 745, "deobfuscated": "function comb(r) {\n  var c = [];\n  c[0] = -1;\n  var k = 1;\n  c[1] = 0;\n  var ret = [];\n  while (k != 0) {\n    for (var i = k + 1; i <= r; i++) {\n      c[i] = c[i - 1] + 1;\n    }\n    var arr = [];\n    for (var i = 1; i <= r; i++) {\n      arr.push(c[i]);\n    }\n    ret.push(arr);\n    k = r;\n    while (c[k] == 9 - r + k) {\n      k = k - 1;\n    }\n    c[k] = c[k] + 1;\n  }\n  return ret;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var nums = line.split(\" \");\n  var n = +nums[0];\n  var s = +nums[1];\n  if (n + s == 0) {\n    break;\n  }\n  var c = comb(n);\n  var cnt = 0;\n  for (var i = 0; i < c.length; i++) {\n    var arr = c[i];\n    if (s == arr.reduce(function (prev, now) {\n      return prev + now;\n    })) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9023988860595542, "ngram_match_score": 0.8110618615598664, "weighted_ngram_match_score": 0.8565981988073829, "syntax_match_score": 0.9419354838709677, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00040_1", "type": "JavaScript", "obfuscated": "(function(input){var p=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Number(p['shift']());for(var i=0x0;i<n;i++){console['log'](conv(p['shift']()));}}(require('fs')['readFileSync']('/dev/stdin','utf8')));function conv(s){a=s['split']('\\x20');for(var i=0x0;i<a['length'];i++){var r=check(a[i]);if(r){return conv_(s,r);}}return s;}function conv_(s,r){var a=r[0x0];var b=r[0x1];var s=s['split']('')['map'](function(e){if(e==='\\x20'){return e;}return String['fromCharCode']((a*e['charCodeAt'](0x0)+b)%0x1a+'a'['charCodeAt'](0x0));})['join']('');return s;}function check(str){if(str['length']!==0x4){return![];}for(var i=0x0;i<0x1a;i++){for(var j=0x0;j<0x1a;j++){var s=conv_(str,[i,j]);if(s==='this'||s==='that'){return[i,j];}}}return![];}", "test_cases": [["1\ny eazqyp pnop pngtg ye obmpngt xmybp mr lygw", "i submit that there is another point of view"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    console.log(conv(p.shift()));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction conv(s) {\n  a = s.split(' ');\n  for (var i = 0; i < a.length; i++) {\n    var r = check(a[i]);\n    if (r) {\n      return conv_(s, r);\n    }\n  }\n  return s;\n}\n\nfunction conv_(s, r) {\n  var a = r[0];\n  var b = r[1];\n  var s = s.split('').map(function(e) {\n    if (e === ' ') {\n      return e;\n    }\n    return String.fromCharCode((a * e.charCodeAt(0) + b) % 26 + 'a'.charCodeAt(0));\n  }).join('');\n  return s;\n}\n\nfunction check(str) {\n  if (str.length !== 4) {\n    return false;\n  }\n  for (var i = 0; i < 26; i++) {\n    for (var j = 0; j < 26; j++) {\n      var s = conv_(str, [i, j]);\n      if (s === 'this' || s === 'that') {\n        return [i, j];\n      }\n    }\n  }\n  return false;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 746, "deobfuscated": "(function (input) {\n  var p = input.replace(/\\n$/, \"\").split(\"\\n\");\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    console.log(conv(p.shift()));\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction conv(s) {\n  a = s.split(\" \");\n  for (var i = 0; i < a.length; i++) {\n    var r = check(a[i]);\n    if (r) {\n      return conv_(s, r);\n    }\n  }\n  return s;\n}\nfunction conv_(s, r) {\n  var a = r[0];\n  var b = r[1];\n  var s = s.split(\"\").map(function (e) {\n    if (e === \" \") {\n      return e;\n    }\n    return String.fromCharCode((a * e.charCodeAt(0) + b) % 26 + \"a\".charCodeAt(0));\n  }).join(\"\");\n  return s;\n}\nfunction check(str) {\n  if (str.length !== 4) {\n    return false;\n  }\n  for (var i = 0; i < 26; i++) {\n    for (var j = 0; j < 26; j++) {\n      var s = conv_(str, [i, j]);\n      if (s === \"this\" || s === \"that\") {\n        return [i, j];\n      }\n    }\n  }\n  return false;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8926085614500082, "ngram_match_score": 0.8203179497763412, "weighted_ngram_match_score": 0.8390051849125806, "syntax_match_score": 1.0, "dataflow_match_score": 0.9111111111111111}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.003454639988040409, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.018433179723502335, "new_decrease_halstead_effort": 0.09403365451752554}}
{"filename": "p00054_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);var n=arr[0x2];var sum=0x0;while(n--){var str=(arr[0x0]/arr[0x1])['toFixed'](n+0x2)['slice'](-0x2);sum+=str[0x0]-0x0;}console['log'](sum);}", "test_cases": [["1 2 3\n2 3 4\n5 4 3\n4 3 2", "5\n24\n7\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   var n=arr[2];\n   var sum=0;\n   while(n--){\n      var str=((arr[0]/arr[1]).toFixed(n+2)).slice(-2);\n      sum+=(str[0]-0);\n   }\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 747, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  var n = arr[2];\n  var sum = 0;\n  while (n--) {\n    var str = (arr[0] / arr[1]).toFixed(n + 2).slice(-2);\n    sum += str[0] - 0;\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47075710513200675, "ngram_match_score": 0.03760979247438994, "weighted_ngram_match_score": 0.09541862805363703, "syntax_match_score": 0.75, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00110_1", "type": "JavaScript", "obfuscated": "function main(){input['forEach'](function(line){var a,b,c,p,x,y,z,i;if(line['trim']()==='')return;p=line['match'](/([0-9X]+)\\+([0-9X]+)\\=([0-9X]+)/);a=p[0x1];b=p[0x2];c=p[0x3];for(i=0x0;i<=0x9;i++){if(i===0x0&&(a['charAt'](0x0)==='X'||b['charAt'](0x0)==='X'||c['charAt'](0x0)==='X'))continue;x=parseInt(a['replace'](/X/g,i),0xa);y=parseInt(b['replace'](/X/g,i),0xa);z=parseInt(c['replace'](/X/g,i),0xa);if(x+y===z)break;}console['log'](i===0xa?'NA':i);});}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["123+4X6=X79\n12X+4X6=X79\nXX22+89=X2XX", "5\nNA\n1"]], "original": "function main() {\n  input.forEach(function(line) {\n    var\n    a, b, c, p,\n    x, y, z,\n    i;\n    if(line.trim() === '') return;\n    p = line.match(/([0-9X]+)\\+([0-9X]+)\\=([0-9X]+)/);\n    a = p[1]; b = p[2]; c = p[3];\n    for(i = 0; i <= 9; i++) {\n      if(i === 0 && (a.charAt(0) === 'X' || b.charAt(0) === 'X' || c.charAt(0) === 'X')) continue;\n      x = parseInt(a.replace(/X/g, i), 10);\n      y = parseInt(b.replace(/X/g, i), 10);\n      z = parseInt(c.replace(/X/g, i), 10);\n      if(x + y === z) break;\n    }\n    console.log(i === 10 ? 'NA' : i);\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 748, "deobfuscated": "function main() {\n  input.forEach(function (line) {\n    var a;\n    var b;\n    var c;\n    var p;\n    var x;\n    var y;\n    var z;\n    var i;\n    if (line.trim() === \"\") {\n      return;\n    }\n    p = line.match(/([0-9X]+)\\+([0-9X]+)\\=([0-9X]+)/);\n    a = p[1];\n    b = p[2];\n    c = p[3];\n    for (i = 0; i <= 9; i++) {\n      if (i === 0 && (a.charAt(0) === \"X\" || b.charAt(0) === \"X\" || c.charAt(0) === \"X\")) {\n        continue;\n      }\n      x = parseInt(a.replace(/X/g, i), 10);\n      y = parseInt(b.replace(/X/g, i), 10);\n      z = parseInt(c.replace(/X/g, i), 10);\n      if (x + y === z) {\n        break;\n      }\n    }\n    console.log(i === 10 ? \"NA\" : i);\n  });\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7184753283099095, "ngram_match_score": 0.43905881033934363, "weighted_ngram_match_score": 0.5269477660581888, "syntax_match_score": 0.9078947368421053, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0016198490558418932, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03804347826086962, "new_decrease_halstead_effort": -0.03804347826086962}}
{"filename": "p00140_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Arr['shift']()-0x0;for(var i=0x0;i<n;i++){var arr=Arr[i]['split']('\\x20')['map'](Number);var s=arr[0x0];var g=arr[0x1];var ans=[s];var plus=0x1;if(s<g){do{s++;ans['push'](s);}while(s!=g);}else if(s>g&&s<=0x5){do{s--;ans['push'](s);}while(s!=g);}else if(s>g&&s>=0x6&&g>=0x6){do{s++;if(s==0xa){s=0x5;}ans['push'](s);}while(s!=g);}else if(s>g&&s>=0x6&&g<=0x5){do{s+=plus;if(s==0xa){s=0x5;plus=-0x1;};ans['push'](s);}while(s!=g);}console['log'](ans['join']('\\x20'));}", "test_cases": [["2\n2 4\n4 2", "2 3 4\n4 3 2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var i=0;i<n;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   var s=arr[0];\n   var g=arr[1];\n   var ans=[s];\n   var plus=1;\n   if(s<g){do{s++;ans.push(s);}while(s!=g);}\n   else if(s>g && s<=5){do{s--;ans.push(s);}while(s!=g);}\n   else if(s>g && s>=6 && g>=6){do{s++;if(s==10){s=5;}ans.push(s);}while(s!=g);}\n   else if(s>g && s>=6 && g<=5){do{s+=plus;if(s==10){s=5;plus=-1;};ans.push(s);}while(s!=g);}\n   console.log(ans.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 749, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nvar n = Arr.shift() - 0;\nfor (var i = 0; i < n; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  var s = arr[0];\n  var g = arr[1];\n  var ans = [s];\n  var plus = 1;\n  if (s < g) {\n    do {\n      s++;\n      ans.push(s);\n    } while (s != g);\n  } else if (s > g && s <= 5) {\n    do {\n      s--;\n      ans.push(s);\n    } while (s != g);\n  } else if (s > g && s >= 6 && g >= 6) {\n    do {\n      s++;\n      if (s == 10) {\n        s = 5;\n      }\n      ans.push(s);\n    } while (s != g);\n  } else if (s > g && s >= 6 && g <= 5) {\n    do {\n      s += plus;\n      if (s == 10) {\n        s = 5;\n        plus = -1;\n      }\n      ;\n      ans.push(s);\n    } while (s != g);\n  }\n  console.log(ans.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5081957621812038, "ngram_match_score": 0.01392792767031701, "weighted_ngram_match_score": 0.058855121054498076, "syntax_match_score": 0.96, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02249_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};line=require('fs')['readFileSync'](config['input'],'ascii')['split'](config['newline']);line[0x0]=line[0x0]['split']('\\x20')['map'](Number);H=line[0x0][0x0];W=line[0x0][0x1];field=line['slice'](0x1,0x1+H);line[0x1+H]=line[0x1+H]['split']('\\x20')['map'](Number);R=line[0x1+H][0x0];C=line[0x1+H][0x1];pat=line['slice'](0x1+H+0x1,0x1+H+0x1+R);mem=new Array(H);for(i=0x0;i<H;i++){mem[i]=new Array(R);for(j=0x0;j<R;j++){mem[i][j]={};k=field[i]['indexOf'](pat[j]);while(k!==-0x1){mem[i][j][k]=!![];k=field[i]['indexOf'](pat[j],k+0x1);}}}for(i=0x0;i<=H-R;i++){for(j=0x0;j<=W-C;j++){flag=!![];for(k=0x0;k<R;k++){if(!mem[i+k][k]['hasOwnProperty'](j)){flag=![];break;}}if(flag)console['log']('%d\\x20%d',i,j);}}", "test_cases": [["4 5\n00010\n00101\n00010\n00100\n3 2\n10\n01\n10", "0 3\n1 2"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline);\nline[0] = line[0].split(' ').map(Number);\nH = line[0][0];\nW = line[0][1];\nfield = line.slice(1, 1+H);\nline[1+H] = line[1+H].split(' ').map(Number);\nR = line[1+H][0];\nC = line[1+H][1];\npat = line.slice(1+H+1, 1+H+1+R);\n\nmem = new Array(H);\nfor (i = 0; i < H; i++) {\n  mem[i] = new Array(R);\n  for (j = 0; j < R; j++) {\n    mem[i][j] = {};\n    k = field[i].indexOf(pat[j])\n    while (k !== -1) {\n      mem[i][j][k] = true;\n      k = field[i].indexOf(pat[j], k + 1);\n    }\n  }\n}\n\nfor (i = 0; i <= H - R; i++) {\n  for (j = 0; j <= W - C; j++) {\n    flag = true;\n    for (k = 0; k < R; k++) {\n      if (!mem[i+k][k].hasOwnProperty(j)) {\n        flag = false;\n        break;\n      }\n    }\n    if (flag) console.log('%d %d', i, j);\n  }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 750, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nline = require(\"fs\").readFileSync(config.input, \"ascii\").split(config.newline);\nline[0] = line[0].split(\" \").map(Number);\nH = line[0][0];\nW = line[0][1];\nfield = line.slice(1, 1 + H);\nline[1 + H] = line[1 + H].split(\" \").map(Number);\nR = line[1 + H][0];\nC = line[1 + H][1];\npat = line.slice(1 + H + 1, 1 + H + 1 + R);\nmem = new Array(H);\nfor (i = 0; i < H; i++) {\n  mem[i] = new Array(R);\n  for (j = 0; j < R; j++) {\n    mem[i][j] = {};\n    k = field[i].indexOf(pat[j]);\n    while (k !== -1) {\n      mem[i][j][k] = true;\n      k = field[i].indexOf(pat[j], k + 1);\n    }\n  }\n}\nfor (i = 0; i <= H - R; i++) {\n  for (j = 0; j <= W - C; j++) {\n    flag = true;\n    for (k = 0; k < R; k++) {\n      if (!mem[i + k][k].hasOwnProperty(j)) {\n        flag = false;\n        break;\n      }\n    }\n    if (flag) {\n      console.log(\"%d %d\", i, j);\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8255214139470857, "ngram_match_score": 0.6403868607449829, "weighted_ngram_match_score": 0.6954066602118991, "syntax_match_score": 0.9662921348314607, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005955902455216933, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.029962546816479363, "new_decrease_halstead_effort": 0.12669312197569382}}
{"filename": "p02273_1", "type": "JavaScript", "obfuscated": "class Point{constructor(x,y){this['x']=x;this['y']=y;}['print'](){console['log'](this['x']['toFixed'](0x8)+'\\x20'+this['y']['toFixed'](0x8));}}(function main(){const n=Number(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());let p1=new Point(0x0,0x0);let p2=new Point(0x64,0x0);p1['print']();kock(n,p1,p2);p2['print']();}());function kock(n,p1,p2){const sin60=Math['sin'](0x3c*Math['PI']/0xb4);const cos60=Math['cos'](0x3c*Math['PI']/0xb4);function innerFunc(n,p1,p2){if(!n)return;xDiff=p2['x']-p1['x'];yDiff=p2['y']-p1['y'];let s=new Point(p1['x']+xDiff/0x3,p1['y']+yDiff/0x3);let t=new Point(s['x']+xDiff/0x3,s['y']+yDiff/0x3);let u=new Point((t['x']-s['x'])*cos60-(t['y']-s['y'])*sin60+s['x'],(t['x']-s['x'])*sin60+(t['y']-s['y'])*cos60+s['y']);kock(n-0x1,p1,s);s['print']();kock(n-0x1,s,u);u['print']();kock(n-0x1,u,t);t['print']();kock(n-0x1,t,p2);}kock=innerFunc;innerFunc(n,p1,p2);}", "test_cases": [["1", "0.00000000 0.00000000\n33.33333333 0.00000000\n50.00000000 28.86751346\n66.66666667 0.00000000\n100.00000000 0.00000000"], ["2", "0.00000000 0.00000000\n11.11111111 0.00000000\n16.66666667 9.62250449\n22.22222222 0.00000000\n33.33333333 0.00000000\n38.88888889 9.62250449\n33.33333333 19.24500897\n44.44444444 19.24500897\n50.00000000 28.86751346\n55.55555556 19.24500897\n66.66666667 19.24500897\n61.11111111 9.62250449\n66.66666667 0.00000000\n77.77777778 0.00000000\n83.33333333 9.62250449\n88.88888889 0.00000000\n100.00000000 0.00000000"]], "original": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  print() {\n    console.log(this.x.toFixed(8) + ' ' + this.y.toFixed(8));\n  }\n}\n\n(function main(){\n  const n = Number(require('fs').readFileSync('/dev/stdin', 'utf8').trim());\n  let p1 = new Point(0, 0);\n  let p2 = new Point(100, 0);\n  p1.print();\n  kock(n, p1, p2);\n  p2.print();\n})();\n\nfunction kock(n, p1, p2) {\n  const sin60 = Math.sin(60 * Math.PI / 180);\n  const cos60 = Math.cos(60 * Math.PI / 180);\n  function innerFunc(n, p1, p2) {\n    if (!n) return;\n    xDiff = p2.x - p1.x;\n    yDiff = p2.y - p1.y;\n    let s = new Point(p1.x + xDiff / 3, p1.y + yDiff / 3);\n    let t = new Point(s.x + xDiff / 3, s.y + yDiff / 3);\n    let u = new Point((t.x - s.x) * cos60 - (t.y - s.y) * sin60 + s.x, (t.x - s.x) * sin60 + (t.y - s.y) * cos60 + s.y);\n    kock(n-1, p1, s); s.print();\n    kock(n-1, s, u);  u.print();\n    kock(n-1, u, t);  t.print();\n    kock(n-1, t, p2);\n  }\n  kock = innerFunc;\n  innerFunc(n, p1, p2);\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 751, "deobfuscated": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n  print() {\n    console.log(this.x.toFixed(8) + \" \" + this.y.toFixed(8));\n  }\n}\n(function main() {\n  const n = Number(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n  let p1 = new Point(0, 0);\n  let p2 = new Point(100, 0);\n  p1.print();\n  kock(n, p1, p2);\n  p2.print();\n})();\nfunction kock(n, p1, p2) {\n  const sin60 = Math.sin(Math.PI * 60 / 180);\n  const cos60 = Math.cos(Math.PI * 60 / 180);\n  function innerFunc(n, p1, p2) {\n    if (!n) {\n      return;\n    }\n    xDiff = p2.x - p1.x;\n    yDiff = p2.y - p1.y;\n    let s = new Point(p1.x + xDiff / 3, p1.y + yDiff / 3);\n    let t = new Point(s.x + xDiff / 3, s.y + yDiff / 3);\n    let u = new Point((t.x - s.x) * cos60 - (t.y - s.y) * sin60 + s.x, (t.x - s.x) * sin60 + (t.y - s.y) * cos60 + s.y);\n    kock(n - 1, p1, s);\n    s.print();\n    kock(n - 1, s, u);\n    u.print();\n    kock(n - 1, u, t);\n    t.print();\n    kock(n - 1, t, p2);\n  }\n  kock = innerFunc;\n  innerFunc(n, p1, p2);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8721333436193592, "ngram_match_score": 0.7639598578936055, "weighted_ngram_match_score": 0.8193103586890944, "syntax_match_score": 0.9052631578947369, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02278_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};line=require('fs')['readFileSync'](config['input'],'ascii')['split'](config['newline'],0x2);w=line[0x1]['split']('\\x20')['map'](Number);sorted=[]['concat'](w);sorted['sort'](function(a,b){return a-b;});cost=0x0;for(i=w['length']-0x1;i>=0x0;i--){idx=w['indexOf'](sorted[i]);if(idx===i)continue;cost+=w[i]+w[idx];tmp=w[i];w[i]=w[idx];w[idx]=tmp;}console['log'](cost);", "test_cases": [["5\n1 5 3 4 2", "7"], ["4\n4 3 2 1", "10"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline, 2);\n\nw = line[1].split(' ').map(Number);\n\nsorted = [].concat(w);\nsorted.sort(function (a, b) { return a - b; });\n\ncost = 0;\nfor (i = w.length - 1; i >= 0; i--) {\n  idx = w.indexOf(sorted[i]);\n  if (idx === i) continue;\n  cost += w[i] + w[idx];\n  tmp = w[i];\n  w[i] = w[idx];\n  w[idx] = tmp;\n}\n\nconsole.log(cost);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 752, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nline = require(\"fs\").readFileSync(config.input, \"ascii\").split(config.newline, 2);\nw = line[1].split(\" \").map(Number);\nsorted = [].concat(w);\nsorted.sort(function (a, b) {\n  return a - b;\n});\ncost = 0;\nfor (i = w.length - 1; i >= 0; i--) {\n  idx = w.indexOf(sorted[i]);\n  if (idx === i) {\n    continue;\n  }\n  cost += w[i] + w[idx];\n  tmp = w[i];\n  w[i] = w[idx];\n  w[idx] = tmp;\n}\nconsole.log(cost);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.815614823652936, "ngram_match_score": 0.6484266123887975, "weighted_ngram_match_score": 0.6600096937171993, "syntax_match_score": 0.9540229885057471, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02549_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\\x0a');const [N,K]=lines[0x0]['split']('\\x20')['map'](Number);const k=[];for(let i=0x1;i<=K;i++){const [L,R]=lines[i]['split']('\\x20')['map'](Number);k['push']([L,R]);}const ksum=Array(K)['fill'](0x0);const mod=0x3b800001;const map=Array(N)['fill'](0x0);map[0x0]=0x1;for(let i=0x1;i<map['length'];i++){let c=0x0;for(let j=0x0;j<k['length'];j++){ksum[j]=ksum[j]+(map[i-k[j][0x0]]||0x0)-(map[i-k[j][0x1]-0x1]||0x0);}map[i]=ksum['reduce']((a,b)=>a+b)%mod;}console['log'](map['pop']());", "test_cases": [["5 2\n1 1\n3 4", "4"], ["5 2\n3 3\n5 5", "0"], ["5 1\n1 2", "5"], ["60 3\n5 8\n1 3\n10 15", "221823067"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nconst lines = input.split('\\n')\nconst [N, K] = lines[0].split(' ').map(Number)\nconst k = []\n\nfor (let i = 1; i <= K; i++) {\n    const [L, R] = lines[i].split(' ').map(Number)\n    k.push([L, R])\n}\nconst ksum = Array(K).fill(0)\n\nconst mod = 998244353\nconst map = Array(N).fill(0)\nmap[0] = 1\n\nfor (let i = 1; i < map.length; i++) {\n    let c = 0\n    for (let j = 0; j < k.length; j++) {\n        ksum[j] = ksum[j] + (map[i - k[j][0]] || 0) - (map[i - k[j][1] -1 ] || 0)\n    }\n    map[i] = ksum.reduce((a, b) => a + b) % mod\n}\n\nconsole.log(map.pop())\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 753, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.split(\"\\n\");\nconst [N, K] = lines[0].split(\" \").map(Number);\nconst k = [];\nfor (let i = 1; i <= K; i++) {\n  const [L, R] = lines[i].split(\" \").map(Number);\n  k.push([L, R]);\n}\nconst ksum = Array(K).fill(0);\nconst mod = 998244353;\nconst map = Array(N).fill(0);\nmap[0] = 1;\nfor (let i = 1; i < map.length; i++) {\n  let c = 0;\n  for (let j = 0; j < k.length; j++) {\n    ksum[j] = ksum[j] + (map[i - k[j][0]] || 0) - (map[i - k[j][1] - 1] || 0);\n  }\n  map[i] = ksum.reduce((a, b) => a + b) % mod;\n}\nconsole.log(map.pop());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7632501228879665, "ngram_match_score": 0.6403506101374703, "weighted_ngram_match_score": 0.6501498814143957, "syntax_match_score": 1.0, "dataflow_match_score": 0.7625}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009126475690648395, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.023957829220564886}}
{"filename": "p02588_1", "type": "JavaScript", "obfuscated": "function Main(input){let [l,...valArr]=input['split']('\\x0a');valArr=valArr['map'](e=>parseFloat(e));let result=[];for(let ele of valArr){let temp=valArr['map'](e=>{if(e!==ele&&e*ele%0x1===0x0&&ele<e){return[ele,e];}});temp=temp['filter'](e=>e!==undefined);if(temp['length']){result=[...result,...temp];}}console['log'](result['length']);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n7.5\n2.4\n17.000000001\n17\n16.000000000", "3"], ["11\n0.9\n1\n1\n1.25\n2.30000\n5\n70\n0.000000001\n9999.999999999\n0.999999999\n1.000000001", "8"]], "original": "function Main(input) {\n  let [l, ...valArr] = input.split('\\n')\n  valArr = valArr.map(e=>parseFloat(e))\n  let result = []\n  for(let ele of valArr){\n    let temp = valArr.map(e=>{\n    \tif((e !== ele && (e*ele)%1===0)&&ele<e){\n        \treturn [ele, e]\n        }\n    })\n    temp =temp.filter(e=>e!==undefined)\n    if(temp.length){result = [...result, ...temp]}\n  }\n  console.log(result.length)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 754, "deobfuscated": "function Main(input) {\n  let [l, ...valArr] = input.split(\"\\n\");\n  valArr = valArr.map(e => parseFloat(e));\n  let result = [];\n  for (let ele of valArr) {\n    let temp = valArr.map(e => {\n      if (e !== ele && e * ele % 1 === 0 && ele < e) {\n        return [ele, e];\n      }\n    });\n    temp = temp.filter(e => e !== undefined);\n    if (temp.length) {\n      result = [...result, ...temp];\n    }\n  }\n  console.log(result.length);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5534705703329009, "ngram_match_score": 0.16992037861891177, "weighted_ngram_match_score": 0.2875516463024354, "syntax_match_score": 0.7564102564102564, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02863_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var N=parseInt(input[0x0][0x0],0xa);var T=parseInt(input[0x0][0x1],0xa);var arr_AB=[];for(var i=0x0;i<N;i++){arr_AB['push'](input[i+0x1]['map'](e=>parseInt(e,0xa)));}arr_AB['sort']((a,b)=>a[0x0]-b[0x0]);var dp=[];var Ai,Bi;dp['push'](Array['from']({'length':T},()=>[0x0,0x0]));for(var i=0x0;i<N;i++){dp['push']([]);Ai=arr_AB[i][0x0];Bi=arr_AB[i][0x1];for(var j=0x0;j<T;j++){dp[i+0x1]['push']([0x0,0x0]);if(Ai<=j){dp[i+0x1][j][0x0]=Math['max'](dp[i][j][0x0],dp[i][j-Ai][0x0]+Bi);}else{dp[i+0x1][j][0x0]=dp[i][j][0x0];}dp[i+0x1][j][0x1]=Math['max'](dp[i][j][0x1],dp[i][j][0x0]+Bi);}}console['log'](dp[N][T-0x1][0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 60\n10 10\n100 100", "110"], ["3 60\n10 10\n10 20\n10 30", "60"], ["3 60\n30 10\n30 20\n30 30", "50"], ["10 100\n15 23\n20 18\n13 17\n24 12\n18 29\n19 27\n23 21\n18 20\n27 15\n22 25", "145"]], "original": "//TLEか？\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n\tvar N = parseInt(input[0][0], 10);\n\tvar T = parseInt(input[0][1], 10);\n\tvar arr_AB = [];\n\tfor (var i = 0; i < N; i++){\n\t\tarr_AB.push(input[i + 1].map(e => parseInt(e, 10)));\n\t}\n\tarr_AB.sort((a, b) => a[0] - b[0]);\n\tvar dp = [];\n\tvar Ai, Bi;\n\tdp.push(Array.from({length: T}, () => [0, 0]));\n\tfor (var i = 0; i < N; i++){\n\t\tdp.push([]);\n\t\tAi = arr_AB[i][0];\n\t\tBi = arr_AB[i][1];\n\t\tfor (var j = 0; j < T; j++){\n\t\t\tdp[i + 1].push([0, 0])\n\t\t\t// console.log(i, j, dp);\n\t\t\tif (Ai <= j){\n\t\t\t\tdp[i + 1][j][0] = Math.max(dp[i][j][0], dp[i][j - Ai][0] + Bi);\n\t\t\t} else {\n\t\t\t\tdp[i + 1][j][0] = dp[i][j][0];\n\t\t\t}\n\t\t\tdp[i + 1][j][1] = Math.max(dp[i][j][1], dp[i][j][0] + Bi);\n\t\t}\n\t\t\n\t}\n\tconsole.log(dp[N][T - 1][1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 755, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var N = parseInt(input[0][0], 10);\n  var T = parseInt(input[0][1], 10);\n  var arr_AB = [];\n  for (var i = 0; i < N; i++) {\n    arr_AB.push(input[i + 1].map(e => parseInt(e, 10)));\n  }\n  arr_AB.sort((a, b) => a[0] - b[0]);\n  var dp = [];\n  var Ai;\n  var Bi;\n  dp.push(Array.from({\n    length: T\n  }, () => [0, 0]));\n  for (var i = 0; i < N; i++) {\n    dp.push([]);\n    Ai = arr_AB[i][0];\n    Bi = arr_AB[i][1];\n    for (var j = 0; j < T; j++) {\n      dp[i + 1].push([0, 0]);\n      if (Ai <= j) {\n        dp[i + 1][j][0] = Math.max(dp[i][j][0], dp[i][j - Ai][0] + Bi);\n      } else {\n        dp[i + 1][j][0] = dp[i][j][0];\n      }\n      dp[i + 1][j][1] = Math.max(dp[i][j][1], dp[i][j][0] + Bi);\n    }\n  }\n  console.log(dp[N][T - 1][1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8821233075237688, "ngram_match_score": 0.7600447288594102, "weighted_ngram_match_score": 0.7899538775797508, "syntax_match_score": 0.978494623655914, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00015261622113071915, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.003875968992248069, "new_decrease_halstead_effort": -0.003875968992248069}}
{"filename": "p03151_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');N=inp['shift']()*0x1;A=inp['shift']()['split']('\\x20');B=inp['shift']()['split']('\\x20');sumA=0x0;sumB=0x0;s=0x0;t=[];cnt=0x0;for(i=0x0;i<N;i++){a=A[i]*0x1;b=B[i]*0x1;d=a-b;if(d<0x0){cnt++;s+=d;}else{t['push'](d);}sumA+=a;sumB+=b;}if(sumA>=sumB){t['sort']((a,b)=>b-a);j=0x0;while(s<0x0){s+=t[j];j++;}console['log'](cnt+j);}else{console['log'](-0x1);}", "test_cases": [["3\n2 3 5\n3 4 1", "3"], ["3\n2 3 3\n2 2 1", "0"], ["3\n17 7 1\n25 6 14", "-1"], ["12\n757232153 372327760 440075441 195848680 354974235 458054863 463477172 740174259 615762794 632963102 529866931 64991604\n74164189 98239366 465611891 362739947 147060907 118867039 63189252 78303147 501410831 110823640 122948912 572905212", "5"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nN = inp.shift() * 1\nA = inp.shift().split(' ')\nB = inp.shift().split(' ')\nsumA = 0\nsumB = 0\ns = 0\nt = []\ncnt = 0\nfor (i=0; i<N; i++) {\n  a = A[i] * 1\n  b = B[i] * 1\n  d = a - b\n  if (d < 0) {\n      cnt++\n      s += d \n  } else {\n      t.push(d)\n  }\n  sumA += a\n  sumB += b\n}\n\nif (sumA >= sumB) {\n  t.sort((a, b) => b - a)\n  j = 0\n  while (s < 0) {\n      s += t[j]\n      j++\n  }\n  console.log(cnt+j)\n} else {\n  console.log(-1)\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 756, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nN = inp.shift() * 1;\nA = inp.shift().split(\" \");\nB = inp.shift().split(\" \");\nsumA = 0;\nsumB = 0;\ns = 0;\nt = [];\ncnt = 0;\nfor (i = 0; i < N; i++) {\n  a = A[i] * 1;\n  b = B[i] * 1;\n  d = a - b;\n  if (d < 0) {\n    cnt++;\n    s += d;\n  } else {\n    t.push(d);\n  }\n  sumA += a;\n  sumB += b;\n}\nif (sumA >= sumB) {\n  t.sort((a, b) => b - a);\n  j = 0;\n  while (s < 0) {\n    s += t[j];\n    j++;\n  }\n  console.log(cnt + j);\n} else {\n  console.log(-1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6880422172413228, "ngram_match_score": 0.36208513722178826, "weighted_ngram_match_score": 0.3900837317435028, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03287_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=s[0x0]['split']('\\x20')['map'](a=>+a);var m=n[0x1];n=n[0x0];var a=s[0x1]['split']('\\x20')['map'](a=>+a);var ans=0x0;var b={};var t=0x0;for(var i=0x0;i<n;i++){t=(t+a[i])%m;if(b[t])b[t]++;else b[t]=0x1;}for(i in b){i=+i;if(i===0x0)ans+=b[i]*(b[i]+0x1)/0x2;else if(b[i]>0x1)ans+=b[i]*(b[i]-0x1)/0x2;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n4 1 5", "3"], ["13 17\n29 7 5 7 9 51 7 13 8 55 42 9 81", "6"], ["10 400000000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "25"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1]; n = n[0];\n  var a = s[1].split(\" \").map(a=>+a);\n  var ans = 0;\n  var b = {};\n  var t = 0;\n  for(var i = 0; i < n; i++){\n    t = (t + a[i]) % m;\n    if(b[t])b[t]++; else b[t] = 1;\n  }\n  for(i in b){\n    i = +i;\n    if(i === 0)ans += b[i] * (b[i]+1) / 2;\n    else if(b[i] > 1)ans += b[i] * (b[i]-1) / 2;\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 757, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a => +a);\n  var m = n[1];\n  n = n[0];\n  var a = s[1].split(\" \").map(a => +a);\n  var ans = 0;\n  var b = {};\n  var t = 0;\n  for (var i = 0; i < n; i++) {\n    t = (t + a[i]) % m;\n    if (b[t]) {\n      b[t]++;\n    } else {\n      b[t] = 1;\n    }\n  }\n  for (i in b) {\n    i = +i;\n    if (i === 0) {\n      ans += b[i] * (b[i] + 1) / 2;\n    } else if (b[i] > 1) {\n      ans += b[i] * (b[i] - 1) / 2;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7151021431822391, "ngram_match_score": 0.40877804261521977, "weighted_ngram_match_score": 0.5568936880084734, "syntax_match_score": 0.8947368421052632, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03426_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var H=input[0x0]['split']('\\x20')['map'](a=>parseInt(a));var W=H[0x1];var D=H[0x2];H=H[0x0];var A;var x=new Array(H*W+0x1)['fill'](0x0)['map'](a=>new Array(0x2));for(var i=0x0;i<H;i++){A=input[i+0x1]['split']('\\x20')['map'](a=>parseInt(a));for(var j=0x0;j<W;j++){x[A[j]][0x0]=i;x[A[j]][0x1]=j;}}var y=new Array(H*W+0x1)['fill'](0x0);for(i=D+0x1;i<=H*W;i++){y[i]=y[i-D]+Math['abs'](x[i-D][0x0]-x[i][0x0])+Math['abs'](x[i-D][0x1]-x[i][0x1]);}var Q=parseInt(input[H+0x1]);var ans=new Array(Q)['fill'](0x0);for(i=0x0;i<Q;i++){var L=input[H+0x2+i]['split']('\\x20')['map'](a=>parseInt(a));var R=L[0x1];L=L[0x0];ans[i]=y[R]-y[L];}console['log'](ans['join']('\\x0a'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3 2\n1 4 3\n2 5 7\n8 9 6\n1\n4 8", "5"], ["4 2 3\n3 7\n1 4\n5 2\n6 8\n2\n2 2\n2 2", "0\n0"], ["5 5 4\n13 25 7 15 17\n16 22 20 2 9\n14 11 12 1 19\n10 6 23 8 18\n3 21 5 24 4\n3\n13 13\n2 10\n13 13", "0\n5\n0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar H = input[0].split(\" \").map(a => parseInt(a));\n\tvar W = H[1];\n\tvar D = H[2];\n\tH = H[0];\n\tvar A;\n\tvar x = new Array(H*W+1).fill(0).map(a => new Array(2));\n\tfor(var i = 0; i < H; i++){\n\t\tA = input[i+1].split(\" \").map(a => parseInt(a));\n\t\tfor(var j = 0; j < W; j++){\n\t\t\tx[A[j]][0] = i;\n\t\t\tx[A[j]][1] = j;\n\t\t}\n\t}\n\tvar y = new Array(H*W+1).fill(0);\n\tfor(i = D+1; i <= H*W; i++){\n\t\ty[i] = y [i-D] + Math.abs(x[i-D][0] - x[i][0]) + Math.abs(x[i-D][1] - x[i][1]);\n\t}\n\t\n\tvar Q = parseInt(input[H+1]);\n\tvar ans = new Array(Q).fill(0);\n\tfor(i = 0; i < Q; i++){\n\t\tvar L = input[H+2+i].split(\" \").map(a => parseInt(a));\n\t\tvar R = L[1];\n\t\tL = L[0];\n\t\tans[i] = y[R] - y[L];\n\t}\n\t\n\tconsole.log(ans.join(\"\\n\"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 758, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var H = input[0].split(\" \").map(a => parseInt(a));\n  var W = H[1];\n  var D = H[2];\n  H = H[0];\n  var A;\n  var x = new Array(H * W + 1).fill(0).map(a => new Array(2));\n  for (var i = 0; i < H; i++) {\n    A = input[i + 1].split(\" \").map(a => parseInt(a));\n    for (var j = 0; j < W; j++) {\n      x[A[j]][0] = i;\n      x[A[j]][1] = j;\n    }\n  }\n  var y = new Array(H * W + 1).fill(0);\n  for (i = D + 1; i <= H * W; i++) {\n    y[i] = y[i - D] + Math.abs(x[i - D][0] - x[i][0]) + Math.abs(x[i - D][1] - x[i][1]);\n  }\n  var Q = parseInt(input[H + 1]);\n  var ans = new Array(Q).fill(0);\n  for (i = 0; i < Q; i++) {\n    var L = input[H + 2 + i].split(\" \").map(a => parseInt(a));\n    var R = L[1];\n    L = L[0];\n    ans[i] = y[R] - y[L];\n  }\n  console.log(ans.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8019808676215696, "ngram_match_score": 0.5307793809552472, "weighted_ngram_match_score": 0.6771440895310313, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03450_1", "type": "JavaScript", "obfuscated": "function Main(input){var line=input['split']('\\x0a');var tmp=line[0x0]['split']('\\x20');var N=Number(tmp[0x0]);var M=Number(tmp[0x1]);var L=[];var R=[];var D=[];for(var i=0x1;i<=M;i++){var tmp=line[i]['split']('\\x20');L['push'](Number(tmp[0x0]));R['push'](Number(tmp[0x1]));D['push'](Number(tmp[0x2]));}var pos=[];var ans;loopj:for(var j=0x0;j<M;j++){if(j===0x0)pos[L[j]-0x1]=0x1;var rightpos=pos[L[j]-0x1]+D[j];if(!pos[R[j]-0x1]){pos[R[j]-0x1]=rightpos;}else{if(pos[R[j]-0x1]!==rightpos){ans='No';break loopj;}}}if(!ans)ans='Yes';console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n1 2 1\n2 3 1\n1 3 2", "Yes"], ["3 3\n1 2 1\n2 3 1\n1 3 5", "No"], ["4 3\n2 1 1\n2 3 5\n3 4 2", "Yes"], ["10 3\n8 7 100\n7 9 100\n9 8 100", "No"], ["100 0", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar line = input.split(\"\\n\");\n\tvar tmp = line[0].split(\" \");\n\tvar N = Number(tmp[0]);\n\tvar M = Number(tmp[1]);\n\tvar L = [];\n\tvar R = [];\n\tvar D = [];\n\tfor(var i = 1; i <= M; i++){\n\t\tvar tmp = line[i].split(\" \");\n\t\tL.push(Number(tmp[0]));\n\t\tR.push(Number(tmp[1]));\n\t\tD.push(Number(tmp[2]));\n\t}\n\tvar pos = [];\n\tvar ans;\n\tloopj : for(var j = 0; j < M; j++){\n\t\tif(j === 0) pos[L[j]-1] = 1;\n\t\tvar rightpos = pos[L[j]-1] + D[j];\n\t\tif(!pos[R[j]-1]){\n\t\t\tpos[R[j]-1] = rightpos;\n\t\t} else{\n\t\t\tif(pos[R[j]-1] !== rightpos){\n\t\t\t\tans = 'No';\n\t\t\t\tbreak loopj;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!ans) ans = 'Yes';\n\n\tconsole.log(ans);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 759, "deobfuscated": "function Main(input) {\n  var line = input.split(\"\\n\");\n  var tmp = line[0].split(\" \");\n  var N = Number(tmp[0]);\n  var M = Number(tmp[1]);\n  var L = [];\n  var R = [];\n  var D = [];\n  for (var i = 1; i <= M; i++) {\n    var tmp = line[i].split(\" \");\n    L.push(Number(tmp[0]));\n    R.push(Number(tmp[1]));\n    D.push(Number(tmp[2]));\n  }\n  var pos = [];\n  var ans;\n  loopj: for (var j = 0; j < M; j++) {\n    if (j === 0) {\n      pos[L[j] - 1] = 1;\n    }\n    var rightpos = pos[L[j] - 1] + D[j];\n    if (!pos[R[j] - 1]) {\n      pos[R[j] - 1] = rightpos;\n    } else if (pos[R[j] - 1] !== rightpos) {\n      ans = \"No\";\n      break loopj;\n    }\n  }\n  if (!ans) {\n    ans = \"Yes\";\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7634557642507661, "ngram_match_score": 0.5120943525891413, "weighted_ngram_match_score": 0.6175907733794405, "syntax_match_score": 0.9241379310344827, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03497_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');l=inp['shift']()['split']('\\x20');N=l[0x0];K=l[0x1];A=inp['shift']()['split']('\\x20');o={};a=[];for(i=0x0;i<N;i++){a[A[i]]=(a[A[i]]||0x0)+0x1;o[A[i]]=0x1;}keys=Object['keys'](o);c=keys['length']-K;if(c>0x0){a['sort']();cnt=0x0;for(k of a){cnt+=k;c--;if(c===0x0){break;}}console['log'](cnt);}else{console['log'](0x0);}", "test_cases": [["5 2\n1 1 2 2 5", "1"], ["4 4\n1 1 2 2", "0"], ["10 3\n5 1 3 2 4 1 1 2 3 4", "3"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nN = l[0]\nK = l[1]\nA = inp.shift().split(' ')\no = {}\na = []\nfor (i=0; i<N; i++) {\n    a[A[i]] = (a[A[i]] || 0) + 1\n    o[A[i]] = 1\n}\nkeys = Object.keys(o)\nc = keys.length - K\nif (c > 0) {\n    a.sort()\n    cnt = 0\n    for (k of a) {\n        cnt += k\n        c--\n        if (c===0) {\n            break;\n        }\n    }\n    console.log(cnt)    \n} else {\n    console.log(0)\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 760, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nl = inp.shift().split(\" \");\nN = l[0];\nK = l[1];\nA = inp.shift().split(\" \");\no = {};\na = [];\nfor (i = 0; i < N; i++) {\n  a[A[i]] = (a[A[i]] || 0) + 1;\n  o[A[i]] = 1;\n}\nkeys = Object.keys(o);\nc = keys.length - K;\nif (c > 0) {\n  a.sort();\n  cnt = 0;\n  for (k of a) {\n    cnt += k;\n    c--;\n    if (c === 0) {\n      break;\n    }\n  }\n  console.log(cnt);\n} else {\n  console.log(0);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6705340287691939, "ngram_match_score": 0.32470993155765726, "weighted_ngram_match_score": 0.35742618351911853, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010667881365475917, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02923473887602701}}
{"filename": "p03577_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var g_input='';process['stdin']['on']('data',function(chunk){g_input+=chunk;});process['stdin']['on']('end',function(){Main(g_input['split'](/\\r?\\n/));});function Main(input){console['log'](input[0x0]['slice'](0x0,input[0x0]['length']-'FESTIVAL'['length']));return 0x0;}", "test_cases": [["CODEFESTIVAL", "CODE"], ["CODEFESTIVALFESTIVAL", "CODEFESTIVAL"], ["YAKINIKUFESTIVAL", "YAKINIKU"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\n\nprocess.stdin.on('end', function() {\n    Main(g_input.split(/\\r?\\n/));\n});\n\nfunction Main(input) {\n\n    console.log(input[0].slice(0, input[0].length - 'FESTIVAL'.length));\n\n    return 0;\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 761, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar g_input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  g_input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  Main(g_input.split(/\\r?\\n/));\n});\nfunction Main(input) {\n  console.log(input[0].slice(0, input[0].length - \"FESTIVAL\".length));\n  return 0;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7472405529810957, "ngram_match_score": 0.4705896438972139, "weighted_ngram_match_score": 0.5183725680271691, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03599_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');(input=>{const [A,B,C,D,E,F]=input['trim']()['split']('\\x20')['map'](Number);let W={};let S={};for(let i=0x1;i<F;i++){for(let j=0x0;j<F;j++){const s=A*i*0x64+j*B*0x64;if(s>F)break;W[s]=0x1;}}const p=F*E/0x64;for(let i=0x0;i<F;i++){for(let j=0x0;j<F;j++){const s=C*i+D*j;if(s>p)break;S[s]=0x1;}}let ans=[A*0x64,0x0];let max=0x0;let r=E/0x64;for(let i in W){for(let j in S){const t=i-0x0+(j-0x0);const sw=j/ i;if(sw>r||t>F)continue;if(sw>max){max=sw;ans=[t,j];}}}console['log'](ans[0x0],ans[0x1]);})(input);", "test_cases": [["1 2 10 20 15 200", "110 10"], ["1 2 1 2 100 1000", "200 100"], ["17 19 22 26 55 2802", "2634 934"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n  \n  const [A, B, C, D, E, F] = input.trim().split(' ').map(Number)\n\n  let W = {}\n  let S = {}\n  \n  for (let i = 1; i < F; i ++) {\n    for (let j = 0; j < F; j++) {\n      const s = A * i * 100 + j * B * 100\n      if (s > F) break\n\t  W[s] = 1\n    }\n  }\n  \n  const p = F * E / 100\n  for (let i = 0; i < F; i ++) {\n    for (let j = 0; j < F; j++) {\n      const s = C * i + D * j\n      if (s > p) break\n\t  S[s] = 1\n    }\n  }\n\n  let ans = [A * 100, 0]\n  let max = 0\n  let r = E / 100\n  for (let i in W) {\n    for (let j in S) {\n      const t = (i - 0) + (j - 0)\n      const sw = j / i\n      if (sw > r || t > F) continue\n      if (sw > max) {\n        max = sw\n\t    ans = [t, j]\n      }\n    }\n  }\n  \n  console.log(ans[0], ans[1])\n  \n    \n})(input)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 762, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n(input => {\n  const [A, B, C, D, E, F] = input.trim().split(\" \").map(Number);\n  let W = {};\n  let S = {};\n  for (let i = 1; i < F; i++) {\n    for (let j = 0; j < F; j++) {\n      const s = A * i * 100 + j * B * 100;\n      if (s > F) {\n        break;\n      }\n      W[s] = 1;\n    }\n  }\n  const p = F * E / 100;\n  for (let i = 0; i < F; i++) {\n    for (let j = 0; j < F; j++) {\n      const s = C * i + D * j;\n      if (s > p) {\n        break;\n      }\n      S[s] = 1;\n    }\n  }\n  let ans = [A * 100, 0];\n  let max = 0;\n  let r = E / 100;\n  for (let i in W) {\n    for (let j in S) {\n      const t = i - 0 + (j - 0);\n      const sw = j / i;\n      if (sw > r || t > F) {\n        continue;\n      }\n      if (sw > max) {\n        max = sw;\n        ans = [t, j];\n      }\n    }\n  }\n  console.log(ans[0], ans[1]);\n})(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7692641319553758, "ngram_match_score": 0.6482725825433476, "weighted_ngram_match_score": 0.6639214785523344, "syntax_match_score": 0.8260869565217391, "dataflow_match_score": 0.9387755102040817}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03612_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const P=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n));let answer=0x0;for(let i in P){if(parseInt(i)+0x1===P[i]){let temp=P[i];P[i]=P[parseInt(i)+0x1];P[parseInt(i)+0x1]=temp;answer++;}}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 4 3 5 2", "2"], ["2\n1 2", "1"], ["2\n2 1", "0"], ["9\n1 2 4 9 5 8 7 3 6", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const P = arg[1].split(\" \").map(n=>parseInt(n));\n    \n    let answer = 0;\n    \n    for(let i in P) {\n        if(parseInt(i) + 1 === P[i]) {\n            let temp = P[i];\n            P[i] = P[parseInt(i) + 1];\n            P[parseInt(i) + 1] = temp;\n            answer++;\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 763, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const P = arg[1].split(\" \").map(n => parseInt(n));\n  let answer = 0;\n  for (let i in P) {\n    if (parseInt(i) + 1 === P[i]) {\n      let temp = P[i];\n      P[i] = P[parseInt(i) + 1];\n      P[parseInt(i) + 1] = temp;\n      answer++;\n    }\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8724485593154906, "ngram_match_score": 0.7139825106873875, "weighted_ngram_match_score": 0.775811726574575, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03681_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){input=input['split']('\\x20')['map'](v=>~~v);const n=input[0x0];const m=input[0x1];const limit=0x3b9aca00+0x7;if(Math['abs'](n-m)>=0x2){console['log'](0x0);return;}let nn=0x1;for(let i=0x2;i<=n;i++){nn*=i;if(nn>=limit){nn=nn%limit;}}for(let i=0x2;i<=m;i++){nn*=i;if(nn>=limit){nn=nn%limit;}}let tmp=nn%limit;if(n==m){tmp=0x2*tmp;}const ans=tmp%limit;console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 2", "8"], ["3 2", "12"], ["1 8", "0"], ["100000 100000", "530123477"]], "original": "'use strict'\n\nfunction main(input) {\n  input = input.split(' ').map(v => ~~v)\n  const n = input[0]\n  const m = input[1]\n\n  const limit = 1e9 + 7 //(Math.pow(10, 9) + 7)\n\n  //交互に並べられない\n  if (Math.abs(n - m) >= 2) {\n    console.log(0)\n    return\n  }\n\n  let nn = 1\n  for (let i = 2; i <= n; i++) {\n    nn *= i\n    if (nn >= limit) {\n      nn = nn % limit\n    }\n  }\n  // let mm = 1\n  for (let i = 2; i <= m; i++) {\n    nn *= i\n    if (nn >= limit) {\n      nn = nn % limit\n    }\n  }\n  // console.log(nn,mm)\n\n  let tmp = nn % limit\n  // console.log(tmp)\n  if (n == m) {\n    tmp = 2 * tmp\n  }\n  const ans = tmp % limit\n\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 764, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  input = input.split(\" \").map(v => ~~v);\n  const n = input[0];\n  const m = input[1];\n  const limit = 1000000007;\n  if (Math.abs(n - m) >= 2) {\n    console.log(0);\n    return;\n  }\n  let nn = 1;\n  for (let i = 2; i <= n; i++) {\n    nn *= i;\n    if (nn >= limit) {\n      nn = nn % limit;\n    }\n  }\n  for (let i = 2; i <= m; i++) {\n    nn *= i;\n    if (nn >= limit) {\n      nn = nn % limit;\n    }\n  }\n  let tmp = nn % limit;\n  if (n == m) {\n    tmp = tmp * 2;\n  }\n  const ans = tmp % limit;\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5989774242153949, "ngram_match_score": 0.5092225983618665, "weighted_ngram_match_score": 0.520846025228299, "syntax_match_score": 0.8921568627450981, "dataflow_match_score": 0.47368421052631576}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0022842250954731025, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015151515151515138, "new_decrease_halstead_effort": 0.05906848885443483}}
{"filename": "p03732_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const W=parseInt(arg[0x0]['split']('\\x20')[0x1]);const wv=arg['slice'](0x1,N+0x1)['map'](n=>n['split']('\\x20')['map'](l=>parseInt(l)));let dp=[...Array(N+0x1)]['map'](n=>[...Array(W+0x1)]['fill'](0x0));let answer=0x0;for(let i=0x1;i<N+0x1;i++){const w=wv[i-0x1][0x0];const v=wv[i-0x1][0x1];for(let j=0x0;j<W+0x1;j++){if(w>j){dp[i][j]=dp[i-0x1][j];}else{dp[i][j]=Math['max'](dp[i-0x1][j],v+dp[i-0x1][j-w]);}if(dp[i][j]>answer){answer=dp[i][j];}}}console['log'](answer);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 6\n2 1\n3 4\n4 10\n3 4", "11"], ["4 6\n2 1\n3 7\n4 10\n3 6", "13"], ["4 10\n1 100\n1 100\n1 100\n1 100", "400"], ["4 1\n10 100\n10 100\n10 100\n10 100", "0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const W = parseInt(arg[0].split(\" \")[1]);\n    \n    const wv = arg.slice(1, N + 1).map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    let dp = [...Array(N+1)].map(n=>[...Array(W+1)].fill(0));\n    let answer = 0;\n    \n    for(let i=1; i<N+1; i++) {\n        const w = wv[i-1][0];\n        const v = wv[i-1][1];\n        \n        for(let j=0; j<W+1; j++) {\n            if(w > j) {\n                // 単体で重さオーバーなら前回のを引き継ぐ\n                dp[i][j] = dp[i-1][j];\n            } else {\n                dp[i][j] = Math.max(dp[i-1][j], v + dp[i-1][j - w]);\n            }\n            \n            if(dp[i][j] > answer) {\n                answer = dp[i][j];\n            }\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 765, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const W = parseInt(arg[0].split(\" \")[1]);\n  const wv = arg.slice(1, N + 1).map(n => n.split(\" \").map(l => parseInt(l)));\n  let dp = [...Array(N + 1)].map(n => [...Array(W + 1)].fill(0));\n  let answer = 0;\n  for (let i = 1; i < N + 1; i++) {\n    const w = wv[i - 1][0];\n    const v = wv[i - 1][1];\n    for (let j = 0; j < W + 1; j++) {\n      if (w > j) {\n        dp[i][j] = dp[i - 1][j];\n      } else {\n        dp[i][j] = Math.max(dp[i - 1][j], v + dp[i - 1][j - w]);\n      }\n      if (dp[i][j] > answer) {\n        answer = dp[i][j];\n      }\n    }\n  }\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7376532636763014, "ngram_match_score": 0.3933038673185633, "weighted_ngram_match_score": 0.557309187386642, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03779_1", "type": "JavaScript", "obfuscated": "function main(input){var n=input[0x0]-0x0;var cnt=0x1;var ans=0x0;for(cnt=0x1;ans<n;cnt++){ans+=cnt;}console['log'](cnt-0x1);}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["6", "3"], ["2", "2"], ["11", "5"]], "original": "function main(input) {\n    var n = input[0]-0;\n    var cnt = 1;\n    var ans = 0;\n    for(cnt=1;ans<n;cnt++){\n        ans += cnt;\n    }\n    console.log(cnt-1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 766, "deobfuscated": "function main(input) {\n  var n = input[0] - 0;\n  var cnt = 1;\n  var ans = 0;\n  for (cnt = 1; ans < n; cnt++) {\n    ans += cnt;\n  }\n  console.log(cnt - 1);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7471195008954237, "ngram_match_score": 0.3841282992148805, "weighted_ngram_match_score": 0.604349704366814, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03957_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');var string=input[0x0];var c,f,Cfound=0x0;for(var i=0x0;i<string['length'];i++){if(string[i]=='C'&&!Cfound){c=i;Cfound++;};if(Cfound&&string[i]=='F'){f=i;return console['log']('Yes');}};return console['log']('No');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["CODEFESTIVAL", "Yes"], ["FESTIVALCODE", "No"], ["CF", "Yes"], ["FCF", "Yes"]], "original": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var string = input[0];\n  var c,f,Cfound = 0;\n  for(var i = 0;i < string.length;i++){\n    if(string[i] == \"C\" && !Cfound){\n      c = i;\n      Cfound++;\n    };\n    if(Cfound && string[i] == \"F\"){\n      f = i;\n      return console.log(\"Yes\");\n    }\n  };\n  return console.log(\"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 767, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var string = input[0];\n  var c;\n  var f;\n  var Cfound = 0;\n  for (var i = 0; i < string.length; i++) {\n    if (string[i] == \"C\" && !Cfound) {\n      c = i;\n      Cfound++;\n    }\n    ;\n    if (Cfound && string[i] == \"F\") {\n      f = i;\n      return console.log(\"Yes\");\n    }\n  }\n  ;\n  return console.log(\"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7191366003778303, "ngram_match_score": 0.40127475702040594, "weighted_ngram_match_score": 0.5332426589836688, "syntax_match_score": 0.9420289855072463, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009737609227482569, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.024390243902439046, "new_decrease_halstead_effort": -0.024390243902439046}}
{"filename": "p04034_1", "type": "JavaScript", "obfuscated": "input=require('fs')['readFileSync']('/dev/stdin','utf8');lines=input['split']('\\x0a');line=lines['shift']()['split']('\\x20');N=line[0x0]*0x1;M=line[0x1]*0x1;b=[];r=[];for(i=0x1;i<=N;i++){b[i]=0x1;r[i]=0x0;}r[0x1]=0x1;for(i=0x0;i<M;i++){l=lines[i]['split']('\\x20');x=l[0x0]*0x1;y=l[0x1]*0x1;if(r[x]){r[y]+=0x1;}if(r[x]&&b[x]==0x1){r[x]=0x0;}b[x]-=0x1;b[y]+=0x1;}cnt=0x0;for(i=0x1;i<=N;i++){if(r[i]>0x0){cnt++;}}console['log'](cnt);", "test_cases": [["3 2\n1 2\n2 3", "2"], ["3 3\n1 2\n2 3\n2 3", "1"], ["4 4\n1 2\n2 3\n4 1\n3 4", "3"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nline = lines.shift().split(' ')\nN = line[0] * 1\nM = line[1] * 1\nb = []\nr = []\nfor (i=1; i<=N; i++) {\n    b[i] = 1\n    r[i] = 0\n}\nr[1] = 1\nfor (i=0; i<M; i++) {\n  l = lines[i].split(' ')\n  x = l[0] * 1\n  y = l[1] * 1\n  if (r[x]) {\n      r[y] += 1\n  }\n  if (r[x] && b[x] == 1) {\n      r[x] = 0\n  }\n  b[x] -= 1\n  b[y] += 1\n}\ncnt = 0\nfor (i=1; i<=N; i++) {\n    if (r[i] > 0) {\n        cnt++\n    }\n}\nconsole.log(cnt)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 768, "deobfuscated": "input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlines = input.split(\"\\n\");\nline = lines.shift().split(\" \");\nN = line[0] * 1;\nM = line[1] * 1;\nb = [];\nr = [];\nfor (i = 1; i <= N; i++) {\n  b[i] = 1;\n  r[i] = 0;\n}\nr[1] = 1;\nfor (i = 0; i < M; i++) {\n  l = lines[i].split(\" \");\n  x = l[0] * 1;\n  y = l[1] * 1;\n  if (r[x]) {\n    r[y] += 1;\n  }\n  if (r[x] && b[x] == 1) {\n    r[x] = 0;\n  }\n  b[x] -= 1;\n  b[y] += 1;\n}\ncnt = 0;\nfor (i = 1; i <= N; i++) {\n  if (r[i] > 0) {\n    cnt++;\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6818787490790282, "ngram_match_score": 0.3402158229760974, "weighted_ngram_match_score": 0.38729917334001557, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00011_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['split']('\\x0a');var w=+lines['shift']();var n=+lines['shift']();var list=[];var line=null;while(line=lines['shift']()){var args=line['split'](',');list['push'](args);}var answers=[];for(var i=0x1;i<=w;i++){var k=i;list['forEach'](function(args){if(args[0x0]==k){k=args[0x1];}else if(args[0x1]==k){k=args[0x0];}});answers[k]=i;}answers['shift']();console['log'](answers['join']('\\x0a'));", "test_cases": [["5\n4\n2,4\n3,5\n1,2\n3,4", "4\n1\n2\n5\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nvar w = +lines.shift();\nvar n = +lines.shift();\n\nvar list = [];\nvar line = null;\nwhile (line = lines.shift()) {\n    var args = line.split(',');\n    list.push(args);\n}\n\nvar answers = [];\nfor (var i = 1; i <= w; i++) {\n    var k = i;\n    list.forEach(function(args) {\n        if (args[0] == k) {\n            k = args[1];\n        } else if (args[1] == k) {\n            k = args[0];\n        }\n    });\n    answers[k] = i;\n}\nanswers.shift();\nconsole.log(answers.join('\\n'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 769, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.split(\"\\n\");\nvar w = +lines.shift();\nvar n = +lines.shift();\nvar list = [];\nvar line = null;\nwhile (line = lines.shift()) {\n  var args = line.split(\",\");\n  list.push(args);\n}\nvar answers = [];\nfor (var i = 1; i <= w; i++) {\n  var k = i;\n  list.forEach(function (args) {\n    if (args[0] == k) {\n      k = args[1];\n    } else if (args[1] == k) {\n      k = args[0];\n    }\n  });\n  answers[k] = i;\n}\nanswers.shift();\nconsole.log(answers.join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9231605551925781, "ngram_match_score": 0.8377601344443301, "weighted_ngram_match_score": 0.8548820863259826, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00025_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['split']('\\x0a');var imagine;while(imagine=lines['shift']()){var guess=lines['shift']();var a=imagine['split']('\\x20')['map'](function(n){return+n;});var b=guess['split']('\\x20')['map'](function(n){return+n;});var hit=0x0;for(var i=0x0;i<0x4;i++){if(a[i]==b[i]){hit++;}}var blow=0x0;for(var i=0x0;i<0x4;i++){if(a['indexOf'](b[i])>=0x0){blow++;}}blow-=hit;console['log'](hit+'\\x20'+blow);}", "test_cases": [["9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2", "1 1\n3 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nvar imagine;\nwhile (imagine = lines.shift()) {\n\tvar guess = lines.shift();\n\n\tvar a = imagine.split(' ').map(function(n){return +n;});\n\tvar b = guess.split(' ').map(function(n){return +n;});\n\n\tvar hit = 0;\n\tfor (var i = 0; i < 4; i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\thit++;\n\t\t}\n\t}\n\n\tvar blow = 0;\n\tfor (var i = 0; i < 4; i++) {\n\t\tif (a.indexOf(b[i]) >= 0) {\n\t\t\tblow++;\n\t\t}\n\t}\n\tblow -= hit;\n\n\tconsole.log(hit + ' ' + blow);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 770, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.split(\"\\n\");\nvar imagine;\nwhile (imagine = lines.shift()) {\n  var guess = lines.shift();\n  var a = imagine.split(\" \").map(function (n) {\n    return +n;\n  });\n  var b = guess.split(\" \").map(function (n) {\n    return +n;\n  });\n  var hit = 0;\n  for (var i = 0; i < 4; i++) {\n    if (a[i] == b[i]) {\n      hit++;\n    }\n  }\n  var blow = 0;\n  for (var i = 0; i < 4; i++) {\n    if (a.indexOf(b[i]) >= 0) {\n      blow++;\n    }\n  }\n  blow -= hit;\n  console.log(hit + \" \" + blow);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8386490613192602, "ngram_match_score": 0.7098579235426674, "weighted_ngram_match_score": 0.7875954645915163, "syntax_match_score": 1.0, "dataflow_match_score": 0.8571428571428571}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00048_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['split'](/\\s/)['map'](function(i){(j=+i)?console['log'](j<=0x30?'light\\x20fly':j<=0x33?'fly':j<=0x36?'bantam':j<=0x39?'feather':j<=0x3c?'light':j<=0x40?'light\\x20welter':j<=0x45?'welter':j<=0x4b?'light\\x20middle':j<=0x51?'middle':j<=0x5b?'light\\x20heavy':'heavy'):0x0;});", "test_cases": [["60.2\n70.2\n48.0\n80.2", "light welter\nlight middle\nlight fly\nmiddle"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split(/\\s/).map(function(i){(j=+i)?console.log(j<=48?'light fly':j<=51?'fly':j<=54?'bantam':j<=57?'feather':j<=60?'light':j<=64?'light welter':j<=69?'welter':j<=75?'light middle':j<=81?'middle':j<=91?'light heavy':'heavy'):0})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 771, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(/\\s/).map(function (i) {\n  if (j = +i) {\n    console.log(j <= 48 ? \"light fly\" : j <= 51 ? \"fly\" : j <= 54 ? \"bantam\" : j <= 57 ? \"feather\" : j <= 60 ? \"light\" : j <= 64 ? \"light welter\" : j <= 69 ? \"welter\" : j <= 75 ? \"light middle\" : j <= 81 ? \"middle\" : j <= 91 ? \"light heavy\" : \"heavy\");\n  } else {\n    0;\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4661016949152542, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.864406779661017, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 1.5, "length_score": -1.5, "increase_maintainability": -0.1615124999319878, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.012658227848101333, "new_decrease_halstead_effort": -0.31819404827681197}}
{"filename": "p00104_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){main(chunk['trim']());});function main(chunk){var lines=chunk['split']('\\x0a');for(var n=0x0;n<lines['length']-0x1;){var H=Number(lines[n]['split']('\\x20')[0x0]);var W=Number(lines[n]['split']('\\x20')[0x1]);var map=[];n++;for(var i=0x0;i<H;i++){map[i]=lines[n]['split']('');n++;}console['log'](calc(map,0x0,0x0));}}function calc(map,h,w){if(map[h][w]=='.'){return w+'\\x20'+h;}if(map[h][w]=='1'){return'LOOP';}switch(map[h][w]){case'>':map[h][w]='1';return calc(map,h,w+0x1);case'<':map[h][w]='1';return calc(map,h,w-0x1);case'v':map[h][w]='1';return calc(map,h+0x1,w);case'^':map[h][w]='1';return calc(map,h-0x1,w);}}", "test_cases": [["10 10\n>>>v..>>>v\n...v..^..v\n>>>>>>^..v\n.........v\n.v<<<<...v\n.v.v.^...v\n.v.v.^<<<<\n.v.v.....v\n.v...^...v\n.>>>>^....\n6 10\n>>>>>>>>>v\n.........v\n.........v\n>>>>v....v\n^...v....v\n^<<<<<<<<<\n0 0", "5 7\nLOOP"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n    main(chunk.trim());\n});\n\nfunction main(chunk){\n    var lines = chunk.split(\"\\n\");\n    for(var n=0;n<lines.length-1;){\n        var H = Number(lines[n].split(\" \")[0]);\n        var W = Number(lines[n].split(\" \")[1]);\n        var map = [];\n        n++;\n        for(var i=0;i<H;i++){\n            map[i] = lines[n].split(\"\");\n            n++;\n        }\n        console.log(calc(map,0,0));\n    }\n}\nfunction calc(map,h,w){\n    if(map[h][w] == \".\"){\n        return w + \" \"+ h;\n    }\n    if(map[h][w] == \"1\"){\n        return \"LOOP\";\n    }\n    switch(map[h][w]){\n    case '>':\n        map[h][w] = \"1\";\n        return calc(map,h,w+1);\n    case '<':\n        map[h][w] = \"1\";\n        return calc(map,h,w-1);\n    case 'v':\n        map[h][w] = \"1\";\n        return calc(map,h+1,w);\n    case '^':\n        map[h][w] = \"1\";\n        return calc(map,h-1,w);\n    }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 772, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  main(chunk.trim());\n});\nfunction main(chunk) {\n  var lines = chunk.split(\"\\n\");\n  for (var n = 0; n < lines.length - 1;) {\n    var H = Number(lines[n].split(\" \")[0]);\n    var W = Number(lines[n].split(\" \")[1]);\n    var map = [];\n    n++;\n    for (var i = 0; i < H; i++) {\n      map[i] = lines[n].split(\"\");\n      n++;\n    }\n    console.log(calc(map, 0, 0));\n  }\n}\nfunction calc(map, h, w) {\n  if (map[h][w] == \".\") {\n    return w + \" \" + h;\n  }\n  if (map[h][w] == \"1\") {\n    return \"LOOP\";\n  }\n  switch (map[h][w]) {\n    case \">\":\n      map[h][w] = \"1\";\n      return calc(map, h, w + 1);\n    case \"<\":\n      map[h][w] = \"1\";\n      return calc(map, h, w - 1);\n    case \"v\":\n      map[h][w] = \"1\";\n      return calc(map, h + 1, w);\n    case \"^\":\n      map[h][w] = \"1\";\n      return calc(map, h - 1, w);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6805004278447909, "ngram_match_score": 0.2783982537365664, "weighted_ngram_match_score": 0.4436034576425973, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00122_1", "type": "JavaScript", "obfuscated": "function bomb(x,y,z){max=Math['max'](max,z);if(max==n)return;var dx=[-0x1,0x0,0x1,-0x2,0x2,-0x2,0x2,-0x2,0x2,-0x1,0x0,0x1];var dy=[-0x2,-0x2,-0x2,-0x1,-0x1,0x0,0x0,0x1,0x1,0x2,0x2,0x2];var Safe={};for(var i=-0x1;i<=0x1;i++){for(var j=-0x1;j<=0x1;j++){Safe[water[z*0x2]+i+'\\x20'+(water[z*0x2+0x1]+j)]=!![];}}for(var i=0x0;i<0xc;i++){var xx=x+dx[i];var yy=y+dy[i];if(xx<0x0||yy<0x0||xx>=0xa||yy>=0xa)continue;if(Safe['hasOwnProperty'](xx+'\\x20'+yy))bomb(xx,yy,z+0x1);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var xy=Arr['shift']()['split']('\\x20')['map'](Number);if(xy[0x0]==0x0&&xy[0x1]==0x0)break;var map=[[],[],[],[],[],[],[],[],[],[]];var n=Arr['shift']()-0x0;var water=Arr['shift']()['split']('\\x20')['map'](Number);var max=0x0;bomb(xy[0x0],xy[0x1],0x0);console['log'](max==n?'OK':'NA');}", "test_cases": [["6 1\n10\n6 4 3 3 1 2 0 5 4 6 1 8 5 9 7 7 8 6 8 3\n6 1\n10\n6 4 3 3 1 2 0 5 4 6 1 8 5 9 7 7 8 6 9 0\n0 0", "OK\nNA"]], "original": "function bomb(x,y,z){\n   max=Math.max(max,z);\n   if(max==n)return;\n   var dx=[-1,0,1,-2,2,-2,2,-2,2,-1,0,1];\n   var dy=[-2,-2,-2,-1,-1,0,0,1,1,2,2,2];\n   var Safe={};\n   for(var i=-1;i<=1;i++){\n      for(var j=-1;j<=1;j++){\n         Safe[(water[z*2]+i)+\" \"+(water[z*2+1]+j)]=true;\n      }\n   }\n   for(var i=0;i<12;i++){\n      var xx=x+dx[i];\n      var yy=y+dy[i];\n      if(xx<0 || yy<0 || xx>=10 || yy>=10)continue;\n      if(Safe.hasOwnProperty(xx+\" \"+yy))bomb(xx,yy,z+1);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var xy=(Arr.shift()).split(\" \").map(Number);\n   if(xy[0]==0 && xy[1]==0)break;\n   var map=[[],[],[],[],[],[],[],[],[],[]];\n   var n=Arr.shift()-0;\n   var water=(Arr.shift()).split(\" \").map(Number);\n   var max=0;\n   bomb(xy[0],xy[1],0);\n   console.log((max==n)?\"OK\":\"NA\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 773, "deobfuscated": "function bomb(x, y, z) {\n  max = Math.max(max, z);\n  if (max == n) {\n    return;\n  }\n  var dx = [-1, 0, 1, -2, 2, -2, 2, -2, 2, -1, 0, 1];\n  var dy = [-2, -2, -2, -1, -1, 0, 0, 1, 1, 2, 2, 2];\n  var Safe = {};\n  for (var i = -1; i <= 1; i++) {\n    for (var j = -1; j <= 1; j++) {\n      Safe[water[z * 2] + i + \" \" + (water[z * 2 + 1] + j)] = true;\n    }\n  }\n  for (var i = 0; i < 12; i++) {\n    var xx = x + dx[i];\n    var yy = y + dy[i];\n    if (xx < 0 || yy < 0 || xx >= 10 || yy >= 10) {\n      continue;\n    }\n    if (Safe.hasOwnProperty(xx + \" \" + yy)) {\n      bomb(xx, yy, z + 1);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var xy = Arr.shift().split(\" \").map(Number);\n  if (xy[0] == 0 && xy[1] == 0) {\n    break;\n  }\n  var map = [[], [], [], [], [], [], [], [], [], []];\n  var n = Arr.shift() - 0;\n  var water = Arr.shift().split(\" \").map(Number);\n  var max = 0;\n  bomb(xy[0], xy[1], 0);\n  console.log(max == n ? \"OK\" : \"NA\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47543747283439186, "ngram_match_score": 0.026029512771772054, "weighted_ngram_match_score": 0.10488704523246213, "syntax_match_score": 0.7708333333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.002946409704076336, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019867549668874163, "new_decrease_halstead_effort": 0.04182889824938374}}
{"filename": "p00201_1", "type": "JavaScript", "obfuscated": "function bomb(name){var min=obj[name];M['forEach'](function(v){if(name==v[0x0]){var sum=0x0;v[0x1]['forEach'](function(value){sum+=bomb(value);});min=Math['min'](min,sum);}});return min;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var obj={};for(var i=0x0;i<n;i++){var data=arr['shift']()['split']('\\x20');obj[data[0x0]]=data[0x1]-0x0;}var m=arr['shift']()-0x0;var M=[];for(var i=0x0;i<m;i++){var data=arr['shift']()['split']('\\x20');var name=data['shift']();data['shift']();M['push']([name,data]);}var item=arr['shift']();console['log'](bomb(item));}", "test_cases": [["8\nwood 3000\nstring 800\nrice 36\nwater 0\nracket 5000\nmicrophone 9800\nonigiri 140\nguitar 98000\n3\nracket 2 wood string\nonigiri 2 rice water\nguitar 3 racket microphone onigiri\nguitar\n1\ncomputer 300000\n0\ncomputer\n0", "13636\n300000"]], "original": "function bomb(name){\n   var min=obj[name];\n   M.forEach(function(v){\n      if(name==v[0]){\n         var sum=0;\n         v[1].forEach(function(value){\n            sum+=bomb(value);\n         });\n         min=Math.min(min,sum);\n      }\n   });\n   return min;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var obj={};\n   for(var i=0;i<n;i++){\n      var data=arr.shift().split(\" \");\n      obj[data[0]]=data[1]-0;\n   }\n   var m=arr.shift()-0;\n   var M=[];\n   for(var i=0;i<m;i++){\n      var data=arr.shift().split(\" \");\n      var name=data.shift();\n      data.shift();\n      M.push([name,data]);\n   }\n   var item=arr.shift();\n   console.log(bomb(item));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 774, "deobfuscated": "function bomb(name) {\n  var min = obj[name];\n  M.forEach(function (v) {\n    if (name == v[0]) {\n      var sum = 0;\n      v[1].forEach(function (value) {\n        sum += bomb(value);\n      });\n      min = Math.min(min, sum);\n    }\n  });\n  return min;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var obj = {};\n  for (var i = 0; i < n; i++) {\n    var data = arr.shift().split(\" \");\n    obj[data[0]] = data[1] - 0;\n  }\n  var m = arr.shift() - 0;\n  var M = [];\n  for (var i = 0; i < m; i++) {\n    var data = arr.shift().split(\" \");\n    var name = data.shift();\n    data.shift();\n    M.push([name, data]);\n  }\n  var item = arr.shift();\n  console.log(bomb(item));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.563759054725313, "ngram_match_score": 0.08003869396585342, "weighted_ngram_match_score": 0.20239478520937096, "syntax_match_score": 0.9726027397260274, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0015195641398551007, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015306122448979553, "new_decrease_halstead_effort": 0.0745816962096979}}
{"filename": "p00203_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){if(yx[y][x]==0x1)return;else if(yx[y][x]==0x2){var Y=y+0x2;var X=x;if(Y>=h){cnt++;return;}bomb(Y,X);}else if(yx[y][x]==0x0){var dx=[-0x1,0x0,0x1];for(var i=0x0;i<dx['length'];i++){var Y=y+0x1;var X=x+dx[i];if(X<0x0||X>=w)continue;if(Y>=h){cnt++;return;}if(yx[Y][X]==0x2&&dx[i]!=0x0)continue;bomb(Y,X);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var wh=arr['shift']()['split']('\\x20')['map'](Number);var w=wh[0x0];var h=wh[0x1];if(w==0x0&&h==0x0)break;var yx=[];for(var i=0x0;i<h;i++)yx['push'](arr['shift']()['split']('\\x20')['map'](Number));var cnt=0x0;for(var i=0x0;i<w;i++){bomb(0x0,i);}console['log'](cnt);}", "test_cases": [["5 5\n0 0 0 0 1\n2 1 0 2 0\n1 0 0 1 1\n0 2 1 2 0\n0 1 0 0 0\n5 5\n0 0 1 0 0\n2 1 0 2 0\n1 0 0 1 1\n0 2 1 2 0\n0 1 0 0 0\n15 15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0", "8\n6\n52694573"]], "original": "function bomb(y,x){\n   if(yx[y][x]==1)return;\n   else if(yx[y][x]==2){\n      var Y=y+2;\n      var X=x;\n      if(Y>=h){cnt++;return;}\n      bomb(Y,X);\n   }\n   else if(yx[y][x]==0){\n      var dx=[-1,0,1];\n      for(var i=0;i<dx.length;i++){\n         var Y=y+1;\n         var X=x+dx[i];\n         if(X<0 || X>=w)continue;\n         if(Y>=h){cnt++;return;}\n         if(yx[Y][X]==2 && dx[i]!=0)continue;\n         bomb(Y,X);\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wh=arr.shift().split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   if(w==0 && h==0)break;\n   var yx=[];\n   for(var i=0;i<h;i++)yx.push(arr.shift().split(\" \").map(Number));\n   var cnt=0;\n   for(var i=0;i<w;i++){\n      bomb(0,i);\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 775, "deobfuscated": "function bomb(y, x) {\n  if (yx[y][x] == 1) {\n    return;\n  } else if (yx[y][x] == 2) {\n    var Y = y + 2;\n    var X = x;\n    if (Y >= h) {\n      cnt++;\n      return;\n    }\n    bomb(Y, X);\n  } else if (yx[y][x] == 0) {\n    var dx = [-1, 0, 1];\n    for (var i = 0; i < dx.length; i++) {\n      var Y = y + 1;\n      var X = x + dx[i];\n      if (X < 0 || X >= w) {\n        continue;\n      }\n      if (Y >= h) {\n        cnt++;\n        return;\n      }\n      if (yx[Y][X] == 2 && dx[i] != 0) {\n        continue;\n      }\n      bomb(Y, X);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var wh = arr.shift().split(\" \").map(Number);\n  var w = wh[0];\n  var h = wh[1];\n  if (w == 0 && h == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < h; i++) {\n    yx.push(arr.shift().split(\" \").map(Number));\n  }\n  var cnt = 0;\n  for (var i = 0; i < w; i++) {\n    bomb(0, i);\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5213453832492759, "ngram_match_score": 0.04456492702796847, "weighted_ngram_match_score": 0.1420070821596114, "syntax_match_score": 0.8988095238095238, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012552301255230103, "new_decrease_halstead_effort": 0.08247095818498407}}
{"filename": "p00380_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var b=a['slice']()['sort']((x,y)=>x-y);var q=arr['shift']()-0x0;var xy=arr['map'](v=>v['split']('\\x20')['map'](Number)['map'](v=>v-0x1));xy['unshift']([0x0,0x0]);var A={};var B={};for(var i=0x0;i<a['length'];i++){if(a[i]!=b[i]){A[i]=a[i];B[i]=b[i];}}var BB='';for(var k in B)BB+=B[k];var flag=![];for(var i=0x0;i<=q;i++){[A[xy[i][0x0]],A[xy[i][0x1]]]=[A[xy[i][0x1]],A[xy[i][0x0]]];var AA='';for(var k in A)AA+=A[k];if(AA==BB){flag=!![];break;}}if(Object['keys'](A)['length']==0x0)console['log'](0x0);else if(flag)console['log'](i);else console['log'](-0x1);", "test_cases": [["6\n9 7 5 6 3 1\n3\n1 6\n2 5\n3 4", "2"], ["4\n4 3 2 1\n2\n1 2\n3 4", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar b=a.slice().sort((x,y)=> x-y);\nvar q=arr.shift()-0;\nvar xy=arr.map(v=> v.split(\" \").map(Number).map(v=>v-1));\nxy.unshift([0,0]);\nvar A={};\nvar B={};\nfor(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]){\n      A[i]=a[i];\n      B[i]=b[i];\n   }\n}\nvar BB=\"\";\nfor(var k in B)BB+=B[k];\nvar flag=false;\nfor(var i=0;i<=q;i++){\n   [A[xy[i][0]],A[xy[i][1]] ]= [A[xy[i][1]],A[xy[i][0]]];\n   var AA=\"\";\n   for(var k in A)AA+=A[k];\n   if(AA==BB){\n      flag=true;\n      break;\n   }\n}\nif(Object.keys(A).length==0)console.log(0);\nelse if(flag)console.log(i);\nelse console.log(-1);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 776, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar b = a.slice().sort((x, y) => x - y);\nvar q = arr.shift() - 0;\nvar xy = arr.map(v => v.split(\" \").map(Number).map(v => v - 1));\nxy.unshift([0, 0]);\nvar A = {};\nvar B = {};\nfor (var i = 0; i < a.length; i++) {\n  if (a[i] != b[i]) {\n    A[i] = a[i];\n    B[i] = b[i];\n  }\n}\nvar BB = \"\";\nfor (var k in B) {\n  BB += B[k];\n}\nvar flag = false;\nfor (var i = 0; i <= q; i++) {\n  [A[xy[i][0]], A[xy[i][1]]] = [A[xy[i][1]], A[xy[i][0]]];\n  var AA = \"\";\n  for (var k in A) {\n    AA += A[k];\n  }\n  if (AA == BB) {\n    flag = true;\n    break;\n  }\n}\nif (Object.keys(A).length == 0) {\n  console.log(0);\n} else if (flag) {\n  console.log(i);\n} else {\n  console.log(-1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5057920367893061, "ngram_match_score": 0.01933625109912962, "weighted_ngram_match_score": 0.05496825969445815, "syntax_match_score": 0.9488636363636364, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0054415320837566394, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.022321428571428603, "new_decrease_halstead_effort": 0.11393038200345984}}
{"filename": "p00669_1", "type": "JavaScript", "obfuscated": "function maxCards(arr,max){for(var i=0x0;i<n-(k-0x1);i++){var x=0x1;var j=0x0;while(j<k){x*=arr[i+j];j++;}max=Math['max'](max,x);}return max;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var I=0x0;while(!![]){var nk=Arr[I]['split']('\\x20')['map'](Number);I++;var n=nk[0x0];var k=nk[0x1];if(n==0x0&&k==0x0)break;var c=[];for(var i=0x0;i<n;i++){c['push'](Arr[I]);I++;}var maxA=0x1;maxA=maxCards(c,maxA);var maxB=0x1;for(var i=0x0;i<n;i++){for(var j=i+0x1;j<n;j++){var memo=c[i];c[i]=c[j];c[j]=memo;maxB=maxCards(c,maxB);c[j]=c[i];c[i]=memo;}}console['log'](maxA>maxB?'NO\\x20GAME':maxB-maxA);}", "test_cases": [["4 2\n2\n3\n7\n5\n0 0", "0"]], "original": "function maxCards(arr,max){\n   for(var i=0;i<n-(k-1);i++){\n      var x=1;\n      var j=0;\n      while(j<k){\n         x*=arr[i+j];\n         j++;\n      }\n      max=Math.max(max,x);\n   }\n   return max;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=0;\nwhile(true){\n   var nk=Arr[I].split(\" \").map(Number);\n   I++;\n   var n=nk[0];\n   var k=nk[1];\n   if(n==0 && k==0)break;\n   var c=[];\n   for(var i=0;i<n;i++){\n      c.push(Arr[I]);\n      I++;\n   }\n   var maxA=1;\n   maxA=maxCards(c,maxA);\n   var maxB=1;\n   for(var i=0;i<n;i++){\n      for(var j=i+1;j<n;j++){\n         var memo=c[i];\n         c[i]=c[j];\n         c[j]=memo;\n         maxB=maxCards(c,maxB);\n         c[j]=c[i];\n         c[i]=memo;\n      }\n   }\n   console.log((maxA>maxB)?\"NO GAME\":maxB-maxA);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 777, "deobfuscated": "function maxCards(arr, max) {\n  for (var i = 0; i < n - (k - 1); i++) {\n    var x = 1;\n    var j = 0;\n    while (j < k) {\n      x *= arr[i + j];\n      j++;\n    }\n    max = Math.max(max, x);\n  }\n  return max;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar I = 0;\nwhile (true) {\n  var nk = Arr[I].split(\" \").map(Number);\n  I++;\n  var n = nk[0];\n  var k = nk[1];\n  if (n == 0 && k == 0) {\n    break;\n  }\n  var c = [];\n  for (var i = 0; i < n; i++) {\n    c.push(Arr[I]);\n    I++;\n  }\n  var maxA = 1;\n  maxA = maxCards(c, maxA);\n  var maxB = 1;\n  for (var i = 0; i < n; i++) {\n    for (var j = i + 1; j < n; j++) {\n      var memo = c[i];\n      c[i] = c[j];\n      c[j] = memo;\n      maxB = maxCards(c, maxB);\n      c[j] = c[i];\n      c[i] = memo;\n    }\n  }\n  console.log(maxA > maxB ? \"NO GAME\" : maxB - maxA);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.543588826915342, "ngram_match_score": 0.06593574157920776, "weighted_ngram_match_score": 0.1933868863435983, "syntax_match_score": 0.9150326797385621, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0025718817515082426, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013333333333333308, "new_decrease_halstead_effort": 0.06443118098491551}}
{"filename": "p02399_1", "type": "JavaScript", "obfuscated": "var x=require('fs')['readFileSync']('/dev/stdin','utf8');var array=x['split']('\\x20')['map'](Number);var a=array[0x0];var b=array[0x1];var d=Math['floor'](a/b);var r=a%b;var f=(a/b)['toFixed'](0x5);console['log'](d+'\\x20'+r+'\\x20'+f);", "test_cases": [["3 2", "1 1 1.50000"]], "original": "var x = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar array = x.split(\" \").map(Number);\n\nvar a = array[0];\nvar b = array[1];\nvar d = Math.floor( a / b);\nvar r = a % b;\nvar f = ( a / b ).toFixed(5);\n\nconsole.log(d + \" \" + r + \" \" + f);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 778, "deobfuscated": "var x = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar array = x.split(\" \").map(Number);\nvar a = array[0];\nvar b = array[1];\nvar d = Math.floor(a / b);\nvar r = a % b;\nvar f = (a / b).toFixed(5);\nconsole.log(d + \" \" + r + \" \" + f);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8631217644147882, "ngram_match_score": 0.7202604926111992, "weighted_ngram_match_score": 0.7322265650479536, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02731_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['split']('\\x0a');var volume=input/0x3*input/0x3*input/0x3;console['log'](volume['toFixed'](0xc));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "1.000000000000"], ["999", "36926037.000000000000"]], "original": "\"use strict\";\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var volume=input/3*input/3*input/3;\n  console.log(volume.toFixed(12));\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 779, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var volume = input / 3 * input / 3 * input / 3;\n  console.log(volume.toFixed(12));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7361211299171164, "ngram_match_score": 0.31348206659605654, "weighted_ngram_match_score": 0.6310024530724091, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03132_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const inputs=input['split']('\\x0a');const L=Number(inputs[0x0]);const A=[];for(let i=0x0;i<L;i++){A['push'](Number(inputs[i+0x1]));}const dp=Array(L+0x1)['fill']()['map'](()=>Array(0x5)['fill']());dp[0x0]=[0x0,0x0,0x0,0x0,0x0];for(let i=0x1;i<=L;i++){let cur=A[i-0x1];let curEven=A[i-0x1]===0x0?0x2:cur%0x2;let curOdd=(cur+0x1)%0x2;dp[i][0x0]=dp[i-0x1][0x0]+cur;dp[i][0x1]=Math['min'](dp[i-0x1][0x0],dp[i-0x1][0x1])+curEven;dp[i][0x2]=Math['min'](dp[i-0x1][0x0],dp[i-0x1][0x1],dp[i-0x1][0x2])+curOdd;dp[i][0x3]=Math['min'](dp[i-0x1][0x2],dp[i-0x1][0x3])+curEven;dp[i][0x4]=Math['min'](dp[i-0x1][0x2],dp[i-0x1][0x3],dp[i-0x1][0x4])+cur;}console['log'](Math['min'](...dp[L]));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1\n0\n2\n3", "1"], ["8\n2\n0\n0\n2\n1\n3\n4\n1", "3"], ["7\n314159265\n358979323\n846264338\n327950288\n419716939\n937510582\n0", "1"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\");\n  const L = Number(inputs[0]);\n\n  const A = [];\n  for (let i = 0; i < L ; i++) {\n    A.push( Number(inputs[i+1]));\n  }\n  \n  const dp = Array(L + 1).fill().map(() => Array(5).fill());\n  dp[0] = [0, 0, 0, 0, 0];\n\n  for (let i = 1; i <= L; i++) {\n    let cur = A[i-1];\n    let curEven = A[i-1] === 0 ? 2 : cur % 2;\n    let curOdd = (cur + 1) % 2;\n\n    dp[i][0] = dp[i-1][0] + cur;\n    dp[i][1] = Math.min(dp[i-1][0], dp[i-1][1]) + curEven;\n    dp[i][2] = Math.min(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + curOdd;\n    dp[i][3] = Math.min(dp[i-1][2], dp[i-1][3]) + curEven;\n    dp[i][4] = Math.min(dp[i-1][2], dp[i-1][3], dp[i-1][4]) + cur;\n  }\n\n  console.log(Math.min(...dp[L]));\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 780, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const inputs = input.split(\"\\n\");\n  const L = Number(inputs[0]);\n  const A = [];\n  for (let i = 0; i < L; i++) {\n    A.push(Number(inputs[i + 1]));\n  }\n  const dp = Array(L + 1).fill().map(() => Array(5).fill());\n  dp[0] = [0, 0, 0, 0, 0];\n  for (let i = 1; i <= L; i++) {\n    let cur = A[i - 1];\n    let curEven = A[i - 1] === 0 ? 2 : cur % 2;\n    let curOdd = (cur + 1) % 2;\n    dp[i][0] = dp[i - 1][0] + cur;\n    dp[i][1] = Math.min(dp[i - 1][0], dp[i - 1][1]) + curEven;\n    dp[i][2] = Math.min(dp[i - 1][0], dp[i - 1][1], dp[i - 1][2]) + curOdd;\n    dp[i][3] = Math.min(dp[i - 1][2], dp[i - 1][3]) + curEven;\n    dp[i][4] = Math.min(dp[i - 1][2], dp[i - 1][3], dp[i - 1][4]) + cur;\n  }\n  console.log(Math.min(...dp[L]));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8252956232077635, "ngram_match_score": 0.5803100380597306, "weighted_ngram_match_score": 0.7208724547713237, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03213_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const N=input['split']('\\x0a')[0x0]-0x0;let e=new Array(N+0x1)['fill'](0x0);for(let i=0x2;i<=N;i++){let cur=i;for(let j=0x2;j<=i;j++){while(cur%j==0x0){e[j]+=0x1;cur/=j;}}}const num=m=>e['reduce']((ac,x)=>ac+(x>=m-0x1?0x1:0x0),0x0);let l75=num(0x4b);let l25=num(0x19);let l15=num(0xf);let l5=num(0x5);let l3=num(0x3);let r5x5x3=l5*(l5-0x1)*(l3-0x2)/0x2;let r15x5=l15*(l5-0x1);let r25x3=l25*(l3-0x1);let r75=l75;console['log'](r75+r25x3+r15x5+r5x5x3);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["9", "0"], ["10", "1"], ["100", "543"]], "original": "\"use strict\";\nfunction Main(input) {\n    const N = input.split(\"\\n\")[0] - 0;\n    let e = new Array(N + 1).fill(0);\n    for (let i = 2; i <= N; i++) {\n        let cur = i;\n        for (let j = 2; j <= i; j++) {\n            while (cur % j == 0) {\n                e[j] += 1;\n                cur /= j;\n            }\n        }\n    }\n    const num = (m) => e.reduce((ac, x) => ac + ((x >= m - 1) ? 1 : 0), 0);\n    let l75 = num(75);\n    let l25 = num(25);\n    let l15 = num(15);\n    let l5 = num(5);\n    let l3 = num(3);\n    let r5x5x3 = (l5 * (l5 - 1) * (l3 - 2)) / 2;\n    let r15x5 = l15 * (l5 - 1);\n    let r25x3 = l25 * (l3 - 1);\n    let r75 = l75;\n    console.log(r75 + r25x3 + r15x5 + r5x5x3);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 781, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const N = input.split(\"\\n\")[0] - 0;\n  let e = new Array(N + 1).fill(0);\n  for (let i = 2; i <= N; i++) {\n    let cur = i;\n    for (let j = 2; j <= i; j++) {\n      while (cur % j == 0) {\n        e[j] += 1;\n        cur /= j;\n      }\n    }\n  }\n  const num = m => e.reduce((ac, x) => ac + (x >= m - 1 ? 1 : 0), 0);\n  let l75 = num(75);\n  let l25 = num(25);\n  let l15 = num(15);\n  let l5 = num(5);\n  let l3 = num(3);\n  let r5x5x3 = l5 * (l5 - 1) * (l3 - 2) / 2;\n  let r15x5 = l15 * (l5 - 1);\n  let r25x3 = l25 * (l3 - 1);\n  let r75 = l75;\n  console.log(r75 + r25x3 + r15x5 + r5x5x3);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9141935285743733, "ngram_match_score": 0.8955524776531762, "weighted_ngram_match_score": 0.8994330187581381, "syntax_match_score": 0.8617886178861789, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03291_1", "type": "JavaScript", "obfuscated": "var line;var S;var MOD=Math['pow'](0xa,0x9)+0x7;var readline=require('readline');var rl=readline['createInterface']({'input':process['stdin'],'output':process['stdout']});rl['on']('line',function(x){line=x;});rl['on']('close',function(){S=line['split']('');dp=Array(S['length']+0x1);for(var i=0x0;i<=S['length'];i++){dp[i]=Array(0x3+0x1)['fill'](0x0);}for(var i=S['length'];i>=0x0;i--){for(var j=0x3;j>=0x0;j--){if(i===S['length']){dp[i][j]=j===0x3?0x1:0x0;}else{dp[i][j]=dp[i+0x1][j]*(S[i]==='?'?0x3:0x1);if(j<0x3&&(S[i]==='?'||S[i]==='ABC'[j])){dp[i][j]+=dp[i+0x1][j+0x1];}dp[i][j]%=MOD;}}}console['log'](dp[0x0][0x0]);});", "test_cases": [["A??C", "8"], ["ABCBC", "3"], ["????C?????B??????A???????", "979596887"]], "original": "var line; var S;\nvar MOD = Math.pow(10, 9) + 7;\n\nvar readline = require('readline');\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    line = x;\n});\n\nrl.on('close', function () {\n    S = line.split(\"\");\n    dp = Array(S.length + 1);\n    \n    for (var i = 0; i <= S.length; i++) {\n        dp[i] = Array(3 + 1).fill(0);\n    }\n\n    for (var i = S.length; i >= 0; i--) {\n        for (var j = 3; j >= 0; j--) {\n            if (i === S.length) { dp[i][j] = (j === 3 ? 1 : 0); }\n            else {\n                dp[i][j] = dp[i + 1][j] * (S[i] === '?' ? 3 : 1);\n                if (j < 3 && (S[i] === '?' || S[i] === \"ABC\"[j])) {\n                    dp[i][j] += dp[i + 1][j + 1];\n                }\n                dp[i][j] %= MOD;\n            }\n        }\n    }\n    console.log(dp[0][0]);\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 782, "deobfuscated": "var line;\nvar S;\nvar MOD = Math.pow(10, 9) + 7;\nvar readline = require(\"readline\");\nvar rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nrl.on(\"line\", function (x) {\n  line = x;\n});\nrl.on(\"close\", function () {\n  S = line.split(\"\");\n  dp = Array(S.length + 1);\n  for (var i = 0; i <= S.length; i++) {\n    dp[i] = Array(4).fill(0);\n  }\n  for (var i = S.length; i >= 0; i--) {\n    for (var j = 3; j >= 0; j--) {\n      if (i === S.length) {\n        dp[i][j] = j === 3 ? 1 : 0;\n      } else {\n        dp[i][j] = dp[i + 1][j] * (S[i] === \"?\" ? 3 : 1);\n        if (j < 3 && (S[i] === \"?\" || S[i] === \"ABC\"[j])) {\n          dp[i][j] += dp[i + 1][j + 1];\n        }\n        dp[i][j] %= MOD;\n      }\n    }\n  }\n  console.log(dp[0][0]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8723076885027625, "ngram_match_score": 0.823882053327478, "weighted_ngram_match_score": 0.8286140068060209, "syntax_match_score": 0.8367346938775511, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0024433189684078815, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.009478672985781977, "new_decrease_halstead_effort": 0.03963381795028342}}
{"filename": "p03302_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x20')['map'](a=>+a);var ans='x';if(s[0x0]+s[0x1]===0xf)ans='+';if(s[0x0]*s[0x1]===0xf)ans='*';console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 11", "+"], ["3 5", "*"], ["1 1", "x"]], "original": "function Main(s){\n  s = s.split(\" \").map(a=>+a);\n  var ans = \"x\";\n  if(s[0] + s[1] === 15)ans = \"+\";\n  if(s[0] * s[1] === 15)ans = \"*\";\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 783, "deobfuscated": "function Main(s) {\n  s = s.split(\" \").map(a => +a);\n  var ans = \"x\";\n  if (s[0] + s[1] === 15) {\n    ans = \"+\";\n  }\n  if (s[0] * s[1] === 15) {\n    ans = \"*\";\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5736255831141206, "ngram_match_score": 0.1570208067577934, "weighted_ngram_match_score": 0.23552074138496362, "syntax_match_score": 0.9019607843137255, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03303_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=input['split']('\\x0a');var S=input[0x0];var w=parseInt(input[0x1]);if(w==0x1){myout(S);return;}S=S['split']('');var list=[];while(S['length']!=0x0){var tmp='';for(var i=0x0;i<w;i++){if(S['length']!=0x0){tmp+=S['shift']();}}list['push'](tmp);}var output='';for(var i=0x0;i<list['length'];i++){output+=list[i]['slice'](0x0,0x1);}myout(output);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["abcdefgh\n3", "adg"], ["lllll\n1", "lllll"], ["souuundhound\n2", "suudon"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.split(\" \");\n\tinput = input.split(\"\\n\");\n\t//input = input.split(\" \").map((a)=>Number(a));\n\t//input = input.split(\"\\n\").map((a)=>Number(a));\n  var S = input[0];\n  var w = parseInt(input[1]);\n  if(w == 1){\n     myout(S);\n    return;\n     }\n  S = S.split(\"\");\n  var list = [];\n  while(S.length != 0){\n    \tvar tmp = \"\";\n        for(var i = 0; i < w; i++){\n          if(S.length != 0){\n          \ttmp += S.shift();\n          }\n        }\n    list.push(tmp);\n  }\n  var output = \"\";\n  for(var i = 0; i < list.length; i++){\n    output += list[i].slice(0,1);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 784, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var S = input[0];\n  var w = parseInt(input[1]);\n  if (w == 1) {\n    myout(S);\n    return;\n  }\n  S = S.split(\"\");\n  var list = [];\n  while (S.length != 0) {\n    var tmp = \"\";\n    for (var i = 0; i < w; i++) {\n      if (S.length != 0) {\n        tmp += S.shift();\n      }\n    }\n    list.push(tmp);\n  }\n  var output = \"\";\n  for (var i = 0; i < list.length; i++) {\n    output += list[i].slice(0, 1);\n  }\n  myout(output);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7462604690281942, "ngram_match_score": 0.4864504845746706, "weighted_ngram_match_score": 0.4985913915381064, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03452_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var M=input[0x0]['split']('\\x20')['map'](a=>parseInt(a));var N=M[0x0];M=M[0x1];var L=[];for(var i=0x0;i<M;i++){L[i]=input[i+0x1]['split']('\\x20')['map'](a=>parseInt(a));}var anc=new Array(N+0x1)['fill'](0x0);var x=new Array(N+0x1)['fill'](0x0);anc[0x0]=anc[0x1]=0x1;var i,j,low=0x1;var ans='Yes';top:while(L['length']){i=j=L['length'];while(i--){if(anc[L[i][0x0]]&&anc[L[i][0x1]]){if(x[L[i][0x1]]-x[L[i][0x0]]!==L[i][0x2]){ans='No';break top;}else{L['splice'](i,0x1);continue;}}if(anc[L[i][0x0]]){anc[L[i][0x1]]=0x1;x[L[i][0x1]]=x[L[i][0x0]]+L[i][0x2];L['splice'](i,0x1);}else if(anc[L[i][0x1]]){anc[L[i][0x0]]=0x1;x[L[i][0x0]]=x[L[i][0x1]]-L[i][0x2];L['splice'](i,0x1);}}if(j===L['length']){i=anc['findIndex'](a=>a===0x0);anc[i]=0x1;}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n1 2 1\n2 3 1\n1 3 2", "Yes"], ["3 3\n1 2 1\n2 3 1\n1 3 5", "No"], ["4 3\n2 1 1\n2 3 5\n3 4 2", "Yes"], ["10 3\n8 7 100\n7 9 100\n9 8 100", "No"], ["100 0", "Yes"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar M = input[0].split(\" \").map(a => parseInt(a));\n\tvar N = M[0];\n\tM = M[1];\n\tvar L = [];\n\tfor(var i = 0; i < M; i++){\n\t\tL[i] = input[i+1].split(\" \").map(a => parseInt(a));\n\t}\n\tvar anc = new Array(N+1).fill(0);\n\tvar x = new Array(N+1).fill(0);\n\tanc[0] = anc[1] = 1;\n\tvar i, j, low = 1;\n\tvar ans = \"Yes\";\n\t\n\ttop:\n\twhile(L.length){\n\t\ti = j = L.length;\n\t\twhile(i--){\n\t\t\tif(anc[L[i][0]] && anc[L[i][1]]){\n\t\t\t\tif(x[L[i][1]] - x[L[i][0]] !== L[i][2]){\n\t\t\t\t\tans = \"No\";\n\t\t\t\t\tbreak top;\n\t\t\t\t}else{\n\t\t\t\t\tL.splice(i, 1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(anc[L[i][0]]){\n\t\t\t\tanc[L[i][1]] = 1;\n\t\t\t\tx[L[i][1]] = x[L[i][0]] + L[i][2];\n\t\t\t\tL.splice(i, 1);\n\t\t\t}else if(anc[L[i][1]]){\n\t\t\t\tanc[L[i][0]] = 1;\n\t\t\t\tx[L[i][0]] = x[L[i][1]] - L[i][2];\n\t\t\t\tL.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\tif(j === L.length){\n\t\t\ti = anc.findIndex(a => a === 0);\n\t\t\tanc[i] = 1;\n\t\t}\n\t}\n\t\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 785, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var M = input[0].split(\" \").map(a => parseInt(a));\n  var N = M[0];\n  M = M[1];\n  var L = [];\n  for (var i = 0; i < M; i++) {\n    L[i] = input[i + 1].split(\" \").map(a => parseInt(a));\n  }\n  var anc = new Array(N + 1).fill(0);\n  var x = new Array(N + 1).fill(0);\n  anc[0] = anc[1] = 1;\n  var i;\n  var j;\n  var low = 1;\n  var ans = \"Yes\";\n  top: while (L.length) {\n    i = j = L.length;\n    while (i--) {\n      if (anc[L[i][0]] && anc[L[i][1]]) {\n        if (x[L[i][1]] - x[L[i][0]] !== L[i][2]) {\n          ans = \"No\";\n          break top;\n        } else {\n          L.splice(i, 1);\n          continue;\n        }\n      }\n      if (anc[L[i][0]]) {\n        anc[L[i][1]] = 1;\n        x[L[i][1]] = x[L[i][0]] + L[i][2];\n        L.splice(i, 1);\n      } else if (anc[L[i][1]]) {\n        anc[L[i][0]] = 1;\n        x[L[i][0]] = x[L[i][1]] - L[i][2];\n        L.splice(i, 1);\n      }\n    }\n    if (j === L.length) {\n      i = anc.findIndex(a => a === 0);\n      anc[i] = 1;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.813892610644201, "ngram_match_score": 0.5755795108323718, "weighted_ngram_match_score": 0.6988588562727344, "syntax_match_score": 0.9811320754716981, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0006395476339698947, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.016260162601626105, "new_decrease_halstead_effort": -0.016260162601626105}}
{"filename": "p03587_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const S=arg[0x0]['split']('');console['log'](S['filter'](n=>n==='1')['length']);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["111100", "4"], ["001001", "2"], ["000000", "0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    console.log(S.filter(n=>n===\"1\").length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 786, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const S = arg[0].split(\"\");\n  console.log(S.filter(n => n === \"1\").length);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.802441330596718, "ngram_match_score": 0.5330640187089944, "weighted_ngram_match_score": 0.6767013036778773, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03627_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]);const A=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n))['sort']((a,b)=>a-b);let pairNums=[];for(let i in A){if(A[i]===A[parseInt(i)+0x1]){pairNums['push'](A[i]);}}pairNums['sort']((a,b)=>b-a);const set=new Set(pairNums);console['log'](pairNums['length']?[...set][0x0]*[...set][0x1]:0x0);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6\n3 1 2 4 2 1", "2"], ["4\n1 2 3 4", "0"], ["10\n3 3 3 3 4 4 4 5 5 5", "20"]], "original": "\"use strict\"\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>a-b);\n  \n  let pairNums = [];\n  \n  for(let i in A) {\n      if(A[i] === A[parseInt(i) + 1]) {\n        pairNums.push(A[i]);\n      }\n  }\n  \n  pairNums.sort((a,b)=>b-a);\n  const set = new Set(pairNums);\n\n  console.log(pairNums.length ? [...set][0] * [...set][1] : 0);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 787, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n => parseInt(n)).sort((a, b) => a - b);\n  let pairNums = [];\n  for (let i in A) {\n    if (A[i] === A[parseInt(i) + 1]) {\n      pairNums.push(A[i]);\n    }\n  }\n  pairNums.sort((a, b) => b - a);\n  const set = new Set(pairNums);\n  console.log(pairNums.length ? [...set][0] * [...set][1] : 0);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8236860507582391, "ngram_match_score": 0.5672277920818216, "weighted_ngram_match_score": 0.7275164109511346, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03818_1", "type": "JavaScript", "obfuscated": "function Main(input){var len=input['split']('\\x0a')[0x0];var list=input['split']('\\x0a')[0x1]['split']('\\x20');list['sort'](function(a,b){return parseInt(a)-parseInt(b);});var b=list['filter'](function(x,i,self){return self['indexOf'](x)===i;});if(b['length']%0x2==0x1){console['log'](b['length']);}else{console['log'](b['length']-0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1 2 1 3 7", "3"], ["15\n1 3 5 2 1 3 2 8 8 6 2 6 11 1 1", "7"]], "original": "function Main(input) {\n  var len = input.split(\"\\n\")[0];\n  var list = input.split(\"\\n\")[1].split(\" \");\n  list.sort(function(a,b){\n  \treturn parseInt(a) - parseInt(b);\n  });\n  \n  var b = list.filter(function (x, i, self) {\n            return self.indexOf(x) === i;\n        });\n  if(b.length % 2 == 1){\n     console.log(b.length);\n     }else{\n     console.log(b.length - 1);\n     }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 788, "deobfuscated": "function Main(input) {\n  var len = input.split(\"\\n\")[0];\n  var list = input.split(\"\\n\")[1].split(\" \");\n  list.sort(function (a, b) {\n    return parseInt(a) - parseInt(b);\n  });\n  var b = list.filter(function (x, i, self) {\n    return self.indexOf(x) === i;\n  });\n  if (b.length % 2 == 1) {\n    console.log(b.length);\n  } else {\n    console.log(b.length - 1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8645126085176782, "ngram_match_score": 0.6716819701562442, "weighted_ngram_match_score": 0.7863684639144687, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03951_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=Number(input[0x0]);var ans=0x0;for(var i=Math['min'](input[0x1]['length'],input[0x2]['length']);i!=0x0;i--){if(input[0x1]['substr'](-0x1*i)==input[0x2]['substr'](0x0,i)&&input[0x1]['length']+input[0x2]['length']-i>=n){ans=i;break;}}console['log']((input[0x1]['substr'](0x0,input[0x1]['length']-ans)+input[0x2])['length']);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["3\nabc\ncde", "5"], ["1\na\nz", "2"], ["4\nexpr\nexpr", "4"]], "original": "function Main(input){\n\tinput = input.split(\"\\n\");\n\tvar n = Number(input[0]);\n\tvar ans = 0;\n\tfor(var i=Math.min(input[1].length,input[2].length);i!=0;i--){\n\t\tif(input[1].substr(-1*i)==input[2].substr(0,i)&&input[1].length+input[2].length-i>=n){\n\t\t\tans = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tconsole.log((input[1].substr(0,input[1].length-ans)+input[2]).length);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 789, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = Number(input[0]);\n  var ans = 0;\n  for (var i = Math.min(input[1].length, input[2].length); i != 0; i--) {\n    if (input[1].substr(i * -1) == input[2].substr(0, i) && input[1].length + input[2].length - i >= n) {\n      ans = i;\n      break;\n    }\n  }\n  console.log((input[1].substr(0, input[1].length - ans) + input[2]).length);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6849545452980349, "ngram_match_score": 0.2607594989597722, "weighted_ngram_match_score": 0.6202351528206027, "syntax_match_score": 0.8588235294117647, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03966_1", "type": "JavaScript", "obfuscated": "function Main(input){TT=0x0;AA=0x0;input=input['split']('\\x0a');N=input[0x0];for(i=0x1;i<=N;i++){tmp=input[i]['split']('\\x20');T=tmp[0x0]*0x1;A=tmp[0x1]*0x1;if(TT<=T&&AA<=A){TT=T;AA=A;}else{ratioT=TT/T;ratioA=AA/A;ratio=Math['ceil'](Math['max'](ratioT,ratioA));TT=T*ratio;AA=A*ratio;}}console['log'](TT+AA);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n2 3\n1 1\n3 2", "10"], ["4\n1 1\n1 1\n1 5\n1 100", "101"], ["5\n3 10\n48 17\n31 199\n231 23\n3 2", "6930"]], "original": "function Main(input) {\n    TT = 0;\n    AA = 0;\n \n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\tN = input[0];\n//    console.log(N);\t\n    for (i = 1; i <= N; i++) {\n    \ttmp = input[i].split(\" \");\n    \tT = tmp[0] * 1;\n    \tA = tmp[1] * 1;\n        // console.log(\"T:\" + T + \" A:\" + A);\n \n        if ((TT <= T) && (AA <= A)) {\n            TT = T;\n            AA = A;\n        } else {\n            ratioT = TT / T;\n            ratioA = AA / A;\n            // console.log(\"ratioT:\" + ratioT + \" ratioA:\" + ratioA);\n            ratio = Math.ceil(Math.max(ratioT, ratioA));\n            TT = T * ratio;\n            AA = A * ratio;\n        }\n        // console.log(\"TT:\" + TT + \" AA:\" + AA);\n    }\n\t//出力\n    console.log(TT + AA);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 790, "deobfuscated": "function Main(input) {\n  TT = 0;\n  AA = 0;\n  input = input.split(\"\\n\");\n  N = input[0];\n  for (i = 1; i <= N; i++) {\n    tmp = input[i].split(\" \");\n    T = tmp[0] * 1;\n    A = tmp[1] * 1;\n    if (TT <= T && AA <= A) {\n      TT = T;\n      AA = A;\n    } else {\n      ratioT = TT / T;\n      ratioA = AA / A;\n      ratio = Math.ceil(Math.max(ratioT, ratioA));\n      TT = T * ratio;\n      AA = A * ratio;\n    }\n  }\n  console.log(TT + AA);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7521039150354343, "ngram_match_score": 0.5406529939772009, "weighted_ngram_match_score": 0.5801222167263342, "syntax_match_score": 0.8876404494382022, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04020_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=input['trim']()['split']('\\x0a')['map'](a=>Number(a));var len=input[0x0];var output=0x0;input['shift']();for(var i=0x0;i<len;i++){if(i==len-0x1){output+=Math['floor'](input[i]/0x2);}else{if(input[i]!=0x0){if(input[i+0x1]!=0x0){var tmp=Math['min'](input[i],input[i+0x1]);output+=tmp;input[i]-=tmp;input[i+0x1]-=tmp;if(input[i]>=0x2){output+=Math['floor'](input[i]/0x2);}}else{output+=Math['floor'](input[i]/0x2);}}}}myout(output);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["4\n4\n0\n3\n2", "4"], ["8\n2\n0\n1\n6\n0\n8\n2\n1", "9"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\t//input = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\tinput = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var len = input[0];\n  var output = 0;\n  input.shift();\n  for(var i = 0; i < len; i++){\n    if(i == len - 1){\n       output += Math.floor(input[i] / 2);\n    }else{\n      if(input[i] != 0){\n         if(input[i+1] != 0){\n         \tvar tmp = Math.min(input[i],input[i+1]); \n           output += tmp;\n           input[i] -= tmp;\n           input[i+1] -= tmp;\n           if(input[i] >= 2){\n              output += Math.floor(input[i] / 2);\n              }\n         }else{\n            output += Math.floor(input[i] / 2);\n         }\n      }\n    }\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 791, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = input.trim().split(\"\\n\").map(a => Number(a));\n  var len = input[0];\n  var output = 0;\n  input.shift();\n  for (var i = 0; i < len; i++) {\n    if (i == len - 1) {\n      output += Math.floor(input[i] / 2);\n    } else if (input[i] != 0) {\n      if (input[i + 1] != 0) {\n        var tmp = Math.min(input[i], input[i + 1]);\n        output += tmp;\n        input[i] -= tmp;\n        input[i + 1] -= tmp;\n        if (input[i] >= 2) {\n          output += Math.floor(input[i] / 2);\n        }\n      } else {\n        output += Math.floor(input[i] / 2);\n      }\n    }\n  }\n  myout(output);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6865921815049489, "ngram_match_score": 0.4015536241465001, "weighted_ngram_match_score": 0.4505061587838645, "syntax_match_score": 0.8943089430894309, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00012_1", "type": "JavaScript", "obfuscated": "function area(x1,y1,x2,y2,x3,y3){var ab=Math['sqrt']((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)),bc=Math['sqrt']((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)),ca=Math['sqrt']((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1)),s=0.5*(ab+bc+ca),S=Math['sqrt'](s*(s-ab)*(s-bc)*(s-ca));return S;}function inTriangle(x1,y1,x2,y2,x3,y3,xp,yp){var abc=area(x1,y1,x2,y2,x3,y3),abp=area(x1,y1,x2,y2,xp,yp),bcp=area(x2,y2,x3,y3,xp,yp),cap=area(x3,y3,x1,y1,xp,yp),sub=abc-(abp+bcp+cap);return Math['abs'](sub)<=0.01;}function main(){input['forEach'](function(line){if(line['trim']()==='')return;console['log'](inTriangle['apply'](null,line['split']('\\x20')['map'](parseFloat))?'YES':'NO');});}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["0.0 0.0 2.0 0.0 2.0 2.0 1.5 0.5\n0.0 0.0 1.0 4.0 5.0 3.0 -1.0 3.0", "YES\nNO"]], "original": "function area(x1, y1, x2, y2, x3, y3) {\n    var\n    ab = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)),\n    bc = Math.sqrt((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)),\n    ca = Math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1)),\n    s = 0.5*(ab+bc+ca),\n    S= Math.sqrt(s*(s-ab)*(s-bc)*(s-ca));\n    return S;\n}\n\nfunction inTriangle(x1, y1, x2, y2, x3, y3, xp, yp) {\n  var\n  abc = area(x1, y1, x2, y2, x3, y3),\n  abp = area(x1, y1, x2, y2, xp, yp),\n  bcp = area(x2, y2, x3, y3, xp, yp),\n  cap = area(x3, y3, x1, y1, xp, yp),\n  sub = abc-(abp+bcp+cap);\n  return Math.abs(sub) <= 0.01;\n}\n\nfunction main() {\n  input.forEach(function(line) {\n    if(line.trim() === '') return;\n    console.log(inTriangle.apply(null, line.split(' ').map(parseFloat)) ? 'YES' : 'NO');\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 792, "deobfuscated": "function area(x1, y1, x2, y2, x3, y3) {\n  var ab = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n  var bc = Math.sqrt((x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3));\n  var ca = Math.sqrt((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1));\n  var s = (ab + bc + ca) * 0.5;\n  var S = Math.sqrt(s * (s - ab) * (s - bc) * (s - ca));\n  return S;\n}\nfunction inTriangle(x1, y1, x2, y2, x3, y3, xp, yp) {\n  var abc = area(x1, y1, x2, y2, x3, y3);\n  var abp = area(x1, y1, x2, y2, xp, yp);\n  var bcp = area(x2, y2, x3, y3, xp, yp);\n  var cap = area(x3, y3, x1, y1, xp, yp);\n  var sub = abc - (abp + bcp + cap);\n  return Math.abs(sub) <= 0.01;\n}\nfunction main() {\n  input.forEach(function (line) {\n    if (line.trim() === \"\") {\n      return;\n    }\n    console.log(inTriangle.apply(null, line.split(\" \").map(parseFloat)) ? \"YES\" : \"NO\");\n  });\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6969474420595042, "ngram_match_score": 0.3273155737394757, "weighted_ngram_match_score": 0.5670045532622157, "syntax_match_score": 0.9017341040462428, "dataflow_match_score": 0.9917355371900827}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0011819193711906095, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03125, "new_decrease_halstead_effort": -0.03125}}
{"filename": "p00014_1", "type": "JavaScript", "obfuscated": "process['stdin']['on']('data',function(c){(c+'')['trim']()['split']('\\x0a')['some'](function(n){for(var d=+n,i=0x1,a=0x0,t;t=i++*d,t<0x258?a+=t*t*d:0x0;);console['log'](a);});})['resume']();", "test_cases": [["20\n10", "68440000\n70210000"]], "original": "process.stdin.on(\"data\",function(c){\n  (c+\"\").trim().split(\"\\n\").some(function(n){\n    for(var d=+n,i=1,a=0,t;t=i++*d,t<600?a+=t*t*d:0;);\n    console.log(a);\n  });\n}).resume();", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 793, "deobfuscated": "process.stdin.on(\"data\", function (c) {\n  (c + \"\").trim().split(\"\\n\").some(function (n) {\n    for (var d = +n, i = 1, a = 0, t; t = i++ * d, t < 600 ? a += t * t * d : 0;);\n    console.log(a);\n  });\n}).resume();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5463051766869753, "ngram_match_score": 0.021739441181346644, "weighted_ngram_match_score": 0.16348126556655487, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00022_1", "type": "JavaScript", "obfuscated": "function main(){while(0x1){var n=scan();if(n==0x0){break;}var x=Array(n);rep(n,function(i){x[i]=scan();});x[-0x1]=0x0;rep(n,function(i){x[i]+=x[i-0x1];});var a=-Infinity;rep(n,function(i){for(var j=i;j<n;++j){a=Math['max'](x[j]-x[i-0x1],a);}});print(a);}}function rep(n,func){for(var i=0x0;i<n;++i){func(i);}}process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var input='';var input_index=0x0;function scan(type){if(type==='string'){return input[input_index++];}else{return+input[input_index++];}}function print(val){console['log'](val);}process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split'](/\\s+/);main();});", "test_cases": [["7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0", "19\n14\n1001"]], "original": "function main(){\n\twhile(1){\n\t\tvar n = scan();\n\t\tif(n == 0){\n\t\t\tbreak;\n\t\t}\n\t\tvar x = Array(n);\n\t\trep(n, function(i){\n\t\t\tx[i] = scan();\n\t\t});\n\t\tx[-1] = 0;\n\t\trep(n, function(i){\n\t\t\tx[i] += x[i - 1];\n\t\t});\n\t\tvar a = -Infinity;\n\t\trep(n, function(i){\n\t\t\tfor(var j = i; j < n; ++j){\n\t\t\t\ta = Math.max(x[j] - x[i - 1], a);\n\t\t\t}\n\t\t});\n\t\tprint(a);\n\t}\n}\n\nfunction rep(n, func){\n\tfor(var i = 0; i < n; ++i){\n\t\tfunc(i);\n\t}\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar input = '';\nvar input_index = 0;\n\nfunction scan(type){\n\tif(type === 'string'){\n\t\treturn input[input_index++];\n\t}\n\telse{\n\t\treturn +input[input_index++];\n\t}\n}\n\nfunction print(val){\n\tconsole.log(val);\n}\n\nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.split(/\\s+/);\n\tmain();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 794, "deobfuscated": "function main() {\n  while (1) {\n    var n = scan();\n    if (n == 0) {\n      break;\n    }\n    var x = Array(n);\n    rep(n, function (i) {\n      x[i] = scan();\n    });\n    x[-1] = 0;\n    rep(n, function (i) {\n      x[i] += x[i - 1];\n    });\n    var a = -Infinity;\n    rep(n, function (i) {\n      for (var j = i; j < n; ++j) {\n        a = Math.max(x[j] - x[i - 1], a);\n      }\n    });\n    print(a);\n  }\n}\nfunction rep(n, func) {\n  for (var i = 0; i < n; ++i) {\n    func(i);\n  }\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar input = \"\";\nvar input_index = 0;\nfunction scan(type) {\n  if (type === \"string\") {\n    return input[input_index++];\n  } else {\n    return +input[input_index++];\n  }\n}\nfunction print(val) {\n  console.log(val);\n}\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(/\\s+/);\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7617168084583906, "ngram_match_score": 0.46668397687533925, "weighted_ngram_match_score": 0.5801832569582233, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00042_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var cnt=0x1;while(!![]){var W=Arr['shift']()-0x0;if(W==0x0)break;var N=Arr['shift']()-0x0;var dp=[];for(var y=0x0;y<N+0x1;y++){dp[y]=[];for(var x=0x0;x<=W;x++){dp[y][x]=0x0;}}var v=[];var w=[];for(var i=0x0;i<N;i++){var arr=Arr['shift']()['split'](',')['map'](Number);v['push'](arr[0x0]);w['push'](arr[0x1]);}for(var y=0x0;y<N;y++){for(var x=0x0;x<=W;x++){if(x-w[y]>=0x0)dp[y+0x1][x]=Math['max'](dp[y][x],dp[y][x-w[y]]+v[y]);else dp[y+0x1][x]=dp[y][x];}}console['log']('Case\\x20'+cnt+':');cnt++;console['log'](dp[N][W]);var maxValue=dp[N][W];while(maxValue==dp[N][W-0x1])W--;console['log'](W);}", "test_cases": [["50\n5\n60,10\n100,20\n120,30\n210,45\n10,4\n50\n5\n60,10\n100,20\n120,30\n210,45\n10,4\n0", "Case 1:\n220\n49\nCase 2:\n220\n49"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar cnt=1;\nwhile(true){\n   var W=Arr.shift()-0;\n   if(W==0)break;\n   var N=Arr.shift()-0;\n   var dp=[];\n   for(var y=0;y<N+1;y++){\n      dp[y]=[];\n      for(var x=0;x<=W;x++){\n         dp[y][x]=0;\n      }\n   }\n   var v=[];\n   var w=[];\n   for(var i=0;i<N;i++){\n      var arr=(Arr.shift()).split(\",\").map(Number);\n      v.push(arr[0]);\n      w.push(arr[1]);\n   }\n   for(var y=0;y<N;y++){\n      for(var x=0;x<=W;x++){\n         if(x-w[y]>=0)dp[y+1][x]=Math.max(dp[y][x],dp[y][x-w[y]]+v[y]);\n         else dp[y+1][x]=dp[y][x];\n      }\n   }\n   console.log(\"Case \"+cnt+\":\");\n   cnt++;\n   console.log(dp[N][W]);\n   var maxValue=dp[N][W];\n   while(maxValue==dp[N][W-1])W--;\n   console.log(W);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 795, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar cnt = 1;\nwhile (true) {\n  var W = Arr.shift() - 0;\n  if (W == 0) {\n    break;\n  }\n  var N = Arr.shift() - 0;\n  var dp = [];\n  for (var y = 0; y < N + 1; y++) {\n    dp[y] = [];\n    for (var x = 0; x <= W; x++) {\n      dp[y][x] = 0;\n    }\n  }\n  var v = [];\n  var w = [];\n  for (var i = 0; i < N; i++) {\n    var arr = Arr.shift().split(\",\").map(Number);\n    v.push(arr[0]);\n    w.push(arr[1]);\n  }\n  for (var y = 0; y < N; y++) {\n    for (var x = 0; x <= W; x++) {\n      if (x - w[y] >= 0) {\n        dp[y + 1][x] = Math.max(dp[y][x], dp[y][x - w[y]] + v[y]);\n      } else {\n        dp[y + 1][x] = dp[y][x];\n      }\n    }\n  }\n  console.log(\"Case \" + cnt + \":\");\n  cnt++;\n  console.log(dp[N][W]);\n  var maxValue = dp[N][W];\n  while (maxValue == dp[N][W - 1]) {\n    W--;\n  }\n  console.log(W);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4884322208776062, "ngram_match_score": 0.020944407147992616, "weighted_ngram_match_score": 0.07244928083170579, "syntax_match_score": 0.8603351955307262, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004290130000873749, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011538461538461497, "new_decrease_halstead_effort": 0.0895748987854249}}
{"filename": "p00051_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var AL=Arr['shift']();for(var i=0x0;i<AL;i++){var arr=Arr[i]['split']('')['map'](Number);arr['sort'](function(a,b){return b-a;});var a=arr['join']('');arr['sort'](function(a,b){return a-b;});var b=arr['join']('');console['log'](parseInt(a)-parseInt(b));}", "test_cases": [["2\n65539010\n65539010", "96417531\n96417531"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nfor(var i=0;i<AL;i++){\n   var arr=Arr[i].split(\"\").map(Number);\n   arr.sort(function(a,b){return b-a;});\n   var a=arr.join(\"\");\n   arr.sort(function(a,b){return a-b;});\n   var b=arr.join(\"\");\n   console.log(parseInt(a)-parseInt(b));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 796, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar AL = Arr.shift();\nfor (var i = 0; i < AL; i++) {\n  var arr = Arr[i].split(\"\").map(Number);\n  arr.sort(function (a, b) {\n    return b - a;\n  });\n  var a = arr.join(\"\");\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var b = arr.join(\"\");\n  console.log(parseInt(a) - parseInt(b));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5025352124379181, "ngram_match_score": 0.020874365970730738, "weighted_ngram_match_score": 0.06243721548825871, "syntax_match_score": 0.926829268292683, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00065_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split']('\\x0a');var lm=[];var line;while(line=lines['shift']()){lm['push'](line['split'](',')[0x0]);}var tm=[];while(line=lines['shift']()){tm['push'](line['split'](',')[0x0]);}lm['sort'](function(a,b){return a-b;});lm['forEach'](function(c){var cnt=tm['filter'](function(n){return n==c;})['length'];if(cnt>0x0){var tcnt=lm['filter'](function(n){return n==c;})['length'];console['log'](c,cnt+tcnt);}});", "test_cases": [["123,10\n56,12\n34,14\n\n123,3\n56,4\n123,5", "56 2\n123 3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar lm = [];\nvar line;\nwhile (line = lines.shift()) {\n    lm.push(line.split(',')[0]);\n}\n\nvar tm = [];\nwhile (line = lines.shift()) {\n    tm.push(line.split(',')[0]);\n}\n\nlm.sort(function(a,b){return a-b;});\n\nlm.forEach(function(c) {\n    var cnt = tm.filter(function(n){return n == c;}).length;\n    if (cnt > 0) {\n        var tcnt = lm.filter(function(n){return n == c}).length;\n        console.log(c, cnt + tcnt);\n    }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 797, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(\"\\n\");\nvar lm = [];\nvar line;\nwhile (line = lines.shift()) {\n  lm.push(line.split(\",\")[0]);\n}\nvar tm = [];\nwhile (line = lines.shift()) {\n  tm.push(line.split(\",\")[0]);\n}\nlm.sort(function (a, b) {\n  return a - b;\n});\nlm.forEach(function (c) {\n  var cnt = tm.filter(function (n) {\n    return n == c;\n  }).length;\n  if (cnt > 0) {\n    var tcnt = lm.filter(function (n) {\n      return n == c;\n    }).length;\n    console.log(c, cnt + tcnt);\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7617802585200117, "ngram_match_score": 0.45659976845306477, "weighted_ngram_match_score": 0.5905212656269822, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00087_1", "type": "JavaScript", "obfuscated": "x=require('fs')['readFileSync']('/dev/stdin','utf8');y=x['trim']()['split']('\\x0a');while(!![]){if(y['length']==0x0)break;var z=y['shift']()['split']('\\x20');var s=[];z['forEach'](function(v){if(/\\d/['test'](v)){s['unshift'](v-0x0);}else{a=s['shift']();b=s['shift']();if(v=='+')s['unshift'](b+a);if(v=='-')s['unshift'](b-a);if(v=='*')s['unshift'](b*a);if(v=='/')s['unshift'](b/a);}});console['log'](s[0x0]['toFixed'](0x6));}", "test_cases": [["10 2 12 - /\n3 4 - 7 2 3 * + *\n-1 -2 3 + +", "-1.000000\n-13.000000\n0.000000"]], "original": "x=require('fs').readFileSync('/dev/stdin', 'utf8');\ny=x.trim().split(\"\\n\");\nwhile(true){\n   if(y.length==0)break;\n   var z=y.shift().split(\" \");\n   var s=[];\n   z.forEach(function(v){\n      if(/\\d/.test(v)){\n         s.unshift(v-0);\n      }else{\n         a=s.shift();\n         b=s.shift();\n         if(v==\"+\")s.unshift(b+a);\n         if(v==\"-\")s.unshift(b-a);\n         if(v==\"*\")s.unshift(b*a);\n         if(v==\"/\")s.unshift(b/a);\n      }\n   });\n   console.log(s[0].toFixed(6));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 798, "deobfuscated": "x = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ny = x.trim().split(\"\\n\");\nwhile (true) {\n  if (y.length == 0) {\n    break;\n  }\n  var z = y.shift().split(\" \");\n  var s = [];\n  z.forEach(function (v) {\n    if (/\\d/.test(v)) {\n      s.unshift(v - 0);\n    } else {\n      a = s.shift();\n      b = s.shift();\n      if (v == \"+\") {\n        s.unshift(b + a);\n      }\n      if (v == \"-\") {\n        s.unshift(b - a);\n      }\n      if (v == \"*\") {\n        s.unshift(b * a);\n      }\n      if (v == \"/\") {\n        s.unshift(b / a);\n      }\n    }\n  });\n  console.log(s[0].toFixed(6));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5077731087848271, "ngram_match_score": 0.03316140665231952, "weighted_ngram_match_score": 0.13706146326959745, "syntax_match_score": 0.8608695652173913, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.022058823529411797, "new_decrease_halstead_effort": 0.11096256684491979}}
{"filename": "p00103_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');var inning=+lines['shift']();var out=0x0;var score=0x0;var runner=0x0;var line;while(line=lines['shift']()){if(line=='HIT'){runner++;if(runner>0x3){score++;runner--;}}else if(line=='HOMERUN'){score+=runner+0x1;runner=0x0;}else{out++;if(out==0x3){console['log'](score);out=0x0;score=0x0;runner=0x0;continue;}}}", "test_cases": [["2\nHIT\nOUT\nHOMERUN\nHIT\nHIT\nHOMERUN\nHIT\nOUT\nHIT\nHIT\nHIT\nHIT\nOUT\nHIT\nHIT\nOUT\nHIT\nOUT\nOUT", "7\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar inning = +lines.shift();\n\nvar out = 0;\nvar score = 0;\nvar runner = 0;\n\nvar line;\nwhile (line = lines.shift()) {\n    if (line == 'HIT') {\n        runner++;\n        if (runner > 3) {\n            score++;\n            runner--;\n        }\n    } else if (line == 'HOMERUN') {\n        score += runner + 1;\n        runner = 0;\n    } else {\n        out++;\n        if (out == 3) {\n            console.log(score);\n            out = 0;\n            score = 0;\n            runner = 0;\n            continue;\n        }\n    }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 799, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nvar inning = +lines.shift();\nvar out = 0;\nvar score = 0;\nvar runner = 0;\nvar line;\nwhile (line = lines.shift()) {\n  if (line == \"HIT\") {\n    runner++;\n    if (runner > 3) {\n      score++;\n      runner--;\n    }\n  } else if (line == \"HOMERUN\") {\n    score += runner + 1;\n    runner = 0;\n  } else {\n    out++;\n    if (out == 3) {\n      console.log(score);\n      out = 0;\n      score = 0;\n      runner = 0;\n      continue;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9333983689765961, "ngram_match_score": 0.8640878658725183, "weighted_ngram_match_score": 0.8695056100338661, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00142_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);while(!![]){var n=arr['shift']();if(n==0x0)break;if(n==0x1){console['log']('');continue;}var ary=[];for(var i=0x0;i<n;i++)ary[i]=![];for(var i=0x1;i<n;i++){ary[i*i%n]=!![];}var m=[];ary['forEach'](function(v,i){if(v)m['push'](i);});var ans=[];var len=(n-0x1)/0x2;for(var i=0x0;i<=len;i++)ans[i]=0x0;for(var i=0x0;i<m['length'];i++){for(var j=i+0x1;j<m['length'];j++){var x=m[i]-m[j];if(x<0x0)x+=n;if(len<x)x=n-x;ans[x]+=0x2;}}ans['shift']();ans['forEach'](function(v){console['log'](v);});}", "test_cases": [["11\n15\n0", "4\n4\n4\n4\n4\n2\n2\n4\n2\n4\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   if(n==1){\n      console.log(\"\");\n      continue;\n   }\n   var ary=[];\n   for(var i=0;i<n;i++)ary[i]=false;\n   for(var i=1;i<n;i++){\n      ary[i*i%n]=true;\n   }\n   var m=[];\n   ary.forEach(function(v,i){\n      if(v)m.push(i);\n   });\n   var ans=[];\n   var len=(n-1)/2 ;\n   for(var i=0;i<=len;i++)ans[i]=0;\n   for(var i=0;i<m.length;i++){\n      for(var j=i+1;j<m.length;j++){\n         var x=m[i]-m[j];\n         if(x<0)x+=n;\n         if(len<x)x=n-x;\n         ans[x]+=2;\n      }\n   }\n   ans.shift();\n   ans.forEach(function(v){\n      console.log(v);\n   });\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 800, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nwhile (true) {\n  var n = arr.shift();\n  if (n == 0) {\n    break;\n  }\n  if (n == 1) {\n    console.log(\"\");\n    continue;\n  }\n  var ary = [];\n  for (var i = 0; i < n; i++) {\n    ary[i] = false;\n  }\n  for (var i = 1; i < n; i++) {\n    ary[i * i % n] = true;\n  }\n  var m = [];\n  ary.forEach(function (v, i) {\n    if (v) {\n      m.push(i);\n    }\n  });\n  var ans = [];\n  var len = (n - 1) / 2;\n  for (var i = 0; i <= len; i++) {\n    ans[i] = 0;\n  }\n  for (var i = 0; i < m.length; i++) {\n    for (var j = i + 1; j < m.length; j++) {\n      var x = m[i] - m[j];\n      if (x < 0) {\n        x += n;\n      }\n      if (len < x) {\n        x = n - x;\n      }\n      ans[x] += 2;\n    }\n  }\n  ans.shift();\n  ans.forEach(function (v) {\n    console.log(v);\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5122592109710709, "ngram_match_score": 0.035225519618792334, "weighted_ngram_match_score": 0.13145838308902077, "syntax_match_score": 0.8823529411764706, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03669724770642202, "new_decrease_halstead_effort": 0.13059200466716292}}
{"filename": "p00147_1", "type": "JavaScript", "obfuscated": "function main(){var waitTime=[0x0,0x0,0x0,0x0,0x0,0x0,0xe,0x9,0x4,0x0,0x0,0x8,0x3,0x2,0x0,0x0,0xf,0xa,0xf,0xa,0x6,0xc,0x7,0x9,0xb,0x6,0x17,0x12,0xd,0x8,0x3,0x17,0x12,0xd,0x8,0x3,0x22,0x1d,0x18,0x16,0x11,0x1c,0x17,0x18,0x13,0x1b,0x22,0x1d,0x23,0x1e,0x1c,0x1f,0x1c,0x17,0x18,0x1c,0x2a,0x25,0x20,0x1b,0x16,0x2a,0x25,0x20,0x1b,0x16,0x35,0x30,0x2b,0x29,0x24,0x2f,0x2a,0x2b,0x26,0x2e,0x40,0x3b,0x36,0x31,0x2c,0x3d,0x38,0x33,0x2e,0x2c,0x48,0x43,0x3e,0x39,0x34,0x48,0x43,0x3e,0x39,0x34,0x53,0x4e,0x49,0x47];for(var i=0x0;i<input['length'];i++){var idx=parseInt(input[i],0xa);console['log']('%d',waitTime[idx]);}}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["5\n6\n7\n8", "0\n14\n9\n4"]], "original": "function main(){\n  var waitTime = [0,0,0,0,0,0,14,9,4,0,0,8,3,2,0,0,15,10,15,10,6,12,7,9,11,6,23,18,13,8,3,23,18,13,8,3,34,29,24,22,17,28,23,24,19,27,34,29,35,30,28,31,28,23,24,28,42,37,32,27,22,42,37,32,27,22,53,48,43,41,36,47,42,43,38,46,64,59,54,49,44,61,56,51,46,44,72,67,62,57,52,72,67,62,57,52,83,78,73,71];\n  for(var i = 0; i < input.length; i++){\n    var idx = parseInt(input[i], 10);\n    console.log('%d', waitTime[idx]);\n  }\n}\nvar\ninput = '';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 801, "deobfuscated": "function main() {\n  var waitTime = [0, 0, 0, 0, 0, 0, 14, 9, 4, 0, 0, 8, 3, 2, 0, 0, 15, 10, 15, 10, 6, 12, 7, 9, 11, 6, 23, 18, 13, 8, 3, 23, 18, 13, 8, 3, 34, 29, 24, 22, 17, 28, 23, 24, 19, 27, 34, 29, 35, 30, 28, 31, 28, 23, 24, 28, 42, 37, 32, 27, 22, 42, 37, 32, 27, 22, 53, 48, 43, 41, 36, 47, 42, 43, 38, 46, 64, 59, 54, 49, 44, 61, 56, 51, 46, 44, 72, 67, 62, 57, 52, 72, 67, 62, 57, 52, 83, 78, 73, 71];\n  for (var i = 0; i < input.length; i++) {\n    var idx = parseInt(input[i], 10);\n    console.log(\"%d\", waitTime[idx]);\n  }\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6432475718233712, "ngram_match_score": 0.12645164173489365, "weighted_ngram_match_score": 0.44653864555859096, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00188_1", "type": "JavaScript", "obfuscated": "function binarySearch(A,key){var left=0x0;var right=A['length']-0x1;var cnt=0x0;while(!![]){cnt++;if(left==right)break;var mid=Math['floor']((left+right)/0x2);if(A[mid]==key)return cnt;if(key<A[mid])right=mid;else left=mid+0x1;}return cnt;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=[];for(var i=0x0;i<n;i++)arr['push'](Arr['shift']()-0x0);console['log'](binarySearch(arr,Arr['shift']()-0x0));}", "test_cases": [["7\n11\n15\n23\n36\n51\n61\n86\n51\n4\n1\n2\n3\n5\n4\n0", "3\n3"]], "original": "function binarySearch(A,key){\n    var left = 0;\n    var right = A.length-1;\n    var cnt=0;\n    while(true){\n        cnt++;\n        if(left==right)break;\n        var mid =Math.floor((left + right)/2);\n        if (A[mid] == key)return cnt;\n        if (key < A[mid]) right = mid;\n        else left = mid+1;\n    }\n    return cnt;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++)arr.push(Arr.shift()-0);\n   console.log(binarySearch(arr,Arr.shift()-0));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 802, "deobfuscated": "function binarySearch(A, key) {\n  var left = 0;\n  var right = A.length - 1;\n  var cnt = 0;\n  while (true) {\n    cnt++;\n    if (left == right) {\n      break;\n    }\n    var mid = Math.floor((left + right) / 2);\n    if (A[mid] == key) {\n      return cnt;\n    }\n    if (key < A[mid]) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return cnt;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    arr.push(Arr.shift() - 0);\n  }\n  console.log(binarySearch(arr, Arr.shift() - 0));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5929593457664788, "ngram_match_score": 0.15829320959279858, "weighted_ngram_match_score": 0.3385441734731169, "syntax_match_score": 0.875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006790253093480025, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04054054054054057, "new_decrease_halstead_effort": 0.1194434566145095}}
{"filename": "p00231_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;var plus={};var minus={};var pm=[];for(var i=0x0;i<N;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var m=arr[0x0];var a=arr[0x1];var b=arr[0x2]-0.001*N;plus[a]=m;minus[b]=m;pm['push'](a);pm['push'](b);}pm['sort'](function(a,b){return a-b;});var flag='OK';var sum=0x0;for(var i=0x0;i<pm['length'];i++){var v=pm[i];if(plus['hasOwnProperty'](v))sum+=plus[v];if(minus['hasOwnProperty'](v))sum-=minus[v];if(sum>0x96){flag='NG';break;}}console['log'](flag);}", "test_cases": [["3\n80 0 30\n50 5 25\n90 27 50\n3\n80 0 30\n70 5 25\n71 30 50\n0", "NG\nOK"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var plus={};\n   var minus={};\n   var pm=[];\n   for(var i=0;i<N;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var m=arr[0];\n      var a=arr[1];\n      var b=arr[2]-(0.001*N);\n      plus[a]=m;\n      minus[b]=m;\n      pm.push(a);\n      pm.push(b);\n   }\n   pm.sort(function(a,b){return a-b;});\n   var flag=\"OK\";\n   var sum=0;\n   for(var i=0;i<pm.length;i++){\n      var v=pm[i];\n      if(plus.hasOwnProperty(v))sum+=plus[v];\n      if(minus.hasOwnProperty(v))sum-=minus[v];\n      if(sum>150){flag=\"NG\";break;}\n   }\n   console.log(flag);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 803, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  var plus = {};\n  var minus = {};\n  var pm = [];\n  for (var i = 0; i < N; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    var m = arr[0];\n    var a = arr[1];\n    var b = arr[2] - N * 0.001;\n    plus[a] = m;\n    minus[b] = m;\n    pm.push(a);\n    pm.push(b);\n  }\n  pm.sort(function (a, b) {\n    return a - b;\n  });\n  var flag = \"OK\";\n  var sum = 0;\n  for (var i = 0; i < pm.length; i++) {\n    var v = pm[i];\n    if (plus.hasOwnProperty(v)) {\n      sum += plus[v];\n    }\n    if (minus.hasOwnProperty(v)) {\n      sum -= minus[v];\n    }\n    if (sum > 150) {\n      flag = \"NG\";\n      break;\n    }\n  }\n  console.log(flag);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4728602867562406, "ngram_match_score": 0.019529649953590623, "weighted_ngram_match_score": 0.06205234214179413, "syntax_match_score": 0.8098591549295775, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015306122448979553, "new_decrease_halstead_effort": 0.08506956789684517}}
{"filename": "p00241_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;for(var I=0x0;I<N;I++){var A=Arr['shift']()['split']('\\x20')['map'](Number);var x1=A[0x0];var y1=A[0x1];var z1=A[0x2];var w1=A[0x3];var x2=A[0x4];var y2=A[0x5];var z2=A[0x6];var w2=A[0x7];var a=x1*x2;var i=x1*y2;var j=x1*z2;var k=x1*w2;i+=y1*x2;a-=y1*y2;k+=y1*z2;j-=y1*w2;j+=z1*x2;k-=z1*y2;a-=z1*z2;i+=z1*w2;k+=w1*x2;j+=w1*y2;i-=w1*z2;a-=w1*w2;console['log'](a+'\\x20'+i+'\\x20'+j+'\\x20'+k);}}", "test_cases": [["2\n1 2 3 4 7 6 7 8\n5 6 7 8 3 2 3 4\n0", "-58 16 36 32\n-50 32 28 48"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\nvar N=Arr.shift()-0;\nif(N==0)break;\nfor(var I=0;I<N;I++){\nvar A=Arr.shift().split(\" \").map(Number);\nvar x1=A[0];\nvar y1=A[1];\nvar z1=A[2];\nvar w1=A[3];\n \nvar x2=A[4];\nvar y2=A[5];\nvar z2=A[6];\nvar w2=A[7];\n \n   var a = x1 * x2;\n   var i = x1 * y2;\n   var j = x1 * z2;\n   var k = x1 * w2;\n \n   i += y1 * x2;\n   a -= y1 * y2;\n   k += y1 * z2;\n   j -= y1 * w2;\n              \n   j += z1 * x2;\n   k -= z1 * y2;\n   a -= z1 * z2;\n   i += z1 * w2;\n              \n   k += w1 * x2;\n   j += w1 * y2;\n   i -= w1 * z2;\n   a -= w1 * w2;\nconsole.log(a+\" \"+i+\" \"+j+\" \"+k);\n}\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 804, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  for (var I = 0; I < N; I++) {\n    var A = Arr.shift().split(\" \").map(Number);\n    var x1 = A[0];\n    var y1 = A[1];\n    var z1 = A[2];\n    var w1 = A[3];\n    var x2 = A[4];\n    var y2 = A[5];\n    var z2 = A[6];\n    var w2 = A[7];\n    var a = x1 * x2;\n    var i = x1 * y2;\n    var j = x1 * z2;\n    var k = x1 * w2;\n    i += y1 * x2;\n    a -= y1 * y2;\n    k += y1 * z2;\n    j -= y1 * w2;\n    j += z1 * x2;\n    k -= z1 * y2;\n    a -= z1 * z2;\n    i += z1 * w2;\n    k += w1 * x2;\n    j += w1 * y2;\n    i -= w1 * z2;\n    a -= w1 * w2;\n    console.log(a + \" \" + i + \" \" + j + \" \" + k);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7958215537243872, "ngram_match_score": 0.5082424750118191, "weighted_ngram_match_score": 0.7402611311900776, "syntax_match_score": 0.9347826086956522, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006150339806455296, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013953488372092981, "new_decrease_halstead_effort": 0.13108901173470644}}
{"filename": "p00884_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var first=Arr['shift']()['split'](':');first=first[0x1]['slice'](0x0,-0x1)['split'](',');var F={};first['forEach'](function(v){F[v]=!![];});var obj={};for(var i=0x0;i<n-0x1;i++){var arr=Arr['shift']()['split'](':');obj[arr[0x0]]=arr[0x1]['slice'](0x0,-0x1)['split'](',');}var L=0x0;while(!![]){if(L==Object['keys'](F)['length'])break;L=Object['keys'](F)['length'];for(var k in F){if(obj['hasOwnProperty'](k)&&F[k]){obj[k]['forEach'](function(v){F[v]=!![];});F[k]=![];}}}var cnt=0x0;for(var k in F)if(obj['hasOwnProperty'](k)==![])cnt++;console['log'](cnt);}", "test_cases": [["2\ndevelopment:alice,bob,design,eve.\ndesign:carol,alice.\n3\none:another.\nanother:yetanother.\nyetanother:dave.\n3\nfriends:alice,bob,bestfriends,carol,fran,badcompany.\nbestfriends:eve,alice.\nbadcompany:dave,carol.\n5\na:b,c,d,e.\nb:c,d,e,f.\nc:d,e,f,g.\nd:e,f,g,h.\ne:f,g,h,i.\n4\naa:bb.\ncc:dd,ee.\nff:gg.\nbb:cc.\n0", "4\n1\n6\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var first=Arr.shift().split(\":\");\n   first=first[1].slice(0,-1).split(\",\");\n   var F={};\n   first.forEach(function(v){F[v]=true;});\n   var obj={};\n   for(var i=0;i<n-1;i++){\n      var arr=Arr.shift().split(\":\");\n      obj[arr[0]]=arr[1].slice(0,-1).split(\",\");\n   }\n   var L=0;\n   while(true){\n      if(L==Object.keys(F).length)break;\n      L=Object.keys(F).length;\n      for(var k in F){\n         if(obj.hasOwnProperty(k) && F[k]){\n            obj[k].forEach(function(v){F[v]=true;});\n            F[k]=false;\n         }\n      }\n   }\n   var cnt=0;\n   for(var k in F)if(obj.hasOwnProperty(k)==false)cnt++;\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 805, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var first = Arr.shift().split(\":\");\n  first = first[1].slice(0, -1).split(\",\");\n  var F = {};\n  first.forEach(function (v) {\n    F[v] = true;\n  });\n  var obj = {};\n  for (var i = 0; i < n - 1; i++) {\n    var arr = Arr.shift().split(\":\");\n    obj[arr[0]] = arr[1].slice(0, -1).split(\",\");\n  }\n  var L = 0;\n  while (true) {\n    if (L == Object.keys(F).length) {\n      break;\n    }\n    L = Object.keys(F).length;\n    for (var k in F) {\n      if (obj.hasOwnProperty(k) && F[k]) {\n        obj[k].forEach(function (v) {\n          F[v] = true;\n        });\n        F[k] = false;\n      }\n    }\n  }\n  var cnt = 0;\n  for (var k in F) {\n    if (obj.hasOwnProperty(k) == false) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5160620590356196, "ngram_match_score": 0.038420226685719656, "weighted_ngram_match_score": 0.11443560439346774, "syntax_match_score": 0.9113924050632911, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.028138577172704737, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07079646017699115, "new_decrease_halstead_effort": 0.21479583915541056}}
{"filename": "p02316_1", "type": "JavaScript", "obfuscated": "function knapsack(){var C=[];for(var i=0x0;i<=N;i++)C[i]=[];for(var i=0x0;i<=W;i++)C[0x0][i]=0x0;for(var i=0x0;i<=N;i++)C[i][0x0]=0x0;for(var i=0x1;i<=N;i++){for(var j=0x1;j<=W;j++){if(items[i]['w']<=W){if(items[i]['v']+C[i-0x1][j-items[i]['w']]>C[i-0x1][j]){C[i][j]=items[i]['v']+C[i-0x1][j-items[i]['w']];}else{C[i][j]=C[i-0x1][j];}}else{C[i][j]=C[i-0x1][j];}}}return C[N][W];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var nW=Arr['shift']()['split']('\\x20')['map'](Number);var n=nW[0x0];var W=nW[0x1];var N=0x0;var items=[null];for(var i=0x1;i<=n;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var k=0x1;do{items['push']({'v':arr[0x0]*k,'w':arr[0x1]*k});N++;k++;}while(arr[0x1]*k<=W);}var max=knapsack();console['log'](max);", "test_cases": [["4 8\n4 2\n5 2\n2 1\n8 3", "21"], ["2 20\n5 9\n4 10", "10"], ["3 9\n2 1\n3 1\n5 2", "27"]], "original": "function knapsack(){\n   var C=[];\n   for(var i=0;i<=N;i++)C[i]=[];\n   for(var i=0;i<=W;i++)C[0][i]=0;\n   for(var i=0;i<=N;i++)C[i][0]=0;\n   for(var i=1;i<=N;i++){\n      for(var j=1;j<=W;j++){\n         if(items[i].w<=W){\n            if(items[i].v+C[i-1][j-items[i].w]>C[i-1][j]){\n               C[i][j]=items[i].v+C[i-1][j-items[i].w];\n            }else{\n               C[i][j]=C[i-1][j];\n            }\n         }else{\n            C[i][j]=C[i-1][j];\n         } \n      }  \n   }\n   return C[N][W];\n}   \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar nW=(Arr.shift()).split(\" \").map(Number);\nvar n=nW[0];\nvar W=nW[1];\nvar N=0;\nvar items=[null];\nfor(var i=1;i<=n;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var k=1;\n   do{\n      items.push({v:arr[0]*k,w:arr[1]*k});\n      N++;\n      k++;\n   }while(arr[1]*k<=W);\n}\nvar max=knapsack();\nconsole.log(max);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 806, "deobfuscated": "function knapsack() {\n  var C = [];\n  for (var i = 0; i <= N; i++) {\n    C[i] = [];\n  }\n  for (var i = 0; i <= W; i++) {\n    C[0][i] = 0;\n  }\n  for (var i = 0; i <= N; i++) {\n    C[i][0] = 0;\n  }\n  for (var i = 1; i <= N; i++) {\n    for (var j = 1; j <= W; j++) {\n      if (items[i].w <= W) {\n        if (items[i].v + C[i - 1][j - items[i].w] > C[i - 1][j]) {\n          C[i][j] = items[i].v + C[i - 1][j - items[i].w];\n        } else {\n          C[i][j] = C[i - 1][j];\n        }\n      } else {\n        C[i][j] = C[i - 1][j];\n      }\n    }\n  }\n  return C[N][W];\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar nW = Arr.shift().split(\" \").map(Number);\nvar n = nW[0];\nvar W = nW[1];\nvar N = 0;\nvar items = [null];\nfor (var i = 1; i <= n; i++) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  var k = 1;\n  do {\n    items.push({\n      v: arr[0] * k,\n      w: arr[1] * k\n    });\n    N++;\n    k++;\n  } while (arr[1] * k <= W);\n}\nvar max = knapsack();\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5306741284670822, "ngram_match_score": 0.055818075066700765, "weighted_ngram_match_score": 0.20054180513826148, "syntax_match_score": 0.8663366336633663, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02468_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var nums=input['split']('\\x20')['map'](function(num){return+num;});var n=nums[0x0];var m=nums[0x1];var mod=0x1;for(var i=0x0;i<m;i++){mod=mod*n%0x3b9aca07;}console['log'](mod);", "test_cases": [["2 3", "8"], ["5 8", "390625"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar nums = input.split(' ').map(function(num){return +num;});\nvar n = nums[0];\nvar m = nums[1];\n\nvar mod = 1;\nfor (var i = 0; i < m; i++) {\n    mod = (mod * n) % 1000000007;\n}\n\nconsole.log(mod);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 807, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar nums = input.split(\" \").map(function (num) {\n  return +num;\n});\nvar n = nums[0];\nvar m = nums[1];\nvar mod = 1;\nfor (var i = 0; i < m; i++) {\n  mod = mod * n % 1000000007;\n}\nconsole.log(mod);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7816148943229383, "ngram_match_score": 0.6257825700934072, "weighted_ngram_match_score": 0.6998085208459887, "syntax_match_score": 0.8653846153846154, "dataflow_match_score": 0.9354838709677419}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02541_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const N=parseInt(input[0x0],0xa);for(var i=0x1;i>0x0;i++){var n=0.5*(Math['sqrt'](0x8*N*i+0x1)-0x1);if(Number['isInteger'](n)==!![]){console['log'](n);break;}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["11", "10"], ["20200920", "1100144"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  \n  const N = parseInt(input[0], 10);\n\n  for (var i = 1; i > 0; i++) {\n    var n = 0.5*(Math.sqrt((8*N*i)+1)-1);\n    if(Number.isInteger(n) == true){\n      console.log(n);\n      break;\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 808, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0], 10);\n  for (var i = 1; i > 0; i++) {\n    var n = (Math.sqrt(N * 8 * i + 1) - 1) * 0.5;\n    if (Number.isInteger(n) == true) {\n      console.log(n);\n      break;\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7682604504657078, "ngram_match_score": 0.6184900500183994, "weighted_ngram_match_score": 0.8463646173415079, "syntax_match_score": 0.7192982456140351, "dataflow_match_score": 0.8888888888888888}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006294421628672442, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04054054054054057, "new_decrease_halstead_effort": 0.16446909237192775}}
{"filename": "p02736_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');for(i=0x0;i<input['length'];i=i+0x2){var N=parseInt(input[i]);var a=input[i+0x1]['split']('');var aa=a['map'](Number);for(j=N;j>0x1;j--){for(k=0x0;k<j;k++){var e=Math['abs'](aa[0x0]-aa[0x1]);aa['push'](e);aa['shift']();}aa['pop']();}console['log'](aa[0x0]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1231", "1"], ["10\n2311312312", "0"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    for (i=0; i < input.length; i=i+2) {\n        var N = parseInt(input[i])\n        var a = input[i+1].split(\"\")\n        var aa = a.map(Number)\n        for (j=N; j > 1; j--) {\n            for (k=0; k < j; k++) {\n                var e = Math.abs(aa[0]-aa[1])\n                aa.push(e)\n                aa.shift()\n            }\n            aa.pop()\n        }\n        console.log(aa[0])\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 809, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  for (i = 0; i < input.length; i = i + 2) {\n    var N = parseInt(input[i]);\n    var a = input[i + 1].split(\"\");\n    var aa = a.map(Number);\n    for (j = N; j > 1; j--) {\n      for (k = 0; k < j; k++) {\n        var e = Math.abs(aa[0] - aa[1]);\n        aa.push(e);\n        aa.shift();\n      }\n      aa.pop();\n    }\n    console.log(aa[0]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7183567970570832, "ngram_match_score": 0.37882265171911766, "weighted_ngram_match_score": 0.49460453650921543, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02763_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){let n=parseInt(input[0x0]);let s=input[0x1];let q_l=parseInt(input[0x2]);let q=[];for(let j=0x0;j<q_l;j++){let kari=input[j+0x3]['trim']()['split']('\\x20');q[j]=parseInt(kari[0x0]);if(q[j]===0x1){let i=parseInt(kari[0x1]);let c=kari[0x2];let str1=s['slice'](0x0,i-0x1);let str2=s['slice'](i);s=str1+c+str2;}else{let l=parseInt(kari[0x1]);let r=parseInt(kari[0x2]);let str=s['slice'](l-0x1,r);let list={};let counter=0x0;for(let i=0x0;i<str['length'];i++){if(list[str[i]]===undefined){counter++;list[str[i]]=!![];}}console['log'](counter);}}}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7", "3\n1\n5"]], "original": "\"use strict\";\nfunction main(input) {\n  let n = parseInt(input[0]);\n  let s = input[1];\n \n  let q_l = parseInt(input[2]);\n  let q = [];\n \n  for(let j=0;j<q_l;j++){\n    let kari = input[j+3].trim().split(\" \")\n    q[j] = parseInt(kari[0]);\n    if(q[j]===1){\n      let i = parseInt(kari[1]);\n      let c = kari[2];\n      let str1 = s.slice(0, i-1);\n      let str2 = s.slice(i);\n \n      s = str1 + c + str2;\n    }else{\n      let l = parseInt(kari[1]);\n      let r = parseInt(kari[2]);\n      let str = s.slice(l-1, r);\n \n      //カウント\n      let list = {};\n      let counter = 0;\n \n      for(let i=0;i<str.length;i++){\n        if(list[str[i]]===undefined){\n          counter++;\n          list[str[i]] = true;\n        }\n      }\n      console.log(counter);\n    }\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 810, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  let n = parseInt(input[0]);\n  let s = input[1];\n  let q_l = parseInt(input[2]);\n  let q = [];\n  for (let j = 0; j < q_l; j++) {\n    let kari = input[j + 3].trim().split(\" \");\n    q[j] = parseInt(kari[0]);\n    if (q[j] === 1) {\n      let i = parseInt(kari[1]);\n      let c = kari[2];\n      let str1 = s.slice(0, i - 1);\n      let str2 = s.slice(i);\n      s = str1 + c + str2;\n    } else {\n      let l = parseInt(kari[1]);\n      let r = parseInt(kari[2]);\n      let str = s.slice(l - 1, r);\n      let list = {};\n      let counter = 0;\n      for (let i = 0; i < str.length; i++) {\n        if (list[str[i]] === undefined) {\n          counter++;\n          list[str[i]] = true;\n        }\n      }\n      console.log(counter);\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8087030100703733, "ngram_match_score": 0.5229837435387636, "weighted_ngram_match_score": 0.7118282967427294, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004847274246465361, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014851485148514865, "new_decrease_halstead_effort": 0.10010472201066245}}
{"filename": "p02775_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0];var up=0x1;var down=0x0;var nup,ndown;for(var i=0x0;i<N['length'];i++){nup=Math['min'](0x9-N[i]+up,0x1+down+(N[i]-0x0));ndown=Math['min'](0xa-N[i]+up,down+(N[i]-0x0));up=nup;down=ndown;}console['log'](down);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["36", "8"], ["91", "3"], ["314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170", "243"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0];\n  var up=1;\n  var down=0;\n  var nup,ndown;\n  for(var i=0;i<N.length;i++){\n    nup=Math.min(9-N[i]+up,1+down+(N[i]-0));\n    ndown=Math.min(10-N[i]+up,down+(N[i]-0));\n    up=nup;\n    down=ndown;\n  }\n  console.log(down);\n\n}\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n\n\n\n  \n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 811, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0];\n  var up = 1;\n  var down = 0;\n  var nup;\n  var ndown;\n  for (var i = 0; i < N.length; i++) {\n    nup = Math.min(9 - N[i] + up, 1 + down + (N[i] - 0));\n    ndown = Math.min(10 - N[i] + up, down + (N[i] - 0));\n    up = nup;\n    down = ndown;\n  }\n  console.log(down);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5205404153326073, "ngram_match_score": 0.03044190222408602, "weighted_ngram_match_score": 0.09933880672539087, "syntax_match_score": 0.9523809523809523, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00034169772879832916, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.008620689655172376, "new_decrease_halstead_effort": -0.008620689655172376}}
{"filename": "p02851_1", "type": "JavaScript", "obfuscated": "function Main(input){const k=input[0x0][0x1];const as=input[0x1]['map'](Number);const answer=as['reduce']((total,cv,ci)=>{var result=0x0;as['slice'](ci)['reduce']((pv,value,index)=>{const remainder=(pv+value)%k;if(remainder===index+0x1){result++;}return remainder;},0x0);return total+result;},null);console['log'](answer);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['map'](line=>line['split']('\\x20')));", "test_cases": [["5 4\n1 4 2 3 5", "4"], ["8 4\n4 2 4 2 4 2 4 2", "7"], ["10 7\n14 15 92 65 35 89 79 32 38 46", "8"]], "original": "function Main(input) {\n  const k = input[0][1];\n\n  /** @type {number[]} */\n  const as = input[1].map(Number);\n\n  const answer = as.reduce((total, cv, ci) => {\n    var result = 0;\n\n    as.slice(ci).reduce((pv, value, index) => {\n      const remainder = (pv + value) % k;\n\n      if (remainder === (index + 1)) {\n        result++;\n      }\n\n      return remainder;\n    }, 0);\n\n    return total + result;\n  }, null);\n\n  console.log(answer);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(line => line.split(' ')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 812, "deobfuscated": "function Main(input) {\n  const k = input[0][1];\n  const as = input[1].map(Number);\n  const answer = as.reduce((total, cv, ci) => {\n    var result = 0;\n    as.slice(ci).reduce((pv, value, index) => {\n      const remainder = (pv + value) % k;\n      if (remainder === index + 1) {\n        result++;\n      }\n      return remainder;\n    }, 0);\n    return total + result;\n  }, null);\n  console.log(answer);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(line => line.split(\" \")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8540671918835265, "ngram_match_score": 0.815564092042014, "weighted_ngram_match_score": 0.825704675492092, "syntax_match_score": 0.775, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02852_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const M=input[0x0]['split']('\\x20')[0x1]-0x0;const S=input[0x1];var cur=S['length']-0x1;var ret=[];while(cur>0x0){if(cur<=M){ret['unshift'](cur);break;}for(var i=0x0;i<M;i++){if(S[cur-M+i]==='0'){ret['unshift'](M-i);cur=cur-M+i;break;}if(i===M-0x1){console['log'](-0x1);return;}}}console['log'](ret['join']('\\x20'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["9 3\n0001000100", "1 3 2 3"], ["5 4\n011110", "-1"], ["6 6\n0101010", "6"]], "original": "\n\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  const S=input[1];\n  var cur=S.length-1;\n  var ret=[];\n  while(cur>0){\n    if(cur<=M){\n      ret.unshift(cur);\n      break;\n    }\n    for(var i=0;i<M;i++){\n      if(S[cur-M+i]==='0'){\n        ret.unshift(M-i);\n        cur=cur-M+i;\n        break;\n      }\n      if(i===M-1){\n        console.log(-1);\n        return;\n      }\n    }\n  }\n  console.log(ret.join(' '));\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 813, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const M = input[0].split(\" \")[1] - 0;\n  const S = input[1];\n  var cur = S.length - 1;\n  var ret = [];\n  while (cur > 0) {\n    if (cur <= M) {\n      ret.unshift(cur);\n      break;\n    }\n    for (var i = 0; i < M; i++) {\n      if (S[cur - M + i] === \"0\") {\n        ret.unshift(M - i);\n        cur = cur - M + i;\n        break;\n      }\n      if (i === M - 1) {\n        console.log(-1);\n        return;\n      }\n    }\n  }\n  console.log(ret.join(\" \"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5583360493220824, "ngram_match_score": 0.07401581995150727, "weighted_ngram_match_score": 0.19569201370045833, "syntax_match_score": 1.0, "dataflow_match_score": 0.9636363636363636}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02962_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const s=input[0x0];const t=input[0x1];const match=[];for(i=0x0;i<s['length'];i++){if((s+t)['slice'](i,i+t['length'])==t){match['push'](!![]);}else{match['push'](![]);}}max=0x0;for(i=0x0;i<s['length'];i++){isInf=![];now=i;getted=[];while(match[now]){getted['push'](now);now=(now+t['length'])%s['length'];if(getted['indexOf'](now)!=-0x1){isInf=!![];break;}}if(isInf){max=-0x1;break;}else{if(max<getted['length'])max=getted['length'];}}console['log'](max);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abcabab\nab", "3"], ["aa\naaaaaaa", "-1"], ["aba\nbaaab", "0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst s = input[0]\n\tconst t = input[1]\n\tconst match = []\n\tfor(i=0; i < s.length; i++){\n\t\tif((s+t).slice(i,i+t.length) == t){\n\t\t\tmatch.push(true)\n\t\t}else{\n\t\t\tmatch.push(false)\n\t\t}\n\t}\n\tmax = 0\n\tfor(i=0; i < s.length; i++){\n\t\tisInf = false\n\t\tnow = i\n\t\tgetted = []\n\t\twhile(match[now]){\n\t\t\tgetted.push(now)\n\t\t\tnow = (now + t.length) % s.length\n\t\t\tif(getted.indexOf(now) != -1){\n\t\t\t\tisInf = true\n\t\t\t\tbreak\n\t\t\t} \n\t\t}\n\t\tif(isInf){\n\t\t\tmax = -1\n\t\t\tbreak\n\t\t}else{\n\t\t\tif(max < getted.length) max = getted.length\n\t\t}\n\t}\n\tconsole.log(max)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 814, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const s = input[0];\n  const t = input[1];\n  const match = [];\n  for (i = 0; i < s.length; i++) {\n    if ((s + t).slice(i, i + t.length) == t) {\n      match.push(true);\n    } else {\n      match.push(false);\n    }\n  }\n  max = 0;\n  for (i = 0; i < s.length; i++) {\n    isInf = false;\n    now = i;\n    getted = [];\n    while (match[now]) {\n      getted.push(now);\n      now = (now + t.length) % s.length;\n      if (getted.indexOf(now) != -1) {\n        isInf = true;\n        break;\n      }\n    }\n    if (isInf) {\n      max = -1;\n      break;\n    } else if (max < getted.length) {\n      max = getted.length;\n    }\n  }\n  console.log(max);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6103993092164427, "ngram_match_score": 0.22362437030740448, "weighted_ngram_match_score": 0.29174335836164494, "syntax_match_score": 0.9262295081967213, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008862501432502112, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06060606060606055, "new_decrease_halstead_effort": 0.1688444813191371}}
{"filename": "p02964_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');input1=input[0x0]['split']('\\x20');const N=parseInt(input1[0x0]);const K=parseInt(input1[0x1]);const As=input[0x1]['split']('\\x20');var filtered=[];var results=[''];for(i=0x0;i<K;i++){for(j=0x0;j<N;j++){if(filtered['indexOf'](As[j])!=-0x1){var id=filtered['indexOf'](As[j]);filtered=filtered['slice'](0x0,id);}else{filtered['push'](As[j]);}}if(results['indexOf'](filtered['join']('\\x20'))==-0x1){results['push'](filtered['join']('\\x20'));}else{break;}}const roopstart=results['indexOf'](filtered['join']('\\x20'));if(roopstart==K){console['log'](results[roopstart]);}else{const roopId=(K-roopstart)%(results['length']-roopstart);console['log'](results[roopstart+roopId]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n1 2 3", "2 3"], ["5 10\n1 2 3 2 3", "3"], ["6 1000000000000\n1 1 2 2 3 3", ""], ["11 97\n3 1 4 1 5 9 2 6 5 3 5", "9 2 6"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tinput1 = input[0].split(\" \")\n\tconst N = parseInt(input1[0])\n\tconst K = parseInt(input1[1])\n\tconst As = input[1].split(\" \")\n\tvar filtered = []\n\tvar results = [\"\"]\n\tfor(i=0; i < K; i++){\n\t\tfor(j=0; j < N; j++){\n\t\t\tif(filtered.indexOf(As[j]) != -1){\n\t\t\t\tvar id = filtered.indexOf(As[j])\n\t\t\t\tfiltered = filtered.slice(0, id)\n\t\t\t}else{\n\t\t\t\tfiltered.push(As[j])\n\t\t\t}\n\t\t}\n\t\tif(results.indexOf(filtered.join(\" \")) == -1){\n\t\t\tresults.push(filtered.join(\" \"))\n\t\t}else{\n\t\t\tbreak\n\t\t}\n\t}\n\tconst roopstart = results.indexOf(filtered.join(\" \"))\n\tif(roopstart == K){\n\t\tconsole.log(results[roopstart])\n\t}else{\n\t\tconst roopId = (K - roopstart) % (results.length - roopstart)\n\t\tconsole.log(results[roopstart + roopId])\n\t}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 815, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  input1 = input[0].split(\" \");\n  const N = parseInt(input1[0]);\n  const K = parseInt(input1[1]);\n  const As = input[1].split(\" \");\n  var filtered = [];\n  var results = [\"\"];\n  for (i = 0; i < K; i++) {\n    for (j = 0; j < N; j++) {\n      if (filtered.indexOf(As[j]) != -1) {\n        var id = filtered.indexOf(As[j]);\n        filtered = filtered.slice(0, id);\n      } else {\n        filtered.push(As[j]);\n      }\n    }\n    if (results.indexOf(filtered.join(\" \")) == -1) {\n      results.push(filtered.join(\" \"));\n    } else {\n      break;\n    }\n  }\n  const roopstart = results.indexOf(filtered.join(\" \"));\n  if (roopstart == K) {\n    console.log(results[roopstart]);\n  } else {\n    const roopId = (K - roopstart) % (results.length - roopstart);\n    console.log(results[roopstart + roopId]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.676827579989703, "ngram_match_score": 0.31517902563386413, "weighted_ngram_match_score": 0.3921312943249478, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03007_1", "type": "JavaScript", "obfuscated": "log=console['log'];var stdin=require('fs')['readFileSync']('/dev/stdin','UTF-8');var lines=stdin['split']('\\x0a')['filter'](v=>v!=='')['map'](v=>v['split']('\\x20')['map'](Number));var N=lines[0x0];var A=lines[0x1];var processList=[];A['sort']((a,b)=>a-b);var plusList=[];var minusList=[];plusList['push'](A['pop']());minusList['push'](A['shift']());A['forEach'](v=>{v>=0x0?plusList['push'](v):minusList['push'](v);});var tmp=minusList['pop']();for(var i=0x0;i<plusList['length']-0x1;i++){var plus=plusList['pop']();processList['push'](tmp+'\\x20'+plus);tmp=tmp-plus;}var lastplus=plusList['pop']();for(var i=0x0;i<minusList['length'];i++){var minus=minusList['pop']();processList['push'](lastplus+'\\x20'+minus);lastplus=lastplus-minus;}processList['push'](lastplus+'\\x20'+tmp);log(lastplus-tmp);processList['forEach'](v=>log(v));", "test_cases": [["3\n1 -1 2", "4\n-1 1\n2 -2"], ["3\n1 1 1", "1\n1 1\n1 0"]], "original": "log = console.log;\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin\n  .split(\"\\n\")\n  .filter(v => v !== \"\")\n  .map(v => v.split(\" \").map(Number));\n\nvar N = lines[0];\nvar A = lines[1];\nvar processList = [];\n\nA.sort((a, b) => a - b);\nvar plusList = [];\nvar minusList = [];\nplusList.push(A.pop());\nminusList.push(A.shift());\n\nA.forEach(v => {\n  v >= 0 ? plusList.push(v) : minusList.push(v);\n});\n\nvar tmp = minusList.pop();\nfor (var i = 0; i < plusList.length - 1; i++) {\n  var plus = plusList.pop();\n  processList.push(tmp + \" \" + plus);\n  tmp = tmp - plus;\n}\n\nvar lastplus = plusList.pop()\nfor (var i = 0; i < minusList.length; i++) {\n  var minus = minusList.pop();\n  processList.push(lastplus + \" \" + minus);\n  lastplus = lastplus - minus;\n}\n\nprocessList.push(lastplus + \" \" + tmp)\nlog(lastplus - tmp)\nprocessList.forEach(v=>log(v))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 816, "deobfuscated": "log = console.log;\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin.split(\"\\n\").filter(v => v !== \"\").map(v => v.split(\" \").map(Number));\nvar N = lines[0];\nvar A = lines[1];\nvar processList = [];\nA.sort((a, b) => a - b);\nvar plusList = [];\nvar minusList = [];\nplusList.push(A.pop());\nminusList.push(A.shift());\nA.forEach(v => {\n  if (v >= 0) {\n    plusList.push(v);\n  } else {\n    minusList.push(v);\n  }\n});\nvar tmp = minusList.pop();\nfor (var i = 0; i < plusList.length - 1; i++) {\n  var plus = plusList.pop();\n  processList.push(tmp + \" \" + plus);\n  tmp = tmp - plus;\n}\nvar lastplus = plusList.pop();\nfor (var i = 0; i < minusList.length; i++) {\n  var minus = minusList.pop();\n  processList.push(lastplus + \" \" + minus);\n  lastplus = lastplus - minus;\n}\nprocessList.push(lastplus + \" \" + tmp);\nlog(lastplus - tmp);\nprocessList.forEach(v => log(v));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8974559603867034, "ngram_match_score": 0.8068773616755972, "weighted_ngram_match_score": 0.8320262344724433, "syntax_match_score": 0.950920245398773, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009566651318390074, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02404378523776929}}
{"filename": "p03027_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var Q=parseInt(input[0x0]);var Qs=input['slice'](0x1,Q+0x1)['map'](x=>x['split']('\\x20')['map'](y=>parseInt(y)));var ans=new Array(Q);ans['fill'](0x0);for(var i=0x0;i<Qs['length'];i++){for(var j=0x0;j<Qs[i][0x2];j++){if(j==0x0){ans[i]=Qs[i][0x0]%0xf4243;}else{ans[i]=ans[i]*(Qs[i][0x0]+j*Qs[i][0x1])%0xf4243;}}console['log'](ans[i]);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n7 2 4\n12345 67890 2019", "9009\n916936"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\");\n  \tvar Q = parseInt(input[0]);\n      var Qs = input.slice(1, Q+1).map(x => x.split(\" \").map(y => parseInt(y)));\n \tvar ans = new Array(Q);\n    ans.fill(0);\n  \tfor(var i=0; i < Qs.length; i++){\n       for(var j=0; j < Qs[i][2]; j++){\n         if(j == 0){\n           ans[i] = Qs[i][0] % 1000003;\n         }else{\n           ans[i] = ans[i]*(Qs[i][0] + j*Qs[i][1]) % 1000003;\n         }\n       }\n      console.log(ans[i]);\n    }\n }\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 817, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var Q = parseInt(input[0]);\n  var Qs = input.slice(1, Q + 1).map(x => x.split(\" \").map(y => parseInt(y)));\n  var ans = new Array(Q);\n  ans.fill(0);\n  for (var i = 0; i < Qs.length; i++) {\n    for (var j = 0; j < Qs[i][2]; j++) {\n      if (j == 0) {\n        ans[i] = Qs[i][0] % 1000003;\n      } else {\n        ans[i] = ans[i] * (Qs[i][0] + j * Qs[i][1]) % 1000003;\n      }\n    }\n    console.log(ans[i]);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7545837536951825, "ngram_match_score": 0.4501778208057549, "weighted_ngram_match_score": 0.568157193974975, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03040_1", "type": "JavaScript", "obfuscated": "'use strict';function I(t,i){this['_s']=t['split']('\\x0a'),this['_c']=0x0,this['_l']=0x0,this['_f']=i||Number;}I['prototype']['a']=function(t){var i=this['_s'][this['_l']];if(i){var s=i['trim']()['split']('\\x20'),h=s[this['_c']];return this['_c']++,s['length']===this['_c']&&(this['_c']=0x0,this['_l']++),t?t(h):this['_f'](h);}},I['prototype']['l']=function(t){var i=this['_s'][this['_l']];if(i)return this['_c']=0x0,this['_l']++,i['split']('\\x20')['map'](t||this['_f']);},module['exports']=I;function main(input){var o=new I(input);var q=o['a']();var c=0x0;var sorted=[];for(var i=0x0;i<q;i++){var q1=o['a']();if(q1===0x1){var a=o['a']();var b=o['a']();c+=b;sorted['push'](a);}else{sorted=sorted['sort']((a,b)=>a-b);var mid=sorted[Math['floor']((sorted['length']-0x1)/0x2)];var ans=sorted['map'](x=>Math['abs'](x-mid))['reduce']((acc,cur)=>acc+cur)+c;console['log'](mid,ans);}}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 4 2\n2\n1 1 -8\n2", "4 2\n1 -3"], ["4\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n2", "-1000000000 3000000000"]], "original": "\"use strict\";\nfunction I(t,i){this._s=t.split(\"\\n\"),this._c=0,this._l=0,this._f=i||Number}I.prototype.a=function(t){var i=this._s[this._l];if(i){var s=i.trim().split(\" \"),h=s[this._c];return this._c++,s.length===this._c&&(this._c=0,this._l++),t?t(h):this._f(h)}},I.prototype.l=function(t){var i=this._s[this._l];if(i)return this._c=0,this._l++,i.split(\" \").map(t||this._f)},module.exports=I;\n\nfunction main(input) {\n  var o = new I(input);\n\n  var q = o.a();\n\n  var c = 0;\n  var sorted = [];\n\n  for (var i = 0; i < q; i ++) {\n    var q1 = o.a();\n    if (q1 === 1) {\n      var a = o.a();\n      var b = o.a();\n      c += b;\n      \n      sorted.push(a);\n    } else {\n      sorted = sorted.sort((a, b) => a - b);\n      var mid = sorted[Math.floor((sorted.length - 1) / 2)];\n      var ans = sorted.map(x => Math.abs(x - mid)).reduce((acc, cur) => acc + cur) + c;\n      console.log(mid, ans);\n    }\n  }\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 818, "deobfuscated": "'use strict';\n\nfunction I(t, i) {\n  this._s = t.split(\"\\n\");\n  this._c = 0;\n  this._l = 0;\n  this._f = i || Number;\n}\nI.prototype.a = function (t) {\n  var i = this._s[this._l];\n  if (i) {\n    var s = i.trim().split(\" \");\n    var h = s[this._c];\n    this._c++;\n    if (s.length === this._c) {\n      this._c = 0;\n      this._l++;\n    }\n    if (t) {\n      return t(h);\n    } else {\n      return this._f(h);\n    }\n  }\n};\nI.prototype.l = function (t) {\n  var i = this._s[this._l];\n  if (i) {\n    this._c = 0;\n    this._l++;\n    return i.split(\" \").map(t || this._f);\n  }\n};\nmodule.exports = I;\nfunction main(input) {\n  var o = new I(input);\n  var q = o.a();\n  var c = 0;\n  var sorted = [];\n  for (var i = 0; i < q; i++) {\n    var q1 = o.a();\n    if (q1 === 1) {\n      var a = o.a();\n      var b = o.a();\n      c += b;\n      sorted.push(a);\n    } else {\n      sorted = sorted.sort((a, b) => a - b);\n      var mid = sorted[Math.floor((sorted.length - 1) / 2)];\n      var ans = sorted.map(x => Math.abs(x - mid)).reduce((acc, cur) => acc + cur) + c;\n      console.log(mid, ans);\n    }\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8079620962980711, "ngram_match_score": 0.4846721491821114, "weighted_ngram_match_score": 0.872176236010173, "syntax_match_score": 0.875, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.4516129032258065, "length_score": -0.4516129032258065, "increase_maintainability": -0.054773321311950784, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.011111111111111072, "new_decrease_halstead_effort": 0.07596977142061567}}
{"filename": "p03090_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](main());function main(){var n=o['a']();var ans=[];for(var i=0x1;i<=n;i++){for(var j=i+0x1;j<=n;j++){if(n%0x2&&i+j===n)continue;if(n%0x2===0x0&&i+j===n+0x1)continue;ans['push'](i+'\\x20'+j);}}console['log'](ans['length']);return ans['join']('\\x0a');}", "test_cases": [["3", "2\n1 3\n2 3"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var ans = [];\n  for(var i = 1; i <= n; i++){\n    for(var j = i+1; j <= n; j++){\n      if(n % 2 && i+j === n)continue;\n      if(n % 2 === 0 && i+j === n+1)continue;\n      ans.push(i+\" \"+j);\n    }\n  }\n  console.log(ans.length);\n  return ans.join(\"\\n\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 819, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(main());\nfunction main() {\n  var n = o.a();\n  var ans = [];\n  for (var i = 1; i <= n; i++) {\n    for (var j = i + 1; j <= n; j++) {\n      if (n % 2 && i + j === n) {\n        continue;\n      }\n      if (n % 2 === 0 && i + j === n + 1) {\n        continue;\n      }\n      ans.push(i + \" \" + j);\n    }\n  }\n  console.log(ans.length);\n  return ans.join(\"\\n\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5627062096060909, "ngram_match_score": 0.09691528255291233, "weighted_ngram_match_score": 0.330380144106745, "syntax_match_score": 0.8235294117647058, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.2790697674418605, "length_score": -0.2790697674418605, "increase_maintainability": -0.03857780467544525, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.032258064516129004, "new_decrease_halstead_effort": -0.05291042024484094}}
{"filename": "p03176_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=parseInt(input[0x0]);var h=input[0x1]['split']('\\x20')['map'](i=>parseInt(i));var a=input[0x2]['split']('\\x20')['map'](i=>parseInt(i));var dp=new Array(N+0x1)['fill'](0x0);var ans=0x0;for(var i=0x0;i<N;i++){var max=0x0;tmp=a[i]+dp[h[i]];for(var j=h[i];j<N+0x1;j++){if(tmp>dp[j]){dp[j]=tmp;}else{break;}}ans=Math['max'](ans,dp[h[i]]);}console['log']('%s',ans);return ans;}function debug(n){var input=document['getElementById']('input'+n)['value'];var ans=Main(input);var result='WA';if(ans==document['getElementById']('output'+n)['value']['split']('\\x0a')[0x0]){result='AC';}document['getElementById']('result'+n)['innerHTML']=result;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n3 1 4 2\n10 20 30 40", "60"], ["1\n1\n10", "10"], ["5\n1 2 3 4 5\n1000000000 1000000000 1000000000 1000000000 1000000000", "5000000000"], ["9\n4 2 5 8 3 6 1 7 9\n6 8 8 4 6 3 5 7 5", "31"]], "original": "\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var h = input[1].split(\" \").map(i => parseInt(i));\n  var a = input[2].split(\" \").map(i => parseInt(i));\n  var dp = new Array(N+1).fill(0);\n  //dp[h[0]]=a[0];\n  var ans=0;\n  for(var i=0;i<N;i++){\n    var max=0;\n    tmp=a[i]+dp[h[i]];\n    for(var j=h[i];j<N+1;j++){\n      if(tmp>dp[j]){\n        dp[j]=tmp;\n      }else{\n        break;\n      }\n\n    }\n    ans=Math.max(ans,dp[h[i]]);\n  }\n\n  console.log('%s', ans);\n  return ans;\n}\n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 820, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var h = input[1].split(\" \").map(i => parseInt(i));\n  var a = input[2].split(\" \").map(i => parseInt(i));\n  var dp = new Array(N + 1).fill(0);\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    var max = 0;\n    tmp = a[i] + dp[h[i]];\n    for (var j = h[i]; j < N + 1; j++) {\n      if (tmp > dp[j]) {\n        dp[j] = tmp;\n      } else {\n        break;\n      }\n    }\n    ans = Math.max(ans, dp[h[i]]);\n  }\n  console.log(\"%s\", ans);\n  return ans;\n}\nfunction debug(n) {\n  var input = document.getElementById(\"input\" + n).value;\n  var ans = Main(input);\n  var result = \"WA\";\n  if (ans == document.getElementById(\"output\" + n).value.split(\"\\n\")[0]) {\n    result = \"AC\";\n  }\n  document.getElementById(\"result\" + n).innerHTML = result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6967595408039369, "ngram_match_score": 0.275942030887821, "weighted_ngram_match_score": 0.5110961323279264, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010396594915573765, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.019517363671660126}}
{"filename": "p03255_1", "type": "JavaScript", "obfuscated": "var toInt=x=>parseInt(x,0xa);var toIntArr=arr=>arr['map'](x=>toInt(x));var abs=x=>x>0x0?x:-x;function min(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]<val)val=rest[i];return val;}function max(){var rest=arguments,val=rest[0x0];for(var i=0x1;i<rest['length'];i++)if(rest[i]>val)val=rest[i];return val;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function Main(input){var input=input['split']('\\x0a');var temp=toIntArr(input[0x0]['split']('\\x20'));var n=temp[0x0];var x=temp[0x1];var xs=toIntArr(input[0x1]['split']('\\x20'));var ss=[xs[0x0]];for(var i=0x1;i<n;i++){ss[i]=xs[i]+ss[i-0x1];}var ans=(n+0x1)*x;var has=0x0;for(var i=n-0x1;i>-0x1;i--){has++;if(has>0x2&&x<ss[i]*(has-0x1)*0x2-xs[i]*0x2){has=0x1;ans+=x;}ans+=xs[i]*(max(has,0x2)*0x2+0x1);}console['log'](ans);}", "test_cases": [["2 100\n1 10", "355"], ["5 1\n1 999999997 999999998 999999999 1000000000", "19999999983"], ["10 8851025\n38 87 668 3175 22601 65499 90236 790604 4290609 4894746", "150710136"], ["16 10\n1 7 12 27 52 75 731 13856 395504 534840 1276551 2356789 9384806 19108104 82684732 535447408", "3256017715"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar temp = toIntArr(input[0].split(' '));\n\tvar n = temp[0];\n\tvar x = temp[1];\n\tvar xs = toIntArr(input[1].split(' '));\n\tvar ss = [xs[0]];\n\n\tfor(var i = 1; i < n; i++){\n\t\tss[i] = xs[i] + ss[i-1];\n\t}\n\tvar ans = (n+1)*x;\n\n\tvar has = 0;\n\tfor(var i = n-1; i > -1; i--){\n\t\thas++;\n\t\tif(has>2 && x < ss[i]*(has-1)*2 - xs[i]*2){\n\t\t\thas = 1;\n\t\t\tans += x;\n\t\t}\n\t\tans += xs[i]*(max(has,2)*2 + 1);\n\t}\n\t\n\tconsole.log(ans);\n\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 821, "deobfuscated": "var toInt = x => parseInt(x, 10);\nvar toIntArr = arr => arr.map(x => toInt(x));\nvar abs = x => x > 0 ? x : -x;\nfunction min() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] < val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nfunction max() {\n  var rest = arguments;\n  var val = rest[0];\n  for (var i = 1; i < rest.length; i++) {\n    if (rest[i] > val) {\n      val = rest[i];\n    }\n  }\n  return val;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction Main(input) {\n  var input = input.split(\"\\n\");\n  var temp = toIntArr(input[0].split(\" \"));\n  var n = temp[0];\n  var x = temp[1];\n  var xs = toIntArr(input[1].split(\" \"));\n  var ss = [xs[0]];\n  for (var i = 1; i < n; i++) {\n    ss[i] = xs[i] + ss[i - 1];\n  }\n  var ans = (n + 1) * x;\n  var has = 0;\n  for (var i = n - 1; i > -1; i--) {\n    has++;\n    if (has > 2 && x < ss[i] * (has - 1) * 2 - xs[i] * 2) {\n      has = 1;\n      ans += x;\n    }\n    ans += xs[i] * (max(has, 2) * 2 + 1);\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6406449927420111, "ngram_match_score": 0.22075519968948604, "weighted_ngram_match_score": 0.4205849338801844, "syntax_match_score": 0.9375, "dataflow_match_score": 0.983739837398374}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000101874612788877, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.008230452674897082, "new_decrease_halstead_effort": -0.00823045267489686}}
{"filename": "p03277_1", "type": "JavaScript", "obfuscated": "function gets(str){this['_s']=str['split']('\\x0a');this['_y']=0x0;};gets['prototype']={'a':function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;},'l':function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);},'m':function(n,f){var s=this['_s'],y=this['_y'],r=[],i=0x0;if(f)for(;i<n;i++)r[i]=s[y+i]['split']('\\x20');else for(;i<n;i++)r[i]=s[y+i]['split']('\\x20')['map'](a=>+a);this['_y']+=n;return r;}};var o=new gets(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](main());function main(){var n=o['a']();var a=o['l']();var b=[];if(n<=0x2)return Math['max'](...a);for(var i=0x0;i<n-0x1;i++)a[n+i]=Math['max'](a[i],a[i+0x1]);return middle(a);function middle(a){a['sort']((a,b)=>a-b);return a[a['length']>>0x1];}}", "test_cases": [["3\n10 30 20", "30"], ["1\n10", "10"], ["10\n5 9 5 9 8 9 3 5 4 3", "8"]], "original": "function gets(str){\n  this._s = str.split(\"\\n\");\n  this._y = 0;\n};\ngets.prototype = {\n  a: function(f){\n    var s = this._s, y = this._y, r;\n    if(typeof s[y] === \"string\")s[y] = s[y].split(\" \").reverse();\n    r = s[y].pop();\n    if(!s[y].length)this._y++;\n    return f?r:+r;\n  },\n  l: function(f){\n    var s = this._s[this._y++].split(\" \");\n    return f?s:s.map(a=>+a);\n  },\n  m: function(n,f){\n    var s = this._s, y = this._y, r = [], i = 0;\n    if(f)for(;i < n; i++)r[i] = s[y+i].split(\" \");\n    else for(;i < n; i++)r[i] = s[y+i].split(\" \").map(a=>+a);\n    this._y += n;\n    return r;\n  },\n};\nvar o=new gets(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var a = o.l();\n  var b = [];\n  if(n <= 2)return Math.max(...a);\n  for(var i = 0; i < n-1; i++)a[n+i] = Math.max(a[i],a[i+1]);\n  return middle(a);\n\n  function middle(a){\n    a.sort((a,b)=>a-b);\n    return a[a.length>>1];\n  }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 822, "deobfuscated": "function gets(str) {\n  this._s = str.split(\"\\n\");\n  this._y = 0;\n}\n;\ngets.prototype = {\n  a: function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  },\n  l: function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  },\n  m: function (n, f) {\n    var s = this._s;\n    var y = this._y;\n    var r = [];\n    var i = 0;\n    if (f) {\n      for (; i < n; i++) {\n        r[i] = s[y + i].split(\" \");\n      }\n    } else {\n      for (; i < n; i++) {\n        r[i] = s[y + i].split(\" \").map(a => +a);\n      }\n    }\n    this._y += n;\n    return r;\n  }\n};\nvar o = new gets(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(main());\nfunction main() {\n  var n = o.a();\n  var a = o.l();\n  var b = [];\n  if (n <= 2) {\n    return Math.max(...a);\n  }\n  for (var i = 0; i < n - 1; i++) {\n    a[n + i] = Math.max(a[i], a[i + 1]);\n  }\n  return middle(a);\n  function middle(a) {\n    a.sort((a, b) => a - b);\n    return a[a.length >> 1];\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6002179724912782, "ngram_match_score": 0.19212454009703567, "weighted_ngram_match_score": 0.34553980269826556, "syntax_match_score": 0.8632075471698113, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1333333333333333, "length_score": -0.1333333333333333, "increase_maintainability": -0.023069842334831225, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03135888501742157, "new_decrease_halstead_effort": -0.00694318243481673}}
{"filename": "p03298_1", "type": "JavaScript", "obfuscated": "m=(''+require('fs')['readFileSync'](0x0))['split']`\n`;n=m[a=0x0];s=m[0x1];for(b=0x1<<n;b--;){u=0x0;for(i=n;i--;)u=b&0x1<<i?s[i]+u:u+s[i];m[u]=-~m[u];}for(b=0x1<<n;b--;){u=0x0;for(i=n;i--;)u=b&0x1<<i?s[0x2*n+~i]+u:u+s[0x2*n+~i];a+=~~m[u];}console['log'](a);", "test_cases": [["4\ncabaacba", "4"], ["11\nmippiisssisssiipsspiim", "504"], ["4\nabcdefgh", "0"], ["18\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "9075135300"]], "original": "m=(\"\"+require(\"fs\").readFileSync(0)).split`\n`;n=m[a=0];s=m[1];for(b=1<<n;b--;){u=0;for(i=n;i--;)u=b&(1<<i)?s[i]+u:u+s[i];m[u]=-~m[u]}for(b=1<<n;b--;){u=0;for(i=n;i--;)u=b&(1<<i)?s[2*n+~i]+u:u+s[2*n+~i];a+=~~m[u]}console.log(a)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 823, "deobfuscated": "m = (\"\" + require(\"fs\").readFileSync(0)).split`\n`;\nn = m[a = 0];\ns = m[1];\nfor (b = 1 << n; b--;) {\n  u = 0;\n  for (i = n; i--;) {\n    u = b & 1 << i ? s[i] + u : u + s[i];\n  }\n  m[u] = -~m[u];\n}\nfor (b = 1 << n; b--;) {\n  u = 0;\n  for (i = n; i--;) {\n    u = b & 1 << i ? s[n * 2 + ~i] + u : u + s[n * 2 + ~i];\n  }\n  a += ~~m[u];\n}\nconsole.log(a);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4368131868131868, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.7472527472527473, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03330_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');s[0x0]=s[0x0]['split']('\\x20')['map'](a=>+a);var n=s[0x0][0x0];var c=s[0x0][0x1];var d=[],a=[];for(var i=0x0;i<c;i++){d[i]=s[i+0x1]['split']('\\x20')['map'](a=>+a);}for(i=0x0;i<n;i++){a[i]=s[i+0x1+c]['split']('\\x20')['map'](a=>+a-0x1);}var z=Array(0x3)['fill'](0x0)['map'](a=>Array(c)['fill'](0x0));for(i=0x0;i<n;i++)for(var j=0x0;j<n;j++){var t=(i+j)%0x3;z[t][a[i][j]]++;}var ans=0x218711a00;for(i=0x0;i<c;i++){for(j=0x0;j<c;j++){if(i===j)continue;for(var k=0x0;k<c;k++){if(i===k||j===k)continue;t=0x0;for(var l=0x0;l<c;l++){t+=z[0x0][l]*d[l][i];t+=z[0x1][l]*d[l][j];t+=z[0x2][l]*d[l][k];}ans=Math['min'](ans,t);}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3\n0 1 1\n1 0 1\n1 4 0\n1 2\n3 3", "3"], ["4 3\n0 12 71\n81 0 53\n14 92 0\n1 1 2 1\n2 1 1 2\n2 2 1 3\n1 1 2 2", "428"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  s[0] = s[0].split(\" \").map(a=>+a);\n  var n = s[0][0];\n  var c = s[0][1];\n  var d = [], a = [];\n  for(var i = 0; i < c; i++){\n    d[i] = s[i+1].split(\" \").map(a=>+a);\n  }\n  for(i = 0; i < n; i++){\n    a[i] = s[i+1+c].split(\" \").map(a=>+a-1);\n  }\n  var z = Array(3).fill(0).map(a=>Array(c).fill(0));\n  for(i = 0; i < n; i++)\n  for(var j = 0; j < n; j++){\n    var t = (i + j) % 3;\n    z[t][a[i][j]]++;\n  }\n  var ans = 9e9;\n  for(i = 0; i < c; i++){\n    for(j = 0; j < c; j++){\n      if(i === j)continue;\n      for(var k = 0; k < c; k++){\n        if(i === k || j === k)continue;\n        t = 0;\n        for(var l = 0; l < c; l++){\n          t += z[0][l] * d[l][i];\n          t += z[1][l] * d[l][j];\n          t += z[2][l] * d[l][k];\n        }\n        ans = Math.min(ans, t);\n      }\n    }\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 824, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  s[0] = s[0].split(\" \").map(a => +a);\n  var n = s[0][0];\n  var c = s[0][1];\n  var d = [];\n  var a = [];\n  for (var i = 0; i < c; i++) {\n    d[i] = s[i + 1].split(\" \").map(a => +a);\n  }\n  for (i = 0; i < n; i++) {\n    a[i] = s[i + 1 + c].split(\" \").map(a => +a - 1);\n  }\n  var z = Array(3).fill(0).map(a => Array(c).fill(0));\n  for (i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      var t = (i + j) % 3;\n      z[t][a[i][j]]++;\n    }\n  }\n  var ans = 9000000000;\n  for (i = 0; i < c; i++) {\n    for (j = 0; j < c; j++) {\n      if (i === j) {\n        continue;\n      }\n      for (var k = 0; k < c; k++) {\n        if (i === k || j === k) {\n          continue;\n        }\n        t = 0;\n        for (var l = 0; l < c; l++) {\n          t += z[0][l] * d[l][i];\n          t += z[1][l] * d[l][j];\n          t += z[2][l] * d[l][k];\n        }\n        ans = Math.min(ans, t);\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7522246856382239, "ngram_match_score": 0.46524143180387517, "weighted_ngram_match_score": 0.6076967196160155, "syntax_match_score": 0.9359605911330049, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00017209730458334072, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.00366300366300365, "new_decrease_halstead_effort": -0.00366300366300365}}
{"filename": "p03373_1", "type": "JavaScript", "obfuscated": "'use strict';function main(s){s=s['split']('\\x0a')[0x0]['split']('\\x20')['map'](n=>Number(n));const A=s[0x0];const B=s[0x1];const C=s[0x2];const X=s[0x3];const Y=s[0x4];const min=Math['min'](X,Y);const case1=A*X+B*Y;const case2=0x2*C*min+(X-min)*A+(Y-min)*B;const case3=0x2*C*Math['max'](X,Y);const answer=Math['min'](...[case1,case2,case3]);console['log'](answer);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1500 2000 1600 3 2", "7900"], ["1500 2000 1900 3 2", "8500"], ["1500 2000 500 90000 100000", "100000000"]], "original": "'use strict'\n\nfunction main(s) {\n  s = s.split('\\n')[0].split(' ').map(n => Number(n));\n\n  const A = s[0];\n  const B = s[1];\n  const C = s[2];\n  const X = s[3];\n  const Y = s[4];\n  const min = Math.min(X, Y);\n\n  // AとBをそれぞれ買う\n  const case1 = A * X + B * Y\n\n  // ABセットで可能な限り組み替えて、残りをそれぞれ買う\n  const case2 = (2 * C * min) + ((X - min) * A) + ((Y - min) * B)\n\n  // 全てABセットで組み替える\n  const case3 = 2 * C * Math.max(X, Y);\n\n  const answer = Math.min(...[case1, case2, case3]);\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 825, "deobfuscated": "'use strict';\n\nfunction main(s) {\n  s = s.split(\"\\n\")[0].split(\" \").map(n => Number(n));\n  const A = s[0];\n  const B = s[1];\n  const C = s[2];\n  const X = s[3];\n  const Y = s[4];\n  const min = Math.min(X, Y);\n  const case1 = A * X + B * Y;\n  const case2 = C * 2 * min + (X - min) * A + (Y - min) * B;\n  const case3 = C * 2 * Math.max(X, Y);\n  const answer = Math.min(...[case1, case2, case3]);\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7700256433186878, "ngram_match_score": 0.6213681351054675, "weighted_ngram_match_score": 0.6326474816475446, "syntax_match_score": 0.8260869565217391, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010598507381979205, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.025173389673065705}}
{"filename": "p03436_1", "type": "JavaScript", "obfuscated": "'use strict';console['log'](function(args){const tmp=args['trim']()['split']('\\x0a');const HW=tmp[0x0]['split']('\\x20')['map'](v=>v|0x0);const H=HW[0x0],W=HW[0x1];const map=[Array(W+0x2)['fill'](Infinity)];let s=0x0;for(let y=0x1;y<=H;y++){map['push']([Infinity]);for(let x=0x0;x<W;x++){if(tmp[y][x]==='.'){s++;map[y]['push'](0x0);}else map[y]['push'](Infinity);}map[y]['push'](Infinity);}map['push'](Array(W+0x2)['fill'](Infinity));const dir=[[-0x1,0x0],[0x0,-0x1],[0x1,0x0],[0x0,0x1]];const queue=[[0x1,0x1,0x2]];do{const q=queue['shift']();for(const d of dir){const x=q[0x0]+d[0x0],y=q[0x1]+d[0x1];if(x===W&&y===H)return s-q[0x2];if(map[y][x]===0x0){map[y][x]=q[0x2]+0x1;queue['push']([x,y,q[0x2]+0x1]);}}}while(queue[0x0]);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3 3\n..#\n#..\n...", "2"], ["10 37\n.....................................\n...#...####...####..###...###...###..\n..#.#..#...#.##....#...#.#...#.#...#.\n..#.#..#...#.#.....#...#.#...#.#...#.\n.#...#.#..##.#.....#...#.#.###.#.###.\n.#####.####..#.....#...#..##....##...\n.#...#.#...#.#.....#...#.#...#.#...#.\n.#...#.#...#.##....#...#.#...#.#...#.\n.#...#.####...####..###...###...###..\n.....................................", "209"]], "original": "'use strict';\nconsole.log(function(args){\n  const tmp = args.trim().split('\\n');\n  const HW = tmp[0].split(' ').map(v=>v|0);\n  const H = HW[0], W = HW[1];\n  const map = [Array(W+2).fill(Infinity)]\n  let s = 0;\n  for ( let y = 1; y <= H; y++ ) {\n    map.push([Infinity]);\n    for ( let x = 0; x < W; x++ ) {\n      if ( tmp[y][x] === '.' ) {\n        s++; map[y].push( 0 );\n      } else map[y].push( Infinity );\n    }\n    map[y].push(Infinity);\n  }\n  map.push(Array(W+2).fill(Infinity));\n  const dir = [[-1,0],[0,-1],[1,0],[0,1]];\n  const queue = [[1,1,2]];\n  do {\n    const q = queue.shift();\n    for ( const d of dir ) {\n      const x = q[0] + d[0], y = q[1] + d[1];\n      if ( x === W && y === H ) return s - q[2];\n      if ( map[y][x] === 0 ) {\n        map[y][x] = q[2]+1;\n        queue.push([x,y,q[2]+1]);\n      }\n    }\n  } while ( queue[0] );\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 826, "deobfuscated": "'use strict';\n\nconsole.log(function (args) {\n  const tmp = args.trim().split(\"\\n\");\n  const HW = tmp[0].split(\" \").map(v => v | 0);\n  const H = HW[0];\n  const W = HW[1];\n  const map = [Array(W + 2).fill(Infinity)];\n  let s = 0;\n  for (let y = 1; y <= H; y++) {\n    map.push([Infinity]);\n    for (let x = 0; x < W; x++) {\n      if (tmp[y][x] === \".\") {\n        s++;\n        map[y].push(0);\n      } else {\n        map[y].push(Infinity);\n      }\n    }\n    map[y].push(Infinity);\n  }\n  map.push(Array(W + 2).fill(Infinity));\n  const dir = [[-1, 0], [0, -1], [1, 0], [0, 1]];\n  const queue = [[1, 1, 2]];\n  do {\n    const q = queue.shift();\n    for (const d of dir) {\n      const x = q[0] + d[0];\n      const y = q[1] + d[1];\n      if (x === W && y === H) {\n        return s - q[2];\n      }\n      if (map[y][x] === 0) {\n        map[y][x] = q[2] + 1;\n        queue.push([x, y, q[2] + 1]);\n      }\n    }\n  } while (queue[0]);\n}(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5919030246683911, "ngram_match_score": 0.33677071689151283, "weighted_ngram_match_score": 0.38081015484740105, "syntax_match_score": 0.8830409356725146, "dataflow_match_score": 0.7669902912621359}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0014974425147746828, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.005376344086021501, "new_decrease_halstead_effort": -0.02986007222448195}}
{"filename": "p03503_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const lines=input['split']('\\x0a');const N=parseInt(lines['shift']());const F=[];for(let i=0x0;i<N;i++){F['push'](lines[i]['split']('\\x20')['map'](x=>parseInt(x)));}const P=[];for(let i=0x0;i<N;i++){P['push'](lines[i+N]['split']('\\x20')['map'](x=>parseInt(x)));}let result=-Infinity;for(let i=0x1;i<0x400;i++){let score=0x0;for(let j=0x0;j<N;j++){let store=F[j];let p_index=(parseInt(store['join'](''),0x2)&i)['toString'](0x2)['split']('')['map'](x=>Number(x))['reduce']((a,b)=>a+b,0x0);score+=P[j][p_index];}if(score>result){result=score;}}console['log'](result);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2", "8"], ["2\n1 1 1 1 1 0 0 0 0 0\n0 0 0 0 0 1 1 1 1 1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1", "-2"], ["3\n1 1 1 1 1 1 0 0 1 1\n0 1 0 1 1 1 1 0 1 0\n1 0 1 1 0 1 0 1 0 1\n-8 6 -2 -8 -8 4 8 7 -6 2 2\n-9 2 0 1 7 -5 0 -2 -6 5 5\n6 -6 7 -9 6 -5 8 0 -9 -7 -7", "23"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n')\n  const N = parseInt( lines.shift() );\n  const F = [];\n  for(let i=0; i<N;i++){\n    F.push( lines[i].split(' ').map( x => parseInt(x) ) );\n  }\n\n  const P=[];\n  for(let i=0; i<N;i++){\n    P.push(lines[i+N].split(' ').map( x => parseInt(x)) );\n  }\n\n  let result = -Infinity;\n  for(let i=1; i<1024;i++){\n    let score = 0;\n    for(let j=0; j<N;j++){\n      let store = F[j];\n      let p_index = (parseInt(store.join(''), 2) & i).toString(2).split('').map(x=>Number(x)).reduce((a,b)=>a+b,0)\n      score += P[j][p_index];\n    }\n    if(score > result){result = score;}\n  }\n\n  console.log(result);\n}\n\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 827, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const lines = input.split(\"\\n\");\n  const N = parseInt(lines.shift());\n  const F = [];\n  for (let i = 0; i < N; i++) {\n    F.push(lines[i].split(\" \").map(x => parseInt(x)));\n  }\n  const P = [];\n  for (let i = 0; i < N; i++) {\n    P.push(lines[i + N].split(\" \").map(x => parseInt(x)));\n  }\n  let result = -Infinity;\n  for (let i = 1; i < 1024; i++) {\n    let score = 0;\n    for (let j = 0; j < N; j++) {\n      let store = F[j];\n      let p_index = (parseInt(store.join(\"\"), 2) & i).toString(2).split(\"\").map(x => Number(x)).reduce((a, b) => a + b, 0);\n      score += P[j][p_index];\n    }\n    if (score > result) {\n      result = score;\n    }\n  }\n  console.log(result);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.606373383445541, "ngram_match_score": 0.17622803063990472, "weighted_ngram_match_score": 0.2742655031422595, "syntax_match_score": 1.0, "dataflow_match_score": 0.975}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03651_1", "type": "JavaScript", "obfuscated": "'use strict';const getGcd=(a,b)=>{return a?getGcd(b%a,a):b;};const main=arg=>{arg=arg['trim']()['split']('\\x0a');const N=parseInt(arg[0x0]['split']('\\x20')[0x0]);const K=parseInt(arg[0x0]['split']('\\x20')[0x1]);let A=arg[0x1]['split']('\\x20')['map'](n=>parseInt(n))['sort']((a,b)=>b-a);const max=A[0x0];let gcd=Infinity;if(max<K){console['log']('IMPOSSIBLE');return;}for(let i=0x0;i<N;i++){for(let j=i+0x1;j<N;j++){gcd=Math['min'](gcd,getGcd(A[i],A[j]));}}console['log'](K%gcd===0x0?'POSSIBLE':'IMPOSSIBLE');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 7\n9 3 4", "POSSIBLE"], ["3 5\n6 9 3", "IMPOSSIBLE"], ["4 11\n11 3 7 15", "POSSIBLE"], ["5 12\n10 2 8 6 4", "IMPOSSIBLE"]], "original": "\"use strict\";\n    \nconst getGcd = (a, b) => {\n    return a ? getGcd(b % a, a) : b;\n}\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n    \n    let A = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>b-a);\n    \n    const max = A[0];\n    let   gcd = Infinity;\n    \n    if(max < K) {\n        console.log(\"IMPOSSIBLE\");\n        return;\n    }\n    \n    for(let i=0; i<N; i++) {\n        for(let j=i+1; j<N; j++) {\n            gcd = Math.min(gcd, getGcd(A[i], A[j]));\n        }\n    }\n    \n    console.log(K % gcd === 0 ? \"POSSIBLE\" : \"IMPOSSIBLE\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 828, "deobfuscated": "'use strict';\n\nconst getGcd = (a, b) => {\n  if (a) {\n    return getGcd(b % a, a);\n  } else {\n    return b;\n  }\n};\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0].split(\" \")[0]);\n  const K = parseInt(arg[0].split(\" \")[1]);\n  let A = arg[1].split(\" \").map(n => parseInt(n)).sort((a, b) => b - a);\n  const max = A[0];\n  let gcd = Infinity;\n  if (max < K) {\n    console.log(\"IMPOSSIBLE\");\n    return;\n  }\n  for (let i = 0; i < N; i++) {\n    for (let j = i + 1; j < N; j++) {\n      gcd = Math.min(gcd, getGcd(A[i], A[j]));\n    }\n  }\n  console.log(K % gcd === 0 ? \"POSSIBLE\" : \"IMPOSSIBLE\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7868528938525636, "ngram_match_score": 0.5207939078566385, "weighted_ngram_match_score": 0.6830692804568415, "syntax_match_score": 0.9435483870967742, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03821_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=+s[0x0];for(var i=0x0;i<n;i++){s[i]=s[i+0x1]['split']('\\x20')['map'](a=>+a);}var ans=0x0;for(i=n-0x1;i>=0x0;i--){var x=(s[i][0x0]+ans)%s[i][0x1];if(x)ans+=s[i][0x1]-x;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n3 5\n2 7\n9 4", "7"], ["7\n3 1\n4 1\n5 9\n2 6\n5 3\n5 8\n9 7", "22"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  for(var i = 0; i < n; i++){\n    s[i] = s[i+1].split(\" \").map(a=>+a);\n  }\n  var ans = 0;\n  for(i = n-1; i >= 0; i--){\n    var x = (s[i][0] + ans) % s[i][1];\n    if(x)ans += s[i][1] - x;\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 829, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  for (var i = 0; i < n; i++) {\n    s[i] = s[i + 1].split(\" \").map(a => +a);\n  }\n  var ans = 0;\n  for (i = n - 1; i >= 0; i--) {\n    var x = (s[i][0] + ans) % s[i][1];\n    if (x) {\n      ans += s[i][1] - x;\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7170112635765187, "ngram_match_score": 0.40301658814747215, "weighted_ngram_match_score": 0.5439758345796551, "syntax_match_score": 0.9210526315789473, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03838_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');l=inp['shift']()['split']('\\x20');x=l[0x0]*0x1;y=l[0x1]*0x1;cnt=0x0;if(x==y){}else if(Math['abs'](x)==Math['abs'](y)){cnt++;}else if(x==0x0||y==0x0){if(y<x){cnt++;}cnt+=Math['abs'](Math['abs'](x)-Math['abs'](y));}else{if(x>y){if(x>0x0&&y>0x0){cnt+=0x2;}else if(x>0x0&&y<0x0){cnt+=0x1;}else{cnt+=0x2;}}else{if(x<0x0&&y>0x0){cnt+=0x1;}}cnt+=Math['abs'](Math['abs'](x)-Math['abs'](y));}console['log'](cnt);", "test_cases": [["10 20", "10"], ["10 -10", "1"], ["-10 -20", "12"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nx = l[0] * 1\ny = l[1] * 1 \ncnt = 0\nif (x == y) {\n    \n} else if (Math.abs(x) == Math.abs(y)) {\n    cnt++\n} else if (x == 0 || y == 0) {\n    if (y < x) {\n        cnt++\n    }\n    cnt += Math.abs(Math.abs(x) - Math.abs(y))\n} else {\n    if (x > y) {\n        if (x > 0 && y > 0) {\n            cnt += 2\n        } else if (x > 0 && y < 0) {\n            cnt += 1\n        } else {\n            cnt += 2\n        }\n    } else {\n        if (x < 0 && y > 0) {\n            cnt += 1\n        }\n    }\n    cnt += Math.abs(Math.abs(x) - Math.abs(y))\n}\nconsole.log(cnt)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 830, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nl = inp.shift().split(\" \");\nx = l[0] * 1;\ny = l[1] * 1;\ncnt = 0;\nif (x == y) {} else if (Math.abs(x) == Math.abs(y)) {\n  cnt++;\n} else if (x == 0 || y == 0) {\n  if (y < x) {\n    cnt++;\n  }\n  cnt += Math.abs(Math.abs(x) - Math.abs(y));\n} else {\n  if (x > y) {\n    if (x > 0 && y > 0) {\n      cnt += 2;\n    } else if (x > 0 && y < 0) {\n      cnt += 1;\n    } else {\n      cnt += 2;\n    }\n  } else if (x < 0 && y > 0) {\n    cnt += 1;\n  }\n  cnt += Math.abs(Math.abs(x) - Math.abs(y));\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8053338932485958, "ngram_match_score": 0.6484163803026864, "weighted_ngram_match_score": 0.6581905105211542, "syntax_match_score": 0.9147286821705426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03890_1", "type": "JavaScript", "obfuscated": "function Main(input){var data=input['split']('\\x0a');var n=data[0x0];var a=data['slice'](0x1);for(var i=0x0;i<n;++i){var b=[];for(var j=0x0;j<a['length'];j+=0x2){if(a[j]>a[j+0x1]){b['push'](a[j]-a[j+0x1]);}else if(a[j]==a[j+0x1]){b['push'](a[j]);}else{b['push'](a[j+0x1]-a[j]);}}a=b;}console['log'](a[0x0]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1\n3\n10\n19", "7"], ["3\n1\n3\n2\n4\n6\n8\n100\n104", "2"]], "original": "function Main(input) {\n\tvar data = input.split(\"\\n\")\n\tvar n = data[0]\n\tvar a = data.slice(1)\n\t\n\tfor (var i = 0; i < n; ++i) {\n\t\tvar b = []\n\t\tfor (var j = 0; j < a.length; j += 2) {\n\t\t\tif (a[j] > a[j + 1]) {\n\t\t\t\tb.push(a[j] - a[j + 1])\n\t\t\t} else if (a[j] == a[j + 1]) {\n\t\t\t\tb.push(a[j])\n\t\t\t} else {\n\t\t\t\tb.push(a[j + 1] - a[j])\n\t\t\t}\n\t\t}\n\t\ta = b\n\t}\n\t\n\tconsole.log(a[0])\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 831, "deobfuscated": "function Main(input) {\n  var data = input.split(\"\\n\");\n  var n = data[0];\n  var a = data.slice(1);\n  for (var i = 0; i < n; ++i) {\n    var b = [];\n    for (var j = 0; j < a.length; j += 2) {\n      if (a[j] > a[j + 1]) {\n        b.push(a[j] - a[j + 1]);\n      } else if (a[j] == a[j + 1]) {\n        b.push(a[j]);\n      } else {\n        b.push(a[j + 1] - a[j]);\n      }\n    }\n    a = b;\n  }\n  console.log(a[0]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8592136782995634, "ngram_match_score": 0.7145605045420571, "weighted_ngram_match_score": 0.7222942086561965, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03909_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const H=parseInt(arg[0x0]['split']('\\x20')[0x0]);const W=parseInt(arg[0x0]['split']('\\x20')[0x1]);const words=arg['slice'](0x1,H+0x1)['map'](s=>s['split']('\\x20'));const alpha='ABCDEFGHIJ'['split']('');for(let i=0x0;i<H;i++){for(let j=0x0;j<W;j++){if(words[i][j]==='snuke'){console['log'](alpha[j]+(i+0x1));return;}}}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["15 10\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snuke snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake", "H6"], ["1 1\nsnuke", "A1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const H = parseInt(arg[0].split(\" \")[0]);\n    const W = parseInt(arg[0].split(\" \")[1]);\n    \n    const words = arg.slice(1, H + 1).map(s=>s.split(\" \"));\n    const alpha = \"ABCDEFGHIJ\".split(\"\");\n    \n    for(let i=0; i<H; i++) {\n        for(let j=0; j<W; j++) {\n            if(words[i][j] === \"snuke\") {\n                console.log(alpha[j] + (i + 1));\n                return;\n            }\n        }\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 832, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const H = parseInt(arg[0].split(\" \")[0]);\n  const W = parseInt(arg[0].split(\" \")[1]);\n  const words = arg.slice(1, H + 1).map(s => s.split(\" \"));\n  const alpha = \"ABCDEFGHIJ\".split(\"\");\n  for (let i = 0; i < H; i++) {\n    for (let j = 0; j < W; j++) {\n      if (words[i][j] === \"snuke\") {\n        console.log(alpha[j] + (i + 1));\n        return;\n      }\n    }\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8083903916442408, "ngram_match_score": 0.5488517310491821, "weighted_ngram_match_score": 0.6847098355277809, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03970_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']();var output=0x0;var seijou='CODEFESTIVAL2016';for(var i=0x0;i<input['length'];i++){var tmp1=input['slice'](i,i+0x1);var tmp2=seijou['slice'](i,i+0x1);if(tmp1!=tmp2){output++;}}console['log'](output);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["C0DEFESTIVAL2O16", "2"], ["FESTIVAL2016CODE", "16"]], "original": "function Main(input) {\n\tinput = input.trim();\n  var output = 0;\n  var seijou = \"CODEFESTIVAL2016\";\n  for(var i = 0; i < input.length; i++){\n    var tmp1 = input.slice(i,i+1);\n    var tmp2 = seijou.slice(i,i+1);\n    if(tmp1 != tmp2){\n       output++;\n       }\n  }\n  \n  console.log(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 833, "deobfuscated": "function Main(input) {\n  input = input.trim();\n  var output = 0;\n  var seijou = \"CODEFESTIVAL2016\";\n  for (var i = 0; i < input.length; i++) {\n    var tmp1 = input.slice(i, i + 1);\n    var tmp2 = seijou.slice(i, i + 1);\n    if (tmp1 != tmp2) {\n      output++;\n    }\n  }\n  console.log(output);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7942999175310168, "ngram_match_score": 0.5167530248231927, "weighted_ngram_match_score": 0.6604466453008743, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03971_1", "type": "JavaScript", "obfuscated": "'use strict';const Main=input=>{const tmp=input['trim']()['split']('\\x0a');const N=parseInt(tmp[0x0]['split']('\\x20')[0x0]);const A=parseInt(tmp[0x0]['split']('\\x20')[0x1]);const B=parseInt(tmp[0x0]['split']('\\x20')[0x2]);const S=tmp[0x1];let result=[];let count=0x0;let overseas=0x0;for(let i=0x0;i<N;i++){const participant=S['split']('')[i];if(participant==='a'){if(count<A+B){result['push']('Yes');count+=0x1;}else{result['push']('No');}}else if(participant==='b'){if(count<A+B&&overseas<B){result['push']('Yes');count+=0x1;overseas+=0x1;}else{result['push']('No');}}else{result['push']('No');}}result=result['join']('\\x0a');console['log'](result);return result;};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 2 3\nabccabaabb", "Yes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nNo"], ["12 5 2\ncabbabaacaba", "No\nYes\nYes\nYes\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nNo"], ["5 2 2\nccccc", "No\nNo\nNo\nNo\nNo"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const N = parseInt(tmp[0].split(' ')[0])\n  const A = parseInt(tmp[0].split(' ')[1])\n  const B = parseInt(tmp[0].split(' ')[2])\n  const S = tmp[1]\n  //a 国内\n  //b 海外\n  //c どちらでもない\n\n  let result = []\n  let count = 0\n  let overseas = 0\n\n  for (let i = 0; i < N; i++) {\n    const participant = S.split('')[i]\n    if (participant === 'a') {\n      if (count < (A + B)) {\n        result.push('Yes')\n        count += 1\n      } else {\n        result.push('No')\n      }\n    } else if (participant === 'b') {\n      if (count < (A + B) && overseas < B) {\n        result.push('Yes')\n        count += 1\n        overseas += 1\n      } else {\n        result.push('No')\n      }\n    } else {\n      result.push('No')\n    }\n  }\n  result = result.join('\\n')\n\n  console.log(result)\n  return result\n}\n\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 834, "deobfuscated": "'use strict';\n\nconst Main = input => {\n  const tmp = input.trim().split(\"\\n\");\n  const N = parseInt(tmp[0].split(\" \")[0]);\n  const A = parseInt(tmp[0].split(\" \")[1]);\n  const B = parseInt(tmp[0].split(\" \")[2]);\n  const S = tmp[1];\n  let result = [];\n  let count = 0;\n  let overseas = 0;\n  for (let i = 0; i < N; i++) {\n    const participant = S.split(\"\")[i];\n    if (participant === \"a\") {\n      if (count < A + B) {\n        result.push(\"Yes\");\n        count += 1;\n      } else {\n        result.push(\"No\");\n      }\n    } else if (participant === \"b\") {\n      if (count < A + B && overseas < B) {\n        result.push(\"Yes\");\n        count += 1;\n        overseas += 1;\n      } else {\n        result.push(\"No\");\n      }\n    } else {\n      result.push(\"No\");\n    }\n  }\n  result = result.join(\"\\n\");\n  console.log(result);\n  return result;\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4932073767328846, "ngram_match_score": 0.3662035920571295, "weighted_ngram_match_score": 0.38074530679135365, "syntax_match_score": 0.8580645161290322, "dataflow_match_score": 0.367816091954023}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00032_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split']('\\x0a');var line;var rectangles=0x0;var lozenges=0x0;while(line=lines['shift']()){var l=line['split'](',')['map'](function(n){return+n;});var a=l[0x0];var b=l[0x1];var c=l[0x2];if(a*a+b*b==c*c)rectangles++;else if(a==b)lozenges++;}console['log'](rectangles);console['log'](lozenges);", "test_cases": [["3,4,5\n5,5,8\n4,4,4\n5,4,3", "1\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n\nvar line;\nvar rectangles = 0;\nvar lozenges = 0;\nwhile (line = lines.shift()) {\n\tvar l = line.split(',').map(function(n){return +n;});\n\tvar a = l[0];\n\tvar b = l[1];\n\tvar c = l[2];\n\n\tif (a * a + b * b == c * c)\n\t\trectangles++;\n\telse if (a == b)\n\t\tlozenges++;\n}\nconsole.log(rectangles);\nconsole.log(lozenges);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 835, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(\"\\n\");\nvar line;\nvar rectangles = 0;\nvar lozenges = 0;\nwhile (line = lines.shift()) {\n  var l = line.split(\",\").map(function (n) {\n    return +n;\n  });\n  var a = l[0];\n  var b = l[1];\n  var c = l[2];\n  if (a * a + b * b == c * c) {\n    rectangles++;\n  } else if (a == b) {\n    lozenges++;\n  }\n}\nconsole.log(rectangles);\nconsole.log(lozenges);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8390346874522103, "ngram_match_score": 0.6786252468630267, "weighted_ngram_match_score": 0.7742962033677556, "syntax_match_score": 0.9240506329113924, "dataflow_match_score": 0.9791666666666666}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00045_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var sum=0x0;var cnt=0x0;Arr['forEach'](function(v){var arr=v['split'](',')['map'](Number);sum+=arr[0x0]*arr[0x1];cnt+=arr[0x1];});console['log'](sum);console['log'](Math['round'](cnt/Arr['length']));", "test_cases": [["100,20\n50,10\n70,35", "4950\n22"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar sum=0;\nvar cnt=0;\n\nArr.forEach(function(v){\nvar arr=v.split(\",\").map(Number);\nsum+=arr[0]*arr[1];\ncnt+=arr[1];\n});\n\nconsole.log(sum);\nconsole.log(Math.round(cnt/Arr.length));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 836, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar sum = 0;\nvar cnt = 0;\nArr.forEach(function (v) {\n  var arr = v.split(\",\").map(Number);\n  sum += arr[0] * arr[1];\n  cnt += arr[1];\n});\nconsole.log(sum);\nconsole.log(Math.round(cnt / Arr.length));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5053777867230327, "ngram_match_score": 0.0361266876730062, "weighted_ngram_match_score": 0.08215865276751166, "syntax_match_score": 0.9032258064516129, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00052_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a')['map'](function(i){j=+i,s=0x0;if(j){while(j=~~(j/0x5))s+=j;console['log'](s);}});", "test_cases": [["2\n12\n10000\n0", "0\n2\n2499"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').map(function(i){j=+i,s=0;if(j){while(j=~~(j/5))s+=j;console.log(s)}})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 838, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\").map(function (i) {\n  j = +i;\n  s = 0;\n  if (j) {\n    while (j = ~~(j / 5)) {\n      s += j;\n    }\n    console.log(s);\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4329268292682927, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.7317073170731707, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.16666666666666674, "length_score": -0.16666666666666674, "increase_maintainability": -0.024354421180570518, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00105_1", "type": "JavaScript", "obfuscated": "var d=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');var info=line='';var map=[];while(line=d['shift']()){info=line['split']('\\x20');map['push']([info[0x0],+info[0x1]]);}map['sort'](function(a,b){if(a[0x0]<b[0x0])return-0x1;if(a[0x0]>b[0x0])return 0x1;if(a[0x1]<b[0x1])return-0x1;if(a[0x1]>b[0x1])return 0x1;return 0x0;});var word='';var pages=[];map['forEach'](function(info,i){if(word!==info[0x0]){if(i!==0x0){console['log'](pages['join']('\\x20'));pages=[];}console['log'](info[0x0]);}pages['push'](info[0x1]);word=info[0x0];});console['log'](pages['join']('\\x20'));", "test_cases": [["style 12\neven 25\nintroduction 3\neasy 9\nstyle 7\ndocument 13\nstyle 21\neven 18", "document\n13\neasy\n9\neven\n18 25\nintroduction\n3\nstyle\n7 12 21"]], "original": "var d = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nvar info = line = '';\nvar map = [];\n\nwhile (line = d.shift()) {\n  info = line.split(' ');\n  map.push([info[0], +info[1]]);\n}\nmap.sort(function(a, b) {\n  if (a[0] < b[0]) return -1;\n  if (a[0] > b[0]) return 1;\n  if (a[1] < b[1]) return -1;\n  if (a[1] > b[1]) return 1;\n  return 0;\n});\n\nvar word = '';\nvar pages = [];\nmap.forEach(function(info, i) {\n  if (word !== info[0]) {\n    if (i !== 0) {\n      console.log(pages.join(' '));\n      pages = [];\n    }\n    console.log(info[0]);\n  }\n  pages.push(info[1]);\n  word = info[0];\n});\nconsole.log(pages.join(' '));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 839, "deobfuscated": "var d = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nvar info = line = \"\";\nvar map = [];\nwhile (line = d.shift()) {\n  info = line.split(\" \");\n  map.push([info[0], +info[1]]);\n}\nmap.sort(function (a, b) {\n  if (a[0] < b[0]) {\n    return -1;\n  }\n  if (a[0] > b[0]) {\n    return 1;\n  }\n  if (a[1] < b[1]) {\n    return -1;\n  }\n  if (a[1] > b[1]) {\n    return 1;\n  }\n  return 0;\n});\nvar word = \"\";\nvar pages = [];\nmap.forEach(function (info, i) {\n  if (word !== info[0]) {\n    if (i !== 0) {\n      console.log(pages.join(\" \"));\n      pages = [];\n    }\n    console.log(info[0]);\n  }\n  pages.push(info[1]);\n  word = info[0];\n});\nconsole.log(pages.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7724597423155906, "ngram_match_score": 0.5476578944082633, "weighted_ngram_match_score": 0.6168079405257405, "syntax_match_score": 0.9253731343283582, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00179_1", "type": "JavaScript", "obfuscated": "function BFS(x){var obj={};var bfs=[[x,0x0]];obj[x]=!![];while(!![]){if(bfs['length']==0x0){ans='NA';break;}var leaf=bfs['shift']();var str=leaf[0x0];var cnt=leaf[0x1];if(/^0+$|^1+$|^2+$/['test'](str)){ans=cnt;break;}for(var i=0x0;i<str['length']-0x1;i++){if(str[i]==str[i+0x1])continue;var arr=str['split']('');var color=0x3-+arr[i]-+arr[i+0x1];arr[i]=color;arr[i+0x1]=color;var Str=arr['join']('');if(obj['hasOwnProperty'](Str)==![]){bfs['push']([Str,cnt+0x1]);obj[Str]=!![];}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var rgb=Arr['shift']();if(rgb=='0')break;rgb=rgb['replace'](/r/g,'0')['replace'](/g/g,'1')['replace'](/b/g,'2');var ans;BFS(rgb);console['log'](ans);}", "test_cases": [["rbgrg\nrbbgbbr\nbgr\nbgrbrgbr\nbggrgbgrr\ngbrggrbggr\nrrrrr\nbgbr\n0", "5\n7\n1\n6\nNA\n8\n0\n4"]], "original": "function BFS(x){\n   var obj={};\n   var bfs=[[x,0]];\n   obj[x]=true;\n   while(true){\n      if(bfs.length==0){ans=\"NA\";break;}\n      var leaf=bfs.shift();\n      var str=leaf[0];\n      var cnt=leaf[1];\n      if(/^0+$|^1+$|^2+$/.test(str)){ans=cnt;break;}\n      for(var i=0;i<str.length-1;i++){\n         if(str[i]==str[i+1])continue;\n         var arr=str.split(\"\");\n         var color=3-(+arr[i])-(+arr[i+1]);\n         arr[i]=color;\n         arr[i+1]=color;\n         var Str=arr.join(\"\");\n         if(obj.hasOwnProperty(Str)==false){\n            bfs.push([Str,cnt+1]);\n            obj[Str]=true;\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var rgb=Arr.shift();\n   if(rgb==\"0\")break;\n   rgb=rgb.replace(/r/g,\"0\").replace(/g/g,\"1\").replace(/b/g,\"2\")\n   var ans;\n   BFS(rgb);\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 840, "deobfuscated": "function BFS(x) {\n  var obj = {};\n  var bfs = [[x, 0]];\n  obj[x] = true;\n  while (true) {\n    if (bfs.length == 0) {\n      ans = \"NA\";\n      break;\n    }\n    var leaf = bfs.shift();\n    var str = leaf[0];\n    var cnt = leaf[1];\n    if (/^0+$|^1+$|^2+$/.test(str)) {\n      ans = cnt;\n      break;\n    }\n    for (var i = 0; i < str.length - 1; i++) {\n      if (str[i] == str[i + 1]) {\n        continue;\n      }\n      var arr = str.split(\"\");\n      var color = 3 - +arr[i] - +arr[i + 1];\n      arr[i] = color;\n      arr[i + 1] = color;\n      var Str = arr.join(\"\");\n      if (obj.hasOwnProperty(Str) == false) {\n        bfs.push([Str, cnt + 1]);\n        obj[Str] = true;\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var rgb = Arr.shift();\n  if (rgb == \"0\") {\n    break;\n  }\n  rgb = rgb.replace(/r/g, \"0\").replace(/g/g, \"1\").replace(/b/g, \"2\");\n  var ans;\n  BFS(rgb);\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5434923360764163, "ngram_match_score": 0.07143376641094822, "weighted_ngram_match_score": 0.23348795884709786, "syntax_match_score": 0.8690476190476191, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008060788655599671, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06008583690987124, "new_decrease_halstead_effort": 0.14426798613831815}}
{"filename": "p00205_1", "type": "JavaScript", "obfuscated": "function main(){var hands,pattern,swap,i=0x0,j;for(;;){if(input[i]==0x0)break;hands=[];for(j=0x0;j<0x5;j++){hands['push'](Number(input[i++]));}pattern=hands['reduce'](function(pat,h){return pat[h]=!![],pat;},{});keys=Object['keys'](pattern)['map'](Number)['sort'](function(x,y){return x-y;});if(keys['length']===0x2){if(keys[0x1]-keys[0x0]==0x2){swap=keys[0x0];keys[0x0]=keys[0x1];keys[0x1]=swap;}hands['forEach'](function(h){console['log'](keys['indexOf'](h)+0x1);});}else{hands['forEach'](function(){console['log'](0x3);});}}}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["1\n2\n3\n2\n1\n1\n2\n2\n2\n1\n0", "3\n3\n3\n3\n3\n1\n2\n2\n2\n1"]], "original": "function main() {\n  var\n  hands, pattern,\n  swap,\n  i = 0, j;\n  for (;;) {\n    if (input[i] == 0) break;\n    \n    \n    hands = [];\n    for (j = 0; j < 5; j++) {\n      hands.push(Number(input[i++]));\n    }\n    \n    pattern = hands.reduce(function (pat, h) {\n      return (pat[h] = true, pat);\n    }, {});\n    \n    keys = Object.keys(pattern).map(Number).sort(function (x, y) { return x - y; });\n    \n    if (keys.length === 2) {\n      if (keys[1] - keys[0] == 2) {\n        swap = keys[0];\n        keys[0] = keys[1];\n        keys[1] = swap;\n      }\n      hands.forEach(function (h) {\n        console.log(keys.indexOf(h) + 1);\n      });\n    } else {\n      hands.forEach(function () {\n        console.log(3);\n      });\n    }\n  }\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 841, "deobfuscated": "function main() {\n  var hands;\n  var pattern;\n  var swap;\n  var i = 0;\n  var j;\n  while (true) {\n    if (input[i] == 0) {\n      break;\n    }\n    hands = [];\n    for (j = 0; j < 5; j++) {\n      hands.push(Number(input[i++]));\n    }\n    pattern = hands.reduce(function (pat, h) {\n      pat[h] = true;\n      return pat;\n    }, {});\n    keys = Object.keys(pattern).map(Number).sort(function (x, y) {\n      return x - y;\n    });\n    if (keys.length === 2) {\n      if (keys[1] - keys[0] == 2) {\n        swap = keys[0];\n        keys[0] = keys[1];\n        keys[1] = swap;\n      }\n      hands.forEach(function (h) {\n        console.log(keys.indexOf(h) + 1);\n      });\n    } else {\n      hands.forEach(function () {\n        console.log(3);\n      });\n    }\n  }\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7721722886891513, "ngram_match_score": 0.6922010862560356, "weighted_ngram_match_score": 0.7423214018339034, "syntax_match_score": 0.8875, "dataflow_match_score": 0.7666666666666667}, "code_complexity": {"difference_score": 0.02941176470588225, "length_score": -0.02941176470588225, "increase_maintainability": -0.008104218141404496, "new_decrease_cyclomatic": -0.19999999999999996, "new_decrease_halstead_len": -0.010204081632652962, "new_decrease_halstead_effort": -0.019734308817866753}}
{"filename": "p00277_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var nrl=arr['shift']()['split']('\\x20')['map'](Number);var n=nrl[0x0];var L=nrl[0x2];var t=[];var max=[0x0,0x0];var time=0x0;for(var i=0x0;i<n;i++)t[i]=[0x0,0x0,i];arr['push']([0x1,L,0x0]['join']('\\x20'));arr['forEach'](function(v){v=v['split']('\\x20')['map'](Number);var d=v[0x0]-0x1;var T=v[0x1];var x=v[0x2];t[max[0x0]][0x1]+=T-time;time=T;t[d][0x0]+=x;if(x>0x0){if(t[d][0x0]>max[0x1])max=[d,t[d][0x0]];else if(t[d][0x0]==max[0x1]&&d<=max[0x0])max=[d,t[d][0x0]];}if(x<0x0){var MAX=0x0;var m=0x0;t['forEach'](function(V,index){if(MAX<V[0x0])m=index;});max=[m,t[m][0x0]];}});t['sort'](function(a,b){if(a[0x1]==b[0x1])return a[0x2]-b[0x2];else return b[0x1]-a[0x1];});console['log'](t[0x0][0x2]+0x1);", "test_cases": [["3 4 600\n3 100 5\n1 200 10\n2 400 20\n3 500 20", "1"], ["3 5 600\n3 100 5\n1 200 10\n2 300 30\n1 400 -8\n2 400 -27", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\n\nvar arr=input.trim().split(\"\\n\");\nvar nrl=arr.shift().split(\" \").map(Number);\nvar n=nrl[0];\nvar L=nrl[2];\nvar t=[];\nvar max=[0,0];\nvar time=0;\nfor(var i=0;i<n;i++)t[i]=[0,0,i];\narr.push([1,L,0].join(\" \"));\narr.forEach(function(v){\nv=v.split(\" \").map(Number);\nvar d=v[0]-1;\nvar T=v[1];\nvar x=v[2];\n\nt[max[0]][1]+=T-time;\ntime=T;\nt[d][0]+=x;\n\nif(x>0){\nif(t[d][0]>max[1])max=[d,t[d][0]];\nelse if(t[d][0]==max[1] && d<=max[0])max=[d,t[d][0]];\n}\n\nif(x<0){\nvar MAX=0;\nvar m=0;\nt.forEach(function(V,index){\nif(MAX<V[0])m=index;\n});\n\nmax=[m,t[m][0]];\n\n\n}\n\n\n});\n\n\n\nt.sort(function(a,b){\nif(a[1]==b[1])return a[2]-b[2];\nelse return b[1]-a[1];});\n\n\nconsole.log(t[0][2]+1);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 842, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar nrl = arr.shift().split(\" \").map(Number);\nvar n = nrl[0];\nvar L = nrl[2];\nvar t = [];\nvar max = [0, 0];\nvar time = 0;\nfor (var i = 0; i < n; i++) {\n  t[i] = [0, 0, i];\n}\narr.push([1, L, 0].join(\" \"));\narr.forEach(function (v) {\n  v = v.split(\" \").map(Number);\n  var d = v[0] - 1;\n  var T = v[1];\n  var x = v[2];\n  t[max[0]][1] += T - time;\n  time = T;\n  t[d][0] += x;\n  if (x > 0) {\n    if (t[d][0] > max[1]) {\n      max = [d, t[d][0]];\n    } else if (t[d][0] == max[1] && d <= max[0]) {\n      max = [d, t[d][0]];\n    }\n  }\n  if (x < 0) {\n    var MAX = 0;\n    var m = 0;\n    t.forEach(function (V, index) {\n      if (MAX < V[0]) {\n        m = index;\n      }\n    });\n    max = [m, t[m][0]];\n  }\n});\nt.sort(function (a, b) {\n  if (a[1] == b[1]) {\n    return a[2] - b[2];\n  } else {\n    return b[1] - a[1];\n  }\n});\nconsole.log(t[0][2] + 1);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47572138604865555, "ngram_match_score": 0.010881764457472843, "weighted_ngram_match_score": 0.03638880647511717, "syntax_match_score": 0.8556149732620321, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00670_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var nS=Arr['shift']()['split']('\\x20')['map'](Number);var n=nS[0x0];var S=nS[0x1];if(n==0x0&&S==0x0)break;var arr=[];for(var i=0x0;i<=0x64;i++)arr[i]=0x0;for(var i=0x0;i<n;i++){var v=Arr['shift']()-0x0;arr[v]++;}var cnt=0x0;for(var i=0x0;i<=0x64;i++){for(var j=i+0x1;j<=0x64;j++){if(i+j>S)cnt+=Math['min'](arr[i],arr[j]);}}console['log'](cnt);}", "test_cases": [["3 7\n1\n3\n10\n0 0", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nS=Arr.shift().split(\" \").map(Number);\n   var n=nS[0];\n   var S=nS[1];\n   if(n==0 && S==0)break;\n   var arr=[];\n   for(var i=0;i<=100;i++)arr[i]=0;\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr[v]++;\n   }\n   var cnt=0;\n   for(var i=0;i<=100;i++){\n      for(var j=i+1;j<=100;j++){\n         if(i+j>S)cnt+=Math.min(arr[i],arr[j]);\n      } \n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 843, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nS = Arr.shift().split(\" \").map(Number);\n  var n = nS[0];\n  var S = nS[1];\n  if (n == 0 && S == 0) {\n    break;\n  }\n  var arr = [];\n  for (var i = 0; i <= 100; i++) {\n    arr[i] = 0;\n  }\n  for (var i = 0; i < n; i++) {\n    var v = Arr.shift() - 0;\n    arr[v]++;\n  }\n  var cnt = 0;\n  for (var i = 0; i <= 100; i++) {\n    for (var j = i + 1; j <= 100; j++) {\n      if (i + j > S) {\n        cnt += Math.min(arr[i], arr[j]);\n      }\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5124797202292107, "ngram_match_score": 0.043548634987101986, "weighted_ngram_match_score": 0.1452591348186298, "syntax_match_score": 0.8611111111111112, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004281988516326107, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01935483870967747, "new_decrease_halstead_effort": 0.10093652445369405}}
{"filename": "p00734_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var nm=Arr['shift']();if(nm=='0\\x200')break;nm=nm['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];var N=[];var M=[];for(var i=0x0;i<n;i++)N['push'](Arr['shift']()-0x0);for(var i=0x0;i<m;i++)M['push'](Arr['shift']()-0x0);var sumN=N['reduce'](function(a,b){return a+b;});var sumM=M['reduce'](function(a,b){return a+b;});var arr=[];for(var i=0x0;i<n;i++){for(var j=0x0;j<m;j++){var a=sumN-N[i]+M[j];var b=sumM+N[i]-M[j];if(a==b)arr['push']([N[i]+M[j],N[i],M[j]]);}}if(arr['length']==0x0){console['log'](-0x1);continue;}arr['sort'](function(a,b){return a[0x0]-b[0x0];});console['log'](arr[0x0][0x1]+'\\x20'+arr[0x0][0x2]);}", "test_cases": [["2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n7 4\n1\n1\n2\n1\n2\n1\n4\n2\n3\n4\n3\n2 3\n1\n1\n2\n2\n2\n0 0", "1 3\n3 5\n-1\n2 2\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=Arr.shift();\n   if(nm==\"0 0\")break;\n   nm=nm.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var N=[];\n   var M=[];\n   for(var i=0;i<n;i++)N.push(Arr.shift()-0);\n   for(var i=0;i<m;i++)M.push(Arr.shift()-0);\n   var sumN=N.reduce(function(a,b){return a+b;});\n   var sumM=M.reduce(function(a,b){return a+b;});\n   var arr=[];\n   for(var i=0;i<n;i++){\n      for(var j=0;j<m;j++){\n         var a=sumN-N[i]+M[j];\n         var b=sumM+N[i]-M[j];\n         if(a==b)arr.push([N[i]+M[j],N[i],M[j]]);\n      }\n   }\n   if(arr.length==0){console.log(-1);continue;}\n   arr.sort(function(a,b){return a[0]-b[0];});\n   console.log(arr[0][1]+\" \"+arr[0][2]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 844, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = Arr.shift();\n  if (nm == \"0 0\") {\n    break;\n  }\n  nm = nm.split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  var N = [];\n  var M = [];\n  for (var i = 0; i < n; i++) {\n    N.push(Arr.shift() - 0);\n  }\n  for (var i = 0; i < m; i++) {\n    M.push(Arr.shift() - 0);\n  }\n  var sumN = N.reduce(function (a, b) {\n    return a + b;\n  });\n  var sumM = M.reduce(function (a, b) {\n    return a + b;\n  });\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < m; j++) {\n      var a = sumN - N[i] + M[j];\n      var b = sumM + N[i] - M[j];\n      if (a == b) {\n        arr.push([N[i] + M[j], N[i], M[j]]);\n      }\n    }\n  }\n  if (arr.length == 0) {\n    console.log(-1);\n    continue;\n  }\n  arr.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  console.log(arr[0][1] + \" \" + arr[0][2]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4896173109717381, "ngram_match_score": 0.009551646225510664, "weighted_ngram_match_score": 0.03880523811087991, "syntax_match_score": 0.9101123595505618, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011538461538461497, "new_decrease_halstead_effort": 0.0882058384828468}}
{"filename": "p01125_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var a=Arr['shift']();if(a=='0')break;var xy=[];for(var i=0x0;i<a;i++)xy['push'](Arr['shift']());var b=Arr['shift']();var news=[];for(var i=0x0;i<b;i++)news['push'](Arr['shift']());var X=0xa;var Y=0xa;var XY=[];news['forEach'](function(v){var arr=v['split']('\\x20');for(var i=0x0;i<arr[0x1]-0x0;i++){if(arr[0x0]=='N')Y++;if(arr[0x0]=='E')X++;if(arr[0x0]=='W')X--;if(arr[0x0]=='S')Y--;XY['push'](X+'\\x20'+Y);}});var flag=xy['every'](function(v){return XY['indexOf'](v)!=-0x1;});console['log'](flag?'Yes':'No');}", "test_cases": [["2\n10 11\n11 12\n2\nN 2\nE 1\n2\n10 11\n11 12\n2\nN 2\nW 1\n3\n0 15\n5 10\n5 15\n5\nW 10\nS 10\nN 20\nE 10\nS 10\n0", "Yes\nNo\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var a=Arr.shift();\n   if(a==\"0\")break;\n   var xy=[];\n   for(var i=0;i<a;i++)xy.push(Arr.shift());\n   var b=Arr.shift();\n   var news=[];\n   for(var i=0;i<b;i++)news.push(Arr.shift());\n   var X=10;\n   var Y=10;\n   var XY=[];\n   news.forEach(function(v){\n      var arr=v.split(\" \");\n      for(var i=0;i<(arr[1]-0);i++){\n         if(arr[0]==\"N\")Y++;\n         if(arr[0]==\"E\")X++;\n         if(arr[0]==\"W\")X--;\n         if(arr[0]==\"S\")Y--;\n         XY.push(X+\" \"+Y);\n      }\n   });\n   var flag=xy.every(function(v){return (XY.indexOf(v)!=-1);});\n   console.log(flag?\"Yes\":\"No\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 845, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var a = Arr.shift();\n  if (a == \"0\") {\n    break;\n  }\n  var xy = [];\n  for (var i = 0; i < a; i++) {\n    xy.push(Arr.shift());\n  }\n  var b = Arr.shift();\n  var news = [];\n  for (var i = 0; i < b; i++) {\n    news.push(Arr.shift());\n  }\n  var X = 10;\n  var Y = 10;\n  var XY = [];\n  news.forEach(function (v) {\n    var arr = v.split(\" \");\n    for (var i = 0; i < arr[1] - 0; i++) {\n      if (arr[0] == \"N\") {\n        Y++;\n      }\n      if (arr[0] == \"E\") {\n        X++;\n      }\n      if (arr[0] == \"W\") {\n        X--;\n      }\n      if (arr[0] == \"S\") {\n        Y--;\n      }\n      XY.push(X + \" \" + Y);\n    }\n  });\n  var flag = xy.every(function (v) {\n    return XY.indexOf(v) != -1;\n  });\n  console.log(flag ? \"Yes\" : \"No\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4637128629851932, "ngram_match_score": 0.013476689748567418, "weighted_ngram_match_score": 0.05023552168587627, "syntax_match_score": 0.7911392405063291, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014851485148514865, "new_decrease_halstead_effort": 0.08464714067225543}}
{"filename": "p01701_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var line,lines=chunk['split']('\\x0a'),i,len=lines['length'],j,jLen,deg,pow,max;for(i=0x0;i<len;i++){line=lines[i];if(line=='#'){break;}line=line['replace'](/north/g,0x0);line=line['replace'](/west/g,0x1);deg=0x0;jLen=line['length'];pow=line['length']-0x1;max=0x5a*Math['pow'](0x2,pow);for(j=jLen;j>=0x0;j--){if(line[j]*0x1){if(deg<max){deg+=0x5a*Math['pow'](0x2,j);}}else{if(deg>0x0){deg-=0x5a*Math['pow'](0x2,j);}}}while(pow>0x0&&deg%0x2===0x0){deg=deg/0x2;pow--;}if(pow>0x0){console['log'](deg+'/'+Math['pow'](0x2,pow));}else{console['log'](deg);}}});", "test_cases": [["north\nwest\nnorthwest\nnorthnorthwest\nwestwestwestnorth\n#", "0\n90\n45\n45/2\n315/4"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  var line, lines = chunk.split(\"\\n\"),\n      i, len = lines.length, j, jLen,\n      deg, pow, max;\n\n  for (i=0; i<len; i++) {\n    line = lines[i];\n    if (line == \"#\") {\n      break;\n    }\n\n    line = line.replace(/north/g, 0);\n    line = line.replace(/west/g, 1);\n\n    deg = 0;\n\n    jLen = line.length;\n    pow = line.length - 1;\n    max = 90 * Math.pow(2, pow);\n    for (j=jLen; j>=0; j--) {\n      if (line[j]*1) {\n        if (deg < max) {\n          deg += 90 * Math.pow(2, j);\n        }   \n      } else {\n        if (deg > 0) {\n          deg -= 90 * Math.pow(2, j);\n        }\n      }\n    }\n\n    while(pow > 0 && deg % 2 === 0) {\n      deg = deg / 2;\n      pow--;\n    }\n    \n    if (pow > 0) {\n      console.log(deg + \"/\" + Math.pow(2, pow));\n    } else {\n      console.log(deg);\n    }\n  }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 846, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var line;\n  var lines = chunk.split(\"\\n\");\n  var i;\n  var len = lines.length;\n  var j;\n  var jLen;\n  var deg;\n  var pow;\n  var max;\n  for (i = 0; i < len; i++) {\n    line = lines[i];\n    if (line == \"#\") {\n      break;\n    }\n    line = line.replace(/north/g, 0);\n    line = line.replace(/west/g, 1);\n    deg = 0;\n    jLen = line.length;\n    pow = line.length - 1;\n    max = Math.pow(2, pow) * 90;\n    for (j = jLen; j >= 0; j--) {\n      if (line[j] * 1) {\n        if (deg < max) {\n          deg += Math.pow(2, j) * 90;\n        }\n      } else if (deg > 0) {\n        deg -= Math.pow(2, j) * 90;\n      }\n    }\n    while (pow > 0 && deg % 2 === 0) {\n      deg = deg / 2;\n      pow--;\n    }\n    if (pow > 0) {\n      console.log(deg + \"/\" + Math.pow(2, pow));\n    } else {\n      console.log(deg);\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.757336623813302, "ngram_match_score": 0.5674200059312894, "weighted_ngram_match_score": 0.6550299375977806, "syntax_match_score": 0.8068965517241379, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.003581194541665278, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.042553191489361764, "new_decrease_halstead_effort": -0.0696425257648241}}
{"filename": "p02537_1", "type": "JavaScript", "obfuscated": "const main=arg=>{const [N,K]=arg['split']('\\x0a')[0x0]['split']('\\x20')['map'](Number);arg=arg['split']('\\x0a')['slice'](0x1);const a=arg['map'](Number);let b=[];b['push'](a[0x0]);for(let i=0x1;i<N;i++){if(Math['abs'](a[i]-b[b['length']-0x1])<=K){b['push'](a[i]);}}console['log'](b['length']);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 3\n1\n5\n4\n3\n8\n6\n9\n7\n2\n4", "7"]], "original": "const main = (arg) => {\n    const [N,K] = arg.split(\"\\n\")[0].split(\" \").map(Number)\n    arg = arg.split(\"\\n\").slice(1)\n    const a = arg.map(Number)\n    \n    let b = []\n    b.push(a[0])\n    for(let i=1; i<N; i++) {\n        if(Math.abs(a[i]-b[b.length-1]) <= K) {\n            // last = a[i]\n            b.push(a[i])\n        }\n    }\n    console.log(b.length)\n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 847, "deobfuscated": "const main = arg => {\n  const [N, K] = arg.split(\"\\n\")[0].split(\" \").map(Number);\n  arg = arg.split(\"\\n\").slice(1);\n  const a = arg.map(Number);\n  let b = [];\n  b.push(a[0]);\n  for (let i = 1; i < N; i++) {\n    if (Math.abs(a[i] - b[b.length - 1]) <= K) {\n      b.push(a[i]);\n    }\n  }\n  console.log(b.length);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5276646061578933, "ngram_match_score": 0.077069467432263, "weighted_ngram_match_score": 0.0938299210547322, "syntax_match_score": 0.9397590361445783, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02550_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\\x0a');const [N,X,M]=lines[0x0]['split']('\\x20')['map'](Number);let a=X;const map={};const loop=[];const pre=[a];for(let i=0x1;i<N;i++){a=a*a%M;if(map[a]===0x2){break;}else if(map[a]){loop['push'](a);pre['pop']();}else{pre['push'](a);}map[a]=(map[a]||0x0)+0x1;}const suf=[];for(let i=0x0;i<(N-pre['length'])%(loop['length']||0x1);i++){suf['push'](loop[i]);}const sum=loop['reduce']((a,b)=>a+b,0x0);const lt=loop['length']?Math['floor']((N-pre['length'])/loop['length']):0x0;console['log'](pre['reduce']((a,b)=>a+b,0x0)+sum*lt+suf['reduce']((a,b)=>a+b,0x0));", "test_cases": [["6 2 1001", "1369"], ["1000 2 16", "6"], ["10000000000 10 99959", "492443256176507"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nconst lines = input.split('\\n')\nconst [N, X, M] = lines[0].split(' ').map(Number)\n\nlet a = X\nconst map = {}\nconst loop = []\nconst pre = [a]\nfor (let i = 1; i < N; i++) {\n    a = a * a % M\n    if (map[a] === 2){\n        break\n    } else if (map[a]) {\n        loop.push(a)\n        pre.pop()\n    } else {\n        pre.push(a)\n    }\n    map[a] = (map[a] || 0) + 1\n}\n\nconst suf = []\nfor (let i = 0; i < (N - pre.length) % (loop.length || 1); i++) {\n    suf.push(loop[i])\n}\n\nconst sum = loop.reduce((a, b) => a + b, 0)\nconst lt = loop.length ? Math.floor(((N - pre.length) / loop.length)) : 0\n\nconsole.log(\n    pre.reduce((a, b) => a + b, 0) +\n    sum * lt +\n    suf.reduce((a, b) => a + b, 0)\n)\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 848, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.split(\"\\n\");\nconst [N, X, M] = lines[0].split(\" \").map(Number);\nlet a = X;\nconst map = {};\nconst loop = [];\nconst pre = [a];\nfor (let i = 1; i < N; i++) {\n  a = a * a % M;\n  if (map[a] === 2) {\n    break;\n  } else if (map[a]) {\n    loop.push(a);\n    pre.pop();\n  } else {\n    pre.push(a);\n  }\n  map[a] = (map[a] || 0) + 1;\n}\nconst suf = [];\nfor (let i = 0; i < (N - pre.length) % (loop.length || 1); i++) {\n  suf.push(loop[i]);\n}\nconst sum = loop.reduce((a, b) => a + b, 0);\nconst lt = loop.length ? Math.floor((N - pre.length) / loop.length) : 0;\nconsole.log(pre.reduce((a, b) => a + b, 0) + sum * lt + suf.reduce((a, b) => a + b, 0));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7564387359359694, "ngram_match_score": 0.6091547769844725, "weighted_ngram_match_score": 0.6163740685681905, "syntax_match_score": 0.9513888888888888, "dataflow_match_score": 0.8488372093023255}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010159380362019244, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.024803853901575135}}
{"filename": "p02619_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const tmp=input['trim']()['split']('\\x0a');const D=Number(tmp[0x0]);const C=tmp[0x1]['split']('\\x20')['map'](v=>Number(v));const S=tmp['slice'](0x2,0x7)['map'](v=>v['split']('\\x20')['map'](v=>Number(v)));const T=tmp['slice'](-0x5)['map'](v=>Number(v));let LastContestDays=Array(0x1a)['fill'](0x0);let currnetContestLebels=Array(0x1a)['fill'](0x0);let lebel=0x0;for(let i=0x1;i<=D;i++){LastContestDays[T[i-0x1]-0x1]=i;for(let j=0x0;j<C['length'];j++){if(LastContestDays[j]===i){currnetContestLebels[j]=S[i-0x1][j];}else{currnetContestLebels[j]=C[j]*(i-LastContestDays[j])*-0x1;}}lebel+=currnetContestLebels['reduce']((acc,cur)=>acc+cur);console['log'](String(lebel));}return;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13", "18398\n35037\n51140\n65837\n79325"]], "original": "'use strict';\n\nfunction Main(input) {\n    const tmp = input.trim().split('\\n');\n    const D = Number(tmp[0]);\n    const C = tmp[1].split(' ').map((v) => Number(v));\n    const S = tmp.slice(2, 7).map((v) => v.split(' ').map((v) => Number(v)));\n    const T = tmp.slice(-5).map((v) => Number(v));\n\n    let LastContestDays = Array(26).fill(0); // コンテストの種類ごとの最終開催日\n    let currnetContestLebels = Array(26).fill(0); // ある開催日のコンテストごとの満足度\n    let lebel = 0; // 満足度の累計\n\n    for (let i = 1; i <= D; i++) {\n        LastContestDays[T[i - 1] - 1] = i;\n        for (let j = 0; j < C.length; j++) {\n            if (LastContestDays[j] === i) {\n                currnetContestLebels[j] = S[i - 1][j];\n            } else {\n                currnetContestLebels[j] = C[j] * (i - LastContestDays[j]) * -1;\n            }\n        }\n        lebel += currnetContestLebels.reduce((acc, cur) => acc + cur);\n        console.log(String(lebel));\n    }\n\n    return;\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 849, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const tmp = input.trim().split(\"\\n\");\n  const D = Number(tmp[0]);\n  const C = tmp[1].split(\" \").map(v => Number(v));\n  const S = tmp.slice(2, 7).map(v => v.split(\" \").map(v => Number(v)));\n  const T = tmp.slice(-5).map(v => Number(v));\n  let LastContestDays = Array(26).fill(0);\n  let currnetContestLebels = Array(26).fill(0);\n  let lebel = 0;\n  for (let i = 1; i <= D; i++) {\n    LastContestDays[T[i - 1] - 1] = i;\n    for (let j = 0; j < C.length; j++) {\n      if (LastContestDays[j] === i) {\n        currnetContestLebels[j] = S[i - 1][j];\n      } else {\n        currnetContestLebels[j] = C[j] * (i - LastContestDays[j]) * -1;\n      }\n    }\n    lebel += currnetContestLebels.reduce((acc, cur) => acc + cur);\n    console.log(String(lebel));\n  }\n  return;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8188384862103396, "ngram_match_score": 0.7720810719862227, "weighted_ngram_match_score": 0.7809408570448589, "syntax_match_score": 0.8636363636363636, "dataflow_match_score": 0.8586956521739131}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02709_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{const input=arg['trim']()['split']('\\x0a');const n=parseInt(input[0x0]);const arr=input[0x1]['split']('\\x20')['map'](n=>parseInt(n));function cal(i,dst){if(i===-0x1)return 0x0;const results=[];for(const j of dst){const next_dst=dst['filter'](v=>v!==j);const abs=i>j?i-j:j-i;const val=arr[i]*abs+cal(i-0x1,next_dst);results['push'](val);}return Math['max'](...results);}console['log'](cal(n-0x1,[...Array(n)['keys']()]));};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 3 4 2", "20"], ["6\n5 5 6 1 1 1", "58"], ["6\n8 6 9 1 2 1", "85"]], "original": "\"use strict\";\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n\n  const n = parseInt(input[0]);\n  const arr = input[1].split(\" \").map(n => parseInt(n));\n\n  function cal(i, dst) {\n    if (i === -1) return 0;\n\n    const results = [];\n    for (const j of dst) {\n      const next_dst = dst.filter(v => v !== j);\n      const abs = i > j ? i - j : j - i;\n      const val = arr[i] * abs + cal(i - 1, next_dst);\n      results.push(val);\n    }\n\n    return Math.max(...results);\n  }\n\n  console.log(cal(n - 1, [...Array(n).keys()]));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 850, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n  const n = parseInt(input[0]);\n  const arr = input[1].split(\" \").map(n => parseInt(n));\n  function cal(i, dst) {\n    if (i === -1) {\n      return 0;\n    }\n    const results = [];\n    for (const j of dst) {\n      const next_dst = dst.filter(v => v !== j);\n      const abs = i > j ? i - j : j - i;\n      const val = arr[i] * abs + cal(i - 1, next_dst);\n      results.push(val);\n    }\n    return Math.max(...results);\n  }\n  console.log(cal(n - 1, [...Array(n).keys()]));\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9360727377771769, "ngram_match_score": 0.8999642427545528, "weighted_ngram_match_score": 0.9227580809031746, "syntax_match_score": 0.9215686274509803, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02814_1", "type": "JavaScript", "obfuscated": "function main(input){var N=input[0x0]['split']('\\x20')[0x0]-0x0;var M=input[0x0]['split']('\\x20')[0x1]-0x0;var list=input[0x1]['split']('\\x20')['map'](v=>v/0x2);var l=lcm(list);console['log'](Math['trunc'](M/l)-Math['trunc'](M/(l*0x2)));}function lcm(args){var a=args;var g=(n,m)=>m?g(m,n%m):n;var l=(n,m)=>n*m/g(n,m);var ans=a[0x0];for(var i=0x1;i<a['length'];i++){ans=l(ans,a[i]);}return ans;}main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a'));", "test_cases": [["2 50\n6 10", "2"], ["3 100\n14 22 40", "0"], ["5 1000000000\n6 6 2 6 2", "166666667"]], "original": "function main(input) {\n  var N = input[0].split(\" \")[0]-0;\n  var M = input[0].split(\" \")[1]-0;\n  var list = input[1].split(\" \").map(v=>v/2);\n  var l = lcm(list);\n  console.log(Math.trunc(M/l) - Math.trunc(M/(l*2)));\n}\n\nfunction lcm(args) {\n    var a = args\n    var g = (n, m) => m ? g(m, n % m) : n\n    var l = (n, m) => n * m / g(n, m)\n    var ans = a[0]\n\n    for (var i = 1; i < a.length; i++) {\n        ans = l(ans, a[i])\n    }\n    return ans\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 851, "deobfuscated": "function main(input) {\n  var N = input[0].split(\" \")[0] - 0;\n  var M = input[0].split(\" \")[1] - 0;\n  var list = input[1].split(\" \").map(v => v / 2);\n  var l = lcm(list);\n  console.log(Math.trunc(M / l) - Math.trunc(M / (l * 2)));\n}\nfunction lcm(args) {\n  var a = args;\n  var g = (n, m) => m ? g(m, n % m) : n;\n  var l = (n, m) => n * m / g(n, m);\n  var ans = a[0];\n  for (var i = 1; i < a.length; i++) {\n    ans = l(ans, a[i]);\n  }\n  return ans;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8012084808189538, "ngram_match_score": 0.5498375084698378, "weighted_ngram_match_score": 0.6549964148059773, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02821_1", "type": "JavaScript", "obfuscated": "function Main(input){const M=input[0x0][0x1];const alist=input[0x1];const kumiList=alist['reduce']((arr,ai,i)=>{arr['push'](ai*0x2);var kumiVal;for(var j=i+0x1;j<alist['length'];j++){kumiVal=ai+alist[j];arr['push'](kumiVal,kumiVal);}return arr;},[])['sort']((a1,a2)=>a2-a1);var answer=0x0;for(var i=0x0;i<M;i++){answer+=kumiList[i];}console['log'](answer);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['map'](line=>line['split']('\\x20')['map'](Number)));", "test_cases": [["5 3\n10 14 19 34 33", "202"], ["9 14\n1 3 5 110 24 21 34 5 3", "1837"], ["9 73\n67597 52981 5828 66249 75177 64141 40773 79105 16076", "8128170"]], "original": "/**\n * @param input number[][]\n */\nfunction Main(input) {\n  const M = input[0][1];\n  const alist = input[1];\n\n  const kumiList = alist.reduce((arr, ai, i) => {\n    arr.push(ai * 2);\n\n    var kumiVal;\n    for (var j = i + 1; j < alist.length; j++) {\n      kumiVal = ai + alist[j];\n      arr.push(kumiVal, kumiVal);\n    }\n\n    return arr;\n  }, []).sort((a1, a2) => a2 - a1);\n\n  var answer = 0;\n  for (var i = 0; i < M; i++) {\n    answer += kumiList[i];\n  }\n\n  console.log(answer);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim()\n  .split('\\n')\n  .map((line) => line.split(' ').map(Number))\n);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 852, "deobfuscated": "function Main(input) {\n  const M = input[0][1];\n  const alist = input[1];\n  const kumiList = alist.reduce((arr, ai, i) => {\n    arr.push(ai * 2);\n    var kumiVal;\n    for (var j = i + 1; j < alist.length; j++) {\n      kumiVal = ai + alist[j];\n      arr.push(kumiVal, kumiVal);\n    }\n    return arr;\n  }, []).sort((a1, a2) => a2 - a1);\n  var answer = 0;\n  for (var i = 0; i < M; i++) {\n    answer += kumiList[i];\n  }\n  console.log(answer);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(line => line.split(\" \").map(Number)));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9089155690561745, "ngram_match_score": 0.8472621286437394, "weighted_ngram_match_score": 0.8605650960345668, "syntax_match_score": 0.9278350515463918, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03381_1", "type": "JavaScript", "obfuscated": "function Main(input){const lines=input['split']('\\x0a');let N=parseInt(lines[0x0]);let a=lines[0x1]['split']('\\x20')['map'](function(i){return parseInt(i);});let sortedA=a['slice']()['sort'](function(a,b){return a-b;});const med1=sortedA[N/0x2-0x1];const med2=sortedA[N/0x2];a['forEach'](function(i){console['log'](i<=med1?med2:med1);});}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n2 4 4 3", "4\n3\n3\n4"], ["2\n1 2", "2\n1"], ["6\n5 5 4 4 3 3", "4\n4\n4\n4\n4\n4"]], "original": "function Main(input) {\n    const lines = input.split(\"\\n\");\n    let N = parseInt(lines[0]);\n    let a = lines[1].split(\" \").map(function(i) { return parseInt(i);});\n    let sortedA = a.slice().sort(function(a,b) { return a - b;});\n    const med1 = sortedA[N/2-1];\n    const med2 = sortedA[N/2];\n    a.forEach(function(i) {console.log(i<=med1 ? med2 : med1);})\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 853, "deobfuscated": "function Main(input) {\n  const lines = input.split(\"\\n\");\n  let N = parseInt(lines[0]);\n  let a = lines[1].split(\" \").map(function (i) {\n    return parseInt(i);\n  });\n  let sortedA = a.slice().sort(function (a, b) {\n    return a - b;\n  });\n  const med1 = sortedA[N / 2 - 1];\n  const med2 = sortedA[N / 2];\n  a.forEach(function (i) {\n    console.log(i <= med1 ? med2 : med1);\n  });\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7193613390653961, "ngram_match_score": 0.3633682956868529, "weighted_ngram_match_score": 0.5140770605747317, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03418_1", "type": "JavaScript", "obfuscated": "function Main(input){var line=input['split']('\\x0a');var tmp=line[0x0]['split']('\\x20');var maxint=Number(tmp[0x0]);var minrest=Number(tmp[0x1]);var ans=0x0;for(var a=minrest||0x1;a<=maxint;a++){for(var b=minrest||0x1;b<=maxint;b++){if(a<b){ans++;}else{if(a%b>=minrest)ans++;}}}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2", "7"], ["10 0", "100"], ["31415 9265", "287927211"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar line = input.split(\"\\n\");\n\tvar tmp = line[0].split(\" \");\n\tvar maxint = Number(tmp[0]);\n\tvar minrest = Number(tmp[1]);\n\tvar ans = 0;\n\tfor(var a = minrest || 1; a <= maxint; a++){\n\t\tfor(var b = minrest || 1; b <= maxint; b++){\n\t\t\tif(a < b){\n\t\t\t\tans++;\n\t\t\t} else{\n\t\t\t\tif(a%b >= minrest) ans++;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 854, "deobfuscated": "function Main(input) {\n  var line = input.split(\"\\n\");\n  var tmp = line[0].split(\" \");\n  var maxint = Number(tmp[0]);\n  var minrest = Number(tmp[1]);\n  var ans = 0;\n  for (var a = minrest || 1; a <= maxint; a++) {\n    for (var b = minrest || 1; b <= maxint; b++) {\n      if (a < b) {\n        ans++;\n      } else if (a % b >= minrest) {\n        ans++;\n      }\n    }\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7835075036280201, "ngram_match_score": 0.6029192166506973, "weighted_ngram_match_score": 0.6797594465100321, "syntax_match_score": 0.8513513513513513, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03533_1", "type": "JavaScript", "obfuscated": "var s=require('fs')['readFileSync']('/dev/stdin','utf8');console['log'](s['trim']()['match'](/^A?KIHA?BA?RA?$/)?'YES':'NO');", "test_cases": [["KIHBR", "YES"], ["AKIBAHARA", "NO"], ["AAKIAHBAARA", "NO"]], "original": "var s = require('fs').readFileSync('/dev/stdin', 'utf8');\nconsole.log((s.trim().match(/^A?KIHA?BA?RA?$/)) ? \"YES\" : \"NO\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 855, "deobfuscated": "var s = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconsole.log(s.trim().match(/^A?KIHA?BA?RA?$/) ? \"YES\" : \"NO\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6350494397931887, "ngram_match_score": 0.37991784282579627, "weighted_ngram_match_score": 0.3910491471161894, "syntax_match_score": 0.7692307692307693, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03568_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var n=Math['pow'](0x3,input[0x0]);var sum=0x1;var arr=input[0x1]['split']('\\x20')['map'](Number);arr['forEach'](function(val){if(val%0x2==0x0)sum*=0x2;});console['log'](n-sum);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["2\n2 3", "7"], ["3\n3 3 3", "26"], ["1\n100", "1"], ["10\n90 52 56 71 44 8 13 30 57 84", "58921"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n  var n = Math.pow(3,input[0]);\n  var sum = 1;\n  var arr = input[1].split(\" \").map(Number);\n  arr.forEach(function(val){if(val%2==0)sum *= 2});\n  console.log(n-sum);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 856, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = Math.pow(3, input[0]);\n  var sum = 1;\n  var arr = input[1].split(\" \").map(Number);\n  arr.forEach(function (val) {\n    if (val % 2 == 0) {\n      sum *= 2;\n    }\n  });\n  console.log(n - sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6822251371115472, "ngram_match_score": 0.3124566341061723, "weighted_ngram_match_score": 0.5664439143400164, "syntax_match_score": 0.85, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03578_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],D,[M],T]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));D['sort']((a,b)=>a-b);T['sort']((a,b)=>a-b);let j=-0x1;Q:for(let i=0x0;i<M;i++){while(++j<N){if(D[j]>T[i])return'NO';if(D[j]===T[i])continue Q;}return'NO';}return'YES';})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["5\n3 1 4 1 5\n3\n5 4 3", "YES"], ["7\n100 200 500 700 1200 1600 2000\n6\n100 200 500 700 1600 1600", "NO"], ["1\n800\n5\n100 100 100 100 100", "NO"], ["15\n1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\n9\n5 4 3 2 1 2 3 4 5", "YES"]], "original": "console.log((args=>{\n  const [[N],D,[M],T] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  D.sort((a,b)=>a-b);\n  T.sort((a,b)=>a-b);\n  let j = -1;\n  Q: for ( let i = 0; i < M; i++ ) {\n    while ( ++j < N ) {\n      if ( D[j] > T[i] ) return 'NO';\n      if ( D[j] === T[i] ) continue Q;\n    }\n    return 'NO';\n  }\n  return 'YES';\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 857, "deobfuscated": "console.log((args => {\n  const [[N], D, [M], T] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  D.sort((a, b) => a - b);\n  T.sort((a, b) => a - b);\n  let j = -1;\n  Q: for (let i = 0; i < M; i++) {\n    while (++j < N) {\n      if (D[j] > T[i]) {\n        return \"NO\";\n      }\n      if (D[j] === T[i]) {\n        continue Q;\n      }\n    }\n    return \"NO\";\n  }\n  return \"YES\";\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.51434821406252, "ngram_match_score": 0.17598473509571866, "weighted_ngram_match_score": 0.2480747878210275, "syntax_match_score": 0.8333333333333334, "dataflow_match_score": 0.8}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03733_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N,T],t]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>v|0x0));t['sort']((a,b)=>a-b);let s=T;for(let i=0x1;i<N;i++){if(t[i-0x1]+T>t[i])s+=t[i]-t[i-0x1];else s+=T;}return''+s;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["2 4\n0 3", "7"], ["2 4\n0 5", "8"], ["4 1000000000\n0 1000 1000000 1000000000", "2000000000"], ["1 1\n0", "1"], ["9 10\n0 3 5 7 100 110 200 300 311", "67"]], "original": "console.log((args=>{\n  const [[N,T],t] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  t.sort((a,b)=>a-b);\n  let s = T;\n  for ( let i = 1; i < N; i++ ) {\n    if ( t[i-1] + T > t[i] ) s += t[i] - t[i-1];\n    else s += T;\n  }\n  return `${s}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 858, "deobfuscated": "console.log((args => {\n  const [[N, T], t] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  t.sort((a, b) => a - b);\n  let s = T;\n  for (let i = 1; i < N; i++) {\n    if (t[i - 1] + T > t[i]) {\n      s += t[i] - t[i - 1];\n    } else {\n      s += T;\n    }\n  }\n  return \"\" + s;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5928249872831324, "ngram_match_score": 0.22545157606851077, "weighted_ngram_match_score": 0.34584837306401867, "syntax_match_score": 0.8, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03817_1", "type": "JavaScript", "obfuscated": "input=require('fs')['readFileSync']('/dev/stdin','utf8');lines=input['split']('\\x0a');N=lines['shift']()*0x1;ans=Math['floor'](N/0xb)*0x2;m=N%0xb;if(m==0x0){}else if(m<=0x6){ans+=0x1;}else{ans+=0x2;}console['log'](ans);", "test_cases": [["7", "2"], ["149696127901", "27217477801"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nans = Math.floor(N / 11) * 2\nm = N % 11\nif (m == 0) {\n} else if (m <= 6) {\n    ans += 1\n} else {\n    ans += 2\n} \nconsole.log(ans)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 859, "deobfuscated": "input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlines = input.split(\"\\n\");\nN = lines.shift() * 1;\nans = Math.floor(N / 11) * 2;\nm = N % 11;\nif (m == 0) {} else if (m <= 6) {\n  ans += 1;\n} else {\n  ans += 2;\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7456766583739177, "ngram_match_score": 0.4868853988976441, "weighted_ngram_match_score": 0.49582123459802685, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03889_1", "type": "JavaScript", "obfuscated": "function Main(input){const arr=input['split']('');if(arr['length']%0x2!==0x0){console['log']('No');return;}const a=arr['slice'](0x0,arr['length']/0x2);const b=arr['slice'](arr['length']/0x2,arr['length']);if(a['join']('')===b['reverse']()['map'](mirror)['join']('')){console['log']('Yes');}else{console['log']('No');}function mirror(a){switch(a){case'b':return'd';case'd':return'b';case'p':return'q';case'q':return'p';}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["pdbq", "Yes"], ["ppqb", "No"]], "original": "function Main(input) {\n  const arr = input.split(\"\");\n  if(arr.length % 2 !== 0){\n    console.log(\"No\");\n    return;\n  }\n  const a = arr.slice(0, arr.length/2);\n  const b = arr.slice(arr.length/2, arr.length);\n  if(a.join(\"\") === b.reverse().map(mirror).join(\"\")){\n    console.log(\"Yes\");\n  }else{ console.log(\"No\"); }\n  function mirror(a){\n    switch (a) {\n        case \"b\": return \"d\";\n        case \"d\": return \"b\";\n        case \"p\": return \"q\";\n        case \"q\": return \"p\";\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 860, "deobfuscated": "function Main(input) {\n  const arr = input.split(\"\");\n  if (arr.length % 2 !== 0) {\n    console.log(\"No\");\n    return;\n  }\n  const a = arr.slice(0, arr.length / 2);\n  const b = arr.slice(arr.length / 2, arr.length);\n  if (a.join(\"\") === b.reverse().map(mirror).join(\"\")) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n  function mirror(a) {\n    switch (a) {\n      case \"b\":\n        return \"d\";\n      case \"d\":\n        return \"b\";\n      case \"p\":\n        return \"q\";\n      case \"q\":\n        return \"p\";\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8119816269245032, "ngram_match_score": 0.5627438926760419, "weighted_ngram_match_score": 0.6851826150219708, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04033_1", "type": "JavaScript", "obfuscated": "const main=input=>{const data=input['split'](/\\n|\\s/)['map'](a=>parseInt(a,0xa));const a=data[0x0];const b=data[0x1];if(a<=0x0&&0x0<=b){return'Zero';}if((b-a)%0x2||a>0x0){return'Positive';}else{return'Negative';}};console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["1 3", "Positive"], ["-3 -1", "Negative"], ["-1 1", "Zero"]], "original": "const main = (input) =>  {\n  const data = input.split(/\\n|\\s/).map((a) => parseInt(a, 10));\n  const a = data[0];\n  const b = data[1];\n  if (a <= 0 && 0 <= b) {\n    return \"Zero\"\n  }\n\n  if ((b - a) % 2  || a > 0) {\n    return \"Positive\";\n  } else {\n    return \"Negative\";\n  }\n}\n\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")))\n\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 861, "deobfuscated": "const main = input => {\n  const data = input.split(/\\n|\\s/).map(a => parseInt(a, 10));\n  const a = data[0];\n  const b = data[1];\n  if (a <= 0 && b >= 0) {\n    return \"Zero\";\n  }\n  if ((b - a) % 2 || a > 0) {\n    return \"Positive\";\n  } else {\n    return \"Negative\";\n  }\n};\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7983986293461464, "ngram_match_score": 0.7216467046675198, "weighted_ngram_match_score": 0.7342428946842787, "syntax_match_score": 0.7377049180327869, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00034_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split'](/\\s/)['map'](function(i){j=i['split'](',');for(s=0x0,m=n=0xa;m--;)j[m]=s-=j[m];for(s*=j[0xb]/(-j[0xb]-j[n]);j[--n]>=-s;);console['log'](++n);});", "test_cases": [["1,1,1,1,1,1,1,1,1,1,40,60\n1,1,1,1,1,3,3,3,3,3,50,50\n10,10,10,10,10,10,10,10,10,10,50,49", "4\n7\n6"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",'utf8').trim().split(/\\s/).map(function(i){j=i.split(',');for(s=0,m=n=10;m--;)j[m]=s-=j[m];for(s*=j[11]/(-j[11]-j[n]);j[--n]>=-s;);console.log(++n);})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 862, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\s/).map(function (i) {\n  j = i.split(\",\");\n  s = 0;\n  m = n = 10;\n  while (m--) {\n    j[m] = s -= j[m];\n  }\n  for (s *= j[11] / (-j[11] - j[n]); j[--n] >= -s;);\n  console.log(++n);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46031746031746035, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.8412698412698413, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.33333333333333326, "length_score": -0.33333333333333326, "increase_maintainability": -0.04943114258583703, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.07991805879866964}}
{"filename": "p00039_1", "type": "JavaScript", "obfuscated": "r='.IVXLCDM',require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a')['map'](function(i){i?(n=s=p=0x0,i['split']('')['map'](function(c){n=Math['pow'](0xa,~~((n=r['indexOf'](c))/0x2))/(0x2-n%0x2),n>p?s-=p*0x2:0x0,s+=n,p=n;}),console['log'](s)):0x0;});", "test_cases": [["IV\nCCCCLXXXXVIIII\nCDXCIX", "4\n499\n499"]], "original": "r=\".IVXLCDM\",require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').map(function(i){i?(n=s=p=0,i.split('').map(function(c){n=Math.pow(10,~~((n=r.indexOf(c))/2))/(2-(n%2)),n>p?s-=p*2:0,s+=n,p=n}),console.log(s)):0})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 863, "deobfuscated": "r = \".IVXLCDM\";\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\").map(function (i) {\n  if (i) {\n    n = s = p = 0;\n    i.split(\"\").map(function (c) {\n      n = Math.pow(10, ~~((n = r.indexOf(c)) / 2)) / (2 - n % 2);\n      if (n > p) {\n        s -= p * 2;\n      } else {\n        0;\n      }\n      s += n;\n      p = n;\n    });\n    console.log(s);\n  } else {\n    0;\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.41666666666666663, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.6666666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 4.0, "length_score": -4.0, "increase_maintainability": -0.210546169512984, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02298850574712641, "new_decrease_halstead_effort": -0.10954686925513979}}
{"filename": "p00064_1", "type": "JavaScript", "obfuscated": "var ans=0x0;require('fs')['readFileSync']('/dev/stdin','utf8')['match'](/\\d+/g)['forEach'](function(elem){ans+=parseInt(elem,0xa);});console['log'](ans);", "test_cases": [["Thereare100yenonthetable.Iam17yearsold.\nIshouldgohomeat6pm.", "123"]], "original": "var ans=0;\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").match(/\\d+/g).forEach(function(elem){\n\tans += parseInt(elem, 10);\n});\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 864, "deobfuscated": "var ans = 0;\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").match(/\\d+/g).forEach(function (elem) {\n  ans += parseInt(elem, 10);\n});\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7352887667514927, "ngram_match_score": 0.3759663529467017, "weighted_ngram_match_score": 0.5651887140592688, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00092_1", "type": "JavaScript", "obfuscated": "function seach(y,x){if(yx[y][x]=='*')return 0x0;var dy=[-0x1,-0x1,0x0];var dx=[-0x1,0x0,-0x1];var min=n;for(var i=0x0;i<0x3;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||yy>=n||xx<0x0||xx>=n)return 0x1;min=Math['min'](min,yx[yy][xx]);}return min+0x1;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var max=0x0;var yx=[];for(var i=0x0;i<n;i++){var str=Arr['shift']();yx['push'](str['split'](''));}for(var y=0x0;y<n;y++){for(var x=0x0;x<n;x++){yx[y][x]=seach(y,x);max=Math['max'](max,yx[y][x]);}}console['log'](max);}", "test_cases": [["10\n...*....**\n..........\n**....**..\n........*.\n..*.......\n..........\n.*........\n..........\n....*..***\n.*....*...\n10\n****.*****\n*..*.*....\n****.*....\n*....*....\n*....*****\n..........\n****.*****\n*..*...*..\n****...*..\n*..*...*..\n0", "5\n3"]], "original": "function seach(y,x){\n   if(yx[y][x]==\"*\")return 0;\n   var dy=[-1,-1,0];\n   var dx=[-1,0,-1];\n   var min=n;\n   for(var i=0;i<3;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=n || xx<0 || xx>=n)return 1;\n      min=Math.min(min,yx[yy][xx]);\n   }\n   return min+1;\n}\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var max=0;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      var str=Arr.shift();\n      yx.push(str.split(\"\"));\n   }\n   for(var y=0;y<n;y++){\n      for(var x=0;x<n;x++){\n         yx[y][x]=seach(y,x);\n         max=Math.max(max,yx[y][x]);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 865, "deobfuscated": "function seach(y, x) {\n  if (yx[y][x] == \"*\") {\n    return 0;\n  }\n  var dy = [-1, -1, 0];\n  var dx = [-1, 0, -1];\n  var min = n;\n  for (var i = 0; i < 3; i++) {\n    var yy = y + dy[i];\n    var xx = x + dx[i];\n    if (yy < 0 || yy >= n || xx < 0 || xx >= n) {\n      return 1;\n    }\n    min = Math.min(min, yx[yy][xx]);\n  }\n  return min + 1;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var max = 0;\n  var yx = [];\n  for (var i = 0; i < n; i++) {\n    var str = Arr.shift();\n    yx.push(str.split(\"\"));\n  }\n  for (var y = 0; y < n; y++) {\n    for (var x = 0; x < n; x++) {\n      yx[y][x] = seach(y, x);\n      max = Math.max(max, yx[y][x]);\n    }\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5166748695862606, "ngram_match_score": 0.042011928186977354, "weighted_ngram_match_score": 0.12742727618546215, "syntax_match_score": 0.8972602739726028, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0018049332861037604, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013574660633484115, "new_decrease_halstead_effort": 0.04482983031670873}}
{"filename": "p00118_1", "type": "JavaScript", "obfuscated": "function bomb(y,x,v){var dy=[0x0,0x0,-0x1,0x1];var dx=[-0x1,0x1,0x0,0x0];for(var i=0x0;i<0x4;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||yy>=n[0x0]||xx<0x0||xx>=n[0x1])continue;if(v==yx[yy][xx]){yx[yy][xx]=0x0;bomb(yy,xx,v);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()['split']('\\x20')['map'](Number);if(n[0x0]==0x0&&n[0x1]==0x0)break;var yx=[];for(var i=0x0;i<n[0x0];i++){var arr=Arr['shift']()['split']('');yx['push'](arr);}var cnt=0x0;for(var i=0x0;i<n[0x0];i++){for(var j=0x0;j<n[0x1];j++){var v=yx[i][j];if(v=='@'||v=='#'||v=='*'){cnt++;yx[i][j]=0x0;bomb(i,j,v);}}}console['log'](cnt);}", "test_cases": [["10 10\n####*****@\n@#@@@@#*#*\n@##***@@@*\n#****#*@**\n##@*#@@*##\n*@@@@*@@@#\n***#@*@##*\n*@@@*@@##@\n*@*#*@##**\n@****#@@#@\n0 0", "33"]], "original": "function bomb(y,x,v){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=n[0] || xx<0 || xx>=n[1])continue;\n      if(v==yx[yy][xx]){yx[yy][xx]=0;bomb(yy,xx,v);}\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=(Arr.shift()).split(\" \").map(Number);\n   if(n[0]==0 && n[1]==0)break;\n   var yx=[];\n   for(var i=0;i<n[0];i++){\n      var arr=(Arr.shift()).split(\"\");\n      yx.push(arr);\n   }\n   var cnt=0;\n   for(var i=0;i<n[0];i++){\n      for(var j=0;j<n[1];j++){\n         var v=yx[i][j];\n         if(v==\"@\" || v==\"#\" || v==\"*\"){cnt++;yx[i][j]=0;bomb(i,j,v);}\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 866, "deobfuscated": "function bomb(y, x, v) {\n  var dy = [0, 0, -1, 1];\n  var dx = [-1, 1, 0, 0];\n  for (var i = 0; i < 4; i++) {\n    var yy = y + dy[i];\n    var xx = x + dx[i];\n    if (yy < 0 || yy >= n[0] || xx < 0 || xx >= n[1]) {\n      continue;\n    }\n    if (v == yx[yy][xx]) {\n      yx[yy][xx] = 0;\n      bomb(yy, xx, v);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift().split(\" \").map(Number);\n  if (n[0] == 0 && n[1] == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < n[0]; i++) {\n    var arr = Arr.shift().split(\"\");\n    yx.push(arr);\n  }\n  var cnt = 0;\n  for (var i = 0; i < n[0]; i++) {\n    for (var j = 0; j < n[1]; j++) {\n      var v = yx[i][j];\n      if (v == \"@\" || v == \"#\" || v == \"*\") {\n        cnt++;\n        yx[i][j] = 0;\n        bomb(i, j, v);\n      }\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5084263770213293, "ngram_match_score": 0.04771861074522952, "weighted_ngram_match_score": 0.1536515679987702, "syntax_match_score": 0.8323353293413174, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012145748987854255, "new_decrease_halstead_effort": 0.08499999999999996}}
{"filename": "p00168_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var dp=[0x1,0x2,0x4];for(var i=0x3;i<=0x1f;i++){dp[i]=dp[i-0x1]+dp[i-0x2]+dp[i-0x3];}while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;console['log'](Math['ceil'](dp[n-0x1]/0xe42));}", "test_cases": [["1\n10\n20\n25\n0", "1\n1\n34\n701"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dp=[1,2,4];\nfor(var i=3;i<=31;i++){\n   dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n}\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   console.log(Math.ceil(dp[n-1]/3650));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 867, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar dp = [1, 2, 4];\nfor (var i = 3; i <= 31; i++) {\n  dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];\n}\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  console.log(Math.ceil(dp[n - 1] / 3650));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48829850514555334, "ngram_match_score": 0.018905567701830408, "weighted_ngram_match_score": 0.07274999134192134, "syntax_match_score": 0.8615384615384616, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004533615059900242, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03157894736842104, "new_decrease_halstead_effort": 0.12573099415204692}}
{"filename": "p00181_1", "type": "JavaScript", "obfuscated": "function seach(x){var flag=!![];var cnt=0x0;var sum=0x0;for(var i=0x0;i<ary['length'];i++){if(x<ary[i]){flag=![];break;}else if(sum+ary[i]==x){sum=0x0;cnt++;}else if(sum+ary[i]>x){sum=ary[i];cnt++;}else if(sum+ary[i]<x){sum+=ary[i];}if(cnt==m){flag=![];break;}}return flag;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var mn=arr['shift']();if(mn=='0\\x200')break;mn=mn['split']('\\x20')['map'](Number);var m=mn[0x0];var n=mn[0x1];var ary=[];while(n--)ary['push'](arr['shift']()-0x0);var L=0x0;var R=0x16e360;while(!![]){var middle=Math['floor']((L+R)/0x2);if(seach(middle)){R=middle-0x1;}else{L=middle+0x1;}if(L>R)break;}console['log'](R+0x1);}", "test_cases": [["3 9\n500\n300\n800\n200\n100\n600\n900\n700\n400\n4 3\n1000\n1000\n1000\n0 0", "1800\n1000"]], "original": "function seach(x){\n   var flag=true;\n   var cnt=0;\n   var sum=0;\n   for(var i=0;i<ary.length;i++){\n      if(x<ary[i]){\n         flag=false;\n         break;\n      }else if(sum+ary[i]==x){\n         sum=0;\n         cnt++;\n      }else if(sum+ary[i]>x){\n         sum=ary[i];\n         cnt++;\n      }else if(sum+ary[i]<x){\n         sum+=ary[i];\n      }\n      if(cnt==m){\n         flag=false;\n         break;\n      }\n   }\n   return flag;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var mn=arr.shift();\n   if(mn==\"0 0\")break;\n   mn=mn.split(\" \").map(Number);\n   var m=mn[0];\n   var n=mn[1];\n   var ary=[];\n   while(n--)ary.push(arr.shift()-0);\n   var L=0;\n   var R=1500000\n   while(true){\n      var middle=Math.floor((L+R)/2);\n      if(seach(middle)){\n         R=middle-1;\n      }else{\n         L=middle+1;\n      }\n      if(L>R)break;\n   }\n   console.log(R+1);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 868, "deobfuscated": "function seach(x) {\n  var flag = true;\n  var cnt = 0;\n  var sum = 0;\n  for (var i = 0; i < ary.length; i++) {\n    if (x < ary[i]) {\n      flag = false;\n      break;\n    } else if (sum + ary[i] == x) {\n      sum = 0;\n      cnt++;\n    } else if (sum + ary[i] > x) {\n      sum = ary[i];\n      cnt++;\n    } else if (sum + ary[i] < x) {\n      sum += ary[i];\n    }\n    if (cnt == m) {\n      flag = false;\n      break;\n    }\n  }\n  return flag;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var mn = arr.shift();\n  if (mn == \"0 0\") {\n    break;\n  }\n  mn = mn.split(\" \").map(Number);\n  var m = mn[0];\n  var n = mn[1];\n  var ary = [];\n  while (n--) {\n    ary.push(arr.shift() - 0);\n  }\n  var L = 0;\n  var R = 1500000;\n  while (true) {\n    var middle = Math.floor((L + R) / 2);\n    if (seach(middle)) {\n      R = middle - 1;\n    } else {\n      L = middle + 1;\n    }\n    if (L > R) {\n      break;\n    }\n  }\n  console.log(R + 1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.544241905602044, "ngram_match_score": 0.05668962376553746, "weighted_ngram_match_score": 0.168762847127487, "syntax_match_score": 0.9515151515151515, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.012505863767540149, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05652173913043479, "new_decrease_halstead_effort": 0.13994995870515237}}
{"filename": "p00230_1", "type": "JavaScript", "obfuscated": "function bomb(){var obj={};var ans='NA';var leaf=[[0x0,0x0,0x0],[0x1,0x0,0x0]];while(!![]){if(leaf['length']==0x0)break;var ary=leaf['shift']();var x=ary[0x0];var y=ary[0x1];if(obj['hasOwnProperty'](x+','+y))continue;else obj[x+','+y]=!![];var cnt=ary[0x2];var v=xy[x][y];if(v==0x1){while(!![]){y++;if(xy[x][y]!=0x1){y--;break;}}}else if(v==0x2){while(!![]){y--;if(xy[x][y]!=0x2)break;}}if(y==n-0x1){ans=cnt;break;}for(var i=0x0;i<=0x2;i++)leaf['push']([0x1-x,y+i,cnt+0x1]);}return ans;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var xy=[];xy[0x0]=arr['shift']()['split']('\\x20')['map'](Number);xy[0x1]=arr['shift']()['split']('\\x20')['map'](Number);console['log'](bomb());}", "test_cases": [["8\n0 0 0 2 2 2 0 0\n1 1 1 1 0 0 0 0\n4\n1 1 2 2\n0 0 2 2\n0", "4\nNA"]], "original": "function bomb(){\n   var obj={};\n   var ans=\"NA\";\n   var leaf=[[0,0,0],[1,0,0]];\n   while(true){\n      if(leaf.length==0)break;\n      var ary=leaf.shift();\n      var x=ary[0];\n      var y=ary[1];\n      if(obj.hasOwnProperty(x+\",\"+y))continue;\n      else obj[x+\",\"+y]=true;\n      var cnt=ary[2];\n      var v=xy[x][y];\n      if(v==1){\n         while(true){\n            y++;\n            if(xy[x][y]!=1){\n               y--;\n               break;\n            }\n         }\n      }else if(v==2){\n         while(true){\n            y--;\n            if(xy[x][y]!=2)break;\n         }\n      }\n       if(y==n-1){\n         ans=cnt;\n         break;\n      }\n      for(var i=0;i<=2;i++)leaf.push([1-x,y+i,cnt+1]);\n   }\n   return ans;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var xy=[];\n   xy[0]=arr.shift().split(\" \").map(Number);\n   xy[1]=arr.shift().split(\" \").map(Number);\n   console.log(bomb());\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 869, "deobfuscated": "function bomb() {\n  var obj = {};\n  var ans = \"NA\";\n  var leaf = [[0, 0, 0], [1, 0, 0]];\n  while (true) {\n    if (leaf.length == 0) {\n      break;\n    }\n    var ary = leaf.shift();\n    var x = ary[0];\n    var y = ary[1];\n    if (obj.hasOwnProperty(x + \",\" + y)) {\n      continue;\n    } else {\n      obj[x + \",\" + y] = true;\n    }\n    var cnt = ary[2];\n    var v = xy[x][y];\n    if (v == 1) {\n      while (true) {\n        y++;\n        if (xy[x][y] != 1) {\n          y--;\n          break;\n        }\n      }\n    } else if (v == 2) {\n      while (true) {\n        y--;\n        if (xy[x][y] != 2) {\n          break;\n        }\n      }\n    }\n    if (y == n - 1) {\n      ans = cnt;\n      break;\n    }\n    for (var i = 0; i <= 2; i++) {\n      leaf.push([1 - x, y + i, cnt + 1]);\n    }\n  }\n  return ans;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var xy = [];\n  xy[0] = arr.shift().split(\" \").map(Number);\n  xy[1] = arr.shift().split(\" \").map(Number);\n  console.log(bomb());\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5381023212076532, "ngram_match_score": 0.0638854106041646, "weighted_ngram_match_score": 0.1934962499170562, "syntax_match_score": 0.8950276243093923, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00740155273308285, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05791505791505791, "new_decrease_halstead_effort": 0.12440191387559807}}
{"filename": "p00251_1", "type": "JavaScript", "obfuscated": "var plus=function(a,b){return a+b;};var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);var sum=0x0;console['log'](Arr['reduce'](plus));", "test_cases": [["1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "55"], ["4\n4\n8\n8\n8\n10\n10\n12\n16\n20", "100"]], "original": "var plus = function(a, b)\n{\n  return a + b;\n};\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar sum=0;\n\nconsole.log(Arr.reduce(plus));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 870, "deobfuscated": "function plus(a, b) {\n  return a + b;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nvar sum = 0;\nconsole.log(Arr.reduce(plus));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5713608933653317, "ngram_match_score": 0.2830956597218095, "weighted_ngram_match_score": 0.3228024591940627, "syntax_match_score": 0.725, "dataflow_match_score": 0.9545454545454546}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06000000000000005, "new_decrease_halstead_effort": 0.06131933401949785}}
{"filename": "p00423_1", "type": "JavaScript", "obfuscated": "(function(stdin){var lines=stdin['trim']()['split']('\\x0a');while(0x1){var line=lines['shift']();if(line=='0'){break;}var n=Number(line);var a=0x0,b=0x0;for(var i=0x0;i<n;i++){var numbers=lines['shift']()['split']('\\x20')['map'](Number);if(numbers[0x0]==numbers[0x1]){a+=numbers[0x0];b+=numbers[0x0];}else if(numbers[0x0]>numbers[0x1]){a+=numbers[0x0]+numbers[0x1];}else{b+=numbers[0x0]+numbers[0x1];}}console['log']([a,b]['join']('\\x20'));}}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n9 1\n5 4\n0 8\n3\n9 1\n5 4\n1 0\n3\n9 1\n5 5\n1 8\n0", "19 8\n20 0\n15 14"]], "original": "(function(stdin) {\n  var lines = stdin.trim().split('\\n');\n  while(1) {\n    var line = lines.shift();\n    if (line == '0') {\n      break;\n    }\n    var n = Number(line);\n    var a = 0, b = 0;\n    for (var i = 0; i < n; i++) {\n      var numbers = lines.shift().split(' ').map(Number);\n      if (numbers[0] == numbers[1]) {\n        a += numbers[0];\n        b += numbers[0];\n      } else if (numbers[0] > numbers[1]) {\n        a += numbers[0] + numbers[1];\n      } else {\n      \tb += numbers[0] + numbers[1];\n      }\n    }\n    console.log([a, b].join(' '));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 871, "deobfuscated": "(function (stdin) {\n  var lines = stdin.trim().split(\"\\n\");\n  while (1) {\n    var line = lines.shift();\n    if (line == \"0\") {\n      break;\n    }\n    var n = Number(line);\n    var a = 0;\n    var b = 0;\n    for (var i = 0; i < n; i++) {\n      var numbers = lines.shift().split(\" \").map(Number);\n      if (numbers[0] == numbers[1]) {\n        a += numbers[0];\n        b += numbers[0];\n      } else if (numbers[0] > numbers[1]) {\n        a += numbers[0] + numbers[1];\n      } else {\n        b += numbers[0] + numbers[1];\n      }\n    }\n    console.log([a, b].join(\" \"));\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8553968406970214, "ngram_match_score": 0.7542009464855428, "weighted_ngram_match_score": 0.7915622404783669, "syntax_match_score": 0.9142857142857143, "dataflow_match_score": 0.9615384615384616}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0003154208830967731, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.007518796992481258, "new_decrease_halstead_effort": -0.007518796992481258}}
{"filename": "p00740_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var np=Arr['shift']();if(np=='0\\x200')break;np=np['split']('\\x20')['map'](Number);var n=np[0x0];var p=np[0x1];var sum=p;var arr=[];for(var i=0x0;i<n;i++)arr['push'](0x0);var j=0x0;for(var i=0x0;i<0xf4240;i++){if(j==arr['length'])j=0x0;if(p>0x0){p--;arr[j]++;if(p==0x0&&sum==arr[j]){console['log'](j);break;}}else{p=arr[j];arr[j]=0x0;}j++;}}", "test_cases": [["3 2\n3 3\n3 50\n10 29\n31 32\n50 2\n50 50\n0 0", "1\n0\n1\n5\n30\n1\n13"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var np=Arr.shift();\n   if(np==\"0 0\")break;\n   np=np.split(\" \").map(Number);\n   var n=np[0];\n   var p=np[1];\n   var sum=p;\n   var arr=[];\n   for(var i=0;i<n;i++)arr.push(0);\n   var j=0;\n   for(var i=0;i<1000000;i++){\n      if(j==arr.length)j=0;\n      if(p>0){\n         p--;\n         arr[j]++;\n         if(p==0 && sum==arr[j]){console.log(j);break;}\n      }else{\n         p=arr[j];\n         arr[j]=0;\n      }\n      j++;\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 872, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var np = Arr.shift();\n  if (np == \"0 0\") {\n    break;\n  }\n  np = np.split(\" \").map(Number);\n  var n = np[0];\n  var p = np[1];\n  var sum = p;\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    arr.push(0);\n  }\n  var j = 0;\n  for (var i = 0; i < 1000000; i++) {\n    if (j == arr.length) {\n      j = 0;\n    }\n    if (p > 0) {\n      p--;\n      arr[j]++;\n      if (p == 0 && sum == arr[j]) {\n        console.log(j);\n        break;\n      }\n    } else {\n      p = arr[j];\n      arr[j] = 0;\n    }\n    j++;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5110327500632448, "ngram_match_score": 0.04026998525752388, "weighted_ngram_match_score": 0.12204283317727371, "syntax_match_score": 0.8818181818181818, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004713972788328302, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020270270270270285, "new_decrease_halstead_effort": 0.10764654597671663}}
{"filename": "p00748_1", "type": "JavaScript", "obfuscated": "var a=[0x1];for(var i=0x1;i<0x186a0;i++)a[i]=a[i-0x1]+i+0x1;var b=[0x1];var i=0x1;while(!![]){b[i]=b[i-0x1]+a[i];if(b[i]>0x186a0)break;i++;}var dpA=[];var dpB=[];for(var i=0x0;i<0x186a0;i++)dpA[i]=Infinity;for(var i=0x0;i<0x186a0;i++)dpB[i]=Infinity;dpA[0x0]=0x0;dpB[0x0]=0x0;for(var i=0x0;i<0x186a0;i++){for(var j=0x0;j<b['length'];j++){if(i-b[j]>=0x0)dpA[i]=Math['min'](dpA[i-b[j]]+0x1,dpA[i]);if(b[j]%0x2==0x1&&i-b[j]>=0x0)dpB[i]=Math['min'](dpB[i-b[j]]+0x1,dpB[i]);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);while(!![]){var n=arr['shift']();if(n==0x0)break;console['log'](dpA[n]+'\\x20'+dpB[n]);}", "test_cases": [["40\n14\n5\n165\n120\n103\n106\n139\n0", "2 6\n2 14\n2 5\n1 1\n1 18\n5 35\n4 4\n3 37"]], "original": "var a=[1];\nfor(var i=1;i<100000;i++)a[i]=a[i-1]+i+1;\nvar b=[1];\nvar i=1;\nwhile(true){\n   b[i]=b[i-1]+a[i];\n   if(b[i]>100000)break;\n   i++;\n}\nvar dpA=[];\nvar dpB=[];\nfor(var i=0;i<100000;i++)dpA[i]=Infinity;\nfor(var i=0;i<100000;i++)dpB[i]=Infinity;\ndpA[0]=0;\ndpB[0]=0;\nfor(var i=0;i<100000;i++){\n   for(var j=0;j<b.length;j++){\n      if(i-b[j]>=0)dpA[i]=Math.min(dpA[i-b[j]]+1,dpA[i]);\n      if(b[j]%2==1 && i-b[j]>=0)dpB[i]=Math.min(dpB[i-b[j]]+1,dpB[i]);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   console.log(dpA[n]+\" \"+dpB[n]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 873, "deobfuscated": "var a = [1];\nfor (var i = 1; i < 100000; i++) {\n  a[i] = a[i - 1] + i + 1;\n}\nvar b = [1];\nvar i = 1;\nwhile (true) {\n  b[i] = b[i - 1] + a[i];\n  if (b[i] > 100000) {\n    break;\n  }\n  i++;\n}\nvar dpA = [];\nvar dpB = [];\nfor (var i = 0; i < 100000; i++) {\n  dpA[i] = Infinity;\n}\nfor (var i = 0; i < 100000; i++) {\n  dpB[i] = Infinity;\n}\ndpA[0] = 0;\ndpB[0] = 0;\nfor (var i = 0; i < 100000; i++) {\n  for (var j = 0; j < b.length; j++) {\n    if (i - b[j] >= 0) {\n      dpA[i] = Math.min(dpA[i - b[j]] + 1, dpA[i]);\n    }\n    if (b[j] % 2 == 1 && i - b[j] >= 0) {\n      dpB[i] = Math.min(dpB[i - b[j]] + 1, dpB[i]);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nwhile (true) {\n  var n = arr.shift();\n  if (n == 0) {\n    break;\n  }\n  console.log(dpA[n] + \" \" + dpB[n]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5161538077394341, "ngram_match_score": 0.02900493627122564, "weighted_ngram_match_score": 0.13376980388896462, "syntax_match_score": 0.901840490797546, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004944085055350378, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023255813953488413, "new_decrease_halstead_effort": 0.10270390564148224}}
{"filename": "p00760_1", "type": "JavaScript", "obfuscated": "const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();const lines=input['trim']()['split']('\\x0a');const nextDay=(y,m,d)=>{d=d+0x1;if(y%0x3===0x0){if(d>0x14){d=0x1;m+=0x1;if(m===0xb){m=0x1;y++;}}}else{if(d>0x14){d=0x1;m+=0x1;if(m===0xb){m=0x1;y++;}}else if(d>0x13&&m%0x2===0x0){d=0x1;m+=0x1;if(m===0xb){m=0x1;y++;}}}return[y,m,d];};lines['shift']();lines['forEach'](line=>{let [y,m,d]=line['trim']()['split']('\\x20')['map'](Number);let count=0x1;while(y!==0x3e8||m!==0x1||d!==0x1){[y,m,d]=nextDay(y,m,d);count++;}console['log'](count-0x1);});", "test_cases": [["8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20", "196470\n128976\n59710\n160715\n252\n128977\n59712\n1"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').trim()\nconst lines = input.trim().split(\"\\n\")\n\nconst nextDay = (y,m,d) => {\n    d = d + 1\n    if(y%3 === 0) {\n        if(d > 20) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        }\n    } else {\n        if(d > 20) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        } else if(d > 19 && m %2 === 0) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        }\n    }\n    return [y,m,d]\n}\nlines.shift()\nlines.forEach(line => {\n    let [y,m,d] = line.trim().split(' ').map(Number)\n    let count = 1\n    while (y !== 1000 || m !== 1 || d !== 1) {\n         [y,m,d] = nextDay(y,m,d)\n        count++\n    }\n    console.log(count - 1)\n})\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 874, "deobfuscated": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nconst lines = input.trim().split(\"\\n\");\nconst nextDay = (y, m, d) => {\n  d = d + 1;\n  if (y % 3 === 0) {\n    if (d > 20) {\n      d = 1;\n      m += 1;\n      if (m === 11) {\n        m = 1;\n        y++;\n      }\n    }\n  } else if (d > 20) {\n    d = 1;\n    m += 1;\n    if (m === 11) {\n      m = 1;\n      y++;\n    }\n  } else if (d > 19 && m % 2 === 0) {\n    d = 1;\n    m += 1;\n    if (m === 11) {\n      m = 1;\n      y++;\n    }\n  }\n  return [y, m, d];\n};\nlines.shift();\nlines.forEach(line => {\n  let [y, m, d] = line.trim().split(\" \").map(Number);\n  let count = 1;\n  while (y !== 1000 || m !== 1 || d !== 1) {\n    [y, m, d] = nextDay(y, m, d);\n    count++;\n  }\n  console.log(count - 1);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6644356768475691, "ngram_match_score": 0.3630219102449838, "weighted_ngram_match_score": 0.42208047497061374, "syntax_match_score": 0.9416058394160584, "dataflow_match_score": 0.9310344827586207}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01049_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var [a,d]=arr['shift']()['split']('\\x20')['map'](Number);var retu=[];for(var i=0x0;i<n;i++){retu['push'](a+i*d);}var m=arr['shift']()-0x0;for(var i=0x0;i<m;i++){var [x,y,z]=arr['shift']()['split']('\\x20')['map'](Number);if(x==0x0)[retu[y-0x1],retu[z-0x1]]=[retu[z-0x1],retu[y-0x1]];else retu[y-0x1]=retu[z-0x1];}var k=arr['shift']()-0x0;console['log'](retu[k-0x1]);", "test_cases": [["5\n2 3\n3\n0 2 5\n0 3 5\n1 2 4\n2", "11"], ["6\n5 5\n4\n0 1 2\n1 1 2\n0 4 1\n1 1 6\n3", "15"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar [a,d]=arr.shift().split(\" \").map(Number);\nvar retu=[];\nfor(var i=0;i<n;i++){\n   retu.push(a+i*d);\n}\nvar m=arr.shift()-0;\nfor(var i=0;i<m;i++){\n   var [x,y,z] = arr.shift().split(\" \").map(Number);\n   if(x==0) [retu[y-1],retu[z-1]]=[retu[z-1],retu[y-1]]\n   else retu[y-1]=retu[z-1];\n}\nvar k=arr.shift()-0;\nconsole.log(retu[k-1]);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 875, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar [a, d] = arr.shift().split(\" \").map(Number);\nvar retu = [];\nfor (var i = 0; i < n; i++) {\n  retu.push(a + i * d);\n}\nvar m = arr.shift() - 0;\nfor (var i = 0; i < m; i++) {\n  var [x, y, z] = arr.shift().split(\" \").map(Number);\n  if (x == 0) {\n    [retu[y - 1], retu[z - 1]] = [retu[z - 1], retu[y - 1]];\n  } else {\n    retu[y - 1] = retu[z - 1];\n  }\n}\nvar k = arr.shift() - 0;\nconsole.log(retu[k - 1]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5134241158674735, "ngram_match_score": 0.02282487613364357, "weighted_ngram_match_score": 0.0743498482058156, "syntax_match_score": 0.9565217391304348, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01273_1", "type": "JavaScript", "obfuscated": "var data=require('fs')['readFileSync']('/dev/stdin','utf8');var input=data['trim']()['split']('\\x0a');var line=0x0;while(!![]){var nm=input[line]['split']('\\x20')['map'](Number);line++;var n=nm[0x0];var m=nm[0x1];if(n==0x0&&m==0x0)break;var infected=[];for(var i=0x0;i<n;i++)infected[i]=!![];infected[0x0]=![];var tsd=[];for(var i=0x0;i<m;i++){var packet=input[line]['split']('\\x20')['map'](Number);line++;tsd['push']([packet[0x0],packet[0x1]-0x1,packet[0x2]-0x1]);}tsd['sort'](function(a,b){return a[0x0]-b[0x0];});tsd['forEach'](function(packet){var s=packet[0x1];var d=packet[0x2];if(!infected[s])infected[d]=![];});var answer=0x0;infected['forEach'](function(packet){if(!packet)answer++;});console['log'](answer);}", "test_cases": [["3 2\n1 1 2\n2 2 3\n3 2\n2 3 2\n1 2 1\n0 0", "3\n1"]], "original": "var data = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar input = data.trim().split(\"\\n\");\nvar line = 0;\nwhile (true) {\n    var nm = input[line].split(\" \").map(Number);\n    line++;\n    var n = nm[0];\n    var m = nm[1];\n    if (n == 0 && m == 0)\n        break;\n    var infected = [];\n    for (var i = 0; i < n; i++)\n        infected[i] = true;\n    infected[0] = false;\n    var tsd = [];\n    for (var i = 0; i < m; i++) {\n        var packet = input[line].split(\" \").map(Number);\n        line++;\n        tsd.push([packet[0], packet[1] - 1, packet[2] - 1]);\n    }\n    tsd.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n    tsd.forEach(function (packet) {\n        var s = packet[1];\n        var d = packet[2];\n        if (!infected[s])\n            infected[d] = false;\n    });\n    var answer = 0;\n    infected.forEach(function (packet) {\n        if (!packet)\n            answer++;\n    });\n    console.log(answer);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 876, "deobfuscated": "var data = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar input = data.trim().split(\"\\n\");\nvar line = 0;\nwhile (true) {\n  var nm = input[line].split(\" \").map(Number);\n  line++;\n  var n = nm[0];\n  var m = nm[1];\n  if (n == 0 && m == 0) {\n    break;\n  }\n  var infected = [];\n  for (var i = 0; i < n; i++) {\n    infected[i] = true;\n  }\n  infected[0] = false;\n  var tsd = [];\n  for (var i = 0; i < m; i++) {\n    var packet = input[line].split(\" \").map(Number);\n    line++;\n    tsd.push([packet[0], packet[1] - 1, packet[2] - 1]);\n  }\n  tsd.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  tsd.forEach(function (packet) {\n    var s = packet[1];\n    var d = packet[2];\n    if (!infected[s]) {\n      infected[d] = false;\n    }\n  });\n  var answer = 0;\n  infected.forEach(function (packet) {\n    if (!packet) {\n      answer++;\n    }\n  });\n  console.log(answer);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8992221048134426, "ngram_match_score": 0.8295185303426389, "weighted_ngram_match_score": 0.8846112682214763, "syntax_match_score": 0.8827586206896552, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005774172459479754, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04629629629629628, "new_decrease_halstead_effort": 0.08923093617708988}}
{"filename": "p01314_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');for(var i=0x0;0x1;i++){var n=parseInt(input[i],0xa);var ans=0x0;if(n==0x0)break;for(var j=0x2;j<n;j++){if(n-j*(j-0x1)/0x2>0x0&&(n-j*(j-0x1)/0x2)%j==0x0){ans++;}}console['log'](ans);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["9\n500\n0", "2\n3"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    for(var i = 0;1;i++){\n        var n = parseInt(input[i],10);var ans = 0;\n        if(n == 0)\n            break;\n        for(var j = 2;j < n;j++){\n            if(n - j * (j - 1) / 2 > 0 && (n - j * (j - 1) / 2) % j == 0){\n                ans++;\n            }\n        }\n        console.log(ans);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 877, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  for (var i = 0; 1; i++) {\n    var n = parseInt(input[i], 10);\n    var ans = 0;\n    if (n == 0) {\n      break;\n    }\n    for (var j = 2; j < n; j++) {\n      if (n - j * (j - 1) / 2 > 0 && (n - j * (j - 1) / 2) % j == 0) {\n        ans++;\n      }\n    }\n    console.log(ans);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7321586645646988, "ngram_match_score": 0.43962711593313736, "weighted_ngram_match_score": 0.5759640640647885, "syntax_match_score": 0.9130434782608695, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01316_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var nm=arr['shift']()['split']('\\x20');if(nm['join']('\\x20')=='0\\x200')break;var n=nm[0x0];var m=nm[0x1];var M=[];for(var i=0x0;i<m;i++)M['push'](arr['shift']()-0x0);var N=[];for(var i=0x0;i<n;i++)N['push'](arr['shift']()-0x0);var dp=[];for(var i=0x0;i<=n;i++){dp[i]=[];for(var j=0x0;j<=0xff;j++){dp[i][j]=Infinity;}}dp[0x0][0x80]=0x0;for(var i=0x1;i<=n;i++){for(var j=0x0;j<=0xff;j++){if(dp[i-0x1][j]!=Infinity){for(var k=0x0;k<m;k++){var jm=j+M[k];if(jm<0x0)jm=0x0;if(jm>0xff)jm=0xff;dp[i][jm]=Math['min'](dp[i][jm],dp[i-0x1][j]+Math['pow'](N[i-0x1]-jm,0x2));}}}}var min=Infinity;dp[n]['forEach'](function(v){min=Math['min'](min,v);});console['log'](min);}", "test_cases": [["2 7\n4\n2\n1\n0\n-1\n-2\n-4\n131\n137\n2 7\n4\n2\n1\n0\n-1\n-2\n-4\n131\n123\n10 7\n-4\n-2\n-1\n0\n1\n2\n4\n132\n134\n135\n134\n132\n128\n124\n122\n121\n122\n5 1\n255\n0\n0\n0\n0\n0\n4 1\n0\n255\n0\n255\n0\n0 0", "2\n8\n0\n325125\n65026"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nm=arr.shift().split(\" \");\n   if(nm.join(\" \")==\"0 0\")break;\n   var n=nm[0];\n   var m=nm[1];\n   var M=[];\n   for(var i=0;i<m;i++)M.push(arr.shift()-0);\n   var N=[];\n   for(var i=0;i<n;i++)N.push(arr.shift()-0);\n   var dp=[];\n   for(var i=0;i<=n;i++){\n      dp[i]=[];\n      for(var j=0;j<=255;j++){\n         dp[i][j]=Infinity;\n      }\n   }\n   dp[0][128]=0;\n   for(var i=1;i<=n;i++){\n      for(var j=0;j<=255;j++){\n         if(dp[i-1][j]!=Infinity){\n            for(var k=0;k<m;k++){\n               var jm=j+M[k];\n               if(jm<0)jm=0;\n               if(jm>255)jm=255;\n               dp[i][jm]=Math.min(dp[i][jm],dp[i-1][j]+Math.pow(N[i-1]-jm,2));\n            }\n         }\n      }\n   }\n   var min=Infinity;\n   dp[n].forEach(function(v){\n      min=Math.min(min,v);\n   });\n   console.log(min);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 878, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = arr.shift().split(\" \");\n  if (nm.join(\" \") == \"0 0\") {\n    break;\n  }\n  var n = nm[0];\n  var m = nm[1];\n  var M = [];\n  for (var i = 0; i < m; i++) {\n    M.push(arr.shift() - 0);\n  }\n  var N = [];\n  for (var i = 0; i < n; i++) {\n    N.push(arr.shift() - 0);\n  }\n  var dp = [];\n  for (var i = 0; i <= n; i++) {\n    dp[i] = [];\n    for (var j = 0; j <= 255; j++) {\n      dp[i][j] = Infinity;\n    }\n  }\n  dp[0][128] = 0;\n  for (var i = 1; i <= n; i++) {\n    for (var j = 0; j <= 255; j++) {\n      if (dp[i - 1][j] != Infinity) {\n        for (var k = 0; k < m; k++) {\n          var jm = j + M[k];\n          if (jm < 0) {\n            jm = 0;\n          }\n          if (jm > 255) {\n            jm = 255;\n          }\n          dp[i][jm] = Math.min(dp[i][jm], dp[i - 1][j] + Math.pow(N[i - 1] - jm, 2));\n        }\n      }\n    }\n  }\n  var min = Infinity;\n  dp[n].forEach(function (v) {\n    min = Math.min(min, v);\n  });\n  console.log(min);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5199909239684681, "ngram_match_score": 0.034121383965357965, "weighted_ngram_match_score": 0.13005283822430425, "syntax_match_score": 0.9157894736842105, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00446371011947877, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.010830324909747335, "new_decrease_halstead_effort": 0.06682056488958754}}
{"filename": "p01479_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var str=input['replace'](/egg/g,'E')['replace'](/chicken/g,'C');var ary=str['replace'](/EE/g,'EAE')['replace'](/CC/g,'CAC')['split']('A');var ans='';ary['forEach'](function(v){if(ans['length']<v['length'])ans=v;});console['log'](ans['slice'](-0x1)=='E'?'egg':'chicken');", "test_cases": [["eggchickenegg", "egg"], ["chickeneggeggchicken", "egg"], ["eggeggchicken", "chicken"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str=input.replace(/egg/g,\"E\").replace(/chicken/g,\"C\");\nvar ary=str.replace(/EE/g,\"EAE\").replace(/CC/g,\"CAC\").split(\"A\");\nvar ans=\"\";\nary.forEach(function(v){\n   if(ans.length<v.length)ans=v;\n});\nconsole.log((ans.slice(-1)==\"E\")?\"egg\":\"chicken\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 879, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar str = input.replace(/egg/g, \"E\").replace(/chicken/g, \"C\");\nvar ary = str.replace(/EE/g, \"EAE\").replace(/CC/g, \"CAC\").split(\"A\");\nvar ans = \"\";\nary.forEach(function (v) {\n  if (ans.length < v.length) {\n    ans = v;\n  }\n});\nconsole.log(ans.slice(-1) == \"E\" ? \"egg\" : \"chicken\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4867275453576799, "ngram_match_score": 0.027549200259075004, "weighted_ngram_match_score": 0.09078955260021615, "syntax_match_score": 0.8285714285714286, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02234_1", "type": "JavaScript", "obfuscated": "config={'input':'/dev/stdin','newline':'\\x0a'};M=require('fs')['readFileSync'](config['input'],'ascii')['trim']()['split'](config['newline']);M=M['map'](function(line){return line['split']('\\x20')['map'](Number);});n=M[0x0][0x0];min={};for(i=0x1;i<=n;i++)min[i]={};for(i=0x1;i<=n;i++)min[i][i]=0x0;for(i=0x1;i<n;i++){for(j=0x1,k=0x1+i;k<=n;j++,k++){min[j][k]=Number['MAX_VALUE'];for(l=j;l<k;l++){min[j][k]=Math['min'](min[j][k],M[j][0x0]*M[l][0x1]*M[k][0x1]+min[j][l]+min[l+0x1][k]);}}}console['log'](min[0x1][n]);", "test_cases": [["6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25", "15125"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nM = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline);\nM = M.map(\n  function (line) {\n    return line.split(' ').map(Number);\n  });\nn = M[0][0];\n\nmin = {};\nfor (i = 1; i <= n; i++) min[i] = {};\nfor (i = 1; i <= n; i++) min[i][i] = 0;\nfor (i = 1; i < n; i++) {\n  for (j = 1, k = 1 + i; k <= n; j++, k++) {\n    min[j][k] = Number.MAX_VALUE;\n    for (l = j; l < k; l++) {\n      min[j][k] = Math.min(\n        min[j][k],\n        M[j][0] * M[l][1] * M[k][1] + min[j][l] + min[l+1][k]);\n    }\n  }\n}\nconsole.log(min[1][n]);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 880, "deobfuscated": "config = {\n  input: \"/dev/stdin\",\n  newline: \"\\n\"\n};\nM = require(\"fs\").readFileSync(config.input, \"ascii\").trim().split(config.newline);\nM = M.map(function (line) {\n  return line.split(\" \").map(Number);\n});\nn = M[0][0];\nmin = {};\nfor (i = 1; i <= n; i++) {\n  min[i] = {};\n}\nfor (i = 1; i <= n; i++) {\n  min[i][i] = 0;\n}\nfor (i = 1; i < n; i++) {\n  j = 1;\n  k = 1 + i;\n  for (; k <= n; j++, k++) {\n    min[j][k] = Number.MAX_VALUE;\n    for (l = j; l < k; l++) {\n      min[j][k] = Math.min(min[j][k], M[j][0] * M[l][1] * M[k][1] + min[j][l] + min[l + 1][k]);\n    }\n  }\n}\nconsole.log(min[1][n]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7726806445578711, "ngram_match_score": 0.5743293551265093, "weighted_ngram_match_score": 0.5784087269809441, "syntax_match_score": 0.937984496124031, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.11111111111111116, "length_score": -0.11111111111111116, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02801091635655495}}
{"filename": "p02250_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var str=arr[0x0];var n=arr[0x1]-0x0+0x2;var ans='';for(var i=0x2;i<n;i++){ans+=(str['includes'](arr[i])?0x1:0x0)+'\\x0a';}console['log'](ans['trim']());", "test_cases": [["aabaaa\n4\naa\nba\nbb\nxyz", "1\n1\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar str=arr[0];\nvar n = (arr[1]-0)+2;\nvar ans=\"\";\nfor(var i=2;i<n;i++){\n   ans += (str.includes(arr[i])?1:0) +\"\\n\";\n}\nconsole.log(ans.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 881, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar str = arr[0];\nvar n = arr[1] - 0 + 2;\nvar ans = \"\";\nfor (var i = 2; i < n; i++) {\n  ans += (str.includes(arr[i]) ? 1 : 0) + \"\\n\";\n}\nconsole.log(ans.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5844442986120664, "ngram_match_score": 0.14216972595674, "weighted_ngram_match_score": 0.2848931827772397, "syntax_match_score": 0.9107142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02343_1", "type": "JavaScript", "obfuscated": "const findSet=p=>{return x=>{if(x!=p[x])p[x]=findSet(p)(p[x]);return p[x];};};const link=(p,r)=>{return(x,y)=>{if(r[x]>r[y])p[y]=x;else{p[x]=y;if(r[x]===r[y])r[y]++;}};};const dsFactory=n=>{this['p']=[];this['r']=[];for(let i=0x0;i<n;i++){this['p'][i]=i;this['r'][i]=0x0;}this['findSet']=findSet(this['p']);this['link']=link(this['p'],this['r']);return{'same':(x,y)=>this['findSet'](x)===this['findSet'](y),'unite':(x,y)=>this['link'](this['findSet'](x),this['findSet'](y))};};const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\\x0a');const [n,q]=lines['shift']()['split']('\\x20')['map'](Number);const ds=dsFactory(n);lines['forEach'](x=>{const [t,a,b]=x['split']('\\x20')['map'](Number);switch(t){case 0x0:ds['unite'](a,b);break;case 0x1:const ret=ds['same'](a,b)?0x1:0x0;console['log'](ret);break;}});", "test_cases": [["5 12\n0 1 4\n0 2 3\n1 1 2\n1 3 4\n1 1 4\n1 3 2\n0 1 3\n1 2 4\n1 3 0\n0 0 4\n1 0 2\n1 3 0", "0\n0\n1\n1\n1\n0\n1\n1"]], "original": "const findSet = p => {\n\treturn x => {\n\t\tif (x != p[x]) p[x] = findSet(p)(p[x]);\n\t\treturn p[x];\n\t}\n}\nconst link = (p,r) => {\n\treturn (x,y) => {\n\t\tif (r[x] > r[y]) p[y] = x;\n\t\telse {\n\t\t\tp[x] = y;\n\t\t\tif (r[x] === r[y]) r[y]++;\n\t\t}\n\t}\n}\nconst dsFactory = n => {\n\tthis.p = [];\n\tthis.r = [];\n\tfor (let i = 0; i < n; i++) {\n\t\tthis.p[i] = i;\n\t\tthis.r[i] = 0;\n\t}\n\tthis.findSet = findSet(this.p);\n\tthis.link = link(this.p,this.r);\n\treturn {\n\t\tsame: (x,y) => this.findSet(x) === this.findSet(y),\n\t\tunite: (x,y) => this.link(this.findSet(x),this.findSet(y))\n\t}\n}\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst lines = input.split(\"\\n\");\nconst [n,q] = lines.shift().split(\" \").map(Number);\n\nconst ds = dsFactory(n);\n\nlines.forEach(x => {\n\tconst [t,a,b] = x.split(\" \").map(Number);\n\tswitch (t) {\n\t\tcase 0:\n\t\t\tds.unite(a,b);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tconst ret = ds.same(a,b) ? 1 : 0;\n\t\t\tconsole.log(ret);\n\t\t\tbreak;\n\t}\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 882, "deobfuscated": "const findSet = p => {\n  return x => {\n    if (x != p[x]) {\n      p[x] = findSet(p)(p[x]);\n    }\n    return p[x];\n  };\n};\nconst link = (p, r) => {\n  return (x, y) => {\n    if (r[x] > r[y]) {\n      p[y] = x;\n    } else {\n      p[x] = y;\n      if (r[x] === r[y]) {\n        r[y]++;\n      }\n    }\n  };\n};\nconst dsFactory = n => {\n  this.p = [];\n  this.r = [];\n  for (let i = 0; i < n; i++) {\n    this.p[i] = i;\n    this.r[i] = 0;\n  }\n  this.findSet = findSet(this.p);\n  this.link = link(this.p, this.r);\n  return {\n    same: (x, y) => this.findSet(x) === this.findSet(y),\n    unite: (x, y) => this.link(this.findSet(x), this.findSet(y))\n  };\n};\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst lines = input.split(\"\\n\");\nconst [n, q] = lines.shift().split(\" \").map(Number);\nconst ds = dsFactory(n);\nlines.forEach(x => {\n  const [t, a, b] = x.split(\" \").map(Number);\n  switch (t) {\n    case 0:\n      ds.unite(a, b);\n      break;\n    case 1:\n      const ret = ds.same(a, b) ? 1 : 0;\n      console.log(ret);\n      break;\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8034188887449374, "ngram_match_score": 0.6208051012809123, "weighted_ngram_match_score": 0.7003973354192674, "syntax_match_score": 0.8924731182795699, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02555_1", "type": "JavaScript", "obfuscated": "const main=input=>{const mod=0xa**0x9+0x7;const s=Number(input['trim']());const dp=[0x1,...new Array(s)['fill'](0x0)];for(let x=0x3;x<dp['length'];x++){let sum=0x0;for(let i=x-0x3;i>=0x0;i--){sum=(sum+dp[i])%mod;}dp[x]=sum;}return console['log']((dp[s]%mod+mod)%mod);};process['env']['MYTEST']?process['env']['MYTEST']==='test'?test():main(require('fs')['readFileSync']('dev/stdin','utf8')):main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7", "3"], ["2", "0"], ["1729", "294867501"]], "original": "const main = (input) => {\n  const mod = (10**9 + 7)\n  const s = Number(input.trim())\n\n  const dp = [1, ...new Array(s).fill(0)]\n\n  for (let x=3; x<dp.length; x++) {\n    let sum = 0\n\n    for (let i=x-3; i>=0; i--) {\n      sum = (sum + dp[i]) % mod\n    }\n\n    dp[x] = sum\n  }\n\n  return console.log((dp[s] % mod + mod) % mod)\n}\n\nprocess.env.MYTEST\n  ? (process.env.MYTEST === 'test' ? test() : main(require('fs').readFileSync('dev/stdin', 'utf8')))\n  : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 883, "deobfuscated": "const main = input => {\n  const mod = 1000000007;\n  const s = Number(input.trim());\n  const dp = [1, ...new Array(s).fill(0)];\n  for (let x = 3; x < dp.length; x++) {\n    let sum = 0;\n    for (let i = x - 3; i >= 0; i--) {\n      sum = (sum + dp[i]) % mod;\n    }\n    dp[x] = sum;\n  }\n  return console.log((dp[s] % mod + mod) % mod);\n};\nif (process.env.MYTEST) {\n  if (process.env.MYTEST === \"test\") {\n    test();\n  } else {\n    main(require(\"fs\").readFileSync(\"dev/stdin\", \"utf8\"));\n  }\n} else {\n  main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4448775102045876, "ngram_match_score": 0.3259450997336213, "weighted_ngram_match_score": 0.4153812465542855, "syntax_match_score": 0.8421052631578947, "dataflow_match_score": 0.19607843137254902}, "code_complexity": {"difference_score": 3.0, "length_score": -3.0, "increase_maintainability": -0.17018862252113065, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.05128205128205132, "new_decrease_halstead_effort": -0.2494385246497468}}
{"filename": "p02678_1", "type": "JavaScript", "obfuscated": "(args=>{const [[N,M],...path]=args['trim']()['split']('\\x0a')['map'](a=>a['split']('\\x20')['map'](a=>a|0x0));const dist=[],sign=[0x0],branch=[];for(let i=0x1;i<=N;i++){dist[i]=Infinity;sign[i]=Infinity;branch[i]=[];}for(let i=0x0;i<M;i++){const [A,B]=path[i];branch[A]['push'](B);branch[B]['push'](A);}let stack=[];function mark(step,i){for(let next of branch[i]){if(dist[next]>step){dist[next]=step;sign[next]=i;stack['push'](()=>mark(step+0x1,next));}}}mark(0x0,0x1);while(stack['length']){let s;while(s=stack['pop']())s();}if(sign['slice'](0x2)['some'](v=>v>N))return console['log']('No');console['log']('Yes\\x0a'+sign['slice'](0x2)['join']('\\x0a'));})(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 4\n1 2\n2 3\n3 4\n4 2", "Yes\n1\n2\n2"], ["6 9\n3 4\n6 1\n2 4\n5 3\n4 6\n1 5\n6 2\n4 5\n5 6", "Yes\n6\n5\n5\n1\n1"]], "original": "(args => {\n  const [[N,M],...path] = args.trim().split('\\n').map(a=>a.split(' ').map(a=>a|0));\n  const dist = [], sign = [0], branch = [];\n  for ( let i = 1; i <= N; i++ ) {\n    dist[i] = Infinity; sign[i] = Infinity; branch[i] = [];\n  }\n  for ( let i = 0; i < M; i++ ) {\n    const [A,B] = path[i];\n    branch[A].push(B);\n    branch[B].push(A);\n  }\n  let stack = [];\n  function mark( step, i ) {\n    for ( let next of branch[i] ) {\n      if ( dist[next] > step ) {\n        dist[next] = step;\n        sign[next] = i;\n        stack.push(()=>mark(step+1,next));\n      }\n    }\n  }\n  mark(0,1);\n  while( stack.length ) {\n    let s;\n    while ( s = stack.pop() ) s();\n  }\n  if ( sign.slice(2).some(v=>v>N) ) return console.log('No');\n  console.log('Yes\\n'+sign.slice(2).join('\\n'));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 884, "deobfuscated": "(args => {\n  const [[N, M], ...path] = args.trim().split(\"\\n\").map(a => a.split(\" \").map(a => a | 0));\n  const dist = [];\n  const sign = [0];\n  const branch = [];\n  for (let i = 1; i <= N; i++) {\n    dist[i] = Infinity;\n    sign[i] = Infinity;\n    branch[i] = [];\n  }\n  for (let i = 0; i < M; i++) {\n    const [A, B] = path[i];\n    branch[A].push(B);\n    branch[B].push(A);\n  }\n  let stack = [];\n  function mark(step, i) {\n    for (let next of branch[i]) {\n      if (dist[next] > step) {\n        dist[next] = step;\n        sign[next] = i;\n        stack.push(() => mark(step + 1, next));\n      }\n    }\n  }\n  mark(0, 1);\n  while (stack.length) {\n    let s;\n    while (s = stack.pop()) {\n      s();\n    }\n  }\n  if (sign.slice(2).some(v => v > N)) {\n    return console.log(\"No\");\n  }\n  console.log(\"Yes\\n\" + sign.slice(2).join(\"\\n\"));\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.641888799207824, "ngram_match_score": 0.3645267199297242, "weighted_ngram_match_score": 0.41101898323068575, "syntax_match_score": 0.93125, "dataflow_match_score": 0.8607594936708861}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02788_1", "type": "JavaScript", "obfuscated": "function main(input){var N=input[0x0]['split']('\\x20')[0x0]-0x0;var D=input[0x0]['split']('\\x20')[0x1]-0x0;var A=input[0x0]['split']('\\x20')[0x2]-0x0;var list=[];for(var i=0x1;i<=N;i++){list['push'](input[i]['split']('\\x20')['map'](v=>v-0x0));}list=list['sort']((a,b)=>a[0x0]-b[0x0]);var ans=0x0;for(var i=0x0;i<N;i++){var x=list[i];if(x[0x1]>0x0){var time=Math['ceil'](x[0x1]/A);ans+=time;for(var j=i;j<N;j++){var y=list[j];if(y[0x0]<=x[0x0]+D*0x2+0x1){y[0x1]-=A*time;}else{break;}}}}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["3 3 2\n1 2\n5 4\n9 2", "2"], ["9 4 1\n1 5\n2 4\n3 3\n4 2\n5 1\n6 2\n7 3\n8 4\n9 5", "5"], ["3 0 1\n300000000 1000000000\n100000000 1000000000\n200000000 1000000000", "3000000000"]], "original": "function main(input) {\n  var N = input[0].split(\" \")[0]-0;\n  var D = input[0].split(\" \")[1]-0;\n  var A = input[0].split(\" \")[2]-0;\n  var list = [];\n  for(var i=1;i<=N;i++){\n    list.push(input[i].split(\" \").map(v=>v-0));\n  }\n  list = list.sort((a,b)=>a[0]-b[0]);\n\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    var x = list[i];\n    if(x[1] > 0){\n      var time = Math.ceil(x[1]/A);\n      ans += time;\n      for(var j=i;j<N;j++){\n        var y = list[j];\n        if(y[0]<=x[0]+D*2+1){\n          y[1] -= A*time;\n        }else{\n          break;\n        }\n      }\n    }\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').split(\"\\n\"))\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 885, "deobfuscated": "function main(input) {\n  var N = input[0].split(\" \")[0] - 0;\n  var D = input[0].split(\" \")[1] - 0;\n  var A = input[0].split(\" \")[2] - 0;\n  var list = [];\n  for (var i = 1; i <= N; i++) {\n    list.push(input[i].split(\" \").map(v => v - 0));\n  }\n  list = list.sort((a, b) => a[0] - b[0]);\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    var x = list[i];\n    if (x[1] > 0) {\n      var time = Math.ceil(x[1] / A);\n      ans += time;\n      for (var j = i; j < N; j++) {\n        var y = list[j];\n        if (y[0] <= x[0] + D * 2 + 1) {\n          y[1] -= A * time;\n        } else {\n          break;\n        }\n      }\n    }\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7206333146092918, "ngram_match_score": 0.3295396295003433, "weighted_ngram_match_score": 0.5529936289368237, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02862_1", "type": "JavaScript", "obfuscated": "'use strict';const ncr=(n,r,mod)=>{mod=mod||0x3b9aca00+0x7;const a=Math['max'](n,r);const b=Math['min'](n,r);const p=Math['min'](b,a-b);const nu=new Array(p+0x1);const de=new Array(p+0x1);let dest=0x1;if(p>0x0){for(let i=0x1;i<=p;i++){nu[i]=a-p+i;de[i]=i;}for(let k=0x2;k<=p;k++){const piv=de[k];const j=piv>0x1?-((a-p)%k):0x0;for(let i=k;i<=p;i+=k){nu[i+j]/=piv;de[i]/=piv;}}for(let i=0x1;i<=p;i++){if(nu[i]>0x1)dest=dest*nu[i]%mod;}}return dest;};function main(inp){inp=inp['trim']()['split']('\\x20');const x=Number(inp[0x0]);const y=Number(inp[0x1]);let sum=0x0;for(let i=Math['floor'](x/0x2);i>=0x0;i--){const a=x-i*0x2;if(a*0x2+i===y){sum=ncr(i+a,i);}}console['log'](sum);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3", "2"], ["2 2", "0"], ["999999 999999", "151840682"]], "original": "'use strict'\n\nconst ncr = (n, r, mod) => {\n  mod = mod || 1e9+7\n  const a = Math.max(n, r)\n  const b = Math.min(n, r)\n  const p = Math.min(b, a-b)\n  const nu = new Array(p + 1)\n  const de = new Array(p + 1)\n  let dest = 1\n  if (p > 0) {\n    for (let i = 1; i <= p; i++) {\n      nu[i] = a - p + i \n      de[i] = i\n    }\n    for (let k = 2; k <= p; k++) {\n      const piv = de[k]\n      const j = (piv > 1) ? -((a - p) % k) : 0\n      for (let i = k; i <= p; i += k) {\n        nu[i + j] /= piv; de[i] /= piv\n      }\n    }\n    for (let i = 1; i <= p; i++) {\n      if (nu[i] > 1) dest = dest * nu[i] % mod\n    }\n  }\n  return dest\n}\n\nfunction main(inp) {\n  inp = inp.trim().split(' ');\n  const x = Number(inp[0])\n  const y = Number(inp[1])\n\n  let sum = 0\n  for (let i = Math.floor(x / 2); i >= 0; i--) {\n    const a = x - i * 2\n    if (a * 2 + i === y) {\n      sum = ncr(i+a, i)\n    }\n  }\n  \n  console.log(sum)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 886, "deobfuscated": "'use strict';\n\nconst ncr = (n, r, mod) => {\n  mod = mod || 1000000007;\n  const a = Math.max(n, r);\n  const b = Math.min(n, r);\n  const p = Math.min(b, a - b);\n  const nu = new Array(p + 1);\n  const de = new Array(p + 1);\n  let dest = 1;\n  if (p > 0) {\n    for (let i = 1; i <= p; i++) {\n      nu[i] = a - p + i;\n      de[i] = i;\n    }\n    for (let k = 2; k <= p; k++) {\n      const piv = de[k];\n      const j = piv > 1 ? -((a - p) % k) : 0;\n      for (let i = k; i <= p; i += k) {\n        nu[i + j] /= piv;\n        de[i] /= piv;\n      }\n    }\n    for (let i = 1; i <= p; i++) {\n      if (nu[i] > 1) {\n        dest = dest * nu[i] % mod;\n      }\n    }\n  }\n  return dest;\n};\nfunction main(inp) {\n  inp = inp.trim().split(\" \");\n  const x = Number(inp[0]);\n  const y = Number(inp[1]);\n  let sum = 0;\n  for (let i = Math.floor(x / 2); i >= 0; i--) {\n    const a = x - i * 2;\n    if (a * 2 + i === y) {\n      sum = ncr(i + a, i);\n    }\n  }\n  console.log(sum);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.644580780227393, "ngram_match_score": 0.6632545592180165, "weighted_ngram_match_score": 0.6903066569296503, "syntax_match_score": 0.8914285714285715, "dataflow_match_score": 0.3333333333333333}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03008_1", "type": "JavaScript", "obfuscated": "'use strict';process['stdin']['resume']();process['stdin']['setEncoding']('utf-8');let inputString='';let currentLine=0x0;process['stdin']['on']('data',inputStdin=>{inputString+=inputStdin;});process['stdin']['on']('end',_=>{inputString=inputString['split']('\\x0a');main();});function readLine(){return inputString[currentLine++];}function F(N,A,B){let dp=Array(N+0x1)['fill'](0x0);for(let n=0x0;n<=N;n++){let x=n;for(let j=0x0;j<0x3;j++){if(n>=A[j]){let y=dp[n-A[j]]+B[j];if(x<y){x=y;}}}dp[n]=x;}return dp[N];}function main(){const n=parseInt(readLine(),0xa);const a=readLine()['split']('\\x20')['map'](_=>parseInt(_,0xa));const b=readLine()['split']('\\x20')['map'](_=>parseInt(_,0xa));let n1=F(n,a,b);let n2=F(n1,b,a);console['log'](n2);}", "test_cases": [["23\n1 1 1\n2 1 1", "46"]], "original": "'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.split('\\n')\n        // .map(str => str.trim());\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction F(N, A, B) {\n\tlet dp = Array(N+1).fill(0);\n\tfor (let n=0;n<=N;n++){\n\t\tlet x = n;\n\t\tfor (let j=0;j<3;j++){\n\t\t\tif (n>=A[j]){\n\t\t\t\tlet y = dp[n-A[j]] + B[j];\n\t\t\t\tif (x<y){\n\t\t\t\t\tx = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdp[n] = x;\n\t}\n\treturn dp[N];\n}\n\nfunction main() {\n    const n = parseInt(readLine(), 10);\n    const a = readLine().split(' ').map(_ => parseInt(_, 10));\n    const b = readLine().split(' ').map(_ => parseInt(_, 10));\n    let n1 = F(n, a, b);\n    let n2 = F(n1, b, a);\n\tconsole.log(n2);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 887, "deobfuscated": "'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf-8\");\nlet inputString = \"\";\nlet currentLine = 0;\nprocess.stdin.on(\"data\", inputStdin => {\n  inputString += inputStdin;\n});\nprocess.stdin.on(\"end\", _ => {\n  inputString = inputString.split(\"\\n\");\n  main();\n});\nfunction readLine() {\n  return inputString[currentLine++];\n}\nfunction F(N, A, B) {\n  let dp = Array(N + 1).fill(0);\n  for (let n = 0; n <= N; n++) {\n    let x = n;\n    for (let j = 0; j < 3; j++) {\n      if (n >= A[j]) {\n        let y = dp[n - A[j]] + B[j];\n        if (x < y) {\n          x = y;\n        }\n      }\n    }\n    dp[n] = x;\n  }\n  return dp[N];\n}\nfunction main() {\n  const n = parseInt(readLine(), 10);\n  const a = readLine().split(\" \").map(_ => parseInt(_, 10));\n  const b = readLine().split(\" \").map(_ => parseInt(_, 10));\n  let n1 = F(n, a, b);\n  let n2 = F(n1, b, a);\n  console.log(n2);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8079978039835879, "ngram_match_score": 0.572136224880013, "weighted_ngram_match_score": 0.6815941214891214, "syntax_match_score": 1.0, "dataflow_match_score": 0.9782608695652174}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03063_1", "type": "JavaScript", "obfuscated": "'use strict';function I(s,f){this['_s']=s['split']('\\x0a');this['_c']=0x0;this['_l']=0x0;this['_f']=f||Number;}I['prototype']['a']=function(){var l=this['_s'][this['_l']];if(!l)return;var t=l['trim']()['split']('\\x20');var a=t[this['_c']];this['_c']++;if(t['length']===this['_c']){this['_c']=0x0;this['_l']++;}return this['_f'](a);};I['prototype']['l']=function(){var l=this['_s'][this['_l']];if(!l)return;this['_c']=0x0;this['_l']++;return l['split']('\\x20')['map'](this['_f']);};function main(input){var o=new I(input,String);var n=Number(o['a']());var s=o['a']();var white=0x0;var black=0x0;for(var i=0x0;i<s['length'];i++){if(s[i]==='.')white+=0x1;}let min=white;for(var i=0x0;i<s['length'];i++){if(s[i]==='#'){black+=0x1;}else{white-=0x1;}if(black+white<min){min=black+white;}}console['log'](min);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n#.#", "1"], ["5\n#.##.", "2"], ["9\n.........", "0"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s.split(\"\\n\");this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s[this._l];if(!l)return;this._c=0;this._l++;return l.split(\" \").map(this._f)};\n\nfunction main(input) {\n  var o = new I(input,String);\n\n  var n = Number(o.a());\n  var s = o.a();\n\n  var white = 0;\n  var black = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \".\") white += 1;\n  }\n\n  let min = white;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      black += 1;\n    } else {\n      white -= 1;\n    }\n\n    if (black + white < min) {\n      min = black + white;\n    }\n  }\n  console.log(min);\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 888, "deobfuscated": "'use strict';\n\nfunction I(s, f) {\n  this._s = s.split(\"\\n\");\n  this._c = 0;\n  this._l = 0;\n  this._f = f || Number;\n}\nI.prototype.a = function () {\n  var l = this._s[this._l];\n  if (!l) {\n    return;\n  }\n  var t = l.trim().split(\" \");\n  var a = t[this._c];\n  this._c++;\n  if (t.length === this._c) {\n    this._c = 0;\n    this._l++;\n  }\n  return this._f(a);\n};\nI.prototype.l = function () {\n  var l = this._s[this._l];\n  if (!l) {\n    return;\n  }\n  this._c = 0;\n  this._l++;\n  return l.split(\" \").map(this._f);\n};\nfunction main(input) {\n  var o = new I(input, String);\n  var n = Number(o.a());\n  var s = o.a();\n  var white = 0;\n  var black = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \".\") {\n      white += 1;\n    }\n  }\n  let min = white;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      black += 1;\n    } else {\n      white -= 1;\n    }\n    if (black + white < min) {\n      min = black + white;\n    }\n  }\n  console.log(min);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8114184949311123, "ngram_match_score": 0.48746590937056855, "weighted_ngram_match_score": 0.8446945568403669, "syntax_match_score": 0.9135135135135135, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.040447992866030624}}
{"filename": "p03275_1", "type": "JavaScript", "obfuscated": "function median(l){return l['sort']()[Math['floor'](l['length']/0x2)];}function Main(input){input=input['split']('\\x0a');N=parseInt(input[0x0]);a=input[0x1]['split']('\\x20');m=[];for(var i=0x0;i<N;i++){for(var j=i+0x1;j<N+0x1;j++){m['push'](median(a['slice'](i,j)));}}console['log'](median(m));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n10 30 20", "30"], ["1\n10", "10"], ["10\n5 9 5 9 8 9 3 5 4 3", "8"]], "original": "function median (l) {\n  return l.sort()[Math.floor(l.length / 2)]\n}\n\nfunction Main(input) {\n  input = input.split(\"\\n\")\n  N = parseInt(input[0])\n  a = input[1].split(\" \")\n  m = []\n\n  for (var i = 0 ; i < N ; i++ ) {\n    for (var j = i + 1 ; j < N + 1 ; j++ ) {\n      m.push(median(a.slice(i, j)))\n    }\n  }\n  console.log(median(m))\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 889, "deobfuscated": "function median(l) {\n  return l.sort()[Math.floor(l.length / 2)];\n}\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  N = parseInt(input[0]);\n  a = input[1].split(\" \");\n  m = [];\n  for (var i = 0; i < N; i++) {\n    for (var j = i + 1; j < N + 1; j++) {\n      m.push(median(a.slice(i, j)));\n    }\n  }\n  console.log(median(m));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6756020545185744, "ngram_match_score": 0.345487354269257, "weighted_ngram_match_score": 0.35692086380504073, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03364_1", "type": "JavaScript", "obfuscated": "var lines=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a');var n=lines[0x0]|0x0;var s=lines['slice'](0x1);function good(a,b){for(var i=0x0;i<n;++i){for(var j=0x0;j<n;++j){if(s[(i+a)%n][(j+b)%n]!==s[(j+a)%n][(i+b)%n])return 0x0;}}return 0x1;}var ans=0x0;for(var a=0x0;a<n;++a){for(var b=0x0;b<n;++b){ans+=good(a,b);}}console['log'](ans);", "test_cases": [["2\nab\nca", "2"], ["4\naaaa\naaaa\naaaa\naaaa", "16"], ["5\nabcde\nfghij\nklmno\npqrst\nuvwxy", "0"]], "original": "var lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\n\nvar n=lines[0]|0;\nvar s=lines.slice(1);\n\nfunction good(a,b){\n    for(var i=0;i<n;++i){\n        for(var j=0;j<n;++j){\n            if(s[(i+a)%n][(j+b)%n]!==s[(j+a)%n][(i+b)%n])return 0;\n        }\n    }\n    return 1;\n}\n\nvar ans=0;\nfor(var a=0;a<n;++a){\n    for(var b=0;b<n;++b){\n        ans+=good(a,b);\n    }\n}\nconsole.log(ans);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 890, "deobfuscated": "var lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nvar n = lines[0] | 0;\nvar s = lines.slice(1);\nfunction good(a, b) {\n  for (var i = 0; i < n; ++i) {\n    for (var j = 0; j < n; ++j) {\n      if (s[(i + a) % n][(j + b) % n] !== s[(j + a) % n][(i + b) % n]) {\n        return 0;\n      }\n    }\n  }\n  return 1;\n}\nvar ans = 0;\nfor (var a = 0; a < n; ++a) {\n  for (var b = 0; b < n; ++b) {\n    ans += good(a, b);\n  }\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6005991289248639, "ngram_match_score": 0.11165179706551777, "weighted_ngram_match_score": 0.38376797444789135, "syntax_match_score": 0.9069767441860465, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03388_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');const q=+s[0x0];for(var i=0x0;i<q;i++){var a=s[i+0x1]['split']('\\x20')['map'](a=>+a);var b=Math['max'](a[0x0],a[0x1]);a=Math['min'](a[0x0],a[0x1]);var c=Math['ceil'](Math['sqrt'](a*b));var ans=(a-0x1)*0x2;if(a<b-0x1)ans++;for(var j=a+0x1;j<c;j++){if(Math['floor'](a/j*b)===j)ans++;else ans+=0x2;}console['log'](ans);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8\n1 4\n10 5\n3 3\n4 11\n8 9\n22 40\n8 36\n314159265 358979323", "1\n12\n4\n11\n14\n57\n31\n671644785"]], "original": "function Main(s) {\n  s = s.split(\"\\n\");\n  const q = +s[0];\n  for(var i = 0; i < q; i++){\n    var a = s[i+1].split(\" \").map(a => +a);\n    var b = Math.max(a[0], a[1]);\n    a = Math.min(a[0], a[1]);\n    var c = Math.ceil(Math.sqrt(a * b));\n    var ans = (a - 1) * 2;\n    if(a < b - 1) ans++;\n    for(var j = a + 1; j < c; j++){\n      if(Math.floor(a / j * b) === j)ans++;\n      else ans += 2;\n    }\n    console.log(ans);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 891, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  const q = +s[0];\n  for (var i = 0; i < q; i++) {\n    var a = s[i + 1].split(\" \").map(a => +a);\n    var b = Math.max(a[0], a[1]);\n    a = Math.min(a[0], a[1]);\n    var c = Math.ceil(Math.sqrt(a * b));\n    var ans = (a - 1) * 2;\n    if (a < b - 1) {\n      ans++;\n    }\n    for (var j = a + 1; j < c; j++) {\n      if (Math.floor(a / j * b) === j) {\n        ans++;\n      } else {\n        ans += 2;\n      }\n    }\n    console.log(ans);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8026687919792178, "ngram_match_score": 0.5903554618717466, "weighted_ngram_match_score": 0.716473552198971, "syntax_match_score": 0.9038461538461539, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03393_1", "type": "JavaScript", "obfuscated": "function Main(s){const n=s['length'];const a='a'['charCodeAt']();var b=Array(0x1a)['fill'](0x1);var i;if(n<0x1a){for(i=0x0;i<n;i++){b[s['charCodeAt'](i)-a]=0x0;}for(i=0x0;i<0x1a;i++){if(b[i]){s+=String['fromCharCode'](a+i);break;}}}else{if(s==='zyxwvutsrqponmlkjihgfedcba'){console['log'](-0x1);return;}var c=s[0x19];b[s['charCodeAt'](0x19)-a]=0x0;for(i=0x18;i>=0x0;i--){if(c>s[i]){c=s['charCodeAt'](i)-a;s=s['slice'](0x0,i);break;}else{b[s['charCodeAt'](i)-a]=0x0;}}for(var j=c-a;j<0x1a;j++){if(b[j]===0x0){s+=String['fromCharCode'](a+j);break;}}}console['log'](s);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["atcoder", "atcoderb"], ["abc", "abcd"], ["zyxwvutsrqponmlkjihgfedcba", "-1"], ["abcdefghijklmnopqrstuvwzyx", "abcdefghijklmnopqrstuvx"]], "original": "function Main(s){\n  const n = s.length;\n  const a = \"a\".charCodeAt();\n  var b = Array(26).fill(1);\n  var i;\n  if(n < 26){\n    for(i = 0; i < n; i++){\n      b[s.charCodeAt(i) - a] = 0;\n    }\n    for(i = 0; i < 26; i++){\n      if(b[i]){\n        s += String.fromCharCode(a + i);\n        break;\n      }\n    }\n  }else{\n    if(s === \"zyxwvutsrqponmlkjihgfedcba\"){\n      console.log(-1); return;\n    }\n    var c = s[25];\n    b[s.charCodeAt(25) - a] = 0;\n    for(i = 24; i >= 0; i--){\n      if(c > s[i]){\n        c = s.charCodeAt(i) - a;\n        s = s.slice(0,i)\n        break;\n      }else{\n        b[s.charCodeAt(i) - a] = 0;\n      }\n    }\n    for(var j = c - a; j < 26; j++){\n      if(b[j] === 0){\n        s += String.fromCharCode(a + j);\n        break;\n      }\n    }\n  }\n  console.log(s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 892, "deobfuscated": "function Main(s) {\n  const n = s.length;\n  const a = \"a\".charCodeAt();\n  var b = Array(26).fill(1);\n  var i;\n  if (n < 26) {\n    for (i = 0; i < n; i++) {\n      b[s.charCodeAt(i) - a] = 0;\n    }\n    for (i = 0; i < 26; i++) {\n      if (b[i]) {\n        s += String.fromCharCode(a + i);\n        break;\n      }\n    }\n  } else {\n    if (s === \"zyxwvutsrqponmlkjihgfedcba\") {\n      console.log(-1);\n      return;\n    }\n    var c = s[25];\n    b[s.charCodeAt(25) - a] = 0;\n    for (i = 24; i >= 0; i--) {\n      if (c > s[i]) {\n        c = s.charCodeAt(i) - a;\n        s = s.slice(0, i);\n        break;\n      } else {\n        b[s.charCodeAt(i) - a] = 0;\n      }\n    }\n    for (var j = c - a; j < 26; j++) {\n      if (b[j] === 0) {\n        s += String.fromCharCode(a + j);\n        break;\n      }\n    }\n  }\n  console.log(s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7928113173971081, "ngram_match_score": 0.527849682215377, "weighted_ngram_match_score": 0.6433955873730555, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03411_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],...tmp]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));const rp=[],bp=[];for(let i=0x0;i<N;i++){rp['push'](tmp[i]);bp['push'](tmp[N+i]);}bp['sort'](([a],[b])=>a-b);let count=0x0;const test=[];for(let i=0x0;i<N;i++){const [bx,by]=bp[i];let max=[-0x1,-0x1];for(let j=0x0;j<rp['length'];j++){const [rx,ry]=rp[j];if(bx<rx)continue;if(by>ry&&ry>max[0x1])max=[j,ry];}if(max[0x1]>=0x0){rp['splice'](max[0x0],0x1);count++;}}return''+count;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5", "2"], ["3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5", "2"], ["2\n2 2\n3 3\n0 0\n1 1", "0"], ["5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7", "5"], ["5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9", "4"]], "original": "console.log((args=>{\n  const [[N],...tmp] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  const rp = [], bp = [];\n  for ( let i = 0; i < N; i++ ) {\n    rp.push(tmp[i]);\n    bp.push(tmp[N+i]);\n  }\n  bp.sort(([a],[b])=>a-b);\n  let count = 0;\n  const test = [];\n  for ( let i = 0; i < N; i++ ) {\n    const [bx,by] = bp[i];\n    let max = [-1,-1];\n    for ( let j = 0; j < rp.length; j++ ) {\n      const [rx,ry] = rp[j];\n      if ( bx < rx ) continue;\n      if ( by > ry && ry > max[1] ) max = [j,ry];\n    }\n    if ( max[1] >= 0 ) {\n      rp.splice( max[0], 1 );\n      count++;\n    }\n  }\n  return `${count}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 893, "deobfuscated": "console.log((args => {\n  const [[N], ...tmp] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  const rp = [];\n  const bp = [];\n  for (let i = 0; i < N; i++) {\n    rp.push(tmp[i]);\n    bp.push(tmp[N + i]);\n  }\n  bp.sort(([a], [b]) => a - b);\n  let count = 0;\n  const test = [];\n  for (let i = 0; i < N; i++) {\n    const [bx, by] = bp[i];\n    let max = [-1, -1];\n    for (let j = 0; j < rp.length; j++) {\n      const [rx, ry] = rp[j];\n      if (bx < rx) {\n        continue;\n      }\n      if (by > ry && ry > max[1]) {\n        max = [j, ry];\n      }\n    }\n    if (max[1] >= 0) {\n      rp.splice(max[0], 1);\n      count++;\n    }\n  }\n  return \"\" + count;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5860767663988959, "ngram_match_score": 0.30811302298841536, "weighted_ngram_match_score": 0.3542612694979249, "syntax_match_score": 0.8676470588235294, "dataflow_match_score": 0.8142857142857143}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03558_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=parseInt(input);var output=0x3b9aca00;for(var i=0x1;i<=0xa;i++){var tmp=(input*i)['toString']()['split']('')['map'](a=>Number(a));var check=0x0;for(var j=0x0;j<tmp['length'];j++){check+=tmp[j];}output=Math['min'](output,check);}myout(output);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["6", "3"], ["41", "5"], ["79992", "36"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\tinput = parseInt(input);\n\t//input = input.trim().split(\" \");\n\t//input = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var output = 1000000000;\n  for(var i = 1; i <= 10; i ++){\n    var tmp = (input * i).toString().split(\"\").map((a)=>Number(a));\n    var check = 0;\n    for(var j = 0; j < tmp.length; j++){\n      check += tmp[j];\n    }\n    output = Math.min(output, check);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 894, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = parseInt(input);\n  var output = 1000000000;\n  for (var i = 1; i <= 10; i++) {\n    var tmp = (input * i).toString().split(\"\").map(a => Number(a));\n    var check = 0;\n    for (var j = 0; j < tmp.length; j++) {\n      check += tmp[j];\n    }\n    output = Math.min(output, check);\n  }\n  myout(output);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7204077544203001, "ngram_match_score": 0.4981058183951214, "weighted_ngram_match_score": 0.5133953291562091, "syntax_match_score": 0.8701298701298701, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03567_1", "type": "JavaScript", "obfuscated": "'use strict';const main=arg=>{arg=arg['trim']()['split']('\\x0a');const S=arg[0x0]['split']('');let previous=null;for(let i in S){if(previous==='A'&&S[i]==='C'){console['log']('Yes');return;}previous=S[i];}console['log']('No');};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["BACD", "Yes"], ["ABCD", "No"], ["CABD", "No"], ["ACACA", "Yes"], ["XX", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    let previous = null;\n    \n    for(let i in S) {\n        if(previous === \"A\" && S[i] === \"C\") {\n            console.log(\"Yes\");\n            return;\n        }\n        \n        previous = S[i];\n    }\n    \n    console.log(\"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 895, "deobfuscated": "'use strict';\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const S = arg[0].split(\"\");\n  let previous = null;\n  for (let i in S) {\n    if (previous === \"A\" && S[i] === \"C\") {\n      console.log(\"Yes\");\n      return;\n    }\n    previous = S[i];\n  }\n  console.log(\"No\");\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8712462043388826, "ngram_match_score": 0.7202439697309596, "weighted_ngram_match_score": 0.7647408476245707, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03840_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(a){return a?cin[cid++]:+cin[cid++];}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](myOut);function main(){var a=nexts(0x7);var ans=a[0x1]+((a[0x0]/0x2|0x0)+(a[0x3]/0x2|0x0)+(a[0x4]/0x2|0x0))*0x2;switch(a[0x0]%0x2+a[0x3]%0x2+a[0x4]%0x2){case 0x3:ans+=0x3;break;case 0x2:if(a[0x0]*a[0x3]*a[0x4])ans+=0x1;break;}return ans;}", "test_cases": [["2 1 1 0 0 0 0", "3"], ["0 0 10 0 0 0 0", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(a){return a?cin[cid++]:+cin[cid++];}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(myOut);\n\nfunction main(){\n  var a = nexts(7);\n  var ans = a[1] + ((a[0]/2|0) + (a[3]/2|0)+ (a[4]/2|0)) * 2;\n  switch(a[0]%2 + a[3]%2 + a[4]%2){\n    case 3: ans += 3; break;\n    case 2: if(a[0]*a[3]*a[4])ans += 1; break;\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 896, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next(a) {\n  if (a) {\n    return cin[cid++];\n  } else {\n    return +cin[cid++];\n  }\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(myOut);\n}\nfunction main() {\n  var a = nexts(7);\n  var ans = a[1] + ((a[0] / 2 | 0) + (a[3] / 2 | 0) + (a[4] / 2 | 0)) * 2;\n  switch (a[0] % 2 + a[3] % 2 + a[4] % 2) {\n    case 3:\n      ans += 3;\n      break;\n    case 2:\n      if (a[0] * a[3] * a[4]) {\n        ans += 1;\n      }\n      break;\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5766646909764817, "ngram_match_score": 0.0998451138013727, "weighted_ngram_match_score": 0.3573512845131563, "syntax_match_score": 0.8494623655913979, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1499999999999999, "length_score": -0.1499999999999999, "increase_maintainability": -0.028018676975292256, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03065134099616862, "new_decrease_halstead_effort": 0.012175078616676771}}
{"filename": "p03967_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const s=args['trim']();const L=s['length'];const p=Array(L)['fill'](0x0);for(let i=L;--i;)p[i-0x1]=p[i]+(s[i]==='p');let g=0x0,w=0x0;for(let i=0x0;i<L;i++){if(s[i]==='g'){if(g>p[i]){g--;w++;}else g++;}else g--;}return''+w;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["gpg", "0"], ["ggppgggpgg", "2"]], "original": "console.log((args=>{\n  const s = args.trim();\n  const L = s.length;\n  const p = Array(L).fill(0);\n  for ( let i = L; --i;) p[i-1] = p[i] + (s[i]==='p');\n  let g = 0, w = 0;\n  for ( let i = 0; i < L; i++ ) {\n    if ( s[i] === 'g' ) {\n      if ( g > p[i] ) {\n        g--; w++;\n      } else g++;\n    } else g--;\n  }\n  return `${w}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 897, "deobfuscated": "console.log((args => {\n  const s = args.trim();\n  const L = s.length;\n  const p = Array(L).fill(0);\n  for (let i = L; --i;) {\n    p[i - 1] = p[i] + (s[i] === \"p\");\n  }\n  let g = 0;\n  let w = 0;\n  for (let i = 0; i < L; i++) {\n    if (s[i] === \"g\") {\n      if (g > p[i]) {\n        g--;\n        w++;\n      } else {\n        g++;\n      }\n    } else {\n      g--;\n    }\n  }\n  return \"\" + w;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6442290276379468, "ngram_match_score": 0.3822535372783534, "weighted_ngram_match_score": 0.4385650122978238, "syntax_match_score": 0.7560975609756098, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04013_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp1=input[0x0]['split']('\\x20');var n=parseInt(tmp1[0x0]);var a=parseInt(tmp1[0x1]);tmp=input[0x1]['split']('\\x20');x=new Array(n);var sum2=0x0;for(i=0x0;i<tmp['length'];i++){x[i]=parseInt(tmp[i]);}var s=0x0;for(i=0x0;i<n;i++){sum2=sum2+x[i];}var b=new Array(sum2+0x1);for(var y=0x0;y<sum2+0x1;y++){b[y]=new Array(n+0x1)['fill'](0x0);}b[0x0][0x0]=0x1;for(j=0x0;j<n;j++){for(i=sum2;i>=0x0;i--){for(k=0x0;k<n+0x1;k++){if(b[i][k]>=0x1){b[i+x[j]][k+0x1]=b[i+x[j]][k+0x1]+b[i][k];}}}}for(i=0x1;i<=n&&i*a<=sum2;i++){s=s+b[i*a][i];}console['log']('%s',s);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 8\n7 9 8 9", "5"], ["3 8\n6 6 9", "0"], ["8 5\n3 6 2 8 7 6 5 9", "19"], ["33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "8589934591"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp1 = input[0].split(\" \");\n  var n = parseInt(tmp1[0]);\n  var a = parseInt(tmp1[1]);\n  tmp= input[1].split(\" \");\n  x=new Array(n);\n  var sum2=0;\n  for(i=0;i<tmp.length;i++){\n    x[i]=parseInt(tmp[i]);\n  }\n  var s=0;\n  for(i=0;i<n;i++){\n    sum2=sum2+x[i];\n  }\n  var b = new Array(sum2+1);\n  for(var y = 0; y < sum2+1; y++) {\n    b[y] = new Array(n+1).fill(0);\n  }\n  b[0][0]=1;\n  for(j=0;j<n;j++){\n    for(i=sum2;i>=0;i--){\n      for(k=0;k<n+1;k++){\n        if(b[i][k]>=1){\n          b[i+x[j]][k+1]=b[i+x[j]][k+1]+b[i][k];\n        }\n      }\n    }\n  }\n  for(i=1;i<=n && i*a<=sum2;i++){\n      s=s+b[i*a][i];\n  }\n\n\n  console.log('%s', s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 898, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp1 = input[0].split(\" \");\n  var n = parseInt(tmp1[0]);\n  var a = parseInt(tmp1[1]);\n  tmp = input[1].split(\" \");\n  x = new Array(n);\n  var sum2 = 0;\n  for (i = 0; i < tmp.length; i++) {\n    x[i] = parseInt(tmp[i]);\n  }\n  var s = 0;\n  for (i = 0; i < n; i++) {\n    sum2 = sum2 + x[i];\n  }\n  var b = new Array(sum2 + 1);\n  for (var y = 0; y < sum2 + 1; y++) {\n    b[y] = new Array(n + 1).fill(0);\n  }\n  b[0][0] = 1;\n  for (j = 0; j < n; j++) {\n    for (i = sum2; i >= 0; i--) {\n      for (k = 0; k < n + 1; k++) {\n        if (b[i][k] >= 1) {\n          b[i + x[j]][k + 1] = b[i + x[j]][k + 1] + b[i][k];\n        }\n      }\n    }\n  }\n  for (i = 1; i <= n && i * a <= sum2; i++) {\n    s = s + b[i * a][i];\n  }\n  console.log(\"%s\", s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.672613564280671, "ngram_match_score": 0.1991267080161758, "weighted_ngram_match_score": 0.49132754910650794, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04025_1", "type": "JavaScript", "obfuscated": "'use strict';let input=require('fs')['readFileSync']('/dev/stdin','utf8');const info=input['trim']()['split']('\\x0a');const nums=info[0x1]['split']('\\x20')['map'](x=>x*0x1);const ave=Math['round'](nums['reduce']((x,a)=>{return a+=x;})/ info[0x0]);let sum=0x0;for(let i=0x0;i<info[0x0];i++){sum+=Math['pow'](nums[i]-ave,0x2);}console['log'](sum);", "test_cases": [["2\n4 8", "8"], ["3\n1 1 3", "3"], ["3\n4 2 5", "5"], ["4\n-100 -100 -100 -100", "0"]], "original": "\"use strict\";\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst info = input.trim().split('\\n');\nconst nums = info[1].split(' ').map(x => x*1);\n// 平均値出す\nconst ave = Math.round( nums.reduce((x,a) => {return a += x}) / info[0] );\nlet sum = 0;\nfor(let i = 0; i < info[0]; i++){\n  sum += Math.pow( nums[i] - ave ,2 )\n}\nconsole.log(sum);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 899, "deobfuscated": "'use strict';\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst info = input.trim().split(\"\\n\");\nconst nums = info[1].split(\" \").map(x => x * 1);\nconst ave = Math.round(nums.reduce((x, a) => {\n  return a += x;\n}) / info[0]);\nlet sum = 0;\nfor (let i = 0; i < info[0]; i++) {\n  sum += Math.pow(nums[i] - ave, 2);\n}\nconsole.log(sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6600306319652912, "ngram_match_score": 0.3215606880532351, "weighted_ngram_match_score": 0.3403009702427124, "syntax_match_score": 1.0, "dataflow_match_score": 0.9782608695652174}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00015_1", "type": "JavaScript", "obfuscated": "function pad(n){while(n['length']<0x7){n='0'+n;}return n;}function divide(s){var a=[],i=0x0,l=s['length'],d=0x7;for(;(a[i]=s['slice']((i+0x1)*-d,l+i*-d))['length']>d-0x1;i++);return a;}function unite(a){return a['concat']()['reverse']()['join']('')['replace'](/^0*/,'');}function largeSum(n,m){for(var h=0x0,o=[],i=0x0,l=Math['max'](n['length'],m['length']);i<l||h!=0x0;i++){var a=((parseInt(n[i],0xa)||0x0)+(parseInt(m[i],0xa)||0x0)+ +h)['toString'](0xa);o[i]=a['length']>0x7?(h=a['slice'](0x0,0x1),a['slice'](0x1)):(h=0x0,pad(a));}return o;}process['stdin']['on']('data',function(c){var a=(c+'')['trim']()['split']('\\x0a');for(var i=0x0,l=+a['shift']()*0x2;i<l;i+=0x2){var s=unite(largeSum(divide(a[i]),divide(a[i+0x1])));console['log'](s==''?0x0:s['length']>0x50?'overflow':s);}})['resume']();", "test_cases": [["6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000", "1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow"]], "original": "function pad(n){\n\twhile(n.length<7){\n\t\tn=\"0\"+n\n\t}\n\treturn n;\n}\nfunction divide(s){\n\tvar a=[],i=0,l=s.length,d=7;\n\tfor(;(a[i]=s.slice((i+1)*-d,l+i*-d)).length>d-1;i++);\n\treturn a;\n}\nfunction unite(a){\n\treturn a.concat().reverse().join(\"\").replace(/^0*/,\"\");\n}\nfunction largeSum(n,m){\n\tfor(var h=0,o=[],i=0,l=Math.max(n.length,m.length);i<l||h!=0;i++){\n\t\tvar a=((parseInt(n[i],10)||0)+(parseInt(m[i],10)||0)+(+h)).toString(10);\n\t\to[i]=a.length>7?(h=a.slice(0,1),a.slice(1)):(h=0,pad(a));\n\t}\n\treturn o;\n}\nprocess.stdin.on(\"data\",function(c){\n\tvar a=(c+\"\").trim().split(\"\\n\");\n\tfor(var i=0,l=+a.shift()*2;i<l;i+=2){\n\t\tvar s=unite(largeSum(divide(a[i]),divide(a[i+1])));\n\t\tconsole.log(s==\"\"?0:s.length>80?\"overflow\":s);\n\t}\n}).resume();", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 900, "deobfuscated": "function pad(n) {\n  while (n.length < 7) {\n    n = \"0\" + n;\n  }\n  return n;\n}\nfunction divide(s) {\n  var a = [];\n  var i = 0;\n  var l = s.length;\n  var d = 7;\n  for (; (a[i] = s.slice((i + 1) * -d, l + i * -d)).length > d - 1; i++);\n  return a;\n}\nfunction unite(a) {\n  return a.concat().reverse().join(\"\").replace(/^0*/, \"\");\n}\nfunction largeSum(n, m) {\n  for (var h = 0, o = [], i = 0, l = Math.max(n.length, m.length); i < l || h != 0; i++) {\n    var a = ((parseInt(n[i], 10) || 0) + (parseInt(m[i], 10) || 0) + +h).toString(10);\n    o[i] = a.length > 7 ? (h = a.slice(0, 1), a.slice(1)) : (h = 0, pad(a));\n  }\n  return o;\n}\nprocess.stdin.on(\"data\", function (c) {\n  var a = (c + \"\").trim().split(\"\\n\");\n  for (var i = 0, l = +a.shift() * 2; i < l; i += 2) {\n    var s = unite(largeSum(divide(a[i]), divide(a[i + 1])));\n    console.log(s == \"\" ? 0 : s.length > 80 ? \"overflow\" : s);\n  }\n}).resume();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5569171235215261, "ngram_match_score": 0.05373166041945214, "weighted_ngram_match_score": 0.2537240677092056, "syntax_match_score": 0.9202127659574468, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000337274449028091, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.011406844106463865, "new_decrease_halstead_effort": -0.011406844106463865}}
{"filename": "p00038_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a')['map'](function(i){f=function(a,b){return b-a;};a=[],c=i['split'](',')['sort'](f);c['map'](function(j){a[j]?a[j]++:a[j]=0x1;});a['sort'](f);l=a[0x0],n=a[0x1];console['log'](l==0x4?'four\\x20card':l==0x3?n==0x2?'full\\x20house':'three\\x20card':l==0x2?n==0x2?'two\\x20pair':'one\\x20pair':0x4==c[0x0]-c[0x4]||c[0x0]-c[0x3]==0x3&&+c[0x4]==0x1?'straight':'null');});", "test_cases": [["1,2,3,4,1\n2,3,2,3,12\n12,13,11,12,12\n7,6,7,6,7\n3,3,2,3,3\n6,7,8,9,10\n11,12,10,1,13\n11,12,13,1,2", "one pair\ntwo pair\nthree card\nfull house\nfour card\nstraight\nstraight\nnull"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').map(function(i){f=function(a,b){return b-a};a=[],c=i.split(\",\").sort(f);c.map(function(j){a[j]?a[j]++:a[j]=1});a.sort(f);l=a[0],n=a[1];console.log(l==4?\"four card\":l==3?(n==2?\"full house\":\"three card\"):l==2?(n==2?\"two pair\":\"one pair\"):4==c[0]-c[4]||(c[0]-c[3]==3&&+c[4]==1)?\"straight\":\"null\")})", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 901, "deobfuscated": "require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(function (i) {\n  f = function (a, b) {\n    return b - a;\n  };\n  a = [];\n  c = i.split(\",\").sort(f);\n  c.map(function (j) {\n    if (a[j]) {\n      a[j]++;\n    } else {\n      a[j] = 1;\n    }\n  });\n  a.sort(f);\n  l = a[0];\n  n = a[1];\n  console.log(l == 4 ? \"four card\" : l == 3 ? n == 2 ? \"full house\" : \"three card\" : l == 2 ? n == 2 ? \"two pair\" : \"one pair\" : c[0] - c[4] == 4 || c[0] - c[3] == 3 && +c[4] == 1 ? \"straight\" : \"null\");\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.43028846153846156, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 0.7211538461538461, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.5555555555555556, "length_score": -0.5555555555555556, "increase_maintainability": -0.06154056184459045, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.007194244604316502, "new_decrease_halstead_effort": -0.17472589389028825}}
{"filename": "p00043_1", "type": "JavaScript", "obfuscated": "function Puzzle(){var obj={};var arrA='123,234,345,456,567,678,789,111,222,333,444,555,666,777,888,999'['split'](',');var arrB='11,22,33,44,55,66,77,88,99'['split'](',');var i,j,k,l,m;for(i=0x0;i<0x10;i++)for(j=0x0;j<0x10;j++)for(k=0x0;k<0x10;k++)for(l=0x0;l<0x10;l++)for(m=0x0;m<0x9;m++){var str=arrA[i]+arrA[j]+arrA[k]+arrA[l]+arrB[m];str=str['split']('')['map'](Number)['sort'](function(a,b){return a-b;})['join']('');obj[str]=!![];}return obj;}var P=Puzzle();var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){if(Arr['length']==0x0)break;var str=Arr['shift']();var ans=[];for(var i=0x1;i<=0x9;i++){var arr=str['split']('')['map'](Number);arr['push'](i);arr['sort'](function(a,b){return a-b;});var v=arr['join']('');if(/(.)\\1\\1\\1\\1/['test'](v))continue;if(P['hasOwnProperty'](v))ans['push'](i);}console['log'](ans['length']==0x0?'0':ans['join']('\\x20'));}", "test_cases": [["3649596966777\n6358665788577\n9118992346175\n9643871425498\n7755542764533\n1133557799246", "2 3 5 8\n3 4\n1 2 3 4 5 6 7 8 9\n7 8 9\n1 2 3 4 6 7 8\n0"]], "original": "function Puzzle(){\n   var obj={};\n   var arrA=\"123,234,345,456,567,678,789,111,222,333,444,555,666,777,888,999\".split(\",\");\n   var arrB=\"11,22,33,44,55,66,77,88,99\".split(\",\");\n   var i,j,k,l,m;\n   for(i=0;i<16;i++)for(j=0;j<16;j++)for(k=0;k<16;k++)for(l=0;l<16;l++)for(m=0;m<9;m++){\n      var str=arrA[i]+arrA[j]+arrA[k]+arrA[l]+arrB[m];\n      str=str.split(\"\").map(Number).sort(function(a,b){return a-b;}).join(\"\");\n      obj[str]=true;\n   }\n   return obj;\n}\nvar P=Puzzle();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var str=Arr.shift();\n   var ans=[];\n   for(var i=1;i<=9;i++){\n      var arr=str.split(\"\").map(Number);\n      arr.push(i);\n      arr.sort(function(a,b){return a-b;});\n      var v=arr.join(\"\");\n      if(/(.)\\1\\1\\1\\1/.test(v))continue;\n      if(P.hasOwnProperty(v))ans.push(i);\n   }\n   console.log((ans.length==0)?\"0\":ans.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 902, "deobfuscated": "function Puzzle() {\n  var obj = {};\n  var arrA = \"123,234,345,456,567,678,789,111,222,333,444,555,666,777,888,999\".split(\",\");\n  var arrB = \"11,22,33,44,55,66,77,88,99\".split(\",\");\n  var i;\n  var j;\n  var k;\n  var l;\n  var m;\n  for (i = 0; i < 16; i++) {\n    for (j = 0; j < 16; j++) {\n      for (k = 0; k < 16; k++) {\n        for (l = 0; l < 16; l++) {\n          for (m = 0; m < 9; m++) {\n            var str = arrA[i] + arrA[j] + arrA[k] + arrA[l] + arrB[m];\n            str = str.split(\"\").map(Number).sort(function (a, b) {\n              return a - b;\n            }).join(\"\");\n            obj[str] = true;\n          }\n        }\n      }\n    }\n  }\n  return obj;\n}\nvar P = Puzzle();\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (Arr.length == 0) {\n    break;\n  }\n  var str = Arr.shift();\n  var ans = [];\n  for (var i = 1; i <= 9; i++) {\n    var arr = str.split(\"\").map(Number);\n    arr.push(i);\n    arr.sort(function (a, b) {\n      return a - b;\n    });\n    var v = arr.join(\"\");\n    if (/(.)\\1\\1\\1\\1/.test(v)) {\n      continue;\n    }\n    if (P.hasOwnProperty(v)) {\n      ans.push(i);\n    }\n  }\n  console.log(ans.length == 0 ? \"0\" : ans.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5127972606070204, "ngram_match_score": 0.033007343767898614, "weighted_ngram_match_score": 0.13939381987230395, "syntax_match_score": 0.8787878787878788, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006410293109566645, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.007575757575757569, "new_decrease_halstead_effort": 0.07373737373737366}}
{"filename": "p00044_1", "type": "JavaScript", "obfuscated": "function isPrime(num){if(num==0x2||num==0x3)return!![];if(num<0x2||num%0x2==0x0||num%0x3==0x0)return![];var limit=Math['round'](Math['sqrt'](num));var i=0x1;while(i*0x6-0x1<=limit){if(num%(i*0x6-0x1)==0x0||num%(i*0x6+0x1)==0x0)return![];i++;}return!![];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split']('\\x0a');var line;while(line=lines['shift']()){var num=+line;var mp;var lp;if(num==0x3)mp=0x2;var i=0x3;while(!![]){if(isPrime(i)&&i<num){mp=i;}if(isPrime(i)&&i>num){lp=i;break;}i+=0x2;}console['log'](mp,lp);}", "test_cases": [["19\n3517", "17 23\n3511 3527"]], "original": "function isPrime(num) {\n    if (num == 2 || num == 3) return true;\n    if (num < 2 || num % 2 == 0 || num % 3 == 0) return false;\n    var limit = Math.round(Math.sqrt(num));\n \n    var i = 1;\n    while(i * 6 - 1 <= limit) {\n        if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) return false;\n        i++;\n    }\n    return true;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var num = +line;\n\n    var mp;\n    var lp;\n\n    if (num == 3)\n        mp = 2;\n\n    var i = 3;\n    while (true) {\n        if (isPrime(i) && i < num) {\n            mp = i;\n        }\n        if (isPrime(i) && i > num) {\n            lp = i;\n            break;\n        }\n        i += 2;\n    }\n    console.log(mp, lp);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 903, "deobfuscated": "function isPrime(num) {\n  if (num == 2 || num == 3) {\n    return true;\n  }\n  if (num < 2 || num % 2 == 0 || num % 3 == 0) {\n    return false;\n  }\n  var limit = Math.round(Math.sqrt(num));\n  var i = 1;\n  while (i * 6 - 1 <= limit) {\n    if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var num = +line;\n  var mp;\n  var lp;\n  if (num == 3) {\n    mp = 2;\n  }\n  var i = 3;\n  while (true) {\n    if (isPrime(i) && i < num) {\n      mp = i;\n    }\n    if (isPrime(i) && i > num) {\n      lp = i;\n      break;\n    }\n    i += 2;\n  }\n  console.log(mp, lp);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8928229561071293, "ngram_match_score": 0.8034463792642378, "weighted_ngram_match_score": 0.8572763394732222, "syntax_match_score": 0.9105691056910569, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.01125644970238504, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07262569832402233, "new_decrease_halstead_effort": 0.18218585368682472}}
{"filename": "p00060_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['forEach'](function(v){var arr=v['split']('\\x20')['map'](Number);var m=[0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa];m=m['filter'](function(v){return v!=arr[0x0]||v!=arr[0x1]||v!=arr[0x2];});var y=0x0;var n=0x0;m['forEach'](function(v){arr[0x0]+arr[0x1]+v<=0x14?y++:n++;});console['log'](y>=n?'YES':'NO');});", "test_cases": [["1 2 3\n5 6 9\n8 9 10", "YES\nYES\nNO"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var m=[1,2,3,4,5,6,7,8,9,10];\n   m=m.filter(function(v){return (v!=arr[0] || v!= arr[1] || v!=arr[2]);});\n   var y=0;\n   var n=0;\n   m.forEach(function(v){((arr[0]+arr[1]+v)<=20)?y++:n++;});\n   console.log(y>=n?\"YES\":\"NO\");\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 904, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.forEach(function (v) {\n  var arr = v.split(\" \").map(Number);\n  var m = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  m = m.filter(function (v) {\n    return v != arr[0] || v != arr[1] || v != arr[2];\n  });\n  var y = 0;\n  var n = 0;\n  m.forEach(function (v) {\n    if (arr[0] + arr[1] + v <= 20) {\n      y++;\n    } else {\n      n++;\n    }\n  });\n  console.log(y >= n ? \"YES\" : \"NO\");\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4386646634096909, "ngram_match_score": 0.01853037030684803, "weighted_ngram_match_score": 0.06567373787737024, "syntax_match_score": 0.6704545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.25, "length_score": -0.25, "increase_maintainability": -0.03641044354897904, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.008064516129032251, "new_decrease_halstead_effort": -0.16334483064558047}}
{"filename": "p00083_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');var line;while(line=lines['shift']()){var arr=line['split']('\\x20')['map'](function(n){return+n;});var year=arr[0x0];var month=arr[0x1];var day=arr[0x2];var era='';var today=new Date(year,month-0x1,day);if(today<new Date(0x74c,0x8,0x8)){era='pre-meiji';}else if(today<new Date(0x778,0x6,0x1e)){era='meiji';year-=0x74b;}else if(today<new Date(0x786,0xb,0x19)){era='taisho';year-=0x777;}else if(today<new Date(0x7c5,0x0,0x8)){era='showa';year-=0x785;}else{era='heisei';year-=0x7c4;}if(era=='pre-meiji'){console['log']('pre-meiji');continue;}console['log'](era,year,month,day);}", "test_cases": [["2005 9 3\n1868 12 2\n1868 9 7", "heisei 17 9 3\nmeiji 1 12 2\npre-meiji"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n    var arr = line.split(' ').map(function(n){return +n;});\n    var year = arr[0];\n    var month = arr[1];\n    var day = arr[2];\n    var era = '';\n\n    var today = new Date(year, month - 1, day);\n    if (today < new Date(1868, 8, 8)) {\n        era = 'pre-meiji';\n    } else if (today < new Date(1912, 6, 30)) {\n        era = 'meiji';\n        year -= 1867;\n    } else if (today < new Date(1926, 11, 25)) {\n        era = 'taisho';\n        year -= 1911;\n    } else if (today < new Date(1989, 0, 8)) {\n        era = 'showa';\n        year -= 1925;\n    } else {\n        era = 'heisei';\n        year -= 1988;\n    }\n\n    if (era == 'pre-meiji') {\n        console.log('pre-meiji');\n        continue;\n    }\n    console.log(era, year, month, day);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 905, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var arr = line.split(\" \").map(function (n) {\n    return +n;\n  });\n  var year = arr[0];\n  var month = arr[1];\n  var day = arr[2];\n  var era = \"\";\n  var today = new Date(year, month - 1, day);\n  if (today < new Date(1868, 8, 8)) {\n    era = \"pre-meiji\";\n  } else if (today < new Date(1912, 6, 30)) {\n    era = \"meiji\";\n    year -= 1867;\n  } else if (today < new Date(1926, 11, 25)) {\n    era = \"taisho\";\n    year -= 1911;\n  } else if (today < new Date(1989, 0, 8)) {\n    era = \"showa\";\n    year -= 1925;\n  } else {\n    era = \"heisei\";\n    year -= 1988;\n  }\n  if (era == \"pre-meiji\") {\n    console.log(\"pre-meiji\");\n    continue;\n  }\n  console.log(era, year, month, day);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.861614871821703, "ngram_match_score": 0.737126327286047, "weighted_ngram_match_score": 0.7699392206068256, "syntax_match_score": 1.0, "dataflow_match_score": 0.9393939393939394}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00085_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){if(Arr[i]=='0\\x200')break;var arr=Arr[i]['split']('\\x20')['map'](Number);var N=arr[0x0];var m=arr[0x1];var n={};for(var j=0x0;j<N;j++)n[j]=null;var x=0x0;for(var k=0x0;k<N;k++){var y=0x0;do{x++;if(x==N)x=0x0;if(n[x]===null)y++;}while(y!=m);n[x]=k;}console['log'](x);}", "test_cases": [["41 3\n30 9\n0 0", "31\n21"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==\"0 0\")break;\n   var arr=Arr[i].split(\" \").map(Number);\n   var N=arr[0];\n   var m=arr[1];\n   var n={};\n   for(var j=0;j<N;j++)n[j]=null;\n   var x=0;\n   for(var k=0;k<N;k++){\n      var y=0;\n      do{\n         x++;\n         if(x==N)x=0;\n         if(n[x]===null)y++;\n      }while(y!=m);\n      n[x]=k;\n   }\n   console.log(x);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 906, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  if (Arr[i] == \"0 0\") {\n    break;\n  }\n  var arr = Arr[i].split(\" \").map(Number);\n  var N = arr[0];\n  var m = arr[1];\n  var n = {};\n  for (var j = 0; j < N; j++) {\n    n[j] = null;\n  }\n  var x = 0;\n  for (var k = 0; k < N; k++) {\n    var y = 0;\n    do {\n      x++;\n      if (x == N) {\n        x = 0;\n      }\n      if (n[x] === null) {\n        y++;\n      }\n    } while (y != m);\n    n[x] = k;\n  }\n  console.log(x);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47967869693247506, "ngram_match_score": 0.018833515016800955, "weighted_ngram_match_score": 0.06314657883554818, "syntax_match_score": 0.8367346938775511, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00106_1", "type": "JavaScript", "obfuscated": "var obj={};for(var i=0x0;i<=0x19;i++){for(var j=0x0;j<=0x10;j++){for(var k=0x0;k<=0xa;k++){var weight=0xc8*i+0x12c*j+0x1f4*k;if(weight>0x1388)continue;var money=0x0;money+=0x17c*0x5*0.8*Math['floor'](i/0x5);money+=0x226*0x4*0.85*Math['floor'](j/0x4);money+=0x352*0x3*0.88*Math['floor'](k/0x3);money+=0x17c*(i%0x5);money+=0x226*(j%0x4);money+=0x352*(k%0x3);if(obj['hasOwnProperty'](weight))obj[weight]=Math['min'](obj[weight],money);else obj[weight]=money;}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;console['log'](obj[n]);}", "test_cases": [["500\n2200\n0", "850\n3390"]], "original": "var obj={};\nfor(var i=0;i<=25;i++){\n   for(var j=0;j<=16;j++){\n      for(var k=0;k<=10;k++){\n         var weight=200*i+300*j+500*k;\n         if(weight>5000)continue;\n         var money=0;\n         money+=380*5*0.8*Math.floor(i/5);\n         money+=550*4*0.85*Math.floor(j/4);\n         money+=850*3*0.88*Math.floor(k/3);\n         money+=380*(i%5);\n         money+=550*(j%4);\n         money+=850*(k%3);\n         if(obj.hasOwnProperty(weight))obj[weight]=Math.min(obj[weight],money);\n         else obj[weight]=money;\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   console.log(obj[n]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 907, "deobfuscated": "var obj = {};\nfor (var i = 0; i <= 25; i++) {\n  for (var j = 0; j <= 16; j++) {\n    for (var k = 0; k <= 10; k++) {\n      var weight = i * 200 + j * 300 + k * 500;\n      if (weight > 5000) {\n        continue;\n      }\n      var money = 0;\n      money += Math.floor(i / 5) * 1520;\n      money += Math.floor(j / 4) * 1870;\n      money += Math.floor(k / 3) * 2244;\n      money += i % 5 * 380;\n      money += j % 4 * 550;\n      money += k % 3 * 850;\n      if (obj.hasOwnProperty(weight)) {\n        obj[weight] = Math.min(obj[weight], money);\n      } else {\n        obj[weight] = money;\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  console.log(obj[n]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.40584521390478595, "ngram_match_score": 0.03926688169647571, "weighted_ngram_match_score": 0.17705834298644008, "syntax_match_score": 0.6343283582089553, "dataflow_match_score": 0.7727272727272727}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.010984487283170141, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07653061224489799, "new_decrease_halstead_effort": 0.2292269430776135}}
{"filename": "p00135_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Arr['shift']()-0x0;for(var I=0x0;I<n;I++){var arr=Arr[I]['split'](':');var h=parseInt(arr[0x0],0xa);var m=parseInt(arr[0x1],0xa);var H=h*(0x168/0xc)+m*(0x168/0xc/0x3c);var M=m*(0x168/0x3c);var hm=Math['abs'](H-M);var ans;if(hm>=0x0&&hm<0x1e)ans='alert';else if(hm>=0x5a&&hm<=0xb4)ans='safe';else ans='warning';console['log'](ans);}", "test_cases": [["4\n02:15\n06:01\n11:55\n10:40", "alert\nsafe\nalert\nwarning"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=Arr[I].split(\":\");\n   var h=parseInt(arr[0],10);\n   var m=parseInt(arr[1],10);\n   var H=h*(360/12)+m*((360/12)/60);\n   var M=m*(360/60);\n   var hm=Math.abs(H-M);\n   var ans;\n   if(hm>=0 && hm<30)ans=\"alert\";\n   else if(hm>=90 && hm<=180)ans=\"safe\";\n   else ans=\"warning\"\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 908, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nvar n = Arr.shift() - 0;\nfor (var I = 0; I < n; I++) {\n  var arr = Arr[I].split(\":\");\n  var h = parseInt(arr[0], 10);\n  var m = parseInt(arr[1], 10);\n  var H = h * 30 + m * (30 / 60);\n  var M = m * 6;\n  var hm = Math.abs(H - M);\n  var ans;\n  if (hm >= 0 && hm < 30) {\n    ans = \"alert\";\n  } else if (hm >= 90 && hm <= 180) {\n    ans = \"safe\";\n  } else {\n    ans = \"warning\";\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.43724957892046973, "ngram_match_score": 0.016688132413767, "weighted_ngram_match_score": 0.053388614640660956, "syntax_match_score": 0.803921568627451, "dataflow_match_score": 0.875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0025012156995158907, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.043165467625899234, "new_decrease_halstead_effort": 0.06373143569639039}}
{"filename": "p00206_1", "type": "JavaScript", "obfuscated": "function main(){var i=0x0,j,flag,L,MN;for(;;){L=Number(input[i++]);if(L===0x0)break;flag=!![];for(j=0x0;j<0xc;j++){MN=input[i++]['split']('\\x20')['map'](Number);L-=MN[0x0]-MN[0x1];if(flag&&L<=0x0){console['log'](j+0x1);flag=![];}}if(flag)console['log']('NA');}}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});", "test_cases": [["10000\n5000 3150\n5000 5000\n0 0\n5000 1050\n5000 3980\n5000 210\n5000 5000\n5000 5000\n0 0\n5000 2100\n5000 2100\n5000 2100\n29170\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 70831\n0", "6\nNA"]], "original": "function main() {\n  var\n  i = 0, j, flag,\n  L, MN;\n  for (;;) {\n    L = Number(input[i++]);\n    if (L === 0) break;\n    \n    flag = true;\n    for (j = 0; j < 12; j++) {\n      MN = input[i++].split(' ').map(Number);\n      L -= MN[0] - MN[1];\n      if (flag && L <= 0) {\n        console.log(j + 1);\n        flag = false;\n      }\n    }\n    \n    if (flag) console.log('NA');\n  }\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 909, "deobfuscated": "function main() {\n  var i = 0;\n  var j;\n  var flag;\n  var L;\n  var MN;\n  while (true) {\n    L = Number(input[i++]);\n    if (L === 0) {\n      break;\n    }\n    flag = true;\n    for (j = 0; j < 12; j++) {\n      MN = input[i++].split(\" \").map(Number);\n      L -= MN[0] - MN[1];\n      if (flag && L <= 0) {\n        console.log(j + 1);\n        flag = false;\n      }\n    }\n    if (flag) {\n      console.log(\"NA\");\n    }\n  }\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7660252784042484, "ngram_match_score": 0.5745757323049332, "weighted_ngram_match_score": 0.6477972895839686, "syntax_match_score": 0.9099099099099099, "dataflow_match_score": 0.9318181818181818}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.002659917325360528, "new_decrease_cyclomatic": -0.16666666666666674, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.09665711508961217}}
{"filename": "p00211_1", "type": "JavaScript", "obfuscated": "function GCD(a,b){var m=Math['max'](a,b);var n=Math['min'](a,b);while(n!=0x0){var N=n;n=m%n;m=N;}return m;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=[];for(var I=0x0;I<n;I++){var v=Arr['shift']()['split']('\\x20')['map'](Number);var gcd=GCD(v[0x0],v[0x1]);arr['push']([v[0x0]/gcd,v[0x1]/gcd]);}var lcm=0x1;arr['forEach'](function(v){var gcd=GCD(v[0x1],lcm);lcm=v[0x1]*lcm/gcd;});arr=arr['map'](function(v,i){return v[0x0]*(lcm/v[0x1]);});var lcm=0x1;arr['forEach'](function(v){var gcd=GCD(v,lcm);lcm=v*lcm/gcd;});arr['forEach'](function(v){console['log'](lcm/v);});}", "test_cases": [["2\n4 3\n5 4\n5\n789 289\n166 46\n9 4\n617 252\n972 303\n2\n8 5\n32 20\n0", "15\n16\n1598397732\n1209243492\n1939462992\n1782294192\n1360317793\n1\n1"]], "original": "function GCD(a,b){\n   var m=Math.max(a,b);\n   var n=Math.min(a,b);\n   while(n!=0){\n      var N=n;\n      n=m%n;\n      m=N;\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var I=0;I<n;I++){\n      var v=Arr.shift().split(\" \").map(Number);\n      var gcd=GCD(v[0],v[1]);\n      arr.push([v[0]/gcd,v[1]/gcd]);\n   }\n   var lcm=1;\n   arr.forEach(function(v){\n      var gcd=GCD(v[1],lcm);\n      lcm=(v[1]*lcm)/gcd;\n   });\n   arr=arr.map(function(v,i){return v[0]*(lcm/v[1]);});\n   var lcm=1;\n   arr.forEach(function(v){\n      var gcd=GCD(v,lcm);\n      lcm=(v*lcm)/gcd;\n   });\n   arr.forEach(function(v){console.log(lcm/v);});\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 910, "deobfuscated": "function GCD(a, b) {\n  var m = Math.max(a, b);\n  var n = Math.min(a, b);\n  while (n != 0) {\n    var N = n;\n    n = m % n;\n    m = N;\n  }\n  return m;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = [];\n  for (var I = 0; I < n; I++) {\n    var v = Arr.shift().split(\" \").map(Number);\n    var gcd = GCD(v[0], v[1]);\n    arr.push([v[0] / gcd, v[1] / gcd]);\n  }\n  var lcm = 1;\n  arr.forEach(function (v) {\n    var gcd = GCD(v[1], lcm);\n    lcm = v[1] * lcm / gcd;\n  });\n  arr = arr.map(function (v, i) {\n    return v[0] * (lcm / v[1]);\n  });\n  var lcm = 1;\n  arr.forEach(function (v) {\n    var gcd = GCD(v, lcm);\n    lcm = v * lcm / gcd;\n  });\n  arr.forEach(function (v) {\n    console.log(lcm / v);\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5205938086108085, "ngram_match_score": 0.052843367068257985, "weighted_ngram_match_score": 0.16789664724918993, "syntax_match_score": 0.8616352201257862, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013274336283185861, "new_decrease_halstead_effort": 0.08794546759148525}}
{"filename": "p00638_1", "type": "JavaScript", "obfuscated": "var n;var x=[];function main(){while(n=scan()){rep(n,function(i){x[i]=[scan(),scan()];});x['sort'](function(a,b){return a[0x1]-b[0x1];});var ans=!![];var w=0x0;rep(n,function(i){w+=x[i][0x0];ans=w<=x[i][0x1]&&ans;});print(ans?'Yes':'No');}}function rep(a,b,c){if(c===undefined){c=b;b=a;a=0x0;}for(var i=a;i<b;++i){if(c(i)===![]){break;}}}process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var input='';var input_index=0x0;function scan(type){if(type==='string'){return input[input_index++];}else{return+input[input_index++];}}function print(val){console['log'](val);}process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['trim']()['split'](/\\s+/);main();});", "test_cases": [["3\n2 3\n3 6\n1 2\n3\n2 3\n3 5\n1 2\n0", "Yes\nNo"]], "original": "var n;\nvar x = [];\n\nfunction main(){\n\twhile(n = scan()){\n\t\trep(n, function(i){\n\t\t\tx[i] = [scan(), scan()];\n\t\t});\n\t\tx.sort(function(a, b){\n\t\t\treturn a[1] - b[1];\n\t\t});\n\t\t//print(x);\n\t\tvar ans = true;\n\t\tvar w = 0;\n\t\trep(n, function(i){\n\t\t\tw += x[i][0];\n\t\t\tans = w <= x[i][1] && ans;\n\t\t});\n\t\tprint(ans ? \"Yes\" : \"No\");\n\t}\n}\n \nfunction rep(a, b, c){\n\tif(c === undefined){\n\t\tc = b;\n\t\tb = a;\n\t\ta = 0;\n\t}\n\tfor(var i = a; i < b; ++i){\n\t\tif(c(i) === false){\n\t\t\tbreak;\n\t\t}\n\t}\n}\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \nvar input = '';\nvar input_index = 0;\n \nfunction scan(type){\n\tif(type === 'string'){\n\t\treturn input[input_index++];\n\t}\n\telse{\n\t\treturn +input[input_index++];\n\t}\n}\n \nfunction print(val){\n\tconsole.log(val);\n}\n \nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.trim().split(/\\s+/);\n\tmain();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 911, "deobfuscated": "var n;\nvar x = [];\nfunction main() {\n  while (n = scan()) {\n    rep(n, function (i) {\n      x[i] = [scan(), scan()];\n    });\n    x.sort(function (a, b) {\n      return a[1] - b[1];\n    });\n    var ans = true;\n    var w = 0;\n    rep(n, function (i) {\n      w += x[i][0];\n      ans = w <= x[i][1] && ans;\n    });\n    print(ans ? \"Yes\" : \"No\");\n  }\n}\nfunction rep(a, b, c) {\n  if (c === undefined) {\n    c = b;\n    b = a;\n    a = 0;\n  }\n  for (var i = a; i < b; ++i) {\n    if (c(i) === false) {\n      break;\n    }\n  }\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar input = \"\";\nvar input_index = 0;\nfunction scan(type) {\n  if (type === \"string\") {\n    return input[input_index++];\n  } else {\n    return +input[input_index++];\n  }\n}\nfunction print(val) {\n  console.log(val);\n}\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.trim().split(/\\s+/);\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7675821138492931, "ngram_match_score": 0.4832582039961426, "weighted_ngram_match_score": 0.5870702514010299, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006728090127327002, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.024271844660194164, "new_decrease_halstead_effort": 0.1087800949178993}}
{"filename": "p00691_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var z=arr['shift']()-0x0;if(z==0x0)break;var zzz=z*z*z;var ary=[];for(var i=z-0x1;i>0x0;i--){for(var j=i;j>0x0;j--){var x=zzz-i*i*i-j*j*j;if(x>0x0)ary['push'](x);}}console['log'](Math['min']['apply'](null,ary));}", "test_cases": [["6\n4\n2\n0", "27\n10\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var z=arr.shift()-0;\n   if(z==0)break;\n   var zzz=z*z*z;\n   var ary=[];\n   for(var i=z-1;i>0;i--){\n      for(var j=i;j>0;j--){\n         var x=zzz-i*i*i-j*j*j\n         if(x>0)ary.push(x);\n      }\n   }\n   console.log(Math.min.apply(null, ary));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 912, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var z = arr.shift() - 0;\n  if (z == 0) {\n    break;\n  }\n  var zzz = z * z * z;\n  var ary = [];\n  for (var i = z - 1; i > 0; i--) {\n    for (var j = i; j > 0; j--) {\n      var x = zzz - i * i * i - j * j * j;\n      if (x > 0) {\n        ary.push(x);\n      }\n    }\n  }\n  console.log(Math.min.apply(null, ary));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5401100559892102, "ngram_match_score": 0.05846112500518281, "weighted_ngram_match_score": 0.21736371433627383, "syntax_match_score": 0.8846153846153846, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004791028957569887, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.026548672566371723, "new_decrease_halstead_effort": 0.1238938053097346}}
{"filename": "p00710_1", "type": "JavaScript", "obfuscated": "(function(input){var inputs=input['replace'](/\\r/g,'')['split']('\\x0a');while(!![]){var cards=[],line=inputs['shift']()['split']('\\x20'),n=parseInt(line[0x0]),r=parseInt(line[0x1]);if(n===0x0&&r===0x0)break;for(var i=n;i>0x0;i--){cards['push'](i);}while(r--){var line=inputs['shift']()['split']('\\x20'),p=parseInt(line[0x0])-0x1,c=parseInt(line[0x1]),tmp;tmp=cards['splice'](p,c);cards=tmp['concat'](cards);}console['log'](cards['shift']());}}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["5 2\n3 1\n3 1\n10 3\n1 10\n10 1\n8 3\n0 0", "4\n4"]], "original": "(function (input) {\n    var inputs = input.replace(/\\r/g, '').split(\"\\n\");\n\n    while(true) {\n        var cards = [],\n            line = inputs.shift().split(\" \"),\n            n = parseInt(line[0]),\n            r = parseInt(line[1]);\n\n        if ( n === 0 && r === 0 ) break;\n\n        for ( var i = n; i > 0; i-- ) {\n            cards.push(i);\n        }\n\n        // シャッフルする回数分だけ\n        while(r--) {\n            var line = inputs.shift().split(\" \"),\n                p = parseInt(line[0]) - 1,  // 添字なので\n                c = parseInt(line[1]),\n                tmp;\n\n            tmp = cards.splice(p, c);\n            cards = tmp.concat(cards);\n        }\n\n        console.log(cards.shift());\n    }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 913, "deobfuscated": "(function (input) {\n  var inputs = input.replace(/\\r/g, \"\").split(\"\\n\");\n  while (true) {\n    var cards = [];\n    var line = inputs.shift().split(\" \");\n    var n = parseInt(line[0]);\n    var r = parseInt(line[1]);\n    if (n === 0 && r === 0) {\n      break;\n    }\n    for (var i = n; i > 0; i--) {\n      cards.push(i);\n    }\n    while (r--) {\n      var line = inputs.shift().split(\" \");\n      var p = parseInt(line[0]) - 1;\n      var c = parseInt(line[1]);\n      var tmp;\n      tmp = cards.splice(p, c);\n      cards = tmp.concat(cards);\n    }\n    console.log(cards.shift());\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7132425926842464, "ngram_match_score": 0.47733987901894404, "weighted_ngram_match_score": 0.4982720011520038, "syntax_match_score": 0.8773584905660378, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0031413633060506374, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.021897810218978186, "new_decrease_halstead_effort": 0.07190921532846728}}
{"filename": "p00854_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var nm=arr['shift']();if(nm=='0\\x200\\x200')break;nm=nm['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];var start=nm[0x2];var ary=[];for(var i=0x0;i<=n;i++)ary[i]=!![];var i=start;var j=0x0;ary[start]=![];var cnt=0x1;while(!![]){if(cnt==ary['length']-0x2)break;if(ary[i]){j++;if(j==m){ary[i]=![];j=0x0;cnt++;}}i++;if(ary['length']-0x1<i)i=0x1;}for(var i=0x1;i<=n;i++){if(ary[i])console['log'](i);}}", "test_cases": [["8 5 3\n100 9999 98\n10000 10000 10000\n0 0 0", "1\n93\n2019"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=arr.shift();\n   if(nm==\"0 0 0\")break;\n   nm=nm.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var start=nm[2];\n   var ary=[];\n   for(var i=0;i<=n;i++)ary[i]=true;\n   var i=start;\n   var j=0;\n   ary[start]=false;\n   var cnt=1;\n   while(true){\n      if(cnt==ary.length-2)break;\n      if(ary[i]){\n         j++;\n         if(j==m){\n            ary[i]=false;\n            j=0;\n            cnt++;\n         }\n      }\n      i++;\n      if(ary.length-1<i)i=1;\n   }\n   for(var i=1;i<=n;i++){\n      if(ary[i])console.log(i);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 914, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = arr.shift();\n  if (nm == \"0 0 0\") {\n    break;\n  }\n  nm = nm.split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  var start = nm[2];\n  var ary = [];\n  for (var i = 0; i <= n; i++) {\n    ary[i] = true;\n  }\n  var i = start;\n  var j = 0;\n  ary[start] = false;\n  var cnt = 1;\n  while (true) {\n    if (cnt == ary.length - 2) {\n      break;\n    }\n    if (ary[i]) {\n      j++;\n      if (j == m) {\n        ary[i] = false;\n        j = 0;\n        cnt++;\n      }\n    }\n    i++;\n    if (ary.length - 1 < i) {\n      i = 1;\n    }\n  }\n  for (var i = 1; i <= n; i++) {\n    if (ary[i]) {\n      console.log(i);\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5006509547333786, "ngram_match_score": 0.03499129996853165, "weighted_ngram_match_score": 0.10695678126006487, "syntax_match_score": 0.860655737704918, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008774366466081318, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0730337078651685, "new_decrease_halstead_effort": 0.18422139139984273}}
{"filename": "p00999_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var abc=arr['shift']();if(abc=='0\\x200\\x200\\x200\\x200')break;var ary=(abc+'\\x20'+arr['shift']())['split']('\\x20')['map'](Number);(function(a,b,c,d,e,na,nb,nc){var ans=Math['floor'](nc/d)*d*e;var nokori=nc%d;var A=function(ans){ans+=nokori*c;ans+=na*a+nb*b;return ans;}(ans);var B=function(ans,na,nb){if(ans==0x0){var yobun=nokori==0x0?0x0:d-nokori;if(yobun>0x0)ans+=e*d;while(yobun--){if(nb>0x0)nb--;else if(na>0x0)na--;}ans+=na*a+nb*b;return ans;}if(ans!=0x0){return na*a+nb*b+nc*e;}}(ans,na,nb);console['log'](Math['min'](A,B));}['apply'](null,ary));}", "test_cases": [["70 100 340 4 200\n1 1 4\n70 100 340 4 200\n0 1 3\n70 100 340 4 200\n1 1 2\n0 0 0 0 0", "970\n800\n800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var abc=arr.shift();\n   if(abc==\"0 0 0 0 0\")break;\n   var ary=(abc+\" \"+arr.shift()).split(\" \").map(Number);\n   (function(a,b,c,d,e,na,nb,nc){\n      var ans=Math.floor(nc/d)*d*e;\n      var nokori=nc%d;\n      var A=(function(ans){\n         ans+=nokori*c;\n         ans+=na*a+nb*b;\n         return ans;\n      })(ans);\n      var B=(function(ans,na,nb){\n         if(ans==0){\n            var yobun=(nokori==0)?0:d-nokori;\n            if(yobun>0)ans+=e*d;\n            while(yobun--){\n               if(nb>0)nb--;\n               else if(na>0)na--;\n            }\n            ans+=na*a+nb*b;\n            return ans;\n         }\n         if(ans!=0){\n            return na*a+nb*b+nc*e;\n         }\n      })(ans,na,nb);\n      console.log(Math.min(A,B));\n   }).apply(null,ary);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 915, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var abc = arr.shift();\n  if (abc == \"0 0 0 0 0\") {\n    break;\n  }\n  var ary = (abc + \" \" + arr.shift()).split(\" \").map(Number);\n  (function (a, b, c, d, e, na, nb, nc) {\n    var ans = Math.floor(nc / d) * d * e;\n    var nokori = nc % d;\n    var A = function (ans) {\n      ans += nokori * c;\n      ans += na * a + nb * b;\n      return ans;\n    }(ans);\n    var B = function (ans, na, nb) {\n      if (ans == 0) {\n        var yobun = nokori == 0 ? 0 : d - nokori;\n        if (yobun > 0) {\n          ans += e * d;\n        }\n        while (yobun--) {\n          if (nb > 0) {\n            nb--;\n          } else if (na > 0) {\n            na--;\n          }\n        }\n        ans += na * a + nb * b;\n        return ans;\n      }\n      if (ans != 0) {\n        return na * a + nb * b + nc * e;\n      }\n    }(ans, na, nb);\n    console.log(Math.min(A, B));\n  }).apply(null, ary);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46541946192451755, "ngram_match_score": 0.015165267805721633, "weighted_ngram_match_score": 0.05739693363384516, "syntax_match_score": 0.7891156462585034, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014563106796116498, "new_decrease_halstead_effort": 0.12620323409386647}}
{"filename": "p01131_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var AL=Arr['shift']();var abc=['','.,!?\\x20','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz'];abc=abc['map'](function(v){return v['split']('');});for(var i=0x0;i<AL;i++){var arr=Arr[i]['split']('')['map'](Number);var str='';var a='';var n=-0x1;arr['forEach'](function(v){if(v>0x0){n++;a=abc[v][n%abc[v]['length']];}else{str+=a;n=-0x1;a='';}});console['log'](str);}", "test_cases": [["5\n20\n220\n222220\n44033055505550666011011111090666077705550301110\n000555555550000330000444000080000200004440000", "a\nb\nb\nhello, world!\nkeitai"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nvar abc=[\"\",\".,!? \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"];\nabc=abc.map(function(v){return v.split(\"\");});\nfor(var i=0;i<AL;i++){\n   var arr=Arr[i].split(\"\").map(Number);\n   var str=\"\";\n   var a=\"\";\n   var n=-1;\n   arr.forEach(function(v){\n      if(v>0){\n         n++;\n         a=abc[v][n%abc[v].length];\n      }else{\n         str+=a;\n         n=-1;\n         a=\"\";\n      }\n   });\nconsole.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 916, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar AL = Arr.shift();\nvar abc = [\"\", \".,!? \", \"abc\", \"def\", \"ghi\", \"jkl\", \"mno\", \"pqrs\", \"tuv\", \"wxyz\"];\nabc = abc.map(function (v) {\n  return v.split(\"\");\n});\nfor (var i = 0; i < AL; i++) {\n  var arr = Arr[i].split(\"\").map(Number);\n  var str = \"\";\n  var a = \"\";\n  var n = -1;\n  arr.forEach(function (v) {\n    if (v > 0) {\n      n++;\n      a = abc[v][n % abc[v].length];\n    } else {\n      str += a;\n      n = -1;\n      a = \"\";\n    }\n  });\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5292936444619405, "ngram_match_score": 0.04327693392535228, "weighted_ngram_match_score": 0.12746907249383838, "syntax_match_score": 0.9464285714285714, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01132_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var j=0x0;while(!![]){var v=Arr['shift']()-0x0;if(v==0x0)break;var m=Arr['shift']()['split']('\\x20')['map'](Number);var money=0xa*m[0x0]+0x32*m[0x1]+0x64*m[0x2]+0x1f4*m[0x3]-v;var M=[0x0,0x0,0x0,0x0];while(0x1f4<=money){M[0x3]++;money-=0x1f4;}while(0x64<=money){M[0x2]++;money-=0x64;}while(0x32<=money){M[0x1]++;money-=0x32;}while(0xa<=money){M[0x0]++;money-=0xa;}var coin=[0xa,0x32,0x64,0x1f4];var str='';m['forEach'](function(v,i){if(v>M[i])str+=coin[i]+'\\x20'+(v-M[i])+'\\x0a';});console['log'](str);}", "test_cases": [["160\n1 1 2 0\n160\n1 0 2 10\n0", "10 1\n50 1\n100 1\n\n10 1\n100 2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar j=0;\nwhile(true){\n   var v=Arr.shift()-0;\n   if(v==0)break;\n   var m=(Arr.shift()).split(\" \").map(Number);\n   var money=(10*m[0]+50*m[1]+100*m[2]+500*m[3])-v;\n   var M=[0,0,0,0];\n   while(500<=money){M[3]++;money-=500;}\n   while(100<=money){M[2]++;money-=100;}\n   while(50<=money){M[1]++;money-=50;}\n   while(10<=money){M[0]++;money-=10;}\n   var coin=[10,50,100,500];\n   var str=\"\";\n   m.forEach(function(v,i){\n      if(v>M[i])str+=coin[i]+\" \"+(v-M[i])+\"\\n\";\n   });\n   console.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 917, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar j = 0;\nwhile (true) {\n  var v = Arr.shift() - 0;\n  if (v == 0) {\n    break;\n  }\n  var m = Arr.shift().split(\" \").map(Number);\n  var money = m[0] * 10 + m[1] * 50 + m[2] * 100 + m[3] * 500 - v;\n  var M = [0, 0, 0, 0];\n  while (money >= 500) {\n    M[3]++;\n    money -= 500;\n  }\n  while (money >= 100) {\n    M[2]++;\n    money -= 100;\n  }\n  while (money >= 50) {\n    M[1]++;\n    money -= 50;\n  }\n  while (money >= 10) {\n    M[0]++;\n    money -= 10;\n  }\n  var coin = [10, 50, 100, 500];\n  var str = \"\";\n  m.forEach(function (v, i) {\n    if (v > M[i]) {\n      str += coin[i] + \" \" + (v - M[i]) + \"\\n\";\n    }\n  });\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.43746900679335243, "ngram_match_score": 0.01452440345643054, "weighted_ngram_match_score": 0.06868495705031255, "syntax_match_score": 0.6666666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015957446808510634, "new_decrease_halstead_effort": 0.0936450167973123}}
{"filename": "p01140_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var str=arr['shift']();if(str=='0\\x200')break;var ary=str['split']('\\x20')['map'](Number);var h=[];var w=[];for(var i=0x0;i<ary[0x0];i++)h['push'](arr['shift']()-0x0);for(var i=0x0;i<ary[0x1];i++)w['push'](arr['shift']()-0x0);var H={};for(var i=0x0;i<h['length'];i++){var sum=0x0;for(var j=i;j<h['length'];j++){if(j!=i)sum+=h[j];H['hasOwnProperty'](h[i]+sum)?H[h[i]+sum]++:H[h[i]+sum]=0x1;}}var W={};for(var i=0x0;i<w['length'];i++){var sum=0x0;for(var j=i;j<w['length'];j++){if(j!=i)sum+=w[j];W['hasOwnProperty'](w[i]+sum)?W[w[i]+sum]++:W[w[i]+sum]=0x1;}}var cnt=0x0;for(var k in H){if(W['hasOwnProperty'](k))cnt+=H[k]*W[k];}console['log'](cnt);}", "test_cases": [["3 3\n1\n1\n4\n2\n3\n1\n1 2\n10\n10\n10\n0 0", "6\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var str=arr.shift();\n   if(str==\"0 0\")break;\n   var ary=str.split(\" \").map(Number);\n   var h=[];\n   var w=[];\n   for(var i=0;i<ary[0];i++)h.push(arr.shift()-0);\n   for(var i=0;i<ary[1];i++)w.push(arr.shift()-0);\n   var H={};\n   for(var i=0;i<h.length;i++){\n      var sum=0;\n      for(var j=i;j<h.length;j++){\n         if(j!=i)sum+=h[j];\n         (H.hasOwnProperty(h[i]+sum))?H[h[i]+sum]++:H[h[i]+sum]=1;\n      }\n   }\n   var W={};\n   for(var i=0;i<w.length;i++){\n      var sum=0;\n      for(var j=i;j<w.length;j++){\n         if(j!=i)sum+=w[j];\n         (W.hasOwnProperty(w[i]+sum))?W[w[i]+sum]++:W[w[i]+sum]=1;\n      }\n   }\n   var cnt=0;\n   for(var k in H){\n      if(W.hasOwnProperty(k))cnt+=H[k]*W[k];\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 918, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var str = arr.shift();\n  if (str == \"0 0\") {\n    break;\n  }\n  var ary = str.split(\" \").map(Number);\n  var h = [];\n  var w = [];\n  for (var i = 0; i < ary[0]; i++) {\n    h.push(arr.shift() - 0);\n  }\n  for (var i = 0; i < ary[1]; i++) {\n    w.push(arr.shift() - 0);\n  }\n  var H = {};\n  for (var i = 0; i < h.length; i++) {\n    var sum = 0;\n    for (var j = i; j < h.length; j++) {\n      if (j != i) {\n        sum += h[j];\n      }\n      if (H.hasOwnProperty(h[i] + sum)) {\n        H[h[i] + sum]++;\n      } else {\n        H[h[i] + sum] = 1;\n      }\n    }\n  }\n  var W = {};\n  for (var i = 0; i < w.length; i++) {\n    var sum = 0;\n    for (var j = i; j < w.length; j++) {\n      if (j != i) {\n        sum += w[j];\n      }\n      if (W.hasOwnProperty(w[i] + sum)) {\n        W[w[i] + sum]++;\n      } else {\n        W[w[i] + sum] = 1;\n      }\n    }\n  }\n  var cnt = 0;\n  for (var k in H) {\n    if (W.hasOwnProperty(k)) {\n      cnt += H[k] * W[k];\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48820278070652223, "ngram_match_score": 0.015681471597463723, "weighted_ngram_match_score": 0.06350327760225143, "syntax_match_score": 0.8736263736263736, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.15384615384615374, "length_score": -0.15384615384615374, "increase_maintainability": -0.027881907673622197, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0036900369003689537, "new_decrease_halstead_effort": 0.07824384366292647}}
{"filename": "p01803_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var Arr=arr['splice'](0x0,n);var obj={};var max=0x0;Arr['forEach'](function(v){var str=v;var s=str[0x0];var flag=![];for(var i=0x0;i<str['length'];i++){if(flag)s+=str[i];flag=/[aiueo]/['test'](str[i])?!![]:![];}obj[s]=!![];max=Math['max'](max,s['length']);});for(var i=0x1;i<=max;i++){var Obj={};for(var key in obj){Obj[key['slice'](0x0,i)]=!![];}if(Object['keys'](Obj)['length']==n){console['log'](i);break;}if(i==max)console['log'](-0x1);}}", "test_cases": [["3\nhaneda\noookayama\ntsu\n2\nazusa\nazishirabe\n2\nsnuke\nsnake\n4\nhaneda\nhonda\nhanamaki\nhawaii\n0", "1\n4\n-1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var Arr = arr.splice(0,n);\n   var obj = {};\n   var max = 0;\n   Arr.forEach(function(v){\n      var str = v;\n      var s = str[0];\n      var flag = false;\n      for (var i = 0; i < str.length; i++) {\n         if (flag) s += str[i];\n         flag = (/[aiueo]/.test(str[i])) ? true : false;\n      }\n      obj[s] = true;\n      max = Math.max(max, s.length);\n   });\n   for (var i = 1; i <= max; i++) {\n      var Obj = {};\n      for (var key in obj) {\n         Obj[key.slice(0, i)] = true;\n      }\n      if (Object.keys(Obj).length == n) {\n         console.log(i);\n         break;\n      }\n      if (i == max) console.log(-1);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 919, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var Arr = arr.splice(0, n);\n  var obj = {};\n  var max = 0;\n  Arr.forEach(function (v) {\n    var str = v;\n    var s = str[0];\n    var flag = false;\n    for (var i = 0; i < str.length; i++) {\n      if (flag) {\n        s += str[i];\n      }\n      flag = /[aiueo]/.test(str[i]) ? true : false;\n    }\n    obj[s] = true;\n    max = Math.max(max, s.length);\n  });\n  for (var i = 1; i <= max; i++) {\n    var Obj = {};\n    for (var key in obj) {\n      Obj[key.slice(0, i)] = true;\n    }\n    if (Object.keys(Obj).length == n) {\n      console.log(i);\n      break;\n    }\n    if (i == max) {\n      console.log(-1);\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8718309287035477, "ngram_match_score": 0.7865416048060323, "weighted_ngram_match_score": 0.8503884092207571, "syntax_match_score": 0.8503937007874016, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011766539699426648, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.08247422680412375, "new_decrease_halstead_effort": 0.1951655917408749}}
{"filename": "p02318_1", "type": "JavaScript", "obfuscated": "function LD(a,b){var ar=new Array();for(var i=0x0;i<a['length']+0x1;i++){var subar=new Array();for(var j=0x0;j<b['length']+0x1;j++){subar['push'](0x0);}ar['push'](subar);}for(var i=0x0;i<a['length']+0x1;i++){ar[i][0x0]=i;}for(var i=0x0;i<b['length']+0x1;i++){ar[0x0][i]=i;}for(var i=0x1;i<a['length']+0x1;i++){for(var j=0x1;j<b['length']+0x1;j++){if(a['charAt'](i-0x1)==b['charAt'](j-0x1)){ar[i][j]=Math['min'](ar[i-0x1][j]+0x1,ar[i][j-0x1]+0x1,ar[i-0x1][j-0x1]);}else{ar[i][j]=Math['min'](ar[i-0x1][j]+0x1,ar[i][j-0x1]+0x1,ar[i-0x1][j-0x1]+0x1);}}}return ar[a['length']][b['length']];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var strings=input['split']('\\x0a');console['log'](LD(strings[0x0],strings[0x1]));", "test_cases": [["acac\nacm", "2"], ["icpc\nicpc", "0"]], "original": "function LD(a, b){\n    var ar = new Array();\n    for(var i = 0; i < a.length + 1; i++){\n        var subar = new Array();\n        for(var j = 0; j < b.length + 1; j++){\n            subar.push(0);\n        }\n        ar.push(subar);\n    }\n\n    for(var i = 0; i < a.length + 1; i++){\n        ar[i][0] = i;\n    }\n\n    for(var i = 0; i < b.length + 1; i++){\n        ar[0][i] = i;\n    }\n\n    for(var i = 1; i < a.length + 1; i++){\n        for(var j = 1; j < b.length + 1; j++){\n            if(a.charAt(i - 1) == b.charAt(j - 1)){\n                ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1]);\n            }else{\n                ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1] + 1);\n            }\n        }\n    }\n    return ar[a.length][b.length];\n} \n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar strings = input.split('\\n');\n\nconsole.log(LD(strings[0], strings[1]));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 920, "deobfuscated": "function LD(a, b) {\n  var ar = new Array();\n  for (var i = 0; i < a.length + 1; i++) {\n    var subar = new Array();\n    for (var j = 0; j < b.length + 1; j++) {\n      subar.push(0);\n    }\n    ar.push(subar);\n  }\n  for (var i = 0; i < a.length + 1; i++) {\n    ar[i][0] = i;\n  }\n  for (var i = 0; i < b.length + 1; i++) {\n    ar[0][i] = i;\n  }\n  for (var i = 1; i < a.length + 1; i++) {\n    for (var j = 1; j < b.length + 1; j++) {\n      if (a.charAt(i - 1) == b.charAt(j - 1)) {\n        ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1]);\n      } else {\n        ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1] + 1);\n      }\n    }\n  }\n  return ar[a.length][b.length];\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar strings = input.split(\"\\n\");\nconsole.log(LD(strings[0], strings[1]));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8300650488423034, "ngram_match_score": 0.6212714120797502, "weighted_ngram_match_score": 0.698988783289463, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02379_1", "type": "JavaScript", "obfuscated": "var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){var a=line['split']('\\x20');var b=parseInt(a[0x0],0xa);var c=parseInt(a[0x1],0xa);var d=parseInt(a[0x2],0xa);var e=parseInt(a[0x3],0xa);b=Math['sqrt']((b-d)*(b-d)+(c-e)*(c-e));console['log'](b['toFixed'](0x8));process['exit']();});process['stdin']['on']('end',function(){});", "test_cases": [["0 0 1 1", "1.41421356"]], "original": "var reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var b = parseInt(a[0],10);\n  var c = parseInt(a[1],10);\n  var d = parseInt(a[2],10);\n  var e = parseInt(a[3],10);\n  b = Math.sqrt((b-d)*(b-d)+(c-e)*(c-e));\n  console.log(b.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 921, "deobfuscated": "var reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  var a = line.split(\" \");\n  var b = parseInt(a[0], 10);\n  var c = parseInt(a[1], 10);\n  var d = parseInt(a[2], 10);\n  var e = parseInt(a[3], 10);\n  b = Math.sqrt((b - d) * (b - d) + (c - e) * (c - e));\n  console.log(b.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on(\"end\", function () {});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6347192805847303, "ngram_match_score": 0.24638121156050824, "weighted_ngram_match_score": 0.3549959107784129, "syntax_match_score": 1.0, "dataflow_match_score": 0.9375}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02538_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a')['map'](v=>v['split']('\\x20'));const [n,q]=input[0x0]['map'](v=>+v);input['shift']();const mod=0x3b800001;const str=new Array(n)['fill'](0x1);input['map'](value=>{const [l,r,d]=[value[0x0]-0x1,value[0x1]-0x1,+value[0x2]];for(let i=l;i<=r;i++){str[i]=d;}let num=0x0;for(let s=0x0;s<n;s++){num=(num*0xa+str[s])%mod;}console['log'](num);});}function toInt(v){return parseInt(v,0xa);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8 5\n3 6 2\n1 4 7\n3 8 3\n2 2 2\n4 5 1", "11222211\n77772211\n77333333\n72333333\n72311333"], ["200000 1\n123 456 7", "641437905"]], "original": "function Main(input) {\n  input = input.split(\"\\n\").map(v => v.split(\" \"));\n  const [n, q] = input[0].map(v => +v);\n  input.shift();\n  \n  \n  const mod = 998244353;\n  const str = (new Array(n)).fill(1);\n  \n  input.map(value => {\n    const [l, r, d] = [(value[0] - 1), (value[1] - 1), +value[2]];\n    for (let i = l; i <= r; i++) {\n      str[i] = d;\n    }\n\n    let num = 0;\n    for (let s = 0; s < n; s++) {\n      num = (num * 10 + str[s]) % mod;\n    }\n    console.log(num);\n  });  \n}\n\nfunction toInt(v) {\n    //return BigInt(v);\n    return parseInt(v, 10);\n}\n// 魔法\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 922, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\").map(v => v.split(\" \"));\n  const [n, q] = input[0].map(v => +v);\n  input.shift();\n  const mod = 998244353;\n  const str = new Array(n).fill(1);\n  input.map(value => {\n    const [l, r, d] = [value[0] - 1, value[1] - 1, +value[2]];\n    for (let i = l; i <= r; i++) {\n      str[i] = d;\n    }\n    let num = 0;\n    for (let s = 0; s < n; s++) {\n      num = (num * 10 + str[s]) % mod;\n    }\n    console.log(num);\n  });\n}\nfunction toInt(v) {\n  return parseInt(v, 10);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8657968951279342, "ngram_match_score": 0.8129097965125062, "weighted_ngram_match_score": 0.8200891047539479, "syntax_match_score": 0.8301886792452831, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02722_1", "type": "JavaScript", "obfuscated": "'use strict';function arrayOfDivisors(n){const divisor=new Array();divisor[0x0]=0x1;for(let i=0x2;i<=Math['sqrt'](n);i++){if(n%i===0x0){divisor['push'](i);}}const p=divisor['length'];if(Math['sqrt'](n)!==divisor[p-0x1]){divisor['push'](n/divisor[p-0x1]);}for(let i=p-0x2;0x0<=i;i--){divisor['push'](n/divisor[i]);}return divisor;}(function main(input){const n=Number(input['trim']());const subOnly=arrayOfDivisors(n-0x1)['length']-0x1;let divIncluded=0x0;const divOfN=arrayOfDivisors(n);divOfN['shift']();for(let d of divOfN){let n1=n;do{n1/=d;}while(n1%d===0x0);if(n1===0x1){divIncluded++;}else if(arrayOfDivisors(n1-0x1)['indexOf'](d)>-0x1){divIncluded++;}}console['log'](subOnly+divIncluded);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["6", "3"], ["3141", "13"], ["314159265358", "9"]], "original": "\"use strict\";\n\nfunction arrayOfDivisors(n){\n  const divisor = new Array();\n  divisor[0] = 1;\n  \n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      divisor.push(i);\n    }\n  }\n  \n  const p = divisor.length;\n  \n  if(Math.sqrt(n) !== divisor[p - 1]){\n    divisor.push(n / divisor[p - 1]);\n  }\n  \n  for(let i = p - 2; 0 <= i; i--){\n    divisor.push(n / divisor[i]);\n  }\n  \n  return divisor;\n}\n\n(function main(input){\n  const n = Number(input.trim());\n  \n  const subOnly = arrayOfDivisors(n - 1).length - 1;\n  \n  let divIncluded = 0;\n  \n  const divOfN = arrayOfDivisors(n);\n  divOfN.shift();\n  for (let d of divOfN){\n    let n1 = n;\n    do{\n      n1 /= d;\n    } while (n1 % d === 0);\n    \n    if (n1 === 1){\n      divIncluded++;\n    } else if (arrayOfDivisors(n1 - 1).indexOf(d) > -1){\n      divIncluded++;\n    }\n  }\n  \n  console.log(subOnly + divIncluded);\n  \n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 923, "deobfuscated": "'use strict';\n\nfunction arrayOfDivisors(n) {\n  const divisor = new Array();\n  divisor[0] = 1;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      divisor.push(i);\n    }\n  }\n  const p = divisor.length;\n  if (Math.sqrt(n) !== divisor[p - 1]) {\n    divisor.push(n / divisor[p - 1]);\n  }\n  for (let i = p - 2; i >= 0; i--) {\n    divisor.push(n / divisor[i]);\n  }\n  return divisor;\n}\n(function main(input) {\n  const n = Number(input.trim());\n  const subOnly = arrayOfDivisors(n - 1).length - 1;\n  let divIncluded = 0;\n  const divOfN = arrayOfDivisors(n);\n  divOfN.shift();\n  for (let d of divOfN) {\n    let n1 = n;\n    do {\n      n1 /= d;\n    } while (n1 % d === 0);\n    if (n1 === 1) {\n      divIncluded++;\n    } else if (arrayOfDivisors(n1 - 1).indexOf(d) > -1) {\n      divIncluded++;\n    }\n  }\n  console.log(subOnly + divIncluded);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8072539859807796, "ngram_match_score": 0.5963170962990713, "weighted_ngram_match_score": 0.6752520391134088, "syntax_match_score": 0.9574468085106383, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0020650531256045657, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.058238240235126026}}
{"filename": "p02780_1", "type": "JavaScript", "obfuscated": "'use strict';const fact=n=>{if(n===0x1)0x1;return n+fact(n-0x1);};function Main(input){input=input['trim']()['split']('\\x0a');const array=input[0x0]['split']('\\x20')['map'](s=>parseInt(s));const N=array[0x0];const K=array[0x1];let A=input[0x1]['split']('\\x20')['map'](s=>parseInt(s));let dp={};for(let i=0x0;i<N;++i){const a=A[i];if(dp[a])continue;let tmp=0x0;for(let j=a;j>0x0;--j){tmp+=j;}dp[a]=tmp;}let result=0x0;for(let i=0x0;i<N-(K-0x1);++i){let total=0x0;for(let j=i;j<i+K;++j){total+=dp[A[j]]*0x1/A[j];}result=Math['max'](total,result);}console['log'](result['toFixed'](0xc));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n1 2 2 4 5", "7.000000000000"], ["4 1\n6 6 6 6", "3.500000000000"], ["10 4\n17 13 13 12 15 20 10 13 17 11", "32.000000000000"]], "original": "'use strict'\n\nconst fact = (n) => {\n  if (n === 1) 1\n  return n + fact(n - 1)\n}\n\nfunction Main(input) {\n  input = input.trim().split('\\n')\n  const array = input[0].split(' ').map(s => parseInt(s))\n  const N = array[0]\n  const K = array[1]\n\n  let A = input[1].split(' ').map(s => parseInt(s))\n\n  let dp = {}\n  // 各値の期待値を計算する\n  for(let i = 0; i < N; ++i) {\n    const a = A[i]\n    if (dp[a]) continue\n\n    let tmp = 0\n    for(let j = a; j > 0; --j) {\n      tmp += j\n    }\n    dp[a] = tmp\n  }\n\n  let result = 0\n\n  // 前から順番に組み合わせる\n  for (let i = 0; i < N - (K - 1); ++i) {\n\n    let total = 0\n    for(let j = i; j < i + K; ++j) {\n      total += dp[A[j]] * 1/A[j]\n    }\n\n    result = Math.max(total, result)\n  }\n\n  console.log(result.toFixed(12))\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 924, "deobfuscated": "'use strict';\n\nconst fact = n => {\n  if (n === 1) {\n    1;\n  }\n  return n + fact(n - 1);\n};\nfunction Main(input) {\n  input = input.trim().split(\"\\n\");\n  const array = input[0].split(\" \").map(s => parseInt(s));\n  const N = array[0];\n  const K = array[1];\n  let A = input[1].split(\" \").map(s => parseInt(s));\n  let dp = {};\n  for (let i = 0; i < N; ++i) {\n    const a = A[i];\n    if (dp[a]) {\n      continue;\n    }\n    let tmp = 0;\n    for (let j = a; j > 0; --j) {\n      tmp += j;\n    }\n    dp[a] = tmp;\n  }\n  let result = 0;\n  for (let i = 0; i < N - (K - 1); ++i) {\n    let total = 0;\n    for (let j = i; j < i + K; ++j) {\n      total += dp[A[j]] * 1 / A[j];\n    }\n    result = Math.max(total, result);\n  }\n  console.log(result.toFixed(12));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6969825325886863, "ngram_match_score": 0.5178073745292289, "weighted_ngram_match_score": 0.544186063319056, "syntax_match_score": 0.9236111111111112, "dataflow_match_score": 0.8023255813953488}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02890_1", "type": "JavaScript", "obfuscated": "function Main(arg){var N=arg['split']('\\x0a')[0x0]-0x0;var A=arg['split']('\\x0a')[0x1]['split']('\\x20')['map'](v=>v-0x0);var tmp=new Set(A);var ans=[];ans['push'](N);for(var K=0x2;K<=N;K++){if(tmp['size']<K){ans['push'](0x0);}else{ans['push'](Math['floor'](tmp['size']/K));}}console['log'](ans['join']('\\x0a')['toString']());return;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n2 1 2", "3\n1\n0"], ["5\n1 2 3 4 5", "5\n2\n1\n1\n1"], ["4\n1 3 3 3", "4\n1\n0\n0"]], "original": "function Main(arg) {\n \n    var N = arg.split(\"\\n\")[0]-0;\n    var A = arg.split(\"\\n\")[1].split(\" \").map(v=>v-0);\n \n    var tmp = new Set(A);\n    var ans = [];\n\n    ans.push(N);\n\n    for (var K = 2; K <= N; K++){\n        if (tmp.size < K) {\n            ans.push(0);\n        }\n        else {\n            ans.push(Math.floor(tmp.size / K));\n        }\n    }\n\n    console.log(ans.join(\"\\n\").toString());\n\n    return;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 925, "deobfuscated": "function Main(arg) {\n  var N = arg.split(\"\\n\")[0] - 0;\n  var A = arg.split(\"\\n\")[1].split(\" \").map(v => v - 0);\n  var tmp = new Set(A);\n  var ans = [];\n  ans.push(N);\n  for (var K = 2; K <= N; K++) {\n    if (tmp.size < K) {\n      ans.push(0);\n    } else {\n      ans.push(Math.floor(tmp.size / K));\n    }\n  }\n  console.log(ans.join(\"\\n\").toString());\n  return;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8951357265628531, "ngram_match_score": 0.7344629762808511, "weighted_ngram_match_score": 0.8460799299705613, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02941_1", "type": "JavaScript", "obfuscated": "'use strict';const arg_str=require('fs')['readFileSync']('/dev/stdin','UTF-8');const args_lines=arg_str['split']('\\x0a');const n=args_lines[0x0];const a=args_lines[0x1]['split']('\\x20')['map'](x=>parseInt(x));const b=args_lines[0x2]['split']('\\x20')['map'](x=>parseInt(x));let cnt=0x0;let current_b=b;while(!![]){const max_index=current_b['indexOf'](Math['max'](...current_b));if(max_index==0x0){current_b[max_index]=current_b[max_index]-current_b[0x1]-current_b[n-0x1];}else if(max_index==n-0x1){current_b[max_index]=current_b[max_index]-current_b[n-0x2]-current_b[0x0];}else{current_b[max_index]=current_b[max_index]-current_b[max_index-0x1]-current_b[max_index+0x1];}cnt++;if(JSON['stringify'](current_b)==JSON['stringify'](a)){console['log'](cnt);break;}if(current_b['find'](x=>x<0x1)){console['log'](-0x1);break;}}", "test_cases": [["3\n1 1 1\n13 5 7", "4"], ["4\n1 2 3 4\n2 3 4 5", "-1"], ["5\n5 6 5 2 1\n9817 1108 6890 4343 8704", "25"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args_lines = arg_str.split('\\n')\nconst n = args_lines[0]\nconst a = args_lines[1].split(' ').map(x=>parseInt(x))\nconst b = args_lines[2].split(' ').map(x=>parseInt(x))\n\nlet cnt = 0\n\nlet current_b = b\n\nwhile (true){\n    const max_index = current_b.indexOf(Math.max(...current_b))\n\n    if(max_index == 0){\n        current_b[max_index] = current_b[max_index] - current_b[1] - current_b[n - 1]\n    }else if(max_index == (n - 1)){\n        current_b[max_index] = current_b[max_index] - current_b[n - 2] - current_b[0]\n    }else{\n        current_b[max_index] = current_b[max_index] - current_b[max_index - 1] - current_b[max_index + 1]\n    }\n    cnt++\n    if(JSON.stringify(current_b) == JSON.stringify(a)){\n        console.log(cnt)\n        break\n    }\n    if(current_b.find(x=>x<1)){\n        console.log(-1)\n        break\n    }\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 926, "deobfuscated": "'use strict';\n\nconst arg_str = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nconst args_lines = arg_str.split(\"\\n\");\nconst n = args_lines[0];\nconst a = args_lines[1].split(\" \").map(x => parseInt(x));\nconst b = args_lines[2].split(\" \").map(x => parseInt(x));\nlet cnt = 0;\nlet current_b = b;\nwhile (true) {\n  const max_index = current_b.indexOf(Math.max(...current_b));\n  if (max_index == 0) {\n    current_b[max_index] = current_b[max_index] - current_b[1] - current_b[n - 1];\n  } else if (max_index == n - 1) {\n    current_b[max_index] = current_b[max_index] - current_b[n - 2] - current_b[0];\n  } else {\n    current_b[max_index] = current_b[max_index] - current_b[max_index - 1] - current_b[max_index + 1];\n  }\n  cnt++;\n  if (JSON.stringify(current_b) == JSON.stringify(a)) {\n    console.log(cnt);\n    break;\n  }\n  if (current_b.find(x => x < 1)) {\n    console.log(-1);\n    break;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6362200041046949, "ngram_match_score": 0.29732967735063776, "weighted_ngram_match_score": 0.3713089334149718, "syntax_match_score": 0.9411764705882353, "dataflow_match_score": 0.935064935064935}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00654629337901258, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017341040462427793, "new_decrease_halstead_effort": 0.1501562746780537}}
{"filename": "p03171_1", "type": "JavaScript", "obfuscated": "'use strict';function solve(N,A){var dp=new Array(N+0x1)['fill'](0x0)['map'](e=>new Array(N+0x1)['fill'](0x0));var row=0x1;var col=0x1;while(col<=N){var c=col;for(var r=row;r<=N;r++){if(c>N){break;}if(c===r){dp[r][c]=A[r-0x1];}else if(c===r+0x1){dp[r][c]=Math['max'](A[r-0x1],A[c-0x1]);}else{dp[r][c]=Math['max'](A[r-0x1]+Math['min'](dp[r+0x1][c-0x1],dp[r+0x2][c]),A[c-0x1]+Math['min'](dp[r+0x1][c-0x1],dp[r][c-0x2]));}c++;}col++;}var taro=dp[0x1][N];var sum=A['reduce']((acc,current)=>acc+current);return taro-(sum-taro);}function main(input){var lines=input['split']('\\x0a');var N=parseInt(lines[0x0]);var A=lines[0x1]['split']('\\x20')['map'](l=>parseInt(l));var ans=solve(N,A);console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n10 80 90 30", "10"], ["3\n10 100 10", "-80"], ["1\n10", "10"], ["10\n1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1", "4999999995"], ["6\n4 2 9 7 1 5", "2"]], "original": "'use strict'\n\nfunction solve(N, A) {\n  var dp = new Array(N+1).fill(0).map(e => new Array(N+1).fill(0))\n  var row = 1\n  var col = 1\n  while (col <= N) {\n    var c = col\n    for (var r = row; r <= N; r++) {\n      if (c > N) {\n        break\n      }\n      if (c === r) {\n        dp[r][c] = A[r-1]\n      } else if (c === (r+1)) {\n        dp[r][c] = Math.max(A[r-1], A[c-1])\n      } else {\n        dp[r][c] = Math.max(A[r-1] + Math.min(dp[r+1][c-1], dp[r+2][c]), A[c-1] + Math.min(dp[r+1][c-1], dp[r][c-2]))\n      }\n      c++\n    }\n    col++\n  }\n  var taro = dp[1][N]\n  var sum = A.reduce((acc, current) => acc + current)\n  return taro - (sum - taro)\n}\n\nfunction main(input) {\n  var lines = input.split(\"\\n\")\n  var N = parseInt(lines[0])\n  var A = lines[1].split(' ').map(l => parseInt(l))\n  var ans = solve(N, A)\n  console.log(ans)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 927, "deobfuscated": "'use strict';\n\nfunction solve(N, A) {\n  var dp = new Array(N + 1).fill(0).map(e => new Array(N + 1).fill(0));\n  var row = 1;\n  var col = 1;\n  while (col <= N) {\n    var c = col;\n    for (var r = row; r <= N; r++) {\n      if (c > N) {\n        break;\n      }\n      if (c === r) {\n        dp[r][c] = A[r - 1];\n      } else if (c === r + 1) {\n        dp[r][c] = Math.max(A[r - 1], A[c - 1]);\n      } else {\n        dp[r][c] = Math.max(A[r - 1] + Math.min(dp[r + 1][c - 1], dp[r + 2][c]), A[c - 1] + Math.min(dp[r + 1][c - 1], dp[r][c - 2]));\n      }\n      c++;\n    }\n    col++;\n  }\n  var taro = dp[1][N];\n  var sum = A.reduce((acc, current) => acc + current);\n  return taro - (sum - taro);\n}\nfunction main(input) {\n  var lines = input.split(\"\\n\");\n  var N = parseInt(lines[0]);\n  var A = lines[1].split(\" \").map(l => parseInt(l));\n  var ans = solve(N, A);\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7175017754637495, "ngram_match_score": 0.4247032113448388, "weighted_ngram_match_score": 0.5285986138048823, "syntax_match_score": 0.9257142857142857, "dataflow_match_score": 0.990990990990991}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03222_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20')['map'](a=>~~a);var H=input[0x0];var W=input[0x1];var K=input[0x2];var mod=0xa**0x9+0x7;if(W==0x1)return 0x1;var validAmidaList=Array(0x2**(W-0x1))['fill'](0x0)['map']((a,b)=>b)['map'](a=>a['toString'](0x2))['filter'](a=>!/11/['test'](a))['map'](a=>'000000'+a)['map'](a=>a['slice'](0x1-W))['map'](a=>'0'+a+'0');var dp=Array(H+0x1);for(var i=0x0;i<=H;i++){dp[i]=Array(W)['fill'](0x0);}dp[0x0][0x0]=0x1;for(var i=0x1;i<=H;i++){validAmidaList['forEach'](function(elem){for(var j=0x0;j<W;j++){({'10':a=>dp[i][j]+=dp[i-0x1][j-0x1],'01':a=>dp[i][j]+=dp[i-0x1][j+0x1],'00':a=>dp[i][j]+=dp[i-0x1][j]}[elem[j]+elem[j+0x1]]());dp[i][j]%=mod;}});}return dp[H][K-0x1];}if(typeof require!=='undefined')console['log'](Main(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["1 3 2", "1"], ["1 3 1", "2"], ["2 3 3", "1"], ["2 3 1", "5"], ["7 1 1", "1"], ["15 8 5", "437760187"]], "original": "function Main(input){\n  input = input.split(\" \").map(a=>~~a)\n\tvar H = input[0];\n  var W = input[1];\n  var K = input[2];\n  var mod = 10**9+7;\n  \n  if(W == 1)return 1;\n  \n  var validAmidaList = Array(2**(W-1))\n  \t.fill(0)\n    .map((a,b)=>b)\n    .map(a=>a.toString(2))\n    .filter(a=>!/11/.test(a))\n    .map(a=>\"000000\"+a)\n    .map(a=>a.slice(1-W))\n    .map(a=>\"0\"+a+\"0\")\n  \n  var dp = Array(H+1);\n  for(var i = 0; i <= H;i++){\n  \tdp[i] = Array(W).fill(0);\n  }\n  dp[0][0] = 1;\n  \n  for(var i = 1; i <= H;i++){\n  \tvalidAmidaList.forEach(function(elem){\n    \tfor(var j = 0; j < W; j++){\n      \t({\n        \t\"10\":a=>dp[i][j] += dp[i-1][j-1],\n          \"01\":a=>dp[i][j] += dp[i-1][j+1],\n          \"00\":a=>dp[i][j] += dp[i-1][j]\n        })[elem[j]+elem[j+1]]();\n        dp[i][j] %= mod;\n      }\n    })\n  }\n  \n  return dp[H][K-1];\n}\n\nif(typeof require !== 'undefined')console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 928, "deobfuscated": "function Main(input) {\n  input = input.split(\" \").map(a => ~~a);\n  var H = input[0];\n  var W = input[1];\n  var K = input[2];\n  var mod = 1000000007;\n  if (W == 1) {\n    return 1;\n  }\n  var validAmidaList = Array(2 ** (W - 1)).fill(0).map((a, b) => b).map(a => a.toString(2)).filter(a => !/11/.test(a)).map(a => \"000000\" + a).map(a => a.slice(1 - W)).map(a => \"0\" + a + \"0\");\n  var dp = Array(H + 1);\n  for (var i = 0; i <= H; i++) {\n    dp[i] = Array(W).fill(0);\n  }\n  dp[0][0] = 1;\n  for (var i = 1; i <= H; i++) {\n    validAmidaList.forEach(function (elem) {\n      for (var j = 0; j < W; j++) {\n        ({\n          \"10\": a => dp[i][j] += dp[i - 1][j - 1],\n          \"01\": a => dp[i][j] += dp[i - 1][j + 1],\n          \"00\": a => dp[i][j] += dp[i - 1][j]\n        })[elem[j] + elem[j + 1]]();\n        dp[i][j] %= mod;\n      }\n    });\n  }\n  return dp[H][K - 1];\n}\nif (typeof require !== \"undefined\") {\n  console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5680057827581089, "ngram_match_score": 0.24078252178175238, "weighted_ngram_match_score": 0.42118818352046783, "syntax_match_score": 0.9543147208121827, "dataflow_match_score": 0.6557377049180327}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0005776513534698768, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020725388601036232, "new_decrease_halstead_effort": -0.006104678783889872}}
{"filename": "p03223_1", "type": "JavaScript", "obfuscated": "console['log'](main(require('fs')['readFileSync']('/dev/stdin','utf8')));function main(s){s=s['split']('\\x0a')['map'](a=>+a);var n=s[0x0];s[0x0]=s[n];s['pop']();s['sort']((a,b)=>a-b);var ans=0x0;var m=n+0x1>>0x1;for(var i=0x0;i<m;i++){ans-=s[i]*0x2;}for(;i<n;i++){ans+=s[i]*0x2;}if(n%0x2===0x0)return ans-s[m]+s[m-0x1];if(s[m-0x1]+s[m-0x2]>s[m-0x1]*0x3-s[m])return ans+s[m-0x1]+s[m-0x2];else return ans+s[m-0x1]*0x3-s[m];}", "test_cases": [["5\n6\n8\n1\n2\n3", "21"], ["6\n3\n1\n4\n1\n5\n9", "25"], ["3\n5\n5\n1", "8"]], "original": "console.log(main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\")));\nfunction main(s){\n  s = s.split(\"\\n\").map(a=>+a);\n  var n = s[0];\n  s[0] = s[n];\n  s.pop();\n  s.sort((a,b)=>a-b);\n  var ans = 0;\n  var m = n + 1 >> 1;\n  for(var i = 0; i < m; i++){\n    ans -= s[i] * 2;\n  }\n  for(; i < n; i++){\n    ans += s[i] * 2;\n  }\n  if(n % 2 === 0)return ans - s[m] + s[m-1];\n  if(s[m-1]+s[m-2] > s[m-1]*3-s[m])return ans + s[m-1] + s[m-2];\n  else return ans + s[m-1]*3 - s[m];\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 929, "deobfuscated": "console.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\nfunction main(s) {\n  s = s.split(\"\\n\").map(a => +a);\n  var n = s[0];\n  s[0] = s[n];\n  s.pop();\n  s.sort((a, b) => a - b);\n  var ans = 0;\n  var m = n + 1 >> 1;\n  for (var i = 0; i < m; i++) {\n    ans -= s[i] * 2;\n  }\n  for (; i < n; i++) {\n    ans += s[i] * 2;\n  }\n  if (n % 2 === 0) {\n    return ans - s[m] + s[m - 1];\n  }\n  if (s[m - 1] + s[m - 2] > s[m - 1] * 3 - s[m]) {\n    return ans + s[m - 1] + s[m - 2];\n  } else {\n    return ans + s[m - 1] * 3 - s[m];\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6965261187148089, "ngram_match_score": 0.3214785718736257, "weighted_ngram_match_score": 0.5181973315570384, "syntax_match_score": 0.9464285714285714, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03320_1", "type": "JavaScript", "obfuscated": "function Main(s){k=+s;var ans=[];var x=0x1;var y='';for(var i=0x0;i<k;i++){ans[i]=x+y;if(x===0x9){x=0x1;y+='9';}else x++;}console['log'](ans['join']('\\x0a'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10", "1\n2\n3\n4\n5\n6\n7\n8\n9\n19"]], "original": "function Main(s){\n  k = +s;\n  var ans = [];\n  var x = 1;\n  var y = \"\";\n  for(var i = 0; i < k; i++){\n    ans[i] = x + y;\n    if(x === 9){\n      x = 1; y += \"9\";\n    }else x++;\n  }\n  console.log(ans.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 930, "deobfuscated": "function Main(s) {\n  k = +s;\n  var ans = [];\n  var x = 1;\n  var y = \"\";\n  for (var i = 0; i < k; i++) {\n    ans[i] = x + y;\n    if (x === 9) {\n      x = 1;\n      y += \"9\";\n    } else {\n      x++;\n    }\n  }\n  console.log(ans.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7624037723149198, "ngram_match_score": 0.5277983599779509, "weighted_ngram_match_score": 0.644623746825588, "syntax_match_score": 0.8771929824561403, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03321_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=s[0x0]['split']('\\x20')['map'](a=>+a);var m=n[0x1];n=n[0x0];var b=Array(n)['fill'](0x0)['map'](a=>Array(n)['fill'](0x0));for(var i=0x0;i<m;i++){var a=s[i+0x1]['split']('\\x20')['map'](a=>a-0x1);b[a[0x0]][a[0x1]]=b[a[0x1]][a[0x0]]=0x1;}var k=0x218711a00;var x;for(i=0x0;i<n;i++){var t=b[i]['reduce']((a,b)=>a+b);if(k>t){k=t;x=i;}}var y=[],z=[];for(i=0x0;i<n;i++){if(i===x)continue;if(b[x][i])y['push'](i);else z['push'](i);}for(i=0x0;i<y['length'];i++)for(var j=i+0x1;j<y['length'];j++){if(!b[y[i]][y[j]]){console['log'](-0x1);return;}}for(i=0x0;i<z['length'];i++)for(j=i+0x1;j<z['length'];j++){if(!b[z[i]][z[j]]){console['log'](-0x1);return;}}console['log'](k*(k+0x1)/0x2+(n-k-0x1)*(n-k-0x2)/0x2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 5\n1 2\n1 3\n3 4\n3 5\n4 5", "4"], ["5 1\n1 2", "-1"], ["4 3\n1 2\n1 3\n2 3", "3"], ["10 39\n7 2\n7 1\n5 6\n5 8\n9 10\n2 8\n8 7\n3 10\n10 1\n8 10\n2 3\n7 4\n3 9\n4 10\n3 4\n6 1\n6 7\n9 5\n9 7\n6 9\n9 4\n4 6\n7 5\n8 3\n2 5\n9 2\n10 7\n8 6\n8 9\n7 3\n5 3\n4 5\n6 3\n2 10\n5 10\n4 2\n6 2\n8 4\n10 6", "21"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1];\n  n = n[0];\n  var b = Array(n).fill(0).map(a=>Array(n).fill(0));\n  for(var i = 0; i < m; i++){\n    var a = s[i+1].split(\" \").map(a=>a-1);\n    b[a[0]][a[1]] = b[a[1]][a[0]] = 1;\n  }\n  var k = 9e9;\n  var x;\n  for(i = 0; i < n; i++){\n    var t = b[i].reduce((a,b)=>a+b);\n    if(k > t){k = t; x = i;}\n  }\n  var y=[], z=[];\n  for(i = 0; i < n; i++){\n    if(i === x)continue;\n    if(b[x][i])y.push(i); else z.push(i);\n  }\n  for(i = 0; i < y.length; i++)\n  for(var j = i + 1; j < y.length; j++){\n    if(!b[y[i]][y[j]]){console.log(-1);return;}\n  }\n  for(i = 0; i < z.length; i++)\n  for(j = i + 1; j < z.length; j++){\n    if(!b[z[i]][z[j]]){console.log(-1);return;}\n  }\n  console.log(k*(k+1)/2+(n-k-1)*(n-k-2)/2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 931, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a => +a);\n  var m = n[1];\n  n = n[0];\n  var b = Array(n).fill(0).map(a => Array(n).fill(0));\n  for (var i = 0; i < m; i++) {\n    var a = s[i + 1].split(\" \").map(a => a - 1);\n    b[a[0]][a[1]] = b[a[1]][a[0]] = 1;\n  }\n  var k = 9000000000;\n  var x;\n  for (i = 0; i < n; i++) {\n    var t = b[i].reduce((a, b) => a + b);\n    if (k > t) {\n      k = t;\n      x = i;\n    }\n  }\n  var y = [];\n  var z = [];\n  for (i = 0; i < n; i++) {\n    if (i === x) {\n      continue;\n    }\n    if (b[x][i]) {\n      y.push(i);\n    } else {\n      z.push(i);\n    }\n  }\n  for (i = 0; i < y.length; i++) {\n    for (var j = i + 1; j < y.length; j++) {\n      if (!b[y[i]][y[j]]) {\n        console.log(-1);\n        return;\n      }\n    }\n  }\n  for (i = 0; i < z.length; i++) {\n    for (j = i + 1; j < z.length; j++) {\n      if (!b[z[i]][z[j]]) {\n        console.log(-1);\n        return;\n      }\n    }\n  }\n  console.log(k * (k + 1) / 2 + (n - k - 1) * (n - k - 2) / 2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6890399066507993, "ngram_match_score": 0.29763591534309425, "weighted_ngram_match_score": 0.5085237112601032, "syntax_match_score": 0.95, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00016897219235034733, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0034843205574912606, "new_decrease_halstead_effort": -0.0034843205574910385}}
{"filename": "p03391_1", "type": "JavaScript", "obfuscated": "'use strict';function myin(){return require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();}function myout(t){console['log'](t);}function myconv(i,no){switch(no){case 0x0:return i;case 0x1:return parseInt(i);case 0x2:return i['split']('\\x20');case 0x3:return i['split']('\\x0a');case 0x4:return i['split']('\\x20')['map'](a=>Number(a));case 0x5:return i['split']('\\x0a')['map'](a=>Number(a));case 0x6:return i['split']('');case 0x7:return i['split']('')['map'](a=>Number(a));}}function Main(input){input=myconv(input,0x3);input['shift']();var output=0x0;for(var i=0x0;i<input['length'];i++){var A=parseInt(input[i]['split']('\\x20')[0x0]);var B=parseInt(input[i]['split']('\\x20')[0x1]);if(A<B){output+=B;}}myout(output);}Main(myin());", "test_cases": [["2\n1 2\n3 2", "2"], ["3\n8 3\n0 1\n4 8", "9"], ["1\n1 1", "0"]], "original": "'use strict'\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  input.shift();\n  var output = 0;\n  for(var i = 0; i < input.length; i++){\n    var A = parseInt(input[i].split(\" \")[0]);\n\tvar B = parseInt(input[i].split(\" \")[1]);\n    if(A < B){\n       output += B;\n    }\n  }\n  myout(output);\n}\n  \nMain(myin());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 932, "deobfuscated": "'use strict';\n\nfunction myin() {\n  return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\n}\nfunction myout(t) {\n  console.log(t);\n}\nfunction myconv(i, no) {\n  switch (no) {\n    case 0:\n      return i;\n    case 1:\n      return parseInt(i);\n    case 2:\n      return i.split(\" \");\n    case 3:\n      return i.split(\"\\n\");\n    case 4:\n      return i.split(\" \").map(a => Number(a));\n    case 5:\n      return i.split(\"\\n\").map(a => Number(a));\n    case 6:\n      return i.split(\"\");\n    case 7:\n      return i.split(\"\").map(a => Number(a));\n  }\n}\nfunction Main(input) {\n  input = myconv(input, 3);\n  input.shift();\n  var output = 0;\n  for (var i = 0; i < input.length; i++) {\n    var A = parseInt(input[i].split(\" \")[0]);\n    var B = parseInt(input[i].split(\" \")[1]);\n    if (A < B) {\n      output += B;\n    }\n  }\n  myout(output);\n}\nMain(myin());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6244234706223616, "ngram_match_score": 0.25634648001427024, "weighted_ngram_match_score": 0.3755755903946391, "syntax_match_score": 0.8657718120805369, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03403_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],A]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));let C=Math['abs'](A[0x0])+Math['abs'](A[N-0x1]);for(let i=0x1;i<N;i++){C+=Math['abs'](A[i]-A[i-0x1]);}const c=[C-Math['abs'](A[0x0])-Math['abs'](A[0x1]-A[0x0])+Math['abs'](A[0x1])];for(let i=0x1;i<N-0x1;i++){c['push'](C-Math['abs'](A[i+0x1]-A[i])-Math['abs'](A[i]-A[i-0x1])+Math['abs'](A[i+0x1]-A[i-0x1]));}c['push'](C-Math['abs'](A[N-0x1])-Math['abs'](A[N-0x2]-A[N-0x1])+Math['abs'](A[N-0x2]));return c['join']`\\n`;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n3 5 -1", "12\n8\n10"], ["5\n1 1 1 2 0", "4\n4\n4\n2\n4"], ["6\n-679 -2409 -3258 3095 -3291 -4462", "21630\n21630\n19932\n8924\n21630\n19288"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  let C = Math.abs(A[0]) + Math.abs(A[N-1]);\n  for ( let i = 1; i < N; i++ ) {\n    C += Math.abs( A[i] - A[i-1] );\n  }\n  const c = [C - Math.abs(A[0]) - Math.abs(A[1]-A[0]) + Math.abs(A[1])];\n  for ( let i = 1; i < N-1; i++ ) {\n    c.push( C - Math.abs(A[i+1]-A[i]) - Math.abs(A[i]-A[i-1]) + Math.abs(A[i+1]-A[i-1]) );\n  }\n  c.push( C - Math.abs(A[N-1]) - Math.abs(A[N-2]-A[N-1]) + Math.abs(A[N-2]));\n  return c.join`\\n`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 933, "deobfuscated": "console.log((args => {\n  const [[N], A] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  let C = Math.abs(A[0]) + Math.abs(A[N - 1]);\n  for (let i = 1; i < N; i++) {\n    C += Math.abs(A[i] - A[i - 1]);\n  }\n  const c = [C - Math.abs(A[0]) - Math.abs(A[1] - A[0]) + Math.abs(A[1])];\n  for (let i = 1; i < N - 1; i++) {\n    c.push(C - Math.abs(A[i + 1] - A[i]) - Math.abs(A[i] - A[i - 1]) + Math.abs(A[i + 1] - A[i - 1]));\n  }\n  c.push(C - Math.abs(A[N - 1]) - Math.abs(A[N - 2] - A[N - 1]) + Math.abs(A[N - 2]));\n  return c.join`\\n`;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5981856952644252, "ngram_match_score": 0.2073174864290704, "weighted_ngram_match_score": 0.29531540451874044, "syntax_match_score": 1.0, "dataflow_match_score": 0.8901098901098901}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03480_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](main());function main(){var s=o['a'](0x1);var n=s['length'];var l=n+0x1>>0x1,u,v=l;var f=s[l-0x1];if(n&0x1)u=l-0x2;else u=l-0x1;for(;u>=0x0;u--,v++){if(s[u]!==f||s[v]!==f)break;l++;}return l;}", "test_cases": [["010", "2"], ["100000000", "8"], ["00001111", "4"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var s = o.a(1);\n  var n = s.length;\n  var l = n + 1 >> 1, u, v = l;\n  var f = s[l-1];\n  if(n & 1)u = l-2;\n  else u = l-1;\n  for(; u >= 0; u--, v++){\n    if(s[u] !== f || s[v] !== f)break;\n    l++;\n  }\n  return l;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 934, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(main());\nfunction main() {\n  var s = o.a(1);\n  var n = s.length;\n  var l = n + 1 >> 1;\n  var u;\n  var v = l;\n  var f = s[l - 1];\n  if (n & 1) {\n    u = l - 2;\n  } else {\n    u = l - 1;\n  }\n  for (; u >= 0; u--, v++) {\n    if (s[u] !== f || s[v] !== f) {\n      break;\n    }\n    l++;\n  }\n  return l;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5871962576637577, "ngram_match_score": 0.12475306307613816, "weighted_ngram_match_score": 0.4074380811160107, "syntax_match_score": 0.8165938864628821, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.2666666666666666, "length_score": -0.2666666666666666, "increase_maintainability": -0.03758341768068574, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.039735099337748325, "new_decrease_halstead_effort": -0.03956362388861856}}
{"filename": "p03553_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var n=next();var a=[0x0]['concat'](nexts(n));for(var i=n;i>=0x1;i--){var sum=0x0;for(var j=i;j<=n;j+=i)sum+=a[j];if(sum<0x0)for(var j=i;j<=n;j+=i)a[j]=0x0;}return a['reduce']((a,b)=>a+b);}", "test_cases": [["6\n1 2 -6 4 5 3", "12"], ["6\n100 -100 -100 -100 100 -100", "200"], ["5\n-1 -2 -3 -4 -5", "0"], ["2\n-1000 100000", "99000"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var a = [0].concat(nexts(n));\n  for(var i = n; i >= 1; i--){\n    var sum = 0;\n    for(var j = i; j <= n; j+=i)sum += a[j];\n    if(sum < 0)for(var j = i; j <= n; j+=i)a[j] = 0;\n  }\n  return a.reduce((a,b)=>a+b);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 935, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var n = next();\n  var a = [0].concat(nexts(n));\n  for (var i = n; i >= 1; i--) {\n    var sum = 0;\n    for (var j = i; j <= n; j += i) {\n      sum += a[j];\n    }\n    if (sum < 0) {\n      for (var j = i; j <= n; j += i) {\n        a[j] = 0;\n      }\n    }\n  }\n  return a.reduce((a, b) => a + b);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5881860887919859, "ngram_match_score": 0.12136248610484532, "weighted_ngram_match_score": 0.3582854223625907, "syntax_match_score": 0.8730964467005076, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.06382978723404253, "length_score": -0.06382978723404253, "increase_maintainability": -0.012414117950348857, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.022900763358778553, "new_decrease_halstead_effort": 0.026787923588140528}}
{"filename": "p03569_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const s=args['trim']();const N=s['length']-0x1;let x=0x0;for(let i=0x0,j=N;i<j;i++,j--){while(s[i]!==s[j]){if(s[i]==='x')x++,i++;else if(s[j]==='x')x++,j--;else return'-1';}}return''+x;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["xabxa", "2"], ["ab", "-1"], ["a", "0"], ["oxxx", "3"]], "original": "console.log((args=>{\n  const s = args.trim();\n  const N = s.length-1;\n  let x = 0;\n  for ( let i = 0, j = N; i < j; i++, j-- ) {\n    while ( s[i] !== s[j] ) {\n      if ( s[i] === 'x' ) x++,i++;\n      else if ( s[j] === 'x' ) x++,j--;\n      else return '-1';\n    }\n  }\n  return `${x}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 936, "deobfuscated": "console.log((args => {\n  const s = args.trim();\n  const N = s.length - 1;\n  let x = 0;\n  for (let i = 0, j = N; i < j; i++, j--) {\n    while (s[i] !== s[j]) {\n      if (s[i] === \"x\") {\n        x++;\n        i++;\n      } else if (s[j] === \"x\") {\n        x++;\n        j--;\n      } else {\n        return \"-1\";\n      }\n    }\n  }\n  return \"\" + x;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.60021707037361, "ngram_match_score": 0.3241395688663075, "weighted_ngram_match_score": 0.3767287126281326, "syntax_match_score": 0.7, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03639_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],a]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>v|0x0));let odd=0x0,p4=0x0;for(let i=0x0;i<N;i++){odd+=a[i]&0x1;p4+=!(a[i]%0x4);}return odd-(odd+p4===N)<=p4?'Yes':'No';})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n1 10 100", "Yes"], ["4\n1 2 3 4", "No"], ["3\n1 4 1", "Yes"], ["2\n1 1", "No"], ["6\n2 7 1 8 2 8", "Yes"]], "original": "console.log((args=>{\n  const [[N],a] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let odd = 0, p4 = 0;\n  for ( let i = 0; i < N; i++ ) {\n    odd += a[i]&1;\n    p4 += !(a[i]%4);\n  }\n  return (odd-(odd+p4===N)<=p4)?'Yes':'No';\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 937, "deobfuscated": "console.log((args => {\n  const [[N], a] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  let odd = 0;\n  let p4 = 0;\n  for (let i = 0; i < N; i++) {\n    odd += a[i] & 1;\n    p4 += !(a[i] % 4);\n  }\n  if (odd - (odd + p4 === N) <= p4) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.57473709356668, "ngram_match_score": 0.1557754086647946, "weighted_ngram_match_score": 0.30031582274478275, "syntax_match_score": 0.8428571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03799_1", "type": "JavaScript", "obfuscated": "function Main(input){var inputArr=input['split']('\\x20');var sNum=Number(inputArr[0x0]);var cNum=Number(inputArr[0x1]);var result=0x0;if(sNum>cNum/0x2){result+=Math['floor'](cNum/0x2);}else{result+=sNum;cNum-=result*0x2;result+=Math['floor'](cNum/0x4);}console['log'](result);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1 6", "2"], ["12345 678901", "175897"]], "original": "function Main (input) {\n\tvar inputArr = input.split(' ');\n\tvar sNum = Number(inputArr[0]);\n\tvar cNum = Number(inputArr[1]);\n\tvar result = 0;\n\t// Sを使う組み合わせ\n\tif (sNum > (cNum/2)) {\n\t\tresult += Math.floor(cNum/2);\n\t} else {\n\t\tresult += sNum;\n\t\tcNum -= result * 2;\n\t\tresult += Math.floor(cNum/4)\n\t}\n\tconsole.log(result);\n}\n// Main(\"12345 678901\");\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 938, "deobfuscated": "function Main(input) {\n  var inputArr = input.split(\" \");\n  var sNum = Number(inputArr[0]);\n  var cNum = Number(inputArr[1]);\n  var result = 0;\n  if (sNum > cNum / 2) {\n    result += Math.floor(cNum / 2);\n  } else {\n    result += sNum;\n    cNum -= result * 2;\n    result += Math.floor(cNum / 4);\n  }\n  console.log(result);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7564522329936451, "ngram_match_score": 0.5624972928451142, "weighted_ngram_match_score": 0.5762148649359174, "syntax_match_score": 0.8870967741935484, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03828_1", "type": "JavaScript", "obfuscated": "'use strict';const pf=(n,res)=>{for(let i=0x2;i<=n;i++){while(n%i===0x0){n/=i;if(!(i in res))res[i]=0x0;res[i]++;}}return res;};function main(input){input=Number(input['trim']());const mod=0x3b9aca00+0x7;let obj={};let ans=0x1;for(let i=0x1;i<=input;i++){obj=pf(i,obj);}Object['keys'](obj)['forEach'](n=>{ans=ans*(obj[n]+0x1)%mod;});console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "4"], ["6", "30"], ["1000", "972926972"]], "original": "'use strict'\n\nconst pf = (n, res) => {\n  for (let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      n /= i;\n      if (!(i in res)) res[i] = 0\n      res[i]++\n    }\n  }\n  return res\n}\n\nfunction main(input) {\n  input = Number(input.trim())\n  const mod = 1e9 + 7\n  let obj = {}\n  let ans = 1\n\n  for (let i = 1; i <= input; i++) {\n    obj = pf(i, obj)\n  }\n\n  Object.keys(obj).forEach(n => {\n    ans = ans * (obj[n] + 1) % mod\n  })\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 939, "deobfuscated": "'use strict';\n\nconst pf = (n, res) => {\n  for (let i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      n /= i;\n      if (!(i in res)) {\n        res[i] = 0;\n      }\n      res[i]++;\n    }\n  }\n  return res;\n};\nfunction main(input) {\n  input = Number(input.trim());\n  const mod = 1000000007;\n  let obj = {};\n  let ans = 1;\n  for (let i = 1; i <= input; i++) {\n    obj = pf(i, obj);\n  }\n  Object.keys(obj).forEach(n => {\n    ans = ans * (obj[n] + 1) % mod;\n  });\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7196005929536458, "ngram_match_score": 0.6249721525175979, "weighted_ngram_match_score": 0.6421713540487581, "syntax_match_score": 0.8404255319148937, "dataflow_match_score": 0.7708333333333334}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0044878908764101055, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02898550724637683, "new_decrease_halstead_effort": 0.11860708071537418}}
{"filename": "p03830_1", "type": "JavaScript", "obfuscated": "function main(input){var n=parseInt(input);var map={};for(var i=0x2;i<=n;i++){var t=i;for(var j=0x2;j*j<=t;j++){if(t%j==0x0){var cnt=0x0;while(t%j==0x0){cnt++;t/=j;}if(map[j]){map[j]=map[j]+cnt;}else{map[j]=cnt;}}}if(t!=0x1){if(map[t]){map[t]++;}else{map[t]=0x1;}}}var ans=0x1;var mod=0x3b9aca07;for(var x in map){ans=ans*(map[x]+0x1)%mod;}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3", "4"], ["6", "30"], ["1000", "972926972"]], "original": "function main(input) {\n    var n = parseInt(input);\n\n    var map = {};\n    for (var i = 2; i <= n; i++) {\n        var t = i;\n        for (var j = 2; j * j <= t; j++) {\n            if (t % j == 0) {\n                var cnt = 0;\n                while (t % j == 0) {\n                    cnt++;\n                    t /= j;\n                }\n                if (map[j]) {\n                    map[j] = map[j] + cnt;\n                } else {\n                    map[j] = cnt;\n                }\n            }\n        }\n        if (t != 1) {\n            if (map[t]) {\n                map[t]++;\n            } else {\n                map[t] = 1;\n            }\n        }\n    }\n\n    var ans = 1;\n    var mod = 1000000007;\n    for (var x in map) {\n        ans = (ans * (map[x] + 1)) % mod;\n    }\n\n    console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 940, "deobfuscated": "function main(input) {\n  var n = parseInt(input);\n  var map = {};\n  for (var i = 2; i <= n; i++) {\n    var t = i;\n    for (var j = 2; j * j <= t; j++) {\n      if (t % j == 0) {\n        var cnt = 0;\n        while (t % j == 0) {\n          cnt++;\n          t /= j;\n        }\n        if (map[j]) {\n          map[j] = map[j] + cnt;\n        } else {\n          map[j] = cnt;\n        }\n      }\n    }\n    if (t != 1) {\n      if (map[t]) {\n        map[t]++;\n      } else {\n        map[t] = 1;\n      }\n    }\n  }\n  var ans = 1;\n  var mod = 1000000007;\n  for (var x in map) {\n    ans = ans * (map[x] + 1) % mod;\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.957765478567998, "ngram_match_score": 0.9584907378728325, "weighted_ngram_match_score": 0.9599498171758585, "syntax_match_score": 0.912621359223301, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03948_1", "type": "JavaScript", "obfuscated": "function Main(input){var space_strinput=function(line){var arr=line['replace'](/(^\\s+)|(\\s+$)/g,'')['split']('\\x20');for(var i=0x0;i<arr['length'];++i){arr[i]=arr[i];}return arr;};var space_numinput=function(line){var arr=line['replace'](/(^\\s+)|(\\s+$)/g,'')['split']('\\x20');for(var i=0x0;i<arr['length'];++i){arr[i]=+arr[i];}return arr;};var getmin=function(a,b){return a>b?b:a;};lines=input['split']('\\x0a');var l0=space_numinput(lines[0x0]);var n=l0[0x0];var t=l0[0x1];var a=space_numinput(lines[0x1]);var rieki=0x0;var rieki_place_count=0x0;var min=a[0x0];var max=a[0x0];for(var i=0x0;i<n;++i){var val=a[i];if(val-min>rieki){rieki=val-min;rieki_place_count=0x1;}else if(val-min==rieki){rieki_place_count++;}min=val<min?val:min;}console['log'](getmin(rieki_place_count,Math['floor'](t/0x2)));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 2\n100 50 200", "1"], ["5 8\n50 30 40 10 20", "2"], ["10 100\n7 10 4 5 9 3 6 8 2 1", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\nvar space_strinput = function(line){\n\tvar arr= line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n\tfor(var i=0;i<arr.length;++i){\n\t\tarr[i]=arr[i];\n\t}\n\treturn arr;\n};\nvar space_numinput = function(line){\n\tvar arr= line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n\tfor(var i=0;i<arr.length;++i){\n\t\tarr[i]=+arr[i];\n\t}\n\treturn arr;\n};\n\nvar getmin = function(a,b){return a>b?b:a;};\n\tlines = input.split(\"\\n\"); // 1行目がinput[0], 2行目がinput[1], …に入る\n\tvar l0 = space_numinput(lines[0]);\n\tvar n = l0[0];\n\tvar t = l0[1];\n\tvar a = space_numinput(lines[1]);\n\tvar rieki = 0;\n\tvar rieki_place_count = 0;\n\tvar min = a[0];\n\tvar max = a[0];\n\tfor(var i=0;i<n;++i){\n\t\tvar val = a[i];\n\t\tif(val-min>rieki){\n\t\t\trieki=val-min;\n\t\t\trieki_place_count = 1;\n\t\t}else if(val-min==rieki){\n\t\t\trieki_place_count++;\n\t\t}\n\t\t\n\t\tmin = val < min? val:min;\n\t}\n\tconsole.log(getmin(rieki_place_count,Math.floor(t/2)));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 941, "deobfuscated": "function Main(input) {\n  function space_strinput(line) {\n    var arr = line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n    for (var i = 0; i < arr.length; ++i) {\n      arr[i] = arr[i];\n    }\n    return arr;\n  }\n  function space_numinput(line) {\n    var arr = line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n    for (var i = 0; i < arr.length; ++i) {\n      arr[i] = +arr[i];\n    }\n    return arr;\n  }\n  function getmin(a, b) {\n    if (a > b) {\n      return b;\n    } else {\n      return a;\n    }\n  }\n  lines = input.split(\"\\n\");\n  var l0 = space_numinput(lines[0]);\n  var n = l0[0];\n  var t = l0[1];\n  var a = space_numinput(lines[1]);\n  var rieki = 0;\n  var rieki_place_count = 0;\n  var min = a[0];\n  var max = a[0];\n  for (var i = 0; i < n; ++i) {\n    var val = a[i];\n    if (val - min > rieki) {\n      rieki = val - min;\n      rieki_place_count = 1;\n    } else if (val - min == rieki) {\n      rieki_place_count++;\n    }\n    min = val < min ? val : min;\n  }\n  console.log(getmin(rieki_place_count, Math.floor(t / 2)));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5456139453034479, "ngram_match_score": 0.30085981363397474, "weighted_ngram_match_score": 0.47610146208531134, "syntax_match_score": 0.9102564102564102, "dataflow_match_score": 0.49523809523809526}, "code_complexity": {"difference_score": 0.08333333333333326, "length_score": -0.08333333333333326, "increase_maintainability": -0.010684690340364122, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03125, "new_decrease_halstead_effort": 0.03560720596932643}}
{"filename": "p03958_1", "type": "JavaScript", "obfuscated": "'use strict';const main=input=>{input=input['trim']()['split']('\\x0a');const K=parseInt(input[0x0]['split']('\\x20')[0x0]);const T=parseInt(input[0x0]['split']('\\x20')[0x1]);let a=input[0x1]['split']('\\x20')['map'](el=>{return parseInt(el);});let max=a['reduce'](function(previous,current){return previous>current?previous:current;});if(max-0x1-(K-max)>0x0){console['log'](max-0x1-(K-max));}else{console['log'](0x0);}};main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 3\n3 2 2", "0"], ["6 3\n1 4 1", "1"], ["100 1\n100", "99"]], "original": "\"use strict\";\n\nconst main = input => {\n  input = input.trim().split(\"\\n\");\n  const K = parseInt(input[0].split(\" \")[0]);\n  const T = parseInt(input[0].split(\" \")[1]);\n  let a = input[1].split(\" \").map((el)=>{\n    return parseInt(el);\n  });\n  let max = a.reduce( function (previous, current) {\n  \treturn previous > current ? previous:current;\n  });\n  if(max-1-(K-max) > 0){\n    console.log(max-1-(K-max));\n  }else{\n    console.log(0);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 942, "deobfuscated": "'use strict';\n\nconst main = input => {\n  input = input.trim().split(\"\\n\");\n  const K = parseInt(input[0].split(\" \")[0]);\n  const T = parseInt(input[0].split(\" \")[1]);\n  let a = input[1].split(\" \").map(el => {\n    return parseInt(el);\n  });\n  let max = a.reduce(function (previous, current) {\n    if (previous > current) {\n      return previous;\n    } else {\n      return current;\n    }\n  });\n  if (max - 1 - (K - max) > 0) {\n    console.log(max - 1 - (K - max));\n  } else {\n    console.log(0);\n  }\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6938000821972466, "ngram_match_score": 0.3927727169691018, "weighted_ngram_match_score": 0.5803442784865515, "syntax_match_score": 0.8020833333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03965_1", "type": "JavaScript", "obfuscated": "function Main(s){const n=s['length'];const p=s['match'](/p/g)['length'];console['log'](Math['floor'](n/0x2-p));}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["gpg", "0"], ["ggppgggpgg", "2"]], "original": "function Main(s){\n  const n = s.length;\n  const p = s.match(/p/g).length;\n  console.log(Math.floor(n / 2 - p));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 943, "deobfuscated": "function Main(s) {\n  const n = s.length;\n  const p = s.match(/p/g).length;\n  console.log(Math.floor(n / 2 - p));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9343083451908808, "ngram_match_score": 0.840435017870011, "weighted_ngram_match_score": 0.8967983628935122, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04019_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('');let N=input['includes']('N');let S=input['includes']('S');let E=input['includes']('E');let W=input['includes']('W');let NS=N&&S||!N&&!S;let EW=E&&W||!E&&!W;if(NS&&EW){console['log']('Yes');}else{console['log']('No');}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["SENW", "Yes"], ["NSNNSNSN", "Yes"], ["NNEW", "No"], ["W", "No"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\");\n\tlet N = input.includes(\"N\");\n  \tlet S = input.includes(\"S\");\n  \tlet E = input.includes(\"E\");\n  \tlet W = input.includes(\"W\");\n\t\n  \tlet NS = N&&S || !N&&!S;\n  \tlet EW = E&&W || !E&&!W;\n\t  \n\tif(NS&&EW){\n      console.log(\"Yes\");\n    }else{\n      console.log(\"No\");\n    }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 944, "deobfuscated": "function Main(input) {\n  input = input.split(\"\");\n  let N = input.includes(\"N\");\n  let S = input.includes(\"S\");\n  let E = input.includes(\"E\");\n  let W = input.includes(\"W\");\n  let NS = N && S || !N && !S;\n  let EW = E && W || !E && !W;\n  if (NS && EW) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7882197411584825, "ngram_match_score": 0.5051969390792996, "weighted_ngram_match_score": 0.6476820255546302, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00035_1", "type": "JavaScript", "obfuscated": "function heron(a,b,c){var s=(a+b+c)/0x2;var S=Math['sqrt'](s*(s-a)*(s-b)*(s-c));return S;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split'](',')['map'](Number);(function(x1,y1,x2,y2,x3,y3,x4,y4){var d12=Math['sqrt'](Math['pow'](x1-x2,0x2)+Math['pow'](y1-y2,0x2));var d23=Math['sqrt'](Math['pow'](x2-x3,0x2)+Math['pow'](y2-y3,0x2));var d34=Math['sqrt'](Math['pow'](x3-x4,0x2)+Math['pow'](y3-y4,0x2));var d41=Math['sqrt'](Math['pow'](x4-x1,0x2)+Math['pow'](y4-y1,0x2));var d13=Math['sqrt'](Math['pow'](x1-x3,0x2)+Math['pow'](y1-y3,0x2));var d24=Math['sqrt'](Math['pow'](x2-x4,0x2)+Math['pow'](y2-y4,0x2));var A=heron(d12,d24,d41)+heron(d23,d34,d24);var B=heron(d12,d23,d13)+heron(d13,d34,d41);var ans=Math['abs'](A-B)<0.00001?'YES':'NO';console['log'](ans);}['apply'](null,arr));}", "test_cases": [["0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0\n0.0,0.0,3.0,0.0,1.0,1.0,1.0,3.0", "YES\nNO"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\",\").map(Number);\n   (function(x1,y1,x2,y2,x3,y3,x4,y4){\n      var d12=Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));\n      var d23=Math.sqrt(Math.pow(x2-x3,2)+Math.pow(y2-y3,2));\n      var d34=Math.sqrt(Math.pow(x3-x4,2)+Math.pow(y3-y4,2));\n      var d41=Math.sqrt(Math.pow(x4-x1,2)+Math.pow(y4-y1,2));\n      var d13=Math.sqrt(Math.pow(x1-x3,2)+Math.pow(y1-y3,2));\n      var d24=Math.sqrt(Math.pow(x2-x4,2)+Math.pow(y2-y4,2));\n      var A=heron(d12,d24,d41)+heron(d23,d34,d24);\n      var B=heron(d12,d23,d13)+heron(d13,d34,d41);\n      var ans=(Math.abs(A-B)<1.0e-5)?\"YES\":\"NO\";\n      console.log(ans);\n   }).apply(null,arr);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 945, "deobfuscated": "function heron(a, b, c) {\n  var s = (a + b + c) / 2;\n  var S = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return S;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\",\").map(Number);\n  (function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    var d12 = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    var d23 = Math.sqrt(Math.pow(x2 - x3, 2) + Math.pow(y2 - y3, 2));\n    var d34 = Math.sqrt(Math.pow(x3 - x4, 2) + Math.pow(y3 - y4, 2));\n    var d41 = Math.sqrt(Math.pow(x4 - x1, 2) + Math.pow(y4 - y1, 2));\n    var d13 = Math.sqrt(Math.pow(x1 - x3, 2) + Math.pow(y1 - y3, 2));\n    var d24 = Math.sqrt(Math.pow(x2 - x4, 2) + Math.pow(y2 - y4, 2));\n    var A = heron(d12, d24, d41) + heron(d23, d34, d24);\n    var B = heron(d12, d23, d13) + heron(d13, d34, d41);\n    var ans = Math.abs(A - B) < 0.00001 ? \"YES\" : \"NO\";\n    console.log(ans);\n  }).apply(null, arr);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5257529109676115, "ngram_match_score": 0.03474185641457041, "weighted_ngram_match_score": 0.16609587441239707, "syntax_match_score": 0.9021739130434783, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00053_1", "type": "JavaScript", "obfuscated": "var m=[-0x1,0x2,0x3,0x5,0x7,0xb,0xd];function p(n){if(m[n])return m[n];var found=m['length']-0x1;var foundP=m[found];for(var i=foundP+0x2;;i+=0x2){if(isPrime(i)){found++;m[found]=i;if(found==n)return i;}}}function isPrime(num){if(num%0x3==0x0)return![];var limit=Math['round'](Math['sqrt'](num));var i=0x1;while(i*0x6-0x1<=limit){if(num%(i*0x6-0x1)==0x0||num%(i*0x6+0x1)==0x0)return![];i++;}return!![];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['split']('\\x0a');var line;while(line=lines['shift']()){var num=+line;if(num==0x0)break;var s=0x0;for(var i=num;i>0x0;i--){s+=p(i);}console['log'](s);}", "test_cases": [["2\n9\n0", "5\n100"]], "original": "var m = [-1, 2, 3, 5, 7, 11, 13];\nfunction p(n) {\n    if (m[n])\n        return m[n];\n\n    var found = m.length - 1;\n    var foundP = m[found];\n    for (var i = foundP + 2;; i += 2) {\n        if (isPrime(i)) {\n            found++;\n            m[found] = i;\n            if (found == n)\n                return i;\n        }\n    }\n}\n\nfunction isPrime(num) {\n    if (num % 3 == 0) return false;\n    var limit = Math.round(Math.sqrt(num));\n    var i = 1;\n    while(i * 6 - 1 <= limit) {\n        if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) return false;\n        i++;\n    }\n    return true;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var num = +line;\n    if (num == 0)\n        break;\n\n    var s = 0;\n    for (var i = num; i > 0; i--) {\n        s += p(i);\n    }\n    console.log(s);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 946, "deobfuscated": "var m = [-1, 2, 3, 5, 7, 11, 13];\nfunction p(n) {\n  if (m[n]) {\n    return m[n];\n  }\n  var found = m.length - 1;\n  var foundP = m[found];\n  for (var i = foundP + 2;; i += 2) {\n    if (isPrime(i)) {\n      found++;\n      m[found] = i;\n      if (found == n) {\n        return i;\n      }\n    }\n  }\n}\nfunction isPrime(num) {\n  if (num % 3 == 0) {\n    return false;\n  }\n  var limit = Math.round(Math.sqrt(num));\n  var i = 1;\n  while (i * 6 - 1 <= limit) {\n    if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var num = +line;\n  if (num == 0) {\n    break;\n  }\n  var s = 0;\n  for (var i = num; i > 0; i--) {\n    s += p(i);\n  }\n  console.log(s);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8819747550402174, "ngram_match_score": 0.802357820172285, "weighted_ngram_match_score": 0.8629457801412564, "syntax_match_score": 0.8625954198473282, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006844728910746056, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03589743589743588, "new_decrease_halstead_effort": 0.11852087158535451}}
{"filename": "p00062_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['split']('\\x0a');var line;while(line=lines['shift']()){var nums=line['split']('')['map'](function(n){return+n;});var n=nums['length'];while(n>0x1){var a=[];for(var i=0x0;i<n-0x1;i++){a['push']((nums[i]+nums[i+0x1])%0xa);}n--;nums=a;}console['log'](nums[0x0]);}", "test_cases": [["4823108376\n1234567890\n0123456789", "5\n6\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var nums = line.split('').map(function(n){return +n;});\n    var n = nums.length;\n    while (n > 1) {\n        var a = [];\n        for (var i = 0; i < n - 1; i++) {\n            a.push((nums[i] + nums[i+1]) % 10);\n        }\n        n--;\n        nums = a;\n    }\n    console.log(nums[0]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 948, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var nums = line.split(\"\").map(function (n) {\n    return +n;\n  });\n  var n = nums.length;\n  while (n > 1) {\n    var a = [];\n    for (var i = 0; i < n - 1; i++) {\n      a.push((nums[i] + nums[i + 1]) % 10);\n    }\n    n--;\n    nums = a;\n  }\n  console.log(nums[0]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8698172935414403, "ngram_match_score": 0.711190419190238, "weighted_ngram_match_score": 0.793719780616549, "syntax_match_score": 1.0, "dataflow_match_score": 0.9743589743589743}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00063_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var cnt=0x0;Arr['forEach'](function(v){var str=v['split']('')['reverse']()['join']('');if(str==v)cnt++;});console['log'](cnt);", "test_cases": [["abcba\nsx\nabcddcba\nrttrd", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar cnt=0;\nArr.forEach(function(v){\nvar str=v.split(\"\").reverse().join(\"\");\nif(str==v)cnt++;\n});\nconsole.log(cnt);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 949, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar cnt = 0;\nArr.forEach(function (v) {\n  var str = v.split(\"\").reverse().join(\"\");\n  if (str == v) {\n    cnt++;\n  }\n});\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.479019682743154, "ngram_match_score": 0.045298051905638646, "weighted_ngram_match_score": 0.10154990983620787, "syntax_match_score": 0.7692307692307693, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00089_1", "type": "JavaScript", "obfuscated": "function bomb(y,x,sum){YX[y][x]=sum;if(y==yx['length']-0x1){max=Math['max'](max,sum);}else if((yx['length']-0x1)/0x2>y){if(YX[y+0x1][x]<sum+yx[y+0x1][x])bomb(y+0x1,x,sum+yx[y+0x1][x]);if(YX[y+0x1][x+0x1]<sum+yx[y+0x1][x+0x1])bomb(y+0x1,x+0x1,sum+yx[y+0x1][x+0x1]);}else if((yx['length']-0x1)/0x2<=y){if(x-0x1>=0x0){if(YX[y+0x1][x-0x1]<sum+yx[y+0x1][x-0x1])bomb(y+0x1,x-0x1,sum+yx[y+0x1][x-0x1]);}if(x<yx[y]['length']-0x1){if(YX[y+0x1][x]<sum+yx[y+0x1][x])bomb(y+0x1,x,sum+yx[y+0x1][x]);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var yx=[];var YX=[];Arr['forEach'](function(v){var x=v['split'](',')['map'](Number);var X=x['map'](function(v){return 0x0;});yx['push'](x);YX['push'](X);});var max=0x0;bomb(0x0,0x0,yx[0x0][0x0]);console['log'](max);", "test_cases": [["7\n3,8\n8,1,0\n2,7,4,4\n4,5,2,6,5\n2,7,4,4\n8,1,0\n3,8\n7", "55"]], "original": "function bomb(y,x,sum){\n   YX[y][x]=sum;\n   if(y==yx.length-1){\n      max=Math.max(max,sum);\n   }else if((yx.length-1)/2>y){\n      if(YX[y+1][x]<sum+yx[y+1][x])bomb(y+1,x,sum+yx[y+1][x]);\n      if(YX[y+1][x+1]<sum+yx[y+1][x+1])bomb(y+1,x+1,sum+yx[y+1][x+1]);      \n   }else if((yx.length-1)/2<=y){\n      if(x-1>=0){\n         if(YX[y+1][x-1]<sum+yx[y+1][x-1])bomb(y+1,x-1,sum+yx[y+1][x-1]);\n      }\n      if(x<yx[y].length-1){\n         if(YX[y+1][x]<sum+yx[y+1][x])bomb(y+1,x,sum+yx[y+1][x]);\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar yx=[];\nvar YX=[];\nArr.forEach(function(v){\n   var x=v.split(\",\").map(Number);\n   var X=x.map(function(v){return 0;});\n   yx.push(x);\n   YX.push(X);\n});\nvar max=0;\nbomb(0,0,yx[0][0]);\nconsole.log(max);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 950, "deobfuscated": "function bomb(y, x, sum) {\n  YX[y][x] = sum;\n  if (y == yx.length - 1) {\n    max = Math.max(max, sum);\n  } else if ((yx.length - 1) / 2 > y) {\n    if (YX[y + 1][x] < sum + yx[y + 1][x]) {\n      bomb(y + 1, x, sum + yx[y + 1][x]);\n    }\n    if (YX[y + 1][x + 1] < sum + yx[y + 1][x + 1]) {\n      bomb(y + 1, x + 1, sum + yx[y + 1][x + 1]);\n    }\n  } else if ((yx.length - 1) / 2 <= y) {\n    if (x - 1 >= 0) {\n      if (YX[y + 1][x - 1] < sum + yx[y + 1][x - 1]) {\n        bomb(y + 1, x - 1, sum + yx[y + 1][x - 1]);\n      }\n    }\n    if (x < yx[y].length - 1) {\n      if (YX[y + 1][x] < sum + yx[y + 1][x]) {\n        bomb(y + 1, x, sum + yx[y + 1][x]);\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar yx = [];\nvar YX = [];\nArr.forEach(function (v) {\n  var x = v.split(\",\").map(Number);\n  var X = x.map(function (v) {\n    return 0;\n  });\n  yx.push(x);\n  YX.push(X);\n});\nvar max = 0;\nbomb(0, 0, yx[0][0]);\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5325246723269609, "ngram_match_score": 0.03805178798840786, "weighted_ngram_match_score": 0.2076247907666718, "syntax_match_score": 0.8844221105527639, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002200541610325235, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.025924355980963654}}
{"filename": "p00095_1", "type": "JavaScript", "obfuscated": "(function(input){var inputs=input['replace'](/\\r/g,'')['split']('\\x0a'),data=[],n,line,max_index,a,b;n=parseInt(inputs['shift']());max_index=0x65;max_value=-0x1;while(n--){line=inputs['shift']()['split']('\\x20');a=parseInt(line[0x0]);b=parseInt(line[0x1]);if(b>max_value||b===max_value&&a<max_index){max_index=a;max_value=b;}}console['log'](max_index+'\\x20'+max_value);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["6\n1 14\n2 25\n3 42\n4 11\n5 40\n6 37", "3 42"]], "original": "(function (input) {\n    var inputs = input.replace(/\\r/g, '').split(\"\\n\"),\n        data = [],\n        n, line, max_index, a, b;\n\n    n = parseInt(inputs.shift());\n\n    max_index = 101;\n    max_value = -1;\n    while ( n-- ) {\n        line = inputs.shift().split(' ');\n        a = parseInt(line[0]);\n        b = parseInt(line[1]);\n\n        if ( b > max_value || b === max_value && a < max_index ) {\n            max_index = a;\n            max_value = b;\n        }\n    }\n    console.log(max_index+\" \"+max_value);\n\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 951, "deobfuscated": "(function (input) {\n  var inputs = input.replace(/\\r/g, \"\").split(\"\\n\");\n  var data = [];\n  var n;\n  var line;\n  var max_index;\n  var a;\n  var b;\n  n = parseInt(inputs.shift());\n  max_index = 101;\n  max_value = -1;\n  while (n--) {\n    line = inputs.shift().split(\" \");\n    a = parseInt(line[0]);\n    b = parseInt(line[1]);\n    if (b > max_value || b === max_value && a < max_index) {\n      max_index = a;\n      max_value = b;\n    }\n  }\n  console.log(max_index + \" \" + max_value);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7569656755988445, "ngram_match_score": 0.5259701824608194, "weighted_ngram_match_score": 0.5814379744800136, "syntax_match_score": 0.9204545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0023223045840022882, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.058252427184465994, "new_decrease_halstead_effort": -0.05825242718446577}}
{"filename": "p00096_1", "type": "JavaScript", "obfuscated": "var ab=[];for(var i=0x0;i<=0x3e8;i++){for(var j=0x0;j<=0x3e8;j++){ab['push'](i+j);}}ab['sort'](function(a,b){return a-b;});var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){if(Arr['length']==0x0)break;var n=Arr['shift']()-0x0;var cnt=0x0;var k=ab['length']-0x1;for(var i=0x0;i<ab['length'];i++){while(ab[i]+ab[k]>n)k--;var memo=k;while(ab[i]+ab[memo]==n){cnt++;memo--;}}console['log'](cnt);}", "test_cases": [["2\n3\n35", "10\n20\n8436"]], "original": "var ab=[];\nfor(var i=0;i<=1000;i++){\n   for(var j=0;j<=1000;j++){\n      ab.push(i+j);\n   }\n}\nab.sort(function(a,b){return a-b;});\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var n=Arr.shift()-0;\n   var cnt=0;\n   var k=ab.length-1;\n   for(var i=0;i<ab.length;i++){\n      while(ab[i]+ab[k]>n)k--;\n      var memo=k;\n      while(ab[i]+ab[memo]==n){\n         cnt++;\n         memo--;\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 952, "deobfuscated": "var ab = [];\nfor (var i = 0; i <= 1000; i++) {\n  for (var j = 0; j <= 1000; j++) {\n    ab.push(i + j);\n  }\n}\nab.sort(function (a, b) {\n  return a - b;\n});\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (Arr.length == 0) {\n    break;\n  }\n  var n = Arr.shift() - 0;\n  var cnt = 0;\n  var k = ab.length - 1;\n  for (var i = 0; i < ab.length; i++) {\n    while (ab[i] + ab[k] > n) {\n      k--;\n    }\n    var memo = k;\n    while (ab[i] + ab[memo] == n) {\n      cnt++;\n      memo--;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5382279916985496, "ngram_match_score": 0.06252051802139624, "weighted_ngram_match_score": 0.2046771630585167, "syntax_match_score": 0.8857142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020547945205479423, "new_decrease_halstead_effort": 0.1005365296803653}}
{"filename": "p00099_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var nq=arr['shift']()['split']('\\x20')['map'](Number);var player=[];var maxValue=0x0;var maxId=0x0;for(var i=0x0;i<nq[0x0];i++)player[i]=0x0;arr['forEach'](function(V){var av=V['split']('\\x20')['map'](Number);var a=av[0x0]-0x1;var v=av[0x1];player[a]+=v;if(a==maxId&&v>=0x0)maxValue+=v;else if(maxValue==player[a]&&maxId>a)maxId=a;else if(maxValue<player[a]){maxValue=player[a];maxId=a;}else if(a==maxId&&v<0x0){var max=-0x1*Infinity;player['forEach'](function(value,index){if(max<value){max=value;maxValue=value;maxId=index;}});}console['log'](maxId+0x1+'\\x20'+maxValue);});", "test_cases": [["3 5\n1 4 \n2 5 \n1 3\n3 6\n2 7", "1 4\n2 5\n1 7\n1 7\n2 12"], ["3 5\n1 4 \n2 5 \n2 -3\n3 4\n1 -1", "1 4\n2 5\n1 4\n1 4\n3 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar nq=arr.shift().split(\" \").map(Number);\nvar player=[];\nvar maxValue=0;\nvar maxId=0;\nfor(var i=0;i<nq[0];i++)player[i]=0;\narr.forEach(function(V){\n   var av=V.split(\" \").map(Number);\n   var a=av[0]-1;\n   var v=av[1];\n   player[a]+=v;\n   if(a==maxId && v>=0)maxValue+=v;\n   else if(maxValue==player[a] && maxId>a)maxId=a;\n   else if(maxValue<player[a]){maxValue=player[a];maxId=a;}\n   else if(a==maxId && v<0){\n      var max=(-1*Infinity);\n      player.forEach(function(value,index){\n         if(max<value){max=value;maxValue=value;maxId=index;}\n      });\n   }\n   console.log((maxId+1)+\" \"+maxValue);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 953, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar nq = arr.shift().split(\" \").map(Number);\nvar player = [];\nvar maxValue = 0;\nvar maxId = 0;\nfor (var i = 0; i < nq[0]; i++) {\n  player[i] = 0;\n}\narr.forEach(function (V) {\n  var av = V.split(\" \").map(Number);\n  var a = av[0] - 1;\n  var v = av[1];\n  player[a] += v;\n  if (a == maxId && v >= 0) {\n    maxValue += v;\n  } else if (maxValue == player[a] && maxId > a) {\n    maxId = a;\n  } else if (maxValue < player[a]) {\n    maxValue = player[a];\n    maxId = a;\n  } else if (a == maxId && v < 0) {\n    var max = -1 * Infinity;\n    player.forEach(function (value, index) {\n      if (max < value) {\n        max = value;\n        maxValue = value;\n        maxId = index;\n      }\n    });\n  }\n  console.log(maxId + 1 + \" \" + maxValue);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47117990618795036, "ngram_match_score": 0.012656810822211711, "weighted_ngram_match_score": 0.043491385358161105, "syntax_match_score": 0.8285714285714286, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00139_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');var n=Arr['shift']();for(var i=0x0;i<n;i++){if(/^>'(=+)#\\1~$/['test'](Arr[i]))console['log']('A');else if(/^>\\^(Q=)+~~$/['test'](Arr[i]))console['log']('B');else console['log']('NA');}", "test_cases": [["3\n>'======#======~\n>^Q=Q=Q=Q=Q=Q=Q=Q=Q=~~\n>'===#====~", "A\nB\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift();\nfor(var i=0;i<n;i++){\n   if(/^>'(=+)#\\1~$/.test(Arr[i]))console.log(\"A\");\n   else if(/^>\\^(Q=)+~~$/.test(Arr[i]))console.log(\"B\");\n   else console.log(\"NA\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 954, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nvar n = Arr.shift();\nfor (var i = 0; i < n; i++) {\n  if (/^>'(=+)#\\1~$/.test(Arr[i])) {\n    console.log(\"A\");\n  } else if (/^>\\^(Q=)+~~$/.test(Arr[i])) {\n    console.log(\"B\");\n  } else {\n    console.log(\"NA\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4857384440376316, "ngram_match_score": 0.03330914317374546, "weighted_ngram_match_score": 0.09146281479496278, "syntax_match_score": 0.8181818181818182, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00151_1", "type": "JavaScript", "obfuscated": "function count(y,x){var dy=[0x0,0x1,0x1,0x1];var dx=[0x1,-0x1,0x0,0x1];var max=0x1;for(var i=0x0;i<0x4;i++){var cnt=0x1;for(var j=0x1;j<=n;j++){var yy=y+dy[i]*j;var xx=x+dx[i]*j;if(yy<0x0||xx<0x0||yy>=n||xx>=n)break;if(yx[yy][xx]!=0x1)break;cnt++;}max=Math['max'](max,cnt);cnt=0x1;}return max;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var yx=[];for(var i=0x0;i<n;i++){yx[i]=Arr['shift']()['split']('')['map'](Number);}var max=0x0;for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){if(yx[i][j]==0x1)max=Math['max'](max,count(i,j));}}console['log'](max);}", "test_cases": [["5\n00011\n00101\n01000\n10101\n00010\n8\n11000001\n10110111\n01100111\n01111010\n11111111\n01011010\n10100010\n10000001\n2\n01\n00\n3\n000\n000\n000\n0", "4\n8\n1\n0"]], "original": "function count(y,x){\n   var dy=[0,1,1,1];\n   var dx=[1,-1,0,1];\n   var max=1;\n   for(var i=0;i<4;i++){\n      var cnt=1;\n      for(var j=1;j<=n;j++){\n         var yy=y+(dy[i]*j);\n         var xx=x+(dx[i]*j);\n         if(yy<0 || xx<0 || yy>=n || xx>=n)break;\n         if(yx[yy][xx]!=1)break;\n         cnt++;\n      }\n      max=Math.max(max,cnt);\n      cnt=1;\n   }\n   return max;\n}\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      yx[i]=(Arr.shift()).split(\"\").map(Number);\n   }\n   var max=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         if(yx[i][j]==1)max=Math.max(max,count(i,j));\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 955, "deobfuscated": "function count(y, x) {\n  var dy = [0, 1, 1, 1];\n  var dx = [1, -1, 0, 1];\n  var max = 1;\n  for (var i = 0; i < 4; i++) {\n    var cnt = 1;\n    for (var j = 1; j <= n; j++) {\n      var yy = y + dy[i] * j;\n      var xx = x + dx[i] * j;\n      if (yy < 0 || xx < 0 || yy >= n || xx >= n) {\n        break;\n      }\n      if (yx[yy][xx] != 1) {\n        break;\n      }\n      cnt++;\n    }\n    max = Math.max(max, cnt);\n    cnt = 1;\n  }\n  return max;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < n; i++) {\n    yx[i] = Arr.shift().split(\"\").map(Number);\n  }\n  var max = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      if (yx[i][j] == 1) {\n        max = Math.max(max, count(i, j));\n      }\n    }\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49855388733339234, "ngram_match_score": 0.05614179587128671, "weighted_ngram_match_score": 0.18807375346228264, "syntax_match_score": 0.75, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0018610090165804838, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012931034482758674, "new_decrease_halstead_effort": 0.059891084636292224}}
{"filename": "p00176_1", "type": "JavaScript", "obfuscated": "(function(input){var lines=input['split']('\\x0a');var colors=[['black',0x0,0x0,0x0],['blue',0x0,0x0,0xff],['lime',0x0,0xff,0x0],['aqua',0x0,0xff,0x0],['red',0xff,0x0,0x0],['fuchsia',0xff,0x0,0xff],['yellow',0xff,0xff,0x0],['white',0xff,0xff,0xff]];for(var i=0x0;i<lines['length'];++i){if(lines[i][0x0]==='#'){var best_color;var min_d=0x3*0x100*0x100+0x1;var r=parseInt(lines[i]['substr'](0x1,0x2),0x10);var g=parseInt(lines[i]['substr'](0x3,0x2),0x10);var b=parseInt(lines[i]['substr'](0x5,0x2),0x10);for(var j=0x0;j<colors['length'];++j){var d=Math['pow'](r-colors[j][0x1],0x2)+Math['pow'](g-colors[j][0x2],0x2)+Math['pow'](b-colors[j][0x3],0x2);if(d<min_d){min_d=d;best_color=colors[j][0x0];}}console['log'](best_color);}}}(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()));", "test_cases": [["#ffe085\n#787878\n#decade\n#ff55ff\n0", "white\nblack\nwhite\nfuchsia"]], "original": "(function(input) {\n  var lines = input.split(\"\\n\");\n  var colors = [\n    ['black', 0x00, 0x00, 0x00],\n    ['blue', 0x00, 0x00, 0xff],\n    ['lime', 0x00, 0xff, 0x00],\n    ['aqua', 0x00, 0xff, 0x00],\n    ['red', 0xff, 0x00, 0x00],\n    ['fuchsia', 0xff, 0x00, 0xff],\n    ['yellow', 0xff, 0xff, 0x00],\n    ['white', 0xff, 0xff, 0xff],\n  ];\n  for (var i = 0; i < lines.length; ++i) {\n    if (lines[i][0] === '#') {\n      var best_color;\n      var min_d = 3 * 256 * 256 + 1;\n      var r = parseInt(lines[i].substr(1, 2), 16);\n      var g = parseInt(lines[i].substr(3, 2), 16);\n      var b = parseInt(lines[i].substr(5, 2), 16);\n      for (var j = 0; j < colors.length; ++j) {\n        var d = Math.pow(r - colors[j][1], 2) + Math.pow(g - colors[j][2], 2) + Math.pow(b - colors[j][3], 2);\n        if (d < min_d) {\n          min_d = d;\n          best_color = colors[j][0];\n        }\n      }\n      console.log(best_color);\n    }\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8').trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 956, "deobfuscated": "(function (input) {\n  var lines = input.split(\"\\n\");\n  var colors = [[\"black\", 0, 0, 0], [\"blue\", 0, 0, 255], [\"lime\", 0, 255, 0], [\"aqua\", 0, 255, 0], [\"red\", 255, 0, 0], [\"fuchsia\", 255, 0, 255], [\"yellow\", 255, 255, 0], [\"white\", 255, 255, 255]];\n  for (var i = 0; i < lines.length; ++i) {\n    if (lines[i][0] === \"#\") {\n      var best_color;\n      var min_d = 196609;\n      var r = parseInt(lines[i].substr(1, 2), 16);\n      var g = parseInt(lines[i].substr(3, 2), 16);\n      var b = parseInt(lines[i].substr(5, 2), 16);\n      for (var j = 0; j < colors.length; ++j) {\n        var d = Math.pow(r - colors[j][1], 2) + Math.pow(g - colors[j][2], 2) + Math.pow(b - colors[j][3], 2);\n        if (d < min_d) {\n          min_d = d;\n          best_color = colors[j][0];\n        }\n      }\n      console.log(best_color);\n    }\n  }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6531098949385603, "ngram_match_score": 0.6221384952883943, "weighted_ngram_match_score": 0.6427819235138499, "syntax_match_score": 0.8880597014925373, "dataflow_match_score": 0.4594594594594595}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005259109376747562, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.027027027027026973, "new_decrease_halstead_effort": 0.12068671706190837}}
{"filename": "p00208_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var str=n['toString'](0x8)+'';str=str['replace'](/7/g,'9');str=str['replace'](/6/g,'8');str=str['replace'](/5/g,'7');str=str['replace'](/4/g,'5');console['log'](str);}", "test_cases": [["15\n100\n1000000000\n3\n0", "19\n155\n9358757000\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var str=n.toString(8)+\"\";\n   str=str.replace(/7/g,\"9\");\n   str=str.replace(/6/g,\"8\");\n   str=str.replace(/5/g,\"7\");\n   str=str.replace(/4/g,\"5\");\n   console.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 957, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var str = n.toString(8) + \"\";\n  str = str.replace(/7/g, \"9\");\n  str = str.replace(/6/g, \"8\");\n  str = str.replace(/5/g, \"7\");\n  str = str.replace(/4/g, \"5\");\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4958585463789339, "ngram_match_score": 0.026210756672153043, "weighted_ngram_match_score": 0.0805111000764593, "syntax_match_score": 0.8767123287671232, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007750999409831705, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03409090909090906, "new_decrease_halstead_effort": 0.20591561719644402}}
{"filename": "p00217_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var AL=Arr['shift']();if(AL==0x0)break;var pd=[];for(var i=0x0;i<AL;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var p=arr[0x0];var d=arr[0x1]+arr[0x2];pd['push']([p,d]);}pd['sort'](function(a,b){if(a[0x1]<=b[0x1])return 0x1;else return-0x1;});console['log'](pd[0x0]['join']('\\x20'));}", "test_cases": [["5\n263 2345 2504\n1 3210 1985\n5000 1501 4132\n10000 503 3107\n51 1758 2690\n3\n345 5000 2396\n7 3910 1590\n6789 2525 3616\n0", "5000 5633\n345 7396"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n    var AL=Arr.shift();\n    if(AL==0)break;\n    var pd=[];\n    for(var i=0;i<AL;i++){\n        var arr=(Arr.shift()).split(\" \").map(Number);\n        var p=arr[0];\n        var d=arr[1]+arr[2];\n        pd.push([p,d]);\n    }\n    pd.sort(function(a,b){\n        if(a[1]<=b[1])return 1;\n        else return -1;\n    });\n    console.log(pd[0].join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 958, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var AL = Arr.shift();\n  if (AL == 0) {\n    break;\n  }\n  var pd = [];\n  for (var i = 0; i < AL; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    var p = arr[0];\n    var d = arr[1] + arr[2];\n    pd.push([p, d]);\n  }\n  pd.sort(function (a, b) {\n    if (a[1] <= b[1]) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n  console.log(pd[0].join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4859689699808548, "ngram_match_score": 0.059997874473971834, "weighted_ngram_match_score": 0.1498354522579582, "syntax_match_score": 0.7340425531914894, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023809523809523836, "new_decrease_halstead_effort": 0.10408834586466165}}
{"filename": "p00253_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n===0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);for(var i=0x0;i<n+0x1;i++){var a=arr['filter'](function(v,index){return i!=index;});var h=a[0x1]-a[0x0];var flag=!![];for(var j=0x1;j<n;j++){if(h!=a[j]-a[j-0x1])flag=![];}if(flag==!![])break;}console['log'](arr[i]);}", "test_cases": [["5\n1 2 3 6 4 5\n6\n1 3 6 9 12 15 18\n4\n5 7 9 11 12\n0", "6\n1\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n===0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   for(var i=0;i<n+1;i++){\n      var a=arr.filter(function(v,index){return i!=index;});\n      var h=a[1]-a[0];\n      var flag=true;\n      for(var j=1;j<n;j++){\n         if(h!=a[j]-a[j-1])flag=false;\n      }\n      if(flag==true)break;\n   }\n   console.log(arr[i]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 959, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n === 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  for (var i = 0; i < n + 1; i++) {\n    var a = arr.filter(function (v, index) {\n      return i != index;\n    });\n    var h = a[1] - a[0];\n    var flag = true;\n    for (var j = 1; j < n; j++) {\n      if (h != a[j] - a[j - 1]) {\n        flag = false;\n      }\n    }\n    if (flag == true) {\n      break;\n    }\n  }\n  console.log(arr[i]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46542233137632383, "ngram_match_score": 0.018958603489495022, "weighted_ngram_match_score": 0.06953484572714058, "syntax_match_score": 0.7731958762886598, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07746478873239437, "new_decrease_halstead_effort": 0.22782706425309074}}
{"filename": "p00255_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var p=Arr['shift']()['split']('\\x20')['map'](Number);var j=Arr['shift']()['split']('\\x20')['map'](Number);var sum=p['reduce'](function(a,b){return a+b;});j['sort'](function(a,b){return b-a;});var max=sum*n;while(!![]){if(j['length']==0x0)break;n--;max=Math['max'](max,(sum+j['shift']())*n);}console['log'](max);}", "test_cases": [["3\n1 1 1\n3 3\n4\n3 3 3 3\n1 1 1\n5\n1 2 3 4 5\n4 3 2 1\n0", "12\n48\n76"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var p=Arr.shift().split(\" \").map(Number);\n   var j=Arr.shift().split(\" \").map(Number);\n   var sum=p.reduce(function(a,b){return a+b;});\n   j.sort(function(a,b){return b-a;});\n   var max=sum*n;\n   while(true){\n      if(j.length==0)break;\n      n--;\n      max=Math.max(max,(sum+j.shift())*n);\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 960, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var p = Arr.shift().split(\" \").map(Number);\n  var j = Arr.shift().split(\" \").map(Number);\n  var sum = p.reduce(function (a, b) {\n    return a + b;\n  });\n  j.sort(function (a, b) {\n    return b - a;\n  });\n  var max = sum * n;\n  while (true) {\n    if (j.length == 0) {\n      break;\n    }\n    n--;\n    max = Math.max(max, (sum + j.shift()) * n);\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4970226073185098, "ngram_match_score": 0.024969167564523963, "weighted_ngram_match_score": 0.07740697599522962, "syntax_match_score": 0.8857142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04347826086956519, "new_decrease_halstead_effort": 0.17276081366359908}}
{"filename": "p00429_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i=i+0x2){var n=Arr[i]-0x0;var str=Arr[i+0x1];for(var j=0x0;j<n;j++){str=str['replace'](/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(s){return s['length']+s[0x0];});}console['log'](str);if(Arr[i+0x2]=='0')break;}", "test_cases": [["5\n11\n5\n11\n0", "13112221\n13112221"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n   var Arr=(input.trim()).split(\"\\n\");\n   for(var i=0;i<Arr.length;i=i+2){\n      var n=Arr[i]-0;\n      var str=Arr[i+1];\n      for(var j=0;j<n;j++){\n      str=str.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(s){\n      return s.length+s[0];\n      });\n      }\n      console.log(str);\n      if(Arr[i+2]==\"0\")break;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 961, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i = i + 2) {\n  var n = Arr[i] - 0;\n  var str = Arr[i + 1];\n  for (var j = 0; j < n; j++) {\n    str = str.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g, function (s) {\n      return s.length + s[0];\n    });\n  }\n  console.log(str);\n  if (Arr[i + 2] == \"0\") {\n    break;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4960884247511057, "ngram_match_score": 0.025903617356595746, "weighted_ngram_match_score": 0.08888486425652267, "syntax_match_score": 0.8695652173913043, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00430_1", "type": "JavaScript", "obfuscated": "function bomb(arr){console['log'](arr['join']('\\x20'));if(arr[0x0]===0x1)return;var i=arr['length']-0x1;while(!![]){if(arr[i]!==0x1){if(arr[i]===0x2||i===arr['length']-0x1){arr[i]--;arr['push'](0x1);}else{arr[i]--;arr[i+0x1]++;}break;}i--;}bomb(arr);}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;bomb([n]);}", "test_cases": [["5\n5\n0", "5\n4 1\n3 2\n3 1 1\n2 2 1\n2 1 1 1\n1 1 1 1 1\n5\n4 1\n3 2\n3 1 1\n2 2 1\n2 1 1 1\n1 1 1 1 1"]], "original": "function bomb(arr){\n   console.log(arr.join(\" \"));\n   if(arr[0]===1)return;\n   var i=arr.length-1;\n   while(true){\n      if(arr[i]!==1){\n         if(arr[i]===2 || i===arr.length-1){arr[i]--;arr.push(1);}\n         else{arr[i]--;arr[i+1]++;}\n         break;\n      }\n      i--;\n   }\n   bomb(arr);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   bomb([n]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 962, "deobfuscated": "function bomb(arr) {\n  console.log(arr.join(\" \"));\n  if (arr[0] === 1) {\n    return;\n  }\n  var i = arr.length - 1;\n  while (true) {\n    if (arr[i] !== 1) {\n      if (arr[i] === 2 || i === arr.length - 1) {\n        arr[i]--;\n        arr.push(1);\n      } else {\n        arr[i]--;\n        arr[i + 1]++;\n      }\n      break;\n    }\n    i--;\n  }\n  bomb(arr);\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  bomb([n]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5804253144929472, "ngram_match_score": 0.11879682872693005, "weighted_ngram_match_score": 0.32661576945104454, "syntax_match_score": 0.8762886597938144, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006370347907936447, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.048387096774193505, "new_decrease_halstead_effort": 0.13073821339950387}}
{"filename": "p00594_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n===0x0)break;var ary=arr['shift']()['split']('\\x20');var obj={};ary['forEach'](function(v){obj[v]=0x0;});ary['forEach'](function(v){obj[v]++;});var ans='NO\\x20COLOR';var half=n/0x2;for(var k in obj){if(obj[k]>half){ans=k;break;}}console['log'](ans);}", "test_cases": [["8\n3 1 2 3 3 1 5 3\n7\n5 2 5 3 4 5 5\n0", "NO COLOR\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n===0)break;\n   var ary=arr.shift().split(\" \");\n   var obj={};\n   ary.forEach(function(v){obj[v]=0;});\n   ary.forEach(function(v){obj[v]++;});\n   var ans=\"NO COLOR\";\n   var half=n/2;\n   for(var k in obj){\n      if(obj[k]>half){ans=k;break;}\n   }\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 963, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n === 0) {\n    break;\n  }\n  var ary = arr.shift().split(\" \");\n  var obj = {};\n  ary.forEach(function (v) {\n    obj[v] = 0;\n  });\n  ary.forEach(function (v) {\n    obj[v]++;\n  });\n  var ans = \"NO COLOR\";\n  var half = n / 2;\n  for (var k in obj) {\n    if (obj[k] > half) {\n      ans = k;\n      break;\n    }\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5158730786143342, "ngram_match_score": 0.02920482752049045, "weighted_ngram_match_score": 0.08134631046625825, "syntax_match_score": 0.9529411764705882, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02752293577981646, "new_decrease_halstead_effort": 0.17888164858906186}}
{"filename": "p00616_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var nh=arr['shift']();if(nh=='0\\x200')break;nh=nh['split']('\\x20')['map'](Number);var n=nh[0x0];var h=nh[0x1];var xyz=[];for(var i=0x0;i<n;i++){xyz[i]=[];for(var j=0x0;j<n;j++){xyz[i][j]=[];for(var k=0x0;k<n;k++){xyz[i][j][k]=0x0;}}}for(var I=0x0;I<h;I++){var ary=arr['shift']()['split']('\\x20');var c=ary['shift']();ary=ary['map'](function(v){return v-0x1;});if(c=='xy'){for(var i=0x0;i<n;i++)xyz[ary[0x0]][ary[0x1]][i]=0x1;}else if(c=='xz'){for(var i=0x0;i<n;i++)xyz[ary[0x0]][i][ary[0x1]]=0x1;}else if(c=='yz'){for(var i=0x0;i<n;i++)xyz[i][ary[0x0]][ary[0x1]]=0x1;}}var cnt=0x0;for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){for(var k=0x0;k<n;k++){if(xyz[i][j][k]==0x0)cnt++;;}}}console['log'](cnt);}", "test_cases": [["4 3\nxy 4 4\nxz 1 2\nyz 2 3\n4 5\nxy 1 1\nxy 3 3\nxz 3 3\nyz 2 1\nyz 3 3\n0 0", "52\n46"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nh=arr.shift();\n   if(nh==\"0 0\")break;\n   nh=nh.split(\" \").map(Number);\n   var n=nh[0];\n   var h=nh[1];\n   var xyz=[];\n   for(var i=0;i<n;i++){\n      xyz[i]=[];\n      for(var j=0;j<n;j++){\n         xyz[i][j]=[];\n         for(var k=0;k<n;k++){\n            xyz[i][j][k]=0;\n         }\n      }\n   }\n   for(var I=0;I<h;I++){\n      var ary=arr.shift().split(\" \");\n      var c=ary.shift();\n      ary=ary.map(function(v){return v-1;});\n      if(c==\"xy\"){for(var i=0;i<n;i++)xyz[ary[0]][ary[1]][i]=1;}\n      else if(c==\"xz\"){for(var i=0;i<n;i++)xyz[ary[0]][i][ary[1]]=1;}\n      else if(c==\"yz\"){for(var i=0;i<n;i++)xyz[i][ary[0]][ary[1]]=1;}\n   }\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         for(var k=0;k<n;k++){\n            if(xyz[i][j][k]==0)cnt++;;\n         }\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 964, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nh = arr.shift();\n  if (nh == \"0 0\") {\n    break;\n  }\n  nh = nh.split(\" \").map(Number);\n  var n = nh[0];\n  var h = nh[1];\n  var xyz = [];\n  for (var i = 0; i < n; i++) {\n    xyz[i] = [];\n    for (var j = 0; j < n; j++) {\n      xyz[i][j] = [];\n      for (var k = 0; k < n; k++) {\n        xyz[i][j][k] = 0;\n      }\n    }\n  }\n  for (var I = 0; I < h; I++) {\n    var ary = arr.shift().split(\" \");\n    var c = ary.shift();\n    ary = ary.map(function (v) {\n      return v - 1;\n    });\n    if (c == \"xy\") {\n      for (var i = 0; i < n; i++) {\n        xyz[ary[0]][ary[1]][i] = 1;\n      }\n    } else if (c == \"xz\") {\n      for (var i = 0; i < n; i++) {\n        xyz[ary[0]][i][ary[1]] = 1;\n      }\n    } else if (c == \"yz\") {\n      for (var i = 0; i < n; i++) {\n        xyz[i][ary[0]][ary[1]] = 1;\n      }\n    }\n  }\n  var cnt = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      for (var k = 0; k < n; k++) {\n        if (xyz[i][j][k] == 0) {\n          cnt++;\n        }\n        ;\n      }\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5120993292303819, "ngram_match_score": 0.03265668453672156, "weighted_ngram_match_score": 0.13057316826997378, "syntax_match_score": 0.8851674641148325, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01016949152542368, "new_decrease_halstead_effort": 0.09427273734352515}}
{"filename": "p00716_1", "type": "JavaScript", "obfuscated": "function F1(m,b,c){var sum=0x0;for(var i=0x0;i<Y;i++){sum+=Math['floor'](m*b);m-=c;}return m+sum;}function F2(m,b,c){for(var i=0x0;i<Y;i++){m+=Math['floor'](m*b)-c;}return m;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var M=Arr['shift']()-0x0;for(var i=0x0;i<M;i++){var money=Arr['shift']()-0x0;var Y=Arr['shift']()-0x0;var N=Arr['shift']()-0x0;var arr=[];for(var j=0x0;j<N;j++){var D=Arr['shift']()['split']('\\x20')['map'](Number);if(D[0x0]==0x0)arr['push'](F1(money,D[0x1],D[0x2]));if(D[0x0]==0x1)arr['push'](F2(money,D[0x1],D[0x2]));}console['log'](Math['max']['apply'](null,arr));}", "test_cases": [["4\n1000000\n5\n2\n0 0.03125 3000\n1 0.03125 3000\n6620000\n7\n2\n0 0.0732421875 42307\n1 0.0740966796875 40942\n39677000\n4\n4\n0 0.0709228515625 30754\n1 0.00634765625 26165\n0 0.03662109375 79468\n0 0.0679931640625 10932\n10585000\n6\n4\n1 0.0054931640625 59759\n1 0.12353515625 56464\n0 0.0496826171875 98193\n0 0.0887451171875 78966", "1150357\n10559683\n50796918\n20829397"]], "original": "function F1(m,b,c){\n   var sum=0;\n   for(var i=0;i<Y;i++){\n      sum+=Math.floor(m*b);\n      m-=c;\n   }\n   return m+sum;\n}\nfunction F2(m,b,c){\n   for(var i=0;i<Y;i++){\n      m+=Math.floor(m*b)-c;\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar M=Arr.shift()-0;\nfor(var i=0;i<M;i++){\n   var money=Arr.shift()-0;\n   var Y=Arr.shift()-0;\n   var N=Arr.shift()-0;\n   var arr=[];\n   for(var j=0;j<N;j++){\n      var D=(Arr.shift()).split(\" \").map(Number);\n      if(D[0]==0)arr.push(F1(money,D[1],D[2]));\n      if(D[0]==1)arr.push(F2(money,D[1],D[2]));\n   }\n   console.log(Math.max.apply(null,arr));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 965, "deobfuscated": "function F1(m, b, c) {\n  var sum = 0;\n  for (var i = 0; i < Y; i++) {\n    sum += Math.floor(m * b);\n    m -= c;\n  }\n  return m + sum;\n}\nfunction F2(m, b, c) {\n  for (var i = 0; i < Y; i++) {\n    m += Math.floor(m * b) - c;\n  }\n  return m;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar M = Arr.shift() - 0;\nfor (var i = 0; i < M; i++) {\n  var money = Arr.shift() - 0;\n  var Y = Arr.shift() - 0;\n  var N = Arr.shift() - 0;\n  var arr = [];\n  for (var j = 0; j < N; j++) {\n    var D = Arr.shift().split(\" \").map(Number);\n    if (D[0] == 0) {\n      arr.push(F1(money, D[1], D[2]));\n    }\n    if (D[0] == 1) {\n      arr.push(F2(money, D[1], D[2]));\n    }\n  }\n  console.log(Math.max.apply(null, arr));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5266029090747386, "ngram_match_score": 0.05504515159624997, "weighted_ngram_match_score": 0.18061818538297691, "syntax_match_score": 0.8707482993197279, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00723_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr['shift']()-0x0;for(var I=0x0;I<n;I++){var str=Arr['shift']();var arr=[];for(var i=0x1;i<str['length'];i++){arr['push']([str['slice'](0x0,i),str['slice'](i,str['length'])]);}var obj={};for(var i=0x0;i<arr['length'];i++){var A=arr[i][0x0];var B=arr[i][0x1];var a=A['split']('')['reverse']()['join']('');var b=B['split']('')['reverse']()['join']('');obj[A+B]=!![];obj[A+b]=!![];obj[a+B]=!![];obj[a+b]=!![];obj[B+A]=!![];obj[B+a]=!![];obj[b+A]=!![];obj[b+a]=!![];}console['log'](Object['keys'](obj)['length']);}", "test_cases": [["4\naa\nabba\nabcd\nabcde", "1\n6\n12\n18"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var str=Arr.shift();\n   var arr=[];\n   for(var i=1;i<str.length;i++){\n      arr.push([str.slice(0,i),str.slice(i,str.length)]);\n   }\n   var obj={};\n   for(var i=0;i<arr.length;i++){\n      var A=arr[i][0];\n      var B=arr[i][1];\n      var a=A.split(\"\").reverse().join(\"\");\n      var b=B.split(\"\").reverse().join(\"\");\n      obj[A+B]=true;\n      obj[A+b]=true;\n      obj[a+B]=true;\n      obj[a+b]=true;\n      obj[B+A]=true;\n      obj[B+a]=true;\n      obj[b+A]=true;\n      obj[b+a]=true;\n   }\n   console.log(Object.keys(obj).length);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 966, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr.shift() - 0;\nfor (var I = 0; I < n; I++) {\n  var str = Arr.shift();\n  var arr = [];\n  for (var i = 1; i < str.length; i++) {\n    arr.push([str.slice(0, i), str.slice(i, str.length)]);\n  }\n  var obj = {};\n  for (var i = 0; i < arr.length; i++) {\n    var A = arr[i][0];\n    var B = arr[i][1];\n    var a = A.split(\"\").reverse().join(\"\");\n    var b = B.split(\"\").reverse().join(\"\");\n    obj[A + B] = true;\n    obj[A + b] = true;\n    obj[a + B] = true;\n    obj[a + b] = true;\n    obj[B + A] = true;\n    obj[B + a] = true;\n    obj[b + A] = true;\n    obj[b + a] = true;\n  }\n  console.log(Object.keys(obj).length);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5082709985463345, "ngram_match_score": 0.01673713424000812, "weighted_ngram_match_score": 0.057163186475942165, "syntax_match_score": 0.9591836734693877, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009123597180935583, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.10041841004184104, "new_decrease_halstead_effort": 0.19894401275154405}}
{"filename": "p00774_1", "type": "JavaScript", "obfuscated": "function stoneRemove(){yx['forEach'](function(v,i){var str=v['join']('')['replace'](/([1-9])\\1{2,}/,function(x){point+=(x[0x0]-0x0)*x['length'];return x['replace'](/./g,'0');});yx[i]=str['split']('')['map'](Number);});var flag=!![];while(flag){flag=![];for(var i=0x0;i<H-0x1;i++){for(var j=0x0;j<0x5;j++){if(yx[i][j]!=0x0&&yx[i+0x1][j]==0x0){yx[i+0x1][j]=yx[i][j];yx[i][j]=0x0;flag=!![];}}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var h=arr['shift']()-0x0;if(h==0x0)break;var H=h;var yx=[];while(h--)yx['push'](arr['shift']()['split']('\\x20')['map'](Number));var point=0x0;var p=point;while(!![]){stoneRemove();if(p==point)break;p=point;}console['log'](point);}", "test_cases": [["1\n6 9 9 9 9\n5\n5 9 5 5 9\n5 5 6 9 9\n4 6 3 6 9\n3 3 2 9 9\n2 2 1 1 1\n10\n3 5 6 5 6\n2 2 2 8 3\n6 2 5 9 2\n7 7 7 6 1\n4 6 6 4 9\n8 9 1 1 8\n5 6 1 8 1\n6 8 2 1 2\n9 6 3 3 5\n5 3 8 8 8\n5\n1 2 3 4 5\n6 7 8 9 1\n2 3 4 5 6\n7 8 9 1 2\n3 4 5 6 7\n3\n2 2 8 7 4\n6 5 7 7 7\n8 8 9 9 9\n0", "36\n38\n99\n0\n72"]], "original": "function stoneRemove(){\n   yx.forEach(function(v,i){\n      var str=v.join(\"\").replace(/([1-9])\\1{2,}/,function(x){\n         point+=(x[0]-0)*x.length;\n         return x.replace(/./g,\"0\");\n      });\n      yx[i]=str.split(\"\").map(Number);\n   });\n   var flag=true;\n   while(flag){\n      flag=false;\n      for(var i=0;i<H-1;i++){\n         for(var j=0;j<5;j++){\n            if(yx[i][j]!=0 && yx[i+1][j]==0){\n               yx[i+1][j]=yx[i][j];\n               yx[i][j]=0;\n               flag=true;\n            }\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var h=arr.shift()-0;\n   if(h==0)break;\n   var H=h;\n   var yx=[];\n   while(h--)yx.push(arr.shift().split(\" \").map(Number));\n   var point=0;\n   var p=point;\n   while(true){\n      stoneRemove();\n      if(p==point)break;\n      p=point;\n   }\n   console.log(point);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 967, "deobfuscated": "function stoneRemove() {\n  yx.forEach(function (v, i) {\n    var str = v.join(\"\").replace(/([1-9])\\1{2,}/, function (x) {\n      point += (x[0] - 0) * x.length;\n      return x.replace(/./g, \"0\");\n    });\n    yx[i] = str.split(\"\").map(Number);\n  });\n  var flag = true;\n  while (flag) {\n    flag = false;\n    for (var i = 0; i < H - 1; i++) {\n      for (var j = 0; j < 5; j++) {\n        if (yx[i][j] != 0 && yx[i + 1][j] == 0) {\n          yx[i + 1][j] = yx[i][j];\n          yx[i][j] = 0;\n          flag = true;\n        }\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var h = arr.shift() - 0;\n  if (h == 0) {\n    break;\n  }\n  var H = h;\n  var yx = [];\n  while (h--) {\n    yx.push(arr.shift().split(\" \").map(Number));\n  }\n  var point = 0;\n  var p = point;\n  while (true) {\n    stoneRemove();\n    if (p == point) {\n      break;\n    }\n    p = point;\n  }\n  console.log(point);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5449606081124878, "ngram_match_score": 0.06489867533784059, "weighted_ngram_match_score": 0.19232470949306324, "syntax_match_score": 0.9226190476190477, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011382288644569583, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06008583690987124, "new_decrease_halstead_effort": 0.1412873426961242}}
{"filename": "p00946_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()['split']('\\x20')[0x0]-0x0;var x=[];for(var i=0x1;i<=n;i++)x['push']([i,-0x1*i]);arr['forEach'](function(v,i){x[v-0x0-0x1][0x1]=i;});x['sort'](function(a,b){return b[0x1]-a[0x1];});x=x['map'](function(v){return v[0x0];});console['log'](x['join']('\\x0a'));", "test_cases": [["5 3\n4\n2\n5", "5\n2\n4\n1\n3"], ["10 8\n1\n4\n7\n3\n4\n10\n1\n3", "3\n1\n10\n4\n7\n2\n5\n6\n8\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n = arr.shift().split(\" \")[0] - 0;\nvar x = [];\nfor (var i = 1; i <= n; i++) x.push([i,-1*i]);\narr.forEach(function(v,i) {\n   x[v-0-1][1]=i;\n});\nx.sort(function(a,b){\n   return b[1]-a[1];\n});\nx=x.map(function(v){\n   return v[0];\n});\nconsole.log(x.join(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 968, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift().split(\" \")[0] - 0;\nvar x = [];\nfor (var i = 1; i <= n; i++) {\n  x.push([i, i * -1]);\n}\narr.forEach(function (v, i) {\n  x[v - 0 - 1][1] = i;\n});\nx.sort(function (a, b) {\n  return b[1] - a[1];\n});\nx = x.map(function (v) {\n  return v[0];\n});\nconsole.log(x.join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7227328097115957, "ngram_match_score": 0.3656005686623503, "weighted_ngram_match_score": 0.6039823555772909, "syntax_match_score": 0.9213483146067416, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01109_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var a=arr['shift']()['split']('\\x20')['map'](Number);var sum=a['reduce']((a,b)=>a+b);console['log'](a['filter'](v=>v<=sum/n)['length']);}", "test_cases": [["7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "7\n3\n9\n1\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var a = arr.shift().split(\" \").map(Number);\n   var sum = a.reduce((a,b)=>a+b);\n   console.log(a.filter(v => v<=sum/n).length);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 969, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var a = arr.shift().split(\" \").map(Number);\n  var sum = a.reduce((a, b) => a + b);\n  console.log(a.filter(v => v <= sum / n).length);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6573685001311558, "ngram_match_score": 0.2362612287413427, "weighted_ngram_match_score": 0.4557127717832801, "syntax_match_score": 0.9375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008214337970228192, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04109589041095896, "new_decrease_halstead_effort": 0.22842641290057064}}
{"filename": "p01138_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var ary=[];while(n--){var hms=arr['shift']()['split']('\\x20');var start=hms[0x0]['split'](':')['map'](Number);var end=hms[0x1]['split'](':')['map'](Number);start=start[0x0]*0x3c*0x3c+start[0x1]*0x3c+start[0x2];end=end[0x0]*0x3c*0x3c+end[0x1]*0x3c+end[0x2];ary['push']([start,end]);}ary['sort'](function(a,b){return a[0x0]-b[0x0];});var train=[];var cnt=0x0;ary['forEach'](function(v){if(train['length']==0x0){cnt++;train['push'](v[0x1]);}else{train['sort'](function(a,b){return a-b;});if(train[0x0]<=v[0x0]){train['shift']();train['push'](v[0x1]);}else{cnt++;train['push'](v[0x1]);}}});console['log'](cnt);}", "test_cases": [["3\n05:47:15 09:54:40\n12:12:59 12:13:00\n16:30:20 21:18:53\n6\n00:00:00 03:00:00\n01:00:00 03:00:00\n02:00:00 03:00:00\n03:00:00 04:00:00\n03:00:00 05:00:00\n03:00:00 06:00:00\n0", "1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=[];\n   while(n--){\n      var hms=arr.shift().split(\" \");\n      var start=hms[0].split(\":\").map(Number);\n      var end=hms[1].split(\":\").map(Number);\n      start=start[0]*60*60+start[1]*60+start[2];\n      end=end[0]*60*60+end[1]*60+end[2];\n      ary.push([start,end]);\n   }\n   ary.sort(function(a,b){return a[0]-b[0];});\n   var train=[];\n   var cnt=0;\n   ary.forEach(function(v){\n      if(train.length==0){\n         cnt++;\n         train.push(v[1]);\n      }else{\n         train.sort(function(a,b){return a-b;});\n         if(train[0]<=v[0]){\n            train.shift();\n            train.push(v[1]);\n         }else{\n            cnt++;\n            train.push(v[1]);\n         }\n      }\n   });\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 970, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var ary = [];\n  while (n--) {\n    var hms = arr.shift().split(\" \");\n    var start = hms[0].split(\":\").map(Number);\n    var end = hms[1].split(\":\").map(Number);\n    start = start[0] * 60 * 60 + start[1] * 60 + start[2];\n    end = end[0] * 60 * 60 + end[1] * 60 + end[2];\n    ary.push([start, end]);\n  }\n  ary.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n  var train = [];\n  var cnt = 0;\n  ary.forEach(function (v) {\n    if (train.length == 0) {\n      cnt++;\n      train.push(v[1]);\n    } else {\n      train.sort(function (a, b) {\n        return a - b;\n      });\n      if (train[0] <= v[0]) {\n        train.shift();\n        train.push(v[1]);\n      } else {\n        cnt++;\n        train.push(v[1]);\n      }\n    }\n  });\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5628694776726126, "ngram_match_score": 0.0694331876247214, "weighted_ngram_match_score": 0.20585424687525294, "syntax_match_score": 0.9761904761904762, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013157894736842146, "new_decrease_halstead_effort": 0.09036460282997705}}
{"filename": "p01143_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var nmp=Arr['shift']()['split']('\\x20')['map'](Number);if(nmp[0x0]==0x0&&nmp[0x1]==0x0&&nmp[0x2]==0x0)break;var n=nmp[0x0];var m=nmp[0x1]-0x1;var p=nmp[0x2];var arr=[];var sum=0x0;for(var i=0x0;i<n;i++){var v=Arr['shift']()-0x0;arr['push'](v);sum+=v*0x64;}sum=sum*(0x64-p)/0x64;var ans=0x0;if(arr[m]!=0x0)ans=Math['floor'](sum/arr[m]);console['log'](ans);}", "test_cases": [["3 2 50\n1\n2\n3\n4 4 75\n1\n2\n3\n0\n3 1 10\n8\n1\n1\n0 0 0", "150\n0\n112"]], "original": "\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nmp=(Arr.shift()).split(\" \").map(Number);\n   if(nmp[0]==0 && nmp[1]==0 && nmp[2]==0)break;\n   var n=nmp[0];\n   var m=nmp[1]-1;\n   var p=nmp[2];\n   var arr=[];\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr.push(v);\n      sum+=(v*100);\n   }\n   sum=sum*(100-p)/100;\n   var ans=0;\n   if(arr[m]!=0)ans=Math.floor(sum/arr[m]);\n   console.log(ans);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 971, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nmp = Arr.shift().split(\" \").map(Number);\n  if (nmp[0] == 0 && nmp[1] == 0 && nmp[2] == 0) {\n    break;\n  }\n  var n = nmp[0];\n  var m = nmp[1] - 1;\n  var p = nmp[2];\n  var arr = [];\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    var v = Arr.shift() - 0;\n    arr.push(v);\n    sum += v * 100;\n  }\n  sum = sum * (100 - p) / 100;\n  var ans = 0;\n  if (arr[m] != 0) {\n    ans = Math.floor(sum / arr[m]);\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46387125932888085, "ngram_match_score": 0.015224008626112676, "weighted_ngram_match_score": 0.04586850532492483, "syntax_match_score": 0.794392523364486, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0040490196697913206, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01948051948051943, "new_decrease_halstead_effort": 0.09840778416629803}}
{"filename": "p01313_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var n=-0x1,i=function(d){return Math['pow'](0xa,~~d);},l,p,c,r,o,a,b,am,bm,d;process['stdin']['on']('data',function(ip){p=ip['split']('\\x0a');l=~~p[0x0];for(c=0x0;c<l;++c){r=[],o=p[c+0x1]['split']('\\x20'),d=0x0;for(a=i(o[0x0]-0x1),am=i(o[0x0])-0x1;a<am;++a)for(b=i(o[0x1]-0x1),bm=i(o[0x1])-0x1;b<bm;++b)(b*b+b-a*a+a)/0x2==''+a+b&&(console['log'](a+'\\x20'+b),++d);d||console['log']('No\\x20cats.');}});", "test_cases": [["4\n1 1\n1 3\n1 4\n2 2", "1 5\n2 7\n7 119\nNo cats.\n13 53\n18 63\n33 88\n35 91"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar n = -1, i = function(d){return Math.pow(10, ~~d)}, l, p, c, r, o, a, b, am, bm, d;\nprocess.stdin.on('data', function(ip){\n\tp = ip.split('\\n'); l = ~~p[0];\n\tfor(c = 0; c < l; ++c) {\n\t\tr = [], o = p[c+1].split(' '), d = 0;\n\t\tfor(a = i(o[0] - 1), am = i(o[0]) - 1; a < am; ++a)\n\t\tfor(b = i(o[1] - 1), bm = i(o[1]) - 1; b < bm; ++b)\n\t\t\t(b * b + b - a * a + a) / 2 == ('' + a + b) && (console.log(a + ' ' + b), ++d);\n\t\td || console.log('No cats.');\n\t}\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 972, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar n = -1;\nfunction i(d) {\n  return Math.pow(10, ~~d);\n}\nvar l;\nvar p;\nvar c;\nvar r;\nvar o;\nvar a;\nvar b;\nvar am;\nvar bm;\nvar d;\nprocess.stdin.on(\"data\", function (ip) {\n  p = ip.split(\"\\n\");\n  l = ~~p[0];\n  for (c = 0; c < l; ++c) {\n    r = [];\n    o = p[c + 1].split(\" \");\n    d = 0;\n    a = i(o[0] - 1);\n    am = i(o[0]) - 1;\n    for (; a < am; ++a) {\n      b = i(o[1] - 1);\n      bm = i(o[1]) - 1;\n      for (; b < bm; ++b) {\n        if ((b * b + b - a * a + a) / 2 == \"\" + a + b) {\n          console.log(a + \" \" + b);\n          ++d;\n        }\n      }\n    }\n    if (!d) {\n      console.log(\"No cats.\");\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5214885488295959, "ngram_match_score": 0.30237192903086524, "weighted_ngram_match_score": 0.3865673409143843, "syntax_match_score": 0.8, "dataflow_match_score": 0.5970149253731343}, "code_complexity": {"difference_score": 0.375, "length_score": -0.375, "increase_maintainability": -0.09748433761425335, "new_decrease_cyclomatic": -0.19999999999999996, "new_decrease_halstead_len": -0.05027932960893855, "new_decrease_halstead_effort": -0.03977653631284905}}
{"filename": "p01359_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var [n,q]=arr['shift']()['split']('\\x20')['map'](Number);if(n==0x0&&q==0x0)break;var g=[];for(var i=0x0;i<n;i++){var [e,ey,wy]=arr['shift']()['split']('\\x20');[ey,wy]=[ey-0x0,wy-0x0];g['push']([e,wy-ey,wy]);}for(var i=0x0;i<q;i++){var n=arr['shift']()-0x0;var ans='Unknown';for(var j=0x0;j<g['length'];j++){var a=g[j][0x1];var b=g[j][0x2];if(a<n&&n<=b){ans=[g[j][0x0],n-a]['join']('\\x20');}}console['log'](ans);}}", "test_cases": [["4 3\nmeiji 10 1877\ntaisho 6 1917\nshowa 62 1987\nheisei 22 2010\n1868\n1917\n1988\n1 1\nuniversalcentury 123 2168\n2010\n0 0", "meiji 1\ntaisho 6\nUnknown\nUnknown"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar arr = input.trim().split(\"\\n\");\nwhile(true){\n   var [n,q]=arr.shift().split(\" \").map(Number);\n   if(n==0 && q==0)break;\n   var g=[];\n   for(var i=0;i<n;i++){\n      var [e,ey,wy]=arr.shift().split(\" \");\n      [ey,wy]=[ey-0,wy-0];\n      g.push([e,wy-ey,wy]);\n   }\n   for(var i=0;i<q;i++){\n      var n = arr.shift() - 0;\n      var ans=\"Unknown\";\n      for(var j=0;j<g.length;j++){\n         var a = g[j][1];\n         var b = g[j][2];\n         if(a<n && n<=b){\n            ans=[g[j][0],n-a].join(\" \");\n         }\n      }\n      console.log(ans);\n   }\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 973, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var [n, q] = arr.shift().split(\" \").map(Number);\n  if (n == 0 && q == 0) {\n    break;\n  }\n  var g = [];\n  for (var i = 0; i < n; i++) {\n    var [e, ey, wy] = arr.shift().split(\" \");\n    [ey, wy] = [ey - 0, wy - 0];\n    g.push([e, wy - ey, wy]);\n  }\n  for (var i = 0; i < q; i++) {\n    var n = arr.shift() - 0;\n    var ans = \"Unknown\";\n    for (var j = 0; j < g.length; j++) {\n      var a = g[j][1];\n      var b = g[j][2];\n      if (a < n && n <= b) {\n        ans = [g[j][0], n - a].join(\" \");\n      }\n    }\n    console.log(ans);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.635994506986338, "ngram_match_score": 0.17127483158572668, "weighted_ngram_match_score": 0.40444922810565687, "syntax_match_score": 0.9682539682539683, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004414258423510065, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017142857142857126, "new_decrease_halstead_effort": 0.10416666666666663}}
{"filename": "p01447_1", "type": "JavaScript", "obfuscated": "console['log'](Math['ceil'](Math['log'](+require('fs')['readFileSync']('/dev/stdin','utf-8'))/Math['log'](0x3)));", "test_cases": [["8", "2"], ["30", "4"], ["2000000000", "20"]], "original": "console.log(Math.ceil(Math.log(+require(\"fs\").readFileSync(\"/dev/stdin\",\"utf-8\"))/Math.log(3)))", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 974, "deobfuscated": "console.log(Math.ceil(Math.log(+require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\")) / Math.log(3)));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5, "ngram_match_score": 0, "weighted_ngram_match_score": 0, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01687_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var s=input['trim']();for(var i=0x0;i<s['length']-0x7;i++){var arr=[s[i],s[i+0x1],s[i+0x2],s[i+0x3],s[i+0x4],s[i+0x5],s[i+0x6],s[i+0x7]];if(arr['join']('')=='AIZUNYAN'){i+=0x7;continue;}var str=arr['sort']()['join']('');if(str=='AADINNUY'){s=s['slice'](0x0,i)+'AIZUNYAN'+s['slice'](i+0x8,s['length']);i+=0x7;}}console['log'](s);", "test_cases": [["AIDUNYAN", "AIZUNYAN"], ["ZDD", "ZDD"], ["AADINNUYHAMAJIDETENSHIDAKARANYANAIDUPEROPEROSHITAI", "AIZUNYANHAMAJIDETENSHIDAKARAAIZUNYANPEROPEROSHITAI"], ["NYANAIDUAIDU", "AIZUNYANAIDU"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim();\nfor(var i=0;i<s.length-7;i++){\n   var arr=[s[i],s[i+1],s[i+2],s[i+3],s[i+4],s[i+5],s[i+6],s[i+7]]; \n   if(arr.join(\"\")==\"AIZUNYAN\"){\n      i+=7;\n      continue;\n   }  \n   var str=arr.sort().join(\"\");\n   if(str==\"AADINNUY\"){\n      s=s.slice(0,i)+\"AIZUNYAN\"+s.slice(i+8,s.length);\n      i+=7;\n   }\n}\nconsole.log(s);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 975, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar s = input.trim();\nfor (var i = 0; i < s.length - 7; i++) {\n  var arr = [s[i], s[i + 1], s[i + 2], s[i + 3], s[i + 4], s[i + 5], s[i + 6], s[i + 7]];\n  if (arr.join(\"\") == \"AIZUNYAN\") {\n    i += 7;\n    continue;\n  }\n  var str = arr.sort().join(\"\");\n  if (str == \"AADINNUY\") {\n    s = s.slice(0, i) + \"AIZUNYAN\" + s.slice(i + 8, s.length);\n    i += 7;\n  }\n}\nconsole.log(s);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5334927502455298, "ngram_match_score": 0.026206698371832374, "weighted_ngram_match_score": 0.10776430261028674, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01924_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var tdl=arr[0x0];if(tdl=='0\\x200\\x200')break;var [t,d,l]=tdl['split']('\\x20')['map'](Number);var cnt=0x0;var time=0x0;for(var i=0x0;i<t;i++){if(time!=0x0)cnt++;if(time>0x0)time--;var x=arr[i+0x1]-0x0;if(x>=l)time=d;}console['log'](cnt);arr=arr['slice'](t+0x1);}", "test_cases": [["5 2 3\n3\n5\n1\n2\n3\n3 100 100\n3\n3\n4\n20 3 8\n3\n2\n6\n1\n9\n1\n8\n4\n2\n2\n8\n1\n8\n8\n2\n5\n3\n4\n3\n8\n7 2 2\n0\n2\n5\n2\n5\n2\n1\n0 0 0", "3\n0\n11\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var tdl = arr[0];\n   if (tdl == \"0 0 0\") break;\n   var [t,d,l]=tdl.split(\" \").map(Number);\n   var cnt=0;\n   var time=0;\n   for(var i=0;i<t;i++){\n      if(time!=0)cnt++;\n      if(time>0)time--;\n      var x=arr[i+1]-0;\n      if(x>=l)time=d;\n   }\n   console.log(cnt);\n   arr=arr.slice(t+1);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 976, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var tdl = arr[0];\n  if (tdl == \"0 0 0\") {\n    break;\n  }\n  var [t, d, l] = tdl.split(\" \").map(Number);\n  var cnt = 0;\n  var time = 0;\n  for (var i = 0; i < t; i++) {\n    if (time != 0) {\n      cnt++;\n    }\n    if (time > 0) {\n      time--;\n    }\n    var x = arr[i + 1] - 0;\n    if (x >= l) {\n      time = d;\n    }\n  }\n  console.log(cnt);\n  arr = arr.slice(t + 1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6524522599491807, "ngram_match_score": 0.21699334135103737, "weighted_ngram_match_score": 0.5025717960066609, "syntax_match_score": 0.8902439024390244, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005700327870181265, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.027272727272727226, "new_decrease_halstead_effort": 0.13949498368392566}}
{"filename": "p02247_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var a=arr[0x0];var b=arr[0x1];var len=b['length']-0x1;var reg=new RegExp(b,'g');var ans=[];while(reg['test'](a)){reg['lastIndex']-=len;ans['push'](reg['lastIndex']-0x1);}if(ans['length']!=0x0)console['log'](ans['join']('\\x0a'));", "test_cases": [["aabaaa\naa", "0\n3\n4"], ["xyzz\nyz", "1"], ["abc\nxyz", ""]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar a=arr[0];\nvar b=arr[1];\nvar len=b.length-1;\nvar reg = new RegExp(b,\"g\");\nvar ans=[];\nwhile (reg.test(a)) {\n   reg.lastIndex -= len;\n   ans.push(reg.lastIndex-1);\n}\nif(ans.length!=0)console.log(ans.join(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 977, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar a = arr[0];\nvar b = arr[1];\nvar len = b.length - 1;\nvar reg = new RegExp(b, \"g\");\nvar ans = [];\nwhile (reg.test(a)) {\n  reg.lastIndex -= len;\n  ans.push(reg.lastIndex - 1);\n}\nif (ans.length != 0) {\n  console.log(ans.join(\"\\n\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6191778441944281, "ngram_match_score": 0.176137412901024, "weighted_ngram_match_score": 0.3313431946459192, "syntax_match_score": 0.9692307692307692, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02381_1", "type": "JavaScript", "obfuscated": "'use strict';(function(stdin){var lines=stdin['toString']();var re=/\\w+\\n[\\w\\s]*?\\n/g;var result=function(data){return data['map'](stdev)['join']('\\x0a');function stdev(scores){var count=scores['length'];var mean=scores['reduce'](sum)/count;return Math['sqrt'](scores['map'](function(v){return Math['pow'](v-mean,0x2);})['reduce'](sum)/count)['toFixed'](0x8);}function sum(a,b){return a+b;}}(lines['match'](re)['map'](function(v){return v['split']('\\x0a')[0x1]['split']('\\x20')['slice'](0x0,v['split']('\\x0a')[0x0])['map'](Number);}));console['log'](result);}(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["5\n70 80 100 90 20\n3\n80 80 80\n0", "27.85677655\n0.00000000"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString();\n  var re = /\\w+\\n[\\w\\s]*?\\n/g;\n  var result = (function(data) {\n\n    return data.map(stdev).join('\\n');\n\n    function stdev(scores) {\n      var count = scores.length;\n      var mean  = scores.reduce(sum) / count;\n\n      return Math.sqrt(scores.map(function(v) {\n          return Math.pow(v - mean,2);\n        })\n        .reduce(sum) / count).toFixed(8);\n    }\n\n    function sum(a,b) {\n      return a + b;\n    }\n  }(lines.match(re).map(function(v) {\n      return v.split('\\n')[1].split(' ')\n        .slice(0,v.split('\\n')[0]).map(Number);\n   })\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 978, "deobfuscated": "'use strict';\n\n(function (stdin) {\n  var lines = stdin.toString();\n  var re = /\\w+\\n[\\w\\s]*?\\n/g;\n  var result = function (data) {\n    return data.map(stdev).join(\"\\n\");\n    function stdev(scores) {\n      var count = scores.length;\n      var mean = scores.reduce(sum) / count;\n      return Math.sqrt(scores.map(function (v) {\n        return Math.pow(v - mean, 2);\n      }).reduce(sum) / count).toFixed(8);\n    }\n    function sum(a, b) {\n      return a + b;\n    }\n  }(lines.match(re).map(function (v) {\n    return v.split(\"\\n\")[1].split(\" \").slice(0, v.split(\"\\n\")[0]).map(Number);\n  }));\n  console.log(result);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.671417500994318, "ngram_match_score": 0.5194666396988157, "weighted_ngram_match_score": 0.5725892338436734, "syntax_match_score": 0.9217391304347826, "dataflow_match_score": 0.671875}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02431_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var Q=arr[0x0]-0x0;var a=[];var s='';for(var i=0x1;i<=Q;i++){var q=arr[i]['split']('\\x20');if(q[0x0]=='0')a['push'](q[0x1]-0x0);else if(q[0x0]=='1')s+=a[q[0x1]]-0x0+'\\x0a';else a['pop']();}console['log'](s['trim']());", "test_cases": [["8\n0 1\n0 2\n0 3\n2\n0 4\n1 0\n1 1\n1 2", "1\n2\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar Q=arr[0]-0;\nvar a=[];\nvar s=\"\";\nfor(var i=1;i<=Q;i++){\n   var q=arr[i].split(\" \");\n   if(q[0]==\"0\")a.push(q[1]-0);\n   else if(q[0]==\"1\")s+=(a[q[1]]-0)+\"\\n\";\n   else a.pop();\n}\nconsole.log(s.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 979, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar Q = arr[0] - 0;\nvar a = [];\nvar s = \"\";\nfor (var i = 1; i <= Q; i++) {\n  var q = arr[i].split(\" \");\n  if (q[0] == \"0\") {\n    a.push(q[1] - 0);\n  } else if (q[0] == \"1\") {\n    s += a[q[1]] - 0 + \"\\n\";\n  } else {\n    a.pop();\n  }\n}\nconsole.log(s.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5483737611734167, "ngram_match_score": 0.08769588326479025, "weighted_ngram_match_score": 0.24160163056467904, "syntax_match_score": 0.8641975308641975, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02470_1", "type": "JavaScript", "obfuscated": "function Main(input){var n=parseInt(input,0xa);var count=0x0;for(i=0x1;i<n;i++){if(gcd(n,i)==0x1)count++;}console['log'](count);}function gcd(n,m){var a,b,c;a=Math['max'](n,m);b=Math['min'](n,m);c=a%b;if(c==0x0){return b;}else{return gcd(b,c);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6", "2"], ["1000000", "400000"]], "original": "function Main(input) {\n    var n = parseInt(input, 10);\n    var count = 0;\n    for (i = 1; i < n; i++) {\n        if (gcd(n, i) == 1) count++;\n    }\n    console.log(count);\n}\n\nfunction gcd(n, m) {\n    var a, b, c;\n    a = Math.max(n, m);\n    b = Math.min(n, m);\n    c = a % b; \n    if (c == 0) {\n        return b;\n    } else {\n        return gcd(b, c);\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 980, "deobfuscated": "function Main(input) {\n  var n = parseInt(input, 10);\n  var count = 0;\n  for (i = 1; i < n; i++) {\n    if (gcd(n, i) == 1) {\n      count++;\n    }\n  }\n  console.log(count);\n}\nfunction gcd(n, m) {\n  var a;\n  var b;\n  var c;\n  a = Math.max(n, m);\n  b = Math.min(n, m);\n  c = a % b;\n  if (c == 0) {\n    return b;\n  } else {\n    return gcd(b, c);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9128944183616932, "ngram_match_score": 0.8636676185805942, "weighted_ngram_match_score": 0.9183448374748742, "syntax_match_score": 0.8695652173913043, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009114008175375998, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.022727272727272707, "new_decrease_halstead_effort": -0.022727272727272707}}
{"filename": "p02551_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x0]['split']('\\x20');var N=parseInt(tmp[0x0]);var Q=parseInt(tmp[0x1]);var minRows=Array(N-0x2);var minCols=Array(N-0x2);minRows['fill'](N-0x2);minCols['fill'](N-0x2);var result=BigInt((N-0x2)*(N-0x2));for(var i=0x0;i<Q;i++){var query=input[i+0x1]['split']('\\x20');var q_1=parseInt(query[0x0]);var q_2=parseInt(query[0x1]);var myArray=minRows;var myArray2=minCols;var index=q_2-0x2;var closest=minCols[index];if(q_1==0x1){myArray=minCols;myArray2=minRows;closest=minRows[index];}result-=BigInt(closest);for(var j=0x0;j<closest;j++){if(myArray[j]>index)myArray[j]=index;}myArray2[index]=0x0;}console['log']('%d',Number(result));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 5\n1 3\n2 3\n1 4\n2 2\n1 2", "1"], ["200000 0", "39999200004"], ["176527 15\n1 81279\n2 22308\n2 133061\n1 80744\n2 44603\n1 170938\n2 139754\n2 15220\n1 172794\n1 159290\n2 156968\n1 56426\n2 77429\n1 97459\n2 71282", "31159505795"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var N = parseInt(tmp[0]);\n  var Q = parseInt(tmp[1]);\n  var minRows = Array(N-2);\n  var minCols = Array(N-2);\n  minRows.fill(N-2);\n  minCols.fill(N-2);\n  var result = BigInt((N-2)*(N-2));\n  for(var i=0; i<Q; i++) {\n    var query = input[i+1].split(\" \");\n    var q_1 = parseInt(query[0]);\n    var q_2 = parseInt(query[1]);\n    var myArray = minRows;\n    var myArray2 = minCols;\n    \n    var index = q_2-2;\n    var closest = minCols[index];\n    if(q_1 == 1) {\n      myArray = minCols;\n      myArray2 = minRows;\n      closest = minRows[index];\n    }\n    result -= BigInt(closest);\n    for(var j=0; j<closest; j++) {\n      if(myArray[j] > index) myArray[j] = index;\n    }\n    myArray2[index] = 0;\n  }\n  //出力\n  console.log(\"%d\", Number(result));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 981, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var N = parseInt(tmp[0]);\n  var Q = parseInt(tmp[1]);\n  var minRows = Array(N - 2);\n  var minCols = Array(N - 2);\n  minRows.fill(N - 2);\n  minCols.fill(N - 2);\n  var result = BigInt((N - 2) * (N - 2));\n  for (var i = 0; i < Q; i++) {\n    var query = input[i + 1].split(\" \");\n    var q_1 = parseInt(query[0]);\n    var q_2 = parseInt(query[1]);\n    var myArray = minRows;\n    var myArray2 = minCols;\n    var index = q_2 - 2;\n    var closest = minCols[index];\n    if (q_1 == 1) {\n      myArray = minCols;\n      myArray2 = minRows;\n      closest = minRows[index];\n    }\n    result -= BigInt(closest);\n    for (var j = 0; j < closest; j++) {\n      if (myArray[j] > index) {\n        myArray[j] = index;\n      }\n    }\n    myArray2[index] = 0;\n  }\n  console.log(\"%d\", Number(result));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.769148471845774, "ngram_match_score": 0.505631459415584, "weighted_ngram_match_score": 0.6277000166199941, "syntax_match_score": 0.9432624113475178, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02618_1", "type": "JavaScript", "obfuscated": "'use strict';function main(input){const inputRows=input['split']('\\x0a');const d=parseInt(inputRows[0x0]);let cStrArray=inputRows[0x1]['split']('\\x20');const c=cStrArray['map'](str=>parseInt(str));let s=[];for(let i=0x2;i<inputRows['length'];i++){s['push']([]);const tmpRow=inputRows[i]['split']('\\x20');for(let j=0x0;j<tmpRow['length'];j++){s[i-0x2]['push'](parseInt(tmpRow[j]));}}let t=[];for(let i=0x0;i<s['length'];i++){let tmpMax=s[i][0x0];let index=0x0;for(let j=0x1;j<s[i]['length'];j++){if(s[i][j]>tmpMax){index=j;tmpMax=s[i][j];}}t['push'](index+0x1);}for(let i=0x0;i<t['length'];i++){console['log'](t[i]);}}main(require('fs')['readFileSync']('/dev/stdin','utf8'));main(input);", "test_cases": [["5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192", "1\n17\n13\n14\n13"]], "original": "'use strict'\n\nfunction main(input) {\n  const inputRows = input.split('\\n');\n  const d = parseInt(inputRows[0])\n  let cStrArray = inputRows[1].split(' ')\n  const c = cStrArray.map(str => parseInt(str))\n  let s = []\n  for (let i = 2; i < inputRows.length; i++) {\n    s.push([])\n    const tmpRow = inputRows[i].split(' ')\n    for (let j = 0; j < tmpRow.length; j++) {\n      s[i - 2].push(parseInt(tmpRow[j]))\n    }\n  }\n\n  let t = []\n\n  for (let i = 0; i < s.length; i++) {\n    let tmpMax = s[i][0]\n    let index = 0\n    for (let j = 1; j < s[i].length; j++) {\n      if (s[i][j] > tmpMax) {\n        index = j\n        tmpMax = s[i][j]\n      }\n    }\n    t.push(index + 1)\n  }\n\n\n  // output\n  for (let i = 0; i < t.length; i++) {\n    console.log(t[i])\n  }\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nmain(input)", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 982, "deobfuscated": "'use strict';\n\nfunction main(input) {\n  const inputRows = input.split(\"\\n\");\n  const d = parseInt(inputRows[0]);\n  let cStrArray = inputRows[1].split(\" \");\n  const c = cStrArray.map(str => parseInt(str));\n  let s = [];\n  for (let i = 2; i < inputRows.length; i++) {\n    s.push([]);\n    const tmpRow = inputRows[i].split(\" \");\n    for (let j = 0; j < tmpRow.length; j++) {\n      s[i - 2].push(parseInt(tmpRow[j]));\n    }\n  }\n  let t = [];\n  for (let i = 0; i < s.length; i++) {\n    let tmpMax = s[i][0];\n    let index = 0;\n    for (let j = 1; j < s[i].length; j++) {\n      if (s[i][j] > tmpMax) {\n        index = j;\n        tmpMax = s[i][j];\n      }\n    }\n    t.push(index + 1);\n  }\n  for (let i = 0; i < t.length; i++) {\n    console.log(t[i]);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nmain(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8143583780526495, "ngram_match_score": 0.6236141813619994, "weighted_ngram_match_score": 0.6338193308485986, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02652_1", "type": "JavaScript", "obfuscated": "function Main(str){let zero=0x0;let one=0x0;for(let i=0x0;i<str['length'];i++){if(str[i]==='1'){one++;}else if(str[i]==='0'){zero++;}}console['log'](Math['abs'](one-zero));}let input=require('fs')['readFileSync']('/dev/stdin','utf8');Main(input);", "test_cases": [["0??", "1"], ["0??0", "2"], ["??00????0??0????0?0??00??1???11?1?1???1?11?111???1", "4"]], "original": "function Main(str) {\n  \tlet zero = 0;\n  \tlet one = 0;\n  \tfor(let i=0;i<str.length;i++) {\n    \tif(str[i] === '1') {\n        \tone++;\n        } else if(str[i] === '0') {\n        \tzero++;\n        }\n    }\n  \n  \tconsole.log(Math.abs(one - zero));\n}\n\nlet input = require('fs').readFileSync('/dev/stdin', 'utf8');\nMain(input);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 983, "deobfuscated": "function Main(str) {\n  let zero = 0;\n  let one = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === \"1\") {\n      one++;\n    } else if (str[i] === \"0\") {\n      zero++;\n    }\n  }\n  console.log(Math.abs(one - zero));\n}\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nMain(input);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7751244160194799, "ngram_match_score": 0.48384001391498116, "weighted_ngram_match_score": 0.6166576501629386, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02856_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});let M=parseInt(input[0x0][0x0],0xa);let ans=-0x1;let tmp=0x0;for(let i=0x0;i<M;i++){ans+=parseInt(input[i+0x1][0x1],0xa);tmp+=parseInt(input[i+0x1][0x0],0xa)*parseInt(input[i+0x1][0x1],0xa);}ans+=Math['floor']((tmp-0x1)/0x9);console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n2 2\n9 1", "3"], ["3\n1 1\n0 8\n7 1", "9"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tlet M = parseInt(input[0][0], 10);\n\tlet ans = -1;\n\tlet tmp = 0;\n\tfor (let i = 0; i < M; i++){\n\t\tans += parseInt(input[i + 1][1],10);\n\t\ttmp += parseInt(input[i + 1][0],10) * parseInt(input[i + 1][1],10);\n\t}\n\tans += Math.floor((tmp - 1) / 9);\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 984, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  let M = parseInt(input[0][0], 10);\n  let ans = -1;\n  let tmp = 0;\n  for (let i = 0; i < M; i++) {\n    ans += parseInt(input[i + 1][1], 10);\n    tmp += parseInt(input[i + 1][0], 10) * parseInt(input[i + 1][1], 10);\n  }\n  ans += Math.floor((tmp - 1) / 9);\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.844845202605716, "ngram_match_score": 0.6520483120257727, "weighted_ngram_match_score": 0.7273324983970916, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02897_1", "type": "JavaScript", "obfuscated": "function main(input){var Gusu=0x0;var Kisu=0x0;var Out=0x0;if(input>0x0){if(input%0x2==0x0){Gusu=input/0x2;Kisu=Gusu;Out=Kisu/ input;}else if(input%0x2==0x1){Gusu=parseInt(input/0x2);Kisu=Gusu+0x1;Out=Kisu/ input;}}console['log'](Out['toFixed'](0xa));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4", "0.5000000000"], ["5", "0.6000000000"], ["1", "1.0000000000"]], "original": "function main(input){\n  var Gusu = 0;//偶数の個数\n  var Kisu = 0;//奇数の個数\n  var Out = 0;//出力\n  if(input > 0){\n  \tif(input % 2 == 0){\n      Gusu = input / 2;\n      Kisu = Gusu;\n      Out = Kisu/input;\n  \t}\n    else if(input % 2 == 1){\n      Gusu = parseInt(input / 2);\n      Kisu = Gusu+1;\n      Out = Kisu/input;\n  \t}\n  }\n  console.log(Out.toFixed(10));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 985, "deobfuscated": "function main(input) {\n  var Gusu = 0;\n  var Kisu = 0;\n  var Out = 0;\n  if (input > 0) {\n    if (input % 2 == 0) {\n      Gusu = input / 2;\n      Kisu = Gusu;\n      Out = Kisu / input;\n    } else if (input % 2 == 1) {\n      Gusu = parseInt(input / 2);\n      Kisu = Gusu + 1;\n      Out = Kisu / input;\n    }\n  }\n  console.log(Out.toFixed(10));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7114434762514026, "ngram_match_score": 0.37467578965482606, "weighted_ngram_match_score": 0.4710981153507845, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03001_1", "type": "JavaScript", "obfuscated": "function Main(input){var input=input['split']('\\x0a');var arya=input[0x0]['split']('\\x20')['map'](val=>parseInt(val,0xa))['slice'](0x0,0x4);var w=arya[0x0];var h=arya[0x1];var x=arya[0x2];var y=arya[0x3];if(x==0x0&y==0x0||x==w&&y==h){console['log']((w*h/0x2)['toFixed'](0x6)+'\\x200');return!![];}var a1=x*h;var a2=(w-x)*h;var b1=y*w;var b2=(h-y)*w;var a=a1;var b=b1;var counter=0x0;if(a1>a2){a=a2;}if(b1>b2){b=b2;}var reault=a;if(a<b){reault=b;}if(a==b){var counter=0x1;}console['log'](reault['toFixed'](0x6)+'\\x20'+counter);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 1 2", "3.000000 0"], ["2 2 1 1", "2.000000 1"]], "original": "function Main(input) {\n\n  var input = input.split(\"\\n\");\n  var arya = input[0].split(\" \").map(val => parseInt(val, 10)).slice(0, 4);\n  var w = arya[0];\n  var h = arya[1];\n  var x = arya[2];\n  var y = arya[3];\n\n  if(x == 0 & y == 0 || x == w && y == h){\n    console.log((w*h/2).toFixed(6) + \" 0\");\n    return true;\n  }\n\n\n\n  var a1 = x*h;\n  var a2 = (w - x)*h;\n  var b1 = y*w;\n  var b2 = (h - y)*w;\n  var a = a1;\n  var b = b1;\n  var counter = 0;\n\n  if(a1 > a2){\n    a = a2;\n  }\n\n  if(b1 > b2){\n    b = b2;\n  }\n\n  var reault = a;\n  if(a < b) {\n    reault = b;\n  }\n\n  if(a == b) {\n    var counter = 1;\n  }\n\n\n  console.log(reault.toFixed(6) + \" \" + counter);\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 986, "deobfuscated": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var arya = input[0].split(\" \").map(val => parseInt(val, 10)).slice(0, 4);\n  var w = arya[0];\n  var h = arya[1];\n  var x = arya[2];\n  var y = arya[3];\n  if (x == 0 & y == 0 || x == w && y == h) {\n    console.log((w * h / 2).toFixed(6) + \" 0\");\n    return true;\n  }\n  var a1 = x * h;\n  var a2 = (w - x) * h;\n  var b1 = y * w;\n  var b2 = (h - y) * w;\n  var a = a1;\n  var b = b1;\n  var counter = 0;\n  if (a1 > a2) {\n    a = a2;\n  }\n  if (b1 > b2) {\n    b = b2;\n  }\n  var reault = a;\n  if (a < b) {\n    reault = b;\n  }\n  if (a == b) {\n    var counter = 1;\n  }\n  console.log(reault.toFixed(6) + \" \" + counter);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8579878221724252, "ngram_match_score": 0.6609442916637126, "weighted_ngram_match_score": 0.7710069970259882, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006024500577232361, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01621621621621616, "new_decrease_halstead_effort": 0.12790867516815674}}
{"filename": "p03174_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){input=input['trim']()['split'](/\\n/);const N=input['shift']()-0x0;const M=Math['pow'](0x2,N);const K=Math['pow'](0xa,0x9)+0x7;input=input['map'](str=>str['split'](/\\s+/)['map'](x=>x==='1'));const Match=input;const dp=new Array(N)['fill'](0x0)['map']((x,j)=>new Object());dp[-0x1]={0x0:0x1};const p=new Array(N)['fill'](0x0)['map']((x,i)=>0x1<<i);for(let i=-0x1;i<N-0x1;i++){Object['keys'](dp[i])['forEach'](function(J){J=J-0x0;dp[i][J]%=K;for(let j=0x0;j<N;j++){if((J&p[j])>0x0)continue;if(Match[i+0x1][j])dp[i+0x1][J+p[j]]=(dp[i+0x1][J+p[j]]||0x0)+dp[i][J];}});}console['log']((dp[N-0x1][M-0x1]||0x0)%K);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\n0 1 1\n1 0 1\n1 1 1", "3"], ["4\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0", "1"], ["1\n0", "0"], ["21\n0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1\n1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0\n0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1\n0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0\n1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0\n0 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1\n0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0\n0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1\n0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1\n0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1\n0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 0\n0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1\n0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 1\n1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1\n0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1\n1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 0\n0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1\n0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1\n0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1 1 0\n1 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0\n1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0", "102515160"]], "original": "'use strict';\nfunction Main(input){\n  input=input.trim().split(/\\n/);\n  const N=input.shift()-0;\n  const M=Math.pow(2,N);\n  const K=Math.pow(10,9)+7;\n  input=input.map(str=>str.split(/\\s+/).map(x=>x==='1'));\n  const Match=input;\n  \n  const dp=new Array(N).fill(0).map((x,j)=>new Object);\n  dp[-1]={0:1,};\n  \n  const p=new Array(N).fill(0).map((x,i)=>(1<<i));\n  \n  /*\n    男N-1から降順に売れてゆく場合を考える。\n    dp[i][j]で男0~iと「女i+1人の組み合わせのうちj番目」が残っているとき、\n    残りのマッチングの場合の数。\n  */\n  \n  for(let i=-1;i<N-1;i++){\n    Object.keys(dp[i]).forEach(function(J){\n      J=J-0;\n      dp[i][J]%=K;\n      for(let j=0;j<N;j++){\n        if((J&p[j])>0)continue;\n        if(Match[i+1][j])\n          dp[i+1][J+p[j]]=(dp[i+1][J+p[j]]||0)+dp[i][J];\n      }\n    });\n  }\n  console.log((dp[N-1][M-1]||0)%K);\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 987, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  input = input.trim().split(/\\n/);\n  const N = input.shift() - 0;\n  const M = Math.pow(2, N);\n  const K = Math.pow(10, 9) + 7;\n  input = input.map(str => str.split(/\\s+/).map(x => x === \"1\"));\n  const Match = input;\n  const dp = new Array(N).fill(0).map((x, j) => new Object());\n  dp[-1] = {\n    0: 1\n  };\n  const p = new Array(N).fill(0).map((x, i) => 1 << i);\n  for (let i = -1; i < N - 1; i++) {\n    Object.keys(dp[i]).forEach(function (J) {\n      J = J - 0;\n      dp[i][J] %= K;\n      for (let j = 0; j < N; j++) {\n        if ((J & p[j]) > 0) {\n          continue;\n        }\n        if (Match[i + 1][j]) {\n          dp[i + 1][J + p[j]] = (dp[i + 1][J + p[j]] || 0) + dp[i][J];\n        }\n      }\n    });\n  }\n  console.log((dp[N - 1][M - 1] || 0) % K);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4772274468171951, "ngram_match_score": 0.01278191018581613, "weighted_ngram_match_score": 0.05088978184486896, "syntax_match_score": 0.8452380952380952, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03336_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const row1=input[0x0]['split']('\\x20');const N=parseInt(row1[0x0]);const M=parseInt(row1[0x1]);const K=parseInt(row1[0x2]);var S=parseInt(input[0x1],0x2);var T=parseInt(input[0x2],0x2);for(var i=0x0;i<K;i++){var sANDt=S&T;S=S+sANDt;T=T+sANDt;}const sBinary=toBinary(S);const tBinary=toBinary(T);console['log'](sBinary);console['log'](tBinary);}function toBinary(a){var num=a,binary='';while(num>0x0){binary=num%0x2+binary;num=Math['floor'](num/0x2);}return binary;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3 3\n11\n101", "10000\n10010"], ["5 8 3\n10101\n10101001", "100000\n10110100"], ["10 10 10\n1100110011\n1011001101", "10000100000010001000\n10000100000000100010"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\");\n  \tconst row1 = input[0].split(\" \");\n  \tconst N = parseInt(row1[0]);\n  const M = parseInt(row1[1]);\n  const K = parseInt(row1[2]);\n  var S = parseInt(input[1],2);\n  var T = parseInt(input[2],2);\n  for(var i=0; i < K; i++){\n    var sANDt = S & T;\n    S = S + sANDt;\n    T = T + sANDt;\n  }\n  const sBinary = toBinary(S);\n  const tBinary = toBinary(T);\n  console.log(sBinary);\n  console.log(tBinary);\n  \n }\n\nfunction toBinary( a ){ \n  var num = a, binary = ''; \n  while ( num > 0 ) { \n    binary = ( num % 2 ) + binary; \n    num = Math.floor( num / 2 ); \n  } \n  return binary; \n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 988, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const row1 = input[0].split(\" \");\n  const N = parseInt(row1[0]);\n  const M = parseInt(row1[1]);\n  const K = parseInt(row1[2]);\n  var S = parseInt(input[1], 2);\n  var T = parseInt(input[2], 2);\n  for (var i = 0; i < K; i++) {\n    var sANDt = S & T;\n    S = S + sANDt;\n    T = T + sANDt;\n  }\n  const sBinary = toBinary(S);\n  const tBinary = toBinary(T);\n  console.log(sBinary);\n  console.log(tBinary);\n}\nfunction toBinary(a) {\n  var num = a;\n  var binary = \"\";\n  while (num > 0) {\n    binary = num % 2 + binary;\n    num = Math.floor(num / 2);\n  }\n  return binary;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7903878346506698, "ngram_match_score": 0.6155683084118132, "weighted_ngram_match_score": 0.6293163635241991, "syntax_match_score": 0.9166666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00016777132310907827, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.006578947368421018, "new_decrease_halstead_effort": -0.00657894736842124}}
{"filename": "p03481_1", "type": "JavaScript", "obfuscated": "'use strict';const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x20')['map'](x=>x*0x1);let ans=0x0;let max=input[0x1];let div=input[0x0];let tmpNum=div;while(tmpNum<max+0x1){tmpNum*=0x2;ans++;}console['log'](ans);", "test_cases": [["3 20", "3"], ["25 100", "3"], ["314159265 358979323846264338", "31"]], "original": "'use strict';\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(' ').map(x => x*1);\nlet ans = 0;\nlet max = input[1];\nlet div = input[0];\nlet tmpNum = div;\nwhile(tmpNum < max+1){\n  tmpNum *= 2;\n  ans++;\t\n}\n\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 989, "deobfuscated": "'use strict';\n\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\" \").map(x => x * 1);\nlet ans = 0;\nlet max = input[1];\nlet div = input[0];\nlet tmpNum = div;\nwhile (tmpNum < max + 1) {\n  tmpNum *= 2;\n  ans++;\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8155998090483956, "ngram_match_score": 0.5735908924610605, "weighted_ngram_match_score": 0.6888083437325219, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03551_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var n=next();var m=next();var ans=m*0x708+n*0x64;return ans<<m;}", "test_cases": [["1 1", "3800"], ["10 2", "18400"], ["100 5", "608000"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var m = next();\n  var ans = m*1800 + n*100;\n  return ans << m;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 990, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var n = next();\n  var m = next();\n  var ans = m * 1800 + n * 100;\n  return ans << m;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.578211712207718, "ngram_match_score": 0.09148385095505546, "weighted_ngram_match_score": 0.33179244572857763, "syntax_match_score": 0.8895705521472392, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.08108108108108114, "length_score": -0.08108108108108114, "increase_maintainability": -0.01672544058371972, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.028037383177569986, "new_decrease_halstead_effort": 0.024232721718820738}}
{"filename": "p03618_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var a=nextstr();var ans=0x1;var c=xArray(0x0,0x1a);for(var i=0x0;i<a['length'];i++){var t=a[i]['charCodeAt']()-0x61;ans+=i-c[t];c[t]++;}return ans;}", "test_cases": [["aatt", "5"], ["xxxxxxxxxx", "1"], ["abracadabra", "44"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var a = nextstr();\n  var ans = 1;\n  var c = xArray(0,26);\n  for(var i = 0; i < a.length; i++){\n    var t = a[i].charCodeAt()-97;\n    ans += i-c[t];\n    c[t]++;\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 991, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var a = nextstr();\n  var ans = 1;\n  var c = xArray(0, 26);\n  for (var i = 0; i < a.length; i++) {\n    var t = a[i].charCodeAt() - 97;\n    ans += i - c[t];\n    c[t]++;\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5931429270785202, "ngram_match_score": 0.1139708404201401, "weighted_ngram_match_score": 0.3580483817060953, "syntax_match_score": 0.9005524861878453, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0714285714285714, "length_score": -0.0714285714285714, "increase_maintainability": -0.014273805125491923, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.024793388429751984, "new_decrease_halstead_effort": 0.029630153080536847}}
{"filename": "p03786_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],A]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));A['sort']((a,b)=>a-b);let sum=A[0x0],n=0x0;for(let i=0x1;i<N;i++){if(sum*0x2>=A[i])n++;else n=0x0;if(sum+A[i]>=0x3b9aca00)return''+(n+N-i);sum=sum+A[i];}return''+(n+0x1);})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n3 1 4", "2"], ["5\n1 1 1 1 1", "5"], ["6\n40 1 30 2 7 20", "4"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  A.sort((a,b)=>a-b);\n  let sum = A[0], n = 0;\n  for ( let i = 1; i < N; i++ ) {\n    if ( sum * 2 >= A[i] ) n++;\n    else n = 0;\n    if ( sum + A[i] >= 1e9 ) return `${n+N-i}`;\n    sum = sum + A[i];\n  }\n  return `${n+1}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 992, "deobfuscated": "console.log((args => {\n  const [[N], A] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  A.sort((a, b) => a - b);\n  let sum = A[0];\n  let n = 0;\n  for (let i = 1; i < N; i++) {\n    if (sum * 2 >= A[i]) {\n      n++;\n    } else {\n      n = 0;\n    }\n    if (sum + A[i] >= 1000000000) {\n      return \"\" + (n + N - i);\n    }\n    sum = sum + A[i];\n  }\n  return \"\" + (n + 1);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.529403745155743, "ngram_match_score": 0.21815195395163461, "weighted_ngram_match_score": 0.31822511564619205, "syntax_match_score": 0.7727272727272727, "dataflow_match_score": 0.8085106382978723}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03831_1", "type": "JavaScript", "obfuscated": "function main(input){var lines=input['split']('\\x0a');var line0=lines[0x0]['split']('\\x20');var n=parseInt(line0[0x0]);var a=parseInt(line0[0x1]);var b=parseInt(line0[0x2]);var x=lines[0x1]['split']('\\x20')['map'](t=>parseInt(t));var ans=0x0;for(var i=0x0;i<n-0x1;i++){ans+=Math['min'](a*(x[i+0x1]-x[i]),b);}console['log'](ans);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 2 5\n1 2 5 7", "11"], ["7 1 100\n40 43 45 105 108 115 124", "84"], ["7 1 2\n24 35 40 68 72 99 103", "12"]], "original": "function main(input) {\n    var lines = input.split('\\n');\n    var line0 = lines[0].split(' ');\n    var n = parseInt(line0[0]);\n    var a = parseInt(line0[1]);\n    var b = parseInt(line0[2]);\n    var x = lines[1].split(' ').map(t => parseInt(t));\n\n    var ans = 0;\n    for (var i = 0; i < n - 1; i++) {\n        ans += Math.min(a * (x[i + 1] - x[i]), b);\n    }\n    console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 993, "deobfuscated": "function main(input) {\n  var lines = input.split(\"\\n\");\n  var line0 = lines[0].split(\" \");\n  var n = parseInt(line0[0]);\n  var a = parseInt(line0[1]);\n  var b = parseInt(line0[2]);\n  var x = lines[1].split(\" \").map(t => parseInt(t));\n  var ans = 0;\n  for (var i = 0; i < n - 1; i++) {\n    ans += Math.min(a * (x[i + 1] - x[i]), b);\n  }\n  console.log(ans);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9167011081866034, "ngram_match_score": 0.83986335624031, "weighted_ngram_match_score": 0.8465489196433583, "syntax_match_score": 1.0, "dataflow_match_score": 0.9803921568627451}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04021_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var n=next();var a=[];for(var i=0x0;i<n;i++){a['push']([next(),i&0x1]);}a['sort']((a,b)=>a[0x0]-b[0x0]);var ans=0x0;for(var i=0x0;i<n;i+=0x2)if(a[i][0x1]===0x1)ans++;return ans;}", "test_cases": [["4\n2\n4\n3\n1", "1"], ["5\n10\n8\n5\n3\n2", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var a = [];\n  for(var i = 0; i < n; i++){\n    a.push([next(),i&1]);\n  }\n  a.sort((a,b)=>a[0]-b[0]);\n  var ans = 0;\n  for(var i = 0; i < n; i+=2)if(a[i][1] === 1)ans++;\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 994, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var n = next();\n  var a = [];\n  for (var i = 0; i < n; i++) {\n    a.push([next(), i & 1]);\n  }\n  a.sort((a, b) => a[0] - b[0]);\n  var ans = 0;\n  for (var i = 0; i < n; i += 2) {\n    if (a[i][1] === 1) {\n      ans++;\n    }\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5816485726116798, "ngram_match_score": 0.10436931449905358, "weighted_ngram_match_score": 0.33504548876817847, "syntax_match_score": 0.8871794871794871, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.06666666666666665, "length_score": -0.06666666666666665, "increase_maintainability": -0.013070278484756392, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.023809523809523725, "new_decrease_halstead_effort": 0.02824561745201193}}
{"filename": "p00061_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a0,0\\x0a');var inputA=Arr[0x0]['split']('\\x0a');var inputB=Arr[0x1]['split']('\\x0a')['map'](Number);var obj={};var s=[];inputA['forEach'](function(v){var arr=v['split'](',')['map'](Number);obj[arr[0x0]]=arr[0x1];s['push'](arr[0x1]);});s['sort'](function(a,b){return b-a;});var s0=s[0x0];var t=[s0];for(var i=0x1;i<s['length'];i++){if(s0==s[i])continue;s0=s[i];t['push'](s[i]);}inputB['forEach'](function(v){console['log'](t['indexOf'](obj[v])+0x1);});", "test_cases": [["1,20\n2,20\n3,30\n4,10\n5,10\n6,20\n0,0\n1\n2\n4\n5", "2\n2\n3\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n0,0\\n\");\nvar inputA=Arr[0].split(\"\\n\");\nvar inputB=Arr[1].split(\"\\n\").map(Number);\n\nvar obj={};\nvar s=[];\n\ninputA.forEach(function(v){\nvar arr=v.split(\",\").map(Number);\nobj[arr[0]]=arr[1];\ns.push(arr[1]);\n});\n\ns.sort(function(a,b){return b-a;});\n\nvar s0=s[0];\nvar t=[s0];\nfor(var i=1;i<s.length;i++){\nif(s0==s[i])continue;\ns0=s[i];\nt.push(s[i]);\n}\n\ninputB.forEach(function(v){\nconsole.log(t.indexOf(obj[v])+1);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 995, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n0,0\\n\");\nvar inputA = Arr[0].split(\"\\n\");\nvar inputB = Arr[1].split(\"\\n\").map(Number);\nvar obj = {};\nvar s = [];\ninputA.forEach(function (v) {\n  var arr = v.split(\",\").map(Number);\n  obj[arr[0]] = arr[1];\n  s.push(arr[1]);\n});\ns.sort(function (a, b) {\n  return b - a;\n});\nvar s0 = s[0];\nvar t = [s0];\nfor (var i = 1; i < s.length; i++) {\n  if (s0 == s[i]) {\n    continue;\n  }\n  s0 = s[i];\n  t.push(s[i]);\n}\ninputB.forEach(function (v) {\n  console.log(t.indexOf(obj[v]) + 1);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4994566930859563, "ngram_match_score": 0.019517682810728302, "weighted_ngram_match_score": 0.052079581336375656, "syntax_match_score": 0.9262295081967213, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00071_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){var dx=[-0x1,0x1,0x0,0x0];var dy=[0x0,0x0,-0x1,0x1];for(var i=0x0;i<0x4;i++){for(var j=0x1;j<=0x3;j++){var yy=y+dy[i]*j;var xx=x+dx[i]*j;if(yy<0x0||yy>=0x8||xx<0x0||xx>=0x8)continue;if(yx[yy][xx]==0x1){yx[yy][xx]=0x0;bomb(yy,xx);}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var AL=Arr['shift']();for(var i=0x0;i<AL;i++){Arr['shift']();var yx=[];for(var j=0x0;j<0x8;j++){var line=Arr['shift']()['split']('')['map'](Number);yx['push'](line);}var X=Arr['shift']()-0x0-0x1;var Y=Arr['shift']()-0x0-0x1;if(yx[Y][X]==0x1){yx[Y][X]=0x0;bomb(Y,X);}console['log']('Data\\x20'+(i+0x1)+':');for(var j=0x0;j<0x8;j++)console['log'](yx[j]['join'](''));}", "test_cases": [["2\n\n00010010\n00000100\n10001001\n00100010\n01000000\n00001000\n10100010\n01010010\n2\n5\n\n00010010\n00000100\n10001001\n00100010\n01000000\n00001000\n10100010\n01010010\n2\n5", "Data 1:\n00000000\n00000100\n10001001\n00100000\n00000000\n00001000\n10100000\n00000000\nData 2:\n00000000\n00000100\n10001001\n00100000\n00000000\n00001000\n10100000\n00000000"]], "original": "function bomb(y,x){\n   var dx=[-1,1,0,0];\n   var dy=[0,0,-1,1];\n   for(var i=0;i<4;i++){\n      for(var j=1;j<=3;j++){\n         var yy=y+(dy[i]*j);\n         var xx=x+(dx[i]*j);\n         if(yy<0 || yy>=8 || xx<0 || xx>=8)continue;\n         if(yx[yy][xx]==1){yx[yy][xx]=0;bomb(yy,xx);}\n      }\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nfor(var i=0;i<AL;i++){\n   Arr.shift();\n   var yx=[];\n   for(var j=0;j<8;j++){\n      var line=Arr.shift().split(\"\").map(Number);\n      yx.push(line);\n   }\n   var X=(Arr.shift()-0)-1;\n   var Y=(Arr.shift()-0)-1;\n   if(yx[Y][X]==1){yx[Y][X]=0;bomb(Y,X);}\n   console.log(\"Data \"+(i+1)+\":\");\n   for(var j=0;j<8;j++)console.log(yx[j].join(\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 996, "deobfuscated": "function bomb(y, x) {\n  var dx = [-1, 1, 0, 0];\n  var dy = [0, 0, -1, 1];\n  for (var i = 0; i < 4; i++) {\n    for (var j = 1; j <= 3; j++) {\n      var yy = y + dy[i] * j;\n      var xx = x + dx[i] * j;\n      if (yy < 0 || yy >= 8 || xx < 0 || xx >= 8) {\n        continue;\n      }\n      if (yx[yy][xx] == 1) {\n        yx[yy][xx] = 0;\n        bomb(yy, xx);\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar AL = Arr.shift();\nfor (var i = 0; i < AL; i++) {\n  Arr.shift();\n  var yx = [];\n  for (var j = 0; j < 8; j++) {\n    var line = Arr.shift().split(\"\").map(Number);\n    yx.push(line);\n  }\n  var X = Arr.shift() - 0 - 1;\n  var Y = Arr.shift() - 0 - 1;\n  if (yx[Y][X] == 1) {\n    yx[Y][X] = 0;\n    bomb(Y, X);\n  }\n  console.log(\"Data \" + (i + 1) + \":\");\n  for (var j = 0; j < 8; j++) {\n    console.log(yx[j].join(\"\"));\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5038796379925731, "ngram_match_score": 0.04169563303578842, "weighted_ngram_match_score": 0.15461387938648136, "syntax_match_score": 0.8192090395480226, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00072_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var m=Arr['shift']()-0x0;var N=[];for(var i=0x0;i<n;i++){N[i]=[];for(var j=0x0;j<n;j++){N[i][j]=Infinity;if(i==j)N[i][j]=0x0;}}var arr=[];for(var i=0x0;i<m;i++){var abc=Arr['shift']()['split'](',')['map'](Number);var a=abc[0x0];var b=abc[0x1];var c=abc[0x2]/0x64;N[a][b]=c;N[b][a]=c;}var city=[0x0];var cost=0x0;while(!![]){if(city['length']==n)break;var min=Infinity;var select=-0x1;for(var i=0x0;i<city['length'];i++){for(var j=0x0;j<n;j++){if(city['indexOf'](j)!=-0x1)continue;if(N[city[i]][j]<min){select=j;min=N[city[i]][j]-0x1;}}}if(select!=-0x1){cost+=min;city['push'](select);}}console['log'](cost);}", "test_cases": [["4\n4\n0,1,1500\n0,2,2000\n1,2,600\n1,3,500\n0", "23"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\nvar n=Arr.shift()-0;\nif(n==0)break;\nvar m=Arr.shift()-0;\nvar N=[];\nfor(var i=0;i<n;i++){\n   N[i]=[];\n   for(var j=0;j<n;j++){\n      N[i][j]=Infinity;\n      if(i==j)N[i][j]=0;\n   }\n}\nvar arr=[];\nfor(var i=0;i<m;i++){\n   var abc=Arr.shift().split(\",\").map(Number);\n   var a=abc[0];\n   var b=abc[1];\n   var c=abc[2]/100;\n   N[a][b]=c;\n   N[b][a]=c;\n}\nvar city=[0];\nvar cost=0;\nwhile(true){\n   if(city.length==n)break;\n   var min=Infinity;\n   var select=-1;\n   for(var i=0;i<city.length;i++){\n      for(var j=0;j<n;j++){\n         if(city.indexOf(j)!=-1)continue;\n         if(N[city[i]][j]<min){\n            select=j;\n            min=N[city[i]][j]-1;\n         }\n      }\n   }\n   if(select!=-1){\n      cost+=min;\n      city.push(select);\n   }\n}\nconsole.log(cost);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 997, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var m = Arr.shift() - 0;\n  var N = [];\n  for (var i = 0; i < n; i++) {\n    N[i] = [];\n    for (var j = 0; j < n; j++) {\n      N[i][j] = Infinity;\n      if (i == j) {\n        N[i][j] = 0;\n      }\n    }\n  }\n  var arr = [];\n  for (var i = 0; i < m; i++) {\n    var abc = Arr.shift().split(\",\").map(Number);\n    var a = abc[0];\n    var b = abc[1];\n    var c = abc[2] / 100;\n    N[a][b] = c;\n    N[b][a] = c;\n  }\n  var city = [0];\n  var cost = 0;\n  while (true) {\n    if (city.length == n) {\n      break;\n    }\n    var min = Infinity;\n    var select = -1;\n    for (var i = 0; i < city.length; i++) {\n      for (var j = 0; j < n; j++) {\n        if (city.indexOf(j) != -1) {\n          continue;\n        }\n        if (N[city[i]][j] < min) {\n          select = j;\n          min = N[city[i]][j] - 1;\n        }\n      }\n    }\n    if (select != -1) {\n      cost += min;\n      city.push(select);\n    }\n  }\n  console.log(cost);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5135843025231515, "ngram_match_score": 0.04034809617571671, "weighted_ngram_match_score": 0.13420769315186165, "syntax_match_score": 0.8797814207650273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0048638019720153025, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02238805970149249, "new_decrease_halstead_effort": 0.09699528672427338}}
{"filename": "p00074_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');var line;while(line=lines['shift']()){var time=line['split']('\\x20')['map'](function(n){return+n;});if(time[0x0]==-0x1&&time[0x1]==-0x1&&time[0x2]==-0x1)break;var hour=time[0x0];var min=time[0x1]+hour*0x3c;var sec=time[0x2]+min*0x3c;var rem=0x78*0x3c-sec;var rem3=rem*0x3;var remSec=rem%0x3c;var remSec3=rem3%0x3c;rem=Math['floor'](rem/0x3c);rem3=Math['floor'](rem3/0x3c);var remMin=rem%0x3c;var remMin3=rem3%0x3c;var remHour=Math['floor'](rem/0x3c);var remHour3=Math['floor'](rem3/0x3c);console['log'](('0'+remHour)['slice'](-0x2)+':'+('0'+remMin)['slice'](-0x2)+':'+('0'+remSec)['slice'](-0x2));console['log'](('0'+remHour3)['slice'](-0x2)+':'+('0'+remMin3)['slice'](-0x2)+':'+('0'+remSec3)['slice'](-0x2));}", "test_cases": [["1 30 0\n-1 -1 -1", "00:30:00\n01:30:00"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n    var time = line.split(' ').map(function(n){return +n;});\n    if (time[0] == -1 && time[1] == -1 && time[2] == -1)\n        break;\n\n    var hour = time[0];\n    var min = time[1] + hour * 60;\n    var sec = time[2] + min * 60;\n\n    var rem = 120 * 60 - sec;\n    var rem3 = rem * 3;\n    var remSec = rem % 60;\n    var remSec3 = rem3 % 60;\n    rem = Math.floor(rem / 60);\n    rem3 = Math.floor(rem3 / 60);\n    var remMin = rem % 60;\n    var remMin3 = rem3 % 60;\n    var remHour = Math.floor(rem / 60);\n    var remHour3 = Math.floor(rem3 / 60);\n\n    console.log(('0' + remHour).slice(-2) + ':' + ('0' + remMin).slice(-2) + ':' + ('0' + remSec).slice(-2));\n    console.log(('0' + remHour3).slice(-2) + ':' + ('0' + remMin3).slice(-2) + ':' + ('0' + remSec3).slice(-2));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 998, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nvar line;\nwhile (line = lines.shift()) {\n  var time = line.split(\" \").map(function (n) {\n    return +n;\n  });\n  if (time[0] == -1 && time[1] == -1 && time[2] == -1) {\n    break;\n  }\n  var hour = time[0];\n  var min = time[1] + hour * 60;\n  var sec = time[2] + min * 60;\n  var rem = 7200 - sec;\n  var rem3 = rem * 3;\n  var remSec = rem % 60;\n  var remSec3 = rem3 % 60;\n  rem = Math.floor(rem / 60);\n  rem3 = Math.floor(rem3 / 60);\n  var remMin = rem % 60;\n  var remMin3 = rem3 % 60;\n  var remHour = Math.floor(rem / 60);\n  var remHour3 = Math.floor(rem3 / 60);\n  console.log((\"0\" + remHour).slice(-2) + \":\" + (\"0\" + remMin).slice(-2) + \":\" + (\"0\" + remSec).slice(-2));\n  console.log((\"0\" + remHour3).slice(-2) + \":\" + (\"0\" + remMin3).slice(-2) + \":\" + (\"0\" + remSec3).slice(-2));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8285569701009232, "ngram_match_score": 0.7035116427931213, "weighted_ngram_match_score": 0.7314305233248577, "syntax_match_score": 0.9542857142857143, "dataflow_match_score": 0.925}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.008333333333333304, "new_decrease_halstead_effort": 0.016882183908045967}}
{"filename": "p00075_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var lines=input['trim']()['split']('\\x0a');var ret=lines['filter'](function(line){var items=line['split'](',');var w=+items[0x1];var h=+items[0x2];return w/(h*h)>=0x19;});ret['forEach'](function(line){console['log'](line['split'](',')[0x0]);});", "test_cases": [["1001,50.0,1.60 \n1002,60.0,1.70 \n1003,70.0,1.80 \n1004,80.0,1.70 \n1005,90.0,1.60", "1004\n1005"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar ret = lines.filter(function(line) {\n    var items = line.split(',');\n    var w = +items[1];\n    var h = +items[2];\n\n    return w / (h * h) >= 25;\n});\n\nret.forEach(function(line) {\n    console.log(line.split(',')[0]);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 999, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar lines = input.trim().split(\"\\n\");\nvar ret = lines.filter(function (line) {\n  var items = line.split(\",\");\n  var w = +items[1];\n  var h = +items[2];\n  return w / (h * h) >= 25;\n});\nret.forEach(function (line) {\n  console.log(line.split(\",\")[0]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7363422107985226, "ngram_match_score": 0.5605699297537929, "weighted_ngram_match_score": 0.6035489134402973, "syntax_match_score": 1.0, "dataflow_match_score": 0.78125}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00078_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){if(N==max)return;if(x<0x0)x=n-0x1;if(y<0x0)y=n-0x1;if(x>=n)x=0x0;if(y>=n)y=0x0;if(yx[y][x]!=-0x1){bomb(y+0x1,x-0x1);}else{yx[y][x]=('\\x20\\x20\\x20'+N)['slice'](-0x4);N++;bomb(y+0x1,x+0x1);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){var n=Arr[i];var max=n*n+0x1;if(n==0x0)break;var yx=[];for(var j=0x0;j<n;j++){yx[j]=[];for(var k=0x0;k<n;k++){yx[j][k]=-0x1;}}var N=0x1;bomb(Math['floor'](n/0x2)+0x1,Math['floor'](n/0x2));console['log'](yx['join']('\\x0a')['replace'](/\\,/g,''));}", "test_cases": [["3\n5\n0", "4   9   2\n   3   5   7\n   8   1   6\n  11  24   7  20   3\n   4  12  25   8  16\n  17   5  13  21   9\n  10  18   1  14  22\n  23   6  19   2  15"]], "original": "function bomb(y,x){\n   if(N==max)return;\n   if(x<0)x=n-1;\n   if(y<0)y=n-1;\n   if(x>=n)x=0;\n   if(y>=n)y=0;\n   if(yx[y][x]!=-1){bomb(y+1,x-1);}\n   else{yx[y][x]=(\"   \"+N).slice(-4);N++;bomb(y+1,x+1);}\n}\n \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var n=Arr[i];\n   var max=n*n+1;\n   if(n==0)break;\n   var yx=[];\n   for(var j=0;j<n;j++){\n      yx[j]=[];\n      for(var k=0;k<n;k++){\n         yx[j][k]=-1;\n      }\n   }\n   var N=1;\n   bomb(Math.floor(n/2)+1,Math.floor(n/2));\n   console.log(yx.join(\"\\n\").replace(/\\,/g,\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1000, "deobfuscated": "function bomb(y, x) {\n  if (N == max) {\n    return;\n  }\n  if (x < 0) {\n    x = n - 1;\n  }\n  if (y < 0) {\n    y = n - 1;\n  }\n  if (x >= n) {\n    x = 0;\n  }\n  if (y >= n) {\n    y = 0;\n  }\n  if (yx[y][x] != -1) {\n    bomb(y + 1, x - 1);\n  } else {\n    yx[y][x] = (\"   \" + N).slice(-4);\n    N++;\n    bomb(y + 1, x + 1);\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  var n = Arr[i];\n  var max = n * n + 1;\n  if (n == 0) {\n    break;\n  }\n  var yx = [];\n  for (var j = 0; j < n; j++) {\n    yx[j] = [];\n    for (var k = 0; k < n; k++) {\n      yx[j][k] = -1;\n    }\n  }\n  var N = 1;\n  bomb(Math.floor(n / 2) + 1, Math.floor(n / 2));\n  console.log(yx.join(\"\\n\").replace(/\\,/g, \"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.505383058400074, "ngram_match_score": 0.02285604329510175, "weighted_ngram_match_score": 0.1133258718338568, "syntax_match_score": 0.8853503184713376, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00121_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var dy=[-0x1,0x0,0x0,0x1];var dx=[0x0,-0x1,0x1,0x0];Arr['forEach'](function(v,I){var V=v['split']('\\x20')['map'](Number);var obj={};var P=[[V,0x0]];while(P['length']>0x0){var A=P['shift']();var arr=A[0x0];var cnt=A[0x1];if(arr['join']('')=='01234567'){console['log'](cnt);break;}var index=arr['indexOf'](0x0);var y=Math['floor'](index/0x4);var x=index%0x4;var yx=[arr['slice'](0x0,0x4),arr['slice'](0x4,0x8)];for(var i=0x0;i<0x4;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||xx<0x0||yy>=0x2||xx>=0x4)continue;yx[y][x]=yx[yy][xx];var card=yx[yy][xx];yx[yy][xx]=0x0;var YX=yx[0x0]['concat'](yx[0x1]);var str=YX['join']('');if(obj['hasOwnProperty'](str)==![]){obj[str]=!![];P['push']([YX,cnt+0x1]);}yx[yy][xx]=card;yx[y][x]=0x0;}}});", "test_cases": [["0 1 2 3 4 5 6 7\n1 0 2 3 4 5 6 7\n7 6 5 4 3 2 1 0", "0\n1\n28"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dy=[-1,0,0,1];\nvar dx=[0,-1,1,0];\nArr.forEach(function(v,I){\n   var V=v.split(\" \").map(Number);\n   var obj={};\n   var P=[[V,0]];\n   while(P.length>0){\n      var A=P.shift();\n      var arr=A[0];\n      var cnt=A[1];\n      if(arr.join(\"\")==\"01234567\"){console.log(cnt);break;}\n      var index=arr.indexOf(0);\n      var y=Math.floor(index/4);\n      var x=index%4;\n      var yx=[arr.slice(0,4),arr.slice(4,8)];\n      for(var i=0;i<4;i++){\n         var yy=y+dy[i];\n         var xx=x+dx[i];\n         if(yy<0 || xx<0 || yy>=2 || xx>=4)continue;\n         yx[y][x]=yx[yy][xx];\n         var card=yx[yy][xx];\n         yx[yy][xx]=0;\n         var YX=yx[0].concat(yx[1]);\n         var str=YX.join(\"\");\n         if(obj.hasOwnProperty(str)==false){\n               obj[str]=true;\n               P.push([YX,cnt+1]);\n         }\n         yx[yy][xx]=card;\n         yx[y][x]=0;\n      }\n   }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1001, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar dy = [-1, 0, 0, 1];\nvar dx = [0, -1, 1, 0];\nArr.forEach(function (v, I) {\n  var V = v.split(\" \").map(Number);\n  var obj = {};\n  var P = [[V, 0]];\n  while (P.length > 0) {\n    var A = P.shift();\n    var arr = A[0];\n    var cnt = A[1];\n    if (arr.join(\"\") == \"01234567\") {\n      console.log(cnt);\n      break;\n    }\n    var index = arr.indexOf(0);\n    var y = Math.floor(index / 4);\n    var x = index % 4;\n    var yx = [arr.slice(0, 4), arr.slice(4, 8)];\n    for (var i = 0; i < 4; i++) {\n      var yy = y + dy[i];\n      var xx = x + dx[i];\n      if (yy < 0 || xx < 0 || yy >= 2 || xx >= 4) {\n        continue;\n      }\n      yx[y][x] = yx[yy][xx];\n      var card = yx[yy][xx];\n      yx[yy][xx] = 0;\n      var YX = yx[0].concat(yx[1]);\n      var str = YX.join(\"\");\n      if (obj.hasOwnProperty(str) == false) {\n        obj[str] = true;\n        P.push([YX, cnt + 1]);\n      }\n      yx[yy][xx] = card;\n      yx[y][x] = 0;\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49172979662082905, "ngram_match_score": 0.013772385002386991, "weighted_ngram_match_score": 0.041544591536177705, "syntax_match_score": 0.9116022099447514, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0047883947137492555, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017421602787456414, "new_decrease_halstead_effort": 0.09101657996005375}}
{"filename": "p00130_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var L=Arr['shift']();for(var i=0x0;i<L;i++){var str=Arr[i];str=str['replace'](/\\-\\>/g,'A');str=str['replace'](/\\<\\-/g,'Z');var m=str['split']('');var arr=[m[0x0]];var n=0x1;m['forEach'](function(v){if(v=='A')n++;else if(v=='Z')n--;else{if(n==0x0){arr['unshift'](v);n=0x1;}if(n>arr['length'])arr['push'](v);}});console['log'](arr['join'](''));}", "test_cases": [["4\na->e->c->b->d\nb<-c<-a<-d<-e\nb->a->c<-a->c->d<-c<-a<-b->a->c->d->e<-d\na->e<-a<-d->a->e<-a<-d<-c->d->a<-d<-c<-b->c->d<-c", "aecbd\nedacb\nbacde\nbcdae"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar L=Arr.shift();\nfor(var i=0;i<L;i++){\n   var str=Arr[i];\n   str=str.replace(/\\-\\>/g,\"A\");\n   str=str.replace(/\\<\\-/g,\"Z\");\n   var m=str.split(\"\");\n   var arr=[m[0]];\n   var n=1;\n   m.forEach(function(v){\n      if(v==\"A\")n++;\n      else if(v==\"Z\")n--;\n      else {\n         if(n==0){arr.unshift(v);n=1;}\n         if(n>arr.length)arr.push(v);\n      }\n   });\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1002, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar L = Arr.shift();\nfor (var i = 0; i < L; i++) {\n  var str = Arr[i];\n  str = str.replace(/\\-\\>/g, \"A\");\n  str = str.replace(/\\<\\-/g, \"Z\");\n  var m = str.split(\"\");\n  var arr = [m[0]];\n  var n = 1;\n  m.forEach(function (v) {\n    if (v == \"A\") {\n      n++;\n    } else if (v == \"Z\") {\n      n--;\n    } else {\n      if (n == 0) {\n        arr.unshift(v);\n        n = 1;\n      }\n      if (n > arr.length) {\n        arr.push(v);\n      }\n    }\n  });\n  console.log(arr.join(\"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5052544024496978, "ngram_match_score": 0.04762865269658583, "weighted_ngram_match_score": 0.14611622982947792, "syntax_match_score": 0.8272727272727273, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00148_1", "type": "JavaScript", "obfuscated": "let input=require('fs')['readFileSync']('/dev/stdin','utf8');let Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];++i){let n=Arr[i];var ans=n%0x27;if(ans==0x0)ans=0x27;if(ans<0xa){ans='0'+ans;}console['log']('3C'+ans);}", "test_cases": [["50\n5576\n5577\n5578", "3C11\n3C38\n3C39\n3C01"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'utf8');\nlet Arr = (input.trim()).split(\"\\n\");\n\nfor(var i = 0;i < Arr.length;++i){\n    let n = Arr[i];\n    var ans = n % 39;\n    if(ans == 0) ans = 39\n    if(ans < 10){\n        ans = \"0\" + ans\n    }\n    console.log(\"3C\"+ ans);\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1003, "deobfuscated": "let input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; ++i) {\n  let n = Arr[i];\n  var ans = n % 39;\n  if (ans == 0) {\n    ans = 39;\n  }\n  if (ans < 10) {\n    ans = \"0\" + ans;\n  }\n  console.log(\"3C\" + ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.630679598766483, "ngram_match_score": 0.3033617927781745, "weighted_ngram_match_score": 0.3860232689544241, "syntax_match_score": 0.8333333333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00149_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var a=[0x0,0x0];var b=[0x0,0x0];var c=[0x0,0x0];var d=[0x0,0x0];for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);for(var j=0x0;j<0x2;j++){if(arr[j]>=1.1)a[j]++;else if(arr[j]>=0.6)b[j]++;else if(arr[j]>=0.2)c[j]++;else d[j]++;}}console['log'](a[0x0]+'\\x20'+a[0x1]);console['log'](b[0x0]+'\\x20'+b[0x1]);console['log'](c[0x0]+'\\x20'+c[0x1]);console['log'](d[0x0]+'\\x20'+d[0x1]);", "test_cases": [["1.0 1.2\n0.8 1.5\n1.2 0.7\n2.0 2.0", "2 3\n2 1\n0 0\n0 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar a=[0,0];\nvar b=[0,0];\nvar c=[0,0];\nvar d=[0,0];\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   for(var j=0;j<2;j++){\n      if(arr[j]>=1.1)a[j]++;\n      else if(arr[j]>=0.6)b[j]++;\n      else if(arr[j]>=0.2)c[j]++;\n      else d[j]++;\n   }\n}\nconsole.log(a[0]+\" \"+a[1]);\nconsole.log(b[0]+\" \"+b[1]);\nconsole.log(c[0]+\" \"+c[1]);\nconsole.log(d[0]+\" \"+d[1]);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1004, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar a = [0, 0];\nvar b = [0, 0];\nvar c = [0, 0];\nvar d = [0, 0];\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  for (var j = 0; j < 2; j++) {\n    if (arr[j] >= 1.1) {\n      a[j]++;\n    } else if (arr[j] >= 0.6) {\n      b[j]++;\n    } else if (arr[j] >= 0.2) {\n      c[j]++;\n    } else {\n      d[j]++;\n    }\n  }\n}\nconsole.log(a[0] + \" \" + a[1]);\nconsole.log(b[0] + \" \" + b[1]);\nconsole.log(c[0] + \" \" + c[1]);\nconsole.log(d[0] + \" \" + d[1]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4858883341171746, "ngram_match_score": 0.017929757760671274, "weighted_ngram_match_score": 0.05785498366670476, "syntax_match_score": 0.8677685950413223, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00159_1", "type": "JavaScript", "obfuscated": "let input=require('fs')['readFileSync']('/dev/stdin','utf8');let Arr=input['trim']()['split']('\\x0a');let bmis=new Map();while(0x1){let n=Arr[0x0];if(n==0x0)break;Arr['shift']();for(var i=0x0;i<n;++i){var nums=Arr[0x0]['split']('\\x20')['map'](Number);var m=nums[0x1]/0x64;var bmi=nums[0x2]/(m*m);var dif=Math['abs'](0x16-bmi);bmis['set'](nums[0x0]['toString'](),dif);Arr['shift']();}let sorted=new Map([...bmis['entries']()]['sort']((a,b)=>a[0x1]-b[0x1]));console['log'](sorted['keys']()['next']()['value']);}", "test_cases": [["6\n1 165 66\n2 178 60\n3 180 72\n4 160 65\n5 185 62\n6 182 62\n3\n3 160 65\n2 180 70\n1 170 75\n0", "3\n2"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'utf8');\nlet Arr = (input.trim()).split(\"\\n\");\nlet bmis = new Map()\n\nwhile(1){\n    let n = Arr[0];\n    if(n == 0) break;\n    Arr.shift();\n    \n    for(var i = 0;i < n;++i){\n        var nums = Arr[0].split(\" \").map(Number);\n        var m = nums[1] / 100\n        var bmi = nums[2] / (m * m);\n        var dif = Math.abs(22 - bmi)\n        bmis.set(nums[0].toString(),dif);\n        Arr.shift();\n    }\n    let sorted = new Map([...bmis.entries()].sort((a, b) => a[1] - b[1]));\n    console.log(sorted.keys().next().value);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1005, "deobfuscated": "let input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet Arr = input.trim().split(\"\\n\");\nlet bmis = new Map();\nwhile (1) {\n  let n = Arr[0];\n  if (n == 0) {\n    break;\n  }\n  Arr.shift();\n  for (var i = 0; i < n; ++i) {\n    var nums = Arr[0].split(\" \").map(Number);\n    var m = nums[1] / 100;\n    var bmi = nums[2] / (m * m);\n    var dif = Math.abs(22 - bmi);\n    bmis.set(nums[0].toString(), dif);\n    Arr.shift();\n  }\n  let sorted = new Map([...bmis.entries()].sort((a, b) => a[1] - b[1]));\n  console.log(sorted.keys().next().value);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7663945506492806, "ngram_match_score": 0.5285080412342694, "weighted_ngram_match_score": 0.6174273042199959, "syntax_match_score": 0.9196428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00160_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var sum=0x0;for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var L=arr[0x0]+arr[0x1]+arr[0x2];var W=arr[0x3];var x;if(L>0xa0)x=0x0;if(L<=0xa0)x=0x640;if(L<=0x8c)x=0x578;if(L<=0x78)x=0x4b0;if(L<=0x64)x=0x3e8;if(L<=0x50)x=0x320;if(L<=0x3c)x=0x258;var y;if(W>0x19)y=0x0;if(W<=0x19)y=0x640;if(W<=0x14)y=0x578;if(W<=0xf)y=0x4b0;if(W<=0xa)y=0x3e8;if(W<=0x5)y=0x320;if(W<=0x2)y=0x258;if(x!=0x0&&y!=0x0)sum+=Math['max'](x,y);}console['log'](sum);}", "test_cases": [["2\n50 25 5 5\n80 60 10 30\n3\n10 15 25 24\n5 8 12 5\n30 30 30 18\n0", "800\n3800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var L=arr[0]+arr[1]+arr[2];\n      var W=arr[3];\n      var x;\n      if(L>160)x=0;\n      if(L<=160)x=1600;\n      if(L<=140)x=1400;\n      if(L<=120)x=1200;\n      if(L<=100)x=1000;\n      if(L<=80)x=800;\n      if(L<=60)x=600;\n      var y;\n      if(W>25)y=0;\n      if(W<=25)y=1600;\n      if(W<=20)y=1400;\n      if(W<=15)y=1200;\n      if(W<=10)y=1000;\n      if(W<=5)y=800;\n      if(W<=2)y=600;\n      if(x!=0 && y!=0)sum+=Math.max(x,y);\n   }\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1006, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    var L = arr[0] + arr[1] + arr[2];\n    var W = arr[3];\n    var x;\n    if (L > 160) {\n      x = 0;\n    }\n    if (L <= 160) {\n      x = 1600;\n    }\n    if (L <= 140) {\n      x = 1400;\n    }\n    if (L <= 120) {\n      x = 1200;\n    }\n    if (L <= 100) {\n      x = 1000;\n    }\n    if (L <= 80) {\n      x = 800;\n    }\n    if (L <= 60) {\n      x = 600;\n    }\n    var y;\n    if (W > 25) {\n      y = 0;\n    }\n    if (W <= 25) {\n      y = 1600;\n    }\n    if (W <= 20) {\n      y = 1400;\n    }\n    if (W <= 15) {\n      y = 1200;\n    }\n    if (W <= 10) {\n      y = 1000;\n    }\n    if (W <= 5) {\n      y = 800;\n    }\n    if (W <= 2) {\n      y = 600;\n    }\n    if (x != 0 && y != 0) {\n      sum += Math.max(x, y);\n    }\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46354956104177675, "ngram_match_score": 0.011119410667032049, "weighted_ngram_match_score": 0.057364547785789276, "syntax_match_score": 0.7857142857142857, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005904328256279845, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014084507042253502, "new_decrease_halstead_effort": 0.11895386191223689}}
{"filename": "p00169_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var arr=Arr['shift']()['split']('\\x20')['map'](Number);if(arr[0x0]==0x0)break;var sum=0x0;arr=arr['filter'](function(v){if(v>0xa)v=0xa;sum+=v;return v==0x1;});var i=arr['length'];while(i!=0x0){if(sum+0xa<=0x15)sum+=0xa;i--;}console['log'](sum>0x15?0x0:sum);}", "test_cases": [["1\n7 7 7\n7 7 8\n12 1\n10 1 1\n0", "11\n21\n0\n21\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0)break;\n   var sum=0;\n   arr=arr.filter(function(v){\n      if(v>10)v=10;\n      sum+=v;\n      return v==1;\n   });\n   var i=arr.length;\n   while(i!=0){\n      if(sum+10<=21)sum+=10;\n      i--;\n   }\n   console.log((sum>21)?0:sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1007, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  if (arr[0] == 0) {\n    break;\n  }\n  var sum = 0;\n  arr = arr.filter(function (v) {\n    if (v > 10) {\n      v = 10;\n    }\n    sum += v;\n    return v == 1;\n  });\n  var i = arr.length;\n  while (i != 0) {\n    if (sum + 10 <= 21) {\n      sum += 10;\n    }\n    i--;\n  }\n  console.log(sum > 21 ? 0 : sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4303130501085935, "ngram_match_score": 0.01923867837707422, "weighted_ngram_match_score": 0.06345930518982998, "syntax_match_score": 0.6385542168674698, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.028037383177570097, "new_decrease_halstead_effort": 0.16622225904626953}}
{"filename": "p00183_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var x=Arr['shift']()['split']('');if(x[0x0]=='0')break;var y=Arr['shift']()['split']('');var z=Arr['shift']()['split']('');var ans='NA';for(var i=0x0;i<0x2;i++){var s=['b','w'][i];if(x[0x0]+x[0x1]+x[0x2]==s+s+s)ans=s;if(y[0x0]+y[0x1]+y[0x2]==s+s+s)ans=s;if(z[0x0]+z[0x1]+z[0x2]==s+s+s)ans=s;if(x[0x0]+y[0x0]+z[0x0]==s+s+s)ans=s;if(x[0x1]+y[0x1]+z[0x1]==s+s+s)ans=s;if(x[0x2]+y[0x2]+z[0x2]==s+s+s)ans=s;if(x[0x0]+y[0x1]+z[0x2]==s+s+s)ans=s;if(x[0x2]+y[0x1]+z[0x0]==s+s+s)ans=s;}console['log'](ans);}", "test_cases": [["bbw\nwbw\n+b+\nbwb\nwbw\nwbw\n0", "b\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var x=Arr.shift().split(\"\");\n   if(x[0]==\"0\")break;\n   var y=Arr.shift().split(\"\");\n   var z=Arr.shift().split(\"\");\n   var ans=\"NA\";\n   for(var i=0;i<2;i++){\n      var s=([\"b\",\"w\"])[i];\n      if(x[0]+x[1]+x[2]==s+s+s)ans=s;\n      if(y[0]+y[1]+y[2]==s+s+s)ans=s;\n      if(z[0]+z[1]+z[2]==s+s+s)ans=s;\n      if(x[0]+y[0]+z[0]==s+s+s)ans=s;\n      if(x[1]+y[1]+z[1]==s+s+s)ans=s;\n      if(x[2]+y[2]+z[2]==s+s+s)ans=s;\n      if(x[0]+y[1]+z[2]==s+s+s)ans=s;\n      if(x[2]+y[1]+z[0]==s+s+s)ans=s;\n   }\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1008, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var x = Arr.shift().split(\"\");\n  if (x[0] == \"0\") {\n    break;\n  }\n  var y = Arr.shift().split(\"\");\n  var z = Arr.shift().split(\"\");\n  var ans = \"NA\";\n  for (var i = 0; i < 2; i++) {\n    var s = [\"b\", \"w\"][i];\n    if (x[0] + x[1] + x[2] == s + s + s) {\n      ans = s;\n    }\n    if (y[0] + y[1] + y[2] == s + s + s) {\n      ans = s;\n    }\n    if (z[0] + z[1] + z[2] == s + s + s) {\n      ans = s;\n    }\n    if (x[0] + y[0] + z[0] == s + s + s) {\n      ans = s;\n    }\n    if (x[1] + y[1] + z[1] == s + s + s) {\n      ans = s;\n    }\n    if (x[2] + y[2] + z[2] == s + s + s) {\n      ans = s;\n    }\n    if (x[0] + y[1] + z[2] == s + s + s) {\n      ans = s;\n    }\n    if (x[2] + y[1] + z[0] == s + s + s) {\n      ans = s;\n    }\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48633539992408104, "ngram_match_score": 0.009338219822148467, "weighted_ngram_match_score": 0.06668519805599393, "syntax_match_score": 0.8693181818181818, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005198520589583255, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01132075471698113, "new_decrease_halstead_effort": 0.11254267744833779}}
{"filename": "p00195_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var abc=[];for(var i=0x0;i<Arr['length'];i++){if(abc['length']==0x0&&Arr[i]=='0\\x200')break;if(abc['length']==0x4){var max=abc['reduce'](function(a,b){return Math['max'](a,b);});var ABC='ABCD'['split']('');var str=ABC[abc['indexOf'](max)];console['log'](str+'\\x20'+max);abc=[];}else{var arr=Arr[i]['split']('\\x20')['map'](Number);abc['push'](arr[0x0]+arr[0x1]);}}", "test_cases": [["1593 4311\n4321 2155\n1256 6421\n5310 1455\n2152 5421\n1549 3386\n4528 3719\n1234 4321\n3330 3109\n2739 2199\n0 0", "C 7677\nB 8247"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar abc=[];\nfor(var i=0;i<Arr.length;i++){\nif(abc.length==0 && Arr[i]==\"0 0\")break;\nif(abc.length==4){\n   var max=abc.reduce(function(a,b){return Math.max(a,b);});\n   var ABC=\"ABCD\".split(\"\");\n   var str=ABC[abc.indexOf(max)];\n   console.log(str+\" \"+max);\n   abc=[];\n}else{\n   var arr=Arr[i].split(\" \").map(Number);\n   abc.push(arr[0]+arr[1]);\n}\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1009, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar abc = [];\nfor (var i = 0; i < Arr.length; i++) {\n  if (abc.length == 0 && Arr[i] == \"0 0\") {\n    break;\n  }\n  if (abc.length == 4) {\n    var max = abc.reduce(function (a, b) {\n      return Math.max(a, b);\n    });\n    var ABC = \"ABCD\".split(\"\");\n    var str = ABC[abc.indexOf(max)];\n    console.log(str + \" \" + max);\n    abc = [];\n  } else {\n    var arr = Arr[i].split(\" \").map(Number);\n    abc.push(arr[0] + arr[1]);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49467444709571995, "ngram_match_score": 0.017678360131072546, "weighted_ngram_match_score": 0.05101942825180728, "syntax_match_score": 0.91, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02351659274436102}}
{"filename": "p00197_1", "type": "JavaScript", "obfuscated": "(function(){var input='',cnt=0x0;function main(){var inputLen,nums,x,y,temp,ans;inputLen=input['length'];for(i=0x0;i<inputLen;i+=0x1){nums=input[i]['split']('\\x20');x=parseInt(nums[0x0],0xa);y=parseInt(nums[0x1],0xa);if(x===0x0&&y===0x0){break;}else if(x<y){temp=x;x=y;y=temp;}ans=gcd(x,y);showResult(ans,cnt);cnt=0x0;}}function gcd(x,y){cnt+=0x1;return x%y===0x0?y:gcd(y,x%y);}function showResult(result,cnt){console['log'](result+'\\x20'+cnt);}process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main();});}());", "test_cases": [["1071 1029\n5 5\n0 0", "21 3\n5 1"]], "original": "(function () {\n  var input = '',\n      cnt = 0;\n\n  function main () {\n    var inputLen, nums, x, y, temp, ans;\n\n    inputLen = input.length;\n    \n    for (i = 0; i < inputLen; i += 1) {\n      nums = input[i].split(' ');\n      x = parseInt(nums[0], 10);\n      y = parseInt(nums[1], 10);\n\n      if (x === 0 && y === 0) {\n        break;\n      } else if (x < y) {\n        temp = x;\n        x = y;\n        y = temp;\n      }\n\n      ans = gcd(x, y);\n\n      showResult(ans, cnt);\n      cnt = 0;\n    }\n  }\n\n  function gcd (x, y) {\n    cnt += 1;\n    return x % y === 0 ? y : gcd(y, x % y);\n  }\n\n  function showResult(result, cnt) {\n    console.log(result + ' ' + cnt);\n  }\n\n  process.stdin.resume();\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function (chunk) {\n    input += chunk;\n  });\n\n  process.stdin.on('end', function () {\n    input = input.split('\\n');\n    main();\n  });\n}());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1010, "deobfuscated": "(function () {\n  var input = \"\";\n  var cnt = 0;\n  function main() {\n    var inputLen;\n    var nums;\n    var x;\n    var y;\n    var temp;\n    var ans;\n    inputLen = input.length;\n    for (i = 0; i < inputLen; i += 1) {\n      nums = input[i].split(\" \");\n      x = parseInt(nums[0], 10);\n      y = parseInt(nums[1], 10);\n      if (x === 0 && y === 0) {\n        break;\n      } else if (x < y) {\n        temp = x;\n        x = y;\n        y = temp;\n      }\n      ans = gcd(x, y);\n      showResult(ans, cnt);\n      cnt = 0;\n    }\n  }\n  function gcd(x, y) {\n    cnt += 1;\n    if (x % y === 0) {\n      return y;\n    } else {\n      return gcd(y, x % y);\n    }\n  }\n  function showResult(result, cnt) {\n    console.log(result + \" \" + cnt);\n  }\n  process.stdin.resume();\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n  });\n  process.stdin.on(\"end\", function () {\n    input = input.split(\"\\n\");\n    main();\n  });\n})();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8105533727233212, "ngram_match_score": 0.6459512372194672, "weighted_ngram_match_score": 0.6977115290361365, "syntax_match_score": 0.8985507246376812, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.07894736842105265, "length_score": -0.07894736842105265, "increase_maintainability": -0.01303159946697352, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.046242774566473965, "new_decrease_halstead_effort": 0.020260351849998304}}
{"filename": "p00216_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){if(Arr[i]==-0x1)break;var a=Arr[i];var sum=0x47e;if(a>0xa&&a<=0x14)sum=0x47e+0x7d*(a-0xa);else if(a>0x14&&a<=0x1e)sum=0x47e+0x7d*0xa+0x8c*(a-0x14);else if(a>0x1e)sum=0x47e+0x7d*0xa+0x8c*0xa+0xa0*(a-0x1e);console['log'](0x10b8-sum);}", "test_cases": [["29\n40\n0\n-1", "620\n-1120\n3130"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==-1)break;\n   var a=Arr[i];\n   var sum=1150;\n   if(a>10 && a<=20)sum=1150+125*(a-10);\n   else if(a>20 && a<=30)sum=1150+125*10+140*(a-20);\n   else if(a>30)sum=1150+125*10+140*10+160*(a-30);\n   console.log(4280-sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1011, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  if (Arr[i] == -1) {\n    break;\n  }\n  var a = Arr[i];\n  var sum = 1150;\n  if (a > 10 && a <= 20) {\n    sum = 1150 + (a - 10) * 125;\n  } else if (a > 20 && a <= 30) {\n    sum = 2400 + (a - 20) * 140;\n  } else if (a > 30) {\n    sum = 3800 + (a - 30) * 160;\n  }\n  console.log(4280 - sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4202677945645232, "ngram_match_score": 0.01331119362648837, "weighted_ngram_match_score": 0.05856458233275369, "syntax_match_score": 0.6091954022988506, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00971474192797328, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.09677419354838712, "new_decrease_halstead_effort": 0.23010680070693268}}
{"filename": "p00218_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var input='';process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){var lines=input['split']('\\x0a');var l=0x0;while(!![]){var n=Number(lines[l++]);if(n===0x0){break;}for(var i=0x0;i<n;i++){var values=lines[l++]['split']('\\x20')['map'](Number);var pm=values[0x0];var pe=values[0x1];var pj=values[0x2];var ans='C';if(pm===0x64||pe===0x64||pj===0x64){ans='A';}else if((pm+pe)/0x2>=0x5a){ans='A';}else{var average=(pm+pe+pj)/0x3;if(average>=0x50){ans='A';}else if(average>=0x46){ans='B';}else if(average>=0x32&&(pm>=0x50||pe>=0x50)){ans='B';}}console['log'](ans);}}});", "test_cases": [["4\n100 70 20\n98 86 55\n80 34 36\n65 79 65\n2\n99 81 20\n66 72 90\n0", "A\nA\nB\nC\nA\nB"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar input = '';\nprocess.stdin.on('data', function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function () {\n  var lines = input.split('\\n');\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    for (var i = 0; i < n; i++) {\n      var values = lines[l++].split(' ').map(Number);\n      var pm = values[0];\n      var pe = values[1];\n      var pj = values[2];\n      var ans = 'C';\n      if (pm === 100 || pe === 100 || pj === 100) {\n        ans = 'A';\n      } else if ((pm + pe) / 2 >= 90) {\n        ans = 'A';\n      } else {\n        var average = (pm + pe + pj) / 3;\n        if (average >= 80) {\n          ans = 'A';\n        } else if (average >= 70) {\n          ans = 'B';\n        } else if (average >= 50 && (pm >= 80 || pe >= 80)) {\n          ans = 'B';\n        }\n      }\n      console.log(ans);\n    }\n  }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1012, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  var lines = input.split(\"\\n\");\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    for (var i = 0; i < n; i++) {\n      var values = lines[l++].split(\" \").map(Number);\n      var pm = values[0];\n      var pe = values[1];\n      var pj = values[2];\n      var ans = \"C\";\n      if (pm === 100 || pe === 100 || pj === 100) {\n        ans = \"A\";\n      } else if ((pm + pe) / 2 >= 90) {\n        ans = \"A\";\n      } else {\n        var average = (pm + pe + pj) / 3;\n        if (average >= 80) {\n          ans = \"A\";\n        } else if (average >= 70) {\n          ans = \"B\";\n        } else if (average >= 50 && (pm >= 80 || pe >= 80)) {\n          ans = \"B\";\n        }\n      }\n      console.log(ans);\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9027926643281516, "ngram_match_score": 0.8098165670646876, "weighted_ngram_match_score": 0.816738705632534, "syntax_match_score": 1.0, "dataflow_match_score": 0.9846153846153847}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005080299736824223, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015706806282722474, "new_decrease_halstead_effort": 0.13407775694388713}}
{"filename": "p00219_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');var input='';process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){var lines=input['split']('\\x0a');var l=0x0;while(!![]){var n=Number(lines[l++]);if(n===0x0){break;}var sales=[0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0];for(var i=0x0;i<n;i++){sales[Number(lines[l++])]++;}for(var i=0x0;i<sales['length'];i++){var bar=sales[i]===0x0?'-':'';for(var j=0x0;j<sales[i];j++){bar+='*';}console['log'](bar);}}});", "test_cases": [["15\n2\n6\n7\n0\n1\n9\n8\n7\n3\n8\n9\n4\n8\n2\n2\n3\n9\n1\n5\n0", "*\n*\n***\n*\n*\n-\n*\n**\n***\n**\n-\n*\n-\n-\n-\n*\n-\n-\n-\n*"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar input = '';\nprocess.stdin.on('data', function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function () {\n  var lines = input.split('\\n');\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    var sales = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (var i = 0; i < n; i++) {\n      sales[Number(lines[l++])]++;\n    }\n    for (var i = 0; i < sales.length; i++) {\n      var bar = (sales[i] === 0) ? '-' : '';\n      for (var j = 0; j < sales[i]; j++) {\n        bar += '*';\n      }\n      console.log(bar);\n    }\n  }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1013, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nvar input = \"\";\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  var lines = input.split(\"\\n\");\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    var sales = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (var i = 0; i < n; i++) {\n      sales[Number(lines[l++])]++;\n    }\n    for (var i = 0; i < sales.length; i++) {\n      var bar = sales[i] === 0 ? \"-\" : \"\";\n      for (var j = 0; j < sales[i]; j++) {\n        bar += \"*\";\n      }\n      console.log(bar);\n    }\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8613965662431275, "ngram_match_score": 0.7941231125821976, "weighted_ngram_match_score": 0.8011899283465965, "syntax_match_score": 0.8666666666666667, "dataflow_match_score": 0.9836065573770492}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004822858881265546, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020408163265306145, "new_decrease_halstead_effort": 0.11330049261083763}}
{"filename": "p00222_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var p=prime(0x98967f);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){var a=Arr[i];if(a==0x0)break;var quad='';for(var j=0x5;j<p['length'];j++){if(p[j]>a)break;var x=p[j]-0x8;if(x==p[j-0x3]&&x+0x2==p[j-0x2]&&x+0x6==p[j-0x1])quad=p[j];}console['log'](quad);}", "test_cases": [["13\n14\n15\n16\n17\n18\n19\n20\n10000\n0", "13\n13\n13\n13\n13\n13\n19\n19\n9439"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(9999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   var quad=\"\";\n   for(var j=5;j<p.length;j++){\n   if(p[j]>a)break;\n   var x=p[j]-8;\n   if(x==p[j-3] && x+2==p[j-2] && x+6==p[j-1])quad=p[j];\n   }\n   console.log(quad);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1014, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar p = prime(9999999);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  var a = Arr[i];\n  if (a == 0) {\n    break;\n  }\n  var quad = \"\";\n  for (var j = 5; j < p.length; j++) {\n    if (p[j] > a) {\n      break;\n    }\n    var x = p[j] - 8;\n    if (x == p[j - 3] && x + 2 == p[j - 2] && x + 6 == p[j - 1]) {\n      quad = p[j];\n    }\n  }\n  console.log(quad);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5093506980314164, "ngram_match_score": 0.03993547745660981, "weighted_ngram_match_score": 0.1503335567072721, "syntax_match_score": 0.8471337579617835, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006309413468192027, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.040983606557377095, "new_decrease_halstead_effort": 0.08818194808206381}}
{"filename": "p00238_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var t=Arr['shift']()-0x0;if(t==0x0)break;var n=Arr['shift']()-0x0;var sum=0x0;for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);sum+=arr[0x1]-arr[0x0];}console['log'](t<=sum?'OK':t-sum);}", "test_cases": [["10\n3\n6 11\n12 15\n18 22\n14\n2\n6 11\n13 20\n0", "OK\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var t=Arr.shift()-0;\n   if(t==0)break;\n   var n=Arr.shift()-0;\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      sum+=arr[1]-arr[0];\n   }\n   console.log((t<=sum)?\"OK\":t-sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1015, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var t = Arr.shift() - 0;\n  if (t == 0) {\n    break;\n  }\n  var n = Arr.shift() - 0;\n  var sum = 0;\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    sum += arr[1] - arr[0];\n  }\n  console.log(t <= sum ? \"OK\" : t - sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4442796869077621, "ngram_match_score": 0.018884748972625882, "weighted_ngram_match_score": 0.06086557760579094, "syntax_match_score": 0.6973684210526315, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005888523172346227, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.030000000000000027, "new_decrease_halstead_effort": 0.15529002042897155}}
{"filename": "p00239_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;var arr=[];for(var i=0x0;i<N;i++){var ipqr=Arr['shift']()['split']('\\x20')['map'](Number);arr['push'](ipqr);}var PQRC=Arr['shift']()['split']('\\x20')['map'](Number);var result=[];arr['forEach'](function(v){var bad=0x0;if(PQRC[0x0]<v[0x1])bad++;if(PQRC[0x1]<v[0x2])bad++;if(PQRC[0x2]<v[0x3])bad++;if(PQRC[0x3]<0x4*(v[0x1]+v[0x3])+0x9*v[0x2])bad++;if(bad==0x0)result['push'](v[0x0]);});console['log'](result['length']==0x0?'NA':result['join']('\\x0a'));}", "test_cases": [["4\n1 7 14 47\n2 5 35 55\n3 6 3 59\n4 6 5 15\n10 15 50 400\n2\n1 8 10 78\n2 4 18 33\n10 10 50 300\n0", "1\n4\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var arr=[];\n   for(var i=0;i<N;i++){\n      var ipqr=(Arr.shift()).split(\" \").map(Number);\n      arr.push(ipqr);\n   }\n   var PQRC=(Arr.shift()).split(\" \").map(Number);\n   var result=[];\n   arr.forEach(function(v){\n      var bad=0;\n      if(PQRC[0]<v[1])bad++;\n      if(PQRC[1]<v[2])bad++;\n      if(PQRC[2]<v[3])bad++;\n      if(PQRC[3]<4*(v[1]+v[3])+(9*v[2]))bad++;\n      if(bad==0)result.push(v[0]);\n   });\n   console.log((result.length==0)?\"NA\":result.join(\"\\n\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1016, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  var arr = [];\n  for (var i = 0; i < N; i++) {\n    var ipqr = Arr.shift().split(\" \").map(Number);\n    arr.push(ipqr);\n  }\n  var PQRC = Arr.shift().split(\" \").map(Number);\n  var result = [];\n  arr.forEach(function (v) {\n    var bad = 0;\n    if (PQRC[0] < v[1]) {\n      bad++;\n    }\n    if (PQRC[1] < v[2]) {\n      bad++;\n    }\n    if (PQRC[2] < v[3]) {\n      bad++;\n    }\n    if (PQRC[3] < (v[1] + v[3]) * 4 + v[2] * 9) {\n      bad++;\n    }\n    if (bad == 0) {\n      result.push(v[0]);\n    }\n  });\n  console.log(result.length == 0 ? \"NA\" : result.join(\"\\n\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4622648084698926, "ngram_match_score": 0.03661989104984655, "weighted_ngram_match_score": 0.1341176645080456, "syntax_match_score": 0.6783216783216783, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.016129032258064502, "new_decrease_halstead_effort": 0.09590235396686997}}
{"filename": "p00242_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var str='';for(var i=0x0;i<n;i++)str+=Arr['shift']()+'\\x20';var arr=str['trim']()['split']('\\x20');var s=Arr['shift']();var f=arr['filter'](function(v){return v[0x0]==s;});f['sort']();var F=[];var memo='';for(var i=0x0;i<f['length'];i++){if(memo==f[i]){F[F['length']-0x1]=[f[i],F[F['length']-0x1][0x1]+0x1];}else{F['push']([f[i],0x1]);memo=f[i];}}F['sort'](function(a,b){if(a[0x1]==b[0x1])return a[0x0]>b[0x0];else return b[0x1]-a[0x1];});var ans=[];for(var i=0x0;i<0x5;i++){if(F['length']>i)ans['push'](F[i][0x0]);}console['log'](ans['length']>0x0?ans['join']('\\x20'):'NA');}", "test_cases": [["1\nben likes bananas the best among many fruits because bananas are sweet and cheap\nb\n1\nwinners get to visit aizu and the university of aizu and make many friends as well\na\n3\nask alex about\nthe answer for the\nassignment on android apps\na\n2\nprogramming is both\na sport and an intellectual puzzle\nc\n0", "bananas because ben best\naizu and as\nabout alex android answer apps\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var str=\"\";\n   for(var i=0;i<n;i++)str+=Arr.shift()+\" \";\n   var arr=(str.trim()).split(\" \");\n   var s=Arr.shift();\n   var f=arr.filter(function(v){return v[0]==s;});\n   f.sort();\n   var F=[];\n   var memo=\"\";\n   for(var i=0;i<f.length;i++){\n      if(memo==f[i]){\n         F[F.length-1]=[f[i],F[F.length-1][1]+1];\n      }\n      else {\n         F.push([f[i],1]);\n         memo=f[i];\n      }\n   }\n   F.sort(function(a,b){\n      if(a[1]==b[1])return a[0]>b[0];\n      else return b[1]-a[1];\n   });\n   var ans=[];\n   for(var i=0;i<5;i++){\n      if(F.length>i)ans.push(F[i][0]);\n   }\n   console.log((ans.length>0)?ans.join(\" \"):\"NA\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1017, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var str = \"\";\n  for (var i = 0; i < n; i++) {\n    str += Arr.shift() + \" \";\n  }\n  var arr = str.trim().split(\" \");\n  var s = Arr.shift();\n  var f = arr.filter(function (v) {\n    return v[0] == s;\n  });\n  f.sort();\n  var F = [];\n  var memo = \"\";\n  for (var i = 0; i < f.length; i++) {\n    if (memo == f[i]) {\n      F[F.length - 1] = [f[i], F[F.length - 1][1] + 1];\n    } else {\n      F.push([f[i], 1]);\n      memo = f[i];\n    }\n  }\n  F.sort(function (a, b) {\n    if (a[1] == b[1]) {\n      return a[0] > b[0];\n    } else {\n      return b[1] - a[1];\n    }\n  });\n  var ans = [];\n  for (var i = 0; i < 5; i++) {\n    if (F.length > i) {\n      ans.push(F[i][0]);\n    }\n  }\n  console.log(ans.length > 0 ? ans.join(\" \") : \"NA\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47470544159430156, "ngram_match_score": 0.015476470066811925, "weighted_ngram_match_score": 0.051884622153090844, "syntax_match_score": 0.8314606741573034, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012048192771084376, "new_decrease_halstead_effort": 0.08261617900172102}}
{"filename": "p00252_1", "type": "JavaScript", "obfuscated": "function Main(input){a=input['split']('\\x0a')[0x0]['split']('\\x20')['join']('');console['log'](a=='110'||a=='001'?'Open':'Close');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["0 0 1", "Open"], ["0 1 0", "Close"]], "original": "function Main(input){\n  a=input.split('\\n')[0].split(' ').join('');\n  console.log(((a=='110'||a=='001')?'Open':'Close'));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1018, "deobfuscated": "function Main(input) {\n  a = input.split(\"\\n\")[0].split(\" \").join(\"\");\n  console.log(a == \"110\" || a == \"001\" ? \"Open\" : \"Close\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5006929329707792, "ngram_match_score": 0.04857956790684703, "weighted_ngram_match_score": 0.15873761852172433, "syntax_match_score": 0.7954545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00261_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var str=Arr['shift']();if(str=='#')break;var p='A';for(var i=0x0;i<str['length'];i++){var s=str[i]-0x0;if(p=='A'&&s===0x0)p='X';else if(p=='A'&&s===0x1)p='Y';else if(p=='B'&&s===0x0)p='Y';else if(p=='B'&&s===0x1)p='X';else if(p=='W'&&s===0x0)p='B';else if(p=='W'&&s===0x1)p='Y';else if(p=='X'&&s===0x0)p='';else if(p=='X'&&s===0x1)p='Z';else if(p=='Y'&&s===0x0)p='X';else if(p=='Y'&&s===0x1)p='';else if(p=='Z'&&s===0x0)p='W';else if(p=='Z'&&s===0x1)p='B';}console['log'](p=='B'?'Yes':'No');}", "test_cases": [["0100\n0101\n10100\n01000\n0101011\n0011\n011111\n#", "Yes\nNo\nYes\nNo\nYes\nNo\nYes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"#\")break;\n   var p=\"A\";\n   for(var i=0;i<str.length;i++){\n      var s=str[i]-0;\n      if(p==\"A\" && s===0)p=\"X\";\n      else if(p==\"A\" && s===1)p=\"Y\";\n      else if(p==\"B\" && s===0)p=\"Y\";\n      else if(p==\"B\" && s===1)p=\"X\";\n      else if(p==\"W\" && s===0)p=\"B\";\n      else if(p==\"W\" && s===1)p=\"Y\";\n      else if(p==\"X\" && s===0)p=\"\";\n      else if(p==\"X\" && s===1)p=\"Z\";\n      else if(p==\"Y\" && s===0)p=\"X\";\n      else if(p==\"Y\" && s===1)p=\"\";\n      else if(p==\"Z\" && s===0)p=\"W\";\n      else if(p==\"Z\" && s===1)p=\"B\";\n   }\n   console.log((p==\"B\")?\"Yes\":\"No\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1019, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var str = Arr.shift();\n  if (str == \"#\") {\n    break;\n  }\n  var p = \"A\";\n  for (var i = 0; i < str.length; i++) {\n    var s = str[i] - 0;\n    if (p == \"A\" && s === 0) {\n      p = \"X\";\n    } else if (p == \"A\" && s === 1) {\n      p = \"Y\";\n    } else if (p == \"B\" && s === 0) {\n      p = \"Y\";\n    } else if (p == \"B\" && s === 1) {\n      p = \"X\";\n    } else if (p == \"W\" && s === 0) {\n      p = \"B\";\n    } else if (p == \"W\" && s === 1) {\n      p = \"Y\";\n    } else if (p == \"X\" && s === 0) {\n      p = \"\";\n    } else if (p == \"X\" && s === 1) {\n      p = \"Z\";\n    } else if (p == \"Y\" && s === 0) {\n      p = \"X\";\n    } else if (p == \"Y\" && s === 1) {\n      p = \"\";\n    } else if (p == \"Z\" && s === 0) {\n      p = \"W\";\n    } else if (p == \"Z\" && s === 1) {\n      p = \"B\";\n    }\n  }\n  console.log(p == \"B\" ? \"Yes\" : \"No\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45521497921217763, "ngram_match_score": 0.007312930905838546, "weighted_ngram_match_score": 0.027030132010287623, "syntax_match_score": 0.7865168539325843, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006754837994541241, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01388888888888884, "new_decrease_halstead_effort": 0.132842608652873}}
{"filename": "p00262_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var cnt=0x0;while(!![]){var flag=arr['every'](function(v,i){return i+0x1==v;});if(flag)break;var L=arr['length'];arr=arr['map'](function(v){return v-0x1;});arr=arr['filter'](function(v){return v!=0x0;});arr['push'](L);cnt++;if(cnt==0x2710){cnt=-0x1;break;}}console['log'](cnt);}", "test_cases": [["6\n1 4 1 3 2 4\n5\n1 2 3 4 5\n10\n1 1 1 1 1 1 1 1 1 1\n9\n1 1 1 1 1 1 1 1 1\n12\n1 4 1 3 2 4 3 3 2 1 2 2\n1\n5050\n3\n10000 10000 100\n0", "24\n0\n10\n-1\n48\n5049\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var cnt=0;\n   while(true){\n      var flag=arr.every(function(v,i){return (i+1==v);});\n      if(flag)break;\n      var L=arr.length;\n      arr=arr.map(function(v){return v-1;});\n      arr=arr.filter(function(v){return (v!=0);});\n      arr.push(L);\n      cnt++;\n      if(cnt==10000){cnt=-1;break;}\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1020, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var cnt = 0;\n  while (true) {\n    var flag = arr.every(function (v, i) {\n      return i + 1 == v;\n    });\n    if (flag) {\n      break;\n    }\n    var L = arr.length;\n    arr = arr.map(function (v) {\n      return v - 1;\n    });\n    arr = arr.filter(function (v) {\n      return v != 0;\n    });\n    arr.push(L);\n    cnt++;\n    if (cnt == 10000) {\n      cnt = -1;\n      break;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.44578029660705354, "ngram_match_score": 0.022031170300454324, "weighted_ngram_match_score": 0.07301662163234686, "syntax_match_score": 0.6880733944954128, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04347826086956519, "new_decrease_halstead_effort": 0.1868314853337283}}
{"filename": "p00276_1", "type": "JavaScript", "obfuscated": "Main(function(input){input=input['trim']()['split']('\\x0a');input['shift']();input['forEach'](function(line){var tmp=line['split']('\\x20');var c=+tmp[0x0];var a=+tmp[0x1];var n=+tmp[0x2];var ans=0x0;var min;min=Math['min'](c,a,n);c-=min;a-=min;n-=min;ans+=min;min=Math['min'](Math['floor'](c/0x2),a);c-=min*0x2;a-=min;ans+=min;ans+=Math['floor'](c/0x3);console['log'](ans);});});function Main(main){var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){main(input);});};", "test_cases": [["4\n3 0 0\n1 1 1\n9 4 1\n0 1 2", "1\n1\n4\n0"]], "original": "Main(function(input) {\n\tinput = input.trim().split('\\n');\n\tinput.shift();\n\tinput.forEach(function(line) {\n\t\tvar tmp = line.split(' ');\n\t\tvar c = +tmp[0];\n\t\tvar a = +tmp[1];\n\t\tvar n = +tmp[2];\n\t\tvar ans = 0;\n\t\tvar min;\n\n\t\t/**\n\t\t * CAN pattern\n\t\t */\n\t\tmin = Math.min(c, a, n);\n\t\tc -= min;\n\t\ta -= min;\n\t\tn -= min;\n\t\tans += min;\n\n\t\t/**\n\t\t * CCA pattern\n\t\t */\n\t\tmin = Math.min(Math.floor(c / 2), a);\n\t\tc -= min * 2;\n\t\ta -= min;\n\t\tans += min;\n\n\t\t/**\n\t\t * CCC pattern\n\t\t */\n\t\tans += Math.floor(c / 3);\n\n\t\tconsole.log(ans);\n\t});\n});\n\nfunction Main(main) {\n\tvar input = '';\n\n\tprocess.stdin.resume();\n\tprocess.stdin.setEncoding('utf8');\n\tprocess.stdin.on('data', function(chunk) {\n\t\tinput += chunk;\n\t});\n\tprocess.stdin.on('end', function() {\n\t\tmain(input);\n\t});\n};", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1021, "deobfuscated": "Main(function (input) {\n  input = input.trim().split(\"\\n\");\n  input.shift();\n  input.forEach(function (line) {\n    var tmp = line.split(\" \");\n    var c = +tmp[0];\n    var a = +tmp[1];\n    var n = +tmp[2];\n    var ans = 0;\n    var min;\n    min = Math.min(c, a, n);\n    c -= min;\n    a -= min;\n    n -= min;\n    ans += min;\n    min = Math.min(Math.floor(c / 2), a);\n    c -= min * 2;\n    a -= min;\n    ans += min;\n    ans += Math.floor(c / 3);\n    console.log(ans);\n  });\n});\nfunction Main(main) {\n  var input = \"\";\n  process.stdin.resume();\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.on(\"data\", function (chunk) {\n    input += chunk;\n  });\n  process.stdin.on(\"end\", function () {\n    main(input);\n  });\n}\n;\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8195284368033035, "ngram_match_score": 0.6323530125230733, "weighted_ngram_match_score": 0.6457607346901406, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.001157070000660787, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.022666755571000508}}
{"filename": "p00310_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [p,m,c]=input['trim']()['split']('\\x20')['map'](Number);console['log'](p+m+c);", "test_cases": [["10 10 20", "40"], ["100 0 0", "100"], ["1000 1000 1000", "3000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [p,m,c]=input.trim().split(\" \").map(Number);\nconsole.log(p+m+c);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1022, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [p, m, c] = input.trim().split(\" \").map(Number);\nconsole.log(p + m + c);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5526874869085452, "ngram_match_score": 0.06468490584192432, "weighted_ngram_match_score": 0.14606504179225632, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00352_1", "type": "JavaScript", "obfuscated": "'use strict';function Main(input){const ab=input['split']('\\x20');console['log']((parseFloat(ab[0x0])+parseFloat(ab[0x1]))/0x2);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1000 3000", "2000"], ["5000 5000", "5000"], ["1000 2000", "1500"]], "original": "\"use strict\";\n\nfunction Main(input) {\n  const ab = input.split(\" \");\n  console.log((parseFloat(ab[0])+parseFloat(ab[1]))/2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1023, "deobfuscated": "'use strict';\n\nfunction Main(input) {\n  const ab = input.split(\" \");\n  console.log((parseFloat(ab[0]) + parseFloat(ab[1])) / 2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7742658310770604, "ngram_match_score": 0.46606087123583245, "weighted_ngram_match_score": 0.6310024530724091, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00355_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [a,b]=arr['shift']()['split']('\\x20')['map'](Number);var n=arr['shift']()-0x0;var flag=0x0;while(n--){var [s,f]=arr['shift']()['split']('\\x20')['map'](Number);if(f<=a||b<=s)continue;else flag=0x1;}console['log'](flag);", "test_cases": [["5 7\n3\n1 4\n4 5\n7 10", "0"], ["3 7\n3\n7 10\n1 4\n4 5", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr =input.trim().split(\"\\n\");\nvar [a,b] = arr.shift().split(\" \").map(Number);\nvar n = arr.shift() - 0;\nvar flag = 0;\nwhile(n--){\n   var [s,f] = arr.shift().split(\" \").map(Number);\n   if(f<=a || b<=s)continue;\n   else flag = 1;\n}\nconsole.log(flag);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1024, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [a, b] = arr.shift().split(\" \").map(Number);\nvar n = arr.shift() - 0;\nvar flag = 0;\nwhile (n--) {\n  var [s, f] = arr.shift().split(\" \").map(Number);\n  if (f <= a || b <= s) {\n    continue;\n  } else {\n    flag = 1;\n  }\n}\nconsole.log(flag);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6959637539237884, "ngram_match_score": 0.3487396079616467, "weighted_ngram_match_score": 0.5055379429447744, "syntax_match_score": 0.9295774647887324, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00356_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [x,y]=input['trim']()['split']('\\x20')['map'](Number);var cnt=0x0;for(var i=0x0;i<=x;i++){if(y*i*0x2/(x*0x2)%0x1===0x0)cnt++;}console['log'](x+0x1+y+0x1-cnt);", "test_cases": [["4 4", "5"], ["4 6", "9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [x,y]=input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor(var i=0;i<=x;i++){\n   if(y*i*2/(x*2)%1===0)cnt++;\n}\nconsole.log(x+1+y+1-cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1025, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [x, y] = input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor (var i = 0; i <= x; i++) {\n  if (y * i * 2 / (x * 2) % 1 === 0) {\n    cnt++;\n  }\n}\nconsole.log(x + 1 + y + 1 - cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.584609166562611, "ngram_match_score": 0.0927097496488127, "weighted_ngram_match_score": 0.3226499935247078, "syntax_match_score": 0.9230769230769231, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00424_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(Arr['length']>0x1){var AL=Arr['shift']();var hash={};for(var i=0x0;i<AL;i++){var arr=Arr[i]['trim']()['split']('\\x20');hash[arr[0x0]]=arr[0x1];}Arr=Arr['slice'](AL,Arr['length']+0x1);var AL=Arr['shift']();var str='';for(var i=0x0;i<AL;i++){var k=Arr[i]['trim']();str+=hash['hasOwnProperty'](k)?hash[k]:k;}Arr=Arr['slice'](AL,Arr['length']+0x1);console['log'](str);if(Arr[0x0]=='0')break;}", "test_cases": [["3\t\nA a\t\n0 5\t\n5 4\t\n10\t\nA\t\nB\t\nC\t\n0\t\n1\t\n4\t\n5\t\na\t\nb\t\nA\n3\t\nA a\t\n0 5\t\n5 4\t\n10\t\nA\t\nB\t\nC\t\n0\t\n1\t\n4\t\n5\t\na\t\nb\t\nA\n0", "aBC5144aba\naBC5144aba"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(Arr.length>1){\n   var AL=Arr.shift();\n   var hash={};\n   for(var i=0;i<AL;i++){\n      var arr=(Arr[i].trim()).split(\" \");\n      hash[arr[0]]=arr[1];\n   }\n   Arr=Arr.slice(AL,Arr.length+1);\n   var AL=Arr.shift();\n   var str=\"\";\n   for(var i=0;i<AL;i++){\n      var k=Arr[i].trim();\n      str+=(hash.hasOwnProperty(k))?hash[k]:k;\n   }\n   Arr=Arr.slice(AL,Arr.length+1);\n   console.log(str);\n   if(Arr[0]==\"0\")break;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1026, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (Arr.length > 1) {\n  var AL = Arr.shift();\n  var hash = {};\n  for (var i = 0; i < AL; i++) {\n    var arr = Arr[i].trim().split(\" \");\n    hash[arr[0]] = arr[1];\n  }\n  Arr = Arr.slice(AL, Arr.length + 1);\n  var AL = Arr.shift();\n  var str = \"\";\n  for (var i = 0; i < AL; i++) {\n    var k = Arr[i].trim();\n    str += hash.hasOwnProperty(k) ? hash[k] : k;\n  }\n  Arr = Arr.slice(AL, Arr.length + 1);\n  console.log(str);\n  if (Arr[0] == \"0\") {\n    break;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4650535662191771, "ngram_match_score": 0.014543364191042536, "weighted_ngram_match_score": 0.045670900685665775, "syntax_match_score": 0.8, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00425_1", "type": "JavaScript", "obfuscated": "function move(x,arr){var d1=arr[0x0];var d2=arr[0x1];var d3=arr[0x2];var d4=arr[0x3];var d5=arr[0x4];var d6=arr[0x5];var after=[];if(x=='N')after=[d2,d6,d3,d4,d1,d5];if(x=='S')after=[d5,d1,d3,d4,d6,d2];if(x=='E')after=[d4,d2,d1,d6,d5,d3];if(x=='W')after=[d3,d2,d6,d1,d5,d4];if(x=='R')after=[d1,d3,d5,d2,d4,d6];if(x=='L')after=[d1,d4,d2,d5,d3,d6];return after;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var dice;var sum;for(var i=0x0;i<Arr['length'];i++){var v=Arr[i]['charAt'](0x0);if(v['match'](/[NSEWRL]/)){dice=move(v,dice);sum+=dice[0x0];}else{if(i!=0x0)console['log'](sum);dice=[0x1,0x2,0x3,0x4,0x5,0x6];sum=0x1;}if(Arr[i]=='0')break;}", "test_cases": [["5\nNorth\nNorth\nEast\nSouth\nWest\n8\nWest\nNorth\nLeft\nSouth\nRight\nNorth\nLeft\nEast\n0", "21\n34"]], "original": "function move(x,arr){\nvar d1=arr[0];\nvar d2=arr[1];\nvar d3=arr[2];\nvar d4=arr[3];\nvar d5=arr[4];\nvar d6=arr[5];\nvar after=[];\nif(x==\"N\")after=[d2,d6,d3,d4,d1,d5];\nif(x==\"S\")after=[d5,d1,d3,d4,d6,d2];\nif(x==\"E\")after=[d4,d2,d1,d6,d5,d3];\nif(x==\"W\")after=[d3,d2,d6,d1,d5,d4];\nif(x==\"R\")after=[d1,d3,d5,d2,d4,d6];\nif(x==\"L\")after=[d1,d4,d2,d5,d3,d6];\nreturn after;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dice;\nvar sum;\nfor(var i=0;i<Arr.length;i++){\n   var v=Arr[i].charAt(0);\n   if(v.match(/[NSEWRL]/)){\n      dice=move(v,dice);\n      sum+=dice[0];\n   }else{\n      if(i!=0)console.log(sum);\n      dice=[1,2,3,4,5,6];\n      sum=1;\n   }\n   if(Arr[i]==\"0\")break;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1027, "deobfuscated": "function move(x, arr) {\n  var d1 = arr[0];\n  var d2 = arr[1];\n  var d3 = arr[2];\n  var d4 = arr[3];\n  var d5 = arr[4];\n  var d6 = arr[5];\n  var after = [];\n  if (x == \"N\") {\n    after = [d2, d6, d3, d4, d1, d5];\n  }\n  if (x == \"S\") {\n    after = [d5, d1, d3, d4, d6, d2];\n  }\n  if (x == \"E\") {\n    after = [d4, d2, d1, d6, d5, d3];\n  }\n  if (x == \"W\") {\n    after = [d3, d2, d6, d1, d5, d4];\n  }\n  if (x == \"R\") {\n    after = [d1, d3, d5, d2, d4, d6];\n  }\n  if (x == \"L\") {\n    after = [d1, d4, d2, d5, d3, d6];\n  }\n  return after;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar dice;\nvar sum;\nfor (var i = 0; i < Arr.length; i++) {\n  var v = Arr[i].charAt(0);\n  if (v.match(/[NSEWRL]/)) {\n    dice = move(v, dice);\n    sum += dice[0];\n  } else {\n    if (i != 0) {\n      console.log(sum);\n    }\n    dice = [1, 2, 3, 4, 5, 6];\n    sum = 1;\n  }\n  if (Arr[i] == \"0\") {\n    break;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5206932720244951, "ngram_match_score": 0.043696090375954746, "weighted_ngram_match_score": 0.18907699772202569, "syntax_match_score": 0.85, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00484_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var nk=arr['shift']()['split']('\\x20')['map'](Number);var n=nk[0x0];var k=nk[0x1];var N=[];for(var i=0x0;i<n;i++)N['push'](arr['shift']()['split']('\\x20')['map'](Number));var dp=[];for(var i=0x0;i<=0xa;i++)dp[i]=[];var DP=[];for(var i=0x0;i<=0xa;i++)DP[i]=[];N['forEach'](function(v){var c=v[0x0];var g=v[0x1];dp[g]['push'](c);});dp['forEach'](function(v,i){v['sort'](function(a,b){return b-a;});v['forEach'](function(value,j){if(j==0x0)DP[i][j]=dp[i][j];if(j>0x0){dp[i][j]+=dp[i][j-0x1];DP[i][j]=dp[i][j]+(j+0x1)*j;}});});var dp=[];for(var i=0x0;i<=n;i++)dp[i]=0x0;var bomb=function(cnt,start,sum){dp[cnt]=Math['max'](dp[cnt],sum);if(sum==k)return;for(var i=start;i<DP['length'];i++){DP[i]['forEach'](function(v,index){bomb(cnt+(index+0x1),i+0x1,sum+v);});}};bomb(0x0,0x0,0x0);console['log'](dp[k]);", "test_cases": [["7 4\n14 1\n13 2\n12 3\n14 2\n8 2\n16 3\n11 2", "60"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar nk=arr.shift().split(\" \").map(Number);\nvar n=nk[0];\nvar k=nk[1];\nvar N=[];\nfor(var i=0;i<n;i++)N.push(arr.shift().split(\" \").map(Number));\n\nvar dp=[];\nfor(var i=0;i<=10;i++)dp[i]=[];\nvar DP=[];\nfor(var i=0;i<=10;i++)DP[i]=[];\n\nN.forEach(function(v){\n   var c=v[0];\n   var g=v[1];\n   dp[g].push(c);\n});\n\ndp.forEach(function(v,i){\n   v.sort(function(a,b){return b-a;});\n   v.forEach(function(value,j){\n      if(j==0)DP[i][j]=dp[i][j];\n      if(j>0){\n         dp[i][j]+=dp[i][j-1];\n         DP[i][j]=dp[i][j]+(j+1)*j;\n      }\n   });\n});\n\n\nvar dp=[];\nfor(var i=0;i<=n;i++)dp[i]=0;\n\nvar bomb=function(cnt,start,sum){\n   dp[cnt]=Math.max(dp[cnt],sum);\n   if(sum==k)return;\n   for(var i=start;i<DP.length;i++){\n      DP[i].forEach(function(v,index){\n         bomb(cnt+(index+1),i+1,sum+v);\n      });\n   }\n};\n\nbomb(0,0,0);\n\nconsole.log(dp[k]);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1028, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar nk = arr.shift().split(\" \").map(Number);\nvar n = nk[0];\nvar k = nk[1];\nvar N = [];\nfor (var i = 0; i < n; i++) {\n  N.push(arr.shift().split(\" \").map(Number));\n}\nvar dp = [];\nfor (var i = 0; i <= 10; i++) {\n  dp[i] = [];\n}\nvar DP = [];\nfor (var i = 0; i <= 10; i++) {\n  DP[i] = [];\n}\nN.forEach(function (v) {\n  var c = v[0];\n  var g = v[1];\n  dp[g].push(c);\n});\ndp.forEach(function (v, i) {\n  v.sort(function (a, b) {\n    return b - a;\n  });\n  v.forEach(function (value, j) {\n    if (j == 0) {\n      DP[i][j] = dp[i][j];\n    }\n    if (j > 0) {\n      dp[i][j] += dp[i][j - 1];\n      DP[i][j] = dp[i][j] + (j + 1) * j;\n    }\n  });\n});\nvar dp = [];\nfor (var i = 0; i <= n; i++) {\n  dp[i] = 0;\n}\nfunction bomb(cnt, start, sum) {\n  dp[cnt] = Math.max(dp[cnt], sum);\n  if (sum == k) {\n    return;\n  }\n  for (var i = start; i < DP.length; i++) {\n    DP[i].forEach(function (v, index) {\n      bomb(cnt + (index + 1), i + 1, sum + v);\n    });\n  }\n}\nbomb(0, 0, 0);\nconsole.log(dp[k]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4834841948812598, "ngram_match_score": 0.024175593504232703, "weighted_ngram_match_score": 0.09070684586554909, "syntax_match_score": 0.9036697247706422, "dataflow_match_score": 0.9153846153846154}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.009463722397476393, "new_decrease_halstead_effort": 0.015359771668919886}}
{"filename": "p00590_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result={};for(var i=0x0;i<=max;i++){if(arr[i]!==![])result[arr[i]]=!![];}return result;}var p=prime(0x2710);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){var a=Arr[i];var A=[];var B=[];for(var j=0x1;j<=a;j++)A['push'](j);for(var j=a;j>=0x1;j--)B['push'](j);var pair=0x0;for(var j=0x0;j<a;j++){if(p['hasOwnProperty'](A[j])&&p['hasOwnProperty'](B[j]))pair++;}console['log'](pair);}", "test_cases": [["1\n4\n7\n51", "0\n2\n2\n6"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(10000);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   var A=[];\n   var B=[];\n   for(var j=1;j<=a;j++)A.push(j);\n   for(var j=a;j>=1;j--)B.push(j);\n   var pair=0;\n   for(var j=0;j<a;j++){\n      if(p.hasOwnProperty(A[j]) && p.hasOwnProperty(B[j]))pair++;\n   }\n   console.log(pair);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1029, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = {};\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result[arr[i]] = true;\n    }\n  }\n  return result;\n}\nvar p = prime(10000);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  var a = Arr[i];\n  var A = [];\n  var B = [];\n  for (var j = 1; j <= a; j++) {\n    A.push(j);\n  }\n  for (var j = a; j >= 1; j--) {\n    B.push(j);\n  }\n  var pair = 0;\n  for (var j = 0; j < a; j++) {\n    if (p.hasOwnProperty(A[j]) && p.hasOwnProperty(B[j])) {\n      pair++;\n    }\n  }\n  console.log(pair);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5098575085624625, "ngram_match_score": 0.04130084742296868, "weighted_ngram_match_score": 0.14627733497502948, "syntax_match_score": 0.8518518518518519, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009668092912735515, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.052000000000000046, "new_decrease_halstead_effort": 0.11890430622009562}}
{"filename": "p00591_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var yx=[];for(var i=0x0;i<n;i++)yx['push'](arr['shift']()['split']('\\x20')['map'](Number));var xy=[];var hand=[];for(var i=0x0;i<n;i++){xy[i]=[];hand[i]=[];for(var j=0x0;j<n;j++){xy[i][j]=yx[j][i];hand[i][j]=[0x0,0x0];}}yx['forEach'](function(v,i){var min=v['reduce'](function(a,b){return Math['min'](a,b);});hand[i][v['indexOf'](min)][0x0]=0x1;});xy['forEach'](function(v,i){var max=v['reduce'](function(a,b){return Math['max'](a,b);});hand[v['indexOf'](max)][i][0x1]=0x1;});var ans=(function(){for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){if(hand[i][j][0x0]==0x1&&hand[i][j][0x1]==0x1)return yx[i][j];}}return 0x0;}());console['log'](ans);}", "test_cases": [["3\n1 2 3\n4 5 6\n7 8 9\n3\n1 2 3\n7 8 9\n4 5 6\n0", "7\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++)yx.push(arr.shift().split(\" \").map(Number));\n   var xy=[];\n   var hand=[];\n   for(var i=0;i<n;i++){\n      xy[i]=[];\n      hand[i]=[];\n      for(var j=0;j<n;j++){\n         xy[i][j]=yx[j][i];\n         hand[i][j]=[0,0];\n      }\n   }\n   yx.forEach(function(v,i){\n      var min=v.reduce(function(a,b){return Math.min(a,b);});\n      hand[i][v.indexOf(min)][0]=1;\n   });\n   xy.forEach(function(v,i){\n      var max=v.reduce(function(a,b){return Math.max(a,b);});\n      hand[v.indexOf(max)][i][1]=1;\n   });\n   var ans=(function(){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            if(hand[i][j][0]==1 && hand[i][j][1]==1)return yx[i][j];\n         }\n      }\n      return 0;\n   })();\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1030, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < n; i++) {\n    yx.push(arr.shift().split(\" \").map(Number));\n  }\n  var xy = [];\n  var hand = [];\n  for (var i = 0; i < n; i++) {\n    xy[i] = [];\n    hand[i] = [];\n    for (var j = 0; j < n; j++) {\n      xy[i][j] = yx[j][i];\n      hand[i][j] = [0, 0];\n    }\n  }\n  yx.forEach(function (v, i) {\n    var min = v.reduce(function (a, b) {\n      return Math.min(a, b);\n    });\n    hand[i][v.indexOf(min)][0] = 1;\n  });\n  xy.forEach(function (v, i) {\n    var max = v.reduce(function (a, b) {\n      return Math.max(a, b);\n    });\n    hand[v.indexOf(max)][i][1] = 1;\n  });\n  var ans = function () {\n    for (var i = 0; i < n; i++) {\n      for (var j = 0; j < n; j++) {\n        if (hand[i][j][0] == 1 && hand[i][j][1] == 1) {\n          return yx[i][j];\n        }\n      }\n    }\n    return 0;\n  }();\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5135596445913228, "ngram_match_score": 0.032562968517514064, "weighted_ngram_match_score": 0.10588613616356635, "syntax_match_score": 0.9157894736842105, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011029411764705843, "new_decrease_halstead_effort": 0.05288373229248877}}
{"filename": "p00593_1", "type": "JavaScript", "obfuscated": "function bomb(y,x,cnt,f){yx[y][x]=('\\x20\\x20\\x20'+cnt)['slice'](-0x3);if(y==n-0x1&&x==n-0x1)return;else if(y==n-0x1&&f==-0x1)bomb(y,x+0x1,cnt+0x1,0x1);else if(y==n-0x1&&f==0x1)bomb(y-0x1,x+0x1,cnt+0x1,0x1);else if(x==n-0x1&&f==0x1)bomb(y+0x1,x,cnt+0x1,-0x1);else if(x==n-0x1&&f==-0x1)bomb(y+0x1,x-0x1,cnt+0x1,-0x1);else if(y==0x0&&f==0x1)bomb(y,x+0x1,cnt+0x1,-0x1);else if(y==0x0&&f==-0x1)bomb(y+0x1,x-0x1,cnt+0x1,-0x1);else if(x==0x0&&f==-0x1)bomb(y+0x1,x,cnt+0x1,0x1);else if(x==0x0&&f==0x1)bomb(y-0x1,x+0x1,cnt+0x1,0x1);else if(f==0x1)bomb(y-0x1,x+0x1,cnt+0x1,0x1);else if(f==-0x1)bomb(y+0x1,x-0x1,cnt+0x1,-0x1);}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var I=0x1;while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var yx=[];for(var i=0x0;i<n;i++){yx[i]=[];for(var j=0x0;j<n;j++){yx[i][j]=0x0;}}bomb(0x0,0x0,0x1,0x1);console['log']('Case\\x20'+I+':');I++;console['log'](yx['join']('\\x0a')['replace'](/\\,/g,''));}", "test_cases": [["3\n4\n0", "Case 1:\n  1  2  6\n  3  5  7\n  4  8  9\nCase 2:\n  1  2  6  7\n  3  5  8 13\n  4  9 12 14\n 10 11 15 16"]], "original": "function bomb(y,x,cnt,f){\n   yx[y][x]=(\"   \"+cnt).slice(-3);\n   if(y==n-1 && x==n-1)return;\n   else if(y==n-1 && f==-1)bomb(y,x+1,cnt+1,1);\n   else if(y==n-1 && f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(x==n-1 && f==1)bomb(y+1,x,cnt+1,-1);\n   else if(x==n-1 && f==-1)bomb(y+1,x-1,cnt+1,-1);\n   else if(y==0 && f==1)bomb(y,x+1,cnt+1,-1);\n   else if(y==0 && f==-1)bomb(y+1,x-1,cnt+1,-1);\n   else if(x==0 && f==-1)bomb(y+1,x,cnt+1,1);\n   else if(x==0 && f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(f==-1)bomb(y+1,x-1,cnt+1,-1);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=1;\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      yx[i]=[];\n      for(var j=0;j<n;j++){\n         yx[i][j]=0;\n      }\n   }\n   bomb(0,0,1,1);\n   console.log(\"Case \"+I+\":\");\n   I++;\n   console.log(yx.join(\"\\n\").replace(/\\,/g,\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1031, "deobfuscated": "function bomb(y, x, cnt, f) {\n  yx[y][x] = (\"   \" + cnt).slice(-3);\n  if (y == n - 1 && x == n - 1) {\n    return;\n  } else if (y == n - 1 && f == -1) {\n    bomb(y, x + 1, cnt + 1, 1);\n  } else if (y == n - 1 && f == 1) {\n    bomb(y - 1, x + 1, cnt + 1, 1);\n  } else if (x == n - 1 && f == 1) {\n    bomb(y + 1, x, cnt + 1, -1);\n  } else if (x == n - 1 && f == -1) {\n    bomb(y + 1, x - 1, cnt + 1, -1);\n  } else if (y == 0 && f == 1) {\n    bomb(y, x + 1, cnt + 1, -1);\n  } else if (y == 0 && f == -1) {\n    bomb(y + 1, x - 1, cnt + 1, -1);\n  } else if (x == 0 && f == -1) {\n    bomb(y + 1, x, cnt + 1, 1);\n  } else if (x == 0 && f == 1) {\n    bomb(y - 1, x + 1, cnt + 1, 1);\n  } else if (f == 1) {\n    bomb(y - 1, x + 1, cnt + 1, 1);\n  } else if (f == -1) {\n    bomb(y + 1, x - 1, cnt + 1, -1);\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar I = 1;\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < n; i++) {\n    yx[i] = [];\n    for (var j = 0; j < n; j++) {\n      yx[i][j] = 0;\n    }\n  }\n  bomb(0, 0, 1, 1);\n  console.log(\"Case \" + I + \":\");\n  I++;\n  console.log(yx.join(\"\\n\").replace(/\\,/g, \"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48504676821698867, "ngram_match_score": 0.013281442093680169, "weighted_ngram_match_score": 0.06307584354023203, "syntax_match_score": 0.8638297872340426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.00835654596100277, "new_decrease_halstead_effort": 0.08410708758898178}}
{"filename": "p00629_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n===0x0)break;var ary=[];for(var i=0x0;i<n;i++)ary['push'](arr['shift']()['split']('\\x20')['map'](Number));ary['sort'](function(a,b){if(a[0x2]==b[0x2]&&a[0x3]==b[0x3])return a[0x0]-b[0x0];else if(a[0x2]==b[0x2])return a[0x3]-b[0x3];else return b[0x2]-a[0x2];});var ans=[];var U=[];for(var i=0x0;i<=0x3e8;i++)U[i]=0x0;ary['forEach'](function(v,i){var id=v[0x0];var u=v[0x1];if(i<0xa){if(U[u]<0x3){ans['push'](id);U[u]++;}}else if(i<0x14){if(U[u]<0x2){ans['push'](id);U[u]++;}}else if(i<0x1a){if(U[u]==0x0){ans['push'](id);U[u]++;}}});console['log'](ans['join']('\\x0a'));}", "test_cases": [["6\n1 1 6 200\n2 1 6 300\n3 1 6 400\n4 2 5 1200\n5 1 5 1400\n6 3 4 800\n3\n777 1 5 300\n808 2 4 20\n123 3 6 500\n2\n2 1 3 100\n1 1 3 100\n0", "1\n2\n3\n4\n6\n123\n777\n808\n1\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n===0)break;\n   var ary=[];\n   for(var i=0;i<n;i++)ary.push(arr.shift().split(\" \").map(Number));\n   ary.sort(function(a,b){\n      if(a[2]==b[2] && a[3]==b[3])return a[0]-b[0];\n      else if(a[2]==b[2])return a[3]-b[3];\n      else return b[2]-a[2];\n   });\n   var ans=[];\n   var U=[];\n   for(var i=0;i<=1000;i++)U[i]=0;\n   ary.forEach(function(v,i){\n      var id=v[0];\n      var u=v[1];\n      if(i<10){\n         if(U[u]<3){ans.push(id);U[u]++;}\n      }else if(i<20){\n         if(U[u]<2){ans.push(id);U[u]++;}\n      }else if(i<26){\n         if(U[u]==0){ans.push(id);U[u]++;}\n      }\n   });\n   console.log(ans.join(\"\\n\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1032, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n === 0) {\n    break;\n  }\n  var ary = [];\n  for (var i = 0; i < n; i++) {\n    ary.push(arr.shift().split(\" \").map(Number));\n  }\n  ary.sort(function (a, b) {\n    if (a[2] == b[2] && a[3] == b[3]) {\n      return a[0] - b[0];\n    } else if (a[2] == b[2]) {\n      return a[3] - b[3];\n    } else {\n      return b[2] - a[2];\n    }\n  });\n  var ans = [];\n  var U = [];\n  for (var i = 0; i <= 1000; i++) {\n    U[i] = 0;\n  }\n  ary.forEach(function (v, i) {\n    var id = v[0];\n    var u = v[1];\n    if (i < 10) {\n      if (U[u] < 3) {\n        ans.push(id);\n        U[u]++;\n      }\n    } else if (i < 20) {\n      if (U[u] < 2) {\n        ans.push(id);\n        U[u]++;\n      }\n    } else if (i < 26) {\n      if (U[u] == 0) {\n        ans.push(id);\n        U[u]++;\n      }\n    }\n  });\n  console.log(ans.join(\"\\n\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.510876648488307, "ngram_match_score": 0.027482558659162985, "weighted_ngram_match_score": 0.10076979800592972, "syntax_match_score": 0.9152542372881356, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012345679012345734, "new_decrease_halstead_effort": 0.08518518518518514}}
{"filename": "p00648_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var N=arr['shift']()-0x0;if(N==0x0)break;var obj={};var ary=[];for(var i=0x0;i<N;i++){var nws=arr['shift']()['split']('\\x20');var name=nws[0x0];var w=nws[0x1]-0x0;var s=nws[0x2]['split']('')['map'](Number);s=s['length']==0x3?s[0x0]*0x3c+s[0x1]*0xa+s[0x2]:s[0x0]*0x258+s[0x1]*0x3c+0xa*s[0x2]+s[0x3];obj[name]=w*0x5a0+s;ary['push'](w*0x5a0+s);}var P=arr['shift']()-0x0;for(var i=0x0;i<P;i++){var f=arr['shift']();ary['push'](obj[f]-29.5);}ary['sort'](function(a,b){return a-b;});var cnt=0x0;var i=0x0;var p=0x0;ary['forEach'](function(v){if(v%0x1==0.5){cnt++;p++;i=v+29.5+0x1e;}else if(i<=v){cnt++;i=v+0x1e;}});if(p!=P)cnt=-0x1;console['log'](cnt);}", "test_cases": [["1\ngalaxy_angel 0 600\n1\ngalaxy_angel\n11\nA 0 600\nB 0 610\nC 0 610\nD 0 610\nE 0 640\nEE 0 700\nF 0 710\nG 0 710\nH 0 710\nI 0 740\nJ 0 750\n2\nB\nH\n42\nnchj 6 2620\nanhnnnmewbktthsrn 4 2515\ngntmdsh 1 1800\nachnnl 4 2540\nhnskirh 0 2200\naonexrcst 0 1700\ndgdys 6 2330\nhdnnara 4 2525\ndnpaonntssotk 4 2555\nddmnwndrlnd 6 2500\nC 4 2445\nastrttnomch 0 2330\nseknnqasr 1 2630\nsftnt 4 2630\nstnsgt 2 2605\ndrrnenmknmrmr 4 2610\nhnzm 6 2713\nyndmsoazzlsn 6 2658\nmrahlcalv 4 2615\nhshzrhkkrhs 1 900\nortchntsbshni 0 2430\nkmnmzshrski 1 2530\nsktdnc 4 1800\ngykkybrkjhkirkhn 2 2459\ntrk 0 900\n30zzsinhkntiik 3 2700\nsngkotmmmirprdx 1 2600\nyran 2 2529\ntntissygntinybu 1 2614\nskiichhtki 5 2505\ntgrbnny 6 2558\ndnbrsnki 3 1927\nyugozxl 1 1930\nfrbllchrmn 1 1928\nfjrg 1 1955\nshwmngtr 0 2200\nxmn 5 2200\nrngnkkrskitikihn 0 2100\nszysz 0 1254\nprttyrythmaulrdrm 6 1000\nsckiesfrntrqst 5 1820\nmshdr 1 2255\n1\nmrahlcalv\n0", "1\n4\n31"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var N=arr.shift()-0;\n   if(N==0)break;\n   var obj={};\n   var ary=[];\n   for(var i=0;i<N;i++){\n      var nws=(arr.shift()).split(\" \");\n      var name=nws[0];\n      var w=nws[1]-0;\n      var s=nws[2].split(\"\").map(Number);\n      s=(s.length==3)?s[0]*60+s[1]*10+s[2]:s[0]*600+s[1]*60+10*s[2]+s[3];\n      obj[name]=(w*1440)+s;\n      ary.push((w*1440)+s);\n   }\n   var P=arr.shift()-0;\n   for(var i=0;i<P;i++){\n      var f=arr.shift();\n      ary.push(obj[f]-29.5);\n   }\n   ary.sort(function(a,b){return a-b;});\n   var cnt=0;\n   var i=0;\n   var p=0;\n   ary.forEach(function(v){\n      if(v%1==0.5){cnt++;p++;i=v+29.5+30;}\n      else if(i<=v){cnt++;i=v+30;}\n   });\n   if(p!=P)cnt=-1;\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1033, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  var obj = {};\n  var ary = [];\n  for (var i = 0; i < N; i++) {\n    var nws = arr.shift().split(\" \");\n    var name = nws[0];\n    var w = nws[1] - 0;\n    var s = nws[2].split(\"\").map(Number);\n    s = s.length == 3 ? s[0] * 60 + s[1] * 10 + s[2] : s[0] * 600 + s[1] * 60 + s[2] * 10 + s[3];\n    obj[name] = w * 1440 + s;\n    ary.push(w * 1440 + s);\n  }\n  var P = arr.shift() - 0;\n  for (var i = 0; i < P; i++) {\n    var f = arr.shift();\n    ary.push(obj[f] - 29.5);\n  }\n  ary.sort(function (a, b) {\n    return a - b;\n  });\n  var cnt = 0;\n  var i = 0;\n  var p = 0;\n  ary.forEach(function (v) {\n    if (v % 1 == 0.5) {\n      cnt++;\n      p++;\n      i = v + 29.5 + 30;\n    } else if (i <= v) {\n      cnt++;\n      i = v + 30;\n    }\n  });\n  if (p != P) {\n    cnt = -1;\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4778462806597769, "ngram_match_score": 0.009566455405585431, "weighted_ngram_match_score": 0.040116539573947806, "syntax_match_score": 0.8617021276595744, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011111111111111072, "new_decrease_halstead_effort": 0.0700408163265307}}
{"filename": "p00682_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){var input=chunk['trim']()['split']('\\x0a');var order=0x1;while(!![]){var n=input['shift']();if(n==0x0)break;var coordinate=[];while(n--)coordinate['push'](input['shift']()['split']('\\x20')['map'](Number));coordinate['push'](coordinate[0x0]);var area=0x0;for(var i=0x0;i<coordinate['length']-0x1;i++){area+=coordinate[i][0x0]*coordinate[i+0x1][0x1]-coordinate[i][0x1]*coordinate[i+0x1][0x0];}console['log'](order+'\\x20'+Math['abs'](area/0x2)['toFixed'](0x1));input['shift']();order++;}});", "test_cases": [["3\n1 1\n3 4\n6 0\n\n7\n0 0\n10 10\n0 20\n10 30\n0 40\n100 40\n100 0\n\n0", "1 8.5\n2 3800.0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n    var input = chunk.trim().split(\"\\n\");\n    var order = 1;\n    while (true) {\n        var n = input.shift();\n        if (n == 0)\n            break;\n        var coordinate = [];\n        while (n--)\n            coordinate.push(input.shift().split(\" \").map(Number));\n        coordinate.push(coordinate[0]);\n        var area = 0;\n        for (var i = 0; i < coordinate.length - 1; i++) {\n            area += (coordinate[i][0] * coordinate[i + 1][1]) - (coordinate[i][1] * coordinate[i + 1][0]);\n        }\n        console.log(order + \" \" + Math.abs(area / 2).toFixed(1));\n        input.shift();\n        order++;\n    }\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1034, "deobfuscated": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  var input = chunk.trim().split(\"\\n\");\n  var order = 1;\n  while (true) {\n    var n = input.shift();\n    if (n == 0) {\n      break;\n    }\n    var coordinate = [];\n    while (n--) {\n      coordinate.push(input.shift().split(\" \").map(Number));\n    }\n    coordinate.push(coordinate[0]);\n    var area = 0;\n    for (var i = 0; i < coordinate.length - 1; i++) {\n      area += coordinate[i][0] * coordinate[i + 1][1] - coordinate[i][1] * coordinate[i + 1][0];\n    }\n    console.log(order + \" \" + Math.abs(area / 2).toFixed(1));\n    input.shift();\n    order++;\n  }\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8565685599854116, "ngram_match_score": 0.7636824169483494, "weighted_ngram_match_score": 0.8078909682924423, "syntax_match_score": 0.8547008547008547, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0043392314893426764, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01898734177215189, "new_decrease_halstead_effort": 0.09627924817798228}}
{"filename": "p00687_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var nab=arr['shift']();if(nab=='0\\x200\\x200')break;nab=nab['split']('\\x20')['map'](Number);var n=nab[0x0];var ab=[nab[0x1],nab[0x2]];var dp=[];for(var i=0x0;i<=n;i++)dp[i]=![];dp[0x0]=!![];for(var i=0x0;i<ab['length'];i++){for(var j=0x0;j<=n;j++){if(dp[j])dp[j+ab[i]]=!![];}}var cnt=0x0;dp['forEach'](function(v){if(v==![])cnt++;});console['log'](cnt);}", "test_cases": [["10 2 3\n10 2 5\n100 5 25\n0 0 0", "1\n2\n80"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\nvar nab=arr.shift();\n   if(nab==\"0 0 0\")break;\n   nab=nab.split(\" \").map(Number);\n   var n=nab[0];\n   var ab=[nab[1],nab[2]];\n   var dp=[];\n   for(var i=0;i<=n;i++)dp[i]=false;\n   dp[0]=true;\n   for(var i=0;i<ab.length;i++){\n      for(var j=0;j<=n;j++){\n         if(dp[j])dp[j+ab[i]]=true;\n      }\n   }\n   var cnt=0;\n   dp.forEach(function(v){\n      if(v==false)cnt++;\n   });\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1035, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nab = arr.shift();\n  if (nab == \"0 0 0\") {\n    break;\n  }\n  nab = nab.split(\" \").map(Number);\n  var n = nab[0];\n  var ab = [nab[1], nab[2]];\n  var dp = [];\n  for (var i = 0; i <= n; i++) {\n    dp[i] = false;\n  }\n  dp[0] = true;\n  for (var i = 0; i < ab.length; i++) {\n    for (var j = 0; j <= n; j++) {\n      if (dp[j]) {\n        dp[j + ab[i]] = true;\n      }\n    }\n  }\n  var cnt = 0;\n  dp.forEach(function (v) {\n    if (v == false) {\n      cnt++;\n    }\n  });\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48647638950907995, "ngram_match_score": 0.022822160170920272, "weighted_ngram_match_score": 0.07402679409181458, "syntax_match_score": 0.8490566037735849, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.02160388939424207, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.08176100628930816, "new_decrease_halstead_effort": 0.18690160253826416}}
{"filename": "p00693_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['replace'](/\\?/g,'.');var arr=input['trim']()['split']('\\x0a');while(!![]){var nm=arr['shift']()['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];if(n==0x0&&m==0x0)break;var rule=[];while(n--){var ary=arr['shift']()['split']('\\x20');var flag=ary[0x0]=='permit'?!![]:![];rule['push']([flag,new RegExp(ary[0x1]+ary[0x2])]);}var ans=[];while(m--){var packet=arr['shift']()['split']('\\x20');var str=packet[0x0]+packet[0x1];var flag=![];rule['forEach'](function(v){if(v[0x0]==!![]&&v[0x1]['test'](str))flag=!![];else if(v[0x0]==![]&&v[0x1]['test'](str))flag=![];});if(flag)ans['push'](packet['join']('\\x20'));}console['log'](ans['length']);ans['forEach'](function(v){console['log'](v);});}", "test_cases": [["2 5\npermit 192168?? ?12??34?\ndeny 19216899 012343?5\n19216711 11233340 HiIamACracker\n19216891 01234345 Hello\n19216899 01234345 HiIamAlsoACracker\n19216809 11200340 World\n00000000 99999999 TheEndOfTheWorld\n1 2\npermit 12345678 23456789\n19216891 01234345 Hello\n12345678 23456789 Hello\n0 0", "2\n19216891 01234345 Hello\n19216809 11200340 World\n1\n12345678 23456789 Hello"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.replace(/\\?/g,\".\");\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nm=arr.shift().split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   if(n==0 && m==0)break;\n   var rule=[];\n   while(n--){\n      var ary=arr.shift().split(\" \");\n      var flag=(ary[0]==\"permit\")?true:false;\n      rule.push([flag,new RegExp(ary[1]+ary[2])]);\n   }\n   var ans=[];\n   while(m--){\n      var packet=arr.shift().split(\" \");\n      var str=packet[0]+packet[1];\n      var flag=false;\n      rule.forEach(function(v){\n         if(v[0]==true && v[1].test(str))flag=true;\n         else if(v[0]==false && v[1].test(str))flag=false;  \n      });\n      if(flag)ans.push(packet.join(\" \"));\n   }\n   console.log(ans.length);\n   ans.forEach(function(v){console.log(v);});\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1036, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.replace(/\\?/g, \".\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = arr.shift().split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  if (n == 0 && m == 0) {\n    break;\n  }\n  var rule = [];\n  while (n--) {\n    var ary = arr.shift().split(\" \");\n    var flag = ary[0] == \"permit\" ? true : false;\n    rule.push([flag, new RegExp(ary[1] + ary[2])]);\n  }\n  var ans = [];\n  while (m--) {\n    var packet = arr.shift().split(\" \");\n    var str = packet[0] + packet[1];\n    var flag = false;\n    rule.forEach(function (v) {\n      if (v[0] == true && v[1].test(str)) {\n        flag = true;\n      } else if (v[0] == false && v[1].test(str)) {\n        flag = false;\n      }\n    });\n    if (flag) {\n      ans.push(packet.join(\" \"));\n    }\n  }\n  console.log(ans.length);\n  ans.forEach(function (v) {\n    console.log(v);\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48369395409897054, "ngram_match_score": 0.016647915229912144, "weighted_ngram_match_score": 0.04463392526235546, "syntax_match_score": 0.8734939759036144, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.017139737730816007, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.08368200836820083, "new_decrease_halstead_effort": 0.1751173917165183}}
{"filename": "p00700_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;while(n--){var xy=[0x0,0x0];var max=[0x0,0x0,0x0];while(!![]){var str=arr['shift']();if(str=='0\\x200')break;var ary=str['split']('\\x20')['map'](Number);xy[0x0]+=ary[0x0];xy[0x1]+=ary[0x1];var d=Math['sqrt'](xy[0x0]*xy[0x0]+xy[0x1]*xy[0x1]);if(max[0x0]<d)max=[d,xy[0x0],xy[0x1]];else if(max[0x0]==d&&max[0x1]<xy[0x0])max=[d,xy[0x0],xy[0x1]];}max['shift']();console['log'](max['join']('\\x20'));}", "test_cases": [["3\n1 0\n0 1\n-1 0\n1 0\n0 5\n-1 0\n0 -1\n5 0\n0 1\n0 -1\n1 0\n0 -4\n-3 0\n0 3\n2 0\n0 -2\n-1 0\n0 1\n0 -1\n1 0\n0 2\n-2 0\n0 -3\n3 0\n0 4\n-4 0\n0 -5\n-2 0\n0 0\n1 0\n-1 0\n0 0\n2 0\n0 1\n-1 0\n0 1\n-1 0\n0 -2\n0 0", "6 5\n1 0\n2 1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var xy=[0,0];\n   var max=[0,0,0];\n   while(true){\n      var str=arr.shift();\n      if(str==\"0 0\")break;\n      var ary=str.split(\" \").map(Number);\n      xy[0]+=ary[0];\n      xy[1]+=ary[1];\n      var d=Math.sqrt(xy[0]*xy[0]+xy[1]*xy[1]);\n      if(max[0]<d)max=[d,xy[0],xy[1]];\n      else if(max[0]==d && max[1]<xy[0])max=[d,xy[0],xy[1]];\n      }\n   max.shift();\n   console.log(max.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1037, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nwhile (n--) {\n  var xy = [0, 0];\n  var max = [0, 0, 0];\n  while (true) {\n    var str = arr.shift();\n    if (str == \"0 0\") {\n      break;\n    }\n    var ary = str.split(\" \").map(Number);\n    xy[0] += ary[0];\n    xy[1] += ary[1];\n    var d = Math.sqrt(xy[0] * xy[0] + xy[1] * xy[1]);\n    if (max[0] < d) {\n      max = [d, xy[0], xy[1]];\n    } else if (max[0] == d && max[1] < xy[0]) {\n      max = [d, xy[0], xy[1]];\n    }\n  }\n  max.shift();\n  console.log(max.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5377832869394984, "ngram_match_score": 0.05677469751672581, "weighted_ngram_match_score": 0.1740044679403827, "syntax_match_score": 0.9203539823008849, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00430270113402309, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01764705882352946, "new_decrease_halstead_effort": 0.10314814814814821}}
{"filename": "p00705_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var v=Arr['shift']();if(v=='0\\x200')break;var NQ=v['split']('\\x20')['map'](Number);var arr=[];for(var i=0x0;i<0x32;i++)arr[i]=0x0;for(var i=0x0;i<NQ[0x0];i++){var day=Arr['shift']()['split']('\\x20')['map'](Number);var L=day['shift']();for(var j=0x0;j<L;j++){arr[day[j]]++;}}var result=0x0;var max=Math['max']['apply'](null,arr);if(max>=NQ[0x1])NQ[0x1]=max;for(var i=0x0;i<arr['length'];i++){if(arr[i]>=NQ[0x1]){result=i;break;}}console['log'](result);}", "test_cases": [["3 2\n2 1 4\n0\n3 3 4 8\n3 2\n4 1 5 8 9\n3 2 5 9\n5 2 4 5 7 9\n3 3\n2 1 4\n3 2 5 9\n2 2 4\n3 3\n2 1 2\n3 1 2 9\n2 2 4\n0 0", "4\n5\n0\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var v=Arr.shift();\n   if(v==\"0 0\")break;\n   var NQ=v.split(\" \").map(Number);\n   var arr=[];\n   for(var i=0;i<50;i++)arr[i]=0;\n   for(var i=0;i<NQ[0];i++){\n      var day=(Arr.shift()).split(\" \").map(Number);\n      var L=day.shift();\n      for(var j=0;j<L;j++){\n         arr[day[j]]++;\n      }\n   }\n   var result=0;\n   var max=Math.max.apply(null,arr);\n   if(max>=NQ[1])NQ[1]=max;\n   for(var i=0;i<arr.length;i++){\n      if(arr[i]>=NQ[1]){\n         result=i;\n         break;\n      }\n   }\n   console.log(result);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1038, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var v = Arr.shift();\n  if (v == \"0 0\") {\n    break;\n  }\n  var NQ = v.split(\" \").map(Number);\n  var arr = [];\n  for (var i = 0; i < 50; i++) {\n    arr[i] = 0;\n  }\n  for (var i = 0; i < NQ[0]; i++) {\n    var day = Arr.shift().split(\" \").map(Number);\n    var L = day.shift();\n    for (var j = 0; j < L; j++) {\n      arr[day[j]]++;\n    }\n  }\n  var result = 0;\n  var max = Math.max.apply(null, arr);\n  if (max >= NQ[1]) {\n    NQ[1] = max;\n  }\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] >= NQ[1]) {\n      result = i;\n      break;\n    }\n  }\n  console.log(result);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5290371174307033, "ngram_match_score": 0.06776759950369712, "weighted_ngram_match_score": 0.20463087021911583, "syntax_match_score": 0.84375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.003971360274457991, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017045454545454586, "new_decrease_halstead_effort": 0.09209230787129308}}
{"filename": "p00718_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr['shift']()-0x0;for(var I=0x0;I<n;I++){var arr=Arr['shift']()['split']('\\x20');var sum=0x0;arr['forEach'](function(v){v=v['replace'](/(\\d?)([mcxi])/g,function(s,s1,s2){s1=s1?s1-0x0:0x1;if(s2=='m')s2=0x3e8;if(s2=='c')s2=0x64;if(s2=='x')s2=0xa;if(s2=='i')s2=0x1;sum+=s1*s2;return s;});});var str=('000'+sum)['slice'](-0x4);var S=str['split']('')['map'](Number);var result='';S['forEach'](function(v,i){if(v==0x1)v='';if(v!==0x0){if(i==0x0)result+=v+'m';if(i==0x1)result+=v+'c';if(i==0x2)result+=v+'x';if(i==0x3)result+=v+'i';}});console['log'](result);}", "test_cases": [["10\nxi x9i\ni 9i\nc2x2i 4c8x8i\nm2ci 4m7c9x8i\n9c9x9i i\ni 9m9c9x8i\nm i\ni m\nm9i i\n9m8c7xi c2x8i", "3x\nx\n6cx\n5m9c9x9i\nm\n9m9c9x9i\nmi\nmi\nmx\n9m9c9x9i"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=(Arr.shift()).split(\" \");\n   var sum=0;\n   arr.forEach(function(v){\n      v=v.replace(/(\\d?)([mcxi])/g,function(s,s1,s2){\n         s1=(s1)?s1-0:1;\n         if(s2==\"m\")s2=1000;\n         if(s2==\"c\")s2=100;\n         if(s2==\"x\")s2=10;\n         if(s2==\"i\")s2=1;\n         sum+=(s1*s2);\n         return s;\n      });\n   });\n   var str=(\"000\"+sum).slice(-4);\n   var S=str.split(\"\").map(Number);\n   var result=\"\";\n   S.forEach(function(v,i){\n      if(v==1)v=\"\";\n      if(v!==0){\n         if(i==0)result+=v+\"m\";\n         if(i==1)result+=v+\"c\";\n         if(i==2)result+=v+\"x\";\n         if(i==3)result+=v+\"i\";\n      }\n   });\n   console.log(result);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1039, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr.shift() - 0;\nfor (var I = 0; I < n; I++) {\n  var arr = Arr.shift().split(\" \");\n  var sum = 0;\n  arr.forEach(function (v) {\n    v = v.replace(/(\\d?)([mcxi])/g, function (s, s1, s2) {\n      s1 = s1 ? s1 - 0 : 1;\n      if (s2 == \"m\") {\n        s2 = 1000;\n      }\n      if (s2 == \"c\") {\n        s2 = 100;\n      }\n      if (s2 == \"x\") {\n        s2 = 10;\n      }\n      if (s2 == \"i\") {\n        s2 = 1;\n      }\n      sum += s1 * s2;\n      return s;\n    });\n  });\n  var str = (\"000\" + sum).slice(-4);\n  var S = str.split(\"\").map(Number);\n  var result = \"\";\n  S.forEach(function (v, i) {\n    if (v == 1) {\n      v = \"\";\n    }\n    if (v !== 0) {\n      if (i == 0) {\n        result += v + \"m\";\n      }\n      if (i == 1) {\n        result += v + \"c\";\n      }\n      if (i == 2) {\n        result += v + \"x\";\n      }\n      if (i == 3) {\n        result += v + \"i\";\n      }\n    }\n  });\n  console.log(result);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48949697685809457, "ngram_match_score": 0.04308407613257881, "weighted_ngram_match_score": 0.1980363614202814, "syntax_match_score": 0.7168674698795181, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00722_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result={};for(var i=0x0;i<=max;i++){if(arr[i]!==![])result[arr[i]]=!![];}return result;}var p=prime(0xf423f);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var v=Arr['shift']();if(v=='0\\x200\\x200')break;var adn=v['split']('\\x20')['map'](Number);var cnt=0x0;var sum=adn[0x0]-adn[0x1];while(cnt!=adn[0x2]){sum+=adn[0x1];if(p['hasOwnProperty'](sum))cnt++;}console['log'](sum);}", "test_cases": [["367 186 151\n179 10 203\n271 37 39\n103 230 1\n27 104 185\n253 50 85\n1 1 1\n9075 337 210\n307 24 79\n331 221 177\n259 170 40\n269 58 102\n0 0 0", "92809\n6709\n12037\n103\n93523\n14503\n2\n899429\n5107\n412717\n22699\n25673"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var v=Arr.shift();\n   if(v==\"0 0 0\")break;\n   var adn=v.split(\" \").map(Number);\n   var cnt=0;\n   var sum=adn[0]-adn[1];\n   while(cnt!=adn[2]){\n      sum+=adn[1];\n      if(p.hasOwnProperty(sum))cnt++;\n   }\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1040, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = {};\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result[arr[i]] = true;\n    }\n  }\n  return result;\n}\nvar p = prime(999999);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var v = Arr.shift();\n  if (v == \"0 0 0\") {\n    break;\n  }\n  var adn = v.split(\" \").map(Number);\n  var cnt = 0;\n  var sum = adn[0] - adn[1];\n  while (cnt != adn[2]) {\n    sum += adn[1];\n    if (p.hasOwnProperty(sum)) {\n      cnt++;\n    }\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5152901811659444, "ngram_match_score": 0.04919694346379852, "weighted_ngram_match_score": 0.1577971145333123, "syntax_match_score": 0.8541666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009668092912735515, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07339449541284404, "new_decrease_halstead_effort": 0.13819208314621167}}
{"filename": "p00735_1", "type": "JavaScript", "obfuscated": "var ms=[];var flag=[];for(var i=0x0;i<0x493e0;i++)flag[i]=!![];var i=0x1;while(!![]){var m=0x7*i-0x1;var s=0x7*i+0x1;if(m>0x493e0)break;i++;if(flag[m])ms['push'](m);if(flag[s])ms['push'](s);var j=0x2;while(!![]){if(m*j>0x493e0)break;flag[m*j]=![];flag[s*j]=![];j++;}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x1)break;var ans=[];var i=0x0;ms['some'](function(v){if(n%v==0x0)ans['push'](v);return n<v;});console['log'](n+':\\x20'+ans['join']('\\x20'));}", "test_cases": [["205920\n262144\n262200\n279936\n299998\n1", "205920: 6 8 13 15 20 22 55 99\n262144: 8\n262200: 6 8 15 20 50 57 69 76 92 190 230 475 575 874 2185\n279936: 6 8 27\n299998: 299998"]], "original": "var ms=[];\nvar flag=[];\nfor(var i=0;i<300000;i++)flag[i]=true;\nvar i=1;\nwhile(true){\n   var m=(7*i)-1;\n   var s=(7*i)+1;\n   if(m>300000)break;\n   i++;\n   if(flag[m])ms.push(m);\n   if(flag[s])ms.push(s);\n   var j=2;\n   while(true){\n      if(m*j>300000)break;\n      flag[m*j]=false;\n      flag[s*j]=false;\n      j++;\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==1)break;\n   var ans=[];\n   var i=0;\n   ms.some(function(v){\n      if(n%v==0)ans.push(v);\n      return (n<v);\n   });\n   console.log(n+\": \"+ans.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1041, "deobfuscated": "var ms = [];\nvar flag = [];\nfor (var i = 0; i < 300000; i++) {\n  flag[i] = true;\n}\nvar i = 1;\nwhile (true) {\n  var m = i * 7 - 1;\n  var s = i * 7 + 1;\n  if (m > 300000) {\n    break;\n  }\n  i++;\n  if (flag[m]) {\n    ms.push(m);\n  }\n  if (flag[s]) {\n    ms.push(s);\n  }\n  var j = 2;\n  while (true) {\n    if (m * j > 300000) {\n      break;\n    }\n    flag[m * j] = false;\n    flag[s * j] = false;\n    j++;\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 1) {\n    break;\n  }\n  var ans = [];\n  var i = 0;\n  ms.some(function (v) {\n    if (n % v == 0) {\n      ans.push(v);\n    }\n    return n < v;\n  });\n  console.log(n + \": \" + ans.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49051316092648745, "ngram_match_score": 0.04199270039338476, "weighted_ngram_match_score": 0.14633731557533872, "syntax_match_score": 0.7737226277372263, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.08040201005025127, "new_decrease_halstead_effort": 0.17242497781806798}}
{"filename": "p00767_1", "type": "JavaScript", "obfuscated": "function HW(){var arr=[];for(var i=0x1;i<0x96;i++){for(var j=i+0x1;j<=0x96;j++){arr['push']([i,j,i*i+j*j]);}}arr['sort'](function(a,b){if(a[0x2]==b[0x2])return a[0x0]-b[0x0];else return a[0x2]-b[0x2];});return arr;}var Rectangles=HW();var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var hw=Arr['shift']()['split']('\\x20')['map'](Number);var h=hw[0x0];var w=hw[0x1];if(h==0x0&&w==0x0)break;var num=h*h+w*w;for(var i=0x0;i<Rectangles['length'];i++){if(Rectangles[i][0x0]==h&&Rectangles[i][0x1]==w)break;}console['log'](Rectangles[i+0x1][0x0]+'\\x20'+Rectangles[i+0x1][0x1]);}", "test_cases": [["1 2\n1 3\n2 3\n1 4\n2 4\n5 6\n1 8\n4 7\n98 100\n99 100\n0 0", "1 3\n2 3\n1 4\n2 4\n3 4\n1 8\n4 7\n2 8\n3 140\n89 109"]], "original": "function HW(){\n   var arr=[];\n   for(var i=1;i<150;i++){\n      for(var j=i+1;j<=150;j++){\n         arr.push([i,j,i*i+j*j]);\n      }\n   }\n   arr.sort(function(a,b){\n      if(a[2]==b[2])return a[0]-b[0];\n      else return a[2]-b[2];\n   });\n   return arr;\n}\nvar Rectangles=HW();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var hw=Arr.shift().split(\" \").map(Number);\n   var h=hw[0];\n   var w=hw[1];\n   if(h==0 && w==0)break;\n   var num=h*h+w*w;\n   for(var i=0;i<Rectangles.length;i++){\n      if(Rectangles[i][0]==h &&Rectangles[i][1]==w)break;\n   }\n   console.log(Rectangles[i+1][0]+\" \"+Rectangles[i+1][1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1042, "deobfuscated": "function HW() {\n  var arr = [];\n  for (var i = 1; i < 150; i++) {\n    for (var j = i + 1; j <= 150; j++) {\n      arr.push([i, j, i * i + j * j]);\n    }\n  }\n  arr.sort(function (a, b) {\n    if (a[2] == b[2]) {\n      return a[0] - b[0];\n    } else {\n      return a[2] - b[2];\n    }\n  });\n  return arr;\n}\nvar Rectangles = HW();\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var hw = Arr.shift().split(\" \").map(Number);\n  var h = hw[0];\n  var w = hw[1];\n  if (h == 0 && w == 0) {\n    break;\n  }\n  var num = h * h + w * w;\n  for (var i = 0; i < Rectangles.length; i++) {\n    if (Rectangles[i][0] == h && Rectangles[i][1] == w) {\n      break;\n    }\n  }\n  console.log(Rectangles[i + 1][0] + \" \" + Rectangles[i + 1][1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5079395940917194, "ngram_match_score": 0.042281654729281005, "weighted_ngram_match_score": 0.14055585832824408, "syntax_match_score": 0.8489208633093526, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01449275362318836, "new_decrease_halstead_effort": 0.08749329039184095}}
{"filename": "p00773_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var xys=Arr['shift']()['split']('\\x20')['map'](Number);var x=xys[0x0];var y=xys[0x1];var s=xys[0x2];if(x==0x0&&y==0x0&&s==0x0)break;var max=0x0;for(var i=0x1;i<=s-0x1;i++){for(var j=0x1;j<=s-0x1;j++){var a=Math['floor'](i*(0x64+x)/0x64)+Math['floor'](j*(0x64+x)/0x64);if(a>s)break;if(a==s){var b=Math['floor'](i*(0x64+y)/0x64)+Math['floor'](j*(0x64+y)/0x64);max=Math['max'](max,b);break;}}}console['log'](max);}", "test_cases": [["5 8 105\n8 5 105\n1 2 24\n99 98 24\n12 13 26\n1 22 23\n1 13 201\n13 16 112\n2 24 50\n1 82 61\n1 84 125\n1 99 999\n99 1 999\n98 99 999\n1 99 11\n99 1 12\n0 0 0", "109\n103\n24\n24\n26\n27\n225\n116\n62\n111\n230\n1972\n508\n1004\n20\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var xys=Arr.shift().split(\" \").map(Number);\n   var x=xys[0];\n   var y=xys[1];\n   var s=xys[2];\n   if(x==0 && y==0 && s==0)break;\n   var max=0;\n   for(var i=1;i<=s-1;i++){\n      for(var j=1;j<=s-1;j++){\n         var a=Math.floor(i*(100+x)/100)+Math.floor(j*(100+x)/100);\n         if(a>s)break;\n         if(a==s){\n            var b=Math.floor(i*(100+y)/100)+Math.floor(j*(100+y)/100);\n            max=Math.max(max,b);\n            break;\n         }\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1043, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var xys = Arr.shift().split(\" \").map(Number);\n  var x = xys[0];\n  var y = xys[1];\n  var s = xys[2];\n  if (x == 0 && y == 0 && s == 0) {\n    break;\n  }\n  var max = 0;\n  for (var i = 1; i <= s - 1; i++) {\n    for (var j = 1; j <= s - 1; j++) {\n      var a = Math.floor(i * (100 + x) / 100) + Math.floor(j * (100 + x) / 100);\n      if (a > s) {\n        break;\n      }\n      if (a == s) {\n        var b = Math.floor(i * (100 + y) / 100) + Math.floor(j * (100 + y) / 100);\n        max = Math.max(max, b);\n        break;\n      }\n    }\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5341327708035315, "ngram_match_score": 0.054471097057093895, "weighted_ngram_match_score": 0.19588112436841404, "syntax_match_score": 0.8861788617886179, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004495753544988101, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017045454545454586, "new_decrease_halstead_effort": 0.1066704959471878}}
{"filename": "p00788_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var pn=arr['shift']()['split']('\\x20')['map'](Number);if(pn['join']('\\x20')=='0\\x200')break;var p=Math['sqrt'](pn[0x0]);var n=pn[0x1];var max=0x0;var min=Infinity;var ans=[];for(var i=0x1;i<=n;i++){for(var j=0x1;j<=n;j++){var v=i/j;if(p>v&&max<v){max=v;ans[0x1]=i+'/'+j;}else if(p<v&&min>v){min=v;ans[0x0]=i+'/'+j;}}}console['log'](ans['join']('\\x20'));}", "test_cases": [["2 5\n3 10\n5 100\n0 0", "3/2 4/3\n7/4 5/3\n85/38 38/17"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\nvar pn=arr.shift().split(\" \").map(Number);\nif(pn.join(\" \")==\"0 0\")break;\nvar p=Math.sqrt(pn[0]);\nvar n=pn[1];\nvar max=0;\nvar min=Infinity;\nvar ans=[];\nfor(var i=1;i<=n;i++){\nfor(var j=1;j<=n;j++){\nvar v=i/j;\nif(p>v && max<v){\nmax=v;\nans[1]=i+\"/\"+j;\n}else if(p<v && min>v){\nmin=v;\nans[0]=i+\"/\"+j;\n}\n}\n}\nconsole.log(ans.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1044, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var pn = arr.shift().split(\" \").map(Number);\n  if (pn.join(\" \") == \"0 0\") {\n    break;\n  }\n  var p = Math.sqrt(pn[0]);\n  var n = pn[1];\n  var max = 0;\n  var min = Infinity;\n  var ans = [];\n  for (var i = 1; i <= n; i++) {\n    for (var j = 1; j <= n; j++) {\n      var v = i / j;\n      if (p > v && max < v) {\n        max = v;\n        ans[1] = i + \"/\" + j;\n      } else if (p < v && min > v) {\n        min = v;\n        ans[0] = i + \"/\" + j;\n      }\n    }\n  }\n  console.log(ans.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5475057522588949, "ngram_match_score": 0.05810973555011218, "weighted_ngram_match_score": 0.1670009927837129, "syntax_match_score": 0.9649122807017544, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0041097060135661945, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019230769230769273, "new_decrease_halstead_effort": 0.09739733950260254}}
{"filename": "p00790_1", "type": "JavaScript", "obfuscated": "function move(d1,d2,d3,d4,d5,d6){var x=this['toString']();if(x=='s')return[d2,d6,d3,d4,d1,d5];else if(x=='n')return[d5,d1,d3,d4,d6,d2];else if(x=='w')return[d4,d2,d1,d6,d5,d3];else if(x=='e')return[d3,d2,d6,d1,d5,d4];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var dice=[0x1,0x2,0x3,0x4,0x5,0x6];while(n--){var str=arr['shift']();dice=move['apply'](str[0x0],dice);}console['log'](dice[0x0]);}", "test_cases": [["1\nnorth\n3\nnorth\neast\nsouth\n0", "5\n1"]], "original": "function move(d1,d2,d3,d4,d5,d6){\n   var x=this.toString();\n   if(x==\"s\")return [d2,d6,d3,d4,d1,d5];\n   else if(x==\"n\")return [d5,d1,d3,d4,d6,d2];\n   else if(x==\"w\")return [d4,d2,d1,d6,d5,d3];\n   else if(x==\"e\")return [d3,d2,d6,d1,d5,d4];\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var dice=[1,2,3,4,5,6];\n   while(n--){\n      var str=arr.shift();\n      dice=move.apply(str[0],dice);\n   }\n   console.log(dice[0]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1045, "deobfuscated": "function move(d1, d2, d3, d4, d5, d6) {\n  var x = this.toString();\n  if (x == \"s\") {\n    return [d2, d6, d3, d4, d1, d5];\n  } else if (x == \"n\") {\n    return [d5, d1, d3, d4, d6, d2];\n  } else if (x == \"w\") {\n    return [d4, d2, d1, d6, d5, d3];\n  } else if (x == \"e\") {\n    return [d3, d2, d6, d1, d5, d4];\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var dice = [1, 2, 3, 4, 5, 6];\n  while (n--) {\n    var str = arr.shift();\n    dice = move.apply(str[0], dice);\n  }\n  console.log(dice[0]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5052610362216867, "ngram_match_score": 0.034377004367979754, "weighted_ngram_match_score": 0.12952428337591004, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020134228187919434, "new_decrease_halstead_effort": 0.10832214765100678}}
{"filename": "p01085_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var k=0x0;while(0x1){input[k]=input[k]['split']('\\x20');var m=parseInt(input[k][0x0],0xa);var nmin=parseInt(input[k][0x1],0xa);var nmax=parseInt(input[k++][0x2],0xa);if(m==0x0&&nmin==0x0&&nmax==0x0)break;var maxg=0x0,maxn=0x0;var p=[];for(var i=0x0;i<m;i++)p[i]=parseInt(input[k++],0xa);for(var i=nmin-0x1;i<nmax;i++){if(p[i]-p[i+0x1]>=maxg){maxg=p[i]-p[i+0x1];maxn=i;}}console['log'](maxn+0x1);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 2 4\n100\n90\n82\n70\n65\n5 2 4\n100\n90\n80\n75\n65\n3 1 2\n5000\n4000\n3000\n4 2 3\n10000\n10000\n8000\n8000\n4 2 3\n10000\n10000\n10000\n8000\n5 2 3\n100\n80\n68\n60\n45\n0 0 0", "3\n4\n2\n2\n3\n2"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var k = 0;\n    while(1){\n        input[k] = input[k].split(\" \");\n        var m = parseInt(input[k][0],10);\n        var nmin = parseInt(input[k][1],10);\n        var nmax = parseInt(input[k++][2],10);\n        if(m == 0 && nmin == 0 && nmax == 0)\n            break;\n\n        var maxg = 0,maxn = 0;\n\n        var p = [];\n        for(var i = 0;i < m;i++)\n            p[i] = parseInt(input[k++],10);\n\n        for(var i = nmin - 1;i < nmax;i++){\n            if(p[i] - p[i + 1] >= maxg){\n                maxg = p[i] - p[i + 1];\n                maxn = i;\n            }\n        }\n        console.log(maxn + 1);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1046, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var k = 0;\n  while (1) {\n    input[k] = input[k].split(\" \");\n    var m = parseInt(input[k][0], 10);\n    var nmin = parseInt(input[k][1], 10);\n    var nmax = parseInt(input[k++][2], 10);\n    if (m == 0 && nmin == 0 && nmax == 0) {\n      break;\n    }\n    var maxg = 0;\n    var maxn = 0;\n    var p = [];\n    for (var i = 0; i < m; i++) {\n      p[i] = parseInt(input[k++], 10);\n    }\n    for (var i = nmin - 1; i < nmax; i++) {\n      if (p[i] - p[i + 1] >= maxg) {\n        maxg = p[i] - p[i + 1];\n        maxn = i;\n      }\n    }\n    console.log(maxn + 1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7389674508995729, "ngram_match_score": 0.4497679392138097, "weighted_ngram_match_score": 0.5794963597973258, "syntax_match_score": 0.926605504587156, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0002622975387106541, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.006172839506172867, "new_decrease_halstead_effort": -0.006172839506172867}}
{"filename": "p01102_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var a=arr['shift']();if(a=='.')break;var b=arr['shift']();var memo=[];var aa=a['replace'](/\".*?\"/g,function(s){memo['push'](s);return'\\x22';});var cnt=0x0;var bb=b['replace'](/\".*?\"/g,function(s){if(s!=memo['shift']())cnt++;return'\\x22';});if(aa==bb&&cnt==0x0)console['log']('IDENTICAL');else if(aa==bb&&cnt==0x1)console['log']('CLOSE');else if(aa!=bb||aa==bb&&cnt>0x1)console['log']('DIFFERENT');}", "test_cases": [["print\"hello\";print123\nprint\"hello\";print123\nread\"B1input\";solve;output;\nread\"B2\";solve;output;\nread\"C1\";solve;output\"C1ans\";\nread\"C2\";solve;output\"C2ans\";\n\"\"\"\"\"\"\"\"\n\"\"\"42\"\"\"\"\"\nslow\"program\"\nfast\"code\"\n\"super\"fast\"program\"\n\"super\"faster\"program\"\nX\"\"\nX\nI\"S\"\"CREAM\"\nI\"CE\"\"CREAM\"\n11\"22\"11\n1\"33\"111\n.", "IDENTICAL\nCLOSE\nDIFFERENT\nCLOSE\nDIFFERENT\nDIFFERENT\nDIFFERENT\nCLOSE\nDIFFERENT"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var a = arr.shift();\n   if(a==\".\")break;\n   var b = arr.shift();\n   var memo=[];\n   var aa = a.replace(/\".*?\"/g,function(s){\n      memo.push(s);\n      return \"\\\"\";\n   });\n   var cnt =0;\n   var bb = b.replace(/\".*?\"/g,function(s){\n      if(s != memo.shift())cnt++;\n      return \"\\\"\";\n   });\n   if(aa==bb && cnt==0) console.log(\"IDENTICAL\");\n   else if( aa==bb && cnt==1) console.log(\"CLOSE\");\n   else if(aa != bb || (aa==bb && cnt>1))console.log(\"DIFFERENT\");\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1047, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var a = arr.shift();\n  if (a == \".\") {\n    break;\n  }\n  var b = arr.shift();\n  var memo = [];\n  var aa = a.replace(/\".*?\"/g, function (s) {\n    memo.push(s);\n    return \"\\\"\";\n  });\n  var cnt = 0;\n  var bb = b.replace(/\".*?\"/g, function (s) {\n    if (s != memo.shift()) {\n      cnt++;\n    }\n    return \"\\\"\";\n  });\n  if (aa == bb && cnt == 0) {\n    console.log(\"IDENTICAL\");\n  } else if (aa == bb && cnt == 1) {\n    console.log(\"CLOSE\");\n  } else if (aa != bb || aa == bb && cnt > 1) {\n    console.log(\"DIFFERENT\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6241429741020474, "ngram_match_score": 0.24204155064810431, "weighted_ngram_match_score": 0.41524463147437096, "syntax_match_score": 0.8392857142857143, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.021428571428571463, "new_decrease_halstead_effort": 0.10379990379990378}}
{"filename": "p01126_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var A=Arr['shift']();if(A=='0\\x200\\x200')break;var arr=A['split']('\\x20')['map'](Number);var m=arr[0x1];var start=arr[0x2];var hpq=[];for(var i=0x0;i<m;i++)hpq['push'](Arr['shift']());hpq['sort'](function(a,b){a=a['split']('\\x20')[0x0]-0x0;b=b['split']('\\x20')[0x0]-0x0;if(a>=b)return-0x1;else return 0x1;});var H=0x3e9;for(var i=0x0;i<hpq['length'];i++){var HPQ=hpq[i]['split']('\\x20')['map'](Number);var h=HPQ[0x0];var p=HPQ[0x1];var q=HPQ[0x2];if(H==h)continue;if(start==p||start==q){H=h;start=start==p?q:p;}}console['log'](start);}", "test_cases": [["4 4 1\n3 1 2\n2 2 3\n3 3 4\n1 3 4\n0 0 0", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var A=Arr.shift();\n   if(A==\"0 0 0\")break;\n   var arr=A.split(\" \").map(Number);\n   var m=arr[1];\n   var start=arr[2];\n   var hpq=[];\n   for(var i=0;i<m;i++)hpq.push(Arr.shift());\n   hpq.sort(function(a,b){\n      a=(a.split(\" \"))[0]-0;\n      b=(b.split(\" \"))[0]-0;\n      if(a>=b)return -1;\n      else return 1;\n   });\n  var H=1001;\n   for(var i=0;i<hpq.length;i++){\n      var HPQ=hpq[i].split(\" \").map(Number);\n      var h=HPQ[0];\n      var p=HPQ[1];\n      var q=HPQ[2];\n      if(H==h)continue;\n      if(start==p || start==q){\n         H=h;\n         start=(start==p)?q:p;\n      }\n   }\n   console.log(start);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1048, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var A = Arr.shift();\n  if (A == \"0 0 0\") {\n    break;\n  }\n  var arr = A.split(\" \").map(Number);\n  var m = arr[1];\n  var start = arr[2];\n  var hpq = [];\n  for (var i = 0; i < m; i++) {\n    hpq.push(Arr.shift());\n  }\n  hpq.sort(function (a, b) {\n    a = a.split(\" \")[0] - 0;\n    b = b.split(\" \")[0] - 0;\n    if (a >= b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  var H = 1001;\n  for (var i = 0; i < hpq.length; i++) {\n    var HPQ = hpq[i].split(\" \").map(Number);\n    var h = HPQ[0];\n    var p = HPQ[1];\n    var q = HPQ[2];\n    if (H == h) {\n      continue;\n    }\n    if (start == p || start == q) {\n      H = h;\n      start = start == p ? q : p;\n    }\n  }\n  console.log(start);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47512140665593516, "ngram_match_score": 0.035713442172692615, "weighted_ngram_match_score": 0.1028674225462861, "syntax_match_score": 0.7619047619047619, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014778325123152691, "new_decrease_halstead_effort": 0.0836749457439111}}
{"filename": "p01137_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var e=Arr['shift']()-0x0;if(e==0x0)break;var min=Infinity;for(var z=0x0;z<=0x64;z++){for(var y=0x0;y<=0x3e8;y++){var x=e-(Math['pow'](z,0x3)+Math['pow'](y,0x2));if(x<0x0)break;min=Math['min'](min,z+y+x);}}console['log'](min);}", "test_cases": [["1\n2\n4\n27\n300\n1250\n0", "1\n2\n2\n3\n18\n44"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var e=Arr.shift()-0;\n   if(e==0)break;\n   var min=Infinity;\n   for(var z=0;z<=100;z++){\n      for(var y=0;y<=1000;y++){\n         var x=e-(Math.pow(z,3)+Math.pow(y,2));\n         if(x<0)break;\n         min=Math.min(min,z+y+x)\n      }\n   }\n   console.log(min);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1049, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var e = Arr.shift() - 0;\n  if (e == 0) {\n    break;\n  }\n  var min = Infinity;\n  for (var z = 0; z <= 100; z++) {\n    for (var y = 0; y <= 1000; y++) {\n      var x = e - (Math.pow(z, 3) + Math.pow(y, 2));\n      if (x < 0) {\n        break;\n      }\n      min = Math.min(min, z + y + x);\n    }\n  }\n  console.log(min);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5083593293448001, "ngram_match_score": 0.0468549997793137, "weighted_ngram_match_score": 0.17079284391567603, "syntax_match_score": 0.8157894736842105, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0052349334671648595, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02857142857142858, "new_decrease_halstead_effort": 0.13496803183265993}}
{"filename": "p01202_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;while(n--){var ary=arr['shift']()['split']('');var ans='Yes';var s='';ary['forEach'](function(v){if(v==s)ans='No';s=v;});console['log'](ans);}", "test_cases": [["3\nUU\nRDUL\nULDURDULDURDULDURDULDURD", "No\nYes\nYes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var ary=arr.shift().split(\"\");\n   var ans=\"Yes\";\n   var s=\"\";\n   ary.forEach(function(v){\n      if(v==s)ans=\"No\";\n      s=v;\n   });\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1050, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nwhile (n--) {\n  var ary = arr.shift().split(\"\");\n  var ans = \"Yes\";\n  var s = \"\";\n  ary.forEach(function (v) {\n    if (v == s) {\n      ans = \"No\";\n    }\n    s = v;\n  });\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4974699357334427, "ngram_match_score": 0.037050434706189156, "weighted_ngram_match_score": 0.09345430822758179, "syntax_match_score": 0.859375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01227_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var t=arr['shift']()-0x0;while(t--){var [n,k]=arr['shift']()['split']('\\x20')['map'](Number);var x=arr['shift']()['split']('\\x20')['map'](Number);var d=x[x['length']-0x1]-x[0x0];var a=[];for(var i=0x0;i<x['length']-0x1;i++)a['push'](x[i+0x1]-x[i]);a['sort']((a,b)=>b-a);var sum=0x0;for(var i=0x0;i<k-0x1;i++){if(i>a['length']-0x1)break;sum+=a[i];}console['log'](d-sum);}", "test_cases": [["6\n5 2\n10 30 40 70 100\n7 3\n3 6 10 17 21 26 28\n1 1\n100\n2 1\n0 1000000\n3 5\n30 70 150\n6 4\n0 10 20 30 40 50", "60\n13\n0\n1000000\n0\n20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar t=arr.shift()-0;\nwhile(t--){\n   var [n,k]=arr.shift().split(\" \").map(Number);\n   var x=arr.shift().split(\" \").map(Number);\n   var d=x[x.length-1]-x[0];\n   var a=[];\n   for(var i=0;i<x.length-1;i++)a.push(x[i+1]-x[i]);\n   a.sort((a,b)=>b-a);\n   var sum=0;\n   for(var i=0;i<k-1;i++){\n      if(i>a.length-1)break;\n      sum+=a[i];\n   }\n   console.log(d-sum);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1051, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar t = arr.shift() - 0;\nwhile (t--) {\n  var [n, k] = arr.shift().split(\" \").map(Number);\n  var x = arr.shift().split(\" \").map(Number);\n  var d = x[x.length - 1] - x[0];\n  var a = [];\n  for (var i = 0; i < x.length - 1; i++) {\n    a.push(x[i + 1] - x[i]);\n  }\n  a.sort((a, b) => b - a);\n  var sum = 0;\n  for (var i = 0; i < k - 1; i++) {\n    if (i > a.length - 1) {\n      break;\n    }\n    sum += a[i];\n  }\n  console.log(d - sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5480517005904986, "ngram_match_score": 0.05951947088447291, "weighted_ngram_match_score": 0.19518733147752165, "syntax_match_score": 0.9375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01267_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var arr=Arr['shift']()['split']('\\x20')['map'](Number);if(arr['join']('')=='00000')break;var y=Arr['shift']()['split']('\\x20')['map'](Number);(function(N,A,B,C,X){var i=0x0;while(!![]){if(y[0x0]==X)y['shift']();if(y['length']==0x0){console['log'](i);break;}X=(A*X+B)%C;i++;if(i==0x2711){console['log'](-0x1);break;}}}['apply'](null,arr));}", "test_cases": [["1 5 7 11 10\n10\n2 5 7 11 10\n2 4\n2 1 1 256 0\n128 255\n2 0 0 1 0\n1234 5678\n2 1 1 100 0\n99 98\n2 1 1 100 0\n99 99\n2 1 1 10000 0\n1 0\n2 1 1 10000 0\n2 1\n0 0 0 0 0", "0\n3\n255\n-1\n198\n199\n10000\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr.join(\"\")==\"00000\")break;\n   var y=(Arr.shift()).split(\" \").map(Number);\n   (function(N, A, B, C, X){\n      var i=0;\n      while(true){\n         if(y[0]==X)y.shift();\n         if(y.length==0){console.log(i);break;}\n         X=((A*X)+B)%C;\n         i++;\n         if(i==10001){console.log(-1);break;}\n      }\n   }).apply(null,arr);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1052, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  if (arr.join(\"\") == \"00000\") {\n    break;\n  }\n  var y = Arr.shift().split(\" \").map(Number);\n  (function (N, A, B, C, X) {\n    var i = 0;\n    while (true) {\n      if (y[0] == X) {\n        y.shift();\n      }\n      if (y.length == 0) {\n        console.log(i);\n        break;\n      }\n      X = (A * X + B) % C;\n      i++;\n      if (i == 10001) {\n        console.log(-1);\n        break;\n      }\n    }\n  }).apply(null, arr);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4374931880603165, "ngram_match_score": 0.02341375860866239, "weighted_ngram_match_score": 0.06890133597494591, "syntax_match_score": 0.6576576576576577, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007281230177396125, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.045112781954887216, "new_decrease_halstead_effort": 0.19177398179186633}}
{"filename": "p01398_1", "type": "JavaScript", "obfuscated": "var objStr={};var objNum={};var abc='abcdefghijklmnopqrstuvwxyz'['split']('');abc['forEach'](function(v,i){objStr[v]=i;objNum[i]=v;});var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;var str=Arr['shift']();var AB=[];for(var i=0x0;i<N;i++){var ab=Arr['shift']()['split']('\\x20')['map'](Number);AB['push'](ab);}AB['reverse']();var s=str['split']('');for(var i=0x0;i<N;i++){var ab=AB[i];var plus=ab[0x1]-ab[0x0];var m1=s[ab[0x0]-0x1];var m2=s[ab[0x1]-0x1];var n1=objStr[m1]+plus;var n2=objStr[m2]+plus;s[ab[0x0]-0x1]=objNum[n2%abc['length']];s[ab[0x1]-0x1]=objNum[n1%abc['length']];}console['log'](s['join'](''));}", "test_cases": [["1\ntojxo\n1 4\n5\nuhcqmlmkv\n4 5\n6 9\n3 6\n1 7\n3 6\n5\nshzxadexonr\n8 9\n3 9\n5 8\n4 9\n10 11\n0", "aojwo\nshinryaku\nshitadegeso"]], "original": "var objStr={};\nvar objNum={};\nvar abc=\"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nabc.forEach(function(v,i){\n   objStr[v]=i;\n   objNum[i]=v;\n});\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var str=Arr.shift();\n   var AB=[];\n   for(var i=0;i<N;i++){\n      var ab=(Arr.shift()).split(\" \").map(Number);\n      AB.push(ab);\n   }\n   AB.reverse();\n   var s=str.split(\"\");\n   for(var i=0;i<N;i++){\n      var ab=AB[i];\n      var plus=ab[1]-ab[0];\n      var m1=s[ab[0]-1];\n      var m2=s[ab[1]-1];\n      var n1=objStr[m1]+plus;\n      var n2=objStr[m2]+plus;\n      s[ab[0]-1]=objNum[n2%abc.length];\n      s[ab[1]-1]=objNum[n1%abc.length];\n   }\n   console.log(s.join(\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1053, "deobfuscated": "var objStr = {};\nvar objNum = {};\nvar abc = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nabc.forEach(function (v, i) {\n  objStr[v] = i;\n  objNum[i] = v;\n});\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  var str = Arr.shift();\n  var AB = [];\n  for (var i = 0; i < N; i++) {\n    var ab = Arr.shift().split(\" \").map(Number);\n    AB.push(ab);\n  }\n  AB.reverse();\n  var s = str.split(\"\");\n  for (var i = 0; i < N; i++) {\n    var ab = AB[i];\n    var plus = ab[1] - ab[0];\n    var m1 = s[ab[0] - 1];\n    var m2 = s[ab[1] - 1];\n    var n1 = objStr[m1] + plus;\n    var n2 = objStr[m2] + plus;\n    s[ab[0] - 1] = objNum[n2 % abc.length];\n    s[ab[1] - 1] = objNum[n1 % abc.length];\n  }\n  console.log(s.join(\"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5293933207912733, "ngram_match_score": 0.05859138310802922, "weighted_ngram_match_score": 0.17218944722687568, "syntax_match_score": 0.8867924528301887, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012931034482758674, "new_decrease_halstead_effort": 0.08996419449005644}}
{"filename": "p01694_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var ary=arr['shift']()['split']('\\x20');var L=0x0;var R=0x0;var UD=0x2;var cnt=0x0;ary['forEach'](function(v){if(v=='lu')L=0x1;else if(v=='ru')R=0x1;else if(v=='ld')L=0x0;else if(v=='rd')R=0x0;if(UD==L+R){cnt++;UD=UD==0x2?0x0:0x2;}});console['log'](cnt);}", "test_cases": [["4\nlu ru ld rd\n4\nlu ld lu ru\n1\nlu\n10\nru lu ld rd ru rd ru lu rd ld\n0", "2\n1\n0\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=arr.shift().split(\" \");\n   var L=0;\n   var R=0;\n   var UD=2;\n   var cnt=0;\n   ary.forEach(function(v){\n      if(v==\"lu\")L=1;\n      else if(v==\"ru\")R=1;\n      else if(v==\"ld\")L=0;\n      else if(v==\"rd\")R=0;\n      if(UD==L+R){\n         cnt++;\n         UD=(UD==2)?0:2;\n      }\n   });\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1054, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var ary = arr.shift().split(\" \");\n  var L = 0;\n  var R = 0;\n  var UD = 2;\n  var cnt = 0;\n  ary.forEach(function (v) {\n    if (v == \"lu\") {\n      L = 1;\n    } else if (v == \"ru\") {\n      R = 1;\n    } else if (v == \"ld\") {\n      L = 0;\n    } else if (v == \"rd\") {\n      R = 0;\n    }\n    if (UD == L + R) {\n      cnt++;\n      UD = UD == 2 ? 0 : 2;\n    }\n  });\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4792581658917578, "ngram_match_score": 0.04000567038795897, "weighted_ngram_match_score": 0.13445273575332964, "syntax_match_score": 0.7425742574257426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023622047244094446, "new_decrease_halstead_effort": 0.17797455670966122}}
{"filename": "p01845_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');for(var i=0x0;0x1;i++){input[i]=input[i]['split']('\\x20');var r0=parseInt(input[i][0x0],0xa);var w0=parseInt(input[i][0x1],0xa);var c=parseInt(input[i][0x2],0xa);var r=parseInt(input[i][0x3],0xa);if(r0==0x0&&w0==0x0&&c==0x0&&r==0x0)break;var a=c*w0;if(a<=r0)console['log']('0');else{console['log'](Math['floor']((a-r0+r-0x1)/r));}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 5 3 4\n2 5 2 3\n91 13 7 62\n10 1 3 5\n20 100 2 20\n2 14 7 1\n0 0 0 0", "2\n3\n0\n0\n9\n96"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    for(var i = 0;1;i++){\n        input[i] = input[i].split(\" \");\n        var r0 = parseInt(input[i][0],10);\n        var w0 = parseInt(input[i][1],10);\n        var c = parseInt(input[i][2],10);\n        var r = parseInt(input[i][3],10);\n        if(r0 == 0 && w0 == 0 && c == 0 && r == 0)\n            break;\n\n        var a = c * w0;\n        if(a <= r0)\n            console.log(\"0\");\n        else{\n            console.log(Math.floor((a - r0 + r - 1) / r));\n        }\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1055, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  for (var i = 0; 1; i++) {\n    input[i] = input[i].split(\" \");\n    var r0 = parseInt(input[i][0], 10);\n    var w0 = parseInt(input[i][1], 10);\n    var c = parseInt(input[i][2], 10);\n    var r = parseInt(input[i][3], 10);\n    if (r0 == 0 && w0 == 0 && c == 0 && r == 0) {\n      break;\n    }\n    var a = c * w0;\n    if (a <= r0) {\n      console.log(\"0\");\n    } else {\n      console.log(Math.floor((a - r0 + r - 1) / r));\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7472001501716335, "ngram_match_score": 0.46902866974060115, "weighted_ngram_match_score": 0.5942400160523161, "syntax_match_score": 0.925531914893617, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02016_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');if(input=='ani')console['log']('square1001');else console['log']('e869120');", "test_cases": [["ani", "square1001"], ["otouto", "e869120"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nif(input==\"ani\")console.log(\"square1001\");\nelse console.log(\"e869120\");\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1056, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nif (input == \"ani\") {\n  console.log(\"square1001\");\n} else {\n  console.log(\"e869120\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5301432034610754, "ngram_match_score": 0.06917184228205472, "weighted_ngram_match_score": 0.16678558694686224, "syntax_match_score": 0.8846153846153846, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02125_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var max=0x0;for(var i=0x1;i<=n;i++){var s=(i['toString'](0x2)+'')['split']('')['map'](Number);var sum=s['reduce']((a,b)=>a+b);max=Math['max'](max,sum);}console['log'](max);", "test_cases": [["2", "1"], ["9", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift()-0;\nvar max=0;\nfor(var i=1;i<=n;i++){\n   var s = (i.toString(2) + \"\").split(\"\").map(Number);\n   var sum = s.reduce((a,b)=>a+b);\n   max=Math.max(max,sum);\n}\nconsole.log(max);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1057, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar max = 0;\nfor (var i = 1; i <= n; i++) {\n  var s = (i.toString(2) + \"\").split(\"\").map(Number);\n  var sum = s.reduce((a, b) => a + b);\n  max = Math.max(max, sum);\n}\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7118943156219409, "ngram_match_score": 0.3062509493922583, "weighted_ngram_match_score": 0.5413263130955055, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009254318700082642, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02916819268851234}}
{"filename": "p02326_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [h,w]=arr['shift']()['split']('\\x20')['map'](Number);var yx=[];for(var i=0x0;i<h;i++){yx[i]=arr['shift']()['split']('\\x20')['map'](v=>0x1-(v-0x0));}for(var y=0x1;y<h;y++){for(var x=0x1;x<w;x++){if(yx[y][x]==0x1)yx[y][x]=Math['min'](yx[y-0x1][x],yx[y][x-0x1],yx[y-0x1][x-0x1])+0x1;}}var max=0x0;for(var y=0x0;y<h;y++){for(var x=0x0;x<w;x++){max=Math['max'](max,yx[y][x]);}}console['log'](max*max);", "test_cases": [["4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar yx=[];\nfor(var i=0;i<h;i++){\n   yx[i]=arr.shift().split(\" \").map(v=>1-(v-0));\n}\nfor(var y=1;y<h;y++){\n   for(var x=1;x<w;x++){\n      if(yx[y][x]==1)yx[y][x]=Math.min(yx[y-1][x],yx[y][x-1],yx[y-1][x-1])+1;\n   }\n}\nvar max=0;\nfor(var y=0;y<h;y++){\n   for(var x=0;x<w;x++){\n      max=Math.max(max,yx[y][x]);\n   }\n}\nconsole.log(max*max);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1058, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [h, w] = arr.shift().split(\" \").map(Number);\nvar yx = [];\nfor (var i = 0; i < h; i++) {\n  yx[i] = arr.shift().split(\" \").map(v => 1 - (v - 0));\n}\nfor (var y = 1; y < h; y++) {\n  for (var x = 1; x < w; x++) {\n    if (yx[y][x] == 1) {\n      yx[y][x] = Math.min(yx[y - 1][x], yx[y][x - 1], yx[y - 1][x - 1]) + 1;\n    }\n  }\n}\nvar max = 0;\nfor (var y = 0; y < h; y++) {\n  for (var x = 0; x < w; x++) {\n    max = Math.max(max, yx[y][x]);\n  }\n}\nconsole.log(max * max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5095386952065042, "ngram_match_score": 0.017357867483976563, "weighted_ngram_match_score": 0.06879691334204034, "syntax_match_score": 0.952, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0011061717644582636, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.029036815266099802}}
{"filename": "p02380_1", "type": "JavaScript", "obfuscated": "var reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',function(line){var rad,a,S,L,h;var e=line['split']('\\x20');var b=Number(e[0x0]);var c=Number(e[0x1]);var d=Number(e[0x2]);rad=d/0xb4*Math['PI'];a=Math['sqrt'](b*b+c*c-0x2*b*c*Math['cos'](rad));S=b*c*Math['sin'](rad)/0x2;L=a+b+c;h=b*c*Math['sin'](rad)/b;console['log'](S['toFixed'](0x8));console['log'](L['toFixed'](0x8));console['log'](h['toFixed'](0x8));process['exit']();});process['stdin']['on']('end',function(){});", "test_cases": [["4 3 90", "6.00000000\n12.00000000\n3.00000000"]], "original": "var reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var rad,a,S,L,h;\n  var e = line.split(' ');\n  var b = Number(e[0]);\n  var c = Number(e[1]);\n  var d = Number(e[2]);\n  rad = d / 180 * Math.PI;\n  a = Math.sqrt(b*b+c*c-2*b*c*Math.cos(rad));\n  S = (b*c*Math.sin(rad))/2;\n  L = a+b+c;\n  h = (b*c*Math.sin(rad))/b;\n  console.log(S.toFixed(8));\n  console.log(L.toFixed(8));\n  console.log(h.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1059, "deobfuscated": "var reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on(\"line\", function (line) {\n  var rad;\n  var a;\n  var S;\n  var L;\n  var h;\n  var e = line.split(\" \");\n  var b = Number(e[0]);\n  var c = Number(e[1]);\n  var d = Number(e[2]);\n  rad = d / 180 * Math.PI;\n  a = Math.sqrt(b * b + c * c - b * 2 * c * Math.cos(rad));\n  S = b * c * Math.sin(rad) / 2;\n  L = a + b + c;\n  h = b * c * Math.sin(rad) / b;\n  console.log(S.toFixed(8));\n  console.log(L.toFixed(8));\n  console.log(h.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on(\"end\", function () {});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6742732163694669, "ngram_match_score": 0.34821579614711284, "weighted_ngram_match_score": 0.5763553302003197, "syntax_match_score": 0.816, "dataflow_match_score": 0.9565217391304348}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009179651658297594, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.02298850574712641, "new_decrease_halstead_effort": -0.02298850574712663}}
{"filename": "p02382_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr[0x0]-0x0;var x=Arr[0x1]['split']('\\x20')['map'](Number);var y=Arr[0x2]['split']('\\x20')['map'](Number);var sum1=0x0;var sum2=0x0;var sum3=0x0;var max=0x0;for(var i=0x0;i<n;i++){var a=Math['abs'](x[i]-y[i]);sum1+=a;sum2+=Math['pow'](a,0x2);sum3+=Math['pow'](a,0x3);max=Math['max'](max,a);}console['log'](sum1['toFixed'](0x6));console['log'](Math['sqrt'](sum2)['toFixed'](0x6));console['log'](Math['pow'](sum3,0x1/0x3)['toFixed'](0x6));console['log'](max['toFixed'](0x6));", "test_cases": [["3\n1 2 3\n2 0 4", "4.000000\n2.449490\n2.154435\n2.000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr[0]-0;\nvar x=Arr[1].split(\" \").map(Number);\nvar y=Arr[2].split(\" \").map(Number);\nvar sum1=0;\nvar sum2=0;\nvar sum3=0;\nvar max=0;\nfor(var i=0;i<n;i++){\n   var a=Math.abs(x[i]-y[i]);\n   sum1+=a;\n   sum2+=Math.pow(a,2);\n   sum3+=Math.pow(a,3);\n   max=Math.max(max,a);\n}\nconsole.log(sum1.toFixed(6));\nconsole.log(Math.sqrt(sum2).toFixed(6));\nconsole.log(Math.pow(sum3,1/3).toFixed(6));\nconsole.log(max.toFixed(6));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1060, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr[0] - 0;\nvar x = Arr[1].split(\" \").map(Number);\nvar y = Arr[2].split(\" \").map(Number);\nvar sum1 = 0;\nvar sum2 = 0;\nvar sum3 = 0;\nvar max = 0;\nfor (var i = 0; i < n; i++) {\n  var a = Math.abs(x[i] - y[i]);\n  sum1 += a;\n  sum2 += Math.pow(a, 2);\n  sum3 += Math.pow(a, 3);\n  max = Math.max(max, a);\n}\nconsole.log(sum1.toFixed(6));\nconsole.log(Math.sqrt(sum2).toFixed(6));\nconsole.log(Math.pow(sum3, 1 / 3).toFixed(6));\nconsole.log(max.toFixed(6));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5117393351825675, "ngram_match_score": 0.027465520657265718, "weighted_ngram_match_score": 0.06949182007300456, "syntax_match_score": 0.95, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00087583922445722, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.0233345718202993}}
{"filename": "p02440_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var q=arr['shift']()-0x0;var s='';for(var i=0x0;i<q;i++){var [c,b,e]=arr[i]['split']('\\x20')['map'](Number);var m=a[b];if(c==0x0){for(var j=b;j<e;j++)m=Math['min'](m,a[j]);}else{for(var j=b;j<e;j++)m=Math['max'](m,a[j]);}s+=m+'\\x0a';}console['log'](s['trim']());", "test_cases": [["7\n8 3 7 1 9 1 4\n3\n0 0 3\n0 1 5\n1 0 7", "3\n1\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [c,b,e]=arr[i].split(\" \").map(Number);\n   var m = a[b];\n   if(c==0){\n      for(var j=b;j<e;j++) m=Math.min(m,a[j]);\n   }else{\n      for(var j=b;j<e;j++) m=Math.max(m,a[j]);\n   }\n   s+=m+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1061, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar q = arr.shift() - 0;\nvar s = \"\";\nfor (var i = 0; i < q; i++) {\n  var [c, b, e] = arr[i].split(\" \").map(Number);\n  var m = a[b];\n  if (c == 0) {\n    for (var j = b; j < e; j++) {\n      m = Math.min(m, a[j]);\n    }\n  } else {\n    for (var j = b; j < e; j++) {\n      m = Math.max(m, a[j]);\n    }\n  }\n  s += m + \"\\n\";\n}\nconsole.log(s.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5696815663371463, "ngram_match_score": 0.09597674930970117, "weighted_ngram_match_score": 0.26531832337833344, "syntax_match_score": 0.9174311926605505, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02469_1", "type": "JavaScript", "obfuscated": "function gcd(a,b){if(b>a)return gcd(b,a);if(b==0x0)return a;return gcd(b,a%b);}function lcm(a,b){var d=gcd(a,b);return a*b/d;}var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');var n=+lines['shift']();var nums=lines['shift']()['split']('\\x20')['map'](function(num){return+num;});var p=0x1;for(var i=0x0;i<n;i++){p=lcm(p,nums[i]);}console['log'](p);", "test_cases": [["3\n3 4 6", "12"], ["4\n1 2 3 5", "30"]], "original": "function gcd(a, b) {\n    if (b > a)\n        return gcd(b, a);\n    if (b == 0)\n        return a;\n\n    return gcd(b, a % b);\n}\nfunction lcm(a, b) {\n    var d = gcd(a, b);\n    return a * b / d;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar n = +lines.shift();\n\nvar nums = lines.shift().split(' ').map(function(num){return +num;});\nvar p = 1;\nfor (var i = 0; i < n; i++) {\n    p = lcm(p, nums[i]);\n}\n\nconsole.log(p);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1062, "deobfuscated": "function gcd(a, b) {\n  if (b > a) {\n    return gcd(b, a);\n  }\n  if (b == 0) {\n    return a;\n  }\n  return gcd(b, a % b);\n}\nfunction lcm(a, b) {\n  var d = gcd(a, b);\n  return a * b / d;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nvar n = +lines.shift();\nvar nums = lines.shift().split(\" \").map(function (num) {\n  return +num;\n});\nvar p = 1;\nfor (var i = 0; i < n; i++) {\n  p = lcm(p, nums[i]);\n}\nconsole.log(p);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8503963764387212, "ngram_match_score": 0.7057574243935335, "weighted_ngram_match_score": 0.7865445682642787, "syntax_match_score": 0.9431818181818182, "dataflow_match_score": 0.9661016949152542}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02540_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const N=parseInt(input[0x0],0xa);var x=[];var y=[];for(var i=0x1;i<=N;i++){tmp=input[i]['split']('\\x20')['map'](n=>parseInt(n,0xa));x['push'](tmp[0x0]);y['push'](tmp[0x1]);}var counts=[];for(var j=0x0;j<N;j++){var count=0x0;for(var k=0x0;k<N;k++){if(x[j]>x[k]&&y[j]>y[k]||x[j]<x[k]&&y[j]<y[k]){count++;}}counts['push'](parseInt(count,0xa));}for(var j=0x0;j<N;j++){var count=0x1;for(var k=0x0;k<N;k++){if(x[j]>x[k]&&y[j]>y[k]||x[j]<x[k]&&y[j]<y[k]){count=count+counts[k];}}console['log'](count);}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 4\n2 3\n3 1\n4 2", "1\n1\n2\n2"], ["7\n6 4\n4 3\n3 5\n7 1\n2 7\n5 2\n1 6", "3\n3\n1\n1\n2\n3\n2"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  \n  const N = parseInt(input[0], 10);\n\n  var x = [];\n  var y = [];\n\n  for (var i = 1; i <= N; i++) {\n    tmp = input[i].split(\" \").map(n => parseInt(n, 10));\n    x.push(tmp[0]);\n    y.push(tmp[1]);\n  }\n\n  var counts = [];\n\n  for(var j = 0; j < N; j++){\n    var count = 0;\n    for(var k = 0; k < N; k++){\n      if((x[j] > x[k] && y[j] > y[k])||(x[j] < x[k] && y[j] < y[k])){\n        count++;\n      }\n    }\n    counts.push(parseInt(count, 10))\n  }\n\n  for(var j = 0; j < N; j++){\n    var count = 1;\n    for(var k = 0; k < N; k++){\n      if((x[j] > x[k] && y[j] > y[k])||(x[j] < x[k] && y[j] < y[k])){\n        count = count + counts[k];\n      }\n    }\n    console.log(count);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1063, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0], 10);\n  var x = [];\n  var y = [];\n  for (var i = 1; i <= N; i++) {\n    tmp = input[i].split(\" \").map(n => parseInt(n, 10));\n    x.push(tmp[0]);\n    y.push(tmp[1]);\n  }\n  var counts = [];\n  for (var j = 0; j < N; j++) {\n    var count = 0;\n    for (var k = 0; k < N; k++) {\n      if (x[j] > x[k] && y[j] > y[k] || x[j] < x[k] && y[j] < y[k]) {\n        count++;\n      }\n    }\n    counts.push(parseInt(count, 10));\n  }\n  for (var j = 0; j < N; j++) {\n    var count = 1;\n    for (var k = 0; k < N; k++) {\n      if (x[j] > x[k] && y[j] > y[k] || x[j] < x[k] && y[j] < y[k]) {\n        count = count + counts[k];\n      }\n    }\n    console.log(count);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8071922413753744, "ngram_match_score": 0.6398173276965582, "weighted_ngram_match_score": 0.7262065397657236, "syntax_match_score": 0.8627450980392157, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02904_1", "type": "JavaScript", "obfuscated": "function Main(arg){var N=arg['split']('\\x0a')[0x0]['split']('\\x20')[0x0]-0x0;var K=arg['split']('\\x0a')[0x0]['split']('\\x20')[0x1]-0x0;var P=arg['split']('\\x0a')[0x1]['split']('\\x20')['map'](v=>v-0x0);var ans=[];for(var i=0x0;i<N-K+0x1;i++){var tmp=P['slice'](i,i+K);tmp['sort'](compareNumbers);ans[i]=P['slice'](0x0,i)['concat'](tmp)['concat'](P['slice'](i+K))['toString']();}var aa=new Set(ans);console['log'](aa['size']);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));function compareNumbers(a,b){return a-b;}", "test_cases": [["5 3\n0 2 1 4 3", "2"], ["4 4\n0 1 2 3", "1"], ["10 4\n2 0 1 3 7 5 4 6 8 9", "6"]], "original": "function Main(arg) {\n \n    var N = arg.split(\"\\n\")[0].split(\" \")[0]-0;\n    var K = arg.split(\"\\n\")[0].split(\" \")[1]-0;\n    var P = arg.split(\"\\n\")[1].split(\" \").map(v => v-0);\n\n    var ans = [];\n    for (var i = 0; i < N - K + 1; i++){\n        var tmp = P.slice(i, i + K);\n        tmp.sort(compareNumbers);\n        ans[i] = P.slice(0, i).concat(tmp).concat(P.slice(i + K)).toString();\n    }\n\n    var aa = new Set(ans);\n\n    console.log(aa.size);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction compareNumbers(a, b) { //for sort\n    return a - b;\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1064, "deobfuscated": "function Main(arg) {\n  var N = arg.split(\"\\n\")[0].split(\" \")[0] - 0;\n  var K = arg.split(\"\\n\")[0].split(\" \")[1] - 0;\n  var P = arg.split(\"\\n\")[1].split(\" \").map(v => v - 0);\n  var ans = [];\n  for (var i = 0; i < N - K + 1; i++) {\n    var tmp = P.slice(i, i + K);\n    tmp.sort(compareNumbers);\n    ans[i] = P.slice(0, i).concat(tmp).concat(P.slice(i + K)).toString();\n  }\n  var aa = new Set(ans);\n  console.log(aa.size);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8898952374287654, "ngram_match_score": 0.7497789105897963, "weighted_ngram_match_score": 0.8098020391252654, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02978_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');const N=parseInt(input[0x0]);const As=input[0x1]['split']('\\x20')['map'](x=>parseInt(x));var now=As;while(!![]){var min=-0x1;var next=[];for(i=0x1;i<now['length']-0x1;i++){if(min==-0x1||now[min]>now[i])min=i;if(min==now[i]&&now[i-0x1]+now[i+0x1]<now[min-0x1]+now[min+0x1])min=i;}if(now[min]*0x2>now[now['length']-0x2])min=now['length']-0x2;for(i=0x0;i<now['length'];i++){if(i==min-0x1){next['push'](now[min-0x1]+now[min]);}else if(i==min){}else if(i==min+0x1){next['push'](now[min+0x1]+now[min]);}else{next['push'](now[i]);}}now=next;if(now['length']==0x2)break;}console['log'](now[0x0]+now[0x1]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n3 1 4 2", "16"], ["6\n5 2 4 1 6 9", "51"], ["10\n3 1 4 1 5 9 2 6 5 3", "115"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst N = parseInt(input[0])\n\tconst As = input[1].split(\" \").map(x => parseInt(x))\n\tvar now = As\n\twhile(true){\n\t\tvar min = -1\n\t\tvar next = []\n\t\tfor(i=1; i<now.length-1; i++){\n\t\t\tif(min == -1 || now[min] > now[i]) min = i\n\t\t\tif(min == now[i] && now[i-1] + now[i+1] < now[min-1] + now[min+1]) min = i\n\t\t}\n\t\tif(now[min]*2 > now[now.length-2]) min = now.length-2\n\t\tfor(i=0; i<now.length; i++){\n\t\t\tif(i == min-1){\n\t\t\t\tnext.push(now[min-1]+now[min])\n\t\t\t}else if(i == min){\n\n\t\t\t}else if(i == min+1){\n\t\t\t\tnext.push(now[min+1]+now[min])\n\t\t\t}else{\n\t\t\t\tnext.push(now[i])\n\t\t\t}\n\t\t}\n\t\tnow = next\n\t\tif(now.length == 2) break\n\t}\n\tconsole.log(now[0] + now[1])\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1065, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = parseInt(input[0]);\n  const As = input[1].split(\" \").map(x => parseInt(x));\n  var now = As;\n  while (true) {\n    var min = -1;\n    var next = [];\n    for (i = 1; i < now.length - 1; i++) {\n      if (min == -1 || now[min] > now[i]) {\n        min = i;\n      }\n      if (min == now[i] && now[i - 1] + now[i + 1] < now[min - 1] + now[min + 1]) {\n        min = i;\n      }\n    }\n    if (now[min] * 2 > now[now.length - 2]) {\n      min = now.length - 2;\n    }\n    for (i = 0; i < now.length; i++) {\n      if (i == min - 1) {\n        next.push(now[min - 1] + now[min]);\n      } else if (i == min) {} else if (i == min + 1) {\n        next.push(now[min + 1] + now[min]);\n      } else {\n        next.push(now[i]);\n      }\n    }\n    now = next;\n    if (now.length == 2) {\n      break;\n    }\n  }\n  console.log(now[0] + now[1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6006339546391288, "ngram_match_score": 0.17650197718255947, "weighted_ngram_match_score": 0.2947838413739559, "syntax_match_score": 0.93125, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004773784909025691, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013215859030836996, "new_decrease_halstead_effort": 0.091078053728887}}
{"filename": "p03135_1", "type": "JavaScript", "obfuscated": "function main(input){const nums=input['trim']()['split'](/\\s/)['map'](str=>{return Number(str);});console['log']((nums[0x0]/nums[0x1])['toFixed'](0xa));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8 3", "2.6666666667"], ["99 1", "99.0000000000"], ["1 100", "0.0100000000"]], "original": "function main(input) {\n    const nums = input.trim().split(/\\s/).map(str=>{return Number(str)});\n    console.log((nums[0] / nums[1]).toFixed(10));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1066, "deobfuscated": "function main(input) {\n  const nums = input.trim().split(/\\s/).map(str => {\n    return Number(str);\n  });\n  console.log((nums[0] / nums[1]).toFixed(10));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7380413536425501, "ngram_match_score": 0.40210746908120054, "weighted_ngram_match_score": 0.5500579454889998, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03187_1", "type": "JavaScript", "obfuscated": "function main(input){'use strict';const lines=input['split']('\\x0a');const firstLine=lines[0x0]['split']('\\x20')['map'](value=>+value);const L=firstLine[0x0];const N=firstLine[0x1];let xn=lines['slice'](0x1)['filter'](value=>value)['map'](value=>+value);let costs=[];const search=(x,xn,sum)=>{if(xn['length']===0x0){costs['push'](sum);return;}const leftDistance=xn[0x0]>=x?xn[0x0]-x:L-x+xn[0x0];const rightDistance=xn[xn['length']-0x1]<=x?x-xn[xn['length']-0x1]:x+(L-xn[xn['length']-0x1]);const left=xn['concat']();const leftX=left['shift']();const right=xn['concat']();const rightX=right['pop']();search(leftX,left,sum+leftDistance);search(rightX,right,sum+rightDistance);};search(0x0,xn,0x0);console['log'](Math['max']['apply'](null,costs));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["10 3\n2\n7\n9", "15"], ["10 6\n1\n2\n3\n6\n7\n9", "27"], ["314159265 7\n21662711\n77271666\n89022761\n156626166\n160332356\n166902656\n298992265", "1204124749"]], "original": "function main(input) {\n    \"use strict\";\n    const lines = input.split(\"\\n\");\n    const firstLine = lines[0].split(\" \").map((value) => +value);\n    const L = firstLine[0];\n    const N = firstLine[1];\n    let xn = lines.slice(1).filter((value) => value).map((value) => +value);\n\n    let costs = [];\n    const search = (x, xn, sum) => {\n        if (xn.length === 0) {\n            costs.push(sum);\n            return;\n        }\n        const leftDistance = xn[0] >= x ? xn[0] - x : (L - x) + xn[0];\n        const rightDistance = xn[xn.length - 1] <= x ? x - xn[xn.length - 1] : x + (L - xn[xn.length - 1]);\n        const left = xn.concat();\n        const leftX = left.shift();\n        const right = xn.concat();\n        const rightX = right.pop();\n        search(leftX, left, sum + leftDistance);\n        search(rightX, right, sum + rightDistance);\n    }\n\n    search(0, xn, 0);\n    console.log(Math.max.apply(null, costs));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1067, "deobfuscated": "function main(input) {\n  'use strict';\n\n  const lines = input.split(\"\\n\");\n  const firstLine = lines[0].split(\" \").map(value => +value);\n  const L = firstLine[0];\n  const N = firstLine[1];\n  let xn = lines.slice(1).filter(value => value).map(value => +value);\n  let costs = [];\n  const search = (x, xn, sum) => {\n    if (xn.length === 0) {\n      costs.push(sum);\n      return;\n    }\n    const leftDistance = xn[0] >= x ? xn[0] - x : L - x + xn[0];\n    const rightDistance = xn[xn.length - 1] <= x ? x - xn[xn.length - 1] : x + (L - xn[xn.length - 1]);\n    const left = xn.concat();\n    const leftX = left.shift();\n    const right = xn.concat();\n    const rightX = right.pop();\n    search(leftX, left, sum + leftDistance);\n    search(rightX, right, sum + rightDistance);\n  };\n  search(0, xn, 0);\n  console.log(Math.max.apply(null, costs));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8858842462031433, "ngram_match_score": 0.8603123742497977, "weighted_ngram_match_score": 0.8650427923809572, "syntax_match_score": 0.8181818181818182, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03195_1", "type": "JavaScript", "obfuscated": "function main(input){var line1=parseInt(input[0x0]);var ans=![];for(var i=0x1;i<input['length'];i++){var n=parseInt(input[i]);if(n%0x2===0x1)ans=!![];;}console['log'](ans?'first':'second');}function parse(line){var ret=[];var arr=line['split']('\\x20');for(var i=0x0;i<arr['length'];i++){ret['push'](parseInt(arr[i]));}return ret;}var input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['split']('\\x0a');main(input);});", "test_cases": [["2\n1\n2", "first"], ["3\n100000\n30000\n20000", "second"]], "original": "function main(input){\n  var line1 = parseInt(input[0]);\n \n  var ans = false;\n  for (var i=1; i<input.length; i++){\n    var n = parseInt(input[i]);\n    \n    if (n%2 ===1)\n      ans = true;;\n  }\n\n  console.log(ans ? 'first' : 'second');\n}\n\n\nfunction parse(line){\n  var ret = [];\n  var arr = line.split(' ');\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(parseInt(arr[i]));\n  }\n  return ret;\n}\n\nvar input = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main(input);\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1068, "deobfuscated": "function main(input) {\n  var line1 = parseInt(input[0]);\n  var ans = false;\n  for (var i = 1; i < input.length; i++) {\n    var n = parseInt(input[i]);\n    if (n % 2 === 1) {\n      ans = true;\n    }\n    ;\n  }\n  console.log(ans ? \"first\" : \"second\");\n}\nfunction parse(line) {\n  var ret = [];\n  var arr = line.split(\" \");\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(parseInt(arr[i]));\n  }\n  return ret;\n}\nvar input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.split(\"\\n\");\n  main(input);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7395175058187655, "ngram_match_score": 0.4547607942543037, "weighted_ngram_match_score": 0.5583551005803914, "syntax_match_score": 0.944954128440367, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006229941494622304, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03448275862068961, "new_decrease_halstead_effort": 0.14078752161360109}}
{"filename": "p03276_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const K=input[0x0]['split']('\\x20')[0x1]-0x0;const x=input[0x1]['split']('\\x20')['map'](e=>{return e-0x0;});var pointer=x['findIndex'](e=>{return e=>0x0;})-K;if(pointer<0x0){pointer=0x0;}var temp;var ret=Infinity;for(var i=0x0;i<K;i++){if(pointer+i+K-0x1>=x['length']){break;}if(x[pointer+i]*x[pointer+i+K-0x1]<0x0){temp=Math['min'](-x[pointer+i],x[pointer+i+K-0x1])-x[pointer+i]+x[pointer+i+K-0x1];}else{temp=Math['max'](Math['abs'](x[pointer+i]),Math['abs'](x[pointer+i+K-0x1]));}ret=Math['min'](ret,temp);}console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5 3\n-30 -10 10 20 50", "40"], ["3 2\n10 20 30", "20"], ["1 1\n0", "0"], ["8 5\n-9 -7 -4 -3 1 2 3 4", "10"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const K=input[0].split(' ')[1]-0;\n  const x=input[1].split(' ').map(e=>{\n    return e-0;\n  });\n  var pointer=x.findIndex(e=>{\n    return e=>0;\n  })-K;\n  if(pointer<0){\n    pointer=0;\n  }\n  var temp;\n  var ret=Infinity;\n  for(var i=0;i<K;i++){\n    if(pointer+i+K-1>=x.length){\n      break;\n    }\n    if(x[pointer+i]*x[pointer+i+K-1]<0){\n      temp=Math.min(-x[pointer+i],x[pointer+i+K-1])-x[pointer+i]+x[pointer+i+K-1];\n    }else{\n      temp=Math.max(Math.abs(x[pointer+i]),Math.abs(x[pointer+i+K-1]));\n    }\n    ret=Math.min(ret,temp);\n  }\n  console.log(ret);\n      \n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1069, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const K = input[0].split(\" \")[1] - 0;\n  const x = input[1].split(\" \").map(e => {\n    return e - 0;\n  });\n  var pointer = x.findIndex(e => {\n    return e => 0;\n  }) - K;\n  if (pointer < 0) {\n    pointer = 0;\n  }\n  var temp;\n  var ret = Infinity;\n  for (var i = 0; i < K; i++) {\n    if (pointer + i + K - 1 >= x.length) {\n      break;\n    }\n    if (x[pointer + i] * x[pointer + i + K - 1] < 0) {\n      temp = Math.min(-x[pointer + i], x[pointer + i + K - 1]) - x[pointer + i] + x[pointer + i + K - 1];\n    } else {\n      temp = Math.max(Math.abs(x[pointer + i]), Math.abs(x[pointer + i + K - 1]));\n    }\n    ret = Math.min(ret, temp);\n  }\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5379447261331523, "ngram_match_score": 0.03987250406365248, "weighted_ngram_match_score": 0.1448734334359895, "syntax_match_score": 1.0, "dataflow_match_score": 0.967032967032967}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03313_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a');var n=+s[0x0];var m=0x1<<n;var a=s[0x1]['split']('\\x20')['map'](a=>+a);var b=[a[0x0]],c=[[a[0x0],0x0]],d=[[-0x1,-0x1]];for(var i=0x1;i<m;i++){f(i);}console['log'](b['slice'](0x1)['join']('\\x0a'));function f(n){var q={},s=n,t=0x0;while(s){t++;s>>=0x1;}for(var i=0x0;i<t;i++){var u=n&(0x1<<i^0xfffff);if(u===n)continue;q[c[u][0x1]]=c[u][0x0];q[d[u][0x1]]=d[u][0x0];}s=[a[n],n],t=[-0x1,-0x1];for(i in q){if(t[0x0]>q[i])continue;if(s[0x0]>q[i])t=[q[i],i];else{t=s;s=[q[i],i];}}b[n]=Math['max'](b[n-0x1],t[0x0]+s[0x0]);c[n]=t;d[n]=s;}}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2\n1 2 3 1", "3\n4\n5"], ["3\n10 71 84 33 6 47 23 25", "81\n94\n155\n155\n155\n155\n155"], ["4\n75 26 45 72 81 47 97 97 2 2 25 82 84 17 56 32", "101\n120\n147\n156\n156\n178\n194\n194\n194\n194\n194\n194\n194\n194\n194"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  var m = 1 << n;\n  var a = s[1].split(\" \").map(a=>+a);\n  var b = [a[0]], c = [[a[0],0]], d = [[-1,-1]];\n  for(var i = 1; i < m; i++){\n    f(i);\n  }\n  console.log(b.slice(1).join(\"\\n\"));\n  \n  function f(n){\n    var q = {}, s = n, t = 0;\n    while(s){\n      t++;\n      s >>= 1;\n    }\n    for(var i = 0; i < t; i++){\n      var u = n & ((1 << i) ^ 0xFFFFF);\n      if(u === n)continue;\n      q[c[u][1]] = c[u][0];\n      q[d[u][1]] = d[u][0];\n    }\n    s = [a[n],n], t = [-1,-1];\n    for(i in q){\n      if(t[0] > q[i])continue;\n      if(s[0] > q[i])t = [q[i],i];\n      else{t = s; s = [q[i],i];}\n    }\n    b[n] = Math.max(b[n-1], t[0] + s[0]);\n    c[n] = t;\n    d[n] = s;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1070, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  var m = 1 << n;\n  var a = s[1].split(\" \").map(a => +a);\n  var b = [a[0]];\n  var c = [[a[0], 0]];\n  var d = [[-1, -1]];\n  for (var i = 1; i < m; i++) {\n    f(i);\n  }\n  console.log(b.slice(1).join(\"\\n\"));\n  function f(n) {\n    var q = {};\n    var s = n;\n    var t = 0;\n    while (s) {\n      t++;\n      s >>= 1;\n    }\n    for (var i = 0; i < t; i++) {\n      var u = n & (1 << i ^ 1048575);\n      if (u === n) {\n        continue;\n      }\n      q[c[u][1]] = c[u][0];\n      q[d[u][1]] = d[u][0];\n    }\n    s = [a[n], n];\n    t = [-1, -1];\n    for (i in q) {\n      if (t[0] > q[i]) {\n        continue;\n      }\n      if (s[0] > q[i]) {\n        t = [q[i], i];\n      } else {\n        t = s;\n        s = [q[i], i];\n      }\n    }\n    b[n] = Math.max(b[n - 1], t[0] + s[0]);\n    c[n] = t;\n    d[n] = s;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6863711471913216, "ngram_match_score": 0.3725061998557298, "weighted_ngram_match_score": 0.5008853656537429, "syntax_match_score": 0.872093023255814, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.02564102564102555, "length_score": -0.02564102564102555, "increase_maintainability": -0.005423293879360469, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.015503875968992276, "new_decrease_halstead_effort": -0.015503875968992276}}
{"filename": "p03334_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x20')['map'](a=>+a);var n=s[0x0];var a=calc(s[0x1]);var b=calc(s[0x2]);var ans=[];var k=0x0;for(var i=0x0;i<0x2*n;i++)for(var j=0x0;j<0x2*n;j++){if(f(a,i,j)&&f(b,i,j))ans[k++]=i+'\\x20'+j;if(k===n*n){console['log'](ans['join']('\\x0a'));return;}}}function calc(n){var s=0x1;while((n&0x3)===0x0){s++;n>>>=0x2;}return[s,n&0x1];}function f(s,y,x){y=Math['floor'](y/s[0x0]);if(!s[0x1])return!(y&0x1);x=Math['floor'](x/s[0x0]);return!(x+y&0x1);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 1 2", "0 0\n0 2\n2 0\n2 2"], ["3 1 5", "0 0\n0 2\n0 4\n1 1\n1 3\n1 5\n2 0\n2 2\n2 4"]], "original": "function Main(s){\n  s = s.split(\" \").map(a=>+a);\n  var n = s[0];\n  var a = calc(s[1]);\n  var b = calc(s[2]);\n  var ans = [];\n  var k = 0;\n  for(var i = 0; i < 2 * n; i++)\n  for(var j = 0; j < 2 * n; j++){\n    if(f(a,i,j) && f(b,i,j))ans[k++] = i + \" \" + j;\n    if(k === n * n){console.log(ans.join(\"\\n\"));return;}\n  }\n}\nfunction calc(n){\n  var s = 1;\n  while((n & 3) === 0){\n    s++;\n    n >>>= 2;\n  }\n  return [s, n & 1];\n}\nfunction f(s,y,x){\n  y = Math.floor(y / s[0]);\n  if(!s[1])return !(y&1);\n  x = Math.floor(x / s[0]);\n  return !(x+y&1);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1071, "deobfuscated": "function Main(s) {\n  s = s.split(\" \").map(a => +a);\n  var n = s[0];\n  var a = calc(s[1]);\n  var b = calc(s[2]);\n  var ans = [];\n  var k = 0;\n  for (var i = 0; i < n * 2; i++) {\n    for (var j = 0; j < n * 2; j++) {\n      if (f(a, i, j) && f(b, i, j)) {\n        ans[k++] = i + \" \" + j;\n      }\n      if (k === n * n) {\n        console.log(ans.join(\"\\n\"));\n        return;\n      }\n    }\n  }\n}\nfunction calc(n) {\n  var s = 1;\n  while ((n & 3) === 0) {\n    s++;\n    n >>>= 2;\n  }\n  return [s, n & 1];\n}\nfunction f(s, y, x) {\n  y = Math.floor(y / s[0]);\n  if (!s[1]) {\n    return !(y & 1);\n  }\n  x = Math.floor(x / s[0]);\n  return !(x + y & 1);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7176065892768104, "ngram_match_score": 0.4120539024549133, "weighted_ngram_match_score": 0.5768909731708471, "syntax_match_score": 0.8814814814814815, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03451_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var a1=input[0x1]['split']('\\x20')['map'](e=>{return parseInt(e);});var a2=input[0x2]['split']('\\x20')['map'](e=>{return parseInt(e);});var j=a1['length']-0x1;var m=0x0,n=a1['length']-0x2;var r=0x0;var temp;for(var i=j;i>=m;i--){temp=sum(a1['slice'](m,i+0x1))+sum(a2['slice'](i));if(r<temp)r=temp;}function sum(arr){var r=0x0;for(var i=0x0;i<arr['length'];i++){r+=arr[i];}return r;}console['log'](r);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n3 2 2 4 1\n1 2 2 2 1", "14"], ["4\n1 1 1 1\n1 1 1 1", "5"], ["7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2", "29"], ["1\n2\n3", "5"]], "original": "function Main(input) {\ninput = input.split(\"\\n\");\n    var a1 = input[1].split(' ').map(e => { return parseInt(e) })\n    var a2 = input[2].split(' ').map(e => { return parseInt(e) })\n    var j = a1.length - 1\n    var m = 0, n = a1.length - 2\n    var r = 0;\n    var temp;\n\n    for (var i = j; i >= m; i--) {\n        temp = sum(a1.slice(m, i+1)) + sum(a2.slice(i))\n        if (r < temp) r = temp\n    }\n\n    function sum(arr) {\n        var r = 0\n        for (var i = 0; i < arr.length; i++) {\n            r += arr[i]\n        }\n        return r\n    }\n\n    console.log(r)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1072, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var a1 = input[1].split(\" \").map(e => {\n    return parseInt(e);\n  });\n  var a2 = input[2].split(\" \").map(e => {\n    return parseInt(e);\n  });\n  var j = a1.length - 1;\n  var m = 0;\n  var n = a1.length - 2;\n  var r = 0;\n  var temp;\n  for (var i = j; i >= m; i--) {\n    temp = sum(a1.slice(m, i + 1)) + sum(a2.slice(i));\n    if (r < temp) {\n      r = temp;\n    }\n  }\n  function sum(arr) {\n    var r = 0;\n    for (var i = 0; i < arr.length; i++) {\n      r += arr[i];\n    }\n    return r;\n  }\n  console.log(r);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7569028800445532, "ngram_match_score": 0.5550220820672629, "weighted_ngram_match_score": 0.5953539937113264, "syntax_match_score": 0.9369369369369369, "dataflow_match_score": 0.9402985074626866}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00028302500305521505, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.007194244604316502, "new_decrease_halstead_effort": -0.007194244604316502}}
{"filename": "p03525_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N],D]=args['trim']()['split']('\\x0a')['map'](r=>r['split']('\\x20')['map'](v=>v|0x0));if(N===0x1)return''+D[0x0];const q=Array(0xd)['fill'](0x0);let _s=0xc,s=0x1;for(let i=0x0;i<N;i++){if(++q[D[i]]>0x2)return'0';if(D[i]<_s)_s=D[i];if(q[D[i]]===0x2)_s=Math['min'](_s,0x18-0x2*D[i]);}if(q[0xc]>0x1||q[0x0]>0x0)return'0';const mask=q['reduce']((a,b,i)=>a|(b===0x1?0x0:0x1<<i),0x1);for(let m=0x0;m<0x1<<0xd;m=m+0x1|mask){let min=_s;for(let a=0x1;a<=0xc;a++){if(!q[a])continue;for(let b=a+0x1;b<=0xc;b++){if(!q[b])continue;let t=b-a;if(q[a]===0x1&&q[b]===0x1)t=m>>a&0x1^m>>b&0x1?0x18-a-b:t;min=Math['min'](min,t);}}if(s<min)s=min;}return''+s;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["3\n7 12 8", "4"], ["2\n11 11", "2"], ["1\n0", "0"]], "original": "console.log((args=>{\n  const [[N],D] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0));\n  if ( N === 1 ) return `${D[0]}`;\n  const q = Array(13).fill(0);\n  let _s = 12, s = 1;\n  for ( let i = 0; i < N; i++ ) {\n    if ( ++q[D[i]] > 2 ) return '0';\n    if ( D[i] < _s ) _s = D[i];\n    if ( q[D[i]] === 2 ) _s = Math.min(_s,24-2*D[i]);\n  }\n  if ( q[12] > 1 || q[0] > 0 ) return '0';\n  const mask = q.reduce((a,b,i)=>a|(b===1?0:1<<i),1);\n  for ( let m = 0; m < 1<<13; m = m+1|mask ) {\n    let min = _s;\n    for ( let a = 1; a <= 12; a++ ) {\n      if ( !q[a] ) continue;\n      for ( let b = a+1; b <= 12; b++ ) {\n        if ( !q[b] ) continue;\n        let t = b - a;\n        if ( q[a]===1 && q[b] === 1 ) t = (m>>a&1^m>>b&1)?24-a-b:t;\n        min = Math.min( min, t );\n      }\n    }\n    if ( s < min ) s = min;\n  }\n  return `${s}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1073, "deobfuscated": "console.log((args => {\n  const [[N], D] = args.trim().split(\"\\n\").map(r => r.split(\" \").map(v => v | 0));\n  if (N === 1) {\n    return \"\" + D[0];\n  }\n  const q = Array(13).fill(0);\n  let _s = 12;\n  let s = 1;\n  for (let i = 0; i < N; i++) {\n    if (++q[D[i]] > 2) {\n      return \"0\";\n    }\n    if (D[i] < _s) {\n      _s = D[i];\n    }\n    if (q[D[i]] === 2) {\n      _s = Math.min(_s, 24 - D[i] * 2);\n    }\n  }\n  if (q[12] > 1 || q[0] > 0) {\n    return \"0\";\n  }\n  const mask = q.reduce((a, b, i) => a | (b === 1 ? 0 : 1 << i), 1);\n  for (let m = 0; m < 8192; m = m + 1 | mask) {\n    let min = _s;\n    for (let a = 1; a <= 12; a++) {\n      if (!q[a]) {\n        continue;\n      }\n      for (let b = a + 1; b <= 12; b++) {\n        if (!q[b]) {\n          continue;\n        }\n        let t = b - a;\n        if (q[a] === 1 && q[b] === 1) {\n          t = m >> a & 1 ^ m >> b & 1 ? 24 - a - b : t;\n        }\n        min = Math.min(min, t);\n      }\n    }\n    if (s < min) {\n      s = min;\n    }\n  }\n  return \"\" + s;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5400495149708446, "ngram_match_score": 0.2224411352950812, "weighted_ngram_match_score": 0.29787422664108326, "syntax_match_score": 0.7580645161290323, "dataflow_match_score": 0.8818181818181818}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03534_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['trim']();var a=0x0,b=0x0,c=0x0;var ans='YES';for(var i=0x0;i<s['length'];i++){if(s[i]==='a')a++;else if(s[i]==='b')b++;else c++;}if(Math['max'](a,b,c)-Math['min'](a,b,c)>0x1)ans='NO';console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["abac", "YES"], ["aba", "NO"], ["babacccabab", "YES"]], "original": "function Main(s) {\n  s = s.trim();\n  var a = 0, b = 0, c = 0;\n  var ans = \"YES\";\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === \"a\")a++;\n    else if(s[i] === \"b\")b++;\n    else c++;\n  }\n  if(Math.max(a, b, c) - Math.min(a, b, c) > 1)ans = \"NO\";\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1074, "deobfuscated": "function Main(s) {\n  s = s.trim();\n  var a = 0;\n  var b = 0;\n  var c = 0;\n  var ans = \"YES\";\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"a\") {\n      a++;\n    } else if (s[i] === \"b\") {\n      b++;\n    } else {\n      c++;\n    }\n  }\n  if (Math.max(a, b, c) - Math.min(a, b, c) > 1) {\n    ans = \"NO\";\n  }\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.681225226529558, "ngram_match_score": 0.3673109874142295, "weighted_ngram_match_score": 0.5147327758468596, "syntax_match_score": 0.8428571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0008963264882971833, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0219780219780219, "new_decrease_halstead_effort": -0.0219780219780219}}
{"filename": "p03700_1", "type": "JavaScript", "obfuscated": "console['log']((args=>{const [[N,A,B],...h]=args['trim']()['split']`\\n`['map'](r=>r['split']` `['map'](v=>v|0x0));let ok=Math['ceil'](0x3b9aca00/B),ng=0x0;bisect:while(ok>ng+0x1){let m=ok+ng>>0x1,k=m;for(let i=0x0;i<N;i++){let r=h[i]-m*B;if(r<=0x0)continue;k-=Math['ceil'](r/(A-B));}if(k>=0x0)ok=m;else ng=m;}return''+ok;})(require('fs')['readFileSync']('/dev/stdin','utf8')));", "test_cases": [["4 5 3\n8\n7\n4\n2", "2"], ["2 10 4\n20\n20", "4"], ["5 2 1\n900000000\n900000000\n1000000000\n1000000000\n1000000000", "800000000"]], "original": "console.log((args=>{\n  const [[N,A,B],...h] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let ok = Math.ceil(1e9/B), ng = 0;\n  bisect: while ( ok > ng+1 ) {\n    let m = (ok+ng) >> 1, k = m;\n    for ( let i = 0; i < N; i++ ) {\n      let r = h[i] - m*B;\n      if ( r <= 0 ) continue;\n      k -= Math.ceil(r/(A-B));\n    }\n    if ( k >= 0 ) ok = m;\n    else ng = m;\n  }\n  return `${ok}`;\n})(require('fs').readFileSync('/dev/stdin','utf8')));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1075, "deobfuscated": "console.log((args => {\n  const [[N, A, B], ...h] = args.trim().split`\\n`.map(r => r.split` `.map(v => v | 0));\n  let ok = Math.ceil(1000000000 / B);\n  let ng = 0;\n  bisect: while (ok > ng + 1) {\n    let m = ok + ng >> 1;\n    let k = m;\n    for (let i = 0; i < N; i++) {\n      let r = h[i] - m * B;\n      if (r <= 0) {\n        continue;\n      }\n      k -= Math.ceil(r / (A - B));\n    }\n    if (k >= 0) {\n      ok = m;\n    } else {\n      ng = m;\n    }\n  }\n  return \"\" + ok;\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5684125660997452, "ngram_match_score": 0.23663023999522445, "weighted_ngram_match_score": 0.3326967161330798, "syntax_match_score": 0.7578947368421053, "dataflow_match_score": 0.9464285714285714}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03763_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var S='abcdefghijklmnopqrstuvwxyz'['split']('');var array=new Array(0x1a);array['fill'](0x0);var temp;for(var i=0x1;i<input['length'];i++){temp=new Array(0x1a);temp['fill'](0x0);for(var j=0x0;j<input[i]['length'];j++){temp[S['findIndex'](e=>{return e===input[i][j];})]++;}for(var j=0x0;j<0x1a;j++){if(array[j]>temp[j]||i===0x1){array[j]=temp[j];}}}var ret='';array['forEach']((e,i)=>{ret+=S[i]['repeat'](e);});console['log'](ret);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\ncbaa\ndaacc\nacacac", "aac"], ["3\na\naa\nb", ""]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var S=\"abcdefghijklmnopqrstuvwxyz\".split('');\n  var array=new Array(26);\n  array.fill(0);\n  var temp;\n  for(var i=1;i<input.length;i++){\n    temp=new Array(26);\n    temp.fill(0);\n    for(var j=0;j<input[i].length;j++){\n      temp[S.findIndex(e=>{return e===input[i][j];})]++;\n    }\n    \n    for(var j=0;j<26;j++){\n      if(array[j]>temp[j]||i===1){\n        array[j]=temp[j];\n      }\n    }\n  }\n  var ret='';\n  array.forEach((e,i)=>{\n    ret+=S[i].repeat(e);\n  });\n  console.log(ret);\n\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1076, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var S = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  var array = new Array(26);\n  array.fill(0);\n  var temp;\n  for (var i = 1; i < input.length; i++) {\n    temp = new Array(26);\n    temp.fill(0);\n    for (var j = 0; j < input[i].length; j++) {\n      temp[S.findIndex(e => {\n        return e === input[i][j];\n      })]++;\n    }\n    for (var j = 0; j < 26; j++) {\n      if (array[j] > temp[j] || i === 1) {\n        array[j] = temp[j];\n      }\n    }\n  }\n  var ret = \"\";\n  array.forEach((e, i) => {\n    ret += S[i].repeat(e);\n  });\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5646452434783708, "ngram_match_score": 0.08105070135810206, "weighted_ngram_match_score": 0.2108636058887142, "syntax_match_score": 1.0, "dataflow_match_score": 0.9666666666666667}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03816_1", "type": "JavaScript", "obfuscated": "'use strict';function main(n,array){let counter={};for(let a of array){counter[a]=counter[a]||0x0;counter[a]++;}let nums=Object['keys'](counter);let evenCount=nums['reduce']((count,num)=>{if(counter[num]%0x2===0x0){return count+0x1;}else{return count;}},0x0);let answer;if(evenCount%0x2===0x0){answer=nums['length'];}else{answer=nums['length']-0x1;}console['log'](answer);}function doMain(){let input='';process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',chunk=>{input+=chunk;});process['stdin']['on']('end',()=>{input=input['trim']()['split']('\\x0a');let n=Number(input[0x0]);let array=input[0x1]['split']('\\x20')['map'](a=>Number(a));main(n,array);});}doMain();", "test_cases": [["5\n1 2 1 3 7", "3"], ["15\n1 3 5 2 1 3 2 8 8 6 2 6 11 1 1", "7"]], "original": "'use strict'\n\nfunction main (n, array) {\n  let counter = {}\n  for (let a of array) {\n    counter[a] = counter[a] || 0\n    counter[a]++\n  }\n  let nums = Object.keys(counter)\n  let evenCount = nums.reduce((count, num) => {\n    if (counter[num] % 2 === 0) {\n      return count + 1\n    } else {\n      return count\n    }\n  }, 0)\n  let answer\n  if (evenCount % 2 === 0) {\n    answer = nums.length\n  } else {\n    answer = nums.length - 1\n  }\n  console.log(answer)\n}\n\nfunction doMain () {\n  let input = ''\n  process.stdin.resume()\n  process.stdin.setEncoding('utf8')\n  process.stdin.on('data', (chunk) => {\n    input += chunk\n  })\n  process.stdin.on('end', () => {\n    input = input.trim().split('\\n')\n    let n = Number(input[0])\n    let array = input[1].split(' ').map(a => Number(a))\n    main(n, array)\n  })\n}\n\ndoMain()\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1077, "deobfuscated": "'use strict';\n\nfunction main(n, array) {\n  let counter = {};\n  for (let a of array) {\n    counter[a] = counter[a] || 0;\n    counter[a]++;\n  }\n  let nums = Object.keys(counter);\n  let evenCount = nums.reduce((count, num) => {\n    if (counter[num] % 2 === 0) {\n      return count + 1;\n    } else {\n      return count;\n    }\n  }, 0);\n  let answer;\n  if (evenCount % 2 === 0) {\n    answer = nums.length;\n  } else {\n    answer = nums.length - 1;\n  }\n  console.log(answer);\n}\nfunction doMain() {\n  let input = \"\";\n  process.stdin.resume();\n  process.stdin.setEncoding(\"utf8\");\n  process.stdin.on(\"data\", chunk => {\n    input += chunk;\n  });\n  process.stdin.on(\"end\", () => {\n    input = input.trim().split(\"\\n\");\n    let n = Number(input[0]);\n    let array = input[1].split(\" \").map(a => Number(a));\n    main(n, array);\n  });\n}\ndoMain();\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7348199619979874, "ngram_match_score": 0.5004869186585372, "weighted_ngram_match_score": 0.514816321146278, "syntax_match_score": 0.9398496240601504, "dataflow_match_score": 0.9841269841269841}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03856_1", "type": "JavaScript", "obfuscated": "'use strict';var fs=require('fs');var input=Buffer['alloc'](0x10000);var length=fs['readSync'](0x0,input,0x0,0x10000);var text=input['toString']()['slice'](0x0,length)['trim']();var dp=Array(text['length']+0x1)['fill'](![]);dp[0x0]=!![];for(var index=0x5;index<=text['length'];index++){if(dp[index-0x5]===!![]&&text['slice'](index-0x5,index)==='dream'){dp[index]=!![];continue;}if(dp[index-0x7]===!![]&&text['slice'](index-0x7,index)==='dreamer'){dp[index]=!![];continue;}if(dp[index-0x5]===!![]&&text['slice'](index-0x5,index)==='erase'){dp[index]=!![];continue;}if(dp[index-0x6]===!![]&&text['slice'](index-0x6,index)==='eraser'){dp[index]=!![];continue;}}console['log'](dp[text['length']]?'YES':'NO');", "test_cases": [["erasedream", "YES"], ["dreameraser", "YES"], ["dreamerer", "NO"]], "original": "'use strict';\n\nvar fs = require('fs');\n\nvar input = Buffer.alloc(0x10000);\nvar length = fs.readSync(0, input, 0, 0x10000);\n\nvar text = input.toString().slice(0, length).trim();\nvar dp = Array(text.length + 1).fill(false);\ndp[0] = true;\n\nfor (var index = 5; index <= text.length; index++) {\n    if (dp[index - 5] === true && text.slice(index - 5, index) === 'dream') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 7] === true && text.slice(index - 7, index) === 'dreamer') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 5] === true && text.slice(index - 5, index) === 'erase') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 6] === true && text.slice(index - 6, index) === 'eraser') {\n        dp[index] = true;\n        continue;\n    }\n}\n\nconsole.log(dp[text.length] ? 'YES' : 'NO');", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1078, "deobfuscated": "'use strict';\n\nvar fs = require(\"fs\");\nvar input = Buffer.alloc(65536);\nvar length = fs.readSync(0, input, 0, 65536);\nvar text = input.toString().slice(0, length).trim();\nvar dp = Array(text.length + 1).fill(false);\ndp[0] = true;\nfor (var index = 5; index <= text.length; index++) {\n  if (dp[index - 5] === true && text.slice(index - 5, index) === \"dream\") {\n    dp[index] = true;\n    continue;\n  }\n  if (dp[index - 7] === true && text.slice(index - 7, index) === \"dreamer\") {\n    dp[index] = true;\n    continue;\n  }\n  if (dp[index - 5] === true && text.slice(index - 5, index) === \"erase\") {\n    dp[index] = true;\n    continue;\n  }\n  if (dp[index - 6] === true && text.slice(index - 6, index) === \"eraser\") {\n    dp[index] = true;\n    continue;\n  }\n}\nconsole.log(dp[text.length] ? \"YES\" : \"NO\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9120826612501184, "ngram_match_score": 0.8298623914053942, "weighted_ngram_match_score": 0.8338528689796946, "syntax_match_score": 1.0, "dataflow_match_score": 0.9846153846153847}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.01164820281561929, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.136150234741784, "new_decrease_halstead_effort": 0.2522251179952466}}
{"filename": "p03864_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['trim']()['split']('\\x0a')['map'](function(x){return x['split']('\\x20');});var N=parseInt(input[0x0][0x0],0xa);var x=parseInt(input[0x0][0x1],0xa);var vec_a=input[0x1]['map'](e=>parseInt(e,0xa));var sum=function(arr){var sum=0x0;arr['forEach'](function(elm){sum+=elm;});return sum;};var vec_b=[];var tmp=0x0;for(var i=0x0;i<N;i++){if(vec_a[i]>=x-tmp)vec_b['push'](x-tmp);else vec_b['push'](vec_a[i]);tmp=vec_b[i];}console['log'](sum(vec_a)-sum(vec_b));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n2 2 2", "1"], ["6 1\n1 6 1 2 0 4", "11"], ["5 9\n3 1 4 1 5", "0"], ["2 0\n5 5", "10"]], "original": "\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar N = parseInt(input[0][0], 10);\n\tvar x = parseInt(input[0][1], 10);\n\tvar vec_a = input[1].map(e => parseInt(e, 10));\n\tvar sum  = function(arr) {\n\t\tvar sum = 0;\n\t\tarr.forEach(function(elm) {\n\t\t\tsum += elm;\n\t\t});\n\t\treturn sum;\n\t};\n\tvar vec_b = [];\n\tvar tmp = 0;\n\tfor (var i = 0; i < N; i++){\n\t\tif (vec_a[i] >= (x - tmp)) vec_b.push(x - tmp);\n\t\telse vec_b.push(vec_a[i]);\n\t\ttmp = vec_b[i];\n\t}\n\tconsole.log(sum(vec_a) - sum(vec_b));\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1079, "deobfuscated": "function Main(input) {\n  input = input.trim().split(\"\\n\").map(function (x) {\n    return x.split(\" \");\n  });\n  var N = parseInt(input[0][0], 10);\n  var x = parseInt(input[0][1], 10);\n  var vec_a = input[1].map(e => parseInt(e, 10));\n  function sum(arr) {\n    var sum = 0;\n    arr.forEach(function (elm) {\n      sum += elm;\n    });\n    return sum;\n  }\n  var vec_b = [];\n  var tmp = 0;\n  for (var i = 0; i < N; i++) {\n    if (vec_a[i] >= x - tmp) {\n      vec_b.push(x - tmp);\n    } else {\n      vec_b.push(vec_a[i]);\n    }\n    tmp = vec_b[i];\n  }\n  console.log(sum(vec_a) - sum(vec_b));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7460422304230628, "ngram_match_score": 0.6303811347555749, "weighted_ngram_match_score": 0.6809376287543355, "syntax_match_score": 0.8859649122807017, "dataflow_match_score": 0.7868852459016393}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0012939201303947545, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020547945205479423, "new_decrease_halstead_effort": 0.03326810176125239}}
{"filename": "p03891_1", "type": "JavaScript", "obfuscated": "function Main(input){var data=input['split'](/\\a\\n|\\a|\\n/)['map'](function(s){return parseInt(s);});var x=[[data[0x0],data[0x1],0x0],[0x0,data[0x2],0x0],[0x0,0x0,0x0]];var sum=0x3*x[0x1][0x1];x[0x0][0x2]=sum-x[0x0][0x0]-x[0x0][0x1];x[0x2][0x1]=sum-x[0x0][0x1]-x[0x1][0x1];x[0x2][0x2]=sum-x[0x0][0x0]-x[0x1][0x1];x[0x2][0x0]=sum-x[0x2][0x1]-x[0x2][0x2];x[0x1][0x0]=sum-x[0x0][0x0]-x[0x2][0x0];x[0x1][0x2]=sum-x[0x0][0x2]-x[0x2][0x2];console['log'](x[0x0][0x0]+'\\x20'+x[0x0][0x1]+'\\x20'+x[0x0][0x2]);console['log'](x[0x1][0x0]+'\\x20'+x[0x1][0x1]+'\\x20'+x[0x1][0x2]);console['log'](x[0x2][0x0]+'\\x20'+x[0x2][0x1]+'\\x20'+x[0x2][0x2]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["8\n3\n5", "8 3 4\n1 5 9\n6 7 2"], ["1\n1\n1", "1 1 1\n1 1 1\n1 1 1"]], "original": "function Main(input) {\n\tvar data = input.split(/\\a\\n|\\a|\\n/).map(function(s) { return parseInt(s); });\n\tvar x = [ [data[0], data[1], 0],\n\t\t\t\t[0, data[2], 0],\n\t\t\t\t[0, 0, 0] ]\n\tvar sum = 3 * x[1][1]\n\tx[0][2] = sum - x[0][0] - x[0][1]\n\tx[2][1] = sum - x[0][1] - x[1][1]\n\tx[2][2] = sum - x[0][0] - x[1][1]\n\tx[2][0] = sum - x[2][1] - x[2][2]\n\tx[1][0] = sum - x[0][0] - x[2][0]\n\tx[1][2] = sum - x[0][2] - x[2][2]\n\t\n\tconsole.log(x[0][0] + \" \" + x[0][1] + \" \" + x[0][2])\n\tconsole.log(x[1][0] + \" \" + x[1][1] + \" \" + x[1][2])\n\tconsole.log(x[2][0] + \" \" + x[2][1] + \" \" + x[2][2])\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1080, "deobfuscated": "function Main(input) {\n  var data = input.split(/\\a\\n|\\a|\\n/).map(function (s) {\n    return parseInt(s);\n  });\n  var x = [[data[0], data[1], 0], [0, data[2], 0], [0, 0, 0]];\n  var sum = x[1][1] * 3;\n  x[0][2] = sum - x[0][0] - x[0][1];\n  x[2][1] = sum - x[0][1] - x[1][1];\n  x[2][2] = sum - x[0][0] - x[1][1];\n  x[2][0] = sum - x[2][1] - x[2][2];\n  x[1][0] = sum - x[0][0] - x[2][0];\n  x[1][2] = sum - x[0][2] - x[2][2];\n  console.log(x[0][0] + \" \" + x[0][1] + \" \" + x[0][2]);\n  console.log(x[1][0] + \" \" + x[1][1] + \" \" + x[1][2]);\n  console.log(x[2][0] + \" \" + x[2][1] + \" \" + x[2][2]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8148641552791822, "ngram_match_score": 0.6475095663147326, "weighted_ngram_match_score": 0.6514207390125225, "syntax_match_score": 0.9605263157894737, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03910_1", "type": "JavaScript", "obfuscated": "function myout(text){console['log'](text);}function Main(input){input=parseInt(input);var list=[];var output=0x0;for(var i=0x1;i<=input;i++){output+=i;list['push'](i);if(output==input){myout(list['join']('\\x0a'));return;}else if(output>input){var diff=output-input;list['splice'](list['indexOf'](diff),0x1);myout(list['join']('\\x0a'));return;}}}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["4", "1\n3"], ["7", "1\n2\n4"], ["1", "1"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\tinput = parseInt(input);\n\t//input = input.split(\" \");\n\t//input = input.split(\"\\n\");\n\t//input = input.split(\" \").map((a)=>Number(a));\n\t//input = input.split(\"\\n\").map((a)=>Number(a));\n  var list = [];\n  var output = 0;\n  for(var i = 1; i <= input; i++){\n    output += i;\n    list.push(i);\n    if(output == input){\n       myout(list.join(\"\\n\"));\n      return;\n    }else if(output > input){\n      var diff = output - input;\n      list.splice(list.indexOf(diff),1);\n      myout(list.join(\"\\n\"));\n      return;\n    }\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1081, "deobfuscated": "function myout(text) {\n  console.log(text);\n}\nfunction Main(input) {\n  input = parseInt(input);\n  var list = [];\n  var output = 0;\n  for (var i = 1; i <= input; i++) {\n    output += i;\n    list.push(i);\n    if (output == input) {\n      myout(list.join(\"\\n\"));\n      return;\n    } else if (output > input) {\n      var diff = output - input;\n      list.splice(list.indexOf(diff), 1);\n      myout(list.join(\"\\n\"));\n      return;\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7225736871744701, "ngram_match_score": 0.4380997689342504, "weighted_ngram_match_score": 0.45219497976363004, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03929_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x20');var valN=input[0x0];var valK=input[0x1];if(valN<0x3){console['log']('0');return;}var count=0x0;for(var i=0x0;i+0x2<valN;i++){for(var j=0x0;j<0x5;j++){if((i*0x3f+j*0x9+0x51)%0xb==valK){count++;}}}console['log'](count);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["7 7", "2"], ["6 0", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\" \");\n\t//カレンダーの段数 n\n\tvar valN = input[0];\n\t//正方形を置く時の条件となる数 k\n\tvar valK = input[1];\n\t\n\t//値のチェック\n\tif(valN < 3){\n\t\tconsole.log(\"0\");\n\t\treturn;\n\t}\n\t\n\tvar count = 0;\n\t//段数の数だけ繰り返す\n\tfor(var i = 0;i+2<valN;i++){\n\t\t//行数の数だけ繰り返す\n\t\tfor(var j = 0;j<5;j++){\n\t\t\t//条件チェック\n\t\t\tif((i*63 + j*9 + 81)%11 == valK){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tconsole.log(count);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1082, "deobfuscated": "function Main(input) {\n  input = input.split(\" \");\n  var valN = input[0];\n  var valK = input[1];\n  if (valN < 3) {\n    console.log(\"0\");\n    return;\n  }\n  var count = 0;\n  for (var i = 0; i + 2 < valN; i++) {\n    for (var j = 0; j < 5; j++) {\n      if ((i * 63 + j * 9 + 81) % 11 == valK) {\n        count++;\n      }\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6528553924725424, "ngram_match_score": 0.280108574271543, "weighted_ngram_match_score": 0.3313129956186269, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p04028_1", "type": "JavaScript", "obfuscated": "var mod=0x3b9aca00+0x7;function Main(s){var n=parseInt(s[0x0]);var sl=s[0x1]['length'];var a=Array(n+0x1)['fill'](0x0)['map'](a=>Array(n+0x2)['fill'](0x0));a[0x0][0x0]=0x1;for(var i=0x1;i<=n;i++){a[i][0x0]=a[i-0x1][0x0]+a[i-0x1][0x1];a[i][0x0]%=mod;for(var j=0x1;j<=i;j++){a[i][j]=a[i-0x1][j-0x1]*0x2+a[i-0x1][j+0x1];a[i][j]%=mod;}}console['log'](permod(a[n][sl],powmod(0x2,sl)));}function abmod(){var rt=arguments[0x0];for(var i=0x1;i<arguments['length'];i++){rt=(rt>>>0x10)*arguments[i]%mod*0x10000+(rt&0xffff)*arguments[i];rt%=mod;}return rt;}function powmod(a,n){var rt=0x1;while(n){if(n&0x1)rt=abmod(a,rt);a=abmod(a,a);n>>>=0x1;}return rt;}function permod(a,n){var rt=powmod(n,mod-0x2);rt=abmod(rt,a);return rt;}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\\x0a'));", "test_cases": [["3\n0", "5"], ["300\n1100100", "519054663"], ["5000\n01000001011101000100001101101111011001000110010101110010000", "500886057"]], "original": "var mod = 1e9+7;\nfunction Main(s) {\n  var n = parseInt(s[0]);\n  var sl = s[1].length;\n  var a = Array(n+1).fill(0).map(a => Array(n+2).fill(0));\n  a[0][0] = 1;\n  for(var i = 1; i <= n; i++){\n    a[i][0] = a[i-1][0] + a[i-1][1];\n    a[i][0] %= mod;\n    for(var j = 1; j <= i; j++){\n      a[i][j] = a[i-1][j-1] * 2 + a[i-1][j+1];\n      a[i][j] %= mod;\n    }\n  }\n  console.log(permod(a[n][sl], powmod(2, sl)));\n}\nfunction abmod(){\n\tvar rt = arguments[0];\n\tfor(var i = 1; i < arguments.length; i++){\n\t\trt = (rt >>> 16) * arguments[i] % mod * 0x10000 + (rt & 0xFFFF) * arguments[i];\n\t\trt %= mod;\n\t}\n\treturn rt;\n}\nfunction powmod(a,n){//a^n%mod\n\tvar rt = 1;\n\twhile(n){\n\t\tif(n & 1) rt = abmod(a, rt);\n\t\ta = abmod(a, a);\n\t\tn >>>= 1;\n\t}\n\treturn rt;\n}\nfunction permod(a,n){\n\tvar rt = powmod(n, mod-2);\n\trt = abmod(rt, a);\n\treturn rt;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1083, "deobfuscated": "var mod = 1000000007;\nfunction Main(s) {\n  var n = parseInt(s[0]);\n  var sl = s[1].length;\n  var a = Array(n + 1).fill(0).map(a => Array(n + 2).fill(0));\n  a[0][0] = 1;\n  for (var i = 1; i <= n; i++) {\n    a[i][0] = a[i - 1][0] + a[i - 1][1];\n    a[i][0] %= mod;\n    for (var j = 1; j <= i; j++) {\n      a[i][j] = a[i - 1][j - 1] * 2 + a[i - 1][j + 1];\n      a[i][j] %= mod;\n    }\n  }\n  console.log(permod(a[n][sl], powmod(2, sl)));\n}\nfunction abmod() {\n  var rt = arguments[0];\n  for (var i = 1; i < arguments.length; i++) {\n    rt = (rt >>> 16) * arguments[i] % mod * 65536 + (rt & 65535) * arguments[i];\n    rt %= mod;\n  }\n  return rt;\n}\nfunction powmod(a, n) {\n  var rt = 1;\n  while (n) {\n    if (n & 1) {\n      rt = abmod(a, rt);\n    }\n    a = abmod(a, a);\n    n >>>= 1;\n  }\n  return rt;\n}\nfunction permod(a, n) {\n  var rt = powmod(n, mod - 2);\n  rt = abmod(rt, a);\n  return rt;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5823499248516952, "ngram_match_score": 0.4940738993073728, "weighted_ngram_match_score": 0.6200877048613127, "syntax_match_score": 0.9485714285714286, "dataflow_match_score": 0.26666666666666666}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0078125, "new_decrease_halstead_effort": -0.009430655515810127}}
{"filename": "p00055_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);Arr['forEach'](function(v){var arr=[0x0,v];for(var i=0x2;i<=0xa;i++){arr[i]=i%0x2==0x0?arr[i-0x1]*0x2:arr[i-0x1]/0x3;}var sum=arr['reduce'](function(a,b){return a+b;});console['log'](sum['toFixed'](0x8));});", "test_cases": [["1.0\n2.0\n3.0", "7.81481481\n15.62962963\n23.44444444"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nArr.forEach(function(v){\n   var arr=[0,v];\n   for(var i=2;i<=10;i++){\n         arr[i]=(i%2==0)?arr[i-1]*2 : arr[i-1]/3;\n   }\n   var sum=arr.reduce(function(a,b){return a+b;});\n   console.log(sum.toFixed(8));\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1084, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nArr.forEach(function (v) {\n  var arr = [0, v];\n  for (var i = 2; i <= 10; i++) {\n    arr[i] = i % 2 == 0 ? arr[i - 1] * 2 : arr[i - 1] / 3;\n  }\n  var sum = arr.reduce(function (a, b) {\n    return a + b;\n  });\n  console.log(sum.toFixed(8));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4590580187006014, "ngram_match_score": 0.02377249283541555, "weighted_ngram_match_score": 0.08006521576980702, "syntax_match_score": 0.7323943661971831, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00057_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var n=Arr[i]-0x0+0x1;var x=0x1/0x2*n*(n-0x1);console['log'](x+0x1);}", "test_cases": [["1\n3", "2\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var n=(Arr[i]-0)+1;\n   var x=1/2*n*(n-1);\n   console.log(x+1);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1085, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var n = Arr[i] - 0 + 1;\n  var x = 1 / 2 * n * (n - 1);\n  console.log(x + 1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4654227355971008, "ngram_match_score": 0.026220538724357412, "weighted_ngram_match_score": 0.09078955260021615, "syntax_match_score": 0.7446808510638298, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00066_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('');var a1=arr[0x0];var a2=arr[0x1];var a3=arr[0x2];var a4=arr[0x3];var a5=arr[0x4];var a6=arr[0x5];var a7=arr[0x6];var a8=arr[0x7];var a9=arr[0x8];var d=0x0;for(var j=0x0;j<0x2;j++){var s=j==0x0?'o':'x';var S=s+s+s;if(a1+a2+a3==S){console['log'](s);break;}if(a4+a5+a6==S){console['log'](s);break;}if(a7+a8+a9==S){console['log'](s);break;}if(a1+a4+a7==S){console['log'](s);break;}if(a2+a5+a8==S){console['log'](s);break;}if(a3+a6+a9==S){console['log'](s);break;}if(a1+a5+a9==S){console['log'](s);break;}if(a3+a5+a7==S){console['log'](s);break;}d++;}if(d==0x2)console['log']('d');}", "test_cases": [["ooosxssxs\nxoosxsosx\nooxxxooxo", "o\nx\nd"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\nvar arr=Arr[i].split(\"\");\nvar a1=arr[0];\nvar a2=arr[1];\nvar a3=arr[2];\nvar a4=arr[3];\nvar a5=arr[4];\nvar a6=arr[5];\nvar a7=arr[6];\nvar a8=arr[7];\nvar a9=arr[8];\nvar d=0;\nfor(var j=0;j<2;j++){\n   var s=(j==0)?\"o\":\"x\";\n   var S=s+s+s;\n   if(a1+a2+a3==S){console.log(s);break;}\n   if(a4+a5+a6==S){console.log(s);break;}\n   if(a7+a8+a9==S){console.log(s);break;}\n   if(a1+a4+a7==S){console.log(s);break;}\n   if(a2+a5+a8==S){console.log(s);break;}\n   if(a3+a6+a9==S){console.log(s);break;}\n   if(a1+a5+a9==S){console.log(s);break;}\n   if(a3+a5+a7==S){console.log(s);break;}\n   d++;\n}\nif(d==2)console.log(\"d\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1086, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\"\");\n  var a1 = arr[0];\n  var a2 = arr[1];\n  var a3 = arr[2];\n  var a4 = arr[3];\n  var a5 = arr[4];\n  var a6 = arr[5];\n  var a7 = arr[6];\n  var a8 = arr[7];\n  var a9 = arr[8];\n  var d = 0;\n  for (var j = 0; j < 2; j++) {\n    var s = j == 0 ? \"o\" : \"x\";\n    var S = s + s + s;\n    if (a1 + a2 + a3 == S) {\n      console.log(s);\n      break;\n    }\n    if (a4 + a5 + a6 == S) {\n      console.log(s);\n      break;\n    }\n    if (a7 + a8 + a9 == S) {\n      console.log(s);\n      break;\n    }\n    if (a1 + a4 + a7 == S) {\n      console.log(s);\n      break;\n    }\n    if (a2 + a5 + a8 == S) {\n      console.log(s);\n      break;\n    }\n    if (a3 + a6 + a9 == S) {\n      console.log(s);\n      break;\n    }\n    if (a1 + a5 + a9 == S) {\n      console.log(s);\n      break;\n    }\n    if (a3 + a5 + a7 == S) {\n      console.log(s);\n      break;\n    }\n    d++;\n  }\n  if (d == 2) {\n    console.log(\"d\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49220580000737835, "ngram_match_score": 0.00800567864016475, "weighted_ngram_match_score": 0.03816558768769114, "syntax_match_score": 0.9226519337016574, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00067_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){var dy=[0x0,0x0,-0x1,0x1];var dx=[-0x1,0x1,0x0,0x0];for(var i=0x0;i<0x4;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||yy>=0xc||xx<0x0||xx>=0xc)continue;if(yx[yy][xx]=='a'){yx[yy][xx]=cnt;bomb(yy,xx);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=0x0;var cnt=0x0;var yx=[];for(var I=0x0;I<Arr['length'];I++){n++;var v=Arr[I]['replace'](/1/g,'a');var arr=v['split']('');yx['push'](arr);if(n!=0xc)continue;cnt=0x0;for(var i=0x0;i<0xc;i++){for(var j=0x0;j<0xc;j++){if(yx[i][j]=='a'){cnt++;yx[i][j]=cnt;bomb(i,j);}}}console['log'](cnt);n=0x0;yx=[];I++;}", "test_cases": [["111100001111\n111000001111\n110000001111\n100000001111\n000100010000\n000000111000\n000001111100\n100011111110\n110001111100\n111000111000\n111100010000\n000000000000\n\n010001111100\n110010000010\n010010000001\n010000000001\n010000000110\n010000111000\n010000000100\n010000000010\n010000000001\n010010000001\n010010000010\n111001111100\n\n000000000000\n111111111111\n100010100001\n100010100001\n100010100001\n100010100001\n100100100101\n101000011101\n100000000001\n100000000001\n111111111111\n100000000001", "5\n13\n4"]], "original": "function bomb(y,x){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=12 || xx<0 || xx>=12)continue;\n      if(yx[yy][xx]==\"a\"){yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=0;\nvar cnt=0;\nvar yx=[];\nfor(var I=0;I<Arr.length;I++){\n   n++;\n   var v=Arr[I].replace(/1/g,\"a\");\n   var arr=v.split(\"\");\n   yx.push(arr);\n   if(n!=12)continue;\n   cnt=0;\n   for(var i=0;i<12;i++){\n      for(var j=0;j<12;j++){\n         if(yx[i][j]==\"a\"){cnt++;yx[i][j]=cnt;bomb(i,j);}\n      }\n   }\n   console.log(cnt);\n   n=0;\n   yx=[];\n   I++;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1087, "deobfuscated": "function bomb(y, x) {\n  var dy = [0, 0, -1, 1];\n  var dx = [-1, 1, 0, 0];\n  for (var i = 0; i < 4; i++) {\n    var yy = y + dy[i];\n    var xx = x + dx[i];\n    if (yy < 0 || yy >= 12 || xx < 0 || xx >= 12) {\n      continue;\n    }\n    if (yx[yy][xx] == \"a\") {\n      yx[yy][xx] = cnt;\n      bomb(yy, xx);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = 0;\nvar cnt = 0;\nvar yx = [];\nfor (var I = 0; I < Arr.length; I++) {\n  n++;\n  var v = Arr[I].replace(/1/g, \"a\");\n  var arr = v.split(\"\");\n  yx.push(arr);\n  if (n != 12) {\n    continue;\n  }\n  cnt = 0;\n  for (var i = 0; i < 12; i++) {\n    for (var j = 0; j < 12; j++) {\n      if (yx[i][j] == \"a\") {\n        cnt++;\n        yx[i][j] = cnt;\n        bomb(i, j);\n      }\n    }\n  }\n  console.log(cnt);\n  n = 0;\n  yx = [];\n  I++;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5188541049156756, "ngram_match_score": 0.038592262719723436, "weighted_ngram_match_score": 0.12832742491683521, "syntax_match_score": 0.9084967320261438, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00073_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var lines=input['split']('\\x0a');while(!![]){var x=+lines['shift']();var h=+lines['shift']();if(x+h==0x0)break;console['log']((x*x+x*Math['sqrt'](0x4*h*h+x*x))['toFixed'](0x6));}", "test_cases": [["6\n4\n7\n9\n0\n0", "96.000000\n184.192455"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nwhile (true) {\n    var x = +lines.shift();\n    var h = +lines.shift();\n    if (x + h == 0)\n        break;\n\n    console.log(((x * x) + (x * Math.sqrt(4 * h * h + x * x))).toFixed(6));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1088, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar lines = input.split(\"\\n\");\nwhile (true) {\n  var x = +lines.shift();\n  var h = +lines.shift();\n  if (x + h == 0) {\n    break;\n  }\n  console.log((x * x + x * Math.sqrt(h * 4 * h + x * x)).toFixed(6));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6901379824521057, "ngram_match_score": 0.5198335438011467, "weighted_ngram_match_score": 0.5573850526739424, "syntax_match_score": 0.6833333333333333, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007036333234975434, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.038961038961038974, "new_decrease_halstead_effort": 0.2002713118328573}}
{"filename": "p00077_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['forEach'](function(v){v=v['replace'](/@(\\d)(.)/g,function(s,s1,s2){return Array(s1-0x0+0x1)['join'](s2);});console['log'](v);});", "test_cases": [["ab@5C1@8050\n@99+1=1@90", "abCCCCC10000000050\n999999999+1=1000000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   v=v.replace(/@(\\d)(.)/g,function(s,s1,s2){\n      return Array((s1-0)+1).join(s2);\n   });\n   console.log(v);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1089, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.forEach(function (v) {\n  v = v.replace(/@(\\d)(.)/g, function (s, s1, s2) {\n    return Array(s1 - 0 + 1).join(s2);\n  });\n  console.log(v);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4288745206241511, "ngram_match_score": 0.057885755801795086, "weighted_ngram_match_score": 0.13761232669480916, "syntax_match_score": 0.52, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00079_1", "type": "JavaScript", "obfuscated": "function heron(a,b,c){var s=(a+b+c)/0x2;var S=Math['sqrt'](s*(s-a)*(s-b)*(s-c));return S;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var xy1=Arr['shift']()['split'](',')['map'](Number);var xy2=Arr['shift']()['split'](',')['map'](Number);var x1=xy1[0x0];var y1=xy1[0x1];var x2=xy2[0x0];var y2=xy2[0x1];var sum=0x0;for(var I=0x0;I<Arr['length'];I++){var xy3=Arr[I]['split'](',')['map'](Number);var x3=xy3[0x0];var y3=xy3[0x1];var d12=Math['sqrt'](Math['pow'](x1-x2,0x2)+Math['pow'](y1-y2,0x2));var d13=Math['sqrt'](Math['pow'](x1-x3,0x2)+Math['pow'](y1-y3,0x2));var d23=Math['sqrt'](Math['pow'](x2-x3,0x2)+Math['pow'](y2-y3,0x2));sum+=heron(d12,d13,d23);x2=xy3[0x0];y2=xy3[0x1];}console['log'](sum['toFixed'](0x6));", "test_cases": [["0.0,0.0\n0.0,1.0 \n1.0,1.0 \n2.0,0.0 \n1.0,-1.0", "2.500000"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar xy1=(Arr.shift()).split(\",\").map(Number);\nvar xy2=(Arr.shift()).split(\",\").map(Number);\nvar x1=xy1[0];var y1=xy1[1];\nvar x2=xy2[0];var y2=xy2[1];\nvar sum=0;\nfor(var I=0;I<Arr.length;I++){\n   var xy3=Arr[I].split(\",\").map(Number);\n   var x3=xy3[0];var y3=xy3[1];\n   var d12=Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));\n   var d13=Math.sqrt(Math.pow(x1-x3,2)+Math.pow(y1-y3,2));\n   var d23=Math.sqrt(Math.pow(x2-x3,2)+Math.pow(y2-y3,2));\n   sum+=heron(d12,d13,d23);\n   x2=xy3[0];\n   y2=xy3[1];\n}\nconsole.log(sum.toFixed(6));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1090, "deobfuscated": "function heron(a, b, c) {\n  var s = (a + b + c) / 2;\n  var S = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return S;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar xy1 = Arr.shift().split(\",\").map(Number);\nvar xy2 = Arr.shift().split(\",\").map(Number);\nvar x1 = xy1[0];\nvar y1 = xy1[1];\nvar x2 = xy2[0];\nvar y2 = xy2[1];\nvar sum = 0;\nfor (var I = 0; I < Arr.length; I++) {\n  var xy3 = Arr[I].split(\",\").map(Number);\n  var x3 = xy3[0];\n  var y3 = xy3[1];\n  var d12 = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n  var d13 = Math.sqrt(Math.pow(x1 - x3, 2) + Math.pow(y1 - y3, 2));\n  var d23 = Math.sqrt(Math.pow(x2 - x3, 2) + Math.pow(y2 - y3, 2));\n  sum += heron(d12, d13, d23);\n  x2 = xy3[0];\n  y2 = xy3[1];\n}\nconsole.log(sum.toFixed(6));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5215520312291093, "ngram_match_score": 0.04490308928902765, "weighted_ngram_match_score": 0.1603526546750287, "syntax_match_score": 0.8809523809523809, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00080_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var Q=Arr['shift']()-0x0;if(Q==-0x1)break;var x=Q/0x2;while(Math['abs'](Math['pow'](x,0x3)-Q)>=0.00001*Q){x=x-(Math['pow'](x,0x3)-Q)/(0x3*Math['pow'](x,0x2));}console['log'](x['toFixed'](0x6));}", "test_cases": [["15\n15\n-1", "2.466212\n2.466212"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var Q=Arr.shift()-0;\n   if(Q==-1)break;\n   var x=Q/2;\n   while(Math.abs(Math.pow(x,3)-Q)>=0.00001*Q){\n      x=x-(Math.pow(x,3)-Q)/(3*Math.pow(x,2));\n   }\n   console.log(x.toFixed(6));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1091, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var Q = Arr.shift() - 0;\n  if (Q == -1) {\n    break;\n  }\n  var x = Q / 2;\n  while (Math.abs(Math.pow(x, 3) - Q) >= Q * 0.00001) {\n    x = x - (Math.pow(x, 3) - Q) / (Math.pow(x, 2) * 3);\n  }\n  console.log(x.toFixed(6));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4643521272453687, "ngram_match_score": 0.02952081146174683, "weighted_ngram_match_score": 0.10957783836479826, "syntax_match_score": 0.7183098591549296, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006258115982390455, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03157894736842104, "new_decrease_halstead_effort": 0.17200452635235997}}
{"filename": "p00081_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split'](',')['map'](Number);(function(x1,y1,x2,y2,xq,yq){var k=x2-x1==0x0?Infinity:(y2-y1)/(x2-x1);var ans;if(k==0x0)ans=[xq,y1-(yq-y1)];else if(k==Infinity)ans=[x1-(xq-x1),yq];else{var a1=(y2-y1)/(x2-x1);var a2=-0x1/a1;var b1=y1-a1*x1;var b2=yq-a2*xq;var xm=(b2-b1)/(a1-a2);var x=0x2*xm-xq;var y=a2*x+b2;ans=[x,y];}console['log'](ans[0x0]['toFixed'](0x6)+'\\x20'+ans[0x1]['toFixed'](0x6));}['apply'](null,arr));}", "test_cases": [["1.0,0.0,-1.0,0.0,1.0,1.0 \n1.0,0.0,0.0,-1.0,3.0,0.0 \n0.0,1.0,0.0,-1.0,1.0,1.0", "1.000000 -1.000000\n1.000000 2.000000\n-1.000000 1.000000"]], "original": "/*h  t t p : / / t a k u -k . h a t e n a blog . c o m / entry /2013/ 03 / 2 6 / 174239 */\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\",\").map(Number);\n   (function(x1,y1,x2,y2,xq,yq){\n      var k=(x2-x1==0)?Infinity:(y2-y1)/(x2-x1);\n      var ans;\n      if(k==0)ans=[xq,y1-(yq-y1)];\n      else if(k==Infinity)ans=[x1-(xq-x1),yq];\n      else{\n         var  a1=(y2-y1)/(x2-x1);\n         var  a2=(-1)/a1;\n         var  b1=y1-a1*x1;\n         var  b2=yq-a2*xq;\n         var  xm=(b2-b1)/(a1-a2);\n         var  x=2*xm-xq;\n         var  y=a2*x+b2;\n         ans=[x,y];\n      }\n      console.log(ans[0].toFixed(6)+\" \"+ans[1].toFixed(6));\n   }).apply(null,arr);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1092, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\",\").map(Number);\n  (function (x1, y1, x2, y2, xq, yq) {\n    var k = x2 - x1 == 0 ? Infinity : (y2 - y1) / (x2 - x1);\n    var ans;\n    if (k == 0) {\n      ans = [xq, y1 - (yq - y1)];\n    } else if (k == Infinity) {\n      ans = [x1 - (xq - x1), yq];\n    } else {\n      var a1 = (y2 - y1) / (x2 - x1);\n      var a2 = -1 / a1;\n      var b1 = y1 - a1 * x1;\n      var b2 = yq - a2 * xq;\n      var xm = (b2 - b1) / (a1 - a2);\n      var x = xm * 2 - xq;\n      var y = a2 * x + b2;\n      ans = [x, y];\n    }\n    console.log(ans[0].toFixed(6) + \" \" + ans[1].toFixed(6));\n  }).apply(null, arr);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45149585109119694, "ngram_match_score": 0.010851934008691647, "weighted_ngram_match_score": 0.026474753938185824, "syntax_match_score": 0.7686567164179104, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00107_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var arr=Arr['shift']()['split']('\\x20')['map'](Number);if(arr[0x0]==0x0&&arr[0x1]==0x0&&arr[0x2]==0x0)break;arr['sort'](function(a,b){return a-b;});var R=Math['sqrt'](arr[0x0]*arr[0x0]+arr[0x1]*arr[0x1]);var n=Arr['shift']()-0x0;for(var i=0x0;i<n;i++){var r=Arr['shift']()-0x0;console['log'](r*0x2>R?'OK':'NA');}}", "test_cases": [["10 6 8\n5\n4\n8\n6\n2\n5\n0 0 0", "NA\nOK\nOK\nNA\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0 && arr[1]==0 && arr[2]==0)break;\n   arr.sort(function(a,b){return a-b;});\n   var R=Math.sqrt(arr[0]*arr[0]+arr[1]*arr[1]);\n   var n=Arr.shift()-0;\n   for(var i=0;i<n;i++){\n      var r=Arr.shift()-0;\n      console.log((r*2>R)?\"OK\":\"NA\");\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1093, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  if (arr[0] == 0 && arr[1] == 0 && arr[2] == 0) {\n    break;\n  }\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var R = Math.sqrt(arr[0] * arr[0] + arr[1] * arr[1]);\n  var n = Arr.shift() - 0;\n  for (var i = 0; i < n; i++) {\n    var r = Arr.shift() - 0;\n    console.log(r * 2 > R ? \"OK\" : \"NA\");\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45986865984940994, "ngram_match_score": 0.01703539034461474, "weighted_ngram_match_score": 0.05713312660404549, "syntax_match_score": 0.7653061224489796, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.022222222222222254, "new_decrease_halstead_effort": 0.1462673582852756}}
{"filename": "p00108_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']();if(n=='0')break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var k=0x0;var S=[];while(!![]){for(var i=0x0;i<arr['length'];i++){var cnt=0x0;for(var j=0x0;j<arr['length'];j++){if(arr[i]==arr[j])cnt++;}S['push'](cnt);}if(S['join']('\\x20')==arr['join']('\\x20'))break;arr=S['slice']();S=[];k++;}console['log'](k);console['log'](S['join']('\\x20'));}", "test_cases": [["10\n4 5 1 1 4 5 12 3 5 4\n0", "3\n6 6 4 4 6 6 4 4 6 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift();\n   if(n==\"0\")break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var k=0;\n   var S=[];\n   while(true){\n      for(var i=0;i<arr.length;i++){\n         var cnt=0;\n         for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j])cnt++;\n         }\n         S.push(cnt);\n      }\n      if(S.join(\" \")==arr.join(\" \"))break;\n      arr=S.slice();\n      S=[];\n      k++;\n   }\n   console.log(k);\n   console.log(S.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1094, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift();\n  if (n == \"0\") {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var k = 0;\n  var S = [];\n  while (true) {\n    for (var i = 0; i < arr.length; i++) {\n      var cnt = 0;\n      for (var j = 0; j < arr.length; j++) {\n        if (arr[i] == arr[j]) {\n          cnt++;\n        }\n      }\n      S.push(cnt);\n    }\n    if (S.join(\" \") == arr.join(\" \")) {\n      break;\n    }\n    arr = S.slice();\n    S = [];\n    k++;\n  }\n  console.log(k);\n  console.log(S.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5243846821876965, "ngram_match_score": 0.08267924860223692, "weighted_ngram_match_score": 0.21824931065702363, "syntax_match_score": 0.7966101694915254, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006102807855985715, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.040000000000000036, "new_decrease_halstead_effort": 0.14243176178660044}}
{"filename": "p00112_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=[];for(var i=0x0;i<n;i++){var v=Arr['shift']()-0x0;arr['push'](v);}arr['sort'](function(a,b){return a-b;});var wait=[];var time=0x0;for(var i=0x0;i<n;i++){wait['push'](time);time+=arr[i];}var sum=wait['reduce'](function(a,b){return a+b;});console['log'](sum);}", "test_cases": [["5\n2\n6\n4\n3\n9\n0", "31"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr.push(v);\n   }\n   arr.sort(function(a,b){return a-b;});\n   var wait=[];\n   var time=0;\n   for(var i=0;i<n;i++){\n      wait.push(time);\n      time+=arr[i];\n   }\n   var sum=wait.reduce(function(a,b){return a+b;});\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1095, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    var v = Arr.shift() - 0;\n    arr.push(v);\n  }\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var wait = [];\n  var time = 0;\n  for (var i = 0; i < n; i++) {\n    wait.push(time);\n    time += arr[i];\n  }\n  var sum = wait.reduce(function (a, b) {\n    return a + b;\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4952082964442215, "ngram_match_score": 0.0183816218439415, "weighted_ngram_match_score": 0.056201563932944495, "syntax_match_score": 0.90625, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.022900763358778664, "new_decrease_halstead_effort": 0.11014176663031638}}
{"filename": "p00117_1", "type": "JavaScript", "obfuscated": "function warshall(){for(var k=0x0;k<n;k++){for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){C[i][j]=Math['min'](C[i][j],C[i][k]+C[k][j]);}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr['shift']()-0x0;var m=Arr['shift']()-0x0;var C=[];for(var i=0x0;i<n;i++){C[i]=[];for(var j=0x0;j<n;j++){C[i][j]=i===j?0x0:Infinity;}}for(var i=0x0;i<m;i++){var A=Arr['shift']()['split'](',')['map'](Number);C[A[0x0]-0x1][A[0x1]-0x1]=A[0x2];C[A[0x1]-0x1][A[0x0]-0x1]=A[0x3];}warshall();var last=Arr['shift']()['split'](',')['map'](Number);var cost=C[last[0x0]-0x1][last[0x1]-0x1]+C[last[0x1]-0x1][last[0x0]-0x1]+last[0x3];console['log'](last[0x2]-cost);", "test_cases": [["6\n8\n1,2,2,2 \n1,3,4,3 \n1,4,4,2 \n2,5,3,2 \n3,4,4,2 \n3,6,1,2 \n4,6,1,1 \n5,6,1,2 \n2,4,50,30", "11"]], "original": "function warshall(){\n   for(var k=0;k<n;k++){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            C[i][j]=Math.min(C[i][j], C[i][k]+C[k][j]);\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nvar m=Arr.shift()-0;\nvar C=[];\nfor(var i=0;i<n;i++){\n   C[i]=[];\n   for(var j=0;j<n;j++){\n      C[i][j]=(i===j)?0:Infinity;\n   }\n}\nfor(var i=0;i<m;i++){\n   var A=(Arr.shift()).split(\",\").map(Number);\n   C[A[0]-1][A[1]-1]=A[2];\n   C[A[1]-1][A[0]-1]=A[3];\n}\nwarshall();\nvar last=(Arr.shift()).split(\",\").map(Number);\nvar cost=C[last[0]-1][last[1]-1]+C[last[1]-1][last[0]-1]+last[3];\nconsole.log(last[2]-cost);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1096, "deobfuscated": "function warshall() {\n  for (var k = 0; k < n; k++) {\n    for (var i = 0; i < n; i++) {\n      for (var j = 0; j < n; j++) {\n        C[i][j] = Math.min(C[i][j], C[i][k] + C[k][j]);\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr.shift() - 0;\nvar m = Arr.shift() - 0;\nvar C = [];\nfor (var i = 0; i < n; i++) {\n  C[i] = [];\n  for (var j = 0; j < n; j++) {\n    C[i][j] = i === j ? 0 : Infinity;\n  }\n}\nfor (var i = 0; i < m; i++) {\n  var A = Arr.shift().split(\",\").map(Number);\n  C[A[0] - 1][A[1] - 1] = A[2];\n  C[A[1] - 1][A[0] - 1] = A[3];\n}\nwarshall();\nvar last = Arr.shift().split(\",\").map(Number);\nvar cost = C[last[0] - 1][last[1] - 1] + C[last[1] - 1][last[0] - 1] + last[3];\nconsole.log(last[2] - cost);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5192378270127636, "ngram_match_score": 0.05214407629750524, "weighted_ngram_match_score": 0.19526177720809446, "syntax_match_score": 0.8295454545454546, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00119_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var m=Arr['shift']()-0x0;var n=Arr['shift']()-0x0;var M=[];var check=[];for(var i=0x0;i<m;i++)M[i]=[];for(var i=0x0;i<m;i++)check[i]=![];for(var i=0x0;i<n;i++){var v=Arr['shift']()['split']('\\x20')['map'](Number);M[v[0x0]-0x1]['push'](v[0x1]-0x1);}var L=[];for(var i=0x0;i<m;i++){visit(i);}function visit(x){if(check[x]==!![])return;else check[x]=!![];M[x]['forEach'](function(v){visit(v);});L['push'](x);}L['reverse']();L['forEach'](function(v){console['log'](v+0x1);});", "test_cases": [["6\n7\n5 2\n1 4\n3 5\n4 2\n1 6\n6 4\n3 4", "3\n5\n1\n6\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar m=Arr.shift()-0;\nvar n=Arr.shift()-0;\nvar M=[];\nvar check=[];\nfor(var i=0;i<m;i++)M[i]=[];\nfor(var i=0;i<m;i++)check[i]=false;\nfor(var i=0;i<n;i++){\n   var v=Arr.shift().split(\" \").map(Number);\n   M[v[0]-1].push(v[1]-1);\n}\nvar L=[]; \nfor(var i=0;i<m;i++){\n   visit(i);\n}\nfunction visit(x){\n   if(check[x]==true)return;\n   else check[x]=true;\n   M[x].forEach(function(v){\n      visit(v);\n   });\n   L.push(x);\n}\nL.reverse();\nL.forEach(function(v){\n   console.log(v+1);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1097, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar m = Arr.shift() - 0;\nvar n = Arr.shift() - 0;\nvar M = [];\nvar check = [];\nfor (var i = 0; i < m; i++) {\n  M[i] = [];\n}\nfor (var i = 0; i < m; i++) {\n  check[i] = false;\n}\nfor (var i = 0; i < n; i++) {\n  var v = Arr.shift().split(\" \").map(Number);\n  M[v[0] - 1].push(v[1] - 1);\n}\nvar L = [];\nfor (var i = 0; i < m; i++) {\n  visit(i);\n}\nfunction visit(x) {\n  if (check[x] == true) {\n    return;\n  } else {\n    check[x] = true;\n  }\n  M[x].forEach(function (v) {\n    visit(v);\n  });\n  L.push(x);\n}\nL.reverse();\nL.forEach(function (v) {\n  console.log(v + 1);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5339145923652224, "ngram_match_score": 0.05401534290894656, "weighted_ngram_match_score": 0.16615006880546412, "syntax_match_score": 0.9154929577464789, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.014109606230732208, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04040404040404044, "new_decrease_halstead_effort": 0.15028010975096728}}
{"filename": "p00123_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['forEach'](function(v){var arr=v['split']('\\x20')['map'](Number);var a=arr[0x0];var b=arr[0x1];var ans;if(35.5>a&&0x47>b)ans='AAA';else if(37.5>a&&0x4d>b)ans='AA';else if(0x28>a&&0x53>b)ans='A';else if(0x2b>a&&0x59>b)ans='B';else if(0x32>a&&0x69>b)ans='C';else if(0x37>a&&0x74>b)ans='D';else if(0x46>a&&0x94>b)ans='E';else ans='NA';console['log'](ans);});", "test_cases": [["40.0 70.0\n72.5 140.51", "B\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var a=arr[0];\n   var b=arr[1];\n   var ans;\n   if(35.5>a && 71>b)ans=\"AAA\";\n   else if(37.5>a && 77>b)ans=\"AA\";\n   else if(40>a && 83>b)ans=\"A\";\n   else if(43>a && 89>b)ans=\"B\";\n   else if(50>a && 105>b)ans=\"C\";\n   else if(55>a && 116>b)ans=\"D\";\n   else if(70>a && 148>b)ans=\"E\";\n   else ans=\"NA\";\n   console.log(ans);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1098, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.forEach(function (v) {\n  var arr = v.split(\" \").map(Number);\n  var a = arr[0];\n  var b = arr[1];\n  var ans;\n  if (a < 35.5 && b < 71) {\n    ans = \"AAA\";\n  } else if (a < 37.5 && b < 77) {\n    ans = \"AA\";\n  } else if (a < 40 && b < 83) {\n    ans = \"A\";\n  } else if (a < 43 && b < 89) {\n    ans = \"B\";\n  } else if (a < 50 && b < 105) {\n    ans = \"C\";\n  } else if (a < 55 && b < 116) {\n    ans = \"D\";\n  } else if (a < 70 && b < 148) {\n    ans = \"E\";\n  } else {\n    ans = \"NA\";\n  }\n  console.log(ans);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.3996067136908001, "ngram_match_score": 0.014550947229703706, "weighted_ngram_match_score": 0.04474547275088797, "syntax_match_score": 0.5391304347826087, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00124_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var I=0x0;while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;if(I!=0x0)console['log']('');I++;var rank=[];for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20');var score=0x3*(arr[0x1]-0x0)+(arr[0x3]-0x0)+(0xa-i)*0.01;rank['push']([arr[0x0],score]);}rank['sort'](function(a,b){a=a[0x1];b=b[0x1];return b-a;});rank['forEach'](function(v){console['log'](v[0x0]+','+Math['floor'](v[0x1]));});}", "test_cases": [["4\nJapan 1 0 2\nEgypt 1 2 0\nCanada 0 2 1\nSpain 2 0 1\n3\nIndia 0 2 0\nPoland 1 0 1\nItaly 1 0 1\n0", "Spain,7\nJapan,5\nEgypt,3\nCanada,1\n\nPoland,4\nItaly,4\nIndia,0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=0;\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   if(I!=0)console.log(\"\");\n   I++;\n   var rank=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var score=(3*(arr[1]-0))+(arr[3]-0)+((10-i)*0.01);\n      rank.push([arr[0],score]);\n   }\n   rank.sort(function(a,b){\n      a=a[1];\n      b=b[1];\n      return b-a;\n   });\n   rank.forEach(function(v){\n      console.log(v[0]+\",\"+Math.floor(v[1]));\n   });\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1099, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar I = 0;\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  if (I != 0) {\n    console.log(\"\");\n  }\n  I++;\n  var rank = [];\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \");\n    var score = (arr[1] - 0) * 3 + (arr[3] - 0) + (10 - i) * 0.01;\n    rank.push([arr[0], score]);\n  }\n  rank.sort(function (a, b) {\n    a = a[1];\n    b = b[1];\n    return b - a;\n  });\n  rank.forEach(function (v) {\n    console.log(v[0] + \",\" + Math.floor(v[1]));\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4686918221120507, "ngram_match_score": 0.016735292667197067, "weighted_ngram_match_score": 0.05475330725641552, "syntax_match_score": 0.8032786885245902, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.018750000000000044, "new_decrease_halstead_effort": 0.09551920341394038}}
{"filename": "p00125_1", "type": "JavaScript", "obfuscated": "function year(x){var m=[0x16d,0x1f,0x1c,0x1f,0x1e,0x1f,0x1e,0x1f,0x1f,0x1e,0x1f,0x1e,0x1f];if(x%0x4==0x0){m[0x2]=0x1d;m[0x0]=0x16e;if(x%0x64==0x0){m[0x2]=0x1c;m[0x0]=0x16d;}if(x%0x190==0x0){m[0x2]=0x1d;m[0x0]=0x16e;}}return m;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var str=Arr['shift']();if(str=='-1\\x20-1\\x20-1\\x20-1\\x20-1\\x20-1')break;var arr=str['split']('\\x20')['map'](Number);(function(y1,m1,d1,y2,m2,d2){var sum1=0x0;var sum2=0x0;var Y1=year(y1);var Y2=year(y2);sum1+=Y1[m1]-d1;sum2+=Y2[m2]-d2;while(m1<0xc){m1++;sum1+=Y1[m1];}while(m2<0xc){m2++;sum2+=Y2[m2];}var days=sum1-sum2;while(y1!=y2){y1++;days+=year(y1)[0x0];}console['log'](days);}['apply'](null,arr));}", "test_cases": [["2006 9 2 2006 9 3\n2006 9 2 2006 11 11\n2004 1 1 2005 1 1\n2000 1 1 2006 1 1\n2000 1 1 2101 1 1\n-1 -1 -1 -1 -1 -1", "1\n70\n366\n2192\n36890"]], "original": "function year(x){\n   var m=[365,31,28,31,30,31,30,31,31,30,31,30,31];\n   if(x%4==0){\n      m[2]=29;\n      m[0]=366;\n      if(x%100==0){m[2]=28;m[0]=365;}\n      if(x%400==0){m[2]=29;m[0]=366;}\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"-1 -1 -1 -1 -1 -1\")break;\n   var arr=str.split(\" \").map(Number);\n   (function(y1, m1, d1, y2, m2, d2){\n      var sum1=0;\n      var sum2=0;\n      var Y1=year(y1);\n      var Y2=year(y2);\n      sum1+=Y1[m1]-d1;\n      sum2+=Y2[m2]-d2;\n      while(m1<12){m1++;sum1+=Y1[m1];}\n      while(m2<12){m2++;sum2+=Y2[m2];}\n      var days=sum1-sum2;\n      while(y1!=y2){\n         y1++;\n         days+=(year(y1))[0];\n      }\n      console.log(days);\n   }).apply(null,arr);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1100, "deobfuscated": "function year(x) {\n  var m = [365, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  if (x % 4 == 0) {\n    m[2] = 29;\n    m[0] = 366;\n    if (x % 100 == 0) {\n      m[2] = 28;\n      m[0] = 365;\n    }\n    if (x % 400 == 0) {\n      m[2] = 29;\n      m[0] = 366;\n    }\n  }\n  return m;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var str = Arr.shift();\n  if (str == \"-1 -1 -1 -1 -1 -1\") {\n    break;\n  }\n  var arr = str.split(\" \").map(Number);\n  (function (y1, m1, d1, y2, m2, d2) {\n    var sum1 = 0;\n    var sum2 = 0;\n    var Y1 = year(y1);\n    var Y2 = year(y2);\n    sum1 += Y1[m1] - d1;\n    sum2 += Y2[m2] - d2;\n    while (m1 < 12) {\n      m1++;\n      sum1 += Y1[m1];\n    }\n    while (m2 < 12) {\n      m2++;\n      sum2 += Y2[m2];\n    }\n    var days = sum1 - sum2;\n    while (y1 != y2) {\n      y1++;\n      days += year(y1)[0];\n    }\n    console.log(days);\n  }).apply(null, arr);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5396183122151924, "ngram_match_score": 0.07107294922423396, "weighted_ngram_match_score": 0.22929219152842742, "syntax_match_score": 0.8581081081081081, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013953488372092981, "new_decrease_halstead_effort": 0.0877392817592153}}
{"filename": "p00127_1", "type": "JavaScript", "obfuscated": "var table={};table[0xb]='a';table[0xc]='b';table[0xd]='c';table[0xe]='d';table[0xf]='e';table[0x15]='f';table[0x16]='g';table[0x17]='h';table[0x18]='i';table[0x19]='j';table[0x1f]='k';table[0x20]='l';table[0x21]='m';table[0x22]='n';table[0x23]='o';table[0x29]='p';table[0x2a]='q';table[0x2b]='r';table[0x2c]='s';table[0x2d]='t';table[0x33]='u';table[0x34]='v';table[0x35]='w';table[0x36]='x';table[0x37]='y';table[0x3d]='z';table[0x3e]='.';table[0x3f]='?';table[0x40]='!';table[0x41]='\\x20';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');Arr['forEach'](function(str){str=str['replace'](/\\d\\d/g,function(s){if(table['hasOwnProperty'](s))s=table[s];return s;});if(str['match'](/\\d/))str='NA';console['log'](str);});", "test_cases": [["341143514535\n314\n143565553551655311343411652235654535651124615163\n551544654451431564\n4\n3411\n6363636363\n153414", "naruto\nNA\ndo you wanna go to aizu?\nyes sure!\nNA\nna\n?????\nend"]], "original": "var table={};\n    table[11] = \"a\";\n    table[12] = \"b\";\n    table[13] = \"c\";\n    table[14] = \"d\";\n    table[15] = \"e\";\n \n    table[21] = \"f\";\n    table[22] = \"g\";\n    table[23] = \"h\";\n    table[24] = \"i\";\n    table[25] = \"j\";\n \n    table[31] = \"k\";\n    table[32] = \"l\";\n    table[33] = \"m\";\n    table[34] = \"n\";\n    table[35] = \"o\";\n \n    table[41] = \"p\";\n    table[42] = \"q\";\n    table[43] = \"r\";\n    table[44] = \"s\";\n    table[45] = \"t\";\n \n    table[51] = \"u\";\n    table[52] = \"v\";\n    table[53] = \"w\";\n    table[54] = \"x\";\n    table[55] = \"y\";\n \n    table[61] = \"z\";\n    table[62] = \".\";\n    table[63] = \"?\";\n    table[64] = \"!\";\n    table[65] = \" \";\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nArr.forEach(function(str){\n   str=str.replace(/\\d\\d/g,function(s){\n      if(table.hasOwnProperty(s))s=table[s];\n      return s;\n   });\n   if(str.match(/\\d/))str=\"NA\";\n   console.log(str);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1101, "deobfuscated": "var table = {\n  11: \"a\",\n  12: \"b\",\n  13: \"c\",\n  14: \"d\",\n  15: \"e\",\n  21: \"f\",\n  22: \"g\",\n  23: \"h\",\n  24: \"i\",\n  25: \"j\",\n  31: \"k\",\n  32: \"l\",\n  33: \"m\",\n  34: \"n\",\n  35: \"o\",\n  41: \"p\",\n  42: \"q\",\n  43: \"r\",\n  44: \"s\",\n  45: \"t\",\n  51: \"u\",\n  52: \"v\",\n  53: \"w\",\n  54: \"x\",\n  55: \"y\",\n  61: \"z\",\n  62: \".\",\n  63: \"?\",\n  64: \"!\",\n  65: \" \"\n};\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nArr.forEach(function (str) {\n  str = str.replace(/\\d\\d/g, function (s) {\n    if (table.hasOwnProperty(s)) {\n      s = table[s];\n    }\n    return s;\n  });\n  if (str.match(/\\d/)) {\n    str = \"NA\";\n  }\n  console.log(str);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.16045231263362403, "ngram_match_score": 0.01859740829609615, "weighted_ngram_match_score": 0.021381178622839284, "syntax_match_score": 0.391304347826087, "dataflow_match_score": 0.21052631578947367}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.26905829596412556, "new_decrease_halstead_effort": 0.3659419729804414}}
{"filename": "p00133_1", "type": "JavaScript", "obfuscated": "function move(yx){var arr=[];for(var y=0x0;y<0x8;y++)arr[y]=[];for(var y=0x0;y<0x8;y++){for(var x=0x0;x<0x8;x++){arr[y][x]=yx[0x7-x][y];}}return arr;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var yx=[];for(var i=0x0;i<0x8;i++)yx['push'](Arr[i]['split'](''));yx=move(yx);console['log']('90\\x0a'+yx['join']('\\x0a')['replace'](/\\,/g,''));yx=move(yx);console['log']('180\\x0a'+yx['join']('\\x0a')['replace'](/\\,/g,''));yx=move(yx);console['log']('270\\x0a'+yx['join']('\\x0a')['replace'](/\\,/g,''));", "test_cases": [["#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n########", "90\n########\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n180\n########\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n270\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n########"]], "original": "function move(yx){\n   var arr=[];\n   for(var y=0;y<8;y++)arr[y]=[];\n   for(var y=0;y<8;y++){\n      for(var x=0;x<8;x++){\n         arr[y][x]=yx[7-x][y];\n      }\n   }\n   return arr;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar yx=[];\nfor(var i=0;i<8;i++)yx.push(Arr[i].split(\"\"));\nyx=move(yx);\nconsole.log(\"90\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));\nyx=move(yx);\nconsole.log(\"180\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));\nyx=move(yx);\nconsole.log(\"270\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1102, "deobfuscated": "function move(yx) {\n  var arr = [];\n  for (var y = 0; y < 8; y++) {\n    arr[y] = [];\n  }\n  for (var y = 0; y < 8; y++) {\n    for (var x = 0; x < 8; x++) {\n      arr[y][x] = yx[7 - x][y];\n    }\n  }\n  return arr;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar yx = [];\nfor (var i = 0; i < 8; i++) {\n  yx.push(Arr[i].split(\"\"));\n}\nyx = move(yx);\nconsole.log(\"90\\n\" + yx.join(\"\\n\").replace(/\\,/g, \"\"));\nyx = move(yx);\nconsole.log(\"180\\n\" + yx.join(\"\\n\").replace(/\\,/g, \"\"));\nyx = move(yx);\nconsole.log(\"270\\n\" + yx.join(\"\\n\").replace(/\\,/g, \"\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5644863125047637, "ngram_match_score": 0.0741953228001448, "weighted_ngram_match_score": 0.2583767928905517, "syntax_match_score": 0.9253731343283582, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00134_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);var n=Arr['shift']();var sum=0x0;for(var i=0x0;i<n;i++){sum+=Arr[i];}console['log'](Math['floor'](sum/n));", "test_cases": [["6\n12300\n5600\n33800\n0\n26495\n52000", "21699"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar n=Arr.shift();\nvar sum=0;\nfor(var i=0;i<n;i++){\nsum+=Arr[i];\n}\nconsole.log(Math.floor(sum/n));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1103, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nvar n = Arr.shift();\nvar sum = 0;\nfor (var i = 0; i < n; i++) {\n  sum += Arr[i];\n}\nconsole.log(Math.floor(sum / n));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4888521551953282, "ngram_match_score": 0.03348928509624719, "weighted_ngram_match_score": 0.08518464180751453, "syntax_match_score": 0.8367346938775511, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00137_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);var L=Arr['shift']();for(var i=0x0;i<L;i++){console['log']('Case\\x20'+(i+0x1)+':');var v=Arr[i];for(var j=0x0;j<0xa;j++){v='000000'+v*v;v=v['slice'](-0x6);v=v['slice'](0x0,0x4);v=parseInt(v,0xa);console['log'](v);}}", "test_cases": [["2\n123\n567", "Case 1:\n151\n228\n519\n2693\n2522\n3604\n9888\n7725\n6756\n6435\nCase 2:\n3214\n3297\n8702\n7248\n5335\n4622\n3628\n1623\n6341\n2082"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar L=Arr.shift();\nfor(var i=0;i<L;i++){\n   console.log(\"Case \"+(i+1)+\":\");\n   var v=Arr[i];\n   for(var j=0;j<10;j++){\n      v=\"000000\"+(v*v);\n      v=v.slice(-6);\n      v=v.slice(0,4);\n      v=parseInt(v,10);\n      console.log(v);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1104, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nvar L = Arr.shift();\nfor (var i = 0; i < L; i++) {\n  console.log(\"Case \" + (i + 1) + \":\");\n  var v = Arr[i];\n  for (var j = 0; j < 10; j++) {\n    v = \"000000\" + v * v;\n    v = v.slice(-6);\n    v = v.slice(0, 4);\n    v = parseInt(v, 10);\n    console.log(v);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4780465688206108, "ngram_match_score": 0.026078225888157922, "weighted_ngram_match_score": 0.0836389135918161, "syntax_match_score": 0.8024691358024691, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00138_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var abc=[[],[],[]];var obj={};for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20')['map'](Number);abc[Math['floor'](i/0x8)]['push'](arr[0x1]);obj[arr[0x1]]=arr[0x0];}for(var i=0x0;i<0x3;i++)abc[i]['sort'](function(a,b){return a-b;});console['log'](obj[abc[0x0][0x0]]+'\\x20'+abc[0x0][0x0]['toFixed'](0x2));console['log'](obj[abc[0x0][0x1]]+'\\x20'+abc[0x0][0x1]['toFixed'](0x2));console['log'](obj[abc[0x1][0x0]]+'\\x20'+abc[0x1][0x0]['toFixed'](0x2));console['log'](obj[abc[0x1][0x1]]+'\\x20'+abc[0x1][0x1]['toFixed'](0x2));console['log'](obj[abc[0x2][0x0]]+'\\x20'+abc[0x2][0x0]['toFixed'](0x2));console['log'](obj[abc[0x2][0x1]]+'\\x20'+abc[0x2][0x1]['toFixed'](0x2));var d=[];for(var i=0x0;i<0x3;i++)d['push'](abc[i][0x2]);d['sort'](function(a,b){return a-b;});console['log'](obj[d[0x0]]+'\\x20'+d[0x0]['toFixed'](0x2));console['log'](obj[d[0x1]]+'\\x20'+d[0x1]['toFixed'](0x2));", "test_cases": [["18 25.46\n16 26.23\n3 23.00\n10 24.79\n5 22.88\n11 23.87\n19 23.90\n1 25.11\n23 23.88\n4 23.46\n7 24.12\n12 22.91\n13 21.99\n14 22.86\n21 23.12\n9 24.09\n17 22.51\n22 23.49\n6 23.02\n20 22.23\n24 21.89\n15 24.14\n8 23.77\n2 23.42", "5 22.88\n3 23.00\n13 21.99\n14 22.86\n24 21.89\n20 22.23\n17 22.51\n12 22.91"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar abc=[[],[],[]];\nvar obj={};\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   abc[Math.floor(i/8)].push(arr[1]);\n   obj[arr[1]]=arr[0];\n}\nfor(var i=0;i<3;i++)abc[i].sort(function(a,b){return a-b;});\nconsole.log(obj[abc[0][0]]+\" \"+(abc[0][0].toFixed(2)));\nconsole.log(obj[abc[0][1]]+\" \"+(abc[0][1].toFixed(2)));\nconsole.log(obj[abc[1][0]]+\" \"+(abc[1][0].toFixed(2)));\nconsole.log(obj[abc[1][1]]+\" \"+(abc[1][1].toFixed(2)));\nconsole.log(obj[abc[2][0]]+\" \"+(abc[2][0].toFixed(2)));\nconsole.log(obj[abc[2][1]]+\" \"+(abc[2][1].toFixed(2)));\nvar d=[];\nfor(var i=0;i<3;i++)d.push(abc[i][2]);\nd.sort(function(a,b){return a-b;});\nconsole.log(obj[d[0]]+\" \"+(d[0].toFixed(2)));\nconsole.log(obj[d[1]]+\" \"+(d[1].toFixed(2)));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1105, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar abc = [[], [], []];\nvar obj = {};\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  abc[Math.floor(i / 8)].push(arr[1]);\n  obj[arr[1]] = arr[0];\n}\nfor (var i = 0; i < 3; i++) {\n  abc[i].sort(function (a, b) {\n    return a - b;\n  });\n}\nconsole.log(obj[abc[0][0]] + \" \" + abc[0][0].toFixed(2));\nconsole.log(obj[abc[0][1]] + \" \" + abc[0][1].toFixed(2));\nconsole.log(obj[abc[1][0]] + \" \" + abc[1][0].toFixed(2));\nconsole.log(obj[abc[1][1]] + \" \" + abc[1][1].toFixed(2));\nconsole.log(obj[abc[2][0]] + \" \" + abc[2][0].toFixed(2));\nconsole.log(obj[abc[2][1]] + \" \" + abc[2][1].toFixed(2));\nvar d = [];\nfor (var i = 0; i < 3; i++) {\n  d.push(abc[i][2]);\n}\nd.sort(function (a, b) {\n  return a - b;\n});\nconsole.log(obj[d[0]] + \" \" + d[0].toFixed(2));\nconsole.log(obj[d[1]] + \" \" + d[1].toFixed(2));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45790288363638204, "ngram_match_score": 0.008975467576092539, "weighted_ngram_match_score": 0.034089811462827725, "syntax_match_score": 0.788546255506608, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00150_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var p=prime(0xf423f);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){var a=Arr[i];if(a==0x0)break;var twin='';for(var j=0x1;j<p['length'];j++){if(p[j]>a)break;if(p[j]-p[j-0x1]==0x2)twin=p[j-0x1]+'\\x20'+p[j];}console['log'](twin);}", "test_cases": [["12\n100\n200\n300\n0", "5 7\n71 73\n197 199\n281 283"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   var twin=\"\";\n   for(var j=1;j<p.length;j++){\n   if(p[j]>a)break;\n   if(p[j]-p[j-1]==2)twin=p[j-1]+\" \"+p[j];\n   }\n   console.log(twin);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1106, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar p = prime(999999);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  var a = Arr[i];\n  if (a == 0) {\n    break;\n  }\n  var twin = \"\";\n  for (var j = 1; j < p.length; j++) {\n    if (p[j] > a) {\n      break;\n    }\n    if (p[j] - p[j - 1] == 2) {\n      twin = p[j - 1] + \" \" + p[j];\n    }\n  }\n  console.log(twin);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5106483508725331, "ngram_match_score": 0.041539614870730594, "weighted_ngram_match_score": 0.16105378861940187, "syntax_match_score": 0.84, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006309413468192027, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04385964912280704, "new_decrease_halstead_effort": 0.09337658897009049}}
{"filename": "p00154_1", "type": "JavaScript", "obfuscated": "function bomb(start,sum){dp[start][sum]++;if(start==card['length'])return;var v=card[start][0x0];var k=card[start][0x1];for(var i=0x0;i<=k;i++){bomb(start+0x1,sum+v*i);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var m=arr['shift']()-0x0;if(m==0x0)break;var card=[];while(m--)card['push'](arr['shift']()['split']('\\x20')['map'](Number));var g=arr['shift']()-0x0;var dp=[];for(var i=0x0;i<=card['length'];i++){dp[i]=[];for(var j=0x0;j<=0x3e8;j++){dp[i][j]=0x0;}}bomb(0x0,0x0);while(g--)console['log'](dp[card['length']][arr['shift']()-0x0]);}", "test_cases": [["5\n1 10\n5 3\n10 3\n25 2\n50 2\n4\n120\n500\n100\n168\n7\n1 10\n3 10\n5 10\n10 10\n25 10\n50 10\n100 10\n3\n452\n574\n787\n0", "16\n0\n12\n7\n9789\n13658\n17466"]], "original": "function bomb(start,sum){\n   dp[start][sum]++;\n   if(start==card.length)return;\n   var v=card[start][0];\n   var k=card[start][1];\n   for(var i=0;i<=k;i++){\n      bomb(start+1,sum+v*i);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var m=arr.shift()-0;\n   if(m==0)break;\n   var card=[];\n   while(m--)card.push(arr.shift().split(\" \").map(Number));\n   var g=arr.shift()-0;\n   var dp=[];\n   for(var i=0;i<=card.length;i++){\n      dp[i]=[];\n      for(var j=0;j<=1000;j++){\n         dp[i][j]=0;\n      }\n   }\n   bomb(0,0);\n   while(g--)console.log(dp[card.length][arr.shift()-0]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1107, "deobfuscated": "function bomb(start, sum) {\n  dp[start][sum]++;\n  if (start == card.length) {\n    return;\n  }\n  var v = card[start][0];\n  var k = card[start][1];\n  for (var i = 0; i <= k; i++) {\n    bomb(start + 1, sum + v * i);\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var m = arr.shift() - 0;\n  if (m == 0) {\n    break;\n  }\n  var card = [];\n  while (m--) {\n    card.push(arr.shift().split(\" \").map(Number));\n  }\n  var g = arr.shift() - 0;\n  var dp = [];\n  for (var i = 0; i <= card.length; i++) {\n    dp[i] = [];\n    for (var j = 0; j <= 1000; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  bomb(0, 0);\n  while (g--) {\n    console.log(dp[card.length][arr.shift() - 0]);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.526091530523354, "ngram_match_score": 0.039677157400194424, "weighted_ngram_match_score": 0.13135563135988818, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015789473684210575, "new_decrease_halstead_effort": 0.09501385041551258}}
{"filename": "p00157_1", "type": "JavaScript", "obfuscated": "function Longest(){ary['sort'](function(a,b){if(a[0x0]==b[0x0])return a[0x1]-b[0x1];else return a[0x0]-b[0x0];});var A=ary['filter'](function(v,i){if(i==0x0)return!![];else if(ary[i-0x1][0x0]!=v[0x0])return!![];});A=A['map'](function(v){return v[0x1];});var L=[];L[0x0]=A[0x0];var length=0x1;for(var i=0x1;i<A['length'];i++){if(L[length-0x1]<A[i])L[length++]=A[i];else{for(var j=0x0;j<length;j++){if(L[j]>=A[i]){L[j]=A[i];break;}}}}return length;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var ary=[];for(var i=0x0;i<n;i++)ary['push'](arr['shift']()['split']('\\x20')['map'](Number));var m=arr['shift']()-0x0;for(var i=0x0;i<m;i++)ary['push'](arr['shift']()['split']('\\x20')['map'](Number));var R=Longest();ary=ary['map'](function(v){return[v[0x1],v[0x0]];});var H=Longest();console['log'](Math['max'](R,H));}", "test_cases": [["6\n1 1\n4 3\n6 5\n8 6\n10 10\n14 14\n5\n2 2\n5 4\n6 6\n9 8\n15 10\n4\n1 1\n4 3\n6 5\n8 6\n3\n2 2\n5 4\n6 6\n4\n1 1\n4 3\n6 5\n8 6\n4\n10 10\n12 11\n18 15\n24 20\n0", "9\n6\n8"]], "original": "function Longest(){\n   ary.sort(function(a,b){\n      if(a[0]==b[0])return a[1]-b[1];\n      else return a[0]-b[0]\n   });\n   var A=ary.filter(function(v,i){\n      if(i==0)return true;\n      else if(ary[i-1][0]!=v[0])return true;\n   });\n   A=A.map(function(v){return v[1];});\n   var L=[];\n   L[0] = A[0];\n   var length = 1;\n   for(var i=1;i<A.length;i++){\n      if (L[length-1] < A[i])L[length++] = A[i];\n      else {\n         for(var j=0;j<length;j++){\n            if(L[j]>=A[i]){L[j]=A[i];break;}\n         }\n      }\n   }\n   return length;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=[];\n   for(var i=0;i<n;i++)ary.push(arr.shift().split(\" \").map(Number));\n   var m=arr.shift()-0;\n   for(var i=0;i<m;i++)ary.push(arr.shift().split(\" \").map(Number));\n   var R=Longest();\n   ary=ary.map(function(v){return [v[1],v[0]];});\n   var H=Longest();\n   console.log(Math.max(R,H));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1108, "deobfuscated": "function Longest() {\n  ary.sort(function (a, b) {\n    if (a[0] == b[0]) {\n      return a[1] - b[1];\n    } else {\n      return a[0] - b[0];\n    }\n  });\n  var A = ary.filter(function (v, i) {\n    if (i == 0) {\n      return true;\n    } else if (ary[i - 1][0] != v[0]) {\n      return true;\n    }\n  });\n  A = A.map(function (v) {\n    return v[1];\n  });\n  var L = [];\n  L[0] = A[0];\n  var length = 1;\n  for (var i = 1; i < A.length; i++) {\n    if (L[length - 1] < A[i]) {\n      L[length++] = A[i];\n    } else {\n      for (var j = 0; j < length; j++) {\n        if (L[j] >= A[i]) {\n          L[j] = A[i];\n          break;\n        }\n      }\n    }\n  }\n  return length;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var ary = [];\n  for (var i = 0; i < n; i++) {\n    ary.push(arr.shift().split(\" \").map(Number));\n  }\n  var m = arr.shift() - 0;\n  for (var i = 0; i < m; i++) {\n    ary.push(arr.shift().split(\" \").map(Number));\n  }\n  var R = Longest();\n  ary = ary.map(function (v) {\n    return [v[1], v[0]];\n  });\n  var H = Longest();\n  console.log(Math.max(R, H));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5517379099768096, "ngram_match_score": 0.08524470773324906, "weighted_ngram_match_score": 0.24846749555427106, "syntax_match_score": 0.8732394366197183, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009826996538289112, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02941176470588236, "new_decrease_halstead_effort": 0.08443379037760035}}
{"filename": "p00158_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var cnt=0x0;while(n!=0x1){cnt++;if(n%0x2==0x0)n=n/0x2;else n=0x3*n+0x1;}console['log'](cnt);}", "test_cases": [["3\n10\n0", "7\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var cnt=0;\n   while(n!=1){\n      cnt++;\n      if(n%2==0)n=n/2;\n      else n=(3*n)+1;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1109, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var cnt = 0;\n  while (n != 1) {\n    cnt++;\n    if (n % 2 == 0) {\n      n = n / 2;\n    } else {\n      n = n * 3 + 1;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.455210211164794, "ngram_match_score": 0.02895212168203307, "weighted_ngram_match_score": 0.09697346873985473, "syntax_match_score": 0.6949152542372882, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006062740238947262, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.040000000000000036, "new_decrease_halstead_effort": 0.15935017713892607}}
{"filename": "p00161_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var team=[];for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var a=arr[0x1]*0x3c+arr[0x2];var b=arr[0x3]*0x3c+arr[0x4];var c=arr[0x5]*0x3c+arr[0x6];var d=arr[0x7]*0x3c+arr[0x8];team['push']([arr[0x0],a+b+c+d]);}team['sort'](function(a,b){a=a[0x1];b=b[0x1];return a-b;});console['log'](team[0x0][0x0]);console['log'](team[0x1][0x0]);console['log'](team[team['length']-0x2][0x0]);}", "test_cases": [["8\n34001 3 20 3 8 6 27 2 25\n20941 3 5 2 41 7 19 2 42\n90585 4 8 3 12 6 46 2 34\n92201 3 28 2 47 6 37 2 58\n10001 3 50 2 42 7 12 2 54\n63812 4 11 3 11 6 53 2 22\n54092 3 33 2 54 6 18 2 19\n25012 3 44 2 58 6 45 2 46\n4\n1 3 23 1 23 1 34 4 44\n2 5 12 2 12 3 41 2 29\n3 5 24 1 24 2 0 3 35\n4 4 49 2 22 4 41 4 23\n0", "54092\n34001\n10001\n1\n3\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var team=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var a=(arr[1]*60)+arr[2];\n      var b=(arr[3]*60)+arr[4];\n      var c=(arr[5]*60)+arr[6];\n      var d=(arr[7]*60)+arr[8];\n      team.push([arr[0],a+b+c+d]);\n   }\n   team.sort(function(a,b){\n      a=a[1];\n      b=b[1];\n      return a-b;\n   });\n   console.log(team[0][0]);\n   console.log(team[1][0]);\n   console.log(team[team.length-2][0]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1110, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var team = [];\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    var a = arr[1] * 60 + arr[2];\n    var b = arr[3] * 60 + arr[4];\n    var c = arr[5] * 60 + arr[6];\n    var d = arr[7] * 60 + arr[8];\n    team.push([arr[0], a + b + c + d]);\n  }\n  team.sort(function (a, b) {\n    a = a[1];\n    b = b[1];\n    return a - b;\n  });\n  console.log(team[0][0]);\n  console.log(team[1][0]);\n  console.log(team[team.length - 2][0]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45483550688678254, "ngram_match_score": 0.019711818614852782, "weighted_ngram_match_score": 0.06319610040514548, "syntax_match_score": 0.7364341085271318, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.015957446808510634, "new_decrease_halstead_effort": 0.09445656786082324}}
{"filename": "p00162_1", "type": "JavaScript", "obfuscated": "function hamming(){var obj={};for(var i=0x1;i<=0xf4240;i++){var h=i;while(h%0x2==0x0)h/=0x2;while(h%0x3==0x0)h/=0x3;while(h%0x5==0x0)h/=0x5;if(h==0x1)obj[i]=!![];}return obj;}var Numbers=hamming();var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var mn=Arr['shift']()['split']('\\x20')['map'](Number);if(mn[0x0]==0x0)break;var cnt=0x0;for(var i=mn[0x0];i<=mn[0x1];i++){if(Numbers[i])cnt++;}console['log'](cnt);}", "test_cases": [["3 8\n1 27\n1 86\n0", "5\n17\n31"]], "original": "function hamming(){\n   var obj={};\n   for(var i=1;i<=1000000;i++){\n      var h=i;\n      while(h%2==0)h/=2;\n      while(h%3==0)h/=3;\n      while(h%5==0)h/=5;\n      if(h==1)obj[i]=true\n   }\n   return obj;\n}\nvar Numbers=hamming();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var mn=(Arr.shift()).split(\" \").map(Number);\n   if(mn[0]==0)break;\n   var cnt=0;\n   for(var i=mn[0];i<=mn[1];i++){\n      if(Numbers[i])cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1111, "deobfuscated": "function hamming() {\n  var obj = {};\n  for (var i = 1; i <= 1000000; i++) {\n    var h = i;\n    while (h % 2 == 0) {\n      h /= 2;\n    }\n    while (h % 3 == 0) {\n      h /= 3;\n    }\n    while (h % 5 == 0) {\n      h /= 5;\n    }\n    if (h == 1) {\n      obj[i] = true;\n    }\n  }\n  return obj;\n}\nvar Numbers = hamming();\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var mn = Arr.shift().split(\" \").map(Number);\n  if (mn[0] == 0) {\n    break;\n  }\n  var cnt = 0;\n  for (var i = mn[0]; i <= mn[1]; i++) {\n    if (Numbers[i]) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4977481669437942, "ngram_match_score": 0.05287917835154752, "weighted_ngram_match_score": 0.18811348942362935, "syntax_match_score": 0.75, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.010434829789016886, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04081632653061229, "new_decrease_halstead_effort": 0.17749854921673025}}
{"filename": "p00164_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var ball=0x20;var i=0x0;while(!![]){ball-=(ball-0x1)%0x5;console['log'](ball);if(ball==0x1){console['log'](0x0);break;}ball-=arr[i%n];i++;console['log'](ball);}}", "test_cases": [["4\n3 1 4 2\n3\n4 3 2\n0", "31\n28\n26\n25\n21\n17\n16\n14\n11\n8\n6\n5\n1\n0\n31\n27\n26\n23\n21\n19\n16\n12\n11\n8\n6\n4\n1\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var ball=32;\n   var i=0;\n   while(true){\n      ball-=(ball-1)%5;\n      console.log(ball);\n      if(ball==1){console.log(0);break;}\n      ball-=arr[i%n];\n      i++;\n      console.log(ball);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1112, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var ball = 32;\n  var i = 0;\n  while (true) {\n    ball -= (ball - 1) % 5;\n    console.log(ball);\n    if (ball == 1) {\n      console.log(0);\n      break;\n    }\n    ball -= arr[i % n];\n    i++;\n    console.log(ball);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.509473321310823, "ngram_match_score": 0.06178110636313394, "weighted_ngram_match_score": 0.17123413009967028, "syntax_match_score": 0.8048780487804879, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.008349617513840224, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05714285714285716, "new_decrease_halstead_effort": 0.20344967741491238}}
{"filename": "p00167_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=[];for(var i=0x0;i<n;i++){var x=Arr['shift']()-0x0;arr['push'](x);}var L=0x1;var cnt=0x0;while(!![]){if(arr['length']==L)break;for(var i=0x0;i<arr['length']-L;i++){var memo=arr[i];if(arr[i]>arr[i+0x1]){cnt++;arr[i]=arr[i+0x1];arr[i+0x1]=memo;}}L++;}console['log'](cnt);}", "test_cases": [["5\n5\n3\n2\n1\n4\n6\n1\n2\n3\n4\n5\n6\n3\n3\n2\n1\n0", "7\n0\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++){\n      var x=Arr.shift()-0;\n      arr.push(x);\n   }\n   var L=1;\n   var cnt=0;\n   while(true){\n      if(arr.length==L)break;\n      for(var i=0;i<arr.length-L;i++){\n         var memo=arr[i];\n         if(arr[i]>arr[i+1]){\n            cnt++;\n            arr[i]=arr[i+1];\n            arr[i+1]=memo;\n         }\n      }\n   L++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1113, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = [];\n  for (var i = 0; i < n; i++) {\n    var x = Arr.shift() - 0;\n    arr.push(x);\n  }\n  var L = 1;\n  var cnt = 0;\n  while (true) {\n    if (arr.length == L) {\n      break;\n    }\n    for (var i = 0; i < arr.length - L; i++) {\n      var memo = arr[i];\n      if (arr[i] > arr[i + 1]) {\n        cnt++;\n        arr[i] = arr[i + 1];\n        arr[i + 1] = memo;\n      }\n    }\n    L++;\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5437166929125047, "ngram_match_score": 0.07128131808695815, "weighted_ngram_match_score": 0.21897006894767615, "syntax_match_score": 0.8846153846153846, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005729537883114366, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04081632653061229, "new_decrease_halstead_effort": 0.13288083090379033}}
{"filename": "p00173_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var arr=Arr[i]['split']('\\x20');var a=arr[0x1]-0x0+(arr[0x2]-0x0);var b=(arr[0x1]-0x0)*0xc8+(arr[0x2]-0x0)*0x12c;console['log'](arr[0x0]+'\\x20'+a+'\\x20'+b);}", "test_cases": [["1a 132 243\n1c 324 183\n1f 93 199\n2b 372 163\n2c 229 293\n2e 391 206\n3a 118 168\n3b 263 293\n3d 281 102", "1a 375 99300\n1c 507 119700\n1f 292 78300\n2b 535 123300\n2c 522 133700\n2e 597 140000\n3a 286 74000\n3b 556 140500\n3d 383 86800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \");\n   var a=(arr[1]-0)+(arr[2]-0);\n   var b=(arr[1]-0)*200+(arr[2]-0)*300;\n   console.log(arr[0]+\" \"+a+\" \"+b);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1114, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var arr = Arr[i].split(\" \");\n  var a = arr[1] - 0 + (arr[2] - 0);\n  var b = (arr[1] - 0) * 200 + (arr[2] - 0) * 300;\n  console.log(arr[0] + \" \" + a + \" \" + b);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48398603269468343, "ngram_match_score": 0.021916157520311362, "weighted_ngram_match_score": 0.07820707773603428, "syntax_match_score": 0.835820895522388, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00174_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var str=Arr['shift']();if(str=='0')break;var arr=str['split']('');var a=0x0;var b=0x0;arr['shift']();arr['forEach'](function(v){if(v=='A')a++;if(v=='B')b++;});a>b?a++:b++;console['log'](a+'\\x20'+b);}", "test_cases": [["ABAABBBAABABAAABBAA\nAABBBABBABBAAABABABAAB\nBABAABAABABABBAAAB\nAABABAAABBAABBBABAA\nAAAAAAAAAAA\nABBBBBBBBBB\n0", "11 8\n10 12\n11 7\n11 8\n11 0\n0 11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"0\")break;\n   var arr=str.split(\"\");\n   var a=0;\n   var b=0;\n   arr.shift();\n   arr.forEach(function(v){\n      if(v==\"A\")a++;\n      if(v==\"B\")b++;\n   });\n   (a>b)?a++:b++;\n   console.log(a+\" \"+b);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1115, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var str = Arr.shift();\n  if (str == \"0\") {\n    break;\n  }\n  var arr = str.split(\"\");\n  var a = 0;\n  var b = 0;\n  arr.shift();\n  arr.forEach(function (v) {\n    if (v == \"A\") {\n      a++;\n    }\n    if (v == \"B\") {\n      b++;\n    }\n  });\n  if (a > b) {\n    a++;\n  } else {\n    b++;\n  }\n  console.log(a + \" \" + b);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4634900004576963, "ngram_match_score": 0.01703541562749579, "weighted_ngram_match_score": 0.05643678132524064, "syntax_match_score": 0.7804878048780488, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.17647058823529416, "length_score": -0.17647058823529416, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020618556701030966, "new_decrease_halstead_effort": 0.18679387119212965}}
{"filename": "p00175_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){if(Arr[i]==-0x1)break;console['log'](Arr[i]['toString'](0x4));}", "test_cases": [["7\n4\n0\n12\n10\n10000\n-1", "13\n10\n0\n30\n22\n2130100"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==-1)break;\n   console.log(Arr[i].toString(4));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1116, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  if (Arr[i] == -1) {\n    break;\n  }\n  console.log(Arr[i].toString(4));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4813251648445085, "ngram_match_score": 0.043748114312246435, "weighted_ngram_match_score": 0.12068297984839614, "syntax_match_score": 0.7608695652173914, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00178_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var base=['','','','',''];for(var i=0x0;i<n;i++){var [d,p,q]=arr['shift']()['split']('\\x20')['map'](Number);q--;if(d==0x1){var max=0x0;for(var j=0x0;j<p;j++)max=Math['max'](max,base[q+j]['length']);for(var j=0x0;j<p;j++){while(base[q+j]['length']<max)base[q+j]+='0';base[q+j]+='1';}}else if(d==0x2){for(var j=0x0;j<p;j++)base[q]+='1';}}var max=0x0;for(var i=0x0;i<0x5;i++)max=Math['max'](max,base[i]['length']);for(var i=0x0;i<0x5;i++){while(base[i]['length']<max)base[i]+='0';}var cnt=0x0;for(var i=0x0;i<max;i++){var str=base['map'](v=>v[i])['join']('');str=str['replace']('11111','')['replace'](/0/g,'');cnt+=str['length'];}console['log'](cnt);}", "test_cases": [["4\n1 4 1\n1 3 1\n2 2 4\n2 3 5\n1\n1 5 1\n7\n2 2 2\n1 4 1\n2 1 3\n1 4 1\n1 1 1\n2 5 5\n1 4 2\n0", "2\n0\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var base=[\"\",\"\",\"\",\"\",\"\"];\n   for(var i=0;i<n;i++){\n      var [d,p,q]=arr.shift().split(\" \").map(Number);\n      q--;\n      if(d==1){\n         var max=0;\n         for(var j=0;j<p;j++)max=Math.max(max,base[q+j].length);\n         for(var j=0;j<p;j++){\n            while(base[q+j].length<max)base[q+j]+=\"0\";\n            base[q+j]+=\"1\";\n         }\n      }else if(d==2){\n         for(var j=0;j<p;j++)base[q]+=\"1\";\n      }\n   }\n   var max=0;\n   for(var i=0;i<5;i++)max=Math.max(max,base[i].length);\n   for(var i=0;i<5;i++){\n      while(base[i].length<max)base[i]+=\"0\";\n   }\n   var cnt=0;\n   for(var i=0;i<max;i++){\n      var str=base.map(v=> v[i]).join(\"\");\n      str=str.replace(\"11111\",\"\").replace(/0/g,\"\");\n      cnt+=str.length;\n   }\n   console.log(cnt);\n}\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1117, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var base = [\"\", \"\", \"\", \"\", \"\"];\n  for (var i = 0; i < n; i++) {\n    var [d, p, q] = arr.shift().split(\" \").map(Number);\n    q--;\n    if (d == 1) {\n      var max = 0;\n      for (var j = 0; j < p; j++) {\n        max = Math.max(max, base[q + j].length);\n      }\n      for (var j = 0; j < p; j++) {\n        while (base[q + j].length < max) {\n          base[q + j] += \"0\";\n        }\n        base[q + j] += \"1\";\n      }\n    } else if (d == 2) {\n      for (var j = 0; j < p; j++) {\n        base[q] += \"1\";\n      }\n    }\n  }\n  var max = 0;\n  for (var i = 0; i < 5; i++) {\n    max = Math.max(max, base[i].length);\n  }\n  for (var i = 0; i < 5; i++) {\n    while (base[i].length < max) {\n      base[i] += \"0\";\n    }\n  }\n  var cnt = 0;\n  for (var i = 0; i < max; i++) {\n    var str = base.map(v => v[i]).join(\"\");\n    str = str.replace(\"11111\", \"\").replace(/0/g, \"\");\n    cnt += str.length;\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5903709479190339, "ngram_match_score": 0.11012685468633483, "weighted_ngram_match_score": 0.3560689788746175, "syntax_match_score": 0.8952879581151832, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0033909291677303166, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011538461538461497, "new_decrease_halstead_effort": 0.07036674021555234}}
{"filename": "p00184_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);var n=0x0;var arr=[0x0,0x0,0x0,0x0,0x0,0x0,0x0];for(var i=0x0;i<Arr['length'];i++){if(n==0x0){if(i!=0x0)arr['forEach'](function(v){console['log'](v);});if(Arr[i]==0x0)break;n=Arr[i];arr=[0x0,0x0,0x0,0x0,0x0,0x0,0x0];}else{n--;if(Arr[i]>=0x3c)arr[0x6]++;else if(Arr[i]>=0x32)arr[0x5]++;else if(Arr[i]>=0x28)arr[0x4]++;else if(Arr[i]>=0x1e)arr[0x3]++;else if(Arr[i]>=0x14)arr[0x2]++;else if(Arr[i]>=0xa)arr[0x1]++;else arr[0x0]++;}}", "test_cases": [["8\n71\n34\n65\n11\n41\n39\n6\n5\n4\n67\n81\n78\n65\n0", "2\n1\n0\n2\n1\n0\n2\n0\n0\n0\n0\n0\n0\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar n=0;\nvar arr=[0,0,0,0,0,0,0];\nfor(var i=0;i<Arr.length;i++){\n   if(n==0){\n      if(i!=0)arr.forEach(function(v){console.log(v);});\n      if(Arr[i]==0)break;\n      n=Arr[i];\n      arr=[0,0,0,0,0,0,0];\n    }else{\n      n--;\n      if(Arr[i]>=60)arr[6]++;\n      else if(Arr[i]>=50)arr[5]++;\n      else if(Arr[i]>=40)arr[4]++;\n      else if(Arr[i]>=30)arr[3]++;\n      else if(Arr[i]>=20)arr[2]++;\n      else if(Arr[i]>=10)arr[1]++;\n      else arr[0]++;\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1118, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nvar n = 0;\nvar arr = [0, 0, 0, 0, 0, 0, 0];\nfor (var i = 0; i < Arr.length; i++) {\n  if (n == 0) {\n    if (i != 0) {\n      arr.forEach(function (v) {\n        console.log(v);\n      });\n    }\n    if (Arr[i] == 0) {\n      break;\n    }\n    n = Arr[i];\n    arr = [0, 0, 0, 0, 0, 0, 0];\n  } else {\n    n--;\n    if (Arr[i] >= 60) {\n      arr[6]++;\n    } else if (Arr[i] >= 50) {\n      arr[5]++;\n    } else if (Arr[i] >= 40) {\n      arr[4]++;\n    } else if (Arr[i] >= 30) {\n      arr[3]++;\n    } else if (Arr[i] >= 20) {\n      arr[2]++;\n    } else if (Arr[i] >= 10) {\n      arr[1]++;\n    } else {\n      arr[0]++;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4619442851334997, "ngram_match_score": 0.015316281240261636, "weighted_ngram_match_score": 0.06386581797142313, "syntax_match_score": 0.768595041322314, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00185_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result={};for(var i=0x0;i<=max;i++){if(arr[i]!==![])result[arr[i]]=!![];}return result;}var p=prime(0xf4240);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var I=0x0;I<Arr['length'];I++){var v=Arr[I];if(v==0x0)break;var cnt=0x0;var obj={};for(var k in p){if(k>=v)break;if(obj['hasOwnProperty'](k))continue;obj[v-k]=!![];if(p['hasOwnProperty'](v-k))cnt++;}console['log'](cnt);}", "test_cases": [["134\n4330\n34808\n98792\n0", "6\n72\n274\n607"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(1000000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var I=0;I<Arr.length;I++){\n   var v=Arr[I];\n   if(v==0)break;\n   var cnt=0;\n   var obj={};\n   for(var k in p){\n      if(k>=v)break;\n      if(obj.hasOwnProperty(k))continue;\n      obj[v-k]=true;\n      if(p.hasOwnProperty(v-k))cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1119, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = {};\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result[arr[i]] = true;\n    }\n  }\n  return result;\n}\nvar p = prime(1000000);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var I = 0; I < Arr.length; I++) {\n  var v = Arr[I];\n  if (v == 0) {\n    break;\n  }\n  var cnt = 0;\n  var obj = {};\n  for (var k in p) {\n    if (k >= v) {\n      break;\n    }\n    if (obj.hasOwnProperty(k)) {\n      continue;\n    }\n    obj[v - k] = true;\n    if (p.hasOwnProperty(v - k)) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5072329090728902, "ngram_match_score": 0.04431699509051012, "weighted_ngram_match_score": 0.15468266841193498, "syntax_match_score": 0.8299319727891157, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009668092912735515, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07017543859649122, "new_decrease_halstead_effort": 0.1340077883495926}}
{"filename": "p00186_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var arr=Arr['shift']()['split']('\\x20')['map'](Number);if(arr[0x0]==0x0)break;var q1=arr[0x0];var b=arr[0x1];var c1=arr[0x2];var c2=arr[0x3];var q2=arr[0x4];var x=0x0;var y=0x0;var flag=!![];while(!![]){if(b>=c1*(x+0x1)&&x+0x1<=q2)x++;else break;}while(!![]){if(b>=c1*x+c2*(y+0x1))y++;else break;}while(!![]){if(x==0x0){flag=![];break;}if(c1*x+c2*y>b){flag=![];break;}if(q1>x+y){x--;while(!![]){if(b>=c1*x+c2*(y+0x1))y++;else break;}}else{break;}}console['log'](flag?x+'\\x20'+y:'NA');}", "test_cases": [["48 9297 240 126 32\n20 3010 157 141 7\n30 117002 5680 962 15\n8 1673 1712 190 22\n64 8478 87 54 307\n23 5477 117 92 12\n50 7558 1396 187 17\n279 88677 4522 514 14\n0", "28 20\n7 13\n15 33\nNA\n97 0\n12 44\nNA\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0)break;\n   var q1=arr[0];\n   var b=arr[1];\n   var c1=arr[2];\n   var c2=arr[3];\n   var q2=arr[4];\n   var x=0;\n   var y=0;\n   var flag=true;\n   while(true){\n      if(b>=c1*(x+1) &&  (x+1)<=q2)x++;\n      else break;\n   }\n   while(true){\n      if(b>=c1*x+c2*(y+1))y++;\n      else break;\n   }   \n   while(true){\n      if(x==0){flag=false;break;}\n      if(c1*x+c2*y>b){flag=false;break;}\n      if(q1>x+y){\n         x--;\n         while(true){\n            if(b>=c1*x+c2*(y+1))y++;\n            else break;         \n         }    \n      }else{\n         break;\n      }\n   }\n   console.log((flag)?x+\" \"+y:\"NA\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1120, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  if (arr[0] == 0) {\n    break;\n  }\n  var q1 = arr[0];\n  var b = arr[1];\n  var c1 = arr[2];\n  var c2 = arr[3];\n  var q2 = arr[4];\n  var x = 0;\n  var y = 0;\n  var flag = true;\n  while (true) {\n    if (b >= c1 * (x + 1) && x + 1 <= q2) {\n      x++;\n    } else {\n      break;\n    }\n  }\n  while (true) {\n    if (b >= c1 * x + c2 * (y + 1)) {\n      y++;\n    } else {\n      break;\n    }\n  }\n  while (true) {\n    if (x == 0) {\n      flag = false;\n      break;\n    }\n    if (c1 * x + c2 * y > b) {\n      flag = false;\n      break;\n    }\n    if (q1 > x + y) {\n      x--;\n      while (true) {\n        if (b >= c1 * x + c2 * (y + 1)) {\n          y++;\n        } else {\n          break;\n        }\n      }\n    } else {\n      break;\n    }\n  }\n  console.log(flag ? x + \" \" + y : \"NA\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4502474556915839, "ngram_match_score": 0.013985005247337158, "weighted_ngram_match_score": 0.05016271225584069, "syntax_match_score": 0.7368421052631579, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011353124286896055, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.10280373831775702, "new_decrease_halstead_effort": 0.2192698030091511}}
{"filename": "p00189_1", "type": "JavaScript", "obfuscated": "function warshall(){for(var k=0x0;k<n;k++){for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){C[i][j]=Math['min'](C[i][j],C[i][k]+C[k][j]);}}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=0xa;var m=Arr['shift']()-0x0;if(m==0x0)break;var C=[];for(var i=0x0;i<n;i++){C[i]=[];for(var j=0x0;j<n;j++){C[i][j]=i===j?0x0:Infinity;}}var max=0x0;for(var i=0x0;i<m;i++){var A=Arr['shift']()['split']('\\x20')['map'](Number);max=Math['max'](max,A[0x0],A[0x1]);C[A[0x0]][A[0x1]]=A[0x2];C[A[0x1]][A[0x0]]=A[0x2];}warshall();var min=['',Infinity];for(var i=max;i>=0x0;i--){var arr=C[i]['slice'](0x0,max+0x1);var sum=arr['reduce'](function(a,b){return a+b;});min[0x1]=Math['min'](min[0x1],sum);if(min[0x1]==sum)min=[i,sum];}console['log'](min['join']('\\x20'));}", "test_cases": [["6     \n0 1 80\n1 2 20\n0 2 60\n2 3 50\n3 4 60\n1 4 90\n2\n0 1 1\n1 2 1\n0", "2 240\n1 2"]], "original": "function warshall(){\n   for(var k=0;k<n;k++){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            C[i][j]=Math.min(C[i][j], C[i][k]+C[k][j]);\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=10;\n   var m=Arr.shift()-0;\n   if(m==0)break;\n   var C=[];\n   for(var i=0;i<n;i++){\n      C[i]=[];\n      for(var j=0;j<n;j++){\n         C[i][j]=(i===j)?0:Infinity;\n      }\n   }\n   var max=0;\n   for(var i=0;i<m;i++){\n      var A=(Arr.shift()).split(\" \").map(Number);\n      max=Math.max(max,A[0],A[1]);\n      C[A[0]][A[1]]=A[2];\n      C[A[1]][A[0]]=A[2];\n   }\n   warshall();\n   var min=[\"\",Infinity];\n   for(var i=max;i>=0;i--){\n      var arr=C[i].slice(0,max+1);\n      var sum=arr.reduce(function(a,b){return a+b;});\n      min[1]=Math.min(min[1],sum);\n      if(min[1]==sum)min=[i,sum];\n   }\n   console.log(min.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1121, "deobfuscated": "function warshall() {\n  for (var k = 0; k < n; k++) {\n    for (var i = 0; i < n; i++) {\n      for (var j = 0; j < n; j++) {\n        C[i][j] = Math.min(C[i][j], C[i][k] + C[k][j]);\n      }\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = 10;\n  var m = Arr.shift() - 0;\n  if (m == 0) {\n    break;\n  }\n  var C = [];\n  for (var i = 0; i < n; i++) {\n    C[i] = [];\n    for (var j = 0; j < n; j++) {\n      C[i][j] = i === j ? 0 : Infinity;\n    }\n  }\n  var max = 0;\n  for (var i = 0; i < m; i++) {\n    var A = Arr.shift().split(\" \").map(Number);\n    max = Math.max(max, A[0], A[1]);\n    C[A[0]][A[1]] = A[2];\n    C[A[1]][A[0]] = A[2];\n  }\n  warshall();\n  var min = [\"\", Infinity];\n  for (var i = max; i >= 0; i--) {\n    var arr = C[i].slice(0, max + 1);\n    var sum = arr.reduce(function (a, b) {\n      return a + b;\n    });\n    min[1] = Math.min(min[1], sum);\n    if (min[1] == sum) {\n      min = [i, sum];\n    }\n  }\n  console.log(min.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5277389683823333, "ngram_match_score": 0.057691109967201885, "weighted_ngram_match_score": 0.1997294100267774, "syntax_match_score": 0.8535353535353535, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.010204081632653073, "new_decrease_halstead_effort": 0.0422604466262646}}
{"filename": "p00196_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var team=[];for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20');var name=arr['shift']();var scoreA=0x0;var scoreB=0x0;for(var j=0x0;j<n-0x1;j++){if(arr[j]-0x0===0x0)scoreA++;if(arr[j]-0x0===0x1)scoreB++;}team['push']([name,scoreA*0x64+(0xa-scoreB)+(0xa-j)*0.01]);}team['sort'](function(a,b){return b[0x1]-a[0x1];});team['forEach'](function(v){console['log'](v[0x0]);});}", "test_cases": [["6\nA 1 0 0 2 0\nB 0 0 1 1 0\nC 1 1 1 1 1\nD 1 0 0 1 2\nE 2 0 0 0 0\nF 1 1 0 2 1\n4\ng 1 1 1\nh 0 1 2\nw 0 0 0\nb 0 2 1\n0", "E\nA\nB\nD\nF\nC\nw\nh\nb\ng"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var team=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var name=arr.shift();\n      var scoreA=0;\n      var scoreB=0;\n      for(var j=0;j<n-1;j++){\n         if(arr[j]-0===0)scoreA++;\n         if(arr[j]-0===1)scoreB++;\n      }\n      team.push([name,scoreA*100+(10-scoreB)+((10-j)*0.01)]);\n   }\n   team.sort(function(a,b){return b[1]-a[1];});\n   team.forEach(function(v){console.log(v[0]);});\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1122, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var team = [];\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \");\n    var name = arr.shift();\n    var scoreA = 0;\n    var scoreB = 0;\n    for (var j = 0; j < n - 1; j++) {\n      if (arr[j] - 0 === 0) {\n        scoreA++;\n      }\n      if (arr[j] - 0 === 1) {\n        scoreB++;\n      }\n    }\n    team.push([name, scoreA * 100 + (10 - scoreB) + (10 - j) * 0.01]);\n  }\n  team.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  team.forEach(function (v) {\n    console.log(v[0]);\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.462055130487286, "ngram_match_score": 0.012395118610204649, "weighted_ngram_match_score": 0.048940157437300166, "syntax_match_score": 0.7868852459016393, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.018292682926829285, "new_decrease_halstead_effort": 0.09653401797175853}}
{"filename": "p00220_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');var nums=[];for(var i=0x7;i>=-0x4;i--){nums['push'](Math['pow'](0x2,i));}while(!![]){var x=Arr['shift']()-0x0;if(x==-0x1)break;var str='';for(var i=0x0;i<nums['length'];i++){if(x>=nums[i]){x-=nums[i];str+='1';}else{str+='0';}if(i==0x7)str+='.';}if(x!==0x0)str='NA';console['log'](str);}", "test_cases": [["23.5\n158.1\n-1.0", "00010111.1000\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar nums=[];\nfor(var i=7;i>=-4;i--){\n   nums.push(Math.pow(2,i));\n}\nwhile(true){\n   var x=Arr.shift()-0;\n   if(x==-1)break;\n   var str=\"\";\n   for(var i=0;i<nums.length;i++){\n       if(x>=nums[i]){\n          x-=nums[i];\n          str+=\"1\";\n       }else{\n          str+=\"0\";\n       }\n       if(i==7)str+=\".\";\n   }\n   if(x!==0)str=\"NA\";\n   console.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1123, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nvar nums = [];\nfor (var i = 7; i >= -4; i--) {\n  nums.push(Math.pow(2, i));\n}\nwhile (true) {\n  var x = Arr.shift() - 0;\n  if (x == -1) {\n    break;\n  }\n  var str = \"\";\n  for (var i = 0; i < nums.length; i++) {\n    if (x >= nums[i]) {\n      x -= nums[i];\n      str += \"1\";\n    } else {\n      str += \"0\";\n    }\n    if (i == 7) {\n      str += \".\";\n    }\n  }\n  if (x !== 0) {\n    str = \"NA\";\n  }\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4832685678764477, "ngram_match_score": 0.014577203447257043, "weighted_ngram_match_score": 0.051150129283023586, "syntax_match_score": 0.8673469387755102, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00405817837863931, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.024390243902439046, "new_decrease_halstead_effort": 0.09817585570813692}}
{"filename": "p00226_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){if(Arr[i]=='0\\x200')break;var arr=Arr[i]['split']('\\x20');var x=arr[0x0]['split']('');var y=arr[0x1]['split']('');var h=0x0;var b=0x0;for(var j=0x0;j<0x4;j++){if(x[j]==y[j]){h++;}else if(y['indexOf'](x[j])!=-0x1){b++;}}console['log'](h+'\\x20'+b);}", "test_cases": [["1234 5678\n1234 1354\n1234 1234\n1230 1023\n0123 1234\n0 0", "0 0\n2 1\n4 0\n1 3\n0 3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\nif(Arr[i]==\"0 0\")break;\nvar arr=Arr[i].split(\" \");\nvar x=(arr[0]).split(\"\");\nvar y=(arr[1]).split(\"\");\nvar h=0;\nvar b=0;\nfor(var j=0;j<4;j++){\n   if(x[j]==y[j]){h++;}\n   else if(y.indexOf(x[j])!=-1){b++;}\n}\nconsole.log(h+\" \"+b);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1124, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  if (Arr[i] == \"0 0\") {\n    break;\n  }\n  var arr = Arr[i].split(\" \");\n  var x = arr[0].split(\"\");\n  var y = arr[1].split(\"\");\n  var h = 0;\n  var b = 0;\n  for (var j = 0; j < 4; j++) {\n    if (x[j] == y[j]) {\n      h++;\n    } else if (y.indexOf(x[j]) != -1) {\n      b++;\n    }\n  }\n  console.log(h + \" \" + b);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.468555465586878, "ngram_match_score": 0.017678360131072546, "weighted_ngram_match_score": 0.05446016888310602, "syntax_match_score": 0.8020833333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00227_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var NM=Arr['shift']();if(NM=='0\\x200')break;var nm=NM['split']('\\x20')['map'](Number);var m=nm[0x1];var arr=Arr['shift']()['split']('\\x20')['map'](Number);arr['sort'](function(a,b){return b-a;});var sum=0x0;for(var i=0x0;i<arr['length'];i++){if((i+0x1)%m!=0x0)sum+=arr[i];}console['log'](sum);}", "test_cases": [["4 2\n50 40 100 80\n7 3\n400 300 100 700 200 600 500\n0 0", "150\n2100"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var NM=Arr.shift();\n   if(NM==\"0 0\")break;\n   var nm=NM.split(\" \").map(Number);\n   var m=nm[1];\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   arr.sort(function(a,b){return b-a;});\n   var sum=0;\n   for(var i=0;i<arr.length;i++){\n      if((i+1)%m!=0)sum+=arr[i];\n   }\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1125, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var NM = Arr.shift();\n  if (NM == \"0 0\") {\n    break;\n  }\n  var nm = NM.split(\" \").map(Number);\n  var m = nm[1];\n  var arr = Arr.shift().split(\" \").map(Number);\n  arr.sort(function (a, b) {\n    return b - a;\n  });\n  var sum = 0;\n  for (var i = 0; i < arr.length; i++) {\n    if ((i + 1) % m != 0) {\n      sum += arr[i];\n    }\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4731604388222534, "ngram_match_score": 0.025623159722332024, "weighted_ngram_match_score": 0.07580980435789034, "syntax_match_score": 0.7912087912087912, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025423728813559365, "new_decrease_halstead_effort": 0.1555590568594486}}
{"filename": "p00228_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);var SEG=[[0x1,0x1,0x1,0x1,0x1,0x1,0x0]['reverse'](),[0x0,0x1,0x1,0x0,0x0,0x0,0x0]['reverse'](),[0x1,0x1,0x0,0x1,0x1,0x0,0x1]['reverse'](),[0x1,0x1,0x1,0x1,0x0,0x0,0x1]['reverse'](),[0x0,0x1,0x1,0x0,0x0,0x1,0x1]['reverse'](),[0x1,0x0,0x1,0x1,0x0,0x1,0x1]['reverse'](),[0x1,0x0,0x1,0x1,0x1,0x1,0x1]['reverse'](),[0x1,0x1,0x1,0x0,0x0,0x1,0x0]['reverse'](),[0x1,0x1,0x1,0x1,0x1,0x1,0x1]['reverse'](),[0x1,0x1,0x1,0x1,0x0,0x1,0x1]['reverse']()];var n=Arr[0x0];var seg=[];for(var i=0x1;i<Arr['length'];i++){if(n==0x0){if(i==0x0)continue;var arr=[0x0,0x0,0x0,0x0,0x0,0x0,0x0];seg['forEach'](function(v){var V=SEG[v];var str='';for(var i=0x0;i<0x7;i++){str+=V[i]==arr[i]?'0':'1';}console['log'](str);arr=V['slice']();});if(Arr[i]==-0x1)break;seg=[];n=Arr[i];}else{n--;seg['push'](Arr[i]);}}", "test_cases": [["3\n0\n5\n1\n1\n0\n-1", "0111111\n1010010\n1101011\n0111111"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar SEG=[\n[1,1,1,1,1,1,0].reverse(),\n[0,1,1,0,0,0,0].reverse(),\n[1,1,0,1,1,0,1].reverse(),\n[1,1,1,1,0,0,1].reverse(),\n[0,1,1,0,0,1,1].reverse(),\n[1,0,1,1,0,1,1].reverse(),\n[1,0,1,1,1,1,1].reverse(),\n[1,1,1,0,0,1,0].reverse(),\n[1,1,1,1,1,1,1].reverse(),\n[1,1,1,1,0,1,1].reverse()\n];\nvar n=Arr[0];\nvar seg=[];\nfor(var i=1;i<Arr.length;i++){\n   if(n==0){\n      if(i==0)continue;\n      var arr=[0,0,0,0,0,0,0];\n      seg.forEach(function(v){\n         var V=SEG[v];\n         var str=\"\";\n         for(var i=0;i<7;i++){\n            str+=(V[i]==arr[i])?\"0\":\"1\";\n         }\n         console.log(str);\n         arr=V.slice();\n      });\n      if(Arr[i]==-1)break;\n      seg=[];\n      n=Arr[i];\n   }else{\n      n--;\n      seg.push(Arr[i]);\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1126, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nvar SEG = [[1, 1, 1, 1, 1, 1, 0].reverse(), [0, 1, 1, 0, 0, 0, 0].reverse(), [1, 1, 0, 1, 1, 0, 1].reverse(), [1, 1, 1, 1, 0, 0, 1].reverse(), [0, 1, 1, 0, 0, 1, 1].reverse(), [1, 0, 1, 1, 0, 1, 1].reverse(), [1, 0, 1, 1, 1, 1, 1].reverse(), [1, 1, 1, 0, 0, 1, 0].reverse(), [1, 1, 1, 1, 1, 1, 1].reverse(), [1, 1, 1, 1, 0, 1, 1].reverse()];\nvar n = Arr[0];\nvar seg = [];\nfor (var i = 1; i < Arr.length; i++) {\n  if (n == 0) {\n    if (i == 0) {\n      continue;\n    }\n    var arr = [0, 0, 0, 0, 0, 0, 0];\n    seg.forEach(function (v) {\n      var V = SEG[v];\n      var str = \"\";\n      for (var i = 0; i < 7; i++) {\n        str += V[i] == arr[i] ? \"0\" : \"1\";\n      }\n      console.log(str);\n      arr = V.slice();\n    });\n    if (Arr[i] == -1) {\n      break;\n    }\n    seg = [];\n    n = Arr[i];\n  } else {\n    n--;\n    seg.push(Arr[i]);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4893631450466052, "ngram_match_score": 0.023697054116022614, "weighted_ngram_match_score": 0.09931843997768293, "syntax_match_score": 0.8344370860927153, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00229_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var BR=Arr['shift']();if(BR=='0\\x200\\x200\\x200\\x200\\x200')break;var br=BR['split']('\\x20')['map'](Number);var b=br[0x0];var r=br[0x1];var g=br[0x2];var c=br[0x3];var s=br[0x4];var t=br[0x5];var sum=0x64;sum+=b*0xf;sum+=r*0xf;sum+=(b*0x5+r*0x3)*0xf;sum+=g*0x7;sum+=c*0x2;sum-=(b*0x5+r*0x3)*0x2;sum-=(t-s-(b*0x5+r*0x3))*0x3;console['log'](sum);}", "test_cases": [["3 2 30 3 26 226\n9 0 18 3 20 118\n5 5 12 2 15 203\n7 4 19 2 22 197\n7 4 24 4 17 209\n0 0 0 0 0 0", "127\n793\n414\n629\n617"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var BR=Arr.shift();\n   if(BR==\"0 0 0 0 0 0\")break;\n   var br=BR.split(\" \").map(Number);\n   var b=br[0];\n   var r=br[1];\n   var g=br[2];\n   var c=br[3];\n   var s=br[4];\n   var t=br[5];\n   var sum=100;\n   sum+=b*15;\n   sum+=r*15;\n   sum+=(b*5+r*3)*15;\n   sum+=g*7;\n   sum+=c*2;\n   sum-=(b*5+r*3)*2;\n   sum-=(t-s-(b*5+r*3))*3;\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1127, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var BR = Arr.shift();\n  if (BR == \"0 0 0 0 0 0\") {\n    break;\n  }\n  var br = BR.split(\" \").map(Number);\n  var b = br[0];\n  var r = br[1];\n  var g = br[2];\n  var c = br[3];\n  var s = br[4];\n  var t = br[5];\n  var sum = 100;\n  sum += b * 15;\n  sum += r * 15;\n  sum += (b * 5 + r * 3) * 15;\n  sum += g * 7;\n  sum += c * 2;\n  sum -= (b * 5 + r * 3) * 2;\n  sum -= (t - s - (b * 5 + r * 3)) * 3;\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5189627763812865, "ngram_match_score": 0.03820439296224278, "weighted_ngram_match_score": 0.12502535333960224, "syntax_match_score": 0.912621359223301, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006728684928868356, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019607843137254943, "new_decrease_halstead_effort": 0.15897200802262723}}
{"filename": "p00240_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var y=Arr['shift']()-0x0;var S=[];var s=[];for(var i=0x0;i<n;i++){var brt=Arr['shift']()['split']('\\x20')['map'](Number);var r=brt[0x1];var t=brt[0x2];var result;if(t==0x1)result=0x2710*(0x1+y*(r/0x64));if(t==0x2)result=0x2710*Math['pow'](0x1+r/0x64,y);S['push'](brt[0x0]);s['push'](result);}var max=Math['max']['apply'](null,s);console['log'](S[s['indexOf'](max)]);}", "test_cases": [["2\n8\n1 5 2\n2 6 1\n2\n9\n1 5 2\n2 6 1\n0", "2\n1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var y=Arr.shift()-0;\n   var S=[];\n   var s=[];\n   for(var i=0;i<n;i++){\n      var brt=(Arr.shift()).split(\" \").map(Number);\n      var r=brt[1];\n      var t=brt[2];\n      var result;\n      if(t==1)result=10000*(1+(y*(r/100)));\n      if(t==2)result=10000*Math.pow((1+(r/100)),y);\n      S.push(brt[0]);\n      s.push(result);\n   }\n   var max=Math.max.apply(null,s);\n   console.log(S[s.indexOf(max)]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1128, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var y = Arr.shift() - 0;\n  var S = [];\n  var s = [];\n  for (var i = 0; i < n; i++) {\n    var brt = Arr.shift().split(\" \").map(Number);\n    var r = brt[1];\n    var t = brt[2];\n    var result;\n    if (t == 1) {\n      result = (1 + y * (r / 100)) * 10000;\n    }\n    if (t == 2) {\n      result = Math.pow(1 + r / 100, y) * 10000;\n    }\n    S.push(brt[0]);\n    s.push(result);\n  }\n  var max = Math.max.apply(null, s);\n  console.log(S[s.indexOf(max)]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4797315691756028, "ngram_match_score": 0.044369265465104356, "weighted_ngram_match_score": 0.14504881451599527, "syntax_match_score": 0.7295081967213115, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0032979501913470433, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01807228915662651, "new_decrease_halstead_effort": 0.07996955215996282}}
{"filename": "p00254_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']();if(n=='0000')break;if(n=='1111'||n=='2222'||n=='3333'||n=='4444'||n=='5555'){console['log']('NA');continue;}if(n=='6666'||n=='7777'||n=='8888'||n=='9999'){console['log']('NA');continue;}var i=0x0;while(!![]){if(n=='6174')break;i++;var arr=n['split']('')['map'](Number);arr['sort'](function(a,b){return b-a;});var L=parseInt(''+arr[0x0]+arr[0x1]+arr[0x2]+arr[0x3],0xa);var S=parseInt(''+arr[0x3]+arr[0x2]+arr[0x1]+arr[0x0],0xa);n=('0000'+(L-S))['slice'](-0x4);}console['log'](i);}", "test_cases": [["6174\n2012\n3333\n0000", "0\n3\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift();\n   if(n==\"0000\")break;\n   if(n==\"1111\" || n==\"2222\" || n==\"3333\" || n==\"4444\" || n==\"5555\"){console.log(\"NA\");continue;}\n   if(n==\"6666\" || n==\"7777\" || n==\"8888\" || n==\"9999\"){console.log(\"NA\");continue;}\n   var i=0;\n   while(true){\n      if(n==\"6174\")break;\n      i++;\n      var arr=n.split(\"\").map(Number);\n      arr.sort(function(a,b){return b-a;});\n      var L=parseInt(\"\"+arr[0]+arr[1]+arr[2]+arr[3],10);\n      var S=parseInt(\"\"+arr[3]+arr[2]+arr[1]+arr[0],10);\n      n=(\"0000\"+(L-S)).slice(-4);\n   }\n   console.log(i);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1129, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift();\n  if (n == \"0000\") {\n    break;\n  }\n  if (n == \"1111\" || n == \"2222\" || n == \"3333\" || n == \"4444\" || n == \"5555\") {\n    console.log(\"NA\");\n    continue;\n  }\n  if (n == \"6666\" || n == \"7777\" || n == \"8888\" || n == \"9999\") {\n    console.log(\"NA\");\n    continue;\n  }\n  var i = 0;\n  while (true) {\n    if (n == \"6174\") {\n      break;\n    }\n    i++;\n    var arr = n.split(\"\").map(Number);\n    arr.sort(function (a, b) {\n      return b - a;\n    });\n    var L = parseInt(\"\" + arr[0] + arr[1] + arr[2] + arr[3], 10);\n    var S = parseInt(\"\" + arr[3] + arr[2] + arr[1] + arr[0], 10);\n    n = (\"0000\" + (L - S)).slice(-4);\n  }\n  console.log(i);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4975067580840653, "ngram_match_score": 0.016330666765940232, "weighted_ngram_match_score": 0.05477744665140189, "syntax_match_score": 0.918918918918919, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03157894736842104, "new_decrease_halstead_effort": 0.16114685692749198}}
{"filename": "p00271_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<0x7;i++){var arr=Arr[i]['split']('\\x20')['map'](Number);console['log'](arr[0x0]-arr[0x1]);}", "test_cases": [["30 19\n39 20\n19 18\n25 20\n22 21\n23 10\n10 -10", "11\n19\n1\n5\n1\n13\n20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<7;i++){\nvar arr=Arr[i].split(\" \").map(Number);\nconsole.log(arr[0]-arr[1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1130, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < 7; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  console.log(arr[0] - arr[1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5009543738961841, "ngram_match_score": 0.04108404733153058, "weighted_ngram_match_score": 0.09606678158653945, "syntax_match_score": 0.8666666666666667, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00272_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<0x4;i++){var arr=Arr[i]['split']('\\x20')['map'](Number);if(arr[0x0]==0x1)console['log'](arr[0x1]*0x1770);if(arr[0x0]==0x2)console['log'](arr[0x1]*0xfa0);if(arr[0x0]==0x3)console['log'](arr[0x1]*0xbb8);if(arr[0x0]==0x4)console['log'](arr[0x1]*0x7d0);}", "test_cases": [["3 10\n1 4\n4 1\n2 5", "30000\n24000\n2000\n20000"], ["1 1\n2 0\n3 1\n4 1", "6000\n0\n3000\n2000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<4;i++){\nvar arr=Arr[i].split(\" \").map(Number);\nif(arr[0]==1)console.log(arr[1]*6000);\nif(arr[0]==2)console.log(arr[1]*4000);\nif(arr[0]==3)console.log(arr[1]*3000);\nif(arr[0]==4)console.log(arr[1]*2000);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1131, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < 4; i++) {\n  var arr = Arr[i].split(\" \").map(Number);\n  if (arr[0] == 1) {\n    console.log(arr[1] * 6000);\n  }\n  if (arr[0] == 2) {\n    console.log(arr[1] * 4000);\n  }\n  if (arr[0] == 3) {\n    console.log(arr[1] * 3000);\n  }\n  if (arr[0] == 4) {\n    console.log(arr[1] * 2000);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4858657945356082, "ngram_match_score": 0.018284864075743357, "weighted_ngram_match_score": 0.07902446791284319, "syntax_match_score": 0.8461538461538461, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00273_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var N=Arr['shift']()-0x0;for(var i=0x0;i<N;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var x=arr[0x0];var y=arr[0x1];var b=arr[0x2];var p=arr[0x3];var A=x*b+y*p;while(b<0x5)b++;while(p<0x2)p++;var B=(x*b+y*p)*0.8;console['log'](Math['min'](A,B));}", "test_cases": [["2\n100 100 1 1\n1000 500 5 2", "200\n4800"], ["5\n500 500 1 1\n500 500 5 2\n1000 100 0 6\n1000 100 6 0\n100 1000 0 0", "1000\n2800\n600\n4960\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar N=Arr.shift()-0;\nfor(var i=0;i<N;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var x=arr[0];\n   var y=arr[1];\n   var b=arr[2];\n   var p=arr[3];\n   var A=(x*b)+(y*p);\n   while(b<5)b++;\n   while(p<2)p++;\n   var B=((x*b)+(y*p))*0.8;\n   console.log(Math.min(A,B));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1132, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar N = Arr.shift() - 0;\nfor (var i = 0; i < N; i++) {\n  var arr = Arr.shift().split(\" \").map(Number);\n  var x = arr[0];\n  var y = arr[1];\n  var b = arr[2];\n  var p = arr[3];\n  var A = x * b + y * p;\n  while (b < 5) {\n    b++;\n  }\n  while (p < 2) {\n    p++;\n  }\n  var B = (x * b + y * p) * 0.8;\n  console.log(Math.min(A, B));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.43973215317200753, "ngram_match_score": 0.017146077542090753, "weighted_ngram_match_score": 0.056999926450287286, "syntax_match_score": 0.6847826086956522, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00274_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var sum=0x0;var flag=![];arr['forEach'](function(v){if(v!=0x0)sum+=0x1;if(v>=0x2)flag=!![];});console['log'](flag?sum+0x1:'NA');}", "test_cases": [["2\n3 2\n3\n0 1 1\n1\n1000\n0", "3\nNA\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var sum=0;\n   var flag=false;\n   arr.forEach(function(v){\n      if(v!=0)sum+=1;\n      if(v>=2)flag=true;\n   });\n   console.log(flag?sum+1:\"NA\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1133, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var sum = 0;\n  var flag = false;\n  arr.forEach(function (v) {\n    if (v != 0) {\n      sum += 1;\n    }\n    if (v >= 2) {\n      flag = true;\n    }\n  });\n  console.log(flag ? sum + 1 : \"NA\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4471569555640063, "ngram_match_score": 0.01997028668887824, "weighted_ngram_match_score": 0.06735883426844565, "syntax_match_score": 0.7012987012987013, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.01538692786635365, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07843137254901966, "new_decrease_halstead_effort": 0.2393124232615249}}
{"filename": "p00275_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;var n=[];var p=0x0;for(var i=0x0;i<N;i++)n[i]=0x0;var str=Arr['shift']();for(var i=0x0;i<str['length'];i++){var v=str[i];var j=i%N;if(v=='M')n[j]++;if(v=='S'){p+=n[j]+0x1;n[j]=0x0;}if(v=='L'){n[j]+=p+0x1;p=0x0;}}n['sort'](function(a,b){return a-b;});console['log'](n['join']('\\x20')+'\\x20'+p);}", "test_cases": [["2\nSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n2\nSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMSL\n5\nMMMMMMSLSLLMMMSMMSLMMMLMMMMLSLLLLMLSMMLMMLLMSSSLMMMMLMLSMLMSMMMMMMMSMMMMMMLMMMMMSMMMLMMLMMMMMMMMMSSM\n0", "42 58 0\n0 100 0\n0 0 3 10 59 28"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var n=[];\n   var p=0;\n   for(var i=0;i<N;i++)n[i]=0;\n   var str=Arr.shift();\n   for(var i=0;i<str.length;i++){\n      var v=str[i];\n      var j=i%N;\n      if(v==\"M\")n[j]++;\n      if(v==\"S\"){p+=(n[j]+1);n[j]=0;}\n      if(v==\"L\"){n[j]+=(p+1);p=0;}\n   }\n   n.sort(function(a,b){return a-b;});\n   console.log(n.join(\" \")+\" \"+p);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1134, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  var n = [];\n  var p = 0;\n  for (var i = 0; i < N; i++) {\n    n[i] = 0;\n  }\n  var str = Arr.shift();\n  for (var i = 0; i < str.length; i++) {\n    var v = str[i];\n    var j = i % N;\n    if (v == \"M\") {\n      n[j]++;\n    }\n    if (v == \"S\") {\n      p += n[j] + 1;\n      n[j] = 0;\n    }\n    if (v == \"L\") {\n      n[j] += p + 1;\n      p = 0;\n    }\n  }\n  n.sort(function (a, b) {\n    return a - b;\n  });\n  console.log(n.join(\" \") + \" \" + p);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4673681220766096, "ngram_match_score": 0.010366337342543096, "weighted_ngram_match_score": 0.04398010054372721, "syntax_match_score": 0.8151260504201681, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.018867924528301883, "new_decrease_halstead_effort": 0.09867292588245902}}
{"filename": "p00311_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [h1,h2]=arr['shift']()['split']('\\x20')['map'](Number);var [k1,k2]=arr['shift']()['split']('\\x20')['map'](Number);var [a,b,c,d]=arr['shift']()['split']('\\x20')['map'](Number);var h=h1*a+h2*b+Math['floor'](h1/0xa)*c+Math['floor'](h2/0x14)*d;var k=k1*a+k2*b+Math['floor'](k1/0xa)*c+Math['floor'](k2/0x14)*d;if(h==k)console['log']('even');else if(h>k)console['log']('hiroshi');else console['log']('kenjiro');", "test_cases": [["5 1\n3 1\n1 2 5 5", "hiroshi"], ["5 1\n4 2\n1 2 5 5", "kenjiro"], ["0 20\n10 0\n1 1 10 0", "even"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar [h1,h2] = arr.shift().split(\" \").map(Number);\nvar [k1,k2] = arr.shift().split(\" \").map(Number);\nvar [a,b,c,d] = arr.shift().split(\" \").map(Number);\nvar h = h1*a + h2*b+Math.floor(h1/10)*c+Math.floor(h2/20)*d;\nvar k = k1*a + k2*b+Math.floor(k1/10)*c+Math.floor(k2/20)*d;\nif(h==k)console.log(\"even\");\nelse if(h>k)console.log(\"hiroshi\");\nelse console.log(\"kenjiro\");\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1135, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [h1, h2] = arr.shift().split(\" \").map(Number);\nvar [k1, k2] = arr.shift().split(\" \").map(Number);\nvar [a, b, c, d] = arr.shift().split(\" \").map(Number);\nvar h = h1 * a + h2 * b + Math.floor(h1 / 10) * c + Math.floor(h2 / 20) * d;\nvar k = k1 * a + k2 * b + Math.floor(k1 / 10) * c + Math.floor(k2 / 20) * d;\nif (h == k) {\n  console.log(\"even\");\n} else if (h > k) {\n  console.log(\"hiroshi\");\n} else {\n  console.log(\"kenjiro\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6303250661597204, "ngram_match_score": 0.16676834853121855, "weighted_ngram_match_score": 0.39763536438352537, "syntax_match_score": 0.9568965517241379, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00312_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [D,L]=input['trim']()['split']('\\x20')['map'](Number);var amari=D%L;var yakusuu=(D-amari)/L;console['log'](yakusuu+amari);", "test_cases": [["10 5", "2"], ["7 4", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [D,L] = input.trim().split(\" \").map(Number);\nvar amari = D%L;\nvar yakusuu = (D - amari)/L;\nconsole.log(yakusuu + amari);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1136, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [D, L] = input.trim().split(\" \").map(Number);\nvar amari = D % L;\nvar yakusuu = (D - amari) / L;\nconsole.log(yakusuu + amari);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7168261627194124, "ngram_match_score": 0.38260294162784475, "weighted_ngram_match_score": 0.4847017092498049, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00313_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var xyz=[];for(var i=0x0;i<=n;i++)xyz[i]=[0x0,0x0,0x0];var x=arr['shift']()['split']('\\x20')['map'](Number);var y=arr['shift']()['split']('\\x20')['map'](Number);var z=arr['shift']()['split']('\\x20')['map'](Number);x['shift']();y['shift']();z['shift']();x['forEach'](v=>{xyz[v][0x0]=0x1;});y['forEach'](v=>{xyz[v][0x1]=0x1;});z['forEach'](v=>{xyz[v][0x2]=0x1;});xyz['shift']();var cnt=0x0;xyz['forEach'](v=>{if(v[0x0]==0x0&&v[0x2]==0x1)cnt++;else if(v[0x1]==0x1&&v[0x2]==0x1)cnt++;});console['log'](cnt);", "test_cases": [["5\n3 1 2 3\n2 4 5\n2 3 4", "1"], ["100\n3 1 100 4\n0\n2 2 3", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n= arr.shift()-0;\nvar xyz = [];\nfor(var i=0;i<=n;i++)xyz[i]=[0,0,0];\nvar x = arr.shift().split(\" \").map(Number);\nvar y = arr.shift().split(\" \").map(Number);\nvar z = arr.shift().split(\" \").map(Number);\nx.shift();\ny.shift();\nz.shift();\nx.forEach(v=>{\n   xyz[v][0]=1;\n});\ny.forEach(v=>{\n   xyz[v][1]=1;\n});\nz.forEach(v=>{\n   xyz[v][2]=1;\n});\nxyz.shift();\nvar cnt = 0;\nxyz.forEach(v=>{\n   if(v[0]==0 && v[2]==1)cnt++;\n   else if(v[1]==1 && v[2]==1)cnt++;\n});\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1137, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar xyz = [];\nfor (var i = 0; i <= n; i++) {\n  xyz[i] = [0, 0, 0];\n}\nvar x = arr.shift().split(\" \").map(Number);\nvar y = arr.shift().split(\" \").map(Number);\nvar z = arr.shift().split(\" \").map(Number);\nx.shift();\ny.shift();\nz.shift();\nx.forEach(v => {\n  xyz[v][0] = 1;\n});\ny.forEach(v => {\n  xyz[v][1] = 1;\n});\nz.forEach(v => {\n  xyz[v][2] = 1;\n});\nxyz.shift();\nvar cnt = 0;\nxyz.forEach(v => {\n  if (v[0] == 0 && v[2] == 1) {\n    cnt++;\n  } else if (v[1] == 1 && v[2] == 1) {\n    cnt++;\n  }\n});\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6835864374262517, "ngram_match_score": 0.2790774196389279, "weighted_ngram_match_score": 0.5210578037502895, "syntax_match_score": 0.9342105263157895, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00314_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var p=arr['shift']()['split']('\\x20')['map'](Number);var ans=0x0;for(var i=0x1;i<=0x64;i++){var cnt=0x0;p['forEach'](v=>{if(v>=i)cnt++;});if(cnt>=i)ans=i;}console['log'](ans);", "test_cases": [["7\n5 4 3 10 2 4 1", "4"], ["3\n1 1 100", "1"], ["4\n11 15 58 1", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n= arr.shift()-0;\nvar p = arr.shift().split(\" \").map(Number);\nvar ans = 0;\nfor(var i=1;i<=100;i++){\n   var cnt = 0;\n   p.forEach(v=>{\n      if(v>=i)cnt++;\n   });\n   if(cnt>=i)ans=i;\n}\nconsole.log(ans);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1138, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar p = arr.shift().split(\" \").map(Number);\nvar ans = 0;\nfor (var i = 1; i <= 100; i++) {\n  var cnt = 0;\n  p.forEach(v => {\n    if (v >= i) {\n      cnt++;\n    }\n  });\n  if (cnt >= i) {\n    ans = i;\n  }\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6513769241734996, "ngram_match_score": 0.2563544580641369, "weighted_ngram_match_score": 0.4940807748617453, "syntax_match_score": 0.855072463768116, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00321_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var nf=arr['shift']()['split']('\\x20')['map'](Number);var f=nf[0x1];var obj={};arr=arr['map'](function(v){v=v['split']('\\x20');v['shift']();v['forEach'](function(V){obj[V]={};});return v;});for(var k in obj){for(var K in obj){obj[k][K]=0x0;}}arr['forEach'](function(v){for(var i=0x0;i<v['length'];i++){for(var j=0x0;j<v['length'];j++){obj[v[i]][v[j]]++;}}});var ans=[];for(var k in obj){for(var K in obj){obj[K][k]=0x0;if(obj[k][K]>=f){ans['push']([k,K]['sort']()['join']('\\x20'));}}}ans['sort']();console['log'](ans['length']);if(ans['length']!=0x0)console['log'](ans['join']('\\x0a'));", "test_cases": [["5 2\n3 bread milk banana\n2 milk cornflakes\n3 potato bread milk\n4 cornflakes bread milk butter\n2 potato bread", "3\nbread milk\nbread potato\ncornflakes milk"], ["5 5\n3 bread milk banana\n2 milk cornflakes\n3 potato bread milk\n4 cornflakes bread milk butter\n2 potato bread", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar nf = arr.shift().split(\" \").map(Number);\nvar f = nf[1];\nvar obj = {};\narr = arr.map(function(v) {\n   v = v.split(\" \");\n   v.shift();\n   v.forEach(function(V) {\n      obj[V] = {};\n   });\n   return v;\n});\nfor (var k in obj) {\n   for (var K in obj) {\n      obj[k][K] = 0;\n   }\n}\narr.forEach(function(v) {\n   for (var i = 0; i < v.length; i++) {\n      for (var j = 0; j < v.length; j++) {\n         obj[v[i]][v[j]]++;\n      }\n   }\n});\nvar ans = [];\nfor (var k in obj) {\n   for (var K in obj) {\n      obj[K][k] = 0;\n      if (obj[k][K] >= f) {\n         ans.push([k, K].sort().join(\" \"));\n      }\n   }\n}\nans.sort();\nconsole.log(ans.length);\nif (ans.length != 0) console.log(ans.join(\"\\n\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1139, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar nf = arr.shift().split(\" \").map(Number);\nvar f = nf[1];\nvar obj = {};\narr = arr.map(function (v) {\n  v = v.split(\" \");\n  v.shift();\n  v.forEach(function (V) {\n    obj[V] = {};\n  });\n  return v;\n});\nfor (var k in obj) {\n  for (var K in obj) {\n    obj[k][K] = 0;\n  }\n}\narr.forEach(function (v) {\n  for (var i = 0; i < v.length; i++) {\n    for (var j = 0; j < v.length; j++) {\n      obj[v[i]][v[j]]++;\n    }\n  }\n});\nvar ans = [];\nfor (var k in obj) {\n  for (var K in obj) {\n    obj[K][k] = 0;\n    if (obj[k][K] >= f) {\n      ans.push([k, K].sort().join(\" \"));\n    }\n  }\n}\nans.sort();\nconsole.log(ans.length);\nif (ans.length != 0) {\n  console.log(ans.join(\"\\n\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9383590322588597, "ngram_match_score": 0.8630760354725202, "weighted_ngram_match_score": 0.9032633193693703, "syntax_match_score": 0.9870967741935484, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00322_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var x=input['trim']()['split']('\\x20')['map'](Number);var cnt=0x0;for(var a=0x1;a<=0x9;a++){for(var b=0x1;b<=0x9;b++){for(var c=0x1;c<=0x9;c++){for(var d=0x1;d<=0x8;d++){for(var e=0x1;e<=0x9;e++){for(var f=0x1;f<=0x9;f++){var z=(a+c+f+(b+e)*0xa+d*0x64+'')['split']('')['map'](Number);if(z['length']!=0x3)continue;z=[a,b,c,d,e,f]['concat'](z);var flag=z['every'](function(v,i){return(x[i]==v||x[i]==-0x1)&&z['indexOf'](i+0x1)>=0x0;});if(flag)cnt++;}}}}}}console['log'](cnt);", "test_cases": [["7 6 -1 1 -1 9 2 3 4", "1"], ["7 6 5 1 8 9 2 3 4", "0"], ["-1 -1 -1 -1 -1 -1 8 4 6", "12"], ["-1 -1 -1 -1 -1 -1 -1 -1 -1", "168"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim().split(\" \").map(Number);\nvar cnt=0;\nfor(var a=1;a<=9;a++){\nfor(var b=1;b<=9;b++){\nfor(var c=1;c<=9;c++){\nfor(var d=1;d<=8;d++){\nfor(var e=1;e<=9;e++){\nfor(var f=1;f<=9;f++){\nvar z=((a+c+f+(b+e)*10+d*100)+\"\").split(\"\").map(Number);\nif(z.length!=3)continue;\nz=[a,b,c,d,e,f].concat(z);\nvar flag = z.every(function(v,i){\n   return  (x[i] == v || x[i] == -1) && (z.indexOf(i+1)>=0) ;\n});\nif(flag)cnt++;\n}}}}}}\nconsole.log(cnt);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1140, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar x = input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor (var a = 1; a <= 9; a++) {\n  for (var b = 1; b <= 9; b++) {\n    for (var c = 1; c <= 9; c++) {\n      for (var d = 1; d <= 8; d++) {\n        for (var e = 1; e <= 9; e++) {\n          for (var f = 1; f <= 9; f++) {\n            var z = (a + c + f + (b + e) * 10 + d * 100 + \"\").split(\"\").map(Number);\n            if (z.length != 3) {\n              continue;\n            }\n            z = [a, b, c, d, e, f].concat(z);\n            var flag = z.every(function (v, i) {\n              return (x[i] == v || x[i] == -1) && z.indexOf(i + 1) >= 0;\n            });\n            if (flag) {\n              cnt++;\n            }\n          }\n        }\n      }\n    }\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5248838616536835, "ngram_match_score": 0.07787466997421096, "weighted_ngram_match_score": 0.275506930486677, "syntax_match_score": 0.7461538461538462, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00330_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var x=input['trim']()-0x0;console['log'](x*0x20);", "test_cases": [["4", "128"], ["3", "96"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim() -0;\nconsole.log(x*32);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1141, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar x = input.trim() - 0;\nconsole.log(x * 32);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.554783954020526, "ngram_match_score": 0.07596458453655348, "weighted_ngram_match_score": 0.1431712315455507, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00331_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [h,r]=input['trim']()['split']('\\x20')['map'](Number);if(r+h==0x0)console['log'](0x0);else if(r+h>0x0)console['log'](0x1);else console['log'](-0x1);", "test_cases": [["-3 3", "0"], ["3 3", "1"], ["-4 3", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [h,r]=input.trim().split(\" \").map(Number);\nif(r+h==0)console.log(0);\nelse if(r+h>0)console.log(1);\nelse console.log(-1);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1142, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [h, r] = input.trim().split(\" \").map(Number);\nif (r + h == 0) {\n  console.log(0);\n} else if (r + h > 0) {\n  console.log(1);\n} else {\n  console.log(-1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5085157597879306, "ngram_match_score": 0.03462612267995555, "weighted_ngram_match_score": 0.10581989519517154, "syntax_match_score": 0.8936170212765957, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00332_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [e,y]=input['trim']()['split']('\\x20')['map'](Number);var mtsh='MTSH'['split']('');if(e==0x0){if(y>=0x74c&&y<=0x777){e=0x1;y-=0x74c;}else if(y>=0x778&&y<=0x785){e=0x2;y-=0x778;}else if(y>=0x786&&y<=0x7c4){e=0x3;y-=0x786;}else if(y>=0x7c5&&y<=0x7e0){e=0x4;y-=0x7c5;}console['log'](mtsh[e-0x1]+(y+0x1));}else if(e==0x1)console['log'](0x74c+y-0x1);else if(e==0x2)console['log'](0x778+y-0x1);else if(e==0x3)console['log'](0x786+y-0x1);else if(e==0x4)console['log'](0x7c5+y-0x1);", "test_cases": [["0 2015", "H27"], ["0 1912", "T1"], ["2 1", "1912"], ["4 28", "2016"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [e,y] = input.trim().split(\" \").map(Number);\nvar mtsh = \"MTSH\".split(\"\");\nif(e==0){\n   if(y>=1868 && y<=1911){e=1;y-=1868}\n   else if(y>=1912 && y<=1925){e=2;y-=1912}\n   else if(y>=1926 && y<=1988){e=3;y-=1926}\n   else if(y>=1989 && y<=2016){e=4;y-=1989}\n   console.log(mtsh[e-1] + (y+1));\n}\nelse if(e==1)console.log(1868 + y - 1);\nelse if(e==2)console.log(1912 + y - 1);\nelse if(e==3)console.log(1926 + y - 1);\nelse if(e==4)console.log(1989 + y - 1);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1143, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [e, y] = input.trim().split(\" \").map(Number);\nvar mtsh = \"MTSH\".split(\"\");\nif (e == 0) {\n  if (y >= 1868 && y <= 1911) {\n    e = 1;\n    y -= 1868;\n  } else if (y >= 1912 && y <= 1925) {\n    e = 2;\n    y -= 1912;\n  } else if (y >= 1926 && y <= 1988) {\n    e = 3;\n    y -= 1926;\n  } else if (y >= 1989 && y <= 2016) {\n    e = 4;\n    y -= 1989;\n  }\n  console.log(mtsh[e - 1] + (y + 1));\n} else if (e == 1) {\n  console.log(1868 + y - 1);\n} else if (e == 2) {\n  console.log(1912 + y - 1);\n} else if (e == 3) {\n  console.log(1926 + y - 1);\n} else if (e == 4) {\n  console.log(1989 + y - 1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.592104676207889, "ngram_match_score": 0.12377457524275488, "weighted_ngram_match_score": 0.32338428706911604, "syntax_match_score": 0.9212598425196851, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00333_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [w,h,c]=input['trim']()['split']('\\x20')['map'](Number);var max=0x1;for(var i=0x1;i<=0x3e8;i++){if(w%i==0x0&&h%i==0x0)max=i;}console['log'](w*h/(max*max)*c);", "test_cases": [["10 20 5", "10"], ["27 6 1", "18"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [w,h,c]= input.trim().split(\" \").map(Number);\nvar max=1;\nfor(var i=1;i<=1000;i++){\n   if(w%i==0 && h%i==0)max=i;\n}\nconsole.log(((w*h)/(max*max))*c);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1144, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [w, h, c] = input.trim().split(\" \").map(Number);\nvar max = 1;\nfor (var i = 1; i <= 1000; i++) {\n  if (w % i == 0 && h % i == 0) {\n    max = i;\n  }\n}\nconsole.log(w * h / (max * max) * c);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48784350931731235, "ngram_match_score": 0.031814732476151096, "weighted_ngram_match_score": 0.10823855007611716, "syntax_match_score": 0.8113207547169812, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00340_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x20')['map'](Number);var a=arr[0x0];var b=arr[0x1];var c=arr[0x2];var d=arr[0x3];if(a==b&&c==d)console['log']('yes');else if(a==c&&b==d)console['log']('yes');else if(a==d&&b==c)console['log']('yes');else console['log']('no');", "test_cases": [["1 1 3 4", "no"], ["1 1 2 2", "yes"], ["2 1 1 2", "yes"], ["4 4 4 10", "no"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\" \").map(Number);\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\nvar d = arr[3];\nif (a == b && c == d) console.log(\"yes\");\nelse if (a == c && b == d) console.log(\"yes\");\nelse if (a == d && b == c) console.log(\"yes\");\nelse console.log(\"no\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1145, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\" \").map(Number);\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\nvar d = arr[3];\nif (a == b && c == d) {\n  console.log(\"yes\");\n} else if (a == c && b == d) {\n  console.log(\"yes\");\n} else if (a == d && b == c) {\n  console.log(\"yes\");\n} else {\n  console.log(\"no\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.855336421047982, "ngram_match_score": 0.7060443136562758, "weighted_ngram_match_score": 0.8111917814945563, "syntax_match_score": 0.9041095890410958, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00341_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x20')['map'](Number);arr['sort'](function(a,b){return a-b;});var sum=0x0;if(arr[0x0]==arr[0x1]&&arr[0x1]==arr[0x2]&&arr[0x2]==arr[0x3])sum++;if(arr[0x0+0x4]==arr[0x1+0x4]&&arr[0x1+0x4]==arr[0x2+0x4]&&arr[0x2+0x4]==arr[0x3+0x4])sum++;if(arr[0x0+0x8]==arr[0x1+0x8]&&arr[0x1+0x8]==arr[0x2+0x8]&&arr[0x2+0x8]==arr[0x3+0x8])sum++;console['log'](sum==0x3?'yes':'no');", "test_cases": [["1 1 3 4 8 9 7 3 4 5 5 5", "no"], ["1 1 2 2 3 1 2 3 3 3 1 2", "yes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\" \").map(Number);\narr.sort(function(a,b){\n   return a - b;\n});\nvar sum=0;\nif(arr[0] == arr[1] && arr[1] == arr[2] && arr[2] == arr[3])sum++;\nif(arr[0+4] == arr[1+4] && arr[1+4] == arr[2+4] && arr[2+4] == arr[3+4])sum++;\nif(arr[0+8] == arr[1+8] && arr[1+8] == arr[2+8] && arr[2+8] == arr[3+8])sum++;\nconsole.log((sum==3)?\"yes\":\"no\");", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1146, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\" \").map(Number);\narr.sort(function (a, b) {\n  return a - b;\n});\nvar sum = 0;\nif (arr[0] == arr[1] && arr[1] == arr[2] && arr[2] == arr[3]) {\n  sum++;\n}\nif (arr[4] == arr[5] && arr[5] == arr[6] && arr[6] == arr[7]) {\n  sum++;\n}\nif (arr[8] == arr[9] && arr[9] == arr[10] && arr[10] == arr[11]) {\n  sum++;\n}\nconsole.log(sum == 3 ? \"yes\" : \"no\");\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5401806505566218, "ngram_match_score": 0.2440342516092608, "weighted_ngram_match_score": 0.3666883506172263, "syntax_match_score": 0.55, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.1558441558441559, "new_decrease_halstead_effort": 0.4420336989634339}}
{"filename": "p00353_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [m,f,b]=input['trim']()['split']('\\x20')['map'](Number);if(m>=b)console['log'](0x0);else if(m+f<b)console['log']('NA');else console['log'](b-m);", "test_cases": [["1000 3000 3000", "2000"], ["5000 3000 4500", "0"], ["500 1000 2000", "NA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [m,f,b] =input.trim().split(\" \").map(Number);\nif(m>=b)console.log(0);\nelse if(m+f<b)console.log(\"NA\");\nelse console.log(b-m);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1147, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [m, f, b] = input.trim().split(\" \").map(Number);\nif (m >= b) {\n  console.log(0);\n} else if (m + f < b) {\n  console.log(\"NA\");\n} else {\n  console.log(b - m);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5058327281198336, "ngram_match_score": 0.03248847222172617, "weighted_ngram_match_score": 0.09722541898101232, "syntax_match_score": 0.8936170212765957, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00354_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var x=input['trim']()-0x0;var w=['thu','fri','sat','sun','mon','tue','wed'];console['log'](w[x%0x7]);", "test_cases": [["1", "fri"], ["9", "sat"], ["30", "sat"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x =input.trim() - 0;\nvar w = [\"thu\",\"fri\",\"sat\",\"sun\",\"mon\",\"tue\",\"wed\"];\nconsole.log(w[x%7]);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1148, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar x = input.trim() - 0;\nvar w = [\"thu\", \"fri\", \"sat\", \"sun\", \"mon\", \"tue\", \"wed\"];\nconsole.log(w[x % 7]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6491650394583445, "ngram_match_score": 0.21647200687300835, "weighted_ngram_match_score": 0.3801881509603694, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00357_1", "type": "JavaScript", "obfuscated": "function tobu(arr){var max=0x0;for(var i=0x0;i<arr['length']-0x1;i++){if(i>max)break;var d=Math['floor'](arr[i]/0xa);max=Math['max'](max,i+d);}return max>=arr['length']-0x1;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);var n=arr['shift']();if(tobu(arr)&&tobu(arr['reverse']()))console['log']('yes');else console['log']('no');", "test_cases": [["4\n20\n5\n10\n1", "no"], ["3\n10\n5\n10", "no"], ["4\n20\n30\n1\n20", "yes"]], "original": "function tobu(arr){\n   var max=0;\n   for(var i=0;i<arr.length-1;i++){\n      if(i>max)break;\n      var d = Math.floor(arr[i]/10);\n      max=Math.max(max,i+d);\n   }\n   return (max>=arr.length-1);\n}\n \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\").map(Number);\nvar n=arr.shift();\nif(tobu(arr) && tobu(arr.reverse()))console.log(\"yes\");\nelse console.log(\"no\");\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1149, "deobfuscated": "function tobu(arr) {\n  var max = 0;\n  for (var i = 0; i < arr.length - 1; i++) {\n    if (i > max) {\n      break;\n    }\n    var d = Math.floor(arr[i] / 10);\n    max = Math.max(max, i + d);\n  }\n  return max >= arr.length - 1;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nvar n = arr.shift();\nif (tobu(arr) && tobu(arr.reverse())) {\n  console.log(\"yes\");\n} else {\n  console.log(\"no\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5266835019469142, "ngram_match_score": 0.06346500849056935, "weighted_ngram_match_score": 0.16091605812061682, "syntax_match_score": 0.8823529411764706, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002633696816932929, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.028856755536898593}}
{"filename": "p00363_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [w,h,c]=input['trim']()['split']('\\x20');w=w-0x0;h=h-0x0;var ans=[];ans['push']('+'+'-'['repeat'](w-0x2)+'+');for(var i=0x0;i<h-0x2;i++)ans['push']('|'+'.'['repeat'](w-0x2)+'|');ans['push']('+'+'-'['repeat'](w-0x2)+'+');ans[Math['floor'](h/0x2)]='|'+'.'['repeat']((w-0x3)/0x2)+c+'.'['repeat']((w-0x3)/0x2)+'|';console['log'](ans['join']('\\x0a')['trim']());", "test_cases": [["3 3 B", "+-+\n|B|\n+-+"], ["11 7 Z", "+---------+\n|.........|\n|.........|\n|....Z....|\n|.........|\n|.........|\n+---------+"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [w,h,c] = input.trim().split(\" \");\nw=w-0;\nh=h-0;\nvar ans=[];\nans.push(\"+\" + \"-\".repeat(w-2) + \"+\");\nfor(var i=0;i<h - 2;i++)ans.push(\"|\" + \".\".repeat(w-2) + \"|\");\nans.push(\"+\" + \"-\".repeat(w-2) + \"+\");\nans[Math.floor(h/2)]=\"|\" + \".\".repeat((w-3)/2)  + c + \".\".repeat((w-3)/2)+ \"|\"\nconsole.log(ans.join(\"\\n\").trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1150, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [w, h, c] = input.trim().split(\" \");\nw = w - 0;\nh = h - 0;\nvar ans = [];\nans.push(\"+\" + \"-\".repeat(w - 2) + \"+\");\nfor (var i = 0; i < h - 2; i++) {\n  ans.push(\"|\" + \".\".repeat(w - 2) + \"|\");\n}\nans.push(\"+\" + \"-\".repeat(w - 2) + \"+\");\nans[Math.floor(h / 2)] = \"|\" + \".\".repeat((w - 3) / 2) + c + \".\".repeat((w - 3) / 2) + \"|\";\nconsole.log(ans.join(\"\\n\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5249377163119258, "ngram_match_score": 0.03781097136776331, "weighted_ngram_match_score": 0.07948375352906253, "syntax_match_score": 0.9824561403508771, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00364_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr=arr['map'](v=>v['split']('\\x20')['map'](Number));var [n,t]=arr['shift']();var max=0x0;arr['forEach'](v=>{max=Math['max'](max,v[0x1]/v[0x0]);});console['log']((max*t)['toFixed'](0x6));", "test_cases": [["3 10\n6 4\n4 2\n3 2", "6.666667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\narr=arr.map(v=>v.split(\" \").map(Number));\nvar [n,t]=arr.shift();\nvar max=0;\narr.forEach(v=>{\n   max=Math.max(max,v[1]/v[0]);\n});\nconsole.log((max*t).toFixed(6));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1151, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr = arr.map(v => v.split(\" \").map(Number));\nvar [n, t] = arr.shift();\nvar max = 0;\narr.forEach(v => {\n  max = Math.max(max, v[1] / v[0]);\n});\nconsole.log((max * t).toFixed(6));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5841225903570575, "ngram_match_score": 0.10571911064673743, "weighted_ngram_match_score": 0.23077125078149244, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00375_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var a=input-0x0;console['log']((a-0x1e)/0x2);", "test_cases": [["68", "19"], ["50", "10"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar a=input-0;\nconsole.log((a-30)/2);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1152, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar a = input - 0;\nconsole.log((a - 30) / 2);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5572249887460248, "ngram_match_score": 0.06541868941754436, "weighted_ngram_match_score": 0.16348126556655487, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00376_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b]=input['trim']()['split']('\\x20')['map'](Number);console['log'](Math['abs'](b-a));", "test_cases": [["20 30", "10"], ["50 25", "25"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]=input.trim().split(\" \").map(Number);\nconsole.log(Math.abs(b-a));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1153, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b] = input.trim().split(\" \").map(Number);\nconsole.log(Math.abs(b - a));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5565969526301023, "ngram_match_score": 0.08032276872815308, "weighted_ngram_match_score": 0.14606504179225632, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00377_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [n,c]=arr[0x0]['split']('\\x20')['map'](Number);var p=arr[0x1]['split']('\\x20')['map'](Number);var sum=p['reduce']((a,b)=>a+b);var x=sum%(n+0x1)==0x0?0x0:0x1;console['log'](Math['floor'](sum/(n+0x1))+x);", "test_cases": [["5 4\n5 5 6 5", "4"], ["7 5\n8 8 8 8 8", "5"], ["100 3\n3 3 3", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,c]=arr[0].split(\" \").map(Number);\nvar p=arr[1].split(\" \").map(Number);\nvar sum=p.reduce((a,b)=> a+b);\nvar x=(sum%(n+1)==0)?0:1;\nconsole.log(Math.floor(sum/(n+1))+x);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1154, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [n, c] = arr[0].split(\" \").map(Number);\nvar p = arr[1].split(\" \").map(Number);\nvar sum = p.reduce((a, b) => a + b);\nvar x = sum % (n + 1) == 0 ? 0 : 1;\nconsole.log(Math.floor(sum / (n + 1)) + x);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5113222052508251, "ngram_match_score": 0.02916679457816502, "weighted_ngram_match_score": 0.08965143818984093, "syntax_match_score": 0.9264705882352942, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00378_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b,x]=input['trim']()['split']('\\x20')['map'](Number);var min=Infinity;for(var i=0x0;i<=0x14;i++){for(var j=0x0;j<=0x28;j++){if(i*0x3e8+j*0x1f4>=x)min=Math['min'](min,i*a+j*b);}}console['log'](min);", "test_cases": [["180 100 2400", "460"], ["200 90 2018", "450"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,x]=input.trim().split(\" \").map(Number);\nvar min=Infinity;\nfor(var i=0;i<=20;i++){\n   for(var j=0;j<=40;j++){\n      if(i*1000+j*500>=x)min=Math.min(min,i*a+j*b);\n   }\n}\nconsole.log(min);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1155, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b, x] = input.trim().split(\" \").map(Number);\nvar min = Infinity;\nfor (var i = 0; i <= 20; i++) {\n  for (var j = 0; j <= 40; j++) {\n    if (i * 1000 + j * 500 >= x) {\n      min = Math.min(min, i * a + j * b);\n    }\n  }\n}\nconsole.log(min);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5100288238163146, "ngram_match_score": 0.029115238680368492, "weighted_ngram_match_score": 0.11444833244695879, "syntax_match_score": 0.896551724137931, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009836361974223662, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.030848262053235986}}
{"filename": "p00387_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b]=input['trim']()['split']('\\x20')['map'](Number);console['log'](Math['ceil'](b/a));", "test_cases": [["3 5", "2"], ["25 10", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]= input.trim().split(\" \").map(Number);\nconsole.log(Math.ceil(b/a));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1156, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b] = input.trim().split(\" \").map(Number);\nconsole.log(Math.ceil(b / a));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5599306311960255, "ngram_match_score": 0.09303723531853667, "weighted_ngram_match_score": 0.14668528946556558, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00388_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [h,a,b]=input['trim']()['split']('\\x20')['map'](Number);var cnt=0x0;for(var i=a;i<=b;i++){if(h%i==0x0)cnt++;}console['log'](cnt);", "test_cases": [["100 2 4", "2"], ["101 3 5", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [h,a,b]= input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor(var i=a;i<=b;i++){\n   if(h%i==0)cnt++;\n}\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1157, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [h, a, b] = input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor (var i = a; i <= b; i++) {\n  if (h % i == 0) {\n    cnt++;\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6180605401319728, "ngram_match_score": 0.1736112349911612, "weighted_ngram_match_score": 0.3916541813506835, "syntax_match_score": 0.9069767441860465, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00389_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [n,k]=input['trim']()['split']('\\x20')['map'](Number);var takasa=0x0;var w=0x0;var cnt=0x0;while(!![]){if(n==0x0)break;n--;cnt++;if(w<=k*cnt){takasa++;w+=cnt;cnt=0x0;}}console['log'](takasa);", "test_cases": [["4 2", "3"], ["5 2", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,k]= input.trim().split(\" \").map(Number);\nvar takasa=0;\nvar w=0;\nvar cnt=0;\nwhile(true){\n   if(n==0)break;\n   n--;\n   cnt++;\n   if(w<=k*cnt){\n      takasa++;\n      w+=cnt;\n      cnt=0;\n   }\n}\nconsole.log(takasa);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1158, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [n, k] = input.trim().split(\" \").map(Number);\nvar takasa = 0;\nvar w = 0;\nvar cnt = 0;\nwhile (true) {\n  if (n == 0) {\n    break;\n  }\n  n--;\n  cnt++;\n  if (w <= k * cnt) {\n    takasa++;\n    w += cnt;\n    cnt = 0;\n  }\n}\nconsole.log(takasa);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5198067865963701, "ngram_match_score": 0.046923752715180234, "weighted_ngram_match_score": 0.10373196509887175, "syntax_match_score": 0.9285714285714286, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007106128657174082, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.042857142857142816, "new_decrease_halstead_effort": 0.1842046904399498}}
{"filename": "p00589_1", "type": "JavaScript", "obfuscated": "var a=[''];a[0x1]='\\x27,.,!?'['split']('');a[0x2]='abcABC'['split']('');a[0x3]='defDEF'['split']('');a[0x4]='ghiGHI'['split']('');a[0x5]='jklJKL'['split']('');a[0x6]='mnoMNO'['split']('');a[0x7]='pqrsPQRS'['split']('');a[0x8]='tuvTUV'['split']('');a[0x9]='wxyzWXYZ'['split']('');var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr['forEach'](function(v){v=v['replace'](/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(x){if(x[0x0]=='0')return x['slice'](0x1)['replace'](/0/g,'\\x20');else return a[x[0x0]-0x0][x['length']-0x1];});console['log'](v);});", "test_cases": [["666660666\n44444416003334446633111\n20202202000333003330333", "No\nI'm fine.\naaba  f ff"]], "original": "var a=[\"\"];\na[1]=\"',.,!?\".split(\"\");\na[2]=\"abcABC\".split(\"\");\na[3]=\"defDEF\".split(\"\");\na[4]=\"ghiGHI\".split(\"\");\na[5]=\"jklJKL\".split(\"\");\na[6]=\"mnoMNO\".split(\"\");\na[7]=\"pqrsPQRS\".split(\"\");\na[8]=\"tuvTUV\".split(\"\");\na[9]=\"wxyzWXYZ\".split(\"\");\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.forEach(function(v){\n   v=v.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(x){\n      if(x[0]==\"0\")return x.slice(1).replace(/0/g,\" \");\n      else return a[x[0]-0][x.length-1];\n   });\n   console.log(v);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1159, "deobfuscated": "var a = [\"\"];\na[1] = \"',.,!?\".split(\"\");\na[2] = \"abcABC\".split(\"\");\na[3] = \"defDEF\".split(\"\");\na[4] = \"ghiGHI\".split(\"\");\na[5] = \"jklJKL\".split(\"\");\na[6] = \"mnoMNO\".split(\"\");\na[7] = \"pqrsPQRS\".split(\"\");\na[8] = \"tuvTUV\".split(\"\");\na[9] = \"wxyzWXYZ\".split(\"\");\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr.forEach(function (v) {\n  v = v.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g, function (x) {\n    if (x[0] == \"0\") {\n      return x.slice(1).replace(/0/g, \" \");\n    } else {\n      return a[x[0] - 0][x.length - 1];\n    }\n  });\n  console.log(v);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49864259014906986, "ngram_match_score": 0.024785179584448456, "weighted_ngram_match_score": 0.07123445637414974, "syntax_match_score": 0.8985507246376812, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00592_1", "type": "JavaScript", "obfuscated": "function time(x){x=x['split']('')['map'](Number);return x[0x0]*0xa*0x3c+x[0x1]*0x3c+x[0x2]*0xa+x[0x3];}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var npq=arr['shift']();if(npq=='0\\x200\\x200')break;npq=npq['split']('\\x20');var n=npq[0x0]-0x0;var p=time(npq[0x1]);var q=time(npq[0x2]);var tv=[];for(var i=p;i<q;i++)tv[i]=0x0;for(var i=0x0;i<n;i++){var cm=arr['shift']();var ary=arr['shift']()['split']('\\x20');for(var j=0x0;j<cm;j++){var start=time(ary['shift']());var stop=time(ary['shift']());for(var k=start;k<stop;k++)tv[k]++;}}var max=0x0;var cnt=0x0;for(var i=p;i<q;i++){if(tv[i]!=n){cnt++;}else{max=Math['max'](max,cnt);cnt=0x0;}}max=Math['max'](max,cnt);console['log'](max);}", "test_cases": [["1 2100 2400\n1\n2130 2200\n3 2100 2400\n3\n2100 2130 2200 2230 2300 2330\n2\n2130 2200 2330 2400\n2\n2100 2130 2330 2400\n0 0 0", "120\n180"]], "original": "function time(x){\n   x=x.split(\"\").map(Number);\n   return x[0]*10*60+x[1]*60+x[2]*10+x[3];\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var npq=arr.shift();\n   if(npq==\"0 0 0\")break;\n   npq=npq.split(\" \");\n   var n=npq[0]-0;\n   var p=time(npq[1]);\n   var q=time(npq[2]);\n   var tv=[];\n   for(var i=p;i<q;i++)tv[i]=0;\n   for(var i=0;i<n;i++){\n      var cm=arr.shift();\n      var ary=arr.shift().split(\" \");\n      for(var j=0;j<cm;j++){\n         var start=time(ary.shift());\n         var stop=time(ary.shift());\n         for(var k=start;k<stop;k++)tv[k]++;\n      }\n   }\n   var max=0;\n   var cnt=0;\n   for(var i=p;i<q;i++){\n      if(tv[i]!=n){cnt++;}\n      else {max=Math.max(max,cnt);cnt=0;}\n   }\n   max=Math.max(max,cnt);\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1160, "deobfuscated": "function time(x) {\n  x = x.split(\"\").map(Number);\n  return x[0] * 10 * 60 + x[1] * 60 + x[2] * 10 + x[3];\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var npq = arr.shift();\n  if (npq == \"0 0 0\") {\n    break;\n  }\n  npq = npq.split(\" \");\n  var n = npq[0] - 0;\n  var p = time(npq[1]);\n  var q = time(npq[2]);\n  var tv = [];\n  for (var i = p; i < q; i++) {\n    tv[i] = 0;\n  }\n  for (var i = 0; i < n; i++) {\n    var cm = arr.shift();\n    var ary = arr.shift().split(\" \");\n    for (var j = 0; j < cm; j++) {\n      var start = time(ary.shift());\n      var stop = time(ary.shift());\n      for (var k = start; k < stop; k++) {\n        tv[k]++;\n      }\n    }\n  }\n  var max = 0;\n  var cnt = 0;\n  for (var i = p; i < q; i++) {\n    if (tv[i] != n) {\n      cnt++;\n    } else {\n      max = Math.max(max, cnt);\n      cnt = 0;\n    }\n  }\n  max = Math.max(max, cnt);\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5159698599006923, "ngram_match_score": 0.027805291789621225, "weighted_ngram_match_score": 0.09289232963132972, "syntax_match_score": 0.9431818181818182, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012048192771084376, "new_decrease_halstead_effort": 0.06507037871866006}}
{"filename": "p00595_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['forEach'](function(v){var arr=v['split']('\\x20')['map'](Number);var m=Math['max'](arr[0x0],arr[0x1]);var n=Math['min'](arr[0x0],arr[0x1]);while(n!=0x0){var N=n;n=m%n;m=N;}console['log'](m);});", "test_cases": [["57 38\n60 84", "19\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var m=Math.max(arr[0],arr[1]);\n   var n=Math.min(arr[0],arr[1]);\n   while(n!=0){\n      var N=n;\n      n=m%n;\n      m=N;\n   }\n   console.log(m);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1161, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.forEach(function (v) {\n  var arr = v.split(\" \").map(Number);\n  var m = Math.max(arr[0], arr[1]);\n  var n = Math.min(arr[0], arr[1]);\n  while (n != 0) {\n    var N = n;\n    n = m % n;\n    m = N;\n  }\n  console.log(m);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5113569006218792, "ngram_match_score": 0.040918065342970766, "weighted_ngram_match_score": 0.09541862805363703, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00602_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr['forEach'](function(value){var vd=value['split']('\\x20')['map'](Number);var v=vd[0x0];var d=vd[0x1];var f=[];f[0x0]=0x1;f[0x1]=0x2;for(var i=0x2;i<=v;i++){f[i]=(f[i-0x1]+f[i-0x2])%0x3e9;}f['shift']();f['sort'](function(a,b){return a-b;});var cnt=0x0;for(var i=0x1;i<f['length'];i++){if(f[i]-f[i-0x1]<d)cnt++;}console['log'](f['length']-cnt);});", "test_cases": [["5 5\n50 1\n13 13", "2\n50\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.forEach(function(value){\n   var vd=value.split(\" \").map(Number);\n   var v=vd[0];\n   var d=vd[1];\n   var f=[];\n   f[0]=1;\n   f[1]=2;\n   for(var i=2;i<=v;i++){\n      f[i]=(f[i - 1] + f[i - 2])%1001;\n   }\n   f.shift();\n   f.sort(function(a,b){return a-b});\n   var cnt=0;\n   for(var i=1;i<f.length;i++){\n         if(f[i]-f[i-1]<d)cnt++;\n   }\n   console.log(f.length-cnt);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1162, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr.forEach(function (value) {\n  var vd = value.split(\" \").map(Number);\n  var v = vd[0];\n  var d = vd[1];\n  var f = [];\n  f[0] = 1;\n  f[1] = 2;\n  for (var i = 2; i <= v; i++) {\n    f[i] = (f[i - 1] + f[i - 2]) % 1001;\n  }\n  f.shift();\n  f.sort(function (a, b) {\n    return a - b;\n  });\n  var cnt = 0;\n  for (var i = 1; i < f.length; i++) {\n    if (f[i] - f[i - 1] < d) {\n      cnt++;\n    }\n  }\n  console.log(f.length - cnt);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5363659849957315, "ngram_match_score": 0.06183861970789629, "weighted_ngram_match_score": 0.16853098065238817, "syntax_match_score": 0.9150943396226415, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00603_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){if(Arr['length']==0x0)break;var nr=Arr['shift']()['split']('\\x20')['map'](Number);var n=nr[0x0];var r=nr[0x1];var card=[];for(var i=0x0;i<n;i++)card[i]=i;var arr=Arr['shift']()['split']('\\x20')['map'](Number);for(var i=0x0;i<r;i++){var v=arr[i];var a=[];var b=[];for(var j=0x0;j<n;j++)Math['floor'](n/0x2)>j?b['push'](card[j]):a['push'](card[j]);card=[];while(!![]){if(a['length']==0x0&&b['length']==0x0)break;card=card['concat'](a['splice'](0x0,v));card=card['concat'](b['splice'](0x0,v));}}console['log'](card[card['length']-0x1]);}", "test_cases": [["9 1\n3\n9 4\n1 2 3 4", "3\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var nr=Arr.shift().split(\" \").map(Number);\n   var n=nr[0];\n   var r=nr[1];\n   var card=[];\n   for(var i=0;i<n;i++)card[i]=i;\n   var arr=Arr.shift().split(\" \").map(Number);\n   for(var i=0;i<r;i++){\n      var v=arr[i];\n      var a=[];\n      var b=[];\n      for(var j=0;j<n;j++)(Math.floor(n/2)>j)?b.push(card[j]): a.push(card[j]);\n      card=[];\n      while(true){\n         if(a.length==0 && b.length==0)break;\n         card=card.concat(a.splice(0,v));\n         card=card.concat(b.splice(0,v));\n      }\n   }\n   console.log(card[card.length-1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1163, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (Arr.length == 0) {\n    break;\n  }\n  var nr = Arr.shift().split(\" \").map(Number);\n  var n = nr[0];\n  var r = nr[1];\n  var card = [];\n  for (var i = 0; i < n; i++) {\n    card[i] = i;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  for (var i = 0; i < r; i++) {\n    var v = arr[i];\n    var a = [];\n    var b = [];\n    for (var j = 0; j < n; j++) {\n      if (Math.floor(n / 2) > j) {\n        b.push(card[j]);\n      } else {\n        a.push(card[j]);\n      }\n    }\n    card = [];\n    while (true) {\n      if (a.length == 0 && b.length == 0) {\n        break;\n      }\n      card = card.concat(a.splice(0, v));\n      card = card.concat(b.splice(0, v));\n    }\n  }\n  console.log(card[card.length - 1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4831676040838546, "ngram_match_score": 0.012723565378067797, "weighted_ngram_match_score": 0.04323452219022744, "syntax_match_score": 0.8767123287671232, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1071428571428572, "length_score": -0.1071428571428572, "increase_maintainability": -0.015778476202777947, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023474178403755874, "new_decrease_halstead_effort": 0.10265194772237007}}
{"filename": "p00604_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){if(Arr['length']==0x0)break;var n=Arr['shift']();var arr=Arr['shift']()['split']('\\x20')['map'](Number);arr['sort'](function(a,b){return a-b;});var sum=0x0;var time=0x0;arr['forEach'](function(v){sum+=v+time;time+=v;});console['log'](sum);}", "test_cases": [["3\n10 20 30\n7\n56 26 62 43 25 80 7", "100\n873"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var n=Arr.shift();\n   var arr=Arr.shift().split(\" \").map(Number);\n   arr.sort(function(a,b){return a-b;});\n   var sum=0;\n   var time=0;\n   arr.forEach(function(v){\n      sum+=v+time;\n      time+=v;\n   });\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1164, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (Arr.length == 0) {\n    break;\n  }\n  var n = Arr.shift();\n  var arr = Arr.shift().split(\" \").map(Number);\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  var sum = 0;\n  var time = 0;\n  arr.forEach(function (v) {\n    sum += v + time;\n    time += v;\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49774903054386677, "ngram_match_score": 0.030618371369053026, "weighted_ngram_match_score": 0.08037775080641399, "syntax_match_score": 0.88, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03125, "new_decrease_halstead_effort": 0.19443922359948862}}
{"filename": "p00605_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var NK=Arr['shift']();if(NK=='0\\x200')break;var nk=NK['split']('\\x20')['map'](Number);var S=Arr['shift']()['split']('\\x20')['map'](Number);for(var i=0x0;i<nk[0x0];i++){var B=Arr['shift']()['split']('\\x20')['map'](Number);B['forEach'](function(v,index){S[index]-=v;});}var flag=S['every'](function(v){return v>=0x0;});console['log'](flag?'Yes':'No');}", "test_cases": [["2 3\n5 4 5\n1 2 3\n3 2 1\n3 5\n1 2 3 4 5\n0 1 0 1 2\n0 1 1 2 2\n1 0 3 1 1\n0 0", "Yes\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var NK=Arr.shift();\n   if(NK==\"0 0\")break;\n   var nk=NK.split(\" \").map(Number);\n   var S=(Arr.shift()).split(\" \").map(Number);\n   for(var i=0;i<nk[0];i++){\n      var B=(Arr.shift()).split(\" \").map(Number);\n      B.forEach(function(v,index){S[index]-=v;});\n   }\n   var flag=S.every(function(v){return (v>=0);});\n   console.log(flag?\"Yes\":\"No\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1165, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var NK = Arr.shift();\n  if (NK == \"0 0\") {\n    break;\n  }\n  var nk = NK.split(\" \").map(Number);\n  var S = Arr.shift().split(\" \").map(Number);\n  for (var i = 0; i < nk[0]; i++) {\n    var B = Arr.shift().split(\" \").map(Number);\n    B.forEach(function (v, index) {\n      S[index] -= v;\n    });\n  }\n  var flag = S.every(function (v) {\n    return v >= 0;\n  });\n  console.log(flag ? \"Yes\" : \"No\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.44313225874730955, "ngram_match_score": 0.020650931583122298, "weighted_ngram_match_score": 0.060289318359386994, "syntax_match_score": 0.6915887850467289, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.023076923076923106, "new_decrease_halstead_effort": 0.1614093430211766}}
{"filename": "p00613_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var K=Arr['shift']()-0x0;if(K==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var sum=arr['reduce'](function(a,b){return a+b;});console['log'](sum/(K-0x1));}", "test_cases": [["2\n2\n3\n5 4 3\n0", "2\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var K=Arr.shift()-0;\n   if(K==0)break;\n   var arr=Arr.shift().split(\" \").map(Number);\n   var sum=arr.reduce(function(a,b){return a+b;});\n   console.log(sum/(K-1));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1166, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var K = Arr.shift() - 0;\n  if (K == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var sum = arr.reduce(function (a, b) {\n    return a + b;\n  });\n  console.log(sum / (K - 1));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4917190966789767, "ngram_match_score": 0.0275748768055379, "weighted_ngram_match_score": 0.08215865276751166, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03749999999999998, "new_decrease_halstead_effort": 0.20342158816744538}}
{"filename": "p00615_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var str=Arr['shift']();if(str=='0\\x200')break;var arr=str['split']('\\x20');var data=[0x0];if(arr[0x0]>0x0)data=data['concat'](Arr['shift']()['split']('\\x20')['map'](Number));if(arr[0x1]>0x0)data=data['concat'](Arr['shift']()['split']('\\x20')['map'](Number));data['sort'](function(a,b){return a-b;});var max=0x0;data['reduce'](function(a,b){max=Math['max'](max,Math['abs'](a-b));return b;});console['log'](max);}", "test_cases": [["4 5\n20 35 60 70\n15 30 40 80 90\n3 2\n10 20 30\n42 60\n0 1\n100\n1 1\n10\n50\n0 0", "20\n18\n100\n40"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"0 0\")break;\n   var arr=str.split(\" \");\n   var data=[0];\n   if(arr[0]>0)data=data.concat((Arr.shift()).split(\" \").map(Number));\n   if(arr[1]>0)data=data.concat((Arr.shift()).split(\" \").map(Number));\n   data.sort(function(a,b){return a-b;});\n   var max=0;\n   data.reduce(function(a,b){\n      max=Math.max(max,Math.abs(a-b));\n   return b;\n   });\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1167, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var str = Arr.shift();\n  if (str == \"0 0\") {\n    break;\n  }\n  var arr = str.split(\" \");\n  var data = [0];\n  if (arr[0] > 0) {\n    data = data.concat(Arr.shift().split(\" \").map(Number));\n  }\n  if (arr[1] > 0) {\n    data = data.concat(Arr.shift().split(\" \").map(Number));\n  }\n  data.sort(function (a, b) {\n    return a - b;\n  });\n  var max = 0;\n  data.reduce(function (a, b) {\n    max = Math.max(max, Math.abs(a - b));\n    return b;\n  });\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5044115804664733, "ngram_match_score": 0.06797089915374815, "weighted_ngram_match_score": 0.19753867057539304, "syntax_match_score": 0.7521367521367521, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0030544542614455716, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.020270270270270285, "new_decrease_halstead_effort": 0.09519860776344036}}
{"filename": "p00621_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var wq=arr['shift']();if(wq=='0\\x200')break;wq=wq['split']('\\x20')['map'](Number);var w=wq[0x0];var W=[];for(var i=0x0;i<w;i++)W[i]=!![];var cat={};while(wq[0x1]--){var sw=arr['shift']()['split']('\\x20');if(sw[0x0]=='s'){var id=sw[0x1];var width=sw[0x2]-0x0;var cnt=0x0;var ans='impossible';for(var i=0x0;i<w;i++){cnt=W[i]?cnt+0x1:0x0;if(cnt==width){while(cnt--){W[i]=![];i--;}i++;cat[id]=[i,width];ans=i;break;}}console['log'](ans);}if(sw[0x0]=='w'){var id=sw[0x1];var width=cat[id][0x1];var i=cat[id][0x0];while(width--){W[i]=!![];i++;}}}console['log']('END');}", "test_cases": [["4 6\ns 0 2\ns 1 3\ns 2 1\nw 0\ns 3 3\ns 4 2\n3 3\ns 0 1\ns 1 1\ns 2 1\n0 0", "0\nimpossible\n2\nimpossible\n0\nEND\n0\n1\n2\nEND"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wq=arr.shift();\n   if(wq==\"0 0\")break;\n   wq=wq.split(\" \").map(Number);\n   var w=wq[0];\n   var W=[];\n   for(var i=0;i<w;i++)W[i]=true;\n   var cat={};\n   while(wq[1]--){\n      var sw=arr.shift().split(\" \");\n      if(sw[0]==\"s\"){\n         var id=sw[1];\n         var width=sw[2]-0;\n         var cnt=0;\n         var ans=\"impossible\";\n         for(var i=0;i<w;i++){\n            cnt=(W[i])?cnt+1:0;\n            if(cnt==width){\n              while(cnt--){W[i]=false;i--;}\n               i++;\n               cat[id]=[i,width];\n               ans=i;\n               break;\n            }\n         }\n         console.log(ans);\n      }\n      if(sw[0]==\"w\"){\n         var id=sw[1];\n         var width=cat[id][1];\n         var i=cat[id][0];\n         while(width--){W[i]=true;i++;}\n      }\n   }\n   console.log(\"END\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1168, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var wq = arr.shift();\n  if (wq == \"0 0\") {\n    break;\n  }\n  wq = wq.split(\" \").map(Number);\n  var w = wq[0];\n  var W = [];\n  for (var i = 0; i < w; i++) {\n    W[i] = true;\n  }\n  var cat = {};\n  while (wq[1]--) {\n    var sw = arr.shift().split(\" \");\n    if (sw[0] == \"s\") {\n      var id = sw[1];\n      var width = sw[2] - 0;\n      var cnt = 0;\n      var ans = \"impossible\";\n      for (var i = 0; i < w; i++) {\n        cnt = W[i] ? cnt + 1 : 0;\n        if (cnt == width) {\n          while (cnt--) {\n            W[i] = false;\n            i--;\n          }\n          i++;\n          cat[id] = [i, width];\n          ans = i;\n          break;\n        }\n      }\n      console.log(ans);\n    }\n    if (sw[0] == \"w\") {\n      var id = sw[1];\n      var width = cat[id][1];\n      var i = cat[id][0];\n      while (width--) {\n        W[i] = true;\n        i++;\n      }\n    }\n  }\n  console.log(\"END\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5304216172981435, "ngram_match_score": 0.0534980581663531, "weighted_ngram_match_score": 0.1607810036188134, "syntax_match_score": 0.9074074074074074, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00720118980929052, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.048034934497816595, "new_decrease_halstead_effort": 0.1455166434754952}}
{"filename": "p00622_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var a=arr['shift']()['split']('');if(a['join']('')=='-')break;var b=arr['shift']()['split']('');var c=arr['shift']()['split']('');var obj={};a['forEach'](function(v){obj[v]=!![];});var str='';var m='';c['forEach'](function(v){if(obj['hasOwnProperty'](v)){if(m==''){m=a['shift']();m=a['shift']();}else{m=a['shift']();}}else{while(!![]){if(m==v){m=a['shift']();break;}else{str+=m;m=b['shift']();}}}});str+=m;str+=b['join']('');console['log'](str);}", "test_cases": [["CBA\ncba\ncCa\nX\nZY\nZ\n-", "BbA\nXY"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var a=arr.shift().split(\"\");\n   if(a.join(\"\")==\"-\")break;\n   var b=arr.shift().split(\"\");\n   var c=arr.shift().split(\"\");\n   var obj={};\n   a.forEach(function(v){\n      obj[v]=true;\n   });\n   var str=\"\";\n   var m=\"\";\n   c.forEach(function(v){\n      if(obj.hasOwnProperty(v)){\n         if(m==\"\"){\n            m=a.shift();\n            m=a.shift();\n         }else{\n            m=a.shift();\n         }\n      }else{\n         while(true){\n            if(m==v){\n               m=a.shift();\n               break;\n            }else{\n               str+=m;\n               m=b.shift();\n            }\n         }\n      }\n   });\n   str+=m;\n   str+=b.join(\"\");\n   console.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1169, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var a = arr.shift().split(\"\");\n  if (a.join(\"\") == \"-\") {\n    break;\n  }\n  var b = arr.shift().split(\"\");\n  var c = arr.shift().split(\"\");\n  var obj = {};\n  a.forEach(function (v) {\n    obj[v] = true;\n  });\n  var str = \"\";\n  var m = \"\";\n  c.forEach(function (v) {\n    if (obj.hasOwnProperty(v)) {\n      if (m == \"\") {\n        m = a.shift();\n        m = a.shift();\n      } else {\n        m = a.shift();\n      }\n    } else {\n      while (true) {\n        if (m == v) {\n          m = a.shift();\n          break;\n        } else {\n          str += m;\n          m = b.shift();\n        }\n      }\n    }\n  });\n  str += m;\n  str += b.join(\"\");\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5306639824436277, "ngram_match_score": 0.04119424473924058, "weighted_ngram_match_score": 0.10830732261916266, "syntax_match_score": 0.9731543624161074, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009123266562293342, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05142857142857138, "new_decrease_halstead_effort": 0.22242574351078526}}
{"filename": "p00627_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);while(Arr['length']!=0x0){var n=Arr['shift']()/0x4;if(n==0x0)break;var sum=0x0;while(n!=0x0){sum+=Arr['shift']();n--;}console['log'](sum);}", "test_cases": [["20\n4\n3\n2\n1\n3\n8\n2\n0\n0", "13\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nwhile(Arr.length!=0){\n   var n=(Arr.shift())/4;\n   if(n==0)break;\n   var sum=0;\n   while(n!=0){sum+=Arr.shift();n--}\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1170, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nwhile (Arr.length != 0) {\n  var n = Arr.shift() / 4;\n  if (n == 0) {\n    break;\n  }\n  var sum = 0;\n  while (n != 0) {\n    sum += Arr.shift();\n    n--;\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46553141368023765, "ngram_match_score": 0.030002843173508643, "weighted_ngram_match_score": 0.09528070628428419, "syntax_match_score": 0.7368421052631579, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00628_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var str=Arr['shift']();if(str=='END\\x20OF\\x20INPUT')break;var arr=str['split']('\\x20');arr['forEach'](function(v,i){arr[i]=v['length'];});console['log'](arr['join'](''));}", "test_cases": [["Yes I have a number\nHow I wish I could calculate an unused color for space\nThank you\nEND OF INPUT", "31416\n31415926535\n53"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"END OF INPUT\")break;\n   var arr=str.split(\" \");\n   arr.forEach(function(v,i){arr[i]=v.length;});\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1171, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var str = Arr.shift();\n  if (str == \"END OF INPUT\") {\n    break;\n  }\n  var arr = str.split(\" \");\n  arr.forEach(function (v, i) {\n    arr[i] = v.length;\n  });\n  console.log(arr.join(\"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49198227825121826, "ngram_match_score": 0.03333168744598931, "weighted_ngram_match_score": 0.08213840916544114, "syntax_match_score": 0.8524590163934426, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04109589041095896, "new_decrease_halstead_effort": 0.25154777364358416}}
{"filename": "p00630_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var nt=Arr['shift']()['split']('\\x20');var str=nt[0x0];var type=nt[0x1];if(type=='X')break;str=str['replace'](/^./,function(s){return s['toLowerCase']();});str=str['replace'](/[A-Z]/g,function(s){return'_'+s;});var arr=str['split']('_');for(var i=0x1;i<arr['length'];i++){arr[i]=arr[i]['replace'](/./,function(s){return s['toUpperCase']();});}if(type=='U'){arr[0x0]=arr[0x0]['replace'](/^./,function(s){return s['toUpperCase']();});console['log'](arr['join'](''));}if(type=='L')console['log'](arr['join'](''));if(type=='D')console['log'](arr['join']('_')['toLowerCase']());}", "test_cases": [["get_user_name L\ngetUserName U\nGetUserName D\nEndOfInput X", "getUserName\nGetUserName\nget_user_name"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var nt=(Arr.shift()).split(\" \");\n   var str=nt[0];\n   var type=nt[1];\n   if(type==\"X\")break;\n   str=str.replace(/^./,function(s){\n      return s.toLowerCase();\n   });\n   str=str.replace(/[A-Z]/g,function(s){\n      return \"_\"+s;\n   });\n   var arr=str.split(\"_\");\n   for(var i=1;i<arr.length;i++){\n      arr[i]=arr[i].replace(/./,function(s){\n         return s.toUpperCase();\n      });\n   }\n   if(type==\"U\"){\n      arr[0]=arr[0].replace(/^./,function(s){\n         return s.toUpperCase();\n      });\n      console.log(arr.join(\"\"));\n   }\n   if(type==\"L\")console.log(arr.join(\"\"));\n   if(type==\"D\")console.log(arr.join(\"_\").toLowerCase());\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1172, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var nt = Arr.shift().split(\" \");\n  var str = nt[0];\n  var type = nt[1];\n  if (type == \"X\") {\n    break;\n  }\n  str = str.replace(/^./, function (s) {\n    return s.toLowerCase();\n  });\n  str = str.replace(/[A-Z]/g, function (s) {\n    return \"_\" + s;\n  });\n  var arr = str.split(\"_\");\n  for (var i = 1; i < arr.length; i++) {\n    arr[i] = arr[i].replace(/./, function (s) {\n      return s.toUpperCase();\n    });\n  }\n  if (type == \"U\") {\n    arr[0] = arr[0].replace(/^./, function (s) {\n      return s.toUpperCase();\n    });\n    console.log(arr.join(\"\"));\n  }\n  if (type == \"L\") {\n    console.log(arr.join(\"\"));\n  }\n  if (type == \"D\") {\n    console.log(arr.join(\"_\").toLowerCase());\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.554260093166387, "ngram_match_score": 0.08448270246916978, "weighted_ngram_match_score": 0.235121772760481, "syntax_match_score": 0.8974358974358975, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.016129032258064502, "new_decrease_halstead_effort": 0.16511755761008284}}
{"filename": "p00631_1", "type": "JavaScript", "obfuscated": "function bomb(a,b,i){if(i==n){min=Math['min'](min,Math['abs'](a-b));return;}bomb(a+arr[i],b,i+0x1);bomb(a,b+arr[i],i+0x1);}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var min=Infinity;bomb(0x0,0x0,0x0);console['log'](min);}", "test_cases": [["5\n1 2 3 4 5\n4\n2 3 5 7\n0", "1\n1"]], "original": "function bomb(a,b,i){\n   if(i==n){\n      min=Math.min(min,Math.abs(a-b));\n      return;\n   }\n   bomb(a+arr[i],b,i+1);\n   bomb(a,b+arr[i],i+1);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=Arr.shift().split(\" \").map(Number);\n   var min=Infinity;\n   bomb(0,0,0);\n   console.log(min);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1173, "deobfuscated": "function bomb(a, b, i) {\n  if (i == n) {\n    min = Math.min(min, Math.abs(a - b));\n    return;\n  }\n  bomb(a + arr[i], b, i + 1);\n  bomb(a, b + arr[i], i + 1);\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var min = Infinity;\n  bomb(0, 0, 0);\n  console.log(min);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5233601519881266, "ngram_match_score": 0.05107317141765984, "weighted_ngram_match_score": 0.1495102936777037, "syntax_match_score": 0.8928571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.002205293300954425, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025862068965517238, "new_decrease_halstead_effort": 0.15235132766874904}}
{"filename": "p00637_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var x=arr[0x0];var ans=[[x]];for(var i=0x1;i<n;i++){if(x+0x1==arr[i])ans[ans['length']-0x1]['push'](arr[i]);else ans['push']([arr[i]]);x=arr[i];}ans['forEach'](function(v,i){if(v['length']!==0x1)ans[i]=v[0x0]+'-'+v[v['length']-0x1];else ans[i]=v[0x0];});console['log'](ans['join']('\\x20'));}", "test_cases": [["5\n1 2 3 5 6\n3\n7 8 9\n0", "1-3 5-6\n7-9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var x=arr[0];\n   var ans=[[x]];\n   for(var i=1;i<n;i++){\n      if(x+1==arr[i])(ans[ans.length-1]).push(arr[i]);\n      else ans.push([arr[i]]);\n      x=arr[i];\n   }\n   ans.forEach(function(v,i){\n      if(v.length!==1)ans[i]=v[0]+\"-\"+v[v.length-1];\n      else ans[i]=v[0];\n   });\n   console.log(ans.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1174, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var arr = Arr.shift().split(\" \").map(Number);\n  var x = arr[0];\n  var ans = [[x]];\n  for (var i = 1; i < n; i++) {\n    if (x + 1 == arr[i]) {\n      ans[ans.length - 1].push(arr[i]);\n    } else {\n      ans.push([arr[i]]);\n    }\n    x = arr[i];\n  }\n  ans.forEach(function (v, i) {\n    if (v.length !== 1) {\n      ans[i] = v[0] + \"-\" + v[v.length - 1];\n    } else {\n      ans[i] = v[0];\n    }\n  });\n  console.log(ans.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48343173452900545, "ngram_match_score": 0.04379824917937349, "weighted_ngram_match_score": 0.14612703604408636, "syntax_match_score": 0.743801652892562, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01807228915662651, "new_decrease_halstead_effort": 0.10072613687071519}}
{"filename": "p00657_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var rc=Arr['shift']()['split']('\\x20')['map'](Number);var r=rc[0x0];var c=rc[0x1];if(r==0x0&&c==0x0)break;console['log'](r%0x2==0x1&&c%0x2==0x1?'no':'yes');}", "test_cases": [["1 1\n2 2\n0 0", "no\nyes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var rc=Arr.shift().split(\" \").map(Number);\n   var r=rc[0];\n   var c=rc[1];\n   if(r==0 && c==0)break;\n   console.log((r%2==1 && c%2==1)?\"no\":\"yes\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1175, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var rc = Arr.shift().split(\" \").map(Number);\n  var r = rc[0];\n  var c = rc[1];\n  if (r == 0 && c == 0) {\n    break;\n  }\n  console.log(r % 2 == 1 && c % 2 == 1 ? \"no\" : \"yes\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46744152332471367, "ngram_match_score": 0.026695839582617332, "weighted_ngram_match_score": 0.07257845043754872, "syntax_match_score": 0.7704918032786885, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007065900545233816, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03703703703703709, "new_decrease_halstead_effort": 0.19729617608751637}}
{"filename": "p00676_1", "type": "JavaScript", "obfuscated": "function heron(a,b,c){var s=(a+b+c)/0x2;var S=Math['sqrt'](s*(s-a)*(s-b)*(s-c));return S;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');for(var i=0x0;i<Arr['length'];i++){var ALX=Arr[i]['split']('\\x20')['map'](Number);var A=ALX[0x0];var L=ALX[0x1];var X=ALX[0x2];var sum=0x0;sum+=heron(A,L,L);sum+=heron(L,(L+X)/0x2,(L+X)/0x2)*0x2;console['log'](sum['toFixed'](0xa));}", "test_cases": [["2 2 1\n2 3 1\n3 2 3\n2 3 5", "3.9681187851\n6.7970540913\n6.5668891783\n13.9527248554"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var ALX=Arr[i].split(\" \").map(Number);\n   var A=ALX[0];\n   var L=ALX[1];\n   var X=ALX[2];\n   var sum=0;\n   sum+=heron(A,L,L);\n   sum+=(heron(L,(L+X)/2,(L+X)/2)*2);\n   console.log(sum.toFixed(10));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1176, "deobfuscated": "function heron(a, b, c) {\n  var s = (a + b + c) / 2;\n  var S = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return S;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nfor (var i = 0; i < Arr.length; i++) {\n  var ALX = Arr[i].split(\" \").map(Number);\n  var A = ALX[0];\n  var L = ALX[1];\n  var X = ALX[2];\n  var sum = 0;\n  sum += heron(A, L, L);\n  sum += heron(L, (L + X) / 2, (L + X) / 2) * 2;\n  console.log(sum.toFixed(10));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5427327470183196, "ngram_match_score": 0.0659912777865581, "weighted_ngram_match_score": 0.21834177214239067, "syntax_match_score": 0.8865979381443299, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p00695_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');Arr['push']('');var n=Arr['shift']()-0x0;for(var I=0x0;I<n;I++){var yx=[];var dp=[];for(var i=0x0;i<0x5;i++){var v=Arr['shift']()['split']('\\x20')['map'](Number);yx['push'](v);dp['push']([]);}for(var y=0x0;y<0x5;y++){for(var x=0x0;x<0x5;x++){if(y==0x0)dp[y][x]=yx[y][x]==0x1?0x1:0x0;else dp[y][x]=yx[y][x]==0x1?dp[y-0x1][x]+0x1:0x0;}}var max=0x0;for(var y=0x0;y<0x5;y++){for(var i=0x0;i<0x5;i++){for(var j=i;j<0x5;j++){var min=Infinity;for(var k=i;k<=j;k++)min=Math['min'](min,dp[y][k]);max=Math['max'](max,min*(j-i+0x1));}}}console['log'](max);Arr['shift']();}", "test_cases": [["3\n1 1 0 1 0\n0 1 1 1 1\n1 0 1 0 1\n0 1 1 1 0\n0 1 1 0 0\n\n0 1 0 1 1\n0 1 0 1 0\n0 0 1 0 0\n0 0 1 1 0\n1 0 1 0 0\n\n1 1 1 1 0\n0 1 1 1 0\n0 1 1 0 1\n0 1 1 1 0\n0 0 0 0 1", "4\n3\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.push(\"\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var yx=[];\n   var dp=[];\n   for(var i=0;i<5;i++){\n      var v=Arr.shift().split(\" \").map(Number);\n      yx.push(v);\n      dp.push([]);\n   }\n   for(var y=0;y<5;y++){\n      for(var x=0;x<5;x++){\n         if(y==0)dp[y][x]=(yx[y][x]==1)?1:0;\n         else dp[y][x]=(yx[y][x]==1)?dp[y-1][x]+1:0;\n      }\n   }\n   var max=0;\n   for(var y=0;y<5;y++){\n      for(var i=0;i<5;i++){\n         for(var j=i;j<5;j++){\n            var min=Infinity;\n            for(var k=i;k<=j;k++)min=Math.min(min,dp[y][k]);\n            max=Math.max(max,min*(j-i+1));\n         }\n      }\n   }\n   console.log(max);\n   Arr.shift();\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1177, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nArr.push(\"\");\nvar n = Arr.shift() - 0;\nfor (var I = 0; I < n; I++) {\n  var yx = [];\n  var dp = [];\n  for (var i = 0; i < 5; i++) {\n    var v = Arr.shift().split(\" \").map(Number);\n    yx.push(v);\n    dp.push([]);\n  }\n  for (var y = 0; y < 5; y++) {\n    for (var x = 0; x < 5; x++) {\n      if (y == 0) {\n        dp[y][x] = yx[y][x] == 1 ? 1 : 0;\n      } else {\n        dp[y][x] = yx[y][x] == 1 ? dp[y - 1][x] + 1 : 0;\n      }\n    }\n  }\n  var max = 0;\n  for (var y = 0; y < 5; y++) {\n    for (var i = 0; i < 5; i++) {\n      for (var j = i; j < 5; j++) {\n        var min = Infinity;\n        for (var k = i; k <= j; k++) {\n          min = Math.min(min, dp[y][k]);\n        }\n        max = Math.max(max, min * (j - i + 1));\n      }\n    }\n  }\n  console.log(max);\n  Arr.shift();\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5259015489026824, "ngram_match_score": 0.05794902935093584, "weighted_ngram_match_score": 0.2182762138788412, "syntax_match_score": 0.8273809523809523, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0019798716649699344, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.045568798926359344}}
{"filename": "p00706_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var wh=arr['shift']()['split']('\\x20')['map'](Number);var w=wh[0x0];var h=wh[0x1];var XY=[];for(var i=0x0;i<w;i++){XY[i]=[];for(var j=0x0;j<h;j++){XY[i][j]=0x0;}}while(n--){var xy=arr['shift']()['split']('\\x20')['map'](Number);XY[xy[0x0]-0x1][xy[0x1]-0x1]=0x1;}var st=arr['shift']()['split']('\\x20')['map'](Number);var s=st[0x0];var t=st[0x1];var max=0x0;for(var i=0x0;i<=w-s;i++){for(var j=0x0;j<=h-t;j++){var sum=0x0;for(var x=0x0;x<s;x++){for(var y=0x0;y<t;y++){sum+=XY[i+x][j+y];}}max=Math['max'](sum,max);}}console['log'](max);}", "test_cases": [["16\n10 8\n2 2\n2 5\n2 7\n3 3\n3 8\n4 2\n4 5\n4 8\n6 4\n6 7\n7 5\n7 8\n8 1\n8 4\n9 6\n10 3\n4 3\n8\n6 4\n1 2\n2 1\n2 4\n3 4\n4 2\n5 3\n6 1\n6 2\n3 2\n0", "4\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var wh=arr.shift().split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   var XY=[];\n   for(var i=0;i<w;i++){\n      XY[i]=[];\n      for(var j=0;j<h;j++){\n         XY[i][j]=0;\n      }\n   }\n   while(n--){\n      var xy=arr.shift().split(\" \").map(Number);\n      XY[xy[0]-1][xy[1]-1]=1;\n   }\n   var st=arr.shift().split(\" \").map(Number);\n   var s=st[0];\n   var t=st[1];\n   var max=0;\n   for(var i=0;i<=w-s;i++){\n      for(var j=0;j<=h-t;j++){\n         var sum=0;\n         for(var x=0;x<s;x++){\n            for(var y=0;y<t;y++){\n               sum+=XY[i+x][j+y];\n            }\n         }\n         max=Math.max(sum,max);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1178, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var wh = arr.shift().split(\" \").map(Number);\n  var w = wh[0];\n  var h = wh[1];\n  var XY = [];\n  for (var i = 0; i < w; i++) {\n    XY[i] = [];\n    for (var j = 0; j < h; j++) {\n      XY[i][j] = 0;\n    }\n  }\n  while (n--) {\n    var xy = arr.shift().split(\" \").map(Number);\n    XY[xy[0] - 1][xy[1] - 1] = 1;\n  }\n  var st = arr.shift().split(\" \").map(Number);\n  var s = st[0];\n  var t = st[1];\n  var max = 0;\n  for (var i = 0; i <= w - s; i++) {\n    for (var j = 0; j <= h - t; j++) {\n      var sum = 0;\n      for (var x = 0; x < s; x++) {\n        for (var y = 0; y < t; y++) {\n          sum += XY[i + x][j + y];\n        }\n      }\n      max = Math.max(sum, max);\n    }\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5271557332456548, "ngram_match_score": 0.03204179285410453, "weighted_ngram_match_score": 0.10053323593689781, "syntax_match_score": 0.9760479041916168, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0033224050267595118, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.012396694214875992, "new_decrease_halstead_effort": 0.07163428999107735}}
{"filename": "p00711_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){var dy=[0x0,0x0,-0x1,0x1];var dx=[-0x1,0x1,0x0,0x0];for(var i=0x0;i<0x4;i++){var yy=y+dy[i];var xx=x+dx[i];if(yy<0x0||yy>=H||xx<0x0||xx>=W)continue;if(yx[yy][xx]=='.'){cnt++;yx[yy][xx]=cnt;bomb(yy,xx);}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var WH=Arr['shift']()['split']('\\x20')['map'](Number);var W=WH[0x0];var H=WH[0x1];if(W==0x0&&H==0x0)break;var yx=[];var Y,X;for(var i=0x0;i<H;i++){var arr=Arr['shift']()['split']('');if(arr['indexOf']('@')!=-0x1){Y=i;X=arr['indexOf']('@');}yx['push'](arr);}var cnt=0x1;bomb(Y,X);console['log'](cnt);}", "test_cases": [["6 9\n....#.\n.....#\n......\n......\n......\n......\n......\n#@...#\n.#..#.\n11 9\n.#.........\n.#.#######.\n.#.#.....#.\n.#.#.###.#.\n.#.#..@#.#.\n.#.#####.#.\n.#.......#.\n.#########.\n...........\n11 6\n..#..#..#..\n..#..#..#..\n..#..#..###\n..#..#..#@.\n..#..#..#..\n..#..#..#..\n7 7\n..#.#..\n..#.#..\n###.###\n...@...\n###.###\n..#.#..\n..#.#..\n0 0", "45\n59\n6\n13"]], "original": "function bomb(y,x){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=H || xx<0 || xx>=W)continue;\n      if(yx[yy][xx]==\".\"){cnt++;yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var WH=(Arr.shift()).split(\" \").map(Number);\n   var W=WH[0];\n   var H=WH[1];\n   if(W==0 && H==0)break;\n      var yx=[];\n      var Y,X;\n      for(var i=0;i<H;i++){\n         var arr=(Arr.shift()).split(\"\");\n         if(arr.indexOf(\"@\")!=-1){Y=i;X=arr.indexOf(\"@\");}\n         yx.push(arr);\n      }\n      var cnt=1;\n      bomb(Y,X);\n      console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1179, "deobfuscated": "function bomb(y, x) {\n  var dy = [0, 0, -1, 1];\n  var dx = [-1, 1, 0, 0];\n  for (var i = 0; i < 4; i++) {\n    var yy = y + dy[i];\n    var xx = x + dx[i];\n    if (yy < 0 || yy >= H || xx < 0 || xx >= W) {\n      continue;\n    }\n    if (yx[yy][xx] == \".\") {\n      cnt++;\n      yx[yy][xx] = cnt;\n      bomb(yy, xx);\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var WH = Arr.shift().split(\" \").map(Number);\n  var W = WH[0];\n  var H = WH[1];\n  if (W == 0 && H == 0) {\n    break;\n  }\n  var yx = [];\n  var Y;\n  var X;\n  for (var i = 0; i < H; i++) {\n    var arr = Arr.shift().split(\"\");\n    if (arr.indexOf(\"@\") != -1) {\n      Y = i;\n      X = arr.indexOf(\"@\");\n    }\n    yx.push(arr);\n  }\n  var cnt = 1;\n  bomb(Y, X);\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4964992730559337, "ngram_match_score": 0.0425583839424595, "weighted_ngram_match_score": 0.13175039659296373, "syntax_match_score": 0.8116883116883117, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.009216589861751112, "new_decrease_halstead_effort": 0.07886349624335154}}
{"filename": "p00712_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var pqan=arr['shift']()['split']('\\x20')['map'](Number);if(pqan['join']('\\x20')=='0\\x200\\x200\\x200')break;var p=pqan[0x0];var q=pqan[0x1];var a=pqan[0x2];var n=pqan[0x3];var ans=0x0;var loop=function(start,P,Q,A,cnt){if(cnt>0x0){if(cnt>n)return;if(p*Q==P*q){ans++;return;}else if(p*Q<P*q)return;}for(var i=start;A*i<=a;i++){loop(i,0x1*Q+i*P,Q*i,A*i,cnt+0x1);}};loop(0x1,0x0,0x1,0x1,0x0);console['log'](ans);}", "test_cases": [["2 3 120 3\n2 3 300 3\n2 3 299 3\n2 3 12 3\n2 3 12000 7\n54 795 12000 7\n2 3 300 1\n2 1 200 5\n2 4 54 2\n0 0 0 0", "4\n7\n6\n2\n42\n1\n0\n9\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var pqan=arr.shift().split(\" \").map(Number);\n   if(pqan.join(\" \")==\"0 0 0 0\")break;\n   var p=pqan[0];\n   var q=pqan[1];\n   var a=pqan[2];\n   var n=pqan[3];\n   var ans=0;\n   var loop=function(start,P,Q,A,cnt){\n      if(cnt>0){\n         if(cnt>n)return;\n         if(p*Q==P*q){\n            ans++;\n            return;\n         }else if(p*Q<P*q)return;\n      }\n      for(var i=start;A*i<=a;i++){\n         loop(i,1*Q+i*P,Q*i,A*i,cnt+1);\n      }\n   };\n   loop(1,0,1,1,0);\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1180, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var pqan = arr.shift().split(\" \").map(Number);\n  if (pqan.join(\" \") == \"0 0 0 0\") {\n    break;\n  }\n  var p = pqan[0];\n  var q = pqan[1];\n  var a = pqan[2];\n  var n = pqan[3];\n  var ans = 0;\n  function loop(start, P, Q, A, cnt) {\n    if (cnt > 0) {\n      if (cnt > n) {\n        return;\n      }\n      if (p * Q == P * q) {\n        ans++;\n        return;\n      } else if (p * Q < P * q) {\n        return;\n      }\n    }\n    for (var i = start; A * i <= a; i++) {\n      loop(i, Q * 1 + i * P, Q * i, A * i, cnt + 1);\n    }\n  }\n  loop(1, 0, 1, 1, 0);\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.42641001535322487, "ngram_match_score": 0.01366294163149553, "weighted_ngram_match_score": 0.04554987061442875, "syntax_match_score": 0.8108108108108109, "dataflow_match_score": 0.8356164383561644}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03703703703703709, "new_decrease_halstead_effort": 0.1513876091181725}}
{"filename": "p00746_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var N=Arr['shift']()-0x0;if(N==0x0)break;if(N==0x1){console['log']('1\\x201');continue;}var arr=[];arr[0x0]=[0x0,0x0];for(var i=0x0;i<N-0x1;i++){var nm=Arr['shift']()['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];var x=0x0;var y=0x0;if(m==0x0)x=-0x1;if(m==0x1)y=-0x1;if(m==0x2)x=0x1;if(m==0x3)y=0x1;arr[i+0x1]=[arr[n][0x0]+x,arr[n][0x1]+y];}var xA=0x0;var xZ=0x0;var yA=0x0;var yZ=0x0;for(var i=0x0;i<arr['length'];i++){xA=Math['min'](xA,arr[i][0x0]);xZ=Math['max'](xZ,arr[i][0x0]);yA=Math['min'](yA,arr[i][0x1]);yZ=Math['max'](yZ,arr[i][0x1]);}console['log'](xZ-xA+0x1+'\\x20'+(yZ-yA+0x1));}", "test_cases": [["1\n5\n0 0\n0 1\n0 2\n0 3\n12\n0 0\n1 0\n2 0\n3 1\n4 1\n5 1\n6 2\n7 2\n8 2\n9 3\n10 3\n10\n0 2\n1 2\n2 2\n3 2\n2 1\n5 1\n6 1\n7 1\n8 1\n0", "1 1\n3 3\n4 4\n5 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   if(N==1){console.log(\"1 1\");continue;}\n   var arr=[];\n   arr[0]=[0,0];\n   for(var i=0;i<N-1;i++){\n      var nm=(Arr.shift()).split(\" \").map(Number);\n      var n=nm[0];\n      var m=nm[1];\n      var x=0;\n      var y=0;\n      if(m==0)x=-1;\n      if(m==1)y=-1\n      if(m==2)x=1;\n      if(m==3)y=1;\n      arr[i+1]=[arr[n][0]+x,arr[n][1]+y];\n   }\n   var xA=0;\n   var xZ=0;\n   var yA=0;\n   var yZ=0;\n   for(var i=0;i<arr.length;i++){\n      xA=Math.min(xA,arr[i][0]);\n      xZ=Math.max(xZ,arr[i][0]);\n      yA=Math.min(yA,arr[i][1]);\n      yZ=Math.max(yZ,arr[i][1]);\n   }\n   console.log((xZ-xA+1)+\" \"+(yZ-yA+1));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1181, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var N = Arr.shift() - 0;\n  if (N == 0) {\n    break;\n  }\n  if (N == 1) {\n    console.log(\"1 1\");\n    continue;\n  }\n  var arr = [];\n  arr[0] = [0, 0];\n  for (var i = 0; i < N - 1; i++) {\n    var nm = Arr.shift().split(\" \").map(Number);\n    var n = nm[0];\n    var m = nm[1];\n    var x = 0;\n    var y = 0;\n    if (m == 0) {\n      x = -1;\n    }\n    if (m == 1) {\n      y = -1;\n    }\n    if (m == 2) {\n      x = 1;\n    }\n    if (m == 3) {\n      y = 1;\n    }\n    arr[i + 1] = [arr[n][0] + x, arr[n][1] + y];\n  }\n  var xA = 0;\n  var xZ = 0;\n  var yA = 0;\n  var yZ = 0;\n  for (var i = 0; i < arr.length; i++) {\n    xA = Math.min(xA, arr[i][0]);\n    xZ = Math.max(xZ, arr[i][0]);\n    yA = Math.min(yA, arr[i][1]);\n    yZ = Math.max(yZ, arr[i][1]);\n  }\n  console.log(xZ - xA + 1 + \" \" + (yZ - yA + 1));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47252922375643636, "ngram_match_score": 0.009301943491489828, "weighted_ngram_match_score": 0.03779169572030199, "syntax_match_score": 0.8430232558139535, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004486587030748224, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01171875, "new_decrease_halstead_effort": 0.09370286576168918}}
{"filename": "p00761_1", "type": "JavaScript", "obfuscated": "function str1(x){x=x+'';while(x['length']!=b)x='0'+x;return x;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var ab=Arr['shift']()['split']('\\x20')['map'](Number);if(ab[0x0]==0x0&&ab[0x1]==0x0)break;var str=ab[0x0]+'';var b=ab[0x1];var arr=[];str=str1(str);arr['push'](str);var i=0x0;while(!![]){i++;var s=str['split']('');s['sort'](function(a,b){return b-a;});var A=parseInt(s['join'](''),0xa);var B=parseInt(s['reverse']()['join'](''),0xa);var C=A-B;var Cstr=str1(C);if(arr['indexOf'](Cstr)!=-0x1)break;arr['push'](Cstr);str=Cstr;}console['log'](arr['indexOf'](Cstr)+'\\x20'+parseInt(Cstr,0xa)+'\\x20'+(i-arr['indexOf'](Cstr)));}", "test_cases": [["2012 4\n83268 6\n1112 4\n0 1\n99 2\n0 0", "3 6174 1\n1 862632 7\n5 6174 1\n0 0 1\n1 0 1"]], "original": "function str1(x){\n   x=x+\"\";\n   while(x.length!=b)x=\"0\"+x;\n   return x;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var ab=(Arr.shift()).split(\" \").map(Number);\n   if(ab[0]==0 && ab[1]==0)break;\n   var str=ab[0]+\"\";\n   var b=ab[1];\n   var arr=[];\n   str=str1(str);\n   arr.push(str);\n   var i=0;\n   while(true){\n      i++;\n      var s=str.split(\"\");\n      s.sort(function(a,b){return b-a;});\n      var A=parseInt(s.join(\"\"),10);\n      var B=parseInt(s.reverse().join(\"\"),10); \n      var C=A-B;\n      var Cstr=str1(C);     \n      if(arr.indexOf(Cstr)!=-1)break;\n      arr.push(Cstr);\n      str=Cstr; \n   }\n   console.log(arr.indexOf(Cstr)+\" \"+parseInt(Cstr,10)+\" \"+(i-arr.indexOf(Cstr)));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1182, "deobfuscated": "function str1(x) {\n  x = x + \"\";\n  while (x.length != b) {\n    x = \"0\" + x;\n  }\n  return x;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var ab = Arr.shift().split(\" \").map(Number);\n  if (ab[0] == 0 && ab[1] == 0) {\n    break;\n  }\n  var str = ab[0] + \"\";\n  var b = ab[1];\n  var arr = [];\n  str = str1(str);\n  arr.push(str);\n  var i = 0;\n  while (true) {\n    i++;\n    var s = str.split(\"\");\n    s.sort(function (a, b) {\n      return b - a;\n    });\n    var A = parseInt(s.join(\"\"), 10);\n    var B = parseInt(s.reverse().join(\"\"), 10);\n    var C = A - B;\n    var Cstr = str1(C);\n    if (arr.indexOf(Cstr) != -1) {\n      break;\n    }\n    arr.push(Cstr);\n    str = Cstr;\n  }\n  console.log(arr.indexOf(Cstr) + \" \" + parseInt(Cstr, 10) + \" \" + (i - arr.indexOf(Cstr)));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5154571258696987, "ngram_match_score": 0.05033238902223782, "weighted_ngram_match_score": 0.14729858359235984, "syntax_match_score": 0.8641975308641975, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.027649769585253448, "new_decrease_halstead_effort": 0.1030257564391096}}
{"filename": "p00768_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var MTPR=arr['shift']();if(MTPR=='0\\x200\\x200\\x200')break;MTPR=MTPR['split']('\\x20')['map'](Number);var team=[];for(var i=0x0;i<MTPR[0x1];i++)team['push']([0x0,0x0,[0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0],i]);for(var i=0x0;i<MTPR[0x3];i++){var mtpj=arr['shift']()['split']('\\x20')['map'](Number);var m=mtpj[0x0];var t=mtpj[0x1]-0x1;var p=mtpj[0x2]-0x1;var j=mtpj[0x3];if(j==0x0){team[t][0x0]++;team[t][0x1]+=m+team[t][0x2][p]*0x14;}if(j!=0x0)team[t][0x2][p]++;}team['sort'](function(a,b){if(a[0x0]==b[0x0]&&a[0x1]==b[0x1])return b[0x3]-a[0x3];else if(a[0x0]==b[0x0])return a[0x1]-b[0x1];else return b[0x0]-a[0x0];});var ans=[];var same=[-0x1,-0x1];team['forEach'](function(v,i){if(same[0x0]==v[0x0]&&same[0x1]==v[0x1])ans[ans['length']-0x1]+='='+(v[0x3]+0x1);else{ans['push'](v[0x3]+0x1);same=[v[0x0],v[0x1]];}});console['log'](ans['join'](','));}", "test_cases": [["300 10 8 5\n50 5 2 1\n70 5 2 0\n75 1 1 0\n100 3 1 0\n150 3 2 0\n240 5 5 7\n50 1 1 0\n60 2 2 0\n70 2 3 0\n90 1 3 0\n120 3 5 0\n140 4 1 0\n150 2 4 1\n180 3 5 4\n15 2 2 1\n20 2 2 1\n25 2 2 0\n60 1 1 0\n120 5 5 4\n15 5 4 1\n20 5 4 0\n40 1 1 0\n40 2 2 0\n120 2 3 4\n30 1 1 0\n40 2 1 0\n50 2 2 0\n60 1 2 0\n120 3 3 2\n0 1 1 0\n1 2 2 0\n300 5 8 0\n0 0 0 0", "3,1,5,10=9=8=7=6=4=2\n2,1,3,4,5\n1,2,3\n5=2=1,4=3\n2=1\n1,2,3\n5=4=3=2=1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var MTPR=arr.shift();\n   if(MTPR==\"0 0 0 0\")break;\n   MTPR=MTPR.split(\" \").map(Number);\n   var team=[];\n   for(var i=0;i<MTPR[1];i++)team.push([0,0,[0,0,0,0,0,0,0,0,0,0],i]);\n   for(var i=0;i<MTPR[3];i++){\n      var mtpj=arr.shift().split(\" \").map(Number);\n      var m=mtpj[0];\n      var t=mtpj[1]-1;\n      var p=mtpj[2]-1;\n      var j=mtpj[3];\n      if(j==0){\n         team[t][0]++;\n         team[t][1]+=m+team[t][2][p]*20;\n      }\n      if(j!=0)team[t][2][p]++;\n   }\n   team.sort(function(a,b){\n      if(a[0]==b[0] && a[1]==b[1])return b[3]-a[3];\n      else if(a[0]==b[0])return a[1]-b[1];\n      else return b[0]-a[0];\n   });\n   var ans=[];\n   var same=[-1,-1];\n   team.forEach(function(v,i){\n      if(same[0]==v[0] && same[1]==v[1])ans[ans.length-1]+=\"=\"+(v[3]+1);\n      else {ans.push(v[3]+1);same=[v[0],v[1]];}\n   });\n   console.log(ans.join(\",\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1183, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var MTPR = arr.shift();\n  if (MTPR == \"0 0 0 0\") {\n    break;\n  }\n  MTPR = MTPR.split(\" \").map(Number);\n  var team = [];\n  for (var i = 0; i < MTPR[1]; i++) {\n    team.push([0, 0, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0], i]);\n  }\n  for (var i = 0; i < MTPR[3]; i++) {\n    var mtpj = arr.shift().split(\" \").map(Number);\n    var m = mtpj[0];\n    var t = mtpj[1] - 1;\n    var p = mtpj[2] - 1;\n    var j = mtpj[3];\n    if (j == 0) {\n      team[t][0]++;\n      team[t][1] += m + team[t][2][p] * 20;\n    }\n    if (j != 0) {\n      team[t][2][p]++;\n    }\n  }\n  team.sort(function (a, b) {\n    if (a[0] == b[0] && a[1] == b[1]) {\n      return b[3] - a[3];\n    } else if (a[0] == b[0]) {\n      return a[1] - b[1];\n    } else {\n      return b[0] - a[0];\n    }\n  });\n  var ans = [];\n  var same = [-1, -1];\n  team.forEach(function (v, i) {\n    if (same[0] == v[0] && same[1] == v[1]) {\n      ans[ans.length - 1] += \"=\" + (v[3] + 1);\n    } else {\n      ans.push(v[3] + 1);\n      same = [v[0], v[1]];\n    }\n  });\n  console.log(ans.join(\",\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48733472815463164, "ngram_match_score": 0.013463892940375548, "weighted_ngram_match_score": 0.04698613078926229, "syntax_match_score": 0.8888888888888888, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.009316770186335366, "new_decrease_halstead_effort": 0.07392654604374826}}
{"filename": "p00769_1", "type": "JavaScript", "obfuscated": "function saiki(str,flag){while(!![]){if(/\\[{2}\\d.*?\\]{2}/['test'](str)){str=str['replace'](/\\[{2}\\d.*?\\]{2}/,function(s){var d=s['slice'](0x2,-0x2)['split']('][')['map'](Number);d['sort']((a,b)=>a-b);var sum=0x0;for(var i=0x0;i<Math['ceil'](d['length']/0x2);i++){if(flag)sum+=Math['floor'](d[i]/0x2)+0x1;else sum+=Math['floor'](d[i]);}return'('+sum+')';});}else break;}str=str['replace'](/\\(/g,'[');str=str['replace'](/\\)/g,']');return str;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;arr['forEach'](str=>{str=saiki(str,!![]);while(/\\[\\[/['test'](str))str=saiki(str,![]);console['log'](str['replace'](/\\[|\\]/g,''));});", "test_cases": [["6\n[[123][4567][89]]\n[[5][3][7][3][9]]\n[[[99][59][63][85][51]][[1539][7995][467]][[51][57][79][99][3][91][59]]]\n[[[37][95][31][77][15]][[43][5][5][5][85]][[71][3][51][89][29]][[57][95][5][69][31]][[99][59][65][73][31]]]\n[[[[9][7][3]][[3][5][7]][[7][9][5]]][[[9][9][3]][[5][9][9]][[7][7][3]]][[[5][9][7]][[3][9][3]][[9][5][5]]]]\n[[8231][3721][203][3271][8843]]", "107\n7\n175\n95\n21\n3599"]], "original": "function saiki(str,flag){\n   while(true){\n      if(/\\[{2}\\d.*?\\]{2}/.test(str)){\n         str=str.replace(/\\[{2}\\d.*?\\]{2}/,function(s){\n               var d =s.slice(2,-2).split(\"][\").map(Number);\n               d.sort((a,b)=> a-b);\n               var sum=0;\n               for(var i=0;i<Math.ceil(d.length/2);i++){\n                  if(flag) sum+=Math.floor(d[i]/2)+1;\n                  else sum+=Math.floor(d[i]);\n               }\n               return \"(\"+sum+\")\";\n            });\n      }else break;\n   }\n   str=str.replace(/\\(/g,\"[\");\n   str=str.replace(/\\)/g,\"]\");\n   return str;\n }\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\n\narr.forEach(str=>{\n   str=saiki(str,true);\n   while(/\\[\\[/.test(str))str=saiki(str,false);\n    console.log(str.replace(/\\[|\\]/g,\"\"));\n});\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1184, "deobfuscated": "function saiki(str, flag) {\n  while (true) {\n    if (/\\[{2}\\d.*?\\]{2}/.test(str)) {\n      str = str.replace(/\\[{2}\\d.*?\\]{2}/, function (s) {\n        var d = s.slice(2, -2).split(\"][\").map(Number);\n        d.sort((a, b) => a - b);\n        var sum = 0;\n        for (var i = 0; i < Math.ceil(d.length / 2); i++) {\n          if (flag) {\n            sum += Math.floor(d[i] / 2) + 1;\n          } else {\n            sum += Math.floor(d[i]);\n          }\n        }\n        return \"(\" + sum + \")\";\n      });\n    } else {\n      break;\n    }\n  }\n  str = str.replace(/\\(/g, \"[\");\n  str = str.replace(/\\)/g, \"]\");\n  return str;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\narr.forEach(str => {\n  str = saiki(str, true);\n  while (/\\[\\[/.test(str)) {\n    str = saiki(str, false);\n  }\n  console.log(str.replace(/\\[|\\]/g, \"\"));\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5172212959831285, "ngram_match_score": 0.05609837533548122, "weighted_ngram_match_score": 0.1727868085970329, "syntax_match_score": 0.84, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0029481280979273272, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01935483870967747, "new_decrease_halstead_effort": 0.14080897317279406}}
{"filename": "p00780_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var p=prime(0xc350);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var cnt=0x0;var k=p['length']-0x1;for(var i=0x0;i<p['length'];i++){while(p[i]+p[k]>n)k--;if(k<i)break;if(p[i]+p[k]==n)cnt++;}console['log'](cnt);}", "test_cases": [["6\n10\n12\n0", "1\n2\n1"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(50000);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var cnt=0;\n   var k=p.length-1;\n   for(var i=0;i<p.length;i++){\n      while(p[i]+p[k]>n)k--;\n      if(k<i)break;\n      if(p[i]+p[k]==n)cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1185, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar p = prime(50000);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var cnt = 0;\n  var k = p.length - 1;\n  for (var i = 0; i < p.length; i++) {\n    while (p[i] + p[k] > n) {\n      k--;\n    }\n    if (k < i) {\n      break;\n    }\n    if (p[i] + p[k] == n) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5116457150630427, "ngram_match_score": 0.04230045110150704, "weighted_ngram_match_score": 0.15968781455606892, "syntax_match_score": 0.8445945945945946, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006309413468192027, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05777777777777782, "new_decrease_halstead_effort": 0.12449413388543806}}
{"filename": "p00789_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);while(!![]){var n=arr['shift']();if(n==0x0)break;var coin=[''];for(var i=0x1;i<=0x11;i++)coin['push'](i*i);var dp=[];for(var i=0x0;i<=0x11;i++){dp[i]=[];for(var j=0x0;j<=n;j++){dp[i][j]=0x0;}}dp[0x0][0x0]=0x1;for(var i=0x1;i<=0x11;i++){for(var j=0x0;j<=n;j++){var k=0x0;while(coin[i]*k+j<=n){dp[i][coin[i]*k+j]+=dp[i-0x1][j];k++;}}}console['log'](dp[0x11][n]);}", "test_cases": [["2\n10\n30\n0", "1\n4\n27"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   var coin=[\"\"];\n   for(var i=1;i<=17;i++)coin.push(i*i);\n   var dp=[];\n   for(var i=0;i<=17;i++){\n      dp[i]=[];\n      for(var j=0;j<=n;j++){\n         dp[i][j]=0;\n      }\n   }\n   dp[0][0]=1;\n   for(var i=1;i<=17;i++){\n      for(var j=0;j<=n;j++){\n        var k=0;\n         while(coin[i]*k+j<=n){\n            dp[i][coin[i]*k+j]+=dp[i-1][j];\n            k++;\n         }\n      }\n   }\n   console.log(dp[17][n]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1186, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nwhile (true) {\n  var n = arr.shift();\n  if (n == 0) {\n    break;\n  }\n  var coin = [\"\"];\n  for (var i = 1; i <= 17; i++) {\n    coin.push(i * i);\n  }\n  var dp = [];\n  for (var i = 0; i <= 17; i++) {\n    dp[i] = [];\n    for (var j = 0; j <= n; j++) {\n      dp[i][j] = 0;\n    }\n  }\n  dp[0][0] = 1;\n  for (var i = 1; i <= 17; i++) {\n    for (var j = 0; j <= n; j++) {\n      var k = 0;\n      while (coin[i] * k + j <= n) {\n        dp[i][coin[i] * k + j] += dp[i - 1][j];\n        k++;\n      }\n    }\n  }\n  console.log(dp[17][n]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5511706904035846, "ngram_match_score": 0.05403900050262754, "weighted_ngram_match_score": 0.19231042777837726, "syntax_match_score": 0.9583333333333334, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004748348732768193, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.017142857142857126, "new_decrease_halstead_effort": 0.10799519807923164}}
{"filename": "p00803_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);while(!![]){var n=arr['shift']();if(n==0x0)break;var max=0x0;for(var i=0x0;i<=0x36;i++){for(var j=0x0;j<=0x60;j++){var sum=i*i*i+j*(j+0x1)*(j+0x2)/0x6;if(n>=sum)max=Math['max'](max,sum);}}console['log'](max);}", "test_cases": [["100\n64\n50\n20\n151200\n0", "99\n64\n47\n20\n151200"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   var max=0;\n   for(var i=0;i<=54;i++){\n      for(var j=0;j<=96;j++){\n         var sum=i*i*i+(j*(j+1)*(j+2))/6;\n         if(n>=sum)max=Math.max(max,sum);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1187, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nwhile (true) {\n  var n = arr.shift();\n  if (n == 0) {\n    break;\n  }\n  var max = 0;\n  for (var i = 0; i <= 54; i++) {\n    for (var j = 0; j <= 96; j++) {\n      var sum = i * i * i + j * (j + 1) * (j + 2) / 6;\n      if (n >= sum) {\n        max = Math.max(max, sum);\n      }\n    }\n  }\n  console.log(max);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.509615387533922, "ngram_match_score": 0.04508652991238022, "weighted_ngram_match_score": 0.1775855465390971, "syntax_match_score": 0.8157894736842105, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004898002907048005, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.028846153846153855, "new_decrease_halstead_effort": 0.12812928855668926}}
{"filename": "p00811_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var PRIME=prime(0x186a0);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr['some'](function(v){if(v=='0\\x200\\x200')return!![];var mab=v['split']('\\x20')['map'](Number);var m=mab[0x0];var a=mab[0x1];var b=mab[0x2];var ans=[0x0,0x0,0x0];for(var p=0x0;p<PRIME['length'];p++){for(var q=p;q<PRIME['length'];q++){var pq=PRIME[p]*PRIME[q];if(pq>m)break;if(PRIME[q]*a<=PRIME[p]*b&&ans[0x2]<pq)ans=[PRIME[p],PRIME[q],pq];}}console['log'](ans[0x0]+'\\x20'+ans[0x1]);});", "test_cases": [["5 1 2\n99999 999 999\n1680 5 16\n1970 1 1\n2002 4 11\n0 0 0", "2 2\n313 313\n23 73\n43 43\n37 53"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar PRIME=prime(100000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.some(function(v){\n   if(v==\"0 0 0\")return true;\n   var mab=v.split(\" \").map(Number);\n   var m=mab[0];\n   var a=mab[1];\n   var b=mab[2];\n   var ans=[0,0,0];\n   for(var p=0;p<PRIME.length;p++){\n      for(var q=p;q<PRIME.length;q++){\n         var pq=PRIME[p]*PRIME[q];\n         if(pq>m)break;\n         if(PRIME[q]*a <= PRIME[p]*b && ans[2]<pq)ans=[PRIME[p],PRIME[q],pq]\n      }\n   }\n   console.log(ans[0]+\" \"+ans[1]);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1188, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar PRIME = prime(100000);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr.some(function (v) {\n  if (v == \"0 0 0\") {\n    return true;\n  }\n  var mab = v.split(\" \").map(Number);\n  var m = mab[0];\n  var a = mab[1];\n  var b = mab[2];\n  var ans = [0, 0, 0];\n  for (var p = 0; p < PRIME.length; p++) {\n    for (var q = p; q < PRIME.length; q++) {\n      var pq = PRIME[p] * PRIME[q];\n      if (pq > m) {\n        break;\n      }\n      if (PRIME[q] * a <= PRIME[p] * b && ans[2] < pq) {\n        ans = [PRIME[p], PRIME[q], pq];\n      }\n    }\n  }\n  console.log(ans[0] + \" \" + ans[1]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5089087511821386, "ngram_match_score": 0.0366009092791951, "weighted_ngram_match_score": 0.12262960106733711, "syntax_match_score": 0.8764044943820225, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005489558595810573, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.04593639575971731, "new_decrease_halstead_effort": 0.11000058406097601}}
{"filename": "p00819_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var n=Arr['shift']()-0x0;for(var I=0x0;I<n;I++){var arr=Arr['shift']()['split']('')['reverse']();var str=Arr['shift']();var x=str['length'];arr['forEach'](function(v){if(v=='J')str=str['slice'](-0x1)+str['slice'](0x0,-0x1);else if(v=='C')str=str['slice'](0x1)+str['slice'](0x0,0x1);else if(v=='E'&&x%0x2==0x0)str=str['slice'](x/0x2,x)+str['slice'](0x0,x/0x2);else if(v=='E'&&x%0x2==0x1)str=str['slice'](~~(x/0x2)+0x1,x)+str[~~(x/0x2)]+str['slice'](0x0,~~(x/0x2));else if(v=='A')str=str['split']('')['reverse']()['join']('');else if(v=='P')str=str['replace'](/\\d/g,function(s){return s=='0'?'9':s-0x0-0x1;});else if(v=='M')str=str['replace'](/\\d/g,function(s){return s=='9'?'0':s-0x0+0x1;});});console['log'](str);}", "test_cases": [["5\nAJMP\naB23d\nE\n86AE\nAM\n6\nJPEM\nWaEaETC302Q\nCP\nrTurnAGundam1isdefferentf", "32Bad\nAE86\n7\nEC302QTWaEa\nTurnAGundam0isdefferentfr"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=Arr.shift().split(\"\").reverse();\n   var str=Arr.shift();\n   var x=str.length;\n   arr.forEach(function(v){\n      if(v==\"J\")str=str.slice(-1)+str.slice(0,-1);\n      else if(v==\"C\")str=str.slice(1)+str.slice(0,1);\n      else if(v==\"E\" && x%2==0)str=str.slice(x/2,x)+str.slice(0,x/2);\n      else if(v==\"E\" && x%2==1)str=str.slice(~~(x/2)+1,x)+str[~~(x/2)]+str.slice(0,~~(x/2));\n      else if(v==\"A\")str=str.split(\"\").reverse().join(\"\");\n      else if(v==\"P\")str=str.replace(/\\d/g,function(s){return (s==\"0\")?\"9\":(s-0)-1;});\n      else if(v==\"M\")str=str.replace(/\\d/g,function(s){return (s==\"9\")?\"0\":(s-0)+1;});\n   });\n   console.log(str);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1189, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar n = Arr.shift() - 0;\nfor (var I = 0; I < n; I++) {\n  var arr = Arr.shift().split(\"\").reverse();\n  var str = Arr.shift();\n  var x = str.length;\n  arr.forEach(function (v) {\n    if (v == \"J\") {\n      str = str.slice(-1) + str.slice(0, -1);\n    } else if (v == \"C\") {\n      str = str.slice(1) + str.slice(0, 1);\n    } else if (v == \"E\" && x % 2 == 0) {\n      str = str.slice(x / 2, x) + str.slice(0, x / 2);\n    } else if (v == \"E\" && x % 2 == 1) {\n      str = str.slice(~~(x / 2) + 1, x) + str[~~(x / 2)] + str.slice(0, ~~(x / 2));\n    } else if (v == \"A\") {\n      str = str.split(\"\").reverse().join(\"\");\n    } else if (v == \"P\") {\n      str = str.replace(/\\d/g, function (s) {\n        if (s == \"0\") {\n          return \"9\";\n        } else {\n          return s - 0 - 1;\n        }\n      });\n    } else if (v == \"M\") {\n      str = str.replace(/\\d/g, function (s) {\n        if (s == \"9\") {\n          return \"0\";\n        } else {\n          return s - 0 + 1;\n        }\n      });\n    }\n  });\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4643654878896164, "ngram_match_score": 0.010257404642623667, "weighted_ngram_match_score": 0.0577308627053157, "syntax_match_score": 0.7894736842105263, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1875, "length_score": -0.1875, "increase_maintainability": -0.03630314771918153, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.015151515151515138, "new_decrease_halstead_effort": 0.03948376621096494}}
{"filename": "p00820_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);arr['some'](function(v){if(v==0x0)return!![];var cnt=0x0;for(var a=0x1;a<=0xb5;a++){var A=a*a;if(v<A)break;if(A==v)cnt++;for(var b=a;b<=0xb5;b++){var B=A+b*b;if(v<B)break;if(B==v)cnt++;for(var c=b;c<=0xb5;c++){var C=B+c*c;if(v<C)break;if(C==v)cnt++;for(var d=c;d<=0xb5;d++){var D=C+d*d;if(v<D)break;if(D==v)cnt++;}}}}console['log'](cnt);});", "test_cases": [["1\n25\n2003\n211\n20007\n0", "1\n3\n48\n7\n738"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\narr.some(function(v){\n   if(v==0)return true;\n   var cnt=0;\n   for(var a=1;a<=181;a++){\n      var A=a*a;\n      if(v<A)break;\n      if(A==v)cnt++;\n      for(var b=a;b<=181;b++){\n         var B=A+b*b;\n         if(v<B)break;\n         if(B==v)cnt++;\n         for(var c=b;c<=181;c++){\n            var C=B+c*c;\n            if(v<C)break;\n            if(C==v)cnt++;\n            for(var d=c;d<=181;d++){\n               var D=C+d*d;\n               if(v<D)break;\n               if(D==v)cnt++;\n   }}}}\n   console.log(cnt);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1190, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\narr.some(function (v) {\n  if (v == 0) {\n    return true;\n  }\n  var cnt = 0;\n  for (var a = 1; a <= 181; a++) {\n    var A = a * a;\n    if (v < A) {\n      break;\n    }\n    if (A == v) {\n      cnt++;\n    }\n    for (var b = a; b <= 181; b++) {\n      var B = A + b * b;\n      if (v < B) {\n        break;\n      }\n      if (B == v) {\n        cnt++;\n      }\n      for (var c = b; c <= 181; c++) {\n        var C = B + c * c;\n        if (v < C) {\n          break;\n        }\n        if (C == v) {\n          cnt++;\n        }\n        for (var d = c; d <= 181; d++) {\n          var D = C + d * d;\n          if (v < D) {\n            break;\n          }\n          if (D == v) {\n            cnt++;\n          }\n        }\n      }\n    }\n  }\n  console.log(cnt);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4647524933253917, "ngram_match_score": 0.00891576295194635, "weighted_ngram_match_score": 0.04337152127399008, "syntax_match_score": 0.8067226890756303, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007471880765469674, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.018181818181818188, "new_decrease_halstead_effort": 0.16737425916746063}}
{"filename": "p00836_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var p=prime(0x2710);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);var cnt=[];for(var i=0x0;i<=0x2710;i++)cnt[i]=0x0;p['forEach'](function(v,index){cnt[v]++;for(var i=index+0x1;i<p['length'];i++){v+=p[i];if(v>0x2710)break;cnt[v]++;}});arr['some'](function(v){if(v==0x0)return!![];console['log'](cnt[v]);});", "test_cases": [["2\n3\n17\n41\n20\n666\n12\n53\n0", "1\n1\n2\n3\n0\n0\n1\n2"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(10000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nvar cnt=[];\nfor(var i=0;i<=10000;i++)cnt[i]=0;\np.forEach(function(v,index){\n   cnt[v]++;\n   for(var i=index+1;i<p.length;i++){\n      v+=p[i];\n      if(v>10000)break;\n      cnt[v]++;\n   }\n});\narr.some(function(v){\n   if(v==0)return true;\n   console.log(cnt[v]);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1191, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar p = prime(10000);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nvar cnt = [];\nfor (var i = 0; i <= 10000; i++) {\n  cnt[i] = 0;\n}\np.forEach(function (v, index) {\n  cnt[v]++;\n  for (var i = index + 1; i < p.length; i++) {\n    v += p[i];\n    if (v > 10000) {\n      break;\n    }\n    cnt[v]++;\n  }\n});\narr.some(function (v) {\n  if (v == 0) {\n    return true;\n  }\n  console.log(cnt[v]);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5105970098572812, "ngram_match_score": 0.04512524476931114, "weighted_ngram_match_score": 0.15751920491622382, "syntax_match_score": 0.8397435897435898, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005066199009390315, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05531914893617018, "new_decrease_halstead_effort": 0.126808510638298}}
{"filename": "p00855_1", "type": "JavaScript", "obfuscated": "function prime(max){var arr=[];for(var i=0x0;i<=max;i++)arr[i]=i;arr[0x0]=![];arr[0x1]=![];var sqrt=Math['floor'](Math['sqrt'](max));for(var i=0x2;i<=sqrt;i++){if(arr[i]==![])continue;for(var j=i+i;j<=max;j+=i){arr[j]=![];}}var result=[];for(var i=0x0;i<=max;i++){if(arr[i]!==![])result['push'](arr[i]);}return result;}var p=prime(0x13d4fd);var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a')['map'](Number);for(var i=0x0;i<Arr['length'];i++){var a=Arr[i];if(a==0x0)break;for(var j=0x0;j<p['length'];j++){if(p[j]==a){console['log'](0x0);break;}if(p[j]>a){console['log'](p[j]-p[j-0x1]);break;}}}", "test_cases": [["10\n11\n27\n2\n492170\n0", "4\n0\n6\n0\n114"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(1299709);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   for(var j=0;j<p.length;j++){\n      if(p[j]==a){console.log(0);break;}\n      if(p[j]>a){console.log(p[j]-p[j-1]);break;}\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1192, "deobfuscated": "function prime(max) {\n  var arr = [];\n  for (var i = 0; i <= max; i++) {\n    arr[i] = i;\n  }\n  arr[0] = false;\n  arr[1] = false;\n  var sqrt = Math.floor(Math.sqrt(max));\n  for (var i = 2; i <= sqrt; i++) {\n    if (arr[i] == false) {\n      continue;\n    }\n    for (var j = i + i; j <= max; j += i) {\n      arr[j] = false;\n    }\n  }\n  var result = [];\n  for (var i = 0; i <= max; i++) {\n    if (arr[i] !== false) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\nvar p = prime(1299709);\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\").map(Number);\nfor (var i = 0; i < Arr.length; i++) {\n  var a = Arr[i];\n  if (a == 0) {\n    break;\n  }\n  for (var j = 0; j < p.length; j++) {\n    if (p[j] == a) {\n      console.log(0);\n      break;\n    }\n    if (p[j] > a) {\n      console.log(p[j] - p[j - 1]);\n      break;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5159295172390521, "ngram_match_score": 0.040539229924833685, "weighted_ngram_match_score": 0.15923326080008204, "syntax_match_score": 0.8639455782312925, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006309413468192027, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.045662100456621, "new_decrease_halstead_effort": 0.09536577994760032}}
{"filename": "p00874_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var wd=arr['shift']();if(wd=='0\\x200')break;var W=arr['shift']()['split']('\\x20')['map'](Number);var D=arr['shift']()['split']('\\x20')['map'](Number);var sum=W['reduce'](function(a,b){return a+b;});D['forEach'](function(v){var index=W['indexOf'](v);if(index!=-0x1)W[index]='';else sum+=v;});console['log'](sum);}", "test_cases": [["5 5\n1 2 3 4 5\n1 2 3 4 5\n5 5\n2 5 4 1 3\n4 1 5 3 2\n5 5\n1 2 3 4 5\n3 3 3 4 5\n3 3\n7 7 7\n7 7 7\n3 3\n4 4 4\n4 3 4\n4 3\n4 2 2 4\n4 2 1\n4 4\n2 8 8 8\n2 3 8 3\n10 10\n9 9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9 9\n10 9\n20 1 20 20 20 20 20 18 20 20\n20 20 20 20 7 20 20 20 20\n0 0", "15\n15\n21\n21\n15\n13\n32\n90\n186"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wd=arr.shift();\n   if(wd==\"0 0\")break;\n   var W=arr.shift().split(\" \").map(Number);\n   var D=arr.shift().split(\" \").map(Number);\n   var sum=W.reduce(function(a,b){return a+b;});\n   D.forEach(function(v){\n      var index=W.indexOf(v);\n      if(index!=-1)W[index]=\"\";\n      else sum+=v;\n   });\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1193, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var wd = arr.shift();\n  if (wd == \"0 0\") {\n    break;\n  }\n  var W = arr.shift().split(\" \").map(Number);\n  var D = arr.shift().split(\" \").map(Number);\n  var sum = W.reduce(function (a, b) {\n    return a + b;\n  });\n  D.forEach(function (v) {\n    var index = W.indexOf(v);\n    if (index != -1) {\n      W[index] = \"\";\n    } else {\n      sum += v;\n    }\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.49821953918646966, "ngram_match_score": 0.029640773193560684, "weighted_ngram_match_score": 0.08025866014806274, "syntax_match_score": 0.8829787234042553, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025423728813559365, "new_decrease_halstead_effort": 0.17148277299988912}}
{"filename": "p00875_1", "type": "JavaScript", "obfuscated": "function BFS(){var bfs=[[s0,0x0]];while(!![]){if(bfs['length']==0x0)break;var [leaf,cnt]=bfs['shift']();if(leaf==s1){flag=!![];console['log'](cnt);break;}ab['forEach'](v=>{if(leaf['includes'](v[0x0])){var re=new RegExp(v[0x0],'g');var str=leaf['replace'](re,v[0x1]);if(str['length']<=0xa)bfs['push']([str,cnt+0x1]);}});}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var ab=arr['slice'](0x0,n)['map'](v=>v['split']('\\x20'));;arr=arr['slice'](n);var s0=arr['shift']();var s1=arr['shift']();var flag=![];BFS();if(!flag)console['log'](-0x1);}", "test_cases": [["2\na bb\nb aa\na\nbbbbbbbb\n1\na aa\na\naaaaa\n3\nab aab\nabc aadc\nad dee\nabc\ndeeeeeeeec\n10\na abc\nb bai\nc acf\nd bed\ne abh\nf fag\ng abe\nh bag\ni aaj\nj bbb\na\nabacfaabe\n0", "3\n-1\n7\n4"]], "original": "function BFS(){\n   var bfs=[[s0,0]];\n   while(true){\n      if(bfs.length==0)break;\n      var [leaf,cnt]=bfs.shift();\n      if(leaf==s1){\n         flag=true;\n         console.log(cnt);\n         break;\n      }\n      ab.forEach(v=>{\n         if(leaf.includes(v[0])){\n            var re = new RegExp(v[0], \"g\");\n            var str = leaf.replace(re,v[1]);\n            if(str.length<=10)bfs.push([str,cnt+1]);\n         }\n      });\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ab=arr.slice(0,n).map(v=> v.split(\" \"));;\n   arr=arr.slice(n);\n   var s0=arr.shift();\n   var s1=arr.shift();\n   var flag=false;\n   BFS();\n   if(!flag)console.log(-1);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1194, "deobfuscated": "function BFS() {\n  var bfs = [[s0, 0]];\n  while (true) {\n    if (bfs.length == 0) {\n      break;\n    }\n    var [leaf, cnt] = bfs.shift();\n    if (leaf == s1) {\n      flag = true;\n      console.log(cnt);\n      break;\n    }\n    ab.forEach(v => {\n      if (leaf.includes(v[0])) {\n        var re = new RegExp(v[0], \"g\");\n        var str = leaf.replace(re, v[1]);\n        if (str.length <= 10) {\n          bfs.push([str, cnt + 1]);\n        }\n      }\n    });\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var ab = arr.slice(0, n).map(v => v.split(\" \"));\n  ;\n  arr = arr.slice(n);\n  var s0 = arr.shift();\n  var s1 = arr.shift();\n  var flag = false;\n  BFS();\n  if (!flag) {\n    console.log(-1);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5823182967196641, "ngram_match_score": 0.13335440344442184, "weighted_ngram_match_score": 0.3226793468145164, "syntax_match_score": 0.8732394366197183, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009820644443772952, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07857142857142863, "new_decrease_halstead_effort": 0.1272899846915757}}
{"filename": "p00914_1", "type": "JavaScript", "obfuscated": "function kumiawase(start,end,len){var ans=[];var loop=function(a,arr){if(arr['length']==len)ans['push'](arr);else{for(var i=a;i<=end;i++)loop(i+0x1,arr['concat'](i));}};loop(start,[]);return ans;}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr['some'](function(v,i){if(v=='0\\x200\\x200')return!![];var nks=v['split']('\\x20')['map'](Number);var ary=kumiawase(0x1,nks[0x0],nks[0x1]);var cnt=0x0;ary['forEach'](function(v){var sum=v['reduce'](function(a,b){return a+b;});if(sum==nks[0x2])cnt++;});console['log'](cnt);});", "test_cases": [["9 3 23\n9 3 22\n10 3 28\n16 10 107\n20 8 102\n20 10 105\n20 10 155\n3 4 3\n4 2 11\n0 0 0", "1\n2\n0\n20\n1542\n5448\n1\n0\n0"]], "original": "function kumiawase(start,end,len){\n   var ans=[];\n   var loop=function(a,arr){\n      if(arr.length==len)ans.push(arr);\n      else{\n         for(var i=a;i<=end;i++)loop(i+1,arr.concat(i));\n      }\n   }\n   loop(start,[]);\n   return ans;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.some(function(v,i){\n   if(v==\"0 0 0\")return true;\n   var nks=v.split(\" \").map(Number);\n   var ary=kumiawase(1,nks[0],nks[1]);\n   var cnt=0;\n   ary.forEach(function(v){\n      var sum=v.reduce(function(a,b){return a+b;});\n      if(sum==nks[2])cnt++;\n   });\n   console.log(cnt);\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1195, "deobfuscated": "function kumiawase(start, end, len) {\n  var ans = [];\n  function loop(a, arr) {\n    if (arr.length == len) {\n      ans.push(arr);\n    } else {\n      for (var i = a; i <= end; i++) {\n        loop(i + 1, arr.concat(i));\n      }\n    }\n  }\n  loop(start, []);\n  return ans;\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr.some(function (v, i) {\n  if (v == \"0 0 0\") {\n    return true;\n  }\n  var nks = v.split(\" \").map(Number);\n  var ary = kumiawase(1, nks[0], nks[1]);\n  var cnt = 0;\n  ary.forEach(function (v) {\n    var sum = v.reduce(function (a, b) {\n      return a + b;\n    });\n    if (sum == nks[2]) {\n      cnt++;\n    }\n  });\n  console.log(cnt);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.3937486118925989, "ngram_match_score": 0.06916879271333656, "weighted_ngram_match_score": 0.19153994057134474, "syntax_match_score": 0.8, "dataflow_match_score": 0.5142857142857142}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004660639517639176, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03797468354430378, "new_decrease_halstead_effort": 0.13443792665774745}}
{"filename": "p00926_1", "type": "JavaScript", "obfuscated": "var n,m;var x=[];function main(){n=scan();m=scan();rep(n,function(i){x[i]=0x0;});rep(m,function(i){var c=scan();var d=scan();x[c]+=0x1;x[d]-=0x1;});rep(0x1,n,function(i){x[i]+=x[i-0x1];});var c=0x0;rep(n,function(i){if(x[i]>0x0){++c;}});print(c*0x2+n+0x1);}function rep(a,b,c){if(c===undefined){c=b;b=a;a=0x0;}for(var i=a;i<b;++i){if(c(i)===![]){break;}}}var input='';function scan(){return+input['pop']();}function scan_string(){return input['pop']();}function print(val){console['log'](val);}process['stdin']['resume']();process['stdin']['setEncoding']('utf8');process['stdin']['on']('data',function(chunk){input+=chunk;});process['stdin']['on']('end',function(){input=input['trim']()['split'](/\\s+/)['reverse']();main();});", "test_cases": [["10 3\n3 7\n8 9\n2 5", "23"], ["10 3\n8 9\n6 7\n2 4", "19"], ["10 0", "11"], ["10 6\n6 7\n4 5\n2 5\n6 9\n3 5\n6 8", "23"], ["1000 8\n3 4\n6 1000\n5 1000\n7 1000\n8 1000\n4 1000\n9 1000\n1 2", "2997"]], "original": "var n, m;\nvar x = [];\n\nfunction main(){\n\tn = scan();\n\tm = scan();\n\trep(n, function(i){\n\t\tx[i] = 0;\n\t});\n\trep(m, function(i){\n\t\tvar c = scan();\n\t\tvar d = scan();\n\t\tx[c] += 1;\n\t\tx[d] -= 1;\n\t});\n\trep(1, n, function(i){\n\t\tx[i] += x[i - 1];\n\t});\n\tvar c = 0;\n\trep(n, function(i){\n\t\tif(x[i] > 0){\n\t\t\t++c;\n\t\t}\n\t});\n\tprint(c * 2 + n + 1);\n}\n\nfunction rep(a, b, c){\n\tif(c === undefined){\n\t\tc = b;\n\t\tb = a;\n\t\ta = 0;\n\t}\n\tfor(var i = a; i < b; ++i){\n\t\tif(c(i) === false){\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvar input = '';\n\nfunction scan(){\n\treturn +input.pop();\n}\nfunction scan_string(){\n\treturn input.pop();\n} \nfunction print(val){\n\tconsole.log(val);\n}\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.trim().split(/\\s+/).reverse();\n\tmain();\n});", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1196, "deobfuscated": "var n;\nvar m;\nvar x = [];\nfunction main() {\n  n = scan();\n  m = scan();\n  rep(n, function (i) {\n    x[i] = 0;\n  });\n  rep(m, function (i) {\n    var c = scan();\n    var d = scan();\n    x[c] += 1;\n    x[d] -= 1;\n  });\n  rep(1, n, function (i) {\n    x[i] += x[i - 1];\n  });\n  var c = 0;\n  rep(n, function (i) {\n    if (x[i] > 0) {\n      ++c;\n    }\n  });\n  print(c * 2 + n + 1);\n}\nfunction rep(a, b, c) {\n  if (c === undefined) {\n    c = b;\n    b = a;\n    a = 0;\n  }\n  for (var i = a; i < b; ++i) {\n    if (c(i) === false) {\n      break;\n    }\n  }\n}\nvar input = \"\";\nfunction scan() {\n  return +input.pop();\n}\nfunction scan_string() {\n  return input.pop();\n}\nfunction print(val) {\n  console.log(val);\n}\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on(\"end\", function () {\n  input = input.trim().split(/\\s+/).reverse();\n  main();\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7856650217707674, "ngram_match_score": 0.5203528722898433, "weighted_ngram_match_score": 0.633606649821475, "syntax_match_score": 0.9887005649717514, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.003762773901897498, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.004716981132075526, "new_decrease_halstead_effort": 0.07705584716508218}}
{"filename": "p00935_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['replace'](/\\n/g,'\\x20')['split']('\\x20');var n=arr['shift']()-0x0;var a=[];for(var i=0x0;i<0x2710;i++)a[i]=![];for(var i=0x0;i<n;i++){a[arr[i]-0x0]=!![];if(i+0x1<n)a[arr[i]+arr[i+0x1]-0x0]=!![];if(i+0x2<n)a[arr[i]+arr[i+0x1]+arr[i+0x2]-0x0]=!![];if(i+0x3<n)a[arr[i]+arr[i+0x1]+arr[i+0x2]+arr[i+0x3]-0x0]=!![];}for(var i=0x0;i<0x2710;i++){if(a[i]==![]){console['log'](i);break;}}", "test_cases": [["3\n3 0 1", "2"], ["11\n9 8 7 6 5 4 3 2 1 1 0", "12"], ["10\n9 0 8 7 6 5 4 3 2 1", "10"], ["100\n3 6 7 5 3 5 6 2 9 1 2 7 0 9 3 6 0 6 2\n6 1 8 7 9 2 0 2 3 7 5 9 2 2 8 9 7 3 6\n1 2 9 3 1 9 4 7 8 4 5 0 3 6 1 0 6 3 2\n0 6 1 5 5 4 7 6 5 6 9 3 7 4 5 2 5 4 7\n4 4 3 0 7 8 6 8 8 4 3 1 4 9 2 0 6 8 9\n2 6 6 4 9", "11"], ["100\n7 2 7 5 4 7 4 4 5 8 1 5 7 7 0 5 6 2 0\n4 3 4 1 1 0 6 1 6 6 2 1 7 9 2 4 6 9 3\n6 2 8 0 5 9 7 6 3 1 4 9 1 9 1 2 6 4 2\n9 7 8 3 9 5 5 2 3 3 8 4 0 6 8 2 5 5 0\n6 7 1 8 5 1 4 8 1 3 7 3 3 5 3 0 6 0 6\n5 3 2 2 2", "86"], ["1\n3", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().replace(/\\n/g, \" \").split(\" \");\nvar n = arr.shift() - 0;\nvar a = [];\nfor (var i = 0; i < 10000; i++) a[i] = false;\nfor (var i = 0; i < n; i++) {\n    a[arr[i] - 0] = true;\n    if (i + 1 < n) a[(arr[i] + arr[i + 1]) - 0] = true;\n    if (i + 2 < n) a[(arr[i] + arr[i + 1] + arr[i + 2]) - 0] = true;\n    if (i + 3 < n) a[(arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3]) - 0] = true;\n}\nfor (var i = 0; i < 10000; i++) {\n    if (a[i] == false) {\n        console.log(i);\n        break;\n    }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1197, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().replace(/\\n/g, \" \").split(\" \");\nvar n = arr.shift() - 0;\nvar a = [];\nfor (var i = 0; i < 10000; i++) {\n  a[i] = false;\n}\nfor (var i = 0; i < n; i++) {\n  a[arr[i] - 0] = true;\n  if (i + 1 < n) {\n    a[arr[i] + arr[i + 1] - 0] = true;\n  }\n  if (i + 2 < n) {\n    a[arr[i] + arr[i + 1] + arr[i + 2] - 0] = true;\n  }\n  if (i + 3 < n) {\n    a[arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] - 0] = true;\n  }\n}\nfor (var i = 0; i < 10000; i++) {\n  if (a[i] == false) {\n    console.log(i);\n    break;\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8375819105832587, "ngram_match_score": 0.7412928060376358, "weighted_ngram_match_score": 0.7923681696287327, "syntax_match_score": 0.8166666666666667, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.009237806191528808, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.08247422680412375, "new_decrease_halstead_effort": 0.20793340471645494}}
{"filename": "p01048_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var n=input['trim']()-0x0;var ans=[0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0];var i=0x0;while(!![]){i++;var cnt=0x0;for(var j=i;j>=0x1;j--){if(i%j==0x0)cnt++;}if(ans[cnt-0x1]==0x0){ans[cnt-0x1]=i;if(!ans['includes'](0x0))break;}}console['log'](ans[n-0x1]);", "test_cases": [["1", "1"], ["2", "2"], ["3", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar n = input.trim() - 0;\nvar ans = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar i = 0;\nwhile (true) {\n   i++;\n   var cnt = 0;\n   for (var j = i; j >= 1; j--) {\n      if (i % j == 0) cnt++;\n   }\n   if (ans[cnt - 1] == 0) {\n      ans[cnt - 1] = i;\n      if (!ans.includes(0)) break;\n   }\n}\nconsole.log(ans[n-1]);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1198, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar n = input.trim() - 0;\nvar ans = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar i = 0;\nwhile (true) {\n  i++;\n  var cnt = 0;\n  for (var j = i; j >= 1; j--) {\n    if (i % j == 0) {\n      cnt++;\n    }\n  }\n  if (ans[cnt - 1] == 0) {\n    ans[cnt - 1] = i;\n    if (!ans.includes(0)) {\n      break;\n    }\n  }\n}\nconsole.log(ans[n - 1]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8928263550724136, "ngram_match_score": 0.8193370749169898, "weighted_ngram_match_score": 0.890429883834203, "syntax_match_score": 0.8615384615384616, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0027743225558167772, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02941176470588236, "new_decrease_halstead_effort": 0.07293680534843516}}
{"filename": "p01050_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var s=input['trim']();var len=s['length'];var abc='0123456789AabcdefghijklmnopqrstuvwxyzA'['split']('');var sum=0x0;while(!![]){if(s=='')break;var cnt=0x0;var flag=![];abc['forEach'](v=>{var re=new RegExp(v);if(re['test'](s)){if(flag)cnt++;flag=!![];s=s['replace'](re,'');}else{if(cnt>=0x3)sum+=cnt-0x2;cnt=0x0;flag=![];}});}console['log'](len-sum);", "test_cases": [["0ig3he12fz99", "9"], ["1122334455", "6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim();\nvar len=s.length;\nvar abc=\"0123456789AabcdefghijklmnopqrstuvwxyzA\".split(\"\");\nvar sum=0;\nwhile(true){\n   if(s==\"\")break;\n   var cnt=0;\n   var flag=false;\n   abc.forEach(v=>{\n      var re = new RegExp( v );\n      if(re.test(s)){\n         if(flag)cnt++;\n         flag=true;\n         s=s.replace(re,\"\");\n      }else{\n         if(cnt>=3)sum+=cnt-2;\n         cnt=0;\n         flag=false;\n      }\n   });\n}\nconsole.log(len-sum);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1199, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar s = input.trim();\nvar len = s.length;\nvar abc = \"0123456789AabcdefghijklmnopqrstuvwxyzA\".split(\"\");\nvar sum = 0;\nwhile (true) {\n  if (s == \"\") {\n    break;\n  }\n  var cnt = 0;\n  var flag = false;\n  abc.forEach(v => {\n    var re = new RegExp(v);\n    if (re.test(s)) {\n      if (flag) {\n        cnt++;\n      }\n      flag = true;\n      s = s.replace(re, \"\");\n    } else {\n      if (cnt >= 3) {\n        sum += cnt - 2;\n      }\n      cnt = 0;\n      flag = false;\n    }\n  });\n}\nconsole.log(len - sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5041660520463901, "ngram_match_score": 0.05319118651525024, "weighted_ngram_match_score": 0.1399436099056043, "syntax_match_score": 0.8235294117647058, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.010946740864870463, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07462686567164178, "new_decrease_halstead_effort": 0.2821684383570878}}
{"filename": "p01086_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var Arr=arr['splice'](0x0,n);Arr=Arr['map'](function(v){return v['length'];});for(var i=0x0;i<Arr['length'];i++){var good=[0x5,0x7,0x5,0x7,0x7];var sum=0x0;for(var j=i;j<Arr['length'];j++){if(good['length']==0x0)break;sum+=Arr[j];if(good[0x0]>sum)continue;else if(good[0x0]<sum)break;else if(good[0x0]==sum){good['shift']();sum=0x0;}}if(good['length']==0x0){console['log'](i+0x1);break;}}}", "test_cases": [["9\ndo\nthe\nbest\nand\nenjoy\ntoday\nat\nacm\nicpc\n14\noh\nyes\nby\nfar\nit\nis\nwow\nso\nbad\nto\nme\nyou\nknow\nhey\n15\nabcde\nfghijkl\nmnopq\nrstuvwx\nyzz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\n0", "1\n2\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var Arr = arr.splice(0, n);\n   Arr = Arr.map(function(v) {\n      return v.length;\n   });\n   for (var i = 0; i < Arr.length; i++) {\n      var good = [5, 7, 5, 7, 7];\n      var sum = 0;\n      for (var j = i; j < Arr.length; j++) {\n         if (good.length == 0) break;\n         sum += Arr[j];\n         if (good[0] > sum) continue;\n         else if (good[0] < sum) break;\n         else if (good[0] == sum) {\n            good.shift();\n            sum = 0;\n         }\n      }\n      if (good.length == 0) {\n         console.log(i + 1);\n         break;\n      }\n   }\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1200, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var Arr = arr.splice(0, n);\n  Arr = Arr.map(function (v) {\n    return v.length;\n  });\n  for (var i = 0; i < Arr.length; i++) {\n    var good = [5, 7, 5, 7, 7];\n    var sum = 0;\n    for (var j = i; j < Arr.length; j++) {\n      if (good.length == 0) {\n        break;\n      }\n      sum += Arr[j];\n      if (good[0] > sum) {\n        continue;\n      } else if (good[0] < sum) {\n        break;\n      } else if (good[0] == sum) {\n        good.shift();\n        sum = 0;\n      }\n    }\n    if (good.length == 0) {\n      console.log(i + 1);\n      break;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8859634795172324, "ngram_match_score": 0.7919477194525179, "weighted_ngram_match_score": 0.8600143067245197, "syntax_match_score": 0.8918918918918919, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019230769230769273, "new_decrease_halstead_effort": 0.09814323607427045}}
{"filename": "p01094_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var ans='';while(arr['shift']()!=0x0){var a=arr['shift']()['split']('\\x20');var obj={};for(var i=0x0;i<a['length'];i++){obj[a[i]]=obj[a[i]]+0x1||0x1;var s=[];for(var k in obj)s['push']([obj[k],k]);s['sort'](function(a,b){return b[0x0]-a[0x0];});if(s['length']==0x1)s[0x1]=[0x0];if(s[0x0][0x0]>s[0x1][0x0]+a['length']-(i+0x1)){ans+=s[0x0][0x1]+'\\x20'+(i+0x1)+'\\x0a';break;}}if(i==a['length'])ans+='TIE'+'\\x0a';}console['log'](ans['trim']());", "test_cases": [["1\nA\n4\nA A B B\n5\nL M N L N\n6\nK K K K K K\n6\nX X X Y Z X\n10\nA A A B A C A C C B\n10\nU U U U U V V W W W\n0", "A 1\nTIE\nTIE\nK 4\nX 5\nA 7\nU 8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar ans = \"\";\nwhile (arr.shift() != 0) {\n   var a = arr.shift().split(\" \");\n   var obj = {};\n   for (var i = 0; i < a.length; i++) {\n      obj[a[i]] = obj[a[i]] + 1 || 1;\n      var s = [];\n      for (var k in obj) s.push([obj[k], k]);\n      s.sort(function(a, b) {\n         return b[0] - a[0];\n      });\n      if (s.length == 1) s[1] = [0];\n      if (s[0][0] > s[1][0] + a.length - (i + 1)) {\n         ans+=s[0][1]+\" \"+ (i + 1)+\"\\n\";\n         break;\n      }\n   }\n   if (i == a.length) ans+=\"TIE\"+\"\\n\";\n}\nconsole.log(ans.trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1201, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar ans = \"\";\nwhile (arr.shift() != 0) {\n  var a = arr.shift().split(\" \");\n  var obj = {};\n  for (var i = 0; i < a.length; i++) {\n    obj[a[i]] = obj[a[i]] + 1 || 1;\n    var s = [];\n    for (var k in obj) {\n      s.push([obj[k], k]);\n    }\n    s.sort(function (a, b) {\n      return b[0] - a[0];\n    });\n    if (s.length == 1) {\n      s[1] = [0];\n    }\n    if (s[0][0] > s[1][0] + a.length - (i + 1)) {\n      ans += s[0][1] + \" \" + (i + 1) + \"\\n\";\n      break;\n    }\n  }\n  if (i == a.length) {\n    ans += \"TIE\\n\";\n  }\n}\nconsole.log(ans.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8289601153293668, "ngram_match_score": 0.6506375503400661, "weighted_ngram_match_score": 0.7839272962233026, "syntax_match_score": 0.9140625, "dataflow_match_score": 0.9672131147540983}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.011173184357541888, "new_decrease_halstead_effort": 0.022039413100865435}}
{"filename": "p01117_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var [n,m]=arr['shift']()['split']('\\x20')['map'](Number);if(n==0x0&&m==0x0)break;var h=[];for(var i=0x0;i<n;i++)h[i]=0x0;for(var i=0x0;i<m;i++){var p=arr['shift']()['split']('\\x20')['map'](Number);h=p['map']((v,i)=>h[i]+v);}console['log'](Math['max'](...h));}", "test_cases": [["5 2\n10 20 30 40 50\n15 25 35 45 55\n6 3\n10 20 30 15 25 35\n21 34 11 52 20 18\n31 15 42 10 21 19\n4 2\n0 0 0 0\n0 0 0 0\n0 0", "105\n83\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,m]=arr.shift().split(\" \").map(Number);\n   if(n==0 && m==0)break;\n   var h=[];\n   for(var i=0;i<n;i++)h[i]=0;\n   for(var i=0;i<m;i++){\n      var p=arr.shift().split(\" \").map(Number);\n      h=p.map((v,i)=>h[i]+v);\n   }\n   console.log(Math.max(...h));\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1203, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var [n, m] = arr.shift().split(\" \").map(Number);\n  if (n == 0 && m == 0) {\n    break;\n  }\n  var h = [];\n  for (var i = 0; i < n; i++) {\n    h[i] = 0;\n  }\n  for (var i = 0; i < m; i++) {\n    var p = arr.shift().split(\" \").map(Number);\n    h = p.map((v, i) => h[i] + v);\n  }\n  console.log(Math.max(...h));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5117567023050298, "ngram_match_score": 0.025119176557419052, "weighted_ngram_match_score": 0.0774631882182556, "syntax_match_score": 0.9444444444444444, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00503758566703727, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02752293577981646, "new_decrease_halstead_effort": 0.13171690694626492}}
{"filename": "p01118_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var [h,w]=arr['shift']()['split']('\\x20')['map'](Number);if(h==0x0&&w==0x0)break;var k={};for(var i=0x0;i<h;i++){var r=arr['shift']()['split']('');for(var j=0x0;j<w;j++){k[r[j]]=[i,j];}}var [s,sum,y,x]=[arr['shift']()['split'](''),0x0,0x0,0x0];s['forEach'](v=>{sum+=Math['abs'](y-k[v][0x0])+Math['abs'](x-k[v][0x1])+0x1;[y,x]=[k[v][0x0],k[v][0x1]];});console['log'](sum);}", "test_cases": [["3 9\nABCDEFGHI\nJKLMNOPQR\nSTUVWXYZ_\nICPC\n5 11\n___________\n____A______\n________M__\n___________\n_C_________\nACM\n4 21\n1_2_3_4_5_6_7_8_9_0_-\nQqWwEeRrTtYyUuIiOoPp@\nAaSsDdFfGgHhJjKkLl;_:\nZzXxCcVvBbNnMm,_._/__\nICPC2019,AsiaYokohamaRegional,QualificationRound\n0 0", "28\n23\n493"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [h,w]=arr.shift().split(\" \").map(Number);\n   if(h==0 && w==0)break;\n   var k={};\n   for(var i=0;i<h;i++){\n      var r=arr.shift().split(\"\");\n      for(var j=0;j<w;j++){\n         k[r[j]]=[i,j];\n      }\n   }\n   var [s,sum,y,x]=[arr.shift().split(\"\"),0,0,0];\n   s.forEach(v=>{\n      sum+=Math.abs(y-k[v][0])+Math.abs(x- k[v][1])+1;\n      [y,x]=[k[v][0],k[v][1]];\n   });\n   console.log(sum);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1204, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var [h, w] = arr.shift().split(\" \").map(Number);\n  if (h == 0 && w == 0) {\n    break;\n  }\n  var k = {};\n  for (var i = 0; i < h; i++) {\n    var r = arr.shift().split(\"\");\n    for (var j = 0; j < w; j++) {\n      k[r[j]] = [i, j];\n    }\n  }\n  var [s, sum, y, x] = [arr.shift().split(\"\"), 0, 0, 0];\n  s.forEach(v => {\n    sum += Math.abs(y - k[v][0]) + Math.abs(x - k[v][1]) + 1;\n    [y, x] = [k[v][0], k[v][1]];\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5171152436298154, "ngram_match_score": 0.0243814978413515, "weighted_ngram_match_score": 0.07797778176265599, "syntax_match_score": 0.9661016949152542, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0047013725521432015, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025000000000000022, "new_decrease_halstead_effort": 0.12137931034482763}}
{"filename": "p01136_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var ary=arr['slice'](0x0,n);ary=ary['map'](v=>v['split']('\\x20')['map'](Number)['slice'](0x1));var flag=!![];var h=[];for(var i=0x0;i<n;i++)h['push']([i]);for(var i=0x1;i<=0x1e;i++){var a=[];ary['forEach']((v,j)=>{if(v['includes'](i))a['push'](j);});var b=[];a['forEach'](v=>b['push'](...h[v]));b=b['filter']((x,i,self)=>self['indexOf'](x)==i);if(b['length']==n){flag=![];console['log'](i);break;}a['forEach'](v=>h[v]=b);}if(flag)console['log'](-0x1);arr=arr['slice'](n);}", "test_cases": [["4\n1 1\n2 2 3\n2 1 2\n3 3 4 5\n0", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=arr.slice(0,n);\n   ary=ary.map(v=> v.split(\" \").map(Number).slice(1));\n   var flag=true;\n   var h=[];\n   for(var i=0;i<n;i++)h.push([i]);\n   for(var i=1;i<=30;i++){\n      var a=[];\n      ary.forEach((v,j)=>{\n         if(v.includes(i))a.push(j);\n      });\n      var b=[];\n      a.forEach(v=>b.push(...h[v]));\n      b= b.filter((x, i, self) => self.indexOf(x) == i);\n      if(b.length==n){\n         flag=false;\n         console.log(i);\n         break;\n      }\n      a.forEach(v=> h[v]=b);\n   }\n   if(flag)console.log(-1);\n   arr=arr.slice(n);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1205, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var ary = arr.slice(0, n);\n  ary = ary.map(v => v.split(\" \").map(Number).slice(1));\n  var flag = true;\n  var h = [];\n  for (var i = 0; i < n; i++) {\n    h.push([i]);\n  }\n  for (var i = 1; i <= 30; i++) {\n    var a = [];\n    ary.forEach((v, j) => {\n      if (v.includes(i)) {\n        a.push(j);\n      }\n    });\n    var b = [];\n    a.forEach(v => b.push(...h[v]));\n    b = b.filter((x, i, self) => self.indexOf(x) == i);\n    if (b.length == n) {\n      flag = false;\n      console.log(i);\n      break;\n    }\n    a.forEach(v => h[v] = b);\n  }\n  if (flag) {\n    console.log(-1);\n  }\n  arr = arr.slice(n);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5532756738061313, "ngram_match_score": 0.08380886954463525, "weighted_ngram_match_score": 0.2220090574679697, "syntax_match_score": 0.9072847682119205, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007243028246911365, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05161290322580647, "new_decrease_halstead_effort": 0.16177448207947398}}
{"filename": "p01139_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){cnt++;var dx=[0x0,-0x1,0x1,0x0];var dy=[-0x1,0x0,0x0,0x1];for(var i=0x0;i<0x4;i++){var X=x+dx[i];var Y=y+dy[i];if(Y>=h||Y<0x0||X>=w||X<0x0)continue;if(yx[Y][X]=='S')continue;else if(yx[Y][X]=='.'){yx[Y][X]='S';bomb(Y,X);}else{if(color==''||color==yx[Y][X])color=yx[Y][X];else color='bad';}}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var wh=arr['shift']();if(wh=='0\\x200')break;wh=wh['split']('\\x20')['map'](Number);var w=wh[0x0];var h=wh[0x1];var yx=[];for(var i=0x0;i<h;i++)yx['push'](arr['shift']()['split'](''));var ans=[0x0,0x0];for(var y=0x0;y<h;y++){for(var x=0x0;x<w;x++){var color='';var cnt=0x0;if(yx[y][x]=='.'){yx[y][x]='S';bomb(y,x);}if(color=='B')ans[0x0]+=cnt;else if(color=='W')ans[0x1]+=cnt;}}console['log'](ans[0x0]+'\\x20'+ans[0x1]);}", "test_cases": [["10 10\n.....W....\n....W.W...\n...W...W..\n....W...W.\n.....W...W\n......W.W.\nBBB....W..\n..B..BBBBB\n..B..B....\n..B..B..W.\n5 3\n...B.\n...BB\n.....\n1 1\n.\n0 0", "6 21\n12 0\n0 0"]], "original": "function bomb(y,x){\n   cnt++;\n   var dx=[0,-1,1,0];\n   var dy=[-1,0,0,1];\n   for(var i=0;i<4;i++){\n      var X=x+dx[i];\n      var Y=y+dy[i];\n      if(Y>=h || Y<0 || X>=w || X<0)continue;\n      if(yx[Y][X]==\"S\")continue;\n      else if(yx[Y][X]==\".\"){yx[Y][X]=\"S\";bomb(Y,X);}\n      else {\n         if(color==\"\" || color==yx[Y][X])color=yx[Y][X];\n         else color=\"bad\";\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wh=arr.shift();\n   if(wh==\"0 0\")break;\n   wh=wh.split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   var yx=[];\n   for(var i=0;i<h;i++)yx.push(arr.shift().split(\"\"));\n   var ans=[0,0];\n   for(var y=0;y<h;y++){\n      for(var x=0;x<w;x++){\n         var color=\"\";\n         var cnt=0;\n         if(yx[y][x]==\".\"){yx[y][x]=\"S\";bomb(y,x);}\n         if(color==\"B\")ans[0]+=cnt;\n         else if(color==\"W\")ans[1]+=cnt;\n      }\n   }\n   console.log(ans[0]+\" \"+ans[1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1206, "deobfuscated": "function bomb(y, x) {\n  cnt++;\n  var dx = [0, -1, 1, 0];\n  var dy = [-1, 0, 0, 1];\n  for (var i = 0; i < 4; i++) {\n    var X = x + dx[i];\n    var Y = y + dy[i];\n    if (Y >= h || Y < 0 || X >= w || X < 0) {\n      continue;\n    }\n    if (yx[Y][X] == \"S\") {\n      continue;\n    } else if (yx[Y][X] == \".\") {\n      yx[Y][X] = \"S\";\n      bomb(Y, X);\n    } else if (color == \"\" || color == yx[Y][X]) {\n      color = yx[Y][X];\n    } else {\n      color = \"bad\";\n    }\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var wh = arr.shift();\n  if (wh == \"0 0\") {\n    break;\n  }\n  wh = wh.split(\" \").map(Number);\n  var w = wh[0];\n  var h = wh[1];\n  var yx = [];\n  for (var i = 0; i < h; i++) {\n    yx.push(arr.shift().split(\"\"));\n  }\n  var ans = [0, 0];\n  for (var y = 0; y < h; y++) {\n    for (var x = 0; x < w; x++) {\n      var color = \"\";\n      var cnt = 0;\n      if (yx[y][x] == \".\") {\n        yx[y][x] = \"S\";\n        bomb(y, x);\n      }\n      if (color == \"B\") {\n        ans[0] += cnt;\n      } else if (color == \"W\") {\n        ans[1] += cnt;\n      }\n    }\n  }\n  console.log(ans[0] + \" \" + ans[1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5098246194268521, "ngram_match_score": 0.03457103090481213, "weighted_ngram_match_score": 0.1201120621872116, "syntax_match_score": 0.8846153846153846, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.010101010101010055, "new_decrease_halstead_effort": 0.07866544230180594}}
{"filename": "p01144_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var nm=Arr['shift']()['split']('\\x20')['map'](Number);if(nm[0x0]==0x0&&nm[0x1]==0x0)break;var M=nm[0x1];var DP=[];for(var i=0x0;i<nm[0x0];i++){var dp=Arr['shift']()['split']('\\x20')['map'](Number);DP['push'](dp);}DP['sort'](function(a,b){return b[0x1]-a[0x1];});var sum=0x0;DP['forEach'](function(v){var d=v[0x0];var p=v[0x1];while(!![]){if(M==0x0||d==0x0)break;M--;d--;}sum+=d*p;});console['log'](sum);}", "test_cases": [["2 8\n5 6\n4 5\n3 1\n5 10\n5 10\n5 10\n0 0", "5\n140"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=(Arr.shift()).split(\" \").map(Number);\n   if(nm[0]==0 && nm[1]==0)break;\n   var M=nm[1];\n   var DP=[];\n   for(var i=0;i<nm[0];i++){\n      var dp=(Arr.shift()).split(\" \").map(Number);\n      DP.push(dp);\n   }\n   DP.sort(function(a,b){return b[1]-a[1]});\n   var sum=0;\n   DP.forEach(function(v){\n      var d=v[0];\n      var p=v[1];\n      while(true){\n         if(M==0 || d==0)break;\n         M--;\n         d--;\n      }\n      sum+=d*p;\n   });\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1207, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = Arr.shift().split(\" \").map(Number);\n  if (nm[0] == 0 && nm[1] == 0) {\n    break;\n  }\n  var M = nm[1];\n  var DP = [];\n  for (var i = 0; i < nm[0]; i++) {\n    var dp = Arr.shift().split(\" \").map(Number);\n    DP.push(dp);\n  }\n  DP.sort(function (a, b) {\n    return b[1] - a[1];\n  });\n  var sum = 0;\n  DP.forEach(function (v) {\n    var d = v[0];\n    var p = v[1];\n    while (true) {\n      if (M == 0 || d == 0) {\n        break;\n      }\n      M--;\n      d--;\n    }\n    sum += d * p;\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.45806182663113537, "ngram_match_score": 0.02914608778037288, "weighted_ngram_match_score": 0.07359302202285718, "syntax_match_score": 0.7295081967213115, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007713674924271441, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.036363636363636376, "new_decrease_halstead_effort": 0.10924369747899165}}
{"filename": "p01149_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['replace'](/T|J|Q|K/g,'10');input=input['replace'](/A/g,'11');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;while(n--){var a=arr['shift']()['split']('\\x20')['map'](Number);var b=arr['shift']()['split']('\\x20')['map'](Number);var flag=![];var sum=a[0x0]+a[0x1];if(a[0x0]==0xb||a[0x1]==0xb)flag=!![];if(sum==0x15){console['log']('blackjack');continue;}var ans='';for(var i=0x0;i<b['length'];i++){if(sum<=0x10){if(b[i]==0xb)flag=!![];if(b[i]==0xb&&sum+0xb>0x15)b[i]=0x1;sum+=b[i];}else if(sum==0x11&&flag){if(b[i]==0xb)flag=!![];if(b[i]==0xb&&sum+0xb>0x15)b[i]=0x1;sum+=b[i];}else{break;}}if(sum>0x15)sum='bust';console['log'](sum);}", "test_cases": [["4\n5 4\n9 2 8 3 7 4 6 5\nA J\nK Q J T 9 8 7 6\nT 4\n7 J A 6 Q T K 7\n2 2\n2 3 4 K 2 3 4 K", "18\nblackjack\n21\nbust"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.replace(/T|J|Q|K/g,\"10\");\ninput=input.replace(/A/g,\"11\");\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var a=arr.shift().split(\" \").map(Number);\n   var b=arr.shift().split(\" \").map(Number);\n   var flag=false;\n   var sum=a[0]+a[1];\n   if(a[0]==11 || a[1]==11)flag=true;\n   if(sum==21){console.log(\"blackjack\");continue;}\n   var ans=\"\";\n   for(var i=0;i<b.length;i++){\n      if(sum<=16){\n         if(b[i]==11)flag=true;\n         if(b[i]==11 && sum+11>21)b[i]=1;\n         sum+=b[i];\n      }else if(sum==17 && flag){\n         if(b[i]==11)flag=true;\n         if(b[i]==11 && sum+11>21)b[i]=1;\n         sum+=b[i];\n      }else {\n         break;\n      }\n   }\n   if(sum>21)sum=\"bust\";\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1208, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.replace(/T|J|Q|K/g, \"10\");\ninput = input.replace(/A/g, \"11\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nwhile (n--) {\n  var a = arr.shift().split(\" \").map(Number);\n  var b = arr.shift().split(\" \").map(Number);\n  var flag = false;\n  var sum = a[0] + a[1];\n  if (a[0] == 11 || a[1] == 11) {\n    flag = true;\n  }\n  if (sum == 21) {\n    console.log(\"blackjack\");\n    continue;\n  }\n  var ans = \"\";\n  for (var i = 0; i < b.length; i++) {\n    if (sum <= 16) {\n      if (b[i] == 11) {\n        flag = true;\n      }\n      if (b[i] == 11 && sum + 11 > 21) {\n        b[i] = 1;\n      }\n      sum += b[i];\n    } else if (sum == 17 && flag) {\n      if (b[i] == 11) {\n        flag = true;\n      }\n      if (b[i] == 11 && sum + 11 > 21) {\n        b[i] = 1;\n      }\n      sum += b[i];\n    } else {\n      break;\n    }\n  }\n  if (sum > 21) {\n    sum = \"bust\";\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5090769615301661, "ngram_match_score": 0.029140876440047824, "weighted_ngram_match_score": 0.10355251184929147, "syntax_match_score": 0.9036144578313253, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00763123326580617, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.047210300429184504, "new_decrease_halstead_effort": 0.15515182776762082}}
{"filename": "p01155_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var ab=arr['shift']()['split']('\\x20')['map'](Number);if(ab['join']('\\x20')=='0\\x200')break;var a=ab[0x0];var b=ab[0x1];var A=[];var B=[];for(i=0x1;i<=Math['sqrt'](a);i++){if(a%i==0x0)A['push']([a/ i,i]);}for(i=0x1;i<=Math['sqrt'](b);i++){if(b%i==0x0)B['push']([b/ i,i]);}var min=Infinity;A['forEach'](function(va){B['forEach'](function(vb){var c=[va[0x0],va[0x1],vb[0x0],vb[0x1]];c['sort'](function(a,b){return a-b;});min=Math['min'](min,Math['pow'](c[0x0]-c[0x1],0x2)+Math['pow'](c[0x1]-c[0x2],0x2)+Math['pow'](c[0x2]-c[0x3],0x2));});});console['log'](min);}", "test_cases": [["33 40\n57 144\n0 0", "22\n94"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var ab=arr.shift().split(\" \").map(Number);\n   if(ab.join(\" \")==\"0 0\")break;\n   var a=ab[0];\n   var b=ab[1];\n   var A=[];\n   var B=[];\n   for(i=1;i<=Math.sqrt(a);i++){\n      if(a%i==0)A.push([a/i,i]);\n   }\n   for(i=1;i<=Math.sqrt(b);i++){\n      if(b%i==0)B.push([b/i,i]);\n   }\n   var min=Infinity;\n   A.forEach(function(va){\n      B.forEach(function(vb){\n         var c=[va[0],va[1],vb[0],vb[1]];\n         c.sort(function(a,b){return a-b;});\n         min=Math.min(min,Math.pow(c[0]-c[1],2)+Math.pow(c[1]-c[2],2)+Math.pow(c[2]-c[3],2));\n      });\n   });\n   console.log(min);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1209, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var ab = arr.shift().split(\" \").map(Number);\n  if (ab.join(\" \") == \"0 0\") {\n    break;\n  }\n  var a = ab[0];\n  var b = ab[1];\n  var A = [];\n  var B = [];\n  for (i = 1; i <= Math.sqrt(a); i++) {\n    if (a % i == 0) {\n      A.push([a / i, i]);\n    }\n  }\n  for (i = 1; i <= Math.sqrt(b); i++) {\n    if (b % i == 0) {\n      B.push([b / i, i]);\n    }\n  }\n  var min = Infinity;\n  A.forEach(function (va) {\n    B.forEach(function (vb) {\n      var c = [va[0], va[1], vb[0], vb[1]];\n      c.sort(function (a, b) {\n        return a - b;\n      });\n      min = Math.min(min, Math.pow(c[0] - c[1], 2) + Math.pow(c[1] - c[2], 2) + Math.pow(c[2] - c[3], 2));\n    });\n  });\n  console.log(min);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5223425746693947, "ngram_match_score": 0.032264593477312406, "weighted_ngram_match_score": 0.12079997271618989, "syntax_match_score": 0.9363057324840764, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0015566392421476616, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.013157894736842146, "new_decrease_halstead_effort": 0.06893469198697166}}
{"filename": "p01223_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var t=Arr['shift']()-0x0;for(var i=0x0;i<t;i++){var n=Arr['shift']()-0x0;var arr=Arr['shift']()['split']('\\x20')['map'](Number);var max=0x0;var min=0x0;var m=arr[0x0];for(var j=0x1;j<n;j++){max=Math['max'](arr[j]-m,max);min=Math['min'](arr[j]-m,min);m=arr[j];}console['log'](max+'\\x20'+Math['abs'](min));}", "test_cases": [["5\n5\n10 70 30 50 90\n2\n20 100\n2\n100 30\n3\n50 50 50\n7\n123 45 678 901 234 567 890", "60 40\n80 0\n0 70\n0 0\n633 667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar t=Arr.shift()-0;\nfor(var i=0;i<t;i++){\n   var n=Arr.shift()-0;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var max=0;\n   var min=0;\n   var m=arr[0];\n   for(var j=1;j<n;j++){\n      max=Math.max(arr[j]-m,max);\n      min=Math.min(arr[j]-m,min);\n      m=arr[j];\n   }\n   console.log(max+\" \"+Math.abs(min));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1210, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar t = Arr.shift() - 0;\nfor (var i = 0; i < t; i++) {\n  var n = Arr.shift() - 0;\n  var arr = Arr.shift().split(\" \").map(Number);\n  var max = 0;\n  var min = 0;\n  var m = arr[0];\n  for (var j = 1; j < n; j++) {\n    max = Math.max(arr[j] - m, max);\n    min = Math.min(arr[j] - m, min);\n    m = arr[j];\n  }\n  console.log(max + \" \" + Math.abs(min));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47814101523226804, "ngram_match_score": 0.017678360131072546, "weighted_ngram_match_score": 0.05446016888310602, "syntax_match_score": 0.8404255319148937, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0019509363875768182, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.05603262463932035}}
{"filename": "p01224_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var sum=n!=0x1?0x1:0x0;var sqrt=Math['sqrt'](n);for(var i=0x2;i<sqrt;i++){if(n%i==0x0)sum+=i+n/ i;}if(n%sqrt==0x0&&sqrt!=0x1)sum+=sqrt;var ans;if(n==sum)ans='perfect\\x20number';else if(n>sum)ans='deficient\\x20number';else if(n<sum)ans='abundant\\x20number';console['log'](ans);}", "test_cases": [["1\n2\n3\n4\n6\n12\n16\n28\n33550336\n99999998\n99999999\n100000000\n0", "deficient number\ndeficient number\ndeficient number\ndeficient number\nperfect number\nabundant number\ndeficient number\nperfect number\nperfect number\ndeficient number\ndeficient number\nabundant number"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var sum=(n!=1)?1:0;\n   var sqrt=Math.sqrt(n);\n   for(var i=2;i<sqrt;i++){\n      if(n%i==0)sum+=i+n/i;\n   }\n   if(n%sqrt==0 && sqrt!=1)sum+=sqrt;\n   var ans;\n   if(n==sum)ans=\"perfect number\";\n   else if(n>sum)ans=\"deficient number\";\n   else if(n<sum)ans=\"abundant number\";\n   console.log(ans);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1211, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var sum = n != 1 ? 1 : 0;\n  var sqrt = Math.sqrt(n);\n  for (var i = 2; i < sqrt; i++) {\n    if (n % i == 0) {\n      sum += i + n / i;\n    }\n  }\n  if (n % sqrt == 0 && sqrt != 1) {\n    sum += sqrt;\n  }\n  var ans;\n  if (n == sum) {\n    ans = \"perfect number\";\n  } else if (n > sum) {\n    ans = \"deficient number\";\n  } else if (n < sum) {\n    ans = \"abundant number\";\n  }\n  console.log(ans);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.473888196811869, "ngram_match_score": 0.014306992286516506, "weighted_ngram_match_score": 0.05515883843922034, "syntax_match_score": 0.8260869565217391, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0037525830241396108, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.024193548387096753, "new_decrease_halstead_effort": 0.0894128041906318}}
{"filename": "p01294_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var [n,d]=arr['shift']()['split']('\\x20')['map'](Number);if(n==0x0&&d==0x0)break;var S=[];var C=[];for(var i=0x0;i<n;i++){var mc=arr[i]['split']('\\x20');mc['shift']();var c=mc['map'](Number)['reverse']();var sum=c['length']!=0x0?c['reduce']((a,b)=>a+b):0x0;S[i]=sum;C[i]=c;}while(!![]){var f=![];for(var i=0x0;i<S['length'];i++){if(S[i]==0x0)continue;S[i]-=C[i][0x0];if(Math['max'](...S)-Math['min'](...S)<=d){C[i]['shift']();f=!![];break;}else{S[i]+=C[i][0x0];}}if(f==![])break;}var sum=S['reduce']((a,b)=>a+b);if(sum==0x0)console['log']('Yes');else console['log']('No');arr=arr['slice'](n);}", "test_cases": [["3 3\n3 4 1 1\n2 1 5\n2 3 3\n3 3\n3 2 3 1\n2 1 5\n2 3 3\n0 0", "Yes\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,d]=arr.shift().split(\" \").map(Number);\n   if(n==0 && d==0)break;\n   var S=[];\n   var C=[];\n   for(var i=0;i<n;i++){\n      var mc=arr[i].split(\" \");\n      mc.shift();\n      var c=mc.map(Number).reverse();\n      var sum= (c.length!=0)?c.reduce((a,b)=> a+b):0;\n      S[i]=sum;\n      C[i]=c;\n   }\n   while(true){ \n      var f=false;\n      for(var i=0;i<S.length;i++){\n         if(S[i]==0)continue;\n         S[i] -= C[i][0];\n         if(Math.max(...S) - Math.min(...S) <=d){\n            C[i].shift();\n            f=true;\n            break;\n         }else{\n            S[i] +=C[i][0];\n         }\n      }\n      if(f==false)break;\n   }\n   var sum=S.reduce((a,b)=> a+b);\n   if(sum==0)console.log(\"Yes\");\n   else console.log(\"No\");\n   arr=arr.slice(n);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1212, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var [n, d] = arr.shift().split(\" \").map(Number);\n  if (n == 0 && d == 0) {\n    break;\n  }\n  var S = [];\n  var C = [];\n  for (var i = 0; i < n; i++) {\n    var mc = arr[i].split(\" \");\n    mc.shift();\n    var c = mc.map(Number).reverse();\n    var sum = c.length != 0 ? c.reduce((a, b) => a + b) : 0;\n    S[i] = sum;\n    C[i] = c;\n  }\n  while (true) {\n    var f = false;\n    for (var i = 0; i < S.length; i++) {\n      if (S[i] == 0) {\n        continue;\n      }\n      S[i] -= C[i][0];\n      if (Math.max(...S) - Math.min(...S) <= d) {\n        C[i].shift();\n        f = true;\n        break;\n      } else {\n        S[i] += C[i][0];\n      }\n    }\n    if (f == false) {\n      break;\n    }\n  }\n  var sum = S.reduce((a, b) => a + b);\n  if (sum == 0) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n  arr = arr.slice(n);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4922109556436435, "ngram_match_score": 0.019327607857559406, "weighted_ngram_match_score": 0.05296449057908354, "syntax_match_score": 0.896551724137931, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.007018992752121367, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.05676855895196509, "new_decrease_halstead_effort": 0.14343894358383658}}
{"filename": "p01303_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['replace'](/\\n$/,'')['split']('\\x0a');var N=Arr['shift']()-0x0;for(var I=0x0;I<N;I++){var xywh=Arr['shift']()['split']('\\x20')['map'](Number);var x1=xywh[0x0];var x2=xywh[0x0]+xywh[0x2];var y1=xywh[0x1];var y2=xywh[0x1]+xywh[0x3];var n=Arr['shift']()-0x0;var cnt=0x0;for(var i=0x0;i<n;i++){var XY=Arr['shift']()['split']('\\x20')['map'](Number);var X=XY[0x0];var Y=XY[0x1];if(x1<=X&&x2>=X&&y1<=Y&&y2>=Y)cnt++;}console['log'](cnt);}", "test_cases": [["2\n1 3 20 10\n4\n21 13\n1 15\n10 10\n25 10\n1 3 20 10\n4\n21 13\n1 15\n10 10\n25 10", "2\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar N=Arr.shift()-0;\nfor(var I=0;I<N;I++){\n   var xywh=(Arr.shift()).split(\" \").map(Number);\n   var x1=xywh[0];\n   var x2=xywh[0]+xywh[2];\n   var y1=xywh[1];\n   var y2=xywh[1]+xywh[3];\n   var n=Arr.shift()-0;\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      var XY=(Arr.shift()).split(\" \").map(Number);\n      var X=XY[0];\n      var Y=XY[1];\n      if(x1<=X && x2>=X && y1<=Y && y2>=Y)cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1213, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.replace(/\\n$/, \"\").split(\"\\n\");\nvar N = Arr.shift() - 0;\nfor (var I = 0; I < N; I++) {\n  var xywh = Arr.shift().split(\" \").map(Number);\n  var x1 = xywh[0];\n  var x2 = xywh[0] + xywh[2];\n  var y1 = xywh[1];\n  var y2 = xywh[1] + xywh[3];\n  var n = Arr.shift() - 0;\n  var cnt = 0;\n  for (var i = 0; i < n; i++) {\n    var XY = Arr.shift().split(\" \").map(Number);\n    var X = XY[0];\n    var Y = XY[1];\n    if (x1 <= X && x2 >= X && y1 <= Y && y2 >= Y) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46527303105782086, "ngram_match_score": 0.02193490907159811, "weighted_ngram_match_score": 0.05845546077372048, "syntax_match_score": 0.7807017543859649, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01315_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n===0x0)break;var ans=[];for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20');var name=arr['shift']();arr=arr['map'](Number);arr['unshift'](name);(function(L,P,A,B,C,D,E,F,S,M){var time=A+B+C+(D+E)*M;var money=F*S*M-P;ans['push']([L,money/time]);}['apply'](null,arr));}ans['sort'](function(a,b){if(a[0x1]==b[0x1])return a[0x0]['toString']()>b[0x0]['toString']()?0x1:-0x1;else return b[0x1]-a[0x1];});ans['forEach'](function(v){console['log'](v[0x0]);});console['log']('#');}", "test_cases": [["5\napple 1 1 1 1 1 1 1 10 1\nbanana 1 2 2 2 2 2 1 10 1\ncarrot 1 2 2 2 2 2 1 10 2\ndurian 1 3 3 3 3 3 1 10 1\neggplant 1 3 3 3 3 3 1 100 1\n4\nenoki 1 3 3 3 3 3 1 10 1\ntomato 1 3 3 3 3 3 1 10 1\npotato 1 3 3 3 3 3 1 10 1\nonion 1 3 3 3 3 3 1 10 1\n3\na 10 1 1 1 1 1 1 10 1\nb 10 2 2 2 2 2 2 10 1\nc 10 2 2 2 2 2 2 10 1\n0", "eggplant\napple\ncarrot\nbanana\ndurian\n#\nenoki\nonion\npotato\ntomato\n#\nb\nc\na\n#"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n===0)break;\n   var ans=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var name=arr.shift();\n      arr=arr.map(Number);\n      arr.unshift(name);\n      (function(L, P, A, B, C, D, E, F, S, M){\n         var time=A+B+C+((D+E)*M);\n         var money=(F*S*M)-P;\n         ans.push([L,money/time]);\n      }).apply(null,arr);\n   }\n   ans.sort(function(a,b){\n      if(a[1]==b[1])return (a[0].toString()>b[0].toString())?1:-1;\n      else return b[1]-a[1];\n   });\n   ans.forEach(function(v){console.log(v[0]);});\n   console.log(\"#\");\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1214, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n === 0) {\n    break;\n  }\n  var ans = [];\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \");\n    var name = arr.shift();\n    arr = arr.map(Number);\n    arr.unshift(name);\n    (function (L, P, A, B, C, D, E, F, S, M) {\n      var time = A + B + C + (D + E) * M;\n      var money = F * S * M - P;\n      ans.push([L, money / time]);\n    }).apply(null, arr);\n  }\n  ans.sort(function (a, b) {\n    if (a[1] == b[1]) {\n      if (a[0].toString() > b[0].toString()) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else {\n      return b[1] - a[1];\n    }\n  });\n  ans.forEach(function (v) {\n    console.log(v[0]);\n  });\n  console.log(\"#\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5085643059237209, "ngram_match_score": 0.07606738110210363, "weighted_ngram_match_score": 0.22902317592611346, "syntax_match_score": 0.7291666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.11538461538461542, "length_score": -0.11538461538461542, "increase_maintainability": -0.03842488952539724, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.005025125628140725, "new_decrease_halstead_effort": 0.10991272768391724}}
{"filename": "p01321_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var S=[];for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20')['map'](Number);var sum=arr['reduce'](function(a,b){return a+b;});S['push'](sum);}S['sort'](function(a,b){return b-a;});console['log'](S[0x0]+'\\x20'+S[S['length']-0x1]);}", "test_cases": [["3\n49 50 87 78 41\n27 61 100 45 84\n28 88 40 95 66\n2\n100 100 100 100 100\n0 0 0 0 0\n1\n89 90 85 93 82\n0", "317 305\n500 0\n439 439"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var S=[];\n   for(var i=0;i<n;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n      var sum=arr.reduce(function(a,b){return a+b;});\n      S.push(sum);\n   }\n   S.sort(function(a,b){return b-a;});\n   console.log(S[0]+\" \"+S[S.length-1]);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1215, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var S = [];\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \").map(Number);\n    var sum = arr.reduce(function (a, b) {\n      return a + b;\n    });\n    S.push(sum);\n  }\n  S.sort(function (a, b) {\n    return b - a;\n  });\n  console.log(S[0] + \" \" + S[S.length - 1]);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4712735363320092, "ngram_match_score": 0.019870232576791682, "weighted_ngram_match_score": 0.06302611055344275, "syntax_match_score": 0.8021978021978022, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.025000000000000022, "new_decrease_halstead_effort": 0.11195445920303604}}
{"filename": "p01322_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var nm=Arr['shift']()['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];if(n==0x0)break;var obj={};for(var i=0x0;i<n;i++){var arr=Arr['shift']()['split']('\\x20');var v=arr[0x0]['replace'](/\\*/g,'');obj[v]=arr[0x1]-0x0;}var sum=0x0;for(var i=0x0;i<m;i++){var v=Arr['shift']();for(var k in obj){if(k==v['slice'](-0x1*k['length']))sum+=obj[k];}}console['log'](sum);}", "test_cases": [["3 3\n*******1 100\n******22 1000\n11111112 1000000\n01203291\n02382022\n11111111\n10 10\n****3228 149416\n****3992 198635\n****4286 77783\n****4843 225244\n***49835 231046\n***59393 379996\n*5763748 437345\n*6726222 58054\n*8117882 16375\n*9244339 537727\n77885716\n96726222\n26971031\n66652868\n89599648\n37772338\n64679621\n65479161\n92959393\n57855682\n0 0", "1200\n438050"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=(Arr.shift()).split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   if(n==0)break;\n   var obj={};\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var v=arr[0].replace(/\\*/g,\"\");\n      obj[v]=arr[1]-0;\n   }\n   var sum=0;\n   for(var i=0;i<m;i++){\n      var v=Arr.shift();\n      for(var k in obj){\n         if(k==v.slice(-1*k.length))sum+=obj[k];\n      }\n   }\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1216, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nm = Arr.shift().split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  if (n == 0) {\n    break;\n  }\n  var obj = {};\n  for (var i = 0; i < n; i++) {\n    var arr = Arr.shift().split(\" \");\n    var v = arr[0].replace(/\\*/g, \"\");\n    obj[v] = arr[1] - 0;\n  }\n  var sum = 0;\n  for (var i = 0; i < m; i++) {\n    var v = Arr.shift();\n    for (var k in obj) {\n      if (k == v.slice(k.length * -1)) {\n        sum += obj[k];\n      }\n    }\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4720130787406176, "ngram_match_score": 0.049045605856095784, "weighted_ngram_match_score": 0.1336495662492318, "syntax_match_score": 0.7053571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0065803704197846535, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.019607843137254943, "new_decrease_halstead_effort": 0.15279091802851108}}
{"filename": "p01333_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var ab=Arr['shift']()['split']('\\x20');;if(ab[0x0]==0x0&&ab[0x1]==0x0)break;var m=ab[0x1]-ab[0x0];var arr=[0x0,0x0,0x0];while(m>=0x3e8){m-=0x3e8;arr[0x2]++;}while(m>=0x1f4){m-=0x1f4;arr[0x1]++;}while(m>=0x64){m-=0x64;arr[0x0]++;}console['log'](arr['join']('\\x20'));}", "test_cases": [["500 1000\n100 10000\n400 700\n600 5000\n10000 10000\n0 0", "0 1 0\n4 1 9\n3 0 0\n4 0 4\n0 0 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var ab=(Arr.shift()).split(\" \");;\n   if(ab[0]==0 && ab[1]==0)break;\n   var m=ab[1]-ab[0];\n   var arr=[0,0,0];\n   while(m>=1000){\n      m-=1000;\n      arr[2]++;\n   }\n   while(m>=500){\n      m-=500;\n      arr[1]++;\n   }\n   while(m>=100){\n      m-=100;\n      arr[0]++;\n   }\n   console.log(arr.join(\" \"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1217, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var ab = Arr.shift().split(\" \");\n  ;\n  if (ab[0] == 0 && ab[1] == 0) {\n    break;\n  }\n  var m = ab[1] - ab[0];\n  var arr = [0, 0, 0];\n  while (m >= 1000) {\n    m -= 1000;\n    arr[2]++;\n  }\n  while (m >= 500) {\n    m -= 500;\n    arr[1]++;\n  }\n  while (m >= 100) {\n    m -= 100;\n    arr[0]++;\n  }\n  console.log(arr.join(\" \"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5283195204070911, "ngram_match_score": 0.07922657244620208, "weighted_ngram_match_score": 0.19684220685658088, "syntax_match_score": 0.8372093023255814, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.005027313366383623, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.027027027027026973, "new_decrease_halstead_effort": 0.12681912681912688}}
{"filename": "p01334_1", "type": "JavaScript", "obfuscated": "function bomb(y,x){var Y=yx[y][x][0x1];var X=yx[y][x][0x0];if(ring['hasOwnProperty'](Y+','+X)){var flag=!![];for(var k in ring){if(obj['hasOwnProperty'](k))flag=![];obj[k]=!![];}if(flag)cnt++;}else{ring[Y+','+X]=!![];bomb(Y,X);}}var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var n=arr['shift']()-0x0;if(n==0x0)break;var yx=[];for(var i=0x0;i<n;i++){var tile=arr['shift']()['split']('\\x20')['map'](Number);var t=[];for(var j=0x0;j<n;j++)t[j]=[tile['shift'](),tile['shift']()];yx['push'](t);}var obj={};var cnt=0x0;for(var i=0x0;i<n;i++){for(var j=0x0;j<n;j++){if(obj['hasOwnProperty'](i+','+j))continue;var ring={};ring[i+','+j]=!![];bomb(i,j);}}console['log'](cnt);}", "test_cases": [["1\n0 0\n2\n1 1 0 1\n1 0 0 0\n2\n1 1 0 1\n1 1 1 0\n3\n0 1 2 2 2 1\n0 2 1 2 2 1\n0 0 0 1 1 1\n4\n3 2 2 0 3 2 2 1\n1 1 0 3 1 1 3 1\n0 3 2 3 3 0 2 3\n1 1 1 1 3 2 1 3\n0", "1\n2\n1\n2\n3"]], "original": "function bomb(y,x){\n   var Y=yx[y][x][1];\n   var X=yx[y][x][0];\n   if(ring.hasOwnProperty(Y+\",\"+X)){\n      var flag=true;\n      for(var k in ring){\n         if(obj.hasOwnProperty(k))flag=false;\n         obj[k]=true;     \n      } \n      if(flag)cnt++;\n   }else{\n      ring[Y+\",\"+X]=true;\n      bomb(Y,X);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      var tile=arr.shift().split(\" \").map(Number);\n      var t=[];\n      for(var j=0;j<n;j++)t[j]=[tile.shift(),tile.shift()];\n      yx.push(t);\n   }\n   var obj={};\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         if(obj.hasOwnProperty(i+\",\"+j))continue;\n         var ring={};\n         ring[i+\",\"+j]=true;\n         bomb(i,j);\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1218, "deobfuscated": "function bomb(y, x) {\n  var Y = yx[y][x][1];\n  var X = yx[y][x][0];\n  if (ring.hasOwnProperty(Y + \",\" + X)) {\n    var flag = true;\n    for (var k in ring) {\n      if (obj.hasOwnProperty(k)) {\n        flag = false;\n      }\n      obj[k] = true;\n    }\n    if (flag) {\n      cnt++;\n    }\n  } else {\n    ring[Y + \",\" + X] = true;\n    bomb(Y, X);\n  }\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var yx = [];\n  for (var i = 0; i < n; i++) {\n    var tile = arr.shift().split(\" \").map(Number);\n    var t = [];\n    for (var j = 0; j < n; j++) {\n      t[j] = [tile.shift(), tile.shift()];\n    }\n    yx.push(t);\n  }\n  var obj = {};\n  var cnt = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = 0; j < n; j++) {\n      if (obj.hasOwnProperty(i + \",\" + j)) {\n        continue;\n      }\n      var ring = {\n        [i + \",\" + j]: true\n      };\n      bomb(i, j);\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5171001759325426, "ngram_match_score": 0.04844748560051809, "weighted_ngram_match_score": 0.1570655308899233, "syntax_match_score": 0.884393063583815, "dataflow_match_score": 0.978494623655914}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.014393152342840665, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07421875, "new_decrease_halstead_effort": 0.12049395154536136}}
{"filename": "p01415_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var NKTUVL=Arr['shift']()['split']('\\x20')['map'](Number);var N=NKTUVL[0x0];var K=NKTUVL[0x1];var T=NKTUVL[0x2];var U=NKTUVL[0x3];var V=NKTUVL[0x4];var L=NKTUVL[0x5];var time=0x0;var obj={};for(var i=0x0;i<N;i++)obj[Arr['shift']()-0x0]=!![];var fast=0x0;var stock=0x0;for(var i=0x0;i<L;i++){var now=obj['hasOwnProperty'](i)?!![]:![];if(fast==0x0&&now==!![]){time+=0x1/V;fast=T*V-0x1;continue;}if(fast==0x0&&now==![]&&stock==0x0){time+=0x1/U;continue;}if(fast==0x0&&now==![]&&stock>0x0){time+=0x1/V;fast=T*V-0x1;stock--;continue;}if(fast>0x0&&now==![]){time+=0x1/V;fast--;continue;}if(fast>0x0&&now==!![]&&stock+0x1<=K){time+=0x1/V;fast--;stock++;continue;}if(fast>0x0&&now==!![]&&stock+0x1>K){time+=0x1/V;fast=T*V-0x1;continue;}}console['log'](time['toFixed'](0x9));", "test_cases": [["1 1 1 2 3 100\n50", "49.500000000"], ["3 1 1 2 3 100\n49\n50\n51", "48.666666667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar NKTUVL=(Arr.shift()).split(\" \").map(Number);\nvar N=NKTUVL[0];\nvar K=NKTUVL[1];\nvar T=NKTUVL[2];\nvar U=NKTUVL[3];\nvar V=NKTUVL[4];\nvar L=NKTUVL[5];\nvar time=0;\nvar obj={};\nfor(var i=0;i<N;i++)obj[Arr.shift()-0]=true;\nvar fast=0;\nvar stock=0;\nfor(var i=0;i<L;i++){\n   var now=(obj.hasOwnProperty(i))?true:false;\n   if(fast==0 && now==true){time+=1/V;fast=(T*V-1);continue;}\n   if(fast==0 && now==false && stock==0){time+=1/U;continue;}\n   if(fast==0 && now==false && stock>0){time+=1/V;fast=(T*V-1);stock--;continue;}\n   if(fast>0 && now==false){time+=1/V;fast--;continue;}\n   if(fast>0 && now==true && stock+1<=K){time+=1/V;fast--;stock++;continue;}\n   if(fast>0 && now==true && stock+1>K){time+=1/V;fast=(T*V-1);continue;}\n}\nconsole.log(time.toFixed(9));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1219, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar NKTUVL = Arr.shift().split(\" \").map(Number);\nvar N = NKTUVL[0];\nvar K = NKTUVL[1];\nvar T = NKTUVL[2];\nvar U = NKTUVL[3];\nvar V = NKTUVL[4];\nvar L = NKTUVL[5];\nvar time = 0;\nvar obj = {};\nfor (var i = 0; i < N; i++) {\n  obj[Arr.shift() - 0] = true;\n}\nvar fast = 0;\nvar stock = 0;\nfor (var i = 0; i < L; i++) {\n  var now = obj.hasOwnProperty(i) ? true : false;\n  if (fast == 0 && now == true) {\n    time += 1 / V;\n    fast = T * V - 1;\n    continue;\n  }\n  if (fast == 0 && now == false && stock == 0) {\n    time += 1 / U;\n    continue;\n  }\n  if (fast == 0 && now == false && stock > 0) {\n    time += 1 / V;\n    fast = T * V - 1;\n    stock--;\n    continue;\n  }\n  if (fast > 0 && now == false) {\n    time += 1 / V;\n    fast--;\n    continue;\n  }\n  if (fast > 0 && now == true && stock + 1 <= K) {\n    time += 1 / V;\n    fast--;\n    stock++;\n    continue;\n  }\n  if (fast > 0 && now == true && stock + 1 > K) {\n    time += 1 / V;\n    fast = T * V - 1;\n    continue;\n  }\n}\nconsole.log(time.toFixed(9));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46372342636914565, "ngram_match_score": 0.008041498050485194, "weighted_ngram_match_score": 0.033022420192054855, "syntax_match_score": 0.8138297872340425, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.010777455491221, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07770270270270274, "new_decrease_halstead_effort": 0.19898039609068252}}
{"filename": "p01531_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('');var x='';arr['forEach'](function(v){if(v=='0')x+='w';if(v=='1')x+='';if(v=='2')x+='k';if(v=='3')x+='s';if(v=='4')x+='t';if(v=='5')x+='n';if(v=='6')x+='h';if(v=='7')x+='m';if(v=='8')x+='y';if(v=='9')x+='r';if(v=='T')x+='a';if(v=='L')x+='i';if(v=='U')x+='u';if(v=='R')x+='e';if(v=='D')x+='o';});x=x['replace'](/wu/g,'nn');console['log'](x);", "test_cases": [["5R2D", "neko"], ["8U9U6U0T", "yuruhuwa"], ["9L4U7R1L2D0U4R3U4D", "ritumeikonntesuto"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\");\nvar x=\"\";\narr.forEach(function(v){\nif(v==\"0\")x+=\"w\";\nif(v==\"1\")x+=\"\";\nif(v==\"2\")x+=\"k\";\nif(v==\"3\")x+=\"s\";\nif(v==\"4\")x+=\"t\";\nif(v==\"5\")x+=\"n\";\nif(v==\"6\")x+=\"h\";\nif(v==\"7\")x+=\"m\";\nif(v==\"8\")x+=\"y\";\nif(v==\"9\")x+=\"r\";\nif(v==\"T\")x+=\"a\";\nif(v==\"L\")x+=\"i\";\nif(v==\"U\")x+=\"u\";\nif(v==\"R\")x+=\"e\";\nif(v==\"D\")x+=\"o\";\n});\nx=x.replace(/wu/g,\"nn\");\nconsole.log(x);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1220, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\");\nvar x = \"\";\narr.forEach(function (v) {\n  if (v == \"0\") {\n    x += \"w\";\n  }\n  if (v == \"1\") {\n    x += \"\";\n  }\n  if (v == \"2\") {\n    x += \"k\";\n  }\n  if (v == \"3\") {\n    x += \"s\";\n  }\n  if (v == \"4\") {\n    x += \"t\";\n  }\n  if (v == \"5\") {\n    x += \"n\";\n  }\n  if (v == \"6\") {\n    x += \"h\";\n  }\n  if (v == \"7\") {\n    x += \"m\";\n  }\n  if (v == \"8\") {\n    x += \"y\";\n  }\n  if (v == \"9\") {\n    x += \"r\";\n  }\n  if (v == \"T\") {\n    x += \"a\";\n  }\n  if (v == \"L\") {\n    x += \"i\";\n  }\n  if (v == \"U\") {\n    x += \"u\";\n  }\n  if (v == \"R\") {\n    x += \"e\";\n  }\n  if (v == \"D\") {\n    x += \"o\";\n  }\n});\nx = x.replace(/wu/g, \"nn\");\nconsole.log(x);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46958989571408727, "ngram_match_score": 0.006995404651729864, "weighted_ngram_match_score": 0.04823492650393878, "syntax_match_score": 0.8231292517006803, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01620_1", "type": "JavaScript", "obfuscated": "var abc='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'['split']('');var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');while(!![]){var n=Arr['shift']()-0x0;if(n==0x0)break;var k=Arr['shift']()['split']('\\x20')['map'](Number);var arr=Arr['shift']()['split']('');var j=0x0;for(var i=0x0;i<arr['length'];i++){var num=abc['indexOf'](arr[i])-k[i%k['length']];if(num<0x0)num+=abc['length'];arr[i]=abc[num];}console['log'](arr['join'](''));}", "test_cases": [["2\n1 2\nbdd\n3\n3 2 1\nDDDA\n5\n3 1 4 5 3\ndcdkIlkP\n0", "abc\nABCx\nabZfFijL"]], "original": "var abc=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var k=(Arr.shift()).split(\" \").map(Number);\n   var arr=(Arr.shift()).split(\"\");\n   var j=0;\n   for(var i=0;i<arr.length;i++){\n      var num=abc.indexOf(arr[i])-k[i%k.length];\n      if(num<0)num+=abc.length;\n      arr[i]=abc[num];\n   }\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1221, "deobfuscated": "var abc = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var n = Arr.shift() - 0;\n  if (n == 0) {\n    break;\n  }\n  var k = Arr.shift().split(\" \").map(Number);\n  var arr = Arr.shift().split(\"\");\n  var j = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var num = abc.indexOf(arr[i]) - k[i % k.length];\n    if (num < 0) {\n      num += abc.length;\n    }\n    arr[i] = abc[num];\n  }\n  console.log(arr.join(\"\"));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.46743199175940614, "ngram_match_score": 0.02632054780919334, "weighted_ngram_match_score": 0.07870153687549011, "syntax_match_score": 0.7647058823529411, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006214032920622392, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.02238805970149249, "new_decrease_halstead_effort": 0.15452114367992664}}
{"filename": "p01688_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var Arr=input['trim']()['split']('\\x0a');var D=Arr['shift']()-0x0;var x=Arr['shift']()-0x0;var X=[];for(var i=0x0;i<x;i++){var v=Arr['shift']()['split']('\\x20');if(v[0x0]=='D')X['push'](v[0x1]-0x0);}X['sort'](function(a,b){return b-a;});var y=Arr['shift']()-0x0;var Y=[];for(var i=0x0;i<y;i++){var v=Arr['shift']()['split']('\\x20');if(v[0x0]=='DD')Y['push'](v[0x1]-0x0);}Y['sort'](function(a,b){return b-a;});var max=0x0;for(var x=0x0;x<=X['length'];x++){for(var y=0x0;y<=Y['length'];y++){if(D<x+y*0x2)break;var sum=0x0;for(var i=0x0;i<x;i++)sum+=X[i];for(var i=0x0;i<y;i++)sum+=Y[i];max=Math['max'](max,sum);}}console['log'](max);", "test_cases": [["2\n3\nD 30\nD 50\nD 20\n0", "80"], ["4\n0\n2\nDB 60\nDD 40", "40"], ["13\n2\nC 15\nA 23\n2\nBD 42\nEE 20", "0"], ["3\n3\nD 10\nD 15\nD 45\n1\nDD 30", "75"], ["3\n3\nD 25\nD 20\nD 25\n1\nDD 30", "70"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar D=Arr.shift()-0;\nvar x=Arr.shift()-0;\nvar X=[];\nfor(var i=0;i<x;i++){\n   var v=Arr.shift().split(\" \");\n   if(v[0]==\"D\")X.push(v[1]-0);\n}\nX.sort(function(a,b){return b-a;});\nvar y=Arr.shift()-0;\nvar Y=[];\nfor(var i=0;i<y;i++){\n   var v=Arr.shift().split(\" \");\n   if(v[0]==\"DD\")Y.push(v[1]-0);\n}\nY.sort(function(a,b){return b-a;});\nvar max=0;\nfor(var x=0;x<=X.length;x++){\n   for(var y=0;y<=Y.length;y++){\n      if(D<x+(y*2))break;\n      var sum=0;\n      for(var i=0;i<x;i++)sum+=X[i];\n      for(var i=0;i<y;i++)sum+=Y[i];\n      max=Math.max(max,sum);\n   }\n}\nconsole.log(max);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1222, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar Arr = input.trim().split(\"\\n\");\nvar D = Arr.shift() - 0;\nvar x = Arr.shift() - 0;\nvar X = [];\nfor (var i = 0; i < x; i++) {\n  var v = Arr.shift().split(\" \");\n  if (v[0] == \"D\") {\n    X.push(v[1] - 0);\n  }\n}\nX.sort(function (a, b) {\n  return b - a;\n});\nvar y = Arr.shift() - 0;\nvar Y = [];\nfor (var i = 0; i < y; i++) {\n  var v = Arr.shift().split(\" \");\n  if (v[0] == \"DD\") {\n    Y.push(v[1] - 0);\n  }\n}\nY.sort(function (a, b) {\n  return b - a;\n});\nvar max = 0;\nfor (var x = 0; x <= X.length; x++) {\n  for (var y = 0; y <= Y.length; y++) {\n    if (D < x + y * 2) {\n      break;\n    }\n    var sum = 0;\n    for (var i = 0; i < x; i++) {\n      sum += X[i];\n    }\n    for (var i = 0; i < y; i++) {\n      sum += Y[i];\n    }\n    max = Math.max(max, sum);\n  }\n}\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4805866598376315, "ngram_match_score": 0.011396242654408128, "weighted_ngram_match_score": 0.04545332067272619, "syntax_match_score": 0.8654970760233918, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02375160634829454}}
{"filename": "p01760_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var TD=arr['shift']()['split']('\\x20')['map'](Number);var T=TD[0x0];var D=TD[0x1];var t=arr['shift']()['split']('\\x20')['map'](Number);var tA=t[0x0];var tB=t[0x1];var d=arr['shift']()['split']('\\x20')['map'](Number);var dA=d[0x0];var dB=d[0x1];var min=Infinity;var i=0x0;while(!![]){var vA=i*dA;if(vA>D)break;var j=0x0;while(!![]){var vB=j*dB;if(vA+vB>D)break;if(vA+vB!=0x0){var c=T-(tA*vA+tB*vB)/(vA+vB);min=Math['min'](min,Math['abs'](c));}j++;}i++;}console['log'](min['toFixed'](0xa));", "test_cases": [["40 1000\n80 20\n100 100", "0.0000000000"], ["38 1000\n80 20\n100 95", "0.2222222222"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar TD=arr.shift().split(\" \").map(Number);\nvar T=TD[0];\nvar D=TD[1];\nvar t=arr.shift().split(\" \").map(Number);\nvar tA=t[0];\nvar tB=t[1];\nvar d=arr.shift().split(\" \").map(Number);\nvar dA=d[0];\nvar dB=d[1];\nvar min=Infinity;\nvar i=0;\nwhile(true){\n   var vA=i*dA;\n   if(vA>D)break;\n   var j=0;\n   while(true){\n      var vB=j*dB;\n      if(vA+vB>D)break;\n      if(vA+vB!=0){\n         var c=T-(tA * vA + tB * vB) / (vA + vB);\n         min=Math.min(min,Math.abs(c));\n      }\n      j++;\n   }\n   i++;\n}\nconsole.log(min.toFixed(10));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1223, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar TD = arr.shift().split(\" \").map(Number);\nvar T = TD[0];\nvar D = TD[1];\nvar t = arr.shift().split(\" \").map(Number);\nvar tA = t[0];\nvar tB = t[1];\nvar d = arr.shift().split(\" \").map(Number);\nvar dA = d[0];\nvar dB = d[1];\nvar min = Infinity;\nvar i = 0;\nwhile (true) {\n  var vA = i * dA;\n  if (vA > D) {\n    break;\n  }\n  var j = 0;\n  while (true) {\n    var vB = j * dB;\n    if (vA + vB > D) {\n      break;\n    }\n    if (vA + vB != 0) {\n      var c = T - (tA * vA + tB * vB) / (vA + vB);\n      min = Math.min(min, Math.abs(c));\n    }\n    j++;\n  }\n  i++;\n}\nconsole.log(min.toFixed(10));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5995967274744558, "ngram_match_score": 0.1394741252864374, "weighted_ngram_match_score": 0.3107646364632377, "syntax_match_score": 0.9481481481481482, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006345343568165074, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.030612244897959218, "new_decrease_halstead_effort": 0.14193620875364688}}
{"filename": "p01761_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var book=[];for(var i=0x0;i<n;i++)book[i]=arr['shift']();var q=arr['shift']()-0x0;for(var i=0x0;i<q;i++){if(i!=0x0)console['log']('');var ans=[];var v=arr['shift']()['split']('\\x20');var a=v[0x0];var b=v[0x1];var c=v[0x2]!='*'?new Date(v[0x2])['getTime']():'*';var d=v[0x3]!='*'?new Date(v[0x3])['getTime']():'*';book['forEach'](function(V){V=V['split']('\\x20');var A=V[0x0];var B=V[0x1];var C=new Date(V[0x2])['getTime']();var flag=!![];if(a!='*'){var regex=new RegExp(a);if(regex['test'](A)==![])flag=![];}if(b!='*'){var regex=new RegExp(b);if(regex['test'](B)==![])flag=![];}if(c!='*'){if(c>C)flag=![];}if(d!='*'){if(d<C)flag=![];}if(flag)ans['push'](A);});ans['forEach'](function(value){console['log'](value);});}", "test_cases": [["6\nantbook iwiWataKitamasa 2012/01/28\nhogebook foo 2000/01/01\nhugabook bar 2000/01/01\ncheeterbook chokudai 2012/09/29\naojbook YutakaWatanabe 2014/06/28\npiyobook buz 2000/01/01\n4\na * * *\n* chokudai * *\n* Chokudai * *\n* * 2014/01/01 2014/12/31", "antbook\nhugabook\naojbook\n\ncheeterbook\n\n\naojbook"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar book=[];\nfor(var i=0;i<n;i++)book[i]=arr.shift();\nvar q=arr.shift()-0;\nfor(var i=0;i<q;i++){\n   if(i!=0)console.log(\"\");\n   var ans=[];\n   var v=arr.shift().split(\" \");\n   var a=v[0];\n   var b=v[1];\n   var c=(v[2]!=\"*\")?(new Date(v[2])).getTime():\"*\";\n   var d=(v[3]!=\"*\")?(new Date(v[3])).getTime():\"*\";\n   book.forEach(function(V){\n      V=V.split(\" \");\n      var A=V[0];\n      var B=V[1];\n      var C=(new Date(V[2])).getTime();\n      var flag=true;\n      if(a!=\"*\"){\n         var regex = new RegExp(a);\n         if(regex.test(A)==false)flag=false;\n      }\n      if(b!=\"*\"){\n         var regex = new RegExp(b);\n         if(regex.test(B)==false)flag=false;\n      }\n      if(c!=\"*\"){\n         if(c>C)flag=false;\n      }\n      if(d!=\"*\"){\n         if(d<C)flag=false;\n      }\n      if(flag)ans.push(A);\n   });\n   ans.forEach(function(value){\n       console.log(value);\n   });\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1224, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar book = [];\nfor (var i = 0; i < n; i++) {\n  book[i] = arr.shift();\n}\nvar q = arr.shift() - 0;\nfor (var i = 0; i < q; i++) {\n  if (i != 0) {\n    console.log(\"\");\n  }\n  var ans = [];\n  var v = arr.shift().split(\" \");\n  var a = v[0];\n  var b = v[1];\n  var c = v[2] != \"*\" ? new Date(v[2]).getTime() : \"*\";\n  var d = v[3] != \"*\" ? new Date(v[3]).getTime() : \"*\";\n  book.forEach(function (V) {\n    V = V.split(\" \");\n    var A = V[0];\n    var B = V[1];\n    var C = new Date(V[2]).getTime();\n    var flag = true;\n    if (a != \"*\") {\n      var regex = new RegExp(a);\n      if (regex.test(A) == false) {\n        flag = false;\n      }\n    }\n    if (b != \"*\") {\n      var regex = new RegExp(b);\n      if (regex.test(B) == false) {\n        flag = false;\n      }\n    }\n    if (c != \"*\") {\n      if (c > C) {\n        flag = false;\n      }\n    }\n    if (d != \"*\") {\n      if (d < C) {\n        flag = false;\n      }\n    }\n    if (flag) {\n      ans.push(A);\n    }\n  });\n  ans.forEach(function (value) {\n    console.log(value);\n  });\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5083405414244953, "ngram_match_score": 0.05687662980316715, "weighted_ngram_match_score": 0.17553766859623537, "syntax_match_score": 0.8009478672985783, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.012107961032659098, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.052631578947368474, "new_decrease_halstead_effort": 0.1437525931790109}}
{"filename": "p01772_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var str=input['trim']();var a=![];var ans='';for(var i=0x0;i<str['length'];i++){if(str[i]=='A')a=!![];if(str[i]=='Z'&&a==!![]){a=![];ans+='AZ';}}if(ans=='')ans=-0x1;console['log'](ans);", "test_cases": [["AIZUNYANPEROPERO", "AZ"], ["AZAZ", "AZAZ"], ["ZDDYAZAWABDDZAZPIDDA", "AZAZAZ"], ["ZZZZAAAAAA", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str=input.trim();\nvar a=false;\nvar ans=\"\";\nfor(var i=0;i<str.length;i++){\n   if(str[i]==\"A\")a=true;\n   if(str[i]==\"Z\" && a==true){a=false;ans+=\"AZ\";}\n}\nif(ans==\"\")ans=-1;\nconsole.log(ans);", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1225, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar str = input.trim();\nvar a = false;\nvar ans = \"\";\nfor (var i = 0; i < str.length; i++) {\n  if (str[i] == \"A\") {\n    a = true;\n  }\n  if (str[i] == \"Z\" && a == true) {\n    a = false;\n    ans += \"AZ\";\n  }\n}\nif (ans == \"\") {\n  ans = -1;\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5013538046457582, "ngram_match_score": 0.018837132611996946, "weighted_ngram_match_score": 0.06991141930436898, "syntax_match_score": 0.9166666666666666, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.011584719415416389, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.11627906976744184, "new_decrease_halstead_effort": 0.28285074297612456}}
{"filename": "p01846_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var data=input['trim']()['split']('\\x0a');while(!![]){var str=data['shift']();if(str=='#')break;str=str['replace'](/\\d/g,function(v){return'n'['repeat'](v-0x0);});var arr=str['split']('/');arr=arr['map'](v=>v['split'](''));var [a,b,c,d]=data['shift']()['split']('\\x20')['map'](Number);arr[a-0x1][b-0x1]='n';arr[c-0x1][d-0x1]='b';arr=arr['map'](v=>v['join'](''));str=arr['join']('/');str=str['replace'](/n+/g,function(v){return v['length'];});console['log'](str);}", "test_cases": [["b1/1b\n1 1 1 2\nb5/bbbbbb\n2 4 1 4\nb2b2b/7\n1 4 2 4\n#", "1b/1b\nb2b2/bbb1bb\nb5b/3b3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar data = input.trim().split(\"\\n\");\nwhile (true) {\n   var str = data.shift();\n   if(str==\"#\")break;\n   str=str.replace(/\\d/g,function(v){\n      return \"n\".repeat(v-0);\n   });\n   var arr = str.split(\"/\");\n   arr = arr.map(v=> v.split(\"\"));\n   var [a,b,c,d] = data.shift().split(\" \").map(Number);\n   arr[a-1][b-1]=\"n\";\n   arr[c-1][d-1]=\"b\";\n   arr = arr.map(v=> v.join(\"\"));\n   str = arr.join(\"/\");\n   str=str.replace(/n+/g,function(v){\n      return v.length;\n   });\n   console.log(str);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1226, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar data = input.trim().split(\"\\n\");\nwhile (true) {\n  var str = data.shift();\n  if (str == \"#\") {\n    break;\n  }\n  str = str.replace(/\\d/g, function (v) {\n    return \"n\".repeat(v - 0);\n  });\n  var arr = str.split(\"/\");\n  arr = arr.map(v => v.split(\"\"));\n  var [a, b, c, d] = data.shift().split(\" \").map(Number);\n  arr[a - 1][b - 1] = \"n\";\n  arr[c - 1][d - 1] = \"b\";\n  arr = arr.map(v => v.join(\"\"));\n  str = arr.join(\"/\");\n  str = str.replace(/n+/g, function (v) {\n    return v.length;\n  });\n  console.log(str);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6966588989585546, "ngram_match_score": 0.29424492065097213, "weighted_ngram_match_score": 0.525177560429148, "syntax_match_score": 0.9672131147540983, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.021582733812949617, "new_decrease_halstead_effort": 0.19875162573813443}}
{"filename": "p01872_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var str=input['trim']();var ans='';for(var j=0x0;j<=0x9;j++){var arr=str['replace'](/\\?/,j)['split']('')['map'](Number)['reverse']();var sum=0x0;for(var i=0x1;i<=0x6;i++)sum+=arr[i]*(i+0x1);for(var i=0x7;i<=0xb;i++)sum+=arr[i]*(i-0x5);var p=0xb-sum%0xb;if(sum%0xb<=0x1)p=0x0;ans+=p==arr[0x0]?j:'';}if(ans['length']==0x1)console['log'](ans[0x0]);else console['log']('MULTIPLE');", "test_cases": [["?12345678901", "4"], ["2016030810?0", "MULTIPLE"], ["20160308100?", "0"], ["0012300?0450", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str = input.trim();\nvar ans = \"\";\nfor(var j=0;j<=9;j++){\n   var arr = str.replace(/\\?/,j).split(\"\").map(Number).reverse();\n   var sum = 0;\n   for(var i=1;i<=6;i++) sum+=arr[i]*(i+1);\n   for(var i=7;i<=11;i++)sum+=arr[i]*(i-5);\n   var p =11-(sum%11);\n   if(sum%11<=1)p=0;\n   ans += (p==arr[0])? j : \"\";\n}\nif(ans.length==1)console.log(ans[0]);\nelse console.log(\"MULTIPLE\");\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1227, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar str = input.trim();\nvar ans = \"\";\nfor (var j = 0; j <= 9; j++) {\n  var arr = str.replace(/\\?/, j).split(\"\").map(Number).reverse();\n  var sum = 0;\n  for (var i = 1; i <= 6; i++) {\n    sum += arr[i] * (i + 1);\n  }\n  for (var i = 7; i <= 11; i++) {\n    sum += arr[i] * (i - 5);\n  }\n  var p = 11 - sum % 11;\n  if (sum % 11 <= 1) {\n    p = 0;\n  }\n  ans += p == arr[0] ? j : \"\";\n}\nif (ans.length == 1) {\n  console.log(ans[0]);\n} else {\n  console.log(\"MULTIPLE\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5909742619620504, "ngram_match_score": 0.13652810277425106, "weighted_ngram_match_score": 0.3758837965590989, "syntax_match_score": 0.8514851485148515, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01898_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [m,n]=arr['shift']()['split']('\\x20')['map'](Number);var yx=[];for(var i=0x0;i<m;i++)yx['push'](arr['shift']()['split'](''));var memo=[];for(var i=0x0;i<m;i++){for(var j=0x0;j<n;j++){if(i==0x0)memo['push']([i,j]);if(yx[i][j]=='o'){[[0x0,-0x1],[0x0,0x1]]['forEach'](v=>{var y=i+v[0x0];var x=j+v[0x1];if((y<0x0||x<0x0||y>=m||x>=n)==![])memo['push']([y,x]);});}else if(yx[i][j]=='x'){for(var ii=-0x1;ii<=0x1;ii++)for(var jj=-0x1;jj<=0x1;jj++){if(ii==0x0&&jj==0x0)continue;var y=i+ii;var x=j+jj;if(y<0x0||x<0x0||y>=m||x>=n)continue;memo['push']([y,x]);}}}}memo['forEach'](v=>{yx[v[0x0]][v[0x1]]='b';});console['log'](yx['join']('')['replace'](/[^-]/g,'')['length']);", "test_cases": [["5 5\n--o--\n--xo-\n--x--\no---x\n--xoo", "3"], ["2 6\n--oooo\nx--o--", "1"], ["3 5\n-----\n-----\n-----", "10"], ["4 6\no-oxoo\noo-ooo\noooxo-\no-ooox", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar [m,n]=arr.shift().split(\" \").map(Number);\nvar yx=[];\nfor(var i=0;i<m;i++)yx.push(arr.shift().split(\"\"));\nvar memo=[];\nfor(var i=0;i<m;i++){\n   for(var j=0;j<n;j++){\n      if(i==0)memo.push([i,j]);\n      if(yx[i][j]==\"o\"){\n         [[0,-1],[0,1]].forEach(v=>{\n            var y=i+v[0];\n            var x=j+v[1];\n            if((y<0 || x<0 || y>=m || x>=n)==false)memo.push([y,x]);\n         });\n      }else if(yx[i][j]==\"x\"){\n         for(var ii=-1;ii<=1;ii++)for(var jj=-1;jj<=1;jj++){\n            if(ii==0 && jj==0)continue;\n            var y=i+ii;\n            var x=j+jj;\n            if(y<0 || x<0 || y>=m || x>=n)continue;\n            memo.push([y,x]);\n         }\n      }\n   }\n}\nmemo.forEach(v=>{\n   yx[v[0]][v[1]]=\"b\";\n});\nconsole.log(yx.join(\"\").replace(/[^-]/g,\"\").length);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1228, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [m, n] = arr.shift().split(\" \").map(Number);\nvar yx = [];\nfor (var i = 0; i < m; i++) {\n  yx.push(arr.shift().split(\"\"));\n}\nvar memo = [];\nfor (var i = 0; i < m; i++) {\n  for (var j = 0; j < n; j++) {\n    if (i == 0) {\n      memo.push([i, j]);\n    }\n    if (yx[i][j] == \"o\") {\n      [[0, -1], [0, 1]].forEach(v => {\n        var y = i + v[0];\n        var x = j + v[1];\n        if ((y < 0 || x < 0 || y >= m || x >= n) == false) {\n          memo.push([y, x]);\n        }\n      });\n    } else if (yx[i][j] == \"x\") {\n      for (var ii = -1; ii <= 1; ii++) {\n        for (var jj = -1; jj <= 1; jj++) {\n          if (ii == 0 && jj == 0) {\n            continue;\n          }\n          var y = i + ii;\n          var x = j + jj;\n          if (y < 0 || x < 0 || y >= m || x >= n) {\n            continue;\n          }\n          memo.push([y, x]);\n        }\n      }\n    }\n  }\n}\nmemo.forEach(v => {\n  yx[v[0]][v[1]] = \"b\";\n});\nconsole.log(yx.join(\"\").replace(/[^-]/g, \"\").length);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4984356651242654, "ngram_match_score": 0.02511162122269127, "weighted_ngram_match_score": 0.0859779780498805, "syntax_match_score": 0.8826530612244898, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01899_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [n,d]=arr['shift']()['split']('\\x20')['map'](Number);var p=arr['shift']()['split']('\\x20')['map'](Number);var sum=0x0;p['forEach'](v=>{sum+=Math['max'](0x0,v-d);});console['log'](sum==0x0?'kusoge':sum);", "test_cases": [["5 130\n130 170 100 120 140", "50"], ["3 100\n100 90 65", "kusoge"], ["6 210\n300 270 400 330 250 370", "660"], ["4 540\n100 460 320 280", "kusoge"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar [n,d]=arr.shift().split(\" \").map(Number);\nvar p=arr.shift().split(\" \").map(Number);\nvar sum=0;\np.forEach(v=>{\n   sum+=Math.max(0,v-d);\n});\nconsole.log((sum==0)?\"kusoge\":sum);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1229, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [n, d] = arr.shift().split(\" \").map(Number);\nvar p = arr.shift().split(\" \").map(Number);\nvar sum = 0;\np.forEach(v => {\n  sum += Math.max(0, v - d);\n});\nconsole.log(sum == 0 ? \"kusoge\" : sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5098968694635861, "ngram_match_score": 0.03878534504958557, "weighted_ngram_match_score": 0.09035437161072929, "syntax_match_score": 0.9104477611940298, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01916_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var s=arr[0x0]['split']('');for(var i=0x0;i<s['length'];i++){for(var j=i+0x1;j<s['length'];j++){if(s[i]==s[j]){s[i]='';s[j]='';break;}}}var n=s['join']('')['length'];if(n==0x0||n==0x1)console['log'](0x0);else if(n%0x2==0x0)console['log'](n/0x2);else console['log']((n-0x1)/0x2);", "test_cases": [["hcpc", "1"], ["ritscamp", "4"], ["nakawawakana", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar s=arr[0].split(\"\");\n\nfor(var i=0;i<s.length;i++){\nfor(var j=i+1;j<s.length;j++){\n   if(s[i]==s[j]){\n      s[i]=\"\";\n      s[j]=\"\";\n      break;\n   }\n}\n}\nvar n=s.join(\"\").length;\nif(n==0 || n==1)console.log(0);\nelse if(n%2==0)console.log(n/2);\nelse console.log((n-1)/2);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1230, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar s = arr[0].split(\"\");\nfor (var i = 0; i < s.length; i++) {\n  for (var j = i + 1; j < s.length; j++) {\n    if (s[i] == s[j]) {\n      s[i] = \"\";\n      s[j] = \"\";\n      break;\n    }\n  }\n}\nvar n = s.join(\"\").length;\nif (n == 0 || n == 1) {\n  console.log(0);\n} else if (n % 2 == 0) {\n  console.log(n / 2);\n} else {\n  console.log((n - 1) / 2);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5866495990739998, "ngram_match_score": 0.09798779035904147, "weighted_ngram_match_score": 0.3023740467971729, "syntax_match_score": 0.946236559139785, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01923_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){if(arr[0x0]=='0\\x200')break;var nm=arr['shift']()['split']('\\x20')['map'](Number);var n=nm[0x0];var m=nm[0x1];var max=[];for(var i=0x0;i<m;i++)max[i]=0x0;for(var i=0x0;i<n;i++){var dv=arr['shift']()['split']('\\x20')['map'](Number);var d=dv[0x0]-0x1;var v=dv[0x1];if(max[d]<v)max[d]=v;}var sum=0x0;for(var i=0x0;i<m;i++)sum+=max[i];console['log'](sum);}", "test_cases": [["5 3\n1 1\n2 3\n3 2\n3 5\n2 1\n4 2\n1 7\n2 1\n1 3\n1 5\n6 1\n1 3\n1 2\n1 8\n1 2\n1 7\n1 6\n20 9\n4 10\n2 4\n5 3\n6 6\n6 3\n7 4\n8 10\n4 6\n7 5\n1 8\n5 7\n1 5\n6 6\n9 9\n5 8\n6 7\n1 4\n6 4\n7 10\n3 5\n19 6\n4 1\n6 5\n5 10\n1 10\n3 10\n4 6\n2 3\n5 4\n2 10\n1 8\n3 4\n3 1\n5 4\n1 10\n1 3\n5 6\n5 2\n1 10\n2 3\n0 0", "9\n8\n8\n71\n51"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   if (arr[0] == \"0 0\") break;\n   var nm = arr.shift().split(\" \").map(Number);\n   var n = nm[0];\n   var m = nm[1];\n   var max = [];\n   for (var i = 0; i < m; i++) max[i] = 0;\n   for (var i = 0; i < n; i++) {\n      var dv = arr.shift().split(\" \").map(Number);\n      var d = dv[0] - 1;\n      var v = dv[1];\n      if (max[d] < v) max[d] = v;\n   }\n   var sum = 0;\n   for (var i = 0; i < m; i++) sum += max[i];\n   console.log(sum);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1231, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (arr[0] == \"0 0\") {\n    break;\n  }\n  var nm = arr.shift().split(\" \").map(Number);\n  var n = nm[0];\n  var m = nm[1];\n  var max = [];\n  for (var i = 0; i < m; i++) {\n    max[i] = 0;\n  }\n  for (var i = 0; i < n; i++) {\n    var dv = arr.shift().split(\" \").map(Number);\n    var d = dv[0] - 1;\n    var v = dv[1];\n    if (max[d] < v) {\n      max[d] = v;\n    }\n  }\n  var sum = 0;\n  for (var i = 0; i < m; i++) {\n    sum += max[i];\n  }\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8889194711138159, "ngram_match_score": 0.7864196381901201, "weighted_ngram_match_score": 0.8533703957978538, "syntax_match_score": 0.9158878504672897, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.004878809520081129, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.01935483870967747, "new_decrease_halstead_effort": 0.11524014336917554}}
{"filename": "p01925_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){if(arr[0x0]=='0\\x200')break;var nm=arr['shift']()['split']('\\x20')['map'](Number);var point=[];for(var i=0x0;i<nm[0x0];i++)point[i]=[0x0,0x0];for(var i=0x0;i<nm[0x1];i++){var c=arr['shift']()['split']('\\x20')['map'](Number);var s=c['shift']();var k=c['shift']();if(k==0x1)point[c[0x0]-0x1][0x0]+=s;c['forEach'](function(v,i){point[v-0x1][0x1]+=s;});}var max=0x0;for(var i=0x0;i<nm[0x0];i++){for(var j=0x0;j<nm[0x0];j++){if(i==j)continue;max=Math['max'](max,point[i][0x1]-point[j][0x0]);}}console['log'](max+0x1);}", "test_cases": [["3 2\n5 2 1 3\n8 2 2 3\n2 3\n8 2 1 2\n3 1 1\n5 1 2\n2 5\n100 1 1\n100 1 1\n100 1 1\n100 1 1\n100 1 1\n3 4\n5 1 1\n5 1 2\n100 2 1 3\n100 2 2 3\n0 0", "14\n11\n501\n196"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   if (arr[0] == \"0 0\") break;\n   var nm = arr.shift().split(\" \").map(Number);\n   var point = [];\n   for (var i = 0; i < nm[0]; i++) point[i] = [0, 0];\n   for (var i = 0; i < nm[1]; i++) {\n      var c = arr.shift().split(\" \").map(Number);\n      var s = c.shift();\n      var k = c.shift();\n      if (k == 1) point[c[0] - 1][0] += s;\n      c.forEach(function(v, i) {\n         point[v - 1][1] += s;\n      });\n   }\n   var max = 0;\n   for (var i = 0; i < nm[0]; i++) {\n      for (var j = 0; j < nm[0]; j++) {\n         if (i == j) continue;\n         max = Math.max(max, point[i][1] - point[j][0]);\n      }\n   }\n   console.log(max + 1);\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1232, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  if (arr[0] == \"0 0\") {\n    break;\n  }\n  var nm = arr.shift().split(\" \").map(Number);\n  var point = [];\n  for (var i = 0; i < nm[0]; i++) {\n    point[i] = [0, 0];\n  }\n  for (var i = 0; i < nm[1]; i++) {\n    var c = arr.shift().split(\" \").map(Number);\n    var s = c.shift();\n    var k = c.shift();\n    if (k == 1) {\n      point[c[0] - 1][0] += s;\n    }\n    c.forEach(function (v, i) {\n      point[v - 1][1] += s;\n    });\n  }\n  var max = 0;\n  for (var i = 0; i < nm[0]; i++) {\n    for (var j = 0; j < nm[0]; j++) {\n      if (i == j) {\n        continue;\n      }\n      max = Math.max(max, point[i][1] - point[j][0]);\n    }\n  }\n  console.log(max + 1);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8991884719002798, "ngram_match_score": 0.8127948005666561, "weighted_ngram_match_score": 0.8748681779435541, "syntax_match_score": 0.9090909090909091, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.014634146341463428, "new_decrease_halstead_effort": 0.07418267528918332}}
{"filename": "p01938_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var s=input['trim']()['split']('');var abc='ABCDEFGHIJKLMNOPQRSTUVWXYZ'['split']('');s=s['map'](v=>abc['indexOf'](v));var cnt=0x0;var memo=0x0;s['forEach'](v=>{if(memo>=v)cnt++;memo=v;});console['log'](cnt);", "test_cases": [["AIZU", "2"], ["HOKKAIDO", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim().split(\"\");\nvar abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\ns = s.map(v=> abc.indexOf(v));\nvar cnt = 0;\nvar memo = 0;\ns.forEach(v=>{\n   if(memo >= v)cnt++;\n   memo = v;\n});\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1233, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar s = input.trim().split(\"\");\nvar abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\ns = s.map(v => abc.indexOf(v));\nvar cnt = 0;\nvar memo = 0;\ns.forEach(v => {\n  if (memo >= v) {\n    cnt++;\n  }\n  memo = v;\n});\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.716031716704888, "ngram_match_score": 0.4237613812738638, "weighted_ngram_match_score": 0.5631725030895478, "syntax_match_score": 0.8771929824561403, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01967_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');arr=arr['map'](v=>v['split']('\\x20')['map'](Number));var n=arr['shift']();var c=arr['shift']();var q=arr['shift']();var apple=[];for(var i=0x0;i<=n;i++)apple[i]=0x0;var ans=0x0;for(var i=0x0;i<arr['length'];i++){var [t,x,d]=arr[i];if(t==0x1){apple[x]+=d;if(c[x-0x1]<apple[x]){ans=x;break;}}else{if(apple[x]<d){ans=x;break;}else{apple[x]-=d;}}}console['log'](ans);", "test_cases": [["2\n3 3\n4\n1 1 2\n1 2 3\n2 1 3\n2 2 3", "1"], ["2\n3 3\n4\n1 1 3\n2 1 2\n1 2 3\n1 1 3", "1"], ["3\n3 4 5\n4\n1 1 3\n1 2 3\n1 3 5\n2 2 2", "0"], ["6\n28 56 99 3 125 37\n10\n1 1 10\n1 1 14\n1 3 90\n1 5 10\n2 3 38\n2 1 5\n1 3 92\n1 6 18\n2 5 9\n2 1 4", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\narr=arr.map(v=>v.split(\" \").map(Number));\nvar n = arr.shift();\nvar c=arr.shift();\nvar q = arr.shift();\nvar apple = [];\nfor(var i=0;i<=n;i++)apple[i]=0;\nvar ans=0;\nfor(var i=0;i<arr.length;i++){\n   var [t,x,d]=arr[i];\n   if(t==1){\n      apple[x]+=d;\n      if(c[x - 1] <apple[x]){\n         ans=x;\n         break;\n      }\n   } else {\n      if(apple[x]<d){\n         ans=x;\n         break;\n      }else{\n         apple[x]-=d;\n      }\n   }\n}\nconsole.log(ans);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1234, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\narr = arr.map(v => v.split(\" \").map(Number));\nvar n = arr.shift();\nvar c = arr.shift();\nvar q = arr.shift();\nvar apple = [];\nfor (var i = 0; i <= n; i++) {\n  apple[i] = 0;\n}\nvar ans = 0;\nfor (var i = 0; i < arr.length; i++) {\n  var [t, x, d] = arr[i];\n  if (t == 1) {\n    apple[x] += d;\n    if (c[x - 1] < apple[x]) {\n      ans = x;\n      break;\n    }\n  } else if (apple[x] < d) {\n    ans = x;\n    break;\n  } else {\n    apple[x] -= d;\n  }\n}\nconsole.log(ans);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6283002136178598, "ngram_match_score": 0.18783090160034746, "weighted_ngram_match_score": 0.38900631650745526, "syntax_match_score": 0.9363636363636364, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p01981_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var gymd=arr['shift']();if(gymd=='#')break;var [g,y,m,d]=gymd['split']('\\x20');[y,m,d]=[y-0x0,m-0x0,d-0x0];if(y<=0x1e||y==0x1f&&m<=0x4)console['log'](gymd);else{y=y-0x1e;console['log']('?\\x20'+y+'\\x20'+m+'\\x20'+d);}}", "test_cases": [["HEISEI 1 1 8\nHEISEI 31 4 30\nHEISEI 31 5 1\nHEISEI 99 12 31\nHEISEI 38 8 30\nHEISEI 98 2 22\nHEISEI 2 3 26\nHEISEI 28 4 23\n#", "HEISEI 1 1 8\nHEISEI 31 4 30\n? 1 5 1\n? 69 12 31\n? 8 8 30\n? 68 2 22\nHEISEI 2 3 26\nHEISEI 28 4 23"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nwhile(true){\n   var gymd = arr.shift();\n   if(gymd==\"#\")break;\n   var [g, y, m, d]=gymd.split(\" \");\n   [y,m,d]=[y-0,m-0,d-0];\n   if(y<=30 || y==31 && m<=4)console.log(gymd);\n   else {\n      y=y-30;\n      console.log(\"? \"+y+\" \"+m+\" \"+d);\n   }\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1235, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var gymd = arr.shift();\n  if (gymd == \"#\") {\n    break;\n  }\n  var [g, y, m, d] = gymd.split(\" \");\n  [y, m, d] = [y - 0, m - 0, d - 0];\n  if (y <= 30 || y == 31 && m <= 4) {\n    console.log(gymd);\n  } else {\n    y = y - 30;\n    console.log(\"? \" + y + \" \" + m + \" \" + d);\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5577239458787809, "ngram_match_score": 0.08410093735537393, "weighted_ngram_match_score": 0.21346151282641643, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0047070268502620305, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.03125, "new_decrease_halstead_effort": 0.12672776442307676}}
{"filename": "p01982_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var nlr=arr['shift']()['split']('\\x20')['map'](Number);if(nlr['join']('')=='000')break;var [n,l,r]=[nlr[0x0],nlr[0x1],nlr[0x2]];var A=[];for(var i=0x0;i<n;i++)A['push'](arr['shift']()-0x0);var cnt=0x0;for(var x=l;x<=r;x++){var flag=!![];for(var i=0x0;i<A['length'];i++){if(x%A[i]==0x0){flag=![];if((i+0x1)%0x2!=0x0)cnt++;break;}}if(flag&&n%0x2==0x0)cnt++;}console['log'](cnt);}", "test_cases": [["3 1988 2014\n400\n100\n4\n1 1000 1999\n1\n2 1111 3333\n2\n2\n6 2000 3000\n5\n7\n11\n9\n3\n13\n0 0 0", "7\n1000\n2223\n785"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nlr=arr.shift().split(\" \").map(Number);\n   if(nlr.join(\"\")==\"000\")break;\n   var [n,l,r]=[nlr[0],nlr[1],nlr[2]];\n   var A = [];\n   for(var i=0;i<n;i++) A.push(arr.shift()-0);\n   var cnt=0;\n   for(var x=l;x<=r;x++){\n      var flag=true;\n      for(var i=0;i<A.length;i++){\n         if(x%A[i]==0){\n            flag=false;\n            if ((i+1)%2!=0)cnt++;\n            break;\n         }\n      }\n      if(flag && n%2==0)cnt++;\n   }  \n   console.log(cnt);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1236, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var nlr = arr.shift().split(\" \").map(Number);\n  if (nlr.join(\"\") == \"000\") {\n    break;\n  }\n  var [n, l, r] = [nlr[0], nlr[1], nlr[2]];\n  var A = [];\n  for (var i = 0; i < n; i++) {\n    A.push(arr.shift() - 0);\n  }\n  var cnt = 0;\n  for (var x = l; x <= r; x++) {\n    var flag = true;\n    for (var i = 0; i < A.length; i++) {\n      if (x % A[i] == 0) {\n        flag = false;\n        if ((i + 1) % 2 != 0) {\n          cnt++;\n        }\n        break;\n      }\n    }\n    if (flag && n % 2 == 0) {\n      cnt++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5213019676989499, "ngram_match_score": 0.048425394903533744, "weighted_ngram_match_score": 0.14982595415313546, "syntax_match_score": 0.8869565217391304, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.006372342802617448, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0496894409937888, "new_decrease_halstead_effort": 0.14571902349221633}}
{"filename": "p02017_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b,c,d]=input['trim']()['split']('\\x20')['map'](Number);if(a*b%0x2!=0x0&&(c+d)%0x2!=0x0)console['log']('No');else console['log']('Yes');", "test_cases": [["3 5 1 4", "No"], ["3 5 2 4", "Yes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,c,d] = input.trim().split(\" \").map(Number);\nif((a*b)%2!=0 && (c+d)%2!=0)console.log(\"No\");\nelse console.log(\"Yes\");\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1237, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b, c, d] = input.trim().split(\" \").map(Number);\nif (a * b % 2 != 0 && (c + d) % 2 != 0) {\n  console.log(\"No\");\n} else {\n  console.log(\"Yes\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5178791345326851, "ngram_match_score": 0.04877324444306589, "weighted_ngram_match_score": 0.13143894586158764, "syntax_match_score": 0.8913043478260869, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02018_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');input=input['trim']()['split']('\\x0a');arr=input[0x1]['split']('\\x20')['map'](Number);arr=arr['filter'](v=>v%0x2==0x0);console['log'](arr['length']);", "test_cases": [["5\n4 3 5 2 6", "3"], ["3\n2 2 2", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput = input.trim().split(\"\\n\")\narr = input[1].split(\" \").map(Number);\narr = arr.filter(v=> v%2==0);\nconsole.log(arr.length);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1238, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.trim().split(\"\\n\");\narr = input[1].split(\" \").map(Number);\narr = arr.filter(v => v % 2 == 0);\nconsole.log(arr.length);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6767730617242584, "ngram_match_score": 0.30094298890378757, "weighted_ngram_match_score": 0.4061492579932462, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02019_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [n,a,b,c]=input['trim']()['split']('\\x20')['map'](Number);console['log'](n-a-b+c);", "test_cases": [["6 3 2 1", "2"], ["10 9 9 9", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,a,b,c]= input.trim().split(\" \").map(Number);\nconsole.log(n-a-b+c);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1239, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [n, a, b, c] = input.trim().split(\" \").map(Number);\nconsole.log(n - a - b + c);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5523526157139265, "ngram_match_score": 0.0627251733901403, "weighted_ngram_match_score": 0.14668528946556558, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02020_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [n,arr]=input['trim']()['split']('\\x0a');arr=arr['split']('\\x20')['map'](Number);arr['sort'](function(a,b){return a-b;});var sum=arr['reduce'](function(a,b){return a+b;});if(sum%0x2==0x0)console['log'](sum/0x2);else{for(var i=0x0;i<arr['length'];i++){if(arr[i]%0x2==0x1){console['log']((sum-arr[i])/0x2);break;}}}", "test_cases": [["5\n2 3 5 6 7", "10"], ["4\n3 5 6 8", "11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,arr]= input.trim().split(\"\\n\");\narr=arr.split(\" \").map(Number);\narr.sort(function(a,b){\n   return a-b;\n});\nvar sum = arr.reduce(function(a,b){\n   return a+b;\n});\nif(sum%2==0)console.log(sum/2);\nelse {\n   for(var i=0;i<arr.length;i++){\n      if(arr[i]%2==1){\n         console.log((sum-arr[i])/2);\n         break;\n      }\n   }\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1240, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [n, arr] = input.trim().split(\"\\n\");\narr = arr.split(\" \").map(Number);\narr.sort(function (a, b) {\n  return a - b;\n});\nvar sum = arr.reduce(function (a, b) {\n  return a + b;\n});\nif (sum % 2 == 0) {\n  console.log(sum / 2);\n} else {\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 == 1) {\n      console.log((sum - arr[i]) / 2);\n      break;\n    }\n  }\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5724000456718188, "ngram_match_score": 0.08870797621277984, "weighted_ngram_match_score": 0.22498859201666402, "syntax_match_score": 0.9759036144578314, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02021_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [n,arr]=input['trim']()['split']('\\x0a');arr=arr['split']('\\x20')['map'](Number);for(var i=0x1;i<=0x64;i++){var sum=0x0;var flag=arr['every'](v=>{sum=sum+v-i;return sum>=0x0;});if(!flag)break;}console['log'](i-0x1);", "test_cases": [["5\n4 2 5 3 1", "3"], ["5\n9 9 1 9 9", "6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,arr]= input.trim().split(\"\\n\");\narr=arr.split(\" \").map(Number);\nfor(var i=1;i<=100;i++){\n  var sum=0;\n  var flag = arr.every(v=>{\n     sum = sum + v - i;\n     return  (sum >= 0);\n  });\n  if(!flag)break;\n}\nconsole.log(i-1);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1241, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [n, arr] = input.trim().split(\"\\n\");\narr = arr.split(\" \").map(Number);\nfor (var i = 1; i <= 100; i++) {\n  var sum = 0;\n  var flag = arr.every(v => {\n    sum = sum + v - i;\n    return sum >= 0;\n  });\n  if (!flag) {\n    break;\n  }\n}\nconsole.log(i - 1);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5791939802183252, "ngram_match_score": 0.18329857013961992, "weighted_ngram_match_score": 0.3270257378304555, "syntax_match_score": 0.8064516129032258, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02022_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var A=arr[0x1]['split']('\\x20')['map'](Number)['reduce']((a,b)=>a+b);var B=arr[0x2]['split']('\\x20')['map'](Number)['reduce']((a,b)=>a+b);console['log'](A*B);", "test_cases": [["3 2\n3 1 5\n2 4", "54"], ["10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10", "3025"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar A= arr[1].split(\" \").map(Number).reduce((a,b)=>a+b);\nvar B= arr[2].split(\" \").map(Number).reduce((a,b)=>a+b);\nconsole.log(A*B);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1242, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar A = arr[1].split(\" \").map(Number).reduce((a, b) => a + b);\nvar B = arr[2].split(\" \").map(Number).reduce((a, b) => a + b);\nconsole.log(A * B);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5331862411857426, "ngram_match_score": 0.04205650799682694, "weighted_ngram_match_score": 0.09068845674614334, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02044_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');while(!![]){var [n,m]=arr['shift']()['split']('\\x20')['map'](Number);if(n==0x0&&m==0x0)break;var x=m/n;var sum=0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);a['forEach'](v=>{if(v>=x)sum+=x;else sum+=v;});console['log'](sum);}", "test_cases": [["3 300\n120 100 80\n3 30\n10 20 5\n4 1000\n100 200 300 400\n5 5\n2523 8430 3 4199 632\n0 0", "280\n25\n800\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,m]=arr.shift().split(\" \").map(Number);\n   if(n==0 && m==0)break;\n   var x=m/n;\n   var sum=0;\n   var a=arr.shift().split(\" \").map(Number);\n   a.forEach(v=>{\n      if(v>=x)sum+=x;\n      else sum+=v;\n   });\n   console.log(sum);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1243, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n  var [n, m] = arr.shift().split(\" \").map(Number);\n  if (n == 0 && m == 0) {\n    break;\n  }\n  var x = m / n;\n  var sum = 0;\n  var a = arr.shift().split(\" \").map(Number);\n  a.forEach(v => {\n    if (v >= x) {\n      sum += x;\n    } else {\n      sum += v;\n    }\n  });\n  console.log(sum);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4908437414427069, "ngram_match_score": 0.029314933890058424, "weighted_ngram_match_score": 0.07691717473791226, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00777445481187633, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0357142857142857, "new_decrease_halstead_effort": 0.2092458242610714}}
{"filename": "p02052_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [h,w]=arr['shift']()['split']('\\x20')['map'](Number);var b=[];for(var i=0x0;i<h;i++){arr['shift']()['split']('')['forEach']((v,j)=>{if(v=='B')b['push']([i,j]);});}var max=0x0;for(var i=0x0;i<b['length'];i++){for(var j=i+0x1;j<b['length'];j++){var d=Math['abs'](b[i][0x0]-b[j][0x0])+Math['abs'](b[i][0x1]-b[j][0x1]);max=Math['max'](max,d);}}console['log'](max);", "test_cases": [["3 3\nB.B\n..B\n.BB", "4"], ["4 3\nB..\nB..\n...\n...", "1"], ["6 6\n...B..\nB.B.B.\n.B.B.B\n...B.B\n.B..B.\n..B...", "7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar b=[];\nfor(var i=0;i<h;i++){\n   arr.shift().split(\"\").forEach((v,j)=>{\n      if(v==\"B\")b.push([i,j]);\n   });\n}\nvar max=0;\nfor(var i=0;i<b.length;i++){\n   for(var j=i+1;j<b.length;j++){\n      var d=Math.abs(b[i][0]-b[j][0])+Math.abs(b[i][1]-b[j][1]);\n      max=Math.max(max,d);\n   }\n}\nconsole.log(max);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1244, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [h, w] = arr.shift().split(\" \").map(Number);\nvar b = [];\nfor (var i = 0; i < h; i++) {\n  arr.shift().split(\"\").forEach((v, j) => {\n    if (v == \"B\") {\n      b.push([i, j]);\n    }\n  });\n}\nvar max = 0;\nfor (var i = 0; i < b.length; i++) {\n  for (var j = i + 1; j < b.length; j++) {\n    var d = Math.abs(b[i][0] - b[j][0]) + Math.abs(b[i][1] - b[j][1]);\n    max = Math.max(max, d);\n  }\n}\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5096306219729801, "ngram_match_score": 0.02755929754801172, "weighted_ngram_match_score": 0.09060920804302396, "syntax_match_score": 0.9203539823008849, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009309148558706015, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02646240172936909}}
{"filename": "p02053_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [h,w]=arr['shift']()['split']('\\x20')['map'](Number);var b=[];for(var i=0x0;i<h;i++){var two=[];arr[i]['split']('')['forEach']((v,j)=>{if(v=='B')two['push']([i,j]);});if(two['length']==0x1)b['push'](two[0x0]);else if(two['length']>=0x2)b['push'](two[0x0],two[two['length']-0x1]);}var max=0x0;for(var i=0x0;i<b['length'];i++){for(var j=i+0x1;j<b['length'];j++){var d=Math['abs'](b[i][0x0]-b[j][0x0])+Math['abs'](b[i][0x1]-b[j][0x1]);max=Math['max'](max,d);}}console['log'](max);", "test_cases": [["3 3\nB.B\n..B\n.BB", "4"], ["4 3\nB..\nB..\n...\n...", "1"], ["6 6\n...B..\nB.B.B.\n.B.B.B\n...B.B\n.B..B.\n..B...", "7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar b=[];\nfor(var i=0;i<h;i++){\n   var two=[];\n   arr[i].split(\"\").forEach((v,j)=>{\n      if(v==\"B\")two.push([i,j]);\n   });\n   if(two.length==1)b.push(two[0]);\n   else if(two.length>=2)b.push(two[0],two[two.length-1]);\n}\nvar max=0;\nfor(var i=0;i<b.length;i++){\n   for(var j=i+1;j<b.length;j++){\n      var d=Math.abs(b[i][0]-b[j][0])+Math.abs(b[i][1]-b[j][1]);\n      max=Math.max(max,d);\n   }\n}\nconsole.log(max);\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1245, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [h, w] = arr.shift().split(\" \").map(Number);\nvar b = [];\nfor (var i = 0; i < h; i++) {\n  var two = [];\n  arr[i].split(\"\").forEach((v, j) => {\n    if (v == \"B\") {\n      two.push([i, j]);\n    }\n  });\n  if (two.length == 1) {\n    b.push(two[0]);\n  } else if (two.length >= 2) {\n    b.push(two[0], two[two.length - 1]);\n  }\n}\nvar max = 0;\nfor (var i = 0; i < b.length; i++) {\n  for (var j = i + 1; j < b.length; j++) {\n    var d = Math.abs(b[i][0] - b[j][0]) + Math.abs(b[i][1] - b[j][1]);\n    max = Math.max(max, d);\n  }\n}\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5003432705724817, "ngram_match_score": 0.019656203186257583, "weighted_ngram_match_score": 0.06995217322131622, "syntax_match_score": 0.9117647058823529, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009511175187437715, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.024699758544830308}}
{"filename": "p02060_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var p=arr['shift']()['split']('\\x20')['map'](Number);var t=arr['shift']()['split']('\\x20')['map'](Number);var s=[];for(var i=0x0;i<=0xc8;i++)s[i]=Infinity;s[0x0]=0x0;for(var i=0x0;i<=0x64;i++){if(s[i]==Infinity)continue;s[i+t[0x0]]=Math['min'](s[i]+p[0x0],s[i+t[0x0]]);s[i+t[0x1]]=Math['min'](s[i]+p[0x1],s[i+t[0x1]]);s[i+t[0x2]]=Math['min'](s[i]+p[0x2],s[i+t[0x2]]);s[i+t[0x3]]=Math['min'](s[i]+p[0x3],s[i+t[0x3]]);}var min=Infinity;for(var i=n;i<=0xc8;i++)min=Math['min'](min,s[i]);console['log'](min);", "test_cases": [["10\n1 2 3 4\n1 2 4 8", "6"], ["5\n2 9 9 8\n1 4 5 100", "8"], ["24\n2 3 4 7\n7 9 11 20", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar p=arr.shift().split(\" \").map(Number);\nvar t=arr.shift().split(\" \").map(Number);\nvar s=[];\nfor(var i=0;i<=200;i++)s[i]=Infinity;\ns[0]=0;\nfor(var i=0;i<=100;i++){\n   if(s[i]==Infinity)continue; \n   s[i+t[0]]=Math.min(s[i]+p[0],s[i+t[0]]);\n   s[i+t[1]]=Math.min(s[i]+p[1],s[i+t[1]]);\n   s[i+t[2]]=Math.min(s[i]+p[2],s[i+t[2]]);\n   s[i+t[3]]=Math.min(s[i]+p[3],s[i+t[3]]);\n}\nvar min=Infinity;\nfor(var i=n;i<=200;i++)min=Math.min(min,s[i]);\nconsole.log(min);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1246, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar p = arr.shift().split(\" \").map(Number);\nvar t = arr.shift().split(\" \").map(Number);\nvar s = [];\nfor (var i = 0; i <= 200; i++) {\n  s[i] = Infinity;\n}\ns[0] = 0;\nfor (var i = 0; i <= 100; i++) {\n  if (s[i] == Infinity) {\n    continue;\n  }\n  s[i + t[0]] = Math.min(s[i] + p[0], s[i + t[0]]);\n  s[i + t[1]] = Math.min(s[i] + p[1], s[i + t[1]]);\n  s[i + t[2]] = Math.min(s[i] + p[2], s[i + t[2]]);\n  s[i + t[3]] = Math.min(s[i] + p[3], s[i + t[3]]);\n}\nvar min = Infinity;\nfor (var i = n; i <= 200; i++) {\n  min = Math.min(min, s[i]);\n}\nconsole.log(min);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5078172855564846, "ngram_match_score": 0.013034979117884255, "weighted_ngram_match_score": 0.05796926244580251, "syntax_match_score": 0.9602649006622517, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0010472547382733843, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.026164068332244605}}
{"filename": "p02099_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;arr=arr['map'](v=>v['replace']('.',''))['map'](Number);var a=[];for(var i=0x0;i<=0xfa0;i++)a[i]=0x0;arr['forEach'](v=>a[v]++);var ans=[];var s=[];s[0x0]=a[0x0];for(var i=0x1;i<=0xfa0;i++)s[i]=s[i-0x1]+a[i];arr['forEach'](v=>{var point=0x0;point+=a[v]-0x1;if(v!=0x0)point+=s[v-0x1]*0x3;ans['push'](point);});console['log'](ans['join']('\\x0a'));", "test_cases": [["3\n1.000\n3.000\n3.000", "0\n4\n4"], ["3\n1.000\n2.000\n3.000", "0\n3\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\narr=arr.map(v=> v.replace(\".\",\"\")).map(Number);\nvar a=[];\nfor(var i=0;i<=4000;i++)a[i]=0;\narr.forEach(v=> a[v]++);\nvar ans=[];\nvar s=[];\ns[0]=a[0];\nfor(var i=1;i<=4000;i++)s[i]=s[i-1]+a[i];\narr.forEach(v=>{\n   var point=0;\n   point+=a[v]-1;\n   if(v!=0)point+=s[v-1]*3;\n   ans.push(point);\n});\nconsole.log(ans.join(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1247, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\narr = arr.map(v => v.replace(\".\", \"\")).map(Number);\nvar a = [];\nfor (var i = 0; i <= 4000; i++) {\n  a[i] = 0;\n}\narr.forEach(v => a[v]++);\nvar ans = [];\nvar s = [];\ns[0] = a[0];\nfor (var i = 1; i <= 4000; i++) {\n  s[i] = s[i - 1] + a[i];\n}\narr.forEach(v => {\n  var point = 0;\n  point += a[v] - 1;\n  if (v != 0) {\n    point += s[v - 1] * 3;\n  }\n  ans.push(point);\n});\nconsole.log(ans.join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.502869178571691, "ngram_match_score": 0.019476449030841215, "weighted_ngram_match_score": 0.07094763367697522, "syntax_match_score": 0.9210526315789473, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02111_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var x=input['trim']()-0x0;var time=0xc*0x3c/0x168*x;var h=(time-time%0x3c)/0x3c;var m=time%0x3c;console['log'](h+'\\x20'+m);", "test_cases": [["0", "0 0"], ["45", "1 30"], ["100", "3 20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim()-0;\nvar time = 12*60/360 * x;\nvar h = (time - time%60) / 60;\nvar m = time % 60;\nconsole.log(h +\" \"+ m);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1248, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar x = input.trim() - 0;\nvar time = x * 2;\nvar h = (time - time % 60) / 60;\nvar m = time % 60;\nconsole.log(h + \" \" + m);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.572010076773263, "ngram_match_score": 0.3657561655918876, "weighted_ngram_match_score": 0.48017887834326956, "syntax_match_score": 0.8421052631578947, "dataflow_match_score": 0.6}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00305803420521622, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.07272727272727275, "new_decrease_halstead_effort": 0.09875134819174747}}
{"filename": "p02115_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a')['map'](Number);var n=arr['shift']();var a=arr['shift']();var cnt=0x1;var max=0x1;var memo=0x0;arr['forEach'](v=>{if(a>v){if(memo==0x1)cnt=0x2;else cnt++;memo=-0x1;}else if(a<v){if(memo==-0x1)cnt=0x2;else cnt++;memo=0x1;}max=Math['max'](max,cnt);a=v;});console['log'](max);", "test_cases": [["3\n2\n5\n1", "2"], ["5\n4\n5\n2\n1\n3", "3"], ["3\n4\n4\n4", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nvar n=arr.shift();\nvar a=arr.shift();\nvar cnt=1;\nvar max=1;\nvar memo=0;\narr.forEach(v=>{\n   if(a>v){\n      if(memo == 1)cnt=2;\n      else cnt++;\n      memo=-1;\n   }else if(a<v){\n      if(memo == -1)cnt=2;\n      else cnt++;      \n      memo=1;\n   }\n   max=Math.max(max,cnt);\n   a=v;\n});\nconsole.log(max);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1249, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\").map(Number);\nvar n = arr.shift();\nvar a = arr.shift();\nvar cnt = 1;\nvar max = 1;\nvar memo = 0;\narr.forEach(v => {\n  if (a > v) {\n    if (memo == 1) {\n      cnt = 2;\n    } else {\n      cnt++;\n    }\n    memo = -1;\n  } else if (a < v) {\n    if (memo == -1) {\n      cnt = 2;\n    } else {\n      cnt++;\n    }\n    memo = 1;\n  }\n  max = Math.max(max, cnt);\n  a = v;\n});\nconsole.log(max);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.47304471682724025, "ngram_match_score": 0.01804179530193922, "weighted_ngram_match_score": 0.046550865110469984, "syntax_match_score": 0.8275862068965517, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02124_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var x=arr['shift']()-0x0;console['log']('ai1333'+'3'['repeat'](x/0x64));", "test_cases": [["0", "ai1333"], ["300", "ai1333333"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar x = arr.shift()-0;\nconsole.log(\"ai1333\" + \"3\".repeat(x/100));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1250, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar x = arr.shift() - 0;\nconsole.log(\"ai1333\" + \"3\".repeat(x / 100));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7241770589003307, "ngram_match_score": 0.3863958857674753, "weighted_ngram_match_score": 0.5103123498338472, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02126_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [n,m,c]=arr['shift']()['split']('\\x20')['map'](Number);var L=arr['shift']()['split']('\\x20')['map'](Number);var cw=arr['map'](v=>v['split']('\\x20')['map'](Number));cw['sort'](function(a,b){return b[0x1]-a[0x1];});var sum=0x0;for(var i=0x0;i<cw['length'];i++){if(m==0x0)break;var max=L[cw[i][0x0]-0x1];if(max>0x0){sum+=cw[i][0x1];L[cw[i][0x0]-0x1]--;m--;}}console['log'](sum);", "test_cases": [["3 3 2\n1 1\n1 1\n1 100\n2 10", "110"], ["3 3 3\n1 0 1\n1 1\n2 100\n3 1", "2"], ["22 7 26\n11 14 15 3 11 7 16 17 1 4 2 19 4 14 16 16 3 13 17 12 7 11 2 20 12 22\n6 10\n1 3\n13 1\n16 5\n4 1\n20 7\n18 4\n26 6\n9 1\n12 2\n21 1\n21 7\n18 1\n14 5\n24 5\n6 1\n3 1\n2 5\n21 2\n7 6\n10 9\n15 7", "52"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar [n,m,c]=arr.shift().split(\" \").map(Number);\nvar L=arr.shift().split(\" \").map(Number);\nvar cw = arr.map(v => v.split(\" \").map(Number));\ncw.sort(function(a,b){\n   return b[1] - a[1];\n});\nvar sum=0;\nfor(var i=0;i<cw.length;i++){\n   if(m==0)break;\n   var max = L[cw[i][0]-1];\n   if(max>0){\n      sum+=cw[i][1];\n      L[cw[i][0]-1]--;\n      m--;\n   }\n}\nconsole.log(sum);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1251, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [n, m, c] = arr.shift().split(\" \").map(Number);\nvar L = arr.shift().split(\" \").map(Number);\nvar cw = arr.map(v => v.split(\" \").map(Number));\ncw.sort(function (a, b) {\n  return b[1] - a[1];\n});\nvar sum = 0;\nfor (var i = 0; i < cw.length; i++) {\n  if (m == 0) {\n    break;\n  }\n  var max = L[cw[i][0] - 1];\n  if (max > 0) {\n    sum += cw[i][1];\n    L[cw[i][0] - 1]--;\n    m--;\n  }\n}\nconsole.log(sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6714939855977602, "ngram_match_score": 0.24922817232325253, "weighted_ngram_match_score": 0.47344501777421005, "syntax_match_score": 0.963302752293578, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02137_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var p=input['trim']()-0x0;console['log'](p-p%0x1f4);", "test_cases": [["5700", "5500"], ["1333", "1000"], ["100000", "100000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar p= input.trim()-0;\nconsole.log(p-(p%500));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1252, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar p = input.trim() - 0;\nconsole.log(p - p % 500);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.48964748024077376, "ngram_match_score": 0.06541868941754436, "weighted_ngram_match_score": 0.1431712315455507, "syntax_match_score": 0.75, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02149_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x20')['map'](Number);var max=Math['max'](...arr);console['log'](['A','B','C'][arr['indexOf'](max)]);", "test_cases": [["1000 900 850", "A"], ["1000 800 1200", "C"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\" \").map(Number);\nvar max=Math.max(...arr);\nconsole.log([\"A\",\"B\",\"C\"][arr.indexOf(max)]);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1253, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\" \").map(Number);\nvar max = Math.max(...arr);\nconsole.log([\"A\", \"B\", \"C\"][arr.indexOf(max)]);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5646358913410694, "ngram_match_score": 0.09950615774798435, "weighted_ngram_match_score": 0.15903740761629304, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0009749648428856172, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.035622857253547524}}
{"filename": "p02162_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [t,tt,r,rr]=input['trim']()['split']('\\x20')['map'](Number);if(r==-0x1||rr==-0x1){if(t>tt)console['log']('Bob');else if(t<tt)console['log']('Alice');else if(t==tt)console['log']('Draw');}else if(r>rr)console['log']('Alice');else if(r<rr)console['log']('Bob');else if(r==rr)console['log']('Draw');", "test_cases": [["9 8 1000 999", "Alice"], ["9 8 1000 1000", "Draw"], ["9 8 2849 -1", "Bob"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [t,tt,r,rr]=input.trim().split(\" \").map(Number);\nif(r==-1 || rr==-1){\n  if(t>tt)console.log(\"Bob\");\n  else if(t<tt)console.log(\"Alice\");\n  else if(t==tt)console.log(\"Draw\");\n}\nelse if(r>rr)console.log(\"Alice\");\nelse if(r<rr)console.log(\"Bob\");\nelse if(r==rr)console.log(\"Draw\");\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1254, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [t, tt, r, rr] = input.trim().split(\" \").map(Number);\nif (r == -1 || rr == -1) {\n  if (t > tt) {\n    console.log(\"Bob\");\n  } else if (t < tt) {\n    console.log(\"Alice\");\n  } else if (t == tt) {\n    console.log(\"Draw\");\n  }\n} else if (r > rr) {\n  console.log(\"Alice\");\n} else if (r < rr) {\n  console.log(\"Bob\");\n} else if (r == rr) {\n  console.log(\"Draw\");\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4816106431136916, "ngram_match_score": 0.020111428237972198, "weighted_ngram_match_score": 0.07103702656973529, "syntax_match_score": 0.8352941176470589, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02163_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var [a,b]=[0x0,0x1];arr['forEach'](v=>{var [q,x]=v['split']('\\x20')['map'](Number);if(q==0x1){b*=x;a*=x;}else if(q==0x2)a-=x;else if(q==0x3)a+=x;});console['log'](a+'\\x20'+b);", "test_cases": [["3\n1 2\n2 10\n3 8", "-2 2"], ["10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10", "0 10000000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar [a,b]=[0,1];\narr.forEach(v=>{\n   var [q,x]=v.split(\" \").map(Number);\n   if(q==1){\n      b*=x;\n      a*=x;\n   }\n   else if(q==2)a-=x;\n   else if(q==3)a+=x;\n});\nconsole.log(a+\" \"+b);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1255, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar [a, b] = [0, 1];\narr.forEach(v => {\n  var [q, x] = v.split(\" \").map(Number);\n  if (q == 1) {\n    b *= x;\n    a *= x;\n  } else if (q == 2) {\n    a -= x;\n  } else if (q == 3) {\n    a += x;\n  }\n});\nconsole.log(a + \" \" + b);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4832679194525113, "ngram_match_score": 0.020409456503799262, "weighted_ngram_match_score": 0.06334715281309523, "syntax_match_score": 0.8493150684931506, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02182_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [n,m]=arr['shift']()['split']('\\x20')['map'](Number);var cnt=0x0;for(var i=0x0;i<n;i++){var s=arr[i];var t=arr[i+n];for(var j=0x0;j<m;j++){if(s[j]!=t[j])cnt++;}}console['log'](cnt);", "test_cases": [["2 3\n..#\n##.\n.##\n#..", "2"], ["7 28\n............................\n...#.....###...####....###..\n..#.#...#...#..#...#..#...#.\n.#...#..#......####...#.....\n.#####..#...#..#......#...#.\n.#...#...###...#.......###..\n............................\n............................\n..###....###.....##....###..\n.#...#..#...#...#.#...#...#.\n...##...#...#.....#....####.\n..#.....#...#.....#.......#.\n.#####...###....####...###..\n............................", "40"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,m]=arr.shift().split(\" \").map(Number);\nvar cnt=0;\nfor(var i=0;i<n;i++){\n   var s=arr[i];\n   var t=arr[i+n];\n   for(var j=0;j<m;j++){\n      if(s[j]!=t[j])cnt++;\n   }\n}\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1256, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [n, m] = arr.shift().split(\" \").map(Number);\nvar cnt = 0;\nfor (var i = 0; i < n; i++) {\n  var s = arr[i];\n  var t = arr[i + n];\n  for (var j = 0; j < m; j++) {\n    if (s[j] != t[j]) {\n      cnt++;\n    }\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5086203179901108, "ngram_match_score": 0.032374986018987986, "weighted_ngram_match_score": 0.0916585247474253, "syntax_match_score": 0.9104477611940298, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02189_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var min=Infinity;var ans=-0x1;for(var i=0x0;i<n;i++){if(min>a[i]){ans=i;min=a[i];}}console['log'](ans+0x1);", "test_cases": [["6\n8 6 9 1 2 1", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar min=Infinity;\nvar ans=-1;\nfor(var i=0;i<n;i++){\n   if(min>a[i]){\n      ans=i;\n      min=a[i];\n   }\n}\nconsole.log(ans+1);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1257, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar min = Infinity;\nvar ans = -1;\nfor (var i = 0; i < n; i++) {\n  if (min > a[i]) {\n    ans = i;\n    min = a[i];\n  }\n}\nconsole.log(ans + 1);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5249937494591987, "ngram_match_score": 0.02759321988923805, "weighted_ngram_match_score": 0.07238177794755687, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02190_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var s=new Set();a['forEach'](v=>s['add'](v));console['log'](s['size']);", "test_cases": [["6\n8 6 9 1 2 1", "5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar s= new Set();\na.forEach(v=>s.add(v));\nconsole.log(s.size);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1258, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar s = new Set();\na.forEach(v => s.add(v));\nconsole.log(s.size);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5369455152550436, "ngram_match_score": 0.05270961981991207, "weighted_ngram_match_score": 0.09507244120026236, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02191_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [n,q]=arr['shift']()['split']('\\x20')['map'](Number);var ary=arr['shift']()['split']('\\x20')['map'](Number);ary['sort']((a,b)=>a-b);var tansaku=function(x,str){var first=-0x1;var last=ary['length'];while(last-first>0x1){var mid=first+Math['floor']((last-first)/0x2);if(ary[mid]<x)first=mid;else if(str=='ookii'&&ary[mid]==x)first=mid;else last=mid;}return last;};var ans=[];arr['forEach'](v=>{var [l,r]=v['split']('\\x20')['map'](Number);ans['push'](tansaku(r,'ookii')-tansaku(l,'izyou'));});console['log'](ans['join']('\\x0a'));", "test_cases": [["6 3\n8 6 9 1 2 1\n2 8\n1 7\n3 5", "3\n4\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,q]=arr.shift().split(\" \").map(Number);\nvar ary=arr.shift().split(\" \").map(Number);\nary.sort((a,b)=>a-b);\nvar tansaku=function(x,str){\n    var first=-1;\n    var last=ary.length;\n    while (last-first>1){\n        var mid=first+Math.floor((last-first)/2);\n        if(ary[mid]<x)first=mid;\n        else if(str==\"ookii\" && ary[mid]==x)first=mid;\n        else last=mid;\n    }\n    return last;\n};\nvar ans=[];\narr.forEach(v=>{\n   var [l,r]=v.split(\" \").map(Number);\n   ans.push(tansaku(r,\"ookii\")-tansaku(l,\"izyou\"));\n});\nconsole.log(ans.join(\"\\n\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1259, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [n, q] = arr.shift().split(\" \").map(Number);\nvar ary = arr.shift().split(\" \").map(Number);\nary.sort((a, b) => a - b);\nfunction tansaku(x, str) {\n  var first = -1;\n  var last = ary.length;\n  while (last - first > 1) {\n    var mid = first + Math.floor((last - first) / 2);\n    if (ary[mid] < x) {\n      first = mid;\n    } else if (str == \"ookii\" && ary[mid] == x) {\n      first = mid;\n    } else {\n      last = mid;\n    }\n  }\n  return last;\n}\nvar ans = [];\narr.forEach(v => {\n  var [l, r] = v.split(\" \").map(Number);\n  ans.push(tansaku(r, \"ookii\") - tansaku(l, \"izyou\"));\n});\nconsole.log(ans.join(\"\\n\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.417493204999672, "ngram_match_score": 0.021522940056740814, "weighted_ngram_match_score": 0.059045285474061515, "syntax_match_score": 0.9185185185185185, "dataflow_match_score": 0.6708860759493671}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.021428571428571463, "new_decrease_halstead_effort": 0.03561076604554858}}
{"filename": "p02198_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b]=input['trim']()['split']('\\x20')['map'](Number);console['log'](a*b);", "test_cases": [["3 4", "12"], ["7 7", "49"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]=input.trim().split(\" \").map(Number);\nconsole.log(a*b);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1260, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b] = input.trim().split(\" \").map(Number);\nconsole.log(a * b);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5565969526301023, "ngram_match_score": 0.08032276872815308, "weighted_ngram_match_score": 0.14606504179225632, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02199_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [a,b]=arr['shift']()['split']('\\x20')['map'](Number);var [p,q,r]=arr['shift']()['split']('\\x20')['map'](Number);var hanareta=b*p;var tikaduita=(b-a)*q;var d=hanareta-tikaduita;console['log']((d/(q+r)+b)['toFixed'](0xc));", "test_cases": [["14 86\n9 1 20", "119.428571428571"], ["1 4\n15 9 2", "7.000000000000"], ["67 87 \n7 4 51", "96.618181818182"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [a,b]=arr.shift().split(\" \").map(Number);\nvar [p,q,r]=arr.shift().split(\" \").map(Number);\nvar hanareta=b*p;\nvar tikaduita=(b-a)*q;\nvar d=hanareta-tikaduita;\nconsole.log((d/(q+r)+b).toFixed(12));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1261, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [a, b] = arr.shift().split(\" \").map(Number);\nvar [p, q, r] = arr.shift().split(\" \").map(Number);\nvar hanareta = b * p;\nvar tikaduita = (b - a) * q;\nvar d = hanareta - tikaduita;\nconsole.log((d / (q + r) + b).toFixed(12));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5292416600248069, "ngram_match_score": 0.030499303198719584, "weighted_ngram_match_score": 0.08646733690050774, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02200_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var cnt=0x0;for(var i=0x0;i<n-0x1;i++){if(a[i]<a[i+0x1])cnt++;}console['log'](cnt);", "test_cases": [["5\n8 6 9 1 20", "2"], ["6\n3 3 4 3 3 4", "2"], ["10\n10 9 8 7 6 5 4 3 2 1", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar cnt=0;\nfor(var i=0;i<n-1;i++){\n   if(a[i]<a[i+1])cnt++;\n}\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1262, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar cnt = 0;\nfor (var i = 0; i < n - 1; i++) {\n  if (a[i] < a[i + 1]) {\n    cnt++;\n  }\n}\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5133652471947291, "ngram_match_score": 0.031091006235412864, "weighted_ngram_match_score": 0.08903664921017021, "syntax_match_score": 0.9333333333333333, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02201_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var cnt=0x0;arr['forEach'](v=>{if(v=='E869120')cnt++;});console['log'](cnt);", "test_cases": [["5\nE869120\nTMJN\nE869120\nTAISA\nYNYMXIAOLONGBAO", "2"], ["3\nSQUARE1001\nMENCOTTON\nB2563125", "0"], ["6\nE8691200\nE869121\nE869122\nE869123\nE869124\nE869125", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar cnt=0;\narr.forEach(v=>{\n   if(v==\"E869120\")cnt++;\n});\nconsole.log(cnt);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1263, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar cnt = 0;\narr.forEach(v => {\n  if (v == \"E869120\") {\n    cnt++;\n  }\n});\nconsole.log(cnt);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.496170353836892, "ngram_match_score": 0.04222241460226927, "weighted_ngram_match_score": 0.10154990983620787, "syntax_match_score": 0.8409090909090909, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02202_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var v=arr['shift']()['split']('\\x20')['map'](Number);var sum=0x0;for(var i=0x0;i<n;i++){sum+=v[i]-(i+0x1);}console['log'](sum);", "test_cases": [["1\n59549", "59548"], ["5\n2 1 8 5 7", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar v=arr.shift().split(\" \").map(Number);\nvar sum=0;\nfor(var i=0;i<n;i++){\n   sum+=v[i]-(i+1);\n}\nconsole.log(sum);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1264, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar v = arr.shift().split(\" \").map(Number);\nvar sum = 0;\nfor (var i = 0; i < n; i++) {\n  sum += v[i] - (i + 1);\n}\nconsole.log(sum);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5307816151682495, "ngram_match_score": 0.034089811462827725, "weighted_ngram_match_score": 0.08903664921017021, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02203_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var v=arr['shift']()['split']('\\x20')['map'](Number);var cnt=0x1;for(var i=0x0;i<n-0x1;i++){if(v[i]>=v[i+0x1])cnt++;}console['log'](cnt);console['log'](n);", "test_cases": [["5\n8 6 9 1 20", "3\n5"], ["6\n3 3 4 3 3 4", "4\n6"], ["8\n5 5 4 4 3 3 2 2", "8\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar v=arr.shift().split(\" \").map(Number);\nvar cnt=1;\nfor(var i=0;i<n-1;i++){\n   if(v[i]>=v[i+1])cnt++;\n}\nconsole.log(cnt);\nconsole.log(n);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1265, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar v = arr.shift().split(\" \").map(Number);\nvar cnt = 1;\nfor (var i = 0; i < n - 1; i++) {\n  if (v[i] >= v[i + 1]) {\n    cnt++;\n  }\n}\nconsole.log(cnt);\nconsole.log(n);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5210315316368461, "ngram_match_score": 0.03917606495630535, "weighted_ngram_match_score": 0.10745006159107916, "syntax_match_score": 0.9375, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02204_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var [m,n]=arr['shift']()['split']('\\x20')['map'](Number);var a=arr['shift']()['split']('\\x20');if(m==0x2){var cnt=[0x0,0x0];for(var i=0x0;i<n;i++){if(a[i]-0x1==i%0x2)cnt[0x0]++;if(a[i]-0x1==(i+0x1)%0x2)cnt[0x1]++;}console['log'](Math['min'](...cnt));}else{var cnt=0x0;for(var i=0x1;i<n;i++){if(a[i-0x1]==a[i]){cnt++;i++;}}console['log'](cnt);}", "test_cases": [["2 3\n2 2 1", "1"], ["3 6\n1 1 1 2 2 3", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [m,n]=arr.shift().split(\" \").map(Number);\nvar a=arr.shift().split(\" \");\nif(m==2){\n   var cnt=[0,0];\n   for(var i=0;i<n;i++){\n      if(a[i]-1==i%2)cnt[0]++;\n      if(a[i]-1==(i+1)%2)cnt[1]++;\n   }\n   console.log(Math.min(...cnt));\n}else{\n   var cnt=0;\n   for(var i=1;i<n;i++){\n      if(a[i-1] == a[i]){\n         cnt++;\n         i++;\n      }\n   }\n   console.log(cnt);\n}\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1266, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar [m, n] = arr.shift().split(\" \").map(Number);\nvar a = arr.shift().split(\" \");\nif (m == 2) {\n  var cnt = [0, 0];\n  for (var i = 0; i < n; i++) {\n    if (a[i] - 1 == i % 2) {\n      cnt[0]++;\n    }\n    if (a[i] - 1 == (i + 1) % 2) {\n      cnt[1]++;\n    }\n  }\n  console.log(Math.min(...cnt));\n} else {\n  var cnt = 0;\n  for (var i = 1; i < n; i++) {\n    if (a[i - 1] == a[i]) {\n      cnt++;\n      i++;\n    }\n  }\n  console.log(cnt);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5586169141087498, "ngram_match_score": 0.07531308405638613, "weighted_ngram_match_score": 0.2227909360149767, "syntax_match_score": 0.9363636363636364, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02212_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x20')['map'](Number);var [a,b,c,d]=arr['sort']((a,b)=>b-a);console['log'](Math['abs'](a+d-(b+c)));", "test_cases": [["2 1 3 4", "0"], ["64 224 239 1024", "625"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\" \").map(Number);\nvar [a,b,c,d]=arr.sort((a,b)=>b-a);\nconsole.log(Math.abs((a+d)-(b+c)));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1267, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\" \").map(Number);\nvar [a, b, c, d] = arr.sort((a, b) => b - a);\nconsole.log(Math.abs(a + d - (b + c)));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5043608205223344, "ngram_match_score": 0.04215458721124646, "weighted_ngram_match_score": 0.1343796039690004, "syntax_match_score": 0.8409090909090909, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02439_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var [a,b,c]=input['trim']()['split']('\\x20')['map'](Number);console['log'](Math['min'](a,b,c)+'\\x20'+Math['max'](a,b,c));", "test_cases": [["4 5 3", "3 5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,c]=input.trim().split(\" \").map(Number);\nconsole.log(Math.min(a,b,c)+\" \"+Math.max(a,b,c));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1268, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar [a, b, c] = input.trim().split(\" \").map(Number);\nconsole.log(Math.min(a, b, c) + \" \" + Math.max(a, b, c));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5447413333865649, "ngram_match_score": 0.048853266442119264, "weighted_ngram_match_score": 0.13011206710414042, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02441_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var q=arr['shift']()-0x0;var s='';for(var i=0x0;i<q;i++){var [b,e,k]=arr[i]['split']('\\x20')['map'](Number);var cnt=0x0;for(var j=b;j<e;j++){if(a[j]==k)cnt++;}s+=cnt+'\\x0a';}console['log'](s['trim']());", "test_cases": [["9\n1 4 1 4 2 1 3 5 6\n3\n0 9 1\n1 6 1\n3 7 5", "3\n2\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [b,e,k]=arr[i].split(\" \").map(Number);\n   var cnt = 0;\n   for(var j=b;j<e;j++){\n      if(a[j]==k)cnt++;\n   }\n   s+=cnt+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1269, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar q = arr.shift() - 0;\nvar s = \"\";\nfor (var i = 0; i < q; i++) {\n  var [b, e, k] = arr[i].split(\" \").map(Number);\n  var cnt = 0;\n  for (var j = b; j < e; j++) {\n    if (a[j] == k) {\n      cnt++;\n    }\n  }\n  s += cnt + \"\\n\";\n}\nconsole.log(s.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5896026170846879, "ngram_match_score": 0.12303602287043074, "weighted_ngram_match_score": 0.3013085114023867, "syntax_match_score": 0.9340659340659341, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02442_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var m=arr['shift']()-0x0;var b=arr['shift']()['split']('\\x20')['map'](Number);for(var i=0x0;i<m;i++){if(a['length']-0x1<i||b[i]>a[i]){console['log'](0x1);break;}else if(b[i]<a[i]){console['log'](0x0);break;}}if(i==m)console['log'](0x0);", "test_cases": [["3\n1 2 3\n2\n2 4", "1"], ["4\n5 4 7 0\n5\n1 2 3 4 5", "0"], ["3\n1 1 2\n4\n1 1 2 2", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar m=arr.shift()-0;\nvar b=arr.shift().split(\" \").map(Number);\nfor(var i=0;i<m;i++){\n   if(a.length-1<i || b[i]>a[i]){\n      console.log(1);\n      break;\n   }else if(b[i]<a[i]){\n      console.log(0);\n      break;\n   }\n}\nif(i==m)console.log(0);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1270, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar m = arr.shift() - 0;\nvar b = arr.shift().split(\" \").map(Number);\nfor (var i = 0; i < m; i++) {\n  if (a.length - 1 < i || b[i] > a[i]) {\n    console.log(1);\n    break;\n  } else if (b[i] < a[i]) {\n    console.log(0);\n    break;\n  }\n}\nif (i == m) {\n  console.log(0);\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5899048596236218, "ngram_match_score": 0.11253543719906677, "weighted_ngram_match_score": 0.26770255799645143, "syntax_match_score": 0.979381443298969, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02443_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var q=arr['shift']()-0x0;var s='';for(var i=0x0;i<q;i++){var [b,e]=arr[i]['split']('\\x20')['map'](Number);var x=a['slice'](0x0,b);var y=a['slice'](b,e)['reverse']();var z=a['slice'](e);a=x['concat'](y,z);}console['log'](a['join']('\\x20'));", "test_cases": [["8\n1 2 3 4 5 6 7 8\n2\n1 6\n3 8", "1 6 5 8 7 2 3 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [b,e]=arr[i].split(\" \").map(Number);\n   var x=a.slice(0,b);\n   var y=a.slice(b,e).reverse();\n   var z=a.slice(e);\n   a = x.concat(y,z);\n}\nconsole.log(a.join(\" \"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1271, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar q = arr.shift() - 0;\nvar s = \"\";\nfor (var i = 0; i < q; i++) {\n  var [b, e] = arr[i].split(\" \").map(Number);\n  var x = a.slice(0, b);\n  var y = a.slice(b, e).reverse();\n  var z = a.slice(e);\n  a = x.concat(y, z);\n}\nconsole.log(a.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5828576546611596, "ngram_match_score": 0.10709663471896738, "weighted_ngram_match_score": 0.22433398392567086, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02445_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var q=arr['shift']()-0x0;for(var i=0x0;i<q;i++){var [b,e,t]=arr[i]['split']('\\x20')['map'](Number);var k=e-b;for(var j=0x0;j<k;j++){[a[b+j],a[t+j]]=[a[t+j],a[b+j]];}}console['log'](a['join']('\\x20'));", "test_cases": [["11\n1 2 3 4 5 6 7 8 9 10 11\n1\n1 4 7", "1 8 9 10 5 6 7 2 3 4 11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nfor(var i=0;i<q;i++){\n   var [b,e,t]=arr[i].split(\" \").map(Number);\n   var k=e-b;\n   for(var j=0;j<k;j++){\n      [a[b+j],a[t+j]]= [a[t+j], a[b+j]];\n   }\n}\nconsole.log(a.join(\" \"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1272, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar q = arr.shift() - 0;\nfor (var i = 0; i < q; i++) {\n  var [b, e, t] = arr[i].split(\" \").map(Number);\n  var k = e - b;\n  for (var j = 0; j < k; j++) {\n    [a[b + j], a[t + j]] = [a[t + j], a[b + j]];\n  }\n}\nconsole.log(a.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5944067637733254, "ngram_match_score": 0.10372347658832518, "weighted_ngram_match_score": 0.27390357850497626, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02446_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var b=[];var memo='';for(var i=0x0;i<a['length'];i++){if(a[i]!==memo)b['push'](a[i]);memo=a[i];}console['log'](b['join']('\\x20'));", "test_cases": [["4\n1 2 2 4", "1 2 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar b=[];\nvar memo=\"\";\nfor(var i=0;i<a.length;i++){\n   if(a[i]!==memo)b.push(a[i]);\n   memo=a[i];\n}\nconsole.log(b.join(\" \"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1273, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar b = [];\nvar memo = \"\";\nfor (var i = 0; i < a.length; i++) {\n  if (a[i] !== memo) {\n    b.push(a[i]);\n  }\n  memo = a[i];\n}\nconsole.log(b.join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5860158981793387, "ngram_match_score": 0.12248673765065385, "weighted_ngram_match_score": 0.2771324106222568, "syntax_match_score": 0.9444444444444444, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02447_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=[];for(var i=0x0;i<n;i++)a['push'](arr[i]['split']('\\x20')['map'](Number));a['sort'](function(a,b){if(a[0x0]!=b[0x0])return a[0x0]-b[0x0];else return a[0x1]-b[0x1];});console['log'](a['join']('\\x0a')['replace'](/,/g,'\\x20'));", "test_cases": [["5\n4 7\n5 5\n2 3\n6 8\n2 1", "2 1\n2 3\n4 7\n5 5\n6 8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=[];\nfor(var i=0;i<n;i++)a.push(arr[i].split(\" \").map(Number));\na.sort(function(a,b){\n   if(a[0]!=b[0]) return a[0]-b[0];\n   else return a[1]-b[1];\n});\nconsole.log(a.join(\"\\n\").replace(/,/g,\" \"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1274, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = [];\nfor (var i = 0; i < n; i++) {\n  a.push(arr[i].split(\" \").map(Number));\n}\na.sort(function (a, b) {\n  if (a[0] != b[0]) {\n    return a[0] - b[0];\n  } else {\n    return a[1] - b[1];\n  }\n});\nconsole.log(a.join(\"\\n\").replace(/,/g, \" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5529125591018872, "ngram_match_score": 0.09335300259552465, "weighted_ngram_match_score": 0.2294083449231354, "syntax_match_score": 0.8888888888888888, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02451_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20');var myMap=new Map();for(var i=0x0;i<n;i++){myMap['set'](a[i],0x0);}var q=arr['shift']();var s='';for(var i=0x0;i<q;i++){s+=(myMap['has'](arr[i])?0x1:0x0)+'\\x0a';}console['log'](s['trim']());", "test_cases": [["4\n1 2 2 4\n3\n2\n3\n5", "1\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \");\nvar myMap = new Map();\nfor(var i=0;i<n;i++){\n   myMap.set(a[i], 0);\n}\nvar q=arr.shift();\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   s+=((myMap.has(arr[i]))?1:0)+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1275, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \");\nvar myMap = new Map();\nfor (var i = 0; i < n; i++) {\n  myMap.set(a[i], 0);\n}\nvar q = arr.shift();\nvar s = \"\";\nfor (var i = 0; i < q; i++) {\n  s += (myMap.has(arr[i]) ? 1 : 0) + \"\\n\";\n}\nconsole.log(s.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6180285143041875, "ngram_match_score": 0.18112912133684117, "weighted_ngram_match_score": 0.39812779302276563, "syntax_match_score": 0.8928571428571429, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02452_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var n=arr['shift']()-0x0;var a=arr['shift']()['split']('\\x20')['map'](Number);var m=arr['shift']()-0x0;var b=arr['shift']()['split']('\\x20')['map'](Number);var memo=0x0;var cnt=0x0;for(var i=0x0;i<m;i++){var num=b[i];for(var j=memo;j<n;j++){memo=j;if(num==a[j]){cnt++;break;}}}console['log'](cnt==m?0x1:0x0);", "test_cases": [["4\n1 2 3 4\n2\n2 4", "1"], ["4\n1 2 3 4\n3\n1 2 5", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar m=arr.shift()-0;\nvar b=arr.shift().split(\" \").map(Number);\nvar memo=0;\nvar cnt = 0;\nfor(var i=0;i<m;i++){\n   var num=b[i];\n   for(var j=memo;j<n;j++){\n      memo=j;\n      if(num==a[j]){\n         cnt++;\n         break;\n      }\n   }\n}\nconsole.log((cnt==m)?1:0);\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1276, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift() - 0;\nvar a = arr.shift().split(\" \").map(Number);\nvar m = arr.shift() - 0;\nvar b = arr.shift().split(\" \").map(Number);\nvar memo = 0;\nvar cnt = 0;\nfor (var i = 0; i < m; i++) {\n  var num = b[i];\n  for (var j = memo; j < n; j++) {\n    memo = j;\n    if (num == a[j]) {\n      cnt++;\n      break;\n    }\n  }\n}\nconsole.log(cnt == m ? 1 : 0);\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.59899900017342, "ngram_match_score": 0.13844013559073853, "weighted_ngram_match_score": 0.3213856523369838, "syntax_match_score": 0.9361702127659575, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02455_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var q=arr['shift']()-0x0;var str='';var set=new Set();for(var i=0x0;i<q;i++){var [a,b]=arr[i]['split']('\\x20');if(a=='0'){set['add'](b);str+=set['size']+'\\x0a';}else{str+=(set['has'](b)?0x1:0x0)+'\\x0a';}}console['log'](str['trim']());", "test_cases": [["7\n0 1\n0 2\n0 3\n0 2\n0 4\n1 3\n1 10", "1\n2\n3\n3\n4\n1\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar  set = new Set();\nfor(var i=0;i<q;i++){\n   var [a,b]=arr[i].split(\" \");\n   if(a==\"0\"){\n      set.add(b);\n      str+=set.size+\"\\n\";\n   }else {\n      str+=((set.has(b))?1:0)+\"\\n\";\n   }\n}\nconsole.log(str.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1277, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar q = arr.shift() - 0;\nvar str = \"\";\nvar set = new Set();\nfor (var i = 0; i < q; i++) {\n  var [a, b] = arr[i].split(\" \");\n  if (a == \"0\") {\n    set.add(b);\n    str += set.size + \"\\n\";\n  } else {\n    str += (set.has(b) ? 1 : 0) + \"\\n\";\n  }\n}\nconsole.log(str.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5817926763156926, "ngram_match_score": 0.14694106251955755, "weighted_ngram_match_score": 0.32837779089136143, "syntax_match_score": 0.8518518518518519, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02456_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var q=arr['shift']()-0x0;var str='';var set=new Map();for(var i=0x0;i<q;i++){var [a,b]=arr[i]['split']('\\x20');if(a=='0'){set['set'](b,0x0);str+=set['size']+'\\x0a';}else if(a=='1'){str+=(set['has'](b)?0x1:0x0)+'\\x0a';}else{set['delete'](b);}}console['log'](str['trim']());", "test_cases": [["8\n0 1\n0 2\n0 3\n2 2\n1 1\n1 2\n1 3\n0 2", "1\n2\n3\n1\n0\n1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar  set = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b]=arr[i].split(\" \");\n   if(a==\"0\"){\n      set.set(b,0);\n      str+=set.size+\"\\n\";\n   }else if(a==\"1\") {\n      str+=((set.has(b))?1:0)+\"\\n\";\n   } else{\n      set.delete(b);\n   }\n}\nconsole.log(str.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1278, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar q = arr.shift() - 0;\nvar str = \"\";\nvar set = new Map();\nfor (var i = 0; i < q; i++) {\n  var [a, b] = arr[i].split(\" \");\n  if (a == \"0\") {\n    set.set(b, 0);\n    str += set.size + \"\\n\";\n  } else if (a == \"1\") {\n    str += (set.has(b) ? 1 : 0) + \"\\n\";\n  } else {\n    set.delete(b);\n  }\n}\nconsole.log(str.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5826310273661146, "ngram_match_score": 0.1449297529190572, "weighted_ngram_match_score": 0.32845149940254403, "syntax_match_score": 0.8571428571428571, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00101775042837704, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02837562882433997}}
{"filename": "p02459_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var q=arr['shift']()-0x0;var str='';var map=new Map();for(var i=0x0;i<q;i++){var [a,b,c]=arr[i]['split']('\\x20');if(a=='0')map['set'](b,c);else str+=map['get'](b)+'\\x0a';}console['log'](str['trim']());", "test_cases": [["7\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n0 black 8\n1 black", "1\n4\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar map = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b,c]=arr[i].split(\" \");\n   if(a==\"0\")map.set(b,c);\n   else str+=map.get(b) + \"\\n\";\n}\nconsole.log(str.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1279, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar q = arr.shift() - 0;\nvar str = \"\";\nvar map = new Map();\nfor (var i = 0; i < q; i++) {\n  var [a, b, c] = arr[i].split(\" \");\n  if (a == \"0\") {\n    map.set(b, c);\n  } else {\n    str += map.get(b) + \"\\n\";\n  }\n}\nconsole.log(str.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6136546782003605, "ngram_match_score": 0.16816764188435615, "weighted_ngram_match_score": 0.3568736061283533, "syntax_match_score": 0.9295774647887324, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02460_1", "type": "JavaScript", "obfuscated": "var input=require('fs')['readFileSync']('/dev/stdin','utf8');var arr=input['trim']()['split']('\\x0a');var q=arr['shift']()-0x0;var str='';var map=new Map();for(var i=0x0;i<q;i++){var [a,b,c]=arr[i]['split']('\\x20');if(a=='0')map['set'](b,c);else if(a=='1')str+=(map['has'](b)?map['get'](b):'0')+'\\x0a';else map['delete'](b);}console['log'](str['trim']());", "test_cases": [["8\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red", "1\n4\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar map = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b,c]=arr[i].split(\" \");\n   if(a==\"0\")map.set(b,c);\n   else if(a==\"1\")str+=((map.has(b)) ? map.get(b) : \"0\") + \"\\n\";\n   else map.delete(b);\n}\nconsole.log(str.trim());\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1280, "deobfuscated": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar arr = input.trim().split(\"\\n\");\nvar q = arr.shift() - 0;\nvar str = \"\";\nvar map = new Map();\nfor (var i = 0; i < q; i++) {\n  var [a, b, c] = arr[i].split(\" \");\n  if (a == \"0\") {\n    map.set(b, c);\n  } else if (a == \"1\") {\n    str += (map.has(b) ? map.get(b) : \"0\") + \"\\n\";\n  } else {\n    map.delete(b);\n  }\n}\nconsole.log(str.trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6152855712491831, "ngram_match_score": 0.19730916316336425, "weighted_ngram_match_score": 0.4132584091896901, "syntax_match_score": 0.8505747126436781, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02471_1", "type": "JavaScript", "obfuscated": "function euc(a,b){var r0=a;var r1=b;var x0=0x1;var x1=0x0;var y0=0x0;var y1=0x1;while(r1>0x0){var q=Math['floor'](r0/r1);var r2=r0%r1;var x2=x0-q*x1;var y2=y0-q*y1;r0=r1;r1=r2;x0=x1;x1=x2;y0=y1;y1=y2;}return[x0,y0];}var input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']();var nums=input['split']('\\x20')['map'](function(num){return+num;});var a=nums[0x0];var b=nums[0x1];console['log'](euc(a,b)['join']('\\x20'));", "test_cases": [["4 12", "1 0"], ["3 8", "3 -1"]], "original": "function euc(a, b) {\n    var r0 = a;\n    var r1 = b;\n    var x0 = 1;\n    var x1 = 0;\n    var y0 = 0;\n    var y1 = 1;\n\n    while (r1 > 0) {\n        var q = Math.floor(r0 / r1);\n        var r2 = r0 % r1;\n        var x2 = x0 - q * x1;\n        var y2 = y0 - q * y1;\n\n        r0 = r1;\n        r1 = r2;\n        x0 = x1;\n        x1 = x2;\n        y0 = y1;\n        y1 = y2;\n    }\n    return [x0, y0];\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar nums = input.split(' ').map(function(num){return +num;});\nvar a = nums[0];\nvar b = nums[1];\n\nconsole.log(euc(a, b).join(' '));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1281, "deobfuscated": "function euc(a, b) {\n  var r0 = a;\n  var r1 = b;\n  var x0 = 1;\n  var x1 = 0;\n  var y0 = 0;\n  var y1 = 1;\n  while (r1 > 0) {\n    var q = Math.floor(r0 / r1);\n    var r2 = r0 % r1;\n    var x2 = x0 - q * x1;\n    var y2 = y0 - q * y1;\n    r0 = r1;\n    r1 = r2;\n    x0 = x1;\n    x1 = x2;\n    y0 = y1;\n    y1 = y2;\n  }\n  return [x0, y0];\n}\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();\nvar nums = input.split(\" \").map(function (num) {\n  return +num;\n});\nvar a = nums[0];\nvar b = nums[1];\nconsole.log(euc(a, b).join(\" \"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.9378618062893059, "ngram_match_score": 0.8704649575469763, "weighted_ngram_match_score": 0.9099677748566245, "syntax_match_score": 1.0, "dataflow_match_score": 0.9710144927536232}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02697_1", "type": "JavaScript", "obfuscated": "const processData=lines=>{let [n,m]=lines[0x0]['split']('\\x20')['map'](x=>+x);if(n%0x2===0x1){let end=n-0x1;let start=0x1;while(m){console['log'](start++ +'\\x20'+end--);m--;}}else{let end=n/0x2+0x1;let start=n/0x2;while(m){console['log'](start--+'\\x20'+end++);m--;}}};let i='';process['stdin']['on']('data',c=>i+=c);process['stdin']['on']('end',()=>{const {EOL:EOL}=require('os');const lines=i['split'](EOL);processData(lines);});", "test_cases": [["4 1", "2 3"], ["7 3", "1 6\n2 5\n3 4"]], "original": "const processData = (lines) => {\n  let [n, m] = lines[0].split(' ').map(x => +x)\n  if (n%2 === 1) {\n    let end = n - 1\n    let start = 1\n    while (m) {\n      console.log(`${start++} ${end--}`)\n      m--\n    }\n  } else {\n    let end = n/2+1\n    let start = n/2\n    while (m) {\n      console.log(`${start--} ${end++}`)\n      m--\n    }\n  }\n}\n\nlet i = ''\nprocess.stdin.on('data', c => i += c)\nprocess.stdin.on('end', () => {\n  const {EOL} = require('os')\n  const lines = i.split(EOL) /*your input text, split by lines*/\n  processData(lines)\n})\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1282, "deobfuscated": "const processData = lines => {\n  let [n, m] = lines[0].split(\" \").map(x => +x);\n  if (n % 2 === 1) {\n    let end = n - 1;\n    let start = 1;\n    while (m) {\n      console.log(start++ + \" \" + end--);\n      m--;\n    }\n  } else {\n    let end = n / 2 + 1;\n    let start = n / 2;\n    while (m) {\n      console.log(start-- + \" \" + end++);\n      m--;\n    }\n  }\n};\nlet i = \"\";\nprocess.stdin.on(\"data\", c => i += c);\nprocess.stdin.on(\"end\", () => {\n  const {\n    EOL: EOL\n  } = require(\"os\");\n  const lines = i.split(EOL);\n  processData(lines);\n});\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4055042665967331, "ngram_match_score": 0.3062756322236733, "weighted_ngram_match_score": 0.3700271484489734, "syntax_match_score": 0.66, "dataflow_match_score": 0.2857142857142857}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02882_1", "type": "JavaScript", "obfuscated": "inp=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\\x0a');l=inp['shift']()['split']('\\x20');a=l['shift']()*0x1;b=l['shift']()*0x1;x=l['shift']()*0x1;l=0x0;r=0x5a;mid=0x2d;c=0x0;S=a*a*b;if(S/0x2<x){while(l<r){s=S-a*a*Math['tan'](mid/0xb4*Math['PI'])/0x2*a;if(x<s){l=mid;}else{r=mid;}mid=(l+r)/0x2;c++;if(c>0xc8){break;}}console['log'](mid['toFixed'](0xa));}else{while(l<r){s=b*b*Math['tan'](mid/0xb4*Math['PI'])/0x2*a;if(x<s){r=mid;}else{l=mid;}mid=(l+r)/0x2;c++;if(c>0xc8){break;}}console['log']((0x5a-mid)['toFixed'](0xa));}", "test_cases": [["2 2 4", "45.0000000000"], ["12 21 10", "89.7834636934"], ["3 1 8", "4.2363947991"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\na = l.shift() * 1\nb = l.shift() * 1 \nx = l.shift() * 1\nl = 0\nr = 90\nmid = 45\nc = 0\nS = a * a * b\nif (S / 2 < x) {\n    while (l<r) {\n        s = S - (a * a * Math.tan(mid / 180 * Math.PI)) / 2 * a\n        if (x < s) {\n            l = mid\n        } else {\n            r = mid\n        }\n        mid = (l + r) / 2\n        c++\n        if (c>200) {\n            break;\n        }\n    }    \n    console.log(mid.toFixed(10))\n} else {\n    while (l<r) {\n        s = (b * b * Math.tan(mid / 180 * Math.PI)) / 2 * a\n        if (x < s) {\n            r = mid\n        } else {\n            l = mid\n        }\n        mid = (l + r) / 2\n        c++\n        if (c>200) {\n            break;\n        }\n    }  \n    console.log((90 - mid).toFixed(10))\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1283, "deobfuscated": "inp = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\nl = inp.shift().split(\" \");\na = l.shift() * 1;\nb = l.shift() * 1;\nx = l.shift() * 1;\nl = 0;\nr = 90;\nmid = 45;\nc = 0;\nS = a * a * b;\nif (S / 2 < x) {\n  while (l < r) {\n    s = S - a * a * Math.tan(mid / 180 * Math.PI) / 2 * a;\n    if (x < s) {\n      l = mid;\n    } else {\n      r = mid;\n    }\n    mid = (l + r) / 2;\n    c++;\n    if (c > 200) {\n      break;\n    }\n  }\n  console.log(mid.toFixed(10));\n} else {\n  while (l < r) {\n    s = b * b * Math.tan(mid / 180 * Math.PI) / 2 * a;\n    if (x < s) {\n      r = mid;\n    } else {\n      l = mid;\n    }\n    mid = (l + r) / 2;\n    c++;\n    if (c > 200) {\n      break;\n    }\n  }\n  console.log((90 - mid).toFixed(10));\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7164618382297262, "ngram_match_score": 0.48000820276516315, "weighted_ngram_match_score": 0.5116253136757543, "syntax_match_score": 0.8742138364779874, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p02902_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const M=input[0x0]['split']('\\x20')[0x1]-0x0;var direct=[];for(var i=0x0;i<=N;i++){direct['push']([]);}for(var i=0x1;i<input['length'];i++){direct[input[i]['split']('\\x20')[0x0]-0x0]['push'](input[i]['split']('\\x20')[0x1]-0x0);}var memo=[];for(var i=0x1;i<=N;i++){memo['push']([i]);}var temp;var str;while(memo['length']>0x0){str='';temp=[];memo['forEach'](e=>{direct[e[e['length']-0x1]]['forEach'](f=>{temp['push'](e['concat']([f]));});});memo=temp['slice']();memo['forEach'](e=>{if(e[e['length']-0x1]===e[0x0]){temp=e['slice']();temp['shift']();str=temp['length']+'\\x0a'+temp['join']('\\x0a');}});if(str!==''){console['log'](str);return;}}console['log'](-0x1);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4 5\n1 2\n2 3\n2 4\n4 1\n4 3", "3\n1\n2\n4"], ["4 5\n1 2\n2 3\n2 4\n1 4\n4 3", "-1"], ["6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n5 1\n5 2\n6 1\n6 2", "4\n2\n3\n4\n5"]], "original": "\n\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  var direct=[];\n  for(var i=0;i<=N;i++){\n    direct.push([]);\n  }\n  for(var i=1;i<input.length;i++){\n    direct[input[i].split(' ')[0]-0].push(input[i].split(' ')[1]-0);\n  }\n  var memo=[];\n  for(var i=1;i<=N;i++){\n    memo.push([i]);\n  }\n  var temp;\n  var str;\n  while(memo.length>0){\n    str='';\n    temp=[];\n    memo.forEach(e=>{\n      direct[e[e.length-1]].forEach(f=>{\n        temp.push(e.concat([f]));\n      });\n    });\n    memo=temp.slice();\n    memo.forEach(e=>{\n      if(e[e.length-1]===e[0]){\n        temp=e.slice();\n        temp.shift();\n        str=temp.length+\"\\n\"+temp.join(\"\\n\");\n      }\n    });\n    if(str!==''){\n      console.log(str);\n      return;\n    }\n  }\n  console.log(-1);\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1284, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const M = input[0].split(\" \")[1] - 0;\n  var direct = [];\n  for (var i = 0; i <= N; i++) {\n    direct.push([]);\n  }\n  for (var i = 1; i < input.length; i++) {\n    direct[input[i].split(\" \")[0] - 0].push(input[i].split(\" \")[1] - 0);\n  }\n  var memo = [];\n  for (var i = 1; i <= N; i++) {\n    memo.push([i]);\n  }\n  var temp;\n  var str;\n  while (memo.length > 0) {\n    str = \"\";\n    temp = [];\n    memo.forEach(e => {\n      direct[e[e.length - 1]].forEach(f => {\n        temp.push(e.concat([f]));\n      });\n    });\n    memo = temp.slice();\n    memo.forEach(e => {\n      if (e[e.length - 1] === e[0]) {\n        temp = e.slice();\n        temp.shift();\n        str = temp.length + \"\\n\" + temp.join(\"\\n\");\n      }\n    });\n    if (str !== \"\") {\n      console.log(str);\n      return;\n    }\n  }\n  console.log(-1);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.582718346407655, "ngram_match_score": 0.10060729692926984, "weighted_ngram_match_score": 0.2565818781750342, "syntax_match_score": 1.0, "dataflow_match_score": 0.9736842105263158}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03043_1", "type": "JavaScript", "obfuscated": "function main(input){input=input['split']('\\x20')['map'](Number);const N=input[0x0];const K=input[0x1];var result=0x0;for(i=0x1;i<=N;i++){var tmp=0x1/N;var now=i;while(now<K){now*=0x2;tmp/=0x2;}result+=tmp;}console['log'](result['toString']()['slice'](0x0,0xe));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 10", "0.145833333333"], ["100000 5", "0.999973749998"]], "original": "function main(input){\n  input = input.split(' ').map(Number);\n  const N = input[0];\n  const K = input[1];\n  \n  var result = 0;\n  \n  for(i = 1;i <= N;i++){\n    var tmp = 1/N;\n  \tvar now = i;\n  \twhile(now < K){\n      now *= 2;\n      tmp /= 2;\n    }\n    result += tmp;\n  }\n  \n  console.log(result.toString().slice(0,14));\n}\nmain(require('fs').readFileSync('/dev/stdin','utf8'));\n\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1285, "deobfuscated": "function main(input) {\n  input = input.split(\" \").map(Number);\n  const N = input[0];\n  const K = input[1];\n  var result = 0;\n  for (i = 1; i <= N; i++) {\n    var tmp = 1 / N;\n    var now = i;\n    while (now < K) {\n      now *= 2;\n      tmp /= 2;\n    }\n    result += tmp;\n  }\n  console.log(result.toString().slice(0, 14));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7471588807649998, "ngram_match_score": 0.43624397965447126, "weighted_ngram_match_score": 0.5523915434055282, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03454_1", "type": "JavaScript", "obfuscated": "function Main(input){const S=parseInt(input);const MOD=0x3b9aca00+0x7;var upr=0x0,i=0x1;do{if(S<=Math['pow'](0xa,i-0x1)*0x9*i)upr=i;i++;}while(!upr);i=Math['floor'](S/upr);var ans=0x0;var l=Math['pow'](0xa,upr-0x1),r=l+i-0x1;var flr=i*f(l);do{if(S%i)ans++;else ans+=powmod(0xa,S/ i-0x1,MOD)*0x9-i+0x1;}while(--i);while(--l){flr+=f(l);if(flr>S)flr-=f(r--);if(flr===S)ans++;}console['log']((ans+MOD)%MOD);}function powmod(a,b,c){const N=0x2710;var rt=0x1;while(b){if(b&0x1)rt=(Math['floor'](a/N)*rt%c*N+a%N*rt)%c;a=(Math['floor'](a/N)*a%c*N+a%N*a)%c;b>>>=0x1;}return rt;}function f(n){if(n<0xa)return 0x1;if(n<0x64)return 0x2;if(n<0x3e8)return 0x3;if(n<0x2710)return 0x4;if(n<0x186a0)return 0x5;if(n<0xf4240)return 0x6;if(n<0x989680)return 0x7;return 0x8;}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["1", "9"], ["2", "98"], ["123", "460191684"], ["36018", "966522825"], ["1000", "184984484"]], "original": "function Main(input) {\n\tconst S = parseInt(input);\n\tconst MOD = 1e9 + 7;\n\tvar upr = 0, i = 1;\n\tdo{\n\t\tif(S <= Math.pow(10, i - 1) * 9 * i)upr = i;\n\t\ti++;\n\t}while(!upr)\n\t\n\ti = Math.floor(S / upr);\n\tvar ans = 0;\n\tvar l = Math.pow(10, upr - 1), r = l + i - 1;\n\tvar flr = i * f(l);\n\tdo{\n\t\tif(S % i)ans++;\n\t\telse ans += powmod(10, S / i - 1, MOD) * 9 - i + 1;\n\t}while(--i)\n\t\n\twhile(--l){\n\t\tflr += f(l);\n\t\tif(flr > S)flr -= f(r--);\n\t\tif(flr === S)ans++;\n\t}\n\t\n\tconsole.log((ans + MOD) % MOD);\n}\n\nfunction powmod(a, b, c){//a^b%c\n\tconst N = 1e4;//オーバーフロー防止\n\tvar rt = 1;\n\twhile(b){\n\t\tif(b & 1) rt = (Math.floor(a / N) * rt % c * N + a % N * rt) % c;\n\t\ta = (Math.floor(a / N) * a % c * N + a % N * a) % c\n\t\tb >>>= 1;\n\t}\n\treturn rt;\n}\n\nfunction f(n){\n\tif(n < 10)return 1;\n\tif(n < 100)return 2;\n\tif(n < 1000)return 3;\n\tif(n < 10000)return 4;\n\tif(n < 100000)return 5;\n\tif(n < 1000000)return 6;\n\tif(n < 10000000)return 7;\n\treturn 8;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1286, "deobfuscated": "function Main(input) {\n  const S = parseInt(input);\n  const MOD = 1000000007;\n  var upr = 0;\n  var i = 1;\n  do {\n    if (S <= Math.pow(10, i - 1) * 9 * i) {\n      upr = i;\n    }\n    i++;\n  } while (!upr);\n  i = Math.floor(S / upr);\n  var ans = 0;\n  var l = Math.pow(10, upr - 1);\n  var r = l + i - 1;\n  var flr = i * f(l);\n  do {\n    if (S % i) {\n      ans++;\n    } else {\n      ans += powmod(10, S / i - 1, MOD) * 9 - i + 1;\n    }\n  } while (--i);\n  while (--l) {\n    flr += f(l);\n    if (flr > S) {\n      flr -= f(r--);\n    }\n    if (flr === S) {\n      ans++;\n    }\n  }\n  console.log((ans + MOD) % MOD);\n}\nfunction powmod(a, b, c) {\n  const N = 10000;\n  var rt = 1;\n  while (b) {\n    if (b & 1) {\n      rt = (Math.floor(a / N) * rt % c * N + a % N * rt) % c;\n    }\n    a = (Math.floor(a / N) * a % c * N + a % N * a) % c;\n    b >>>= 1;\n  }\n  return rt;\n}\nfunction f(n) {\n  if (n < 10) {\n    return 1;\n  }\n  if (n < 100) {\n    return 2;\n  }\n  if (n < 1000) {\n    return 3;\n  }\n  if (n < 10000) {\n    return 4;\n  }\n  if (n < 100000) {\n    return 5;\n  }\n  if (n < 1000000) {\n    return 6;\n  }\n  if (n < 10000000) {\n    return 7;\n  }\n  return 8;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5596122897381282, "ngram_match_score": 0.45789492150077177, "weighted_ngram_match_score": 0.6061476327045786, "syntax_match_score": 0.8235294117647058, "dataflow_match_score": 0.3508771929824561}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.000711698840578201, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.00694444444444442}}
{"filename": "p03459_1", "type": "JavaScript", "obfuscated": "var GET=(function(){function f(s){return new g(s);}function g(s){this['_s']=s['trim']()['split']('\\x0a');this['_y']=0x0;}g['prototype']['a']=function(f){var s=this['_s'],y=this['_y'],r;if(typeof s[y]==='string')s[y]=s[y]['split']('\\x20')['reverse']();r=s[y]['pop']();if(!s[y]['length'])this['_y']++;return f?r:+r;};g['prototype']['l']=function(f){var s=this['_s'][this['_y']++]['split']('\\x20');return f?s:s['map'](a=>+a);};g['prototype']['m']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n)['map'](a=>a['split']('\\x20'));return f?r:r['map'](a=>a['map'](a=>+a));};g['prototype']['r']=function(n,f){var r=this['_s']['slice'](this['_y'],this['_y']+=n);return f?r:r['map'](a=>+a);};return f;}());var o=GET(require('fs')['readFileSync']('/dev/stdin','utf8'));console['log'](main());function main(){var n=o['a']();var m=o['m'](n);var t=0x0,x=0x0,y=0x0;for(var i=0x0;i<n;i++){var dxy=Math['abs'](x-m[i][0x1]);dxy+=Math['abs'](y-m[i][0x2]);var dt=m[i][0x0]-t;if(dxy>dt||dxy%0x2!==dt%0x2)return'No';x=m[i][0x1];y=m[i][0x2];t=m[i][0x0];}return'Yes';}", "test_cases": [["2\n3 1 2\n6 1 1", "Yes"], ["1\n2 100 100", "No"], ["2\n5 1 1\n100 1 1", "No"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var m = o.m(n);\n  var t = 0, x = 0, y = 0;\n  for(var i = 0; i < n; i++){\n    var dxy = Math.abs(x - m[i][1]);\n    dxy += Math.abs(y - m[i][2]);\n    var dt = m[i][0] - t;\n    if(dxy > dt || dxy % 2 !== dt % 2)return \"No\";\n    x = m[i][1]; y = m[i][2]; t = m[i][0];\n  }\n  return \"Yes\";\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1287, "deobfuscated": "var GET = function () {\n  function f(s) {\n    return new g(s);\n  }\n  function g(s) {\n    this._s = s.trim().split(\"\\n\");\n    this._y = 0;\n  }\n  g.prototype.a = function (f) {\n    var s = this._s;\n    var y = this._y;\n    var r;\n    if (typeof s[y] === \"string\") {\n      s[y] = s[y].split(\" \").reverse();\n    }\n    r = s[y].pop();\n    if (!s[y].length) {\n      this._y++;\n    }\n    if (f) {\n      return r;\n    } else {\n      return +r;\n    }\n  };\n  g.prototype.l = function (f) {\n    var s = this._s[this._y++].split(\" \");\n    if (f) {\n      return s;\n    } else {\n      return s.map(a => +a);\n    }\n  };\n  g.prototype.m = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n).map(a => a.split(\" \"));\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => a.map(a => +a));\n    }\n  };\n  g.prototype.r = function (n, f) {\n    var r = this._s.slice(this._y, this._y += n);\n    if (f) {\n      return r;\n    } else {\n      return r.map(a => +a);\n    }\n  };\n  return f;\n}();\nvar o = GET(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(main());\nfunction main() {\n  var n = o.a();\n  var m = o.m(n);\n  var t = 0;\n  var x = 0;\n  var y = 0;\n  for (var i = 0; i < n; i++) {\n    var dxy = Math.abs(x - m[i][1]);\n    dxy += Math.abs(y - m[i][2]);\n    var dt = m[i][0] - t;\n    if (dxy > dt || dxy % 2 !== dt % 2) {\n      return \"No\";\n    }\n    x = m[i][1];\n    y = m[i][2];\n    t = m[i][0];\n  }\n  return \"Yes\";\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.657171817290323, "ngram_match_score": 0.21644431844249493, "weighted_ngram_match_score": 0.574186270556854, "syntax_match_score": 0.8380566801619433, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.26086956521739135, "length_score": -0.26086956521739135, "increase_maintainability": -0.03771256102201237, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.035608308605341144, "new_decrease_halstead_effort": -0.0732615721661316}}
{"filename": "p03552_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');if(input[input['length']-0x1]===''){input['pop']();}const N=input[0x0]['split']('\\x20')[0x0]-0x0;const Z=input[0x0]['split']('\\x20')[0x1]-0x0;const W=input[0x0]['split']('\\x20')[0x2]-0x0;const a=input[0x1]['split']('\\x20')['map'](e=>{return e-0x0;});if(a['length']===0x1){console['log'](Math['abs'](W-a[0x0]));return;}var x,y;x=new Array(N);y=new Array(N);for(var i=N-0x1;i>=0x0;i--){if(i===N-0x1){y[i]=Math['abs'](a[N-0x1]-a[N-0x2]);x[i]=Math['abs'](a[N-0x1]-a[N-0x2]);continue;}y[i]=Math['min'](...x['slice'](i+0x1),i!==0x0?Math['abs'](a[i-0x1]-a[N-0x1]):Math['abs'](Z-a[N-0x1]));x[i]=Math['max'](...y['slice'](i+0x1),i!==0x0?Math['abs'](a[i-0x1]-a[N-0x1]):Math['abs'](W-a[N-0x1]));}console['log'](Math['max'](...x));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 100 100\n10 1000 100", "900"], ["3 100 1000\n10 100 100", "900"], ["5 1 1\n1 1 1 1 1", "0"], ["1 1 1\n1000000000", "999999999"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const Z=input[0].split(' ')[1]-0;\n  const W=input[0].split(' ')[2]-0;\n  const a=input[1].split(' ').map(e=>{\n    return e-0;\n  });\n  if(a.length===1){\n    console.log(Math.abs(W-a[0]));\n    return;\n  }\n  var x,y;\n  x=new Array(N);\n  y=new Array(N);\n  for(var i=N-1;i>=0;i--){\n    if(i===N-1){\n      y[i]=Math.abs(a[N-1]-a[N-2]);\n      x[i]=Math.abs(a[N-1]-a[N-2]);\n      continue;\n    }\n    y[i]=Math.min(...x.slice(i+1),i!==0?Math.abs(a[i-1]-a[N-1]):Math.abs(Z-a[N-1]));\n    x[i]=Math.max(...y.slice(i+1),i!==0?Math.abs(a[i-1]-a[N-1]):Math.abs(W-a[N-1]));\n  }\n  console.log(Math.max(...x));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1288, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  if (input[input.length - 1] === \"\") {\n    input.pop();\n  }\n  const N = input[0].split(\" \")[0] - 0;\n  const Z = input[0].split(\" \")[1] - 0;\n  const W = input[0].split(\" \")[2] - 0;\n  const a = input[1].split(\" \").map(e => {\n    return e - 0;\n  });\n  if (a.length === 1) {\n    console.log(Math.abs(W - a[0]));\n    return;\n  }\n  var x;\n  var y;\n  x = new Array(N);\n  y = new Array(N);\n  for (var i = N - 1; i >= 0; i--) {\n    if (i === N - 1) {\n      y[i] = Math.abs(a[N - 1] - a[N - 2]);\n      x[i] = Math.abs(a[N - 1] - a[N - 2]);\n      continue;\n    }\n    y[i] = Math.min(...x.slice(i + 1), i !== 0 ? Math.abs(a[i - 1] - a[N - 1]) : Math.abs(Z - a[N - 1]));\n    x[i] = Math.max(...y.slice(i + 1), i !== 0 ? Math.abs(a[i - 1] - a[N - 1]) : Math.abs(W - a[N - 1]));\n  }\n  console.log(Math.max(...x));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5088542046158363, "ngram_match_score": 0.019789904473779995, "weighted_ngram_match_score": 0.07392417228682352, "syntax_match_score": 0.9797979797979798, "dataflow_match_score": 0.9619047619047619}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.00016508998922393214, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.0038022813688212143, "new_decrease_halstead_effort": -0.0038022813688214363}}
{"filename": "p03626_1", "type": "JavaScript", "obfuscated": "function main(input){var tmp=input['split'](/\\r\\n|\\r|\\n/);var N=Number(tmp[0x0]);var S=tmp[0x1]['split']('');var res;var i=0x0;var isYoko;if(S[i]==S[i+0x1]){res=0x6;i=i+0x2;isYoko=!![];}else{res=0x3;i++;isYoko=![];}for(;i<N-0x1;i++){if(S[i]==S[i+0x1]){if(isYoko){res=res*0x3;}else{res=res*0x2;}i++;isYoko=!![];}else{if(!isYoko){res=res*0x2;}isYoko=![];}}if(i<N){if(!isYoko){res=res*0x2;}}console['log'](res%0x3b9aca07);}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3\naab\nccb", "6"], ["1\nZ\nZ", "3"], ["52\nRvvttdWIyyPPQFFZZssffEEkkaSSDKqcibbeYrhAljCCGGJppHHn\nRLLwwdWIxxNNQUUXXVVMMooBBaggDKqcimmeYrhAljOOTTJuuzzn", "958681902"]], "original": "function main(input){\n    var tmp = input.split(/\\r\\n|\\r|\\n/);\n    var N = Number(tmp[0]);\n    var S = tmp[1].split('');\n    //console.log(N, S);\n\n    var res;\n    var i = 0;\n    var isYoko;\n    if(S[i]==S[i+1]){\n        res = 6;\n        i = i+2;\n        isYoko = true;\n    }else{\n        res = 3;\n        i++;\n        isYoko = false;\n    }\n\n    for(; i<N-1; i++){\n        if(S[i]==S[i+1]){\n            if(isYoko){\n                res = res * 3;\n            }else{\n                res = res * 2;\n            }\n            i++;\n            isYoko = true;\n        }else{\n            if(!isYoko){\n                res = res * 2;\n            }\n            isYoko = false;\n        }\n    }\n\n    if(i<N){\n        if(!isYoko){\n            res = res * 2;\n        }\n    }\n\n    console.log(res%1000000007);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1289, "deobfuscated": "function main(input) {\n  var tmp = input.split(/\\r\\n|\\r|\\n/);\n  var N = Number(tmp[0]);\n  var S = tmp[1].split(\"\");\n  var res;\n  var i = 0;\n  var isYoko;\n  if (S[i] == S[i + 1]) {\n    res = 6;\n    i = i + 2;\n    isYoko = true;\n  } else {\n    res = 3;\n    i++;\n    isYoko = false;\n  }\n  for (; i < N - 1; i++) {\n    if (S[i] == S[i + 1]) {\n      if (isYoko) {\n        res = res * 3;\n      } else {\n        res = res * 2;\n      }\n      i++;\n      isYoko = true;\n    } else {\n      if (!isYoko) {\n        res = res * 2;\n      }\n      isYoko = false;\n    }\n  }\n  if (i < N) {\n    if (!isYoko) {\n      res = res * 2;\n    }\n  }\n  console.log(res % 1000000007);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7628959987123086, "ngram_match_score": 0.4386595613507496, "weighted_ngram_match_score": 0.6311062516803032, "syntax_match_score": 1.0, "dataflow_match_score": 0.9818181818181818}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.00782396674665864, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.06493506493506496, "new_decrease_halstead_effort": 0.15253374076903514}}
{"filename": "p03740_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var x=nextbig(),y=nextbig();if(x-y<0x2&&y-x<0x2)return'Brown';return'Alice';}", "test_cases": [["2 1", "Brown"], ["5 0", "Alice"], ["0 0", "Brown"], ["4 8", "Alice"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var x = nextbig(), y = nextbig();\n  if(x-y < 2 && y-x < 2)return \"Brown\";\n  return \"Alice\";\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1290, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var x = nextbig();\n  var y = nextbig();\n  if (x - y < 2 && y - x < 2) {\n    return \"Brown\";\n  }\n  return \"Alice\";\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.508639314235097, "ngram_match_score": 0.034783379610894415, "weighted_ngram_match_score": 0.13230399781142133, "syntax_match_score": 0.8674698795180723, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.07894736842105265, "length_score": -0.07894736842105265, "increase_maintainability": -0.016307804869021947, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.032558139534883734, "new_decrease_halstead_effort": 0.019883652561791143}}
{"filename": "p03781_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var X=input[0x0]-0x0;console['log'](Math['ceil']((0x2*Math['abs'](X)+0x1/0x4)**(0x1/0x2)-0x1/0x2));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["6", "3"], ["2", "2"], ["11", "5"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var X=input[0]-0;\n\n  console.log(Math.ceil((2*Math.abs(X)+1/4)**(1/2)-1/2));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1291, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var X = input[0] - 0;\n  console.log(Math.ceil((Math.abs(X) * 2 + 1 / 4) ** (1 / 2) - 1 / 2));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.4703724961754789, "ngram_match_score": 0.04227119852487812, "weighted_ngram_match_score": 0.13467333163158285, "syntax_match_score": 0.7045454545454546, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03791_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(a){return a?cin[cid++]:+cin[cid++];}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var mod=0x3b9aca00+0x7;function mul(){for(var a=arguments,r=a[0x0],i=a['length'];--i;)r=((r>>0x10)*a[i]%mod*0x10000+(r&0xffff)*a[i])%mod;return r;}var myOut=main();if(myOut!==undefined)console['log'](myOut);function main(){var n=next();var x=nexts(n);var ans=0x1,id=0x1,rem=0x0;for(var i=0x0;i<n;i++){rem++;ans=mul(ans,rem);if(x[i]<id){rem--;}else{id+=0x2;}}return ans;}", "test_cases": [["3\n1 2 3", "4"], ["3\n2 3 4", "6"], ["8\n1 2 3 5 7 11 13 17", "10080"], ["13\n4 6 8 9 10 12 14 15 16 18 20 21 22", "311014372"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(a){return a?cin[cid++]:+cin[cid++];}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar mod = 1e9+7;\nfunction mul(){for(var a=arguments,r=a[0],i=a.length;--i;)r=((r>>16)*a[i]%mod*65536+(r&65535)*a[i])%mod;return r;}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(myOut);\n\nfunction main(){\n  var n = next();\n  var x = nexts(n);\n  var ans = 1, id = 1, rem = 0;\n  for(var i = 0; i < n; i++){\n    rem++;\n    ans = mul(ans,rem);\n    if(x[i] < id){\n      rem--;\n    }else{\n      id += 2;\n    }\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1292, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next(a) {\n  if (a) {\n    return cin[cid++];\n  } else {\n    return +cin[cid++];\n  }\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar mod = 1000000007;\nfunction mul() {\n  var a = arguments;\n  var r = a[0];\n  for (var i = a.length; --i;) {\n    r = ((r >> 16) * a[i] % mod * 65536 + (r & 65535) * a[i]) % mod;\n  }\n  return r;\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(myOut);\n}\nfunction main() {\n  var n = next();\n  var x = nexts(n);\n  var ans = 1;\n  var id = 1;\n  var rem = 0;\n  for (var i = 0; i < n; i++) {\n    rem++;\n    ans = mul(ans, rem);\n    if (x[i] < id) {\n      rem--;\n    } else {\n      id += 2;\n    }\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5430866045604785, "ngram_match_score": 0.1118042552286948, "weighted_ngram_match_score": 0.37084938671870554, "syntax_match_score": 0.8423645320197044, "dataflow_match_score": 0.8473282442748091}, "code_complexity": {"difference_score": 0.11764705882352944, "length_score": -0.11764705882352944, "increase_maintainability": -0.02265987294190841, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.03546099290780136, "new_decrease_halstead_effort": 0.0016883371027067717}}
{"filename": "p03819_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');var N=input[0x0]['split']('\\x20')[0x0]-0x0;var M=input[0x0]['split']('\\x20')[0x1]-0x0;var answer=new Array(M+0x1);answer['fill'](0x0);var line;for(var i=0x1;i<input['length'];i++){line=input[i]['split']('\\x20');line[0x1]-=0x0;line[0x0]-=0x0;for(var j=0x1;j<=M;j++){if(!(line[0x1]-line[0x0]<j-0x1&&line[0x1]%j>=line[0x0]%j&&line[0x0]%j>0x0)){answer[j]++;}}}answer['shift']();console['log'](answer['join']('\\x0a'));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["3 3\n1 2\n2 3\n3 3", "3\n2\n2"], ["7 9\n1 7\n5 9\n5 7\n5 9\n1 1\n6 8\n3 4", "7\n6\n6\n5\n4\n5\n5\n3\n2"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var N=input[0].split(\" \")[0]-0;\n  var M=input[0].split(\" \")[1]-0;\n  \n  var answer=new Array(M+1);\n  answer.fill(0);\n  var line;\n  for(var i=1;i<input.length;i++){\n    line=input[i].split(\" \");\n    line[1]-=0;\n    line[0]-=0;\n    for(var j=1;j<=M;j++){\n      if(!(line[1]-line[0]<j-1&&line[1]%j>=line[0]%j&&line[0]%j>0)){\n        answer[j]++;\n      }\n    }\n  }\n  answer.shift();\n  console.log(answer.join(\"\\n\"));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1293, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0].split(\" \")[0] - 0;\n  var M = input[0].split(\" \")[1] - 0;\n  var answer = new Array(M + 1);\n  answer.fill(0);\n  var line;\n  for (var i = 1; i < input.length; i++) {\n    line = input[i].split(\" \");\n    line[1] -= 0;\n    line[0] -= 0;\n    for (var j = 1; j <= M; j++) {\n      if (!(line[1] - line[0] < j - 1) || !(line[1] % j >= line[0] % j) || !(line[0] % j > 0)) {\n        answer[j]++;\n      }\n    }\n  }\n  answer.shift();\n  console.log(answer.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.565219935694115, "ngram_match_score": 0.09665195553495409, "weighted_ngram_match_score": 0.2792720350291165, "syntax_match_score": 0.8849557522123894, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0005050938436450547, "new_decrease_cyclomatic": 0.33333333333333337, "new_decrease_halstead_len": -0.01298701298701288, "new_decrease_halstead_effort": -0.01298701298701288}}
{"filename": "p03822_1", "type": "JavaScript", "obfuscated": "var tmp={};function main(chunk){var lines=chunk['split']('\\x0a');var n=Number(lines[0x0]);var map={};for(var i=0x2;i<n+0x1;i++){var a=Number(lines[i-0x1]);if(map[a]){map[a]['t']++;map[a]['p']['push'](i);}else{map[a]={};map[a]['t']=0x1;map[a]['p']=[i];}}console['log'](calc(map,0x1)+0x1);}function calc(map,n){if(tmp[n]){return tmp[n];}var ans=0x0;for(var i in map[n]['p']){var p=map[n]['p'][i];if(map[p]){ans=Math['max'](ans,map[p]['t']+calc(map,p));}}tmp[n]=ans;return ans;}main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["5\n1\n1\n2\n4", "3"], ["7\n1\n2\n1\n3\n1\n4", "3"], ["4\n4\n4\n1", "3"]], "original": "\nvar tmp = {};\nfunction main(chunk){\n    var lines = chunk.split(\"\\n\");\n    var n = Number(lines[0]);\n    \n    var map = {};\n    for(var i=2;i<n+1;i++){\n        var a = Number(lines[i-1]);\n        if(map[a]){\n            map[a].t++;\n            map[a].p.push(i);\n        }else{\n            map[a] = {};\n            map[a].t = 1;\n            map[a].p = [i];\n        }\n    }\n    console.log(calc(map,1)+1);\n}\n\nfunction calc(map,n){\n    if(tmp[n]){\n        return tmp[n];\n    }\n    var ans = 0;\n    for(var i in map[n].p){\n        var p = map[n].p[i];\n        if(map[p]){\n            ans = Math.max(ans,map[p].t + calc(map,p));\n        }\n    }\n    tmp[n] = ans;\n    return ans;\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1294, "deobfuscated": "var tmp = {};\nfunction main(chunk) {\n  var lines = chunk.split(\"\\n\");\n  var n = Number(lines[0]);\n  var map = {};\n  for (var i = 2; i < n + 1; i++) {\n    var a = Number(lines[i - 1]);\n    if (map[a]) {\n      map[a].t++;\n      map[a].p.push(i);\n    } else {\n      map[a] = {};\n      map[a].t = 1;\n      map[a].p = [i];\n    }\n  }\n  console.log(calc(map, 1) + 1);\n}\nfunction calc(map, n) {\n  if (tmp[n]) {\n    return tmp[n];\n  }\n  var ans = 0;\n  for (var i in map[n].p) {\n    var p = map[n].p[i];\n    if (map[p]) {\n      ans = Math.max(ans, map[p].t + calc(map, p));\n    }\n  }\n  tmp[n] = ans;\n  return ans;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.7435331690160942, "ngram_match_score": 0.3985635544853898, "weighted_ngram_match_score": 0.5755691215789873, "syntax_match_score": 1.0, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": -0.0006247193317504562, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": -0.02854415071796068}}
{"filename": "p03863_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['trim']();const l=s['length'];if(l&0x1^s[0x0]===s[l-0x1])console['log']('First');else console['log']('Second');}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["aba", "Second"], ["abc", "First"], ["abcab", "First"]], "original": "function Main(s) {\n  s = s.trim();\n  const l = s.length;\n  if((l & 1) ^ (s[0] === s[l-1]))\n    console.log(\"First\");\n  else console.log(\"Second\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1295, "deobfuscated": "function Main(s) {\n  s = s.trim();\n  const l = s.length;\n  if (l & 1 ^ s[0] === s[l - 1]) {\n    console.log(\"First\");\n  } else {\n    console.log(\"Second\");\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6592338365650399, "ngram_match_score": 0.34685581122218806, "weighted_ngram_match_score": 0.4946249895834261, "syntax_match_score": 0.7954545454545454, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
{"filename": "p03888_1", "type": "JavaScript", "obfuscated": "function Main(inputData){init(inputData);var a=inI();var b=inI();outln((a*b/(a+b))['toFixed'](0xa));}var input,inputCnt;function debug(){Main(document['getElementById']('input')['value']);}function init(inputData){input=inputData['replace'](/\\n/g,'\\x20');input=input['split']('\\x20');inputCnt=0x0;}const out=output=>{console['log'](output);};const outln=output=>{console['log'](output+'\\x0a');};const inS=()=>{return input[inputCnt++];};const inI=()=>{return parseInt(inS(),0xa);};const inF=()=>{return parseFloat(inS());};Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["2 3", "1.2000000000"], ["100 99", "49.7487437186"]], "original": "\nfunction Main(inputData) {\n\tinit(inputData);\n\t\n\tvar a = inI();\n\tvar b = inI();\n\n\toutln(((a*b)/(a+b)).toFixed(10));\n\t\n}\n\n////////////////////////////////////////////////////////////////////////////////////\nvar input,inputCnt;\n\n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n\tMain(document.getElementById(\"input\").value);\n}\n\nfunction init(inputData){\n    //配列inputに順番に代入\n\tinput = inputData.replace( /\\n/g , \" \" );\n\tinput = input.split(\" \");\n\tinputCnt = 0;\n}\n//output\nconst out = (output) => { console.log(output) }\nconst outln = (output) => { console.log(output+\"\\n\") }\n\n//input\nconst inS = () => {return input[inputCnt++]};\nconst inI = () => {return parseInt(inS(), 10)};\nconst inF = () => {return parseFloat(inS())};\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1296, "deobfuscated": "function Main(inputData) {\n  init(inputData);\n  var a = inI();\n  var b = inI();\n  outln((a * b / (a + b)).toFixed(10));\n}\nvar input;\nvar inputCnt;\nfunction debug() {\n  Main(document.getElementById(\"input\").value);\n}\nfunction init(inputData) {\n  input = inputData.replace(/\\n/g, \" \");\n  input = input.split(\" \");\n  inputCnt = 0;\n}\nconst out = output => {\n  console.log(output);\n};\nconst outln = output => {\n  console.log(output + \"\\n\");\n};\nconst inS = () => {\n  return input[inputCnt++];\n};\nconst inI = () => {\n  return parseInt(inS(), 10);\n};\nconst inF = () => {\n  return parseFloat(inS());\n};\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6605342331850413, "ngram_match_score": 0.36967749735797023, "weighted_ngram_match_score": 0.41652723199236447, "syntax_match_score": 0.8559322033898306, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.011235955056179803, "new_decrease_halstead_effort": -0.011235955056179803}}
{"filename": "p03947_1", "type": "JavaScript", "obfuscated": "function Main(input){var counter=function(str,seq){return str['split'](seq)['length']-0x1;};lines=input['split']('\\x0a');var s=lines[0x0];var bw=counter(s,'BW');var wb=counter(s,'WB');console['log'](bw+wb);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["BBBWW", "1"], ["WWWWWW", "0"], ["WBWBWBWBWB", "9"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\nvar counter = function(str,seq){\n    return str.split(seq).length - 1;\n};\n\tlines = input.split(\"\\n\"); // 1行目がinput[0], 2行目がinput[1], …に入る\n\tvar s = lines[0];\n\tvar bw = counter(s,\"BW\");\n\tvar wb = counter(s,\"WB\");\n\tconsole.log(bw+wb);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1297, "deobfuscated": "function Main(input) {\n  function counter(str, seq) {\n    return str.split(seq).length - 1;\n  }\n  lines = input.split(\"\\n\");\n  var s = lines[0];\n  var bw = counter(s, \"BW\");\n  var wb = counter(s, \"WB\");\n  console.log(bw + wb);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5280620129804484, "ngram_match_score": 0.34159799605606495, "weighted_ngram_match_score": 0.35218851740419044, "syntax_match_score": 0.88, "dataflow_match_score": 0.5384615384615384}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0015708633540765238, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.046875, "new_decrease_halstead_effort": 0.0419194635257264}}
{"filename": "p03954_1", "type": "JavaScript", "obfuscated": "function Main(input){input=input['split']('\\x0a');tmp=input[0x1]['split']('\\x20');var N=parseInt(input[0x0],0xa);var array_N=new Array(0x2*N-0x1);for(var i=0x0;i<array_N['length'];i++){array_N[i]=parseInt(tmp[i],0xa);}function getArrayNext(array_i){array_i_next=new Array(array_i['length']-0x2);for(var j=0x0;j<array_i_next['length'];j++){var small_array=array_i['slice'](j,j+0x3);array_i_next[j]=small_array['sort'](function(a,b){return a<b?-0x1:0x1;})[0x1];}return array_i_next;}var array_i=array_N;while(array_i['length']>0x1){array_i=getArrayNext(array_i);}console['log'](array_i[0x0]);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));", "test_cases": [["4\n1 6 3 7 4 5 2", "4"], ["2\n1 2 3", "2"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\ttmp = input[1].split(\" \");\n\n\tvar N = parseInt(input[0], 10);\n    var array_N = new Array(2*N-1);\n\n    for(var i=0;i< array_N.length;i++){\n        array_N[i] = parseInt(tmp[i],10);\n    }\n\n    function getArrayNext(array_i){\n        array_i_next = new Array(array_i.length-2);\n        for(var j=0;j<array_i_next.length;j++){\n            var small_array = array_i.slice(j,j+3);\n            array_i_next[j] = small_array.sort(\n              function(a,b){\n                return (a < b ? -1 : 1);\n              }\n            )[1];\n        }\n        return array_i_next;\n    }\n    var array_i = array_N;\n    while(array_i.length > 1){\n\n        array_i = getArrayNext(array_i);\n    }\n\tconsole.log(array_i[0]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1298, "deobfuscated": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[1].split(\" \");\n  var N = parseInt(input[0], 10);\n  var array_N = new Array(N * 2 - 1);\n  for (var i = 0; i < array_N.length; i++) {\n    array_N[i] = parseInt(tmp[i], 10);\n  }\n  function getArrayNext(array_i) {\n    array_i_next = new Array(array_i.length - 2);\n    for (var j = 0; j < array_i_next.length; j++) {\n      var small_array = array_i.slice(j, j + 3);\n      array_i_next[j] = small_array.sort(function (a, b) {\n        if (a < b) {\n          return -1;\n        } else {\n          return 1;\n        }\n      })[1];\n    }\n    return array_i_next;\n  }\n  var array_i = array_N;\n  while (array_i.length > 1) {\n    array_i = getArrayNext(array_i);\n  }\n  console.log(array_i[0]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.6654051784148001, "ngram_match_score": 0.34600015520090716, "weighted_ngram_match_score": 0.5285835214212561, "syntax_match_score": 0.7870370370370371, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.1428571428571428, "length_score": -0.1428571428571428, "increase_maintainability": -0.02114419448787075, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.013245033112582849, "new_decrease_halstead_effort": -0.07814614912893103}}
{"filename": "p03973_1", "type": "JavaScript", "obfuscated": "'use strict';var input=require('fs')['readFileSync']('/dev/stdin','utf8');var cin=input['split'](/ |\\n/),cid=0x0;function next(){return+cin[cid++];}function nextstr(){return cin[cid++];}function nextbig(){return BigInt(cin[cid++]);}function nexts(n,a){return a?cin['slice'](cid,cid+=n):cin['slice'](cid,cid+=n)['map'](a=>+a);}function nextm(h,w,a){var r=[],i=0x0;if(a)for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w));else for(;i<h;i++)r['push'](cin['slice'](cid,cid+=w)['map'](a=>+a));return r;}function xArray(v){var a=arguments,l=a['length'],r='Array(a['+--l+']).fill().map(x=>{return\\x20'+v+';})';while(--l)r='Array(a['+l+']).fill().map(x=>'+r+')';return eval(r);}var myOut=main();if(myOut!==undefined)console['log'](String(myOut));function main(){var n=next();var ans=0x0,mn=0x1;for(var i=0x0;i<n;i++){var t=next()-0x1;if(t<mn){mn=Math['max'](mn,t+0x2);}else{ans+=t/mn|0x0;mn=Math['max'](0x2,mn);}}return ans;}", "test_cases": [["3\n3\n2\n5", "3"], ["15\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9", "18"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var ans = 0, mn = 1;\n  for(var i = 0; i < n; i++){\n    var t = next()-1;\n    if(t < mn){\n      mn = Math.max(mn,t+2);\n    }else{\n      ans += t/mn|0;\n      mn = Math.max(2,mn);\n    }\n  }\n  return ans;\n}", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1299, "deobfuscated": "'use strict';\n\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/);\nvar cid = 0;\nfunction next() {\n  return +cin[cid++];\n}\nfunction nextstr() {\n  return cin[cid++];\n}\nfunction nextbig() {\n  return BigInt(cin[cid++]);\n}\nfunction nexts(n, a) {\n  if (a) {\n    return cin.slice(cid, cid += n);\n  } else {\n    return cin.slice(cid, cid += n).map(a => +a);\n  }\n}\nfunction nextm(h, w, a) {\n  var r = [];\n  var i = 0;\n  if (a) {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w));\n    }\n  } else {\n    for (; i < h; i++) {\n      r.push(cin.slice(cid, cid += w).map(a => +a));\n    }\n  }\n  return r;\n}\nfunction xArray(v) {\n  var a = arguments;\n  var l = a.length;\n  var r = \"Array(a[\" + --l + \"]).fill().map(x=>{return \" + v + \";})\";\n  while (--l) {\n    r = \"Array(a[\" + l + \"]).fill().map(x=>\" + r + \")\";\n  }\n  return eval(r);\n}\nvar myOut = main();\nif (myOut !== undefined) {\n  console.log(String(myOut));\n}\nfunction main() {\n  var n = next();\n  var ans = 0;\n  var mn = 1;\n  for (var i = 0; i < n; i++) {\n    var t = next() - 1;\n    if (t < mn) {\n      mn = Math.max(mn, t + 2);\n    } else {\n      ans += t / mn | 0;\n      mn = Math.max(2, mn);\n    }\n  }\n  return ans;\n}\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.5668203752841914, "ngram_match_score": 0.09384026716155382, "weighted_ngram_match_score": 0.2845523450863229, "syntax_match_score": 0.8888888888888888, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.06666666666666665, "length_score": -0.06666666666666665, "increase_maintainability": -0.01327309581005165, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": -0.027888446215139417, "new_decrease_halstead_effort": 0.021935336887976775}}
{"filename": "p04014_1", "type": "JavaScript", "obfuscated": "function Main(s){s=s['split']('\\x0a')['map'](a=>parseInt(a));const n=s[0x0];s=s[0x1];const sn=Math['ceil'](Math['sqrt'](n));if(s===n){console['log'](n+0x1);return;}for(var b=0x2;b<sn;b++){if(s===f(b,n)){console['log'](b);return;}}var p=Math['floor']((n-s)/(sn-0x1));for(;p>0x0;p--){b=Math['floor']((n-s)/p+0x1);if(s===f(b,n)){console['log'](b);return;}}console['log'](-0x1);}function f(b,n){if(n<b)return n;return f(b,Math['floor'](n/b))+n%b;}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());", "test_cases": [["87654\n30", "10"], ["87654\n138", "100"], ["87654\n45678", "-1"], ["31415926535\n1", "31415926535"], ["1\n31415926535", "-1"]], "original": "function Main(s) {\n\ts = s.split(\"\\n\").map(a => parseInt(a));\n\tconst n = s[0];\n\ts = s[1];\n\tconst sn = Math.ceil(Math.sqrt(n));\n\tif(s === n){console.log(n+1);return;}\n\tfor(var b = 2; b < sn; b++){\n\t\tif(s === f(b, n)){\n          console.log(b);\n          return;\n        }\n\t}\n\tvar p = Math.floor((n - s) / (sn - 1));\n\tfor(; p > 0; p--){\n\t\tb = Math.floor((n - s) / p + 1);\n\t\tif(s === f(b, n)){\n          console.log(b);\n          return;\n        }\n\t}\n\t\n\tconsole.log(-1);\n}\nfunction f(b, n){\n\tif(n < b) return n;\n\treturn f(b, Math.floor(n / b)) + n % b;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript", "task_type": "deobfuscation", "task_id": 1300, "deobfuscated": "function Main(s) {\n  s = s.split(\"\\n\").map(a => parseInt(a));\n  const n = s[0];\n  s = s[1];\n  const sn = Math.ceil(Math.sqrt(n));\n  if (s === n) {\n    console.log(n + 1);\n    return;\n  }\n  for (var b = 2; b < sn; b++) {\n    if (s === f(b, n)) {\n      console.log(b);\n      return;\n    }\n  }\n  var p = Math.floor((n - s) / (sn - 1));\n  for (; p > 0; p--) {\n    b = Math.floor((n - s) / p + 1);\n    if (s === f(b, n)) {\n      console.log(b);\n      return;\n    }\n  }\n  console.log(-1);\n}\nfunction f(b, n) {\n  if (n < b) {\n    return n;\n  }\n  return f(b, Math.floor(n / b)) + n % b;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "syntax_pass": 1, "exe_pass": 1, "code_bleu": {"codebleu": 0.8103714494678039, "ngram_match_score": 0.5730855532412239, "weighted_ngram_match_score": 0.6994079965679764, "syntax_match_score": 0.9689922480620154, "dataflow_match_score": 1.0}, "code_complexity": {"difference_score": 0.0, "length_score": 0.0, "increase_maintainability": 0.0, "new_decrease_cyclomatic": 0.0, "new_decrease_halstead_len": 0.0, "new_decrease_halstead_effort": 0.0}}
