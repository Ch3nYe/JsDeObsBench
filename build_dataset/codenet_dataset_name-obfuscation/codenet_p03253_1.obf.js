console['log']((_0x183bc2 => {
    let [_0x4c32f6, _0x5d8034] = _0x183bc2['trim']()['split']` `['map'](_0x44d88a => _0x44d88a | 0x0);
    const _0x36addf = 0x3b9aca00 + 0x7;
    const _0x52b8ad = new Map();
    for (let _0x13b776 = 0x2; _0x13b776 <= _0x5d8034; _0x13b776++) {
        if (_0x5d8034 % _0x13b776)
            continue;
        let _0x4f8d5b = 0x0;
        do {
            _0x4f8d5b++;
            _0x5d8034 /= _0x13b776;
        } while (_0x5d8034 % _0x13b776 === 0x0);
        _0x52b8ad['set'](_0x13b776, _0x4f8d5b);
    }
    const _0x4b7d6f = (_0x5c41cb, _0x39b5fa) => ((_0x5c41cb >> 0x10) * _0x39b5fa % _0x36addf * 0x10000 + (_0x5c41cb & 0xffff) * _0x39b5fa) % _0x36addf;
    const {
        fac: _0x21ec12,
        finv: _0x1e305a
    } = (_0x15c493 => {
        const _0x56d6ba = [
                0x1,
                0x1
            ], _0x3e9a62 = [
                0x0,
                0x1
            ], _0x554d85 = [
                0x1,
                0x1
            ];
        for (let _0x5cfc7d = 0x2; _0x5cfc7d < _0x15c493; _0x5cfc7d++) {
            _0x56d6ba['push'](_0x4b7d6f(_0x56d6ba[_0x5cfc7d - 0x1], _0x5cfc7d));
            _0x3e9a62['push'](_0x36addf - _0x4b7d6f(_0x3e9a62[_0x36addf % _0x5cfc7d], _0x36addf / _0x5cfc7d | 0x0));
            _0x554d85['push'](_0x4b7d6f(_0x554d85[_0x5cfc7d - 0x1], _0x3e9a62[_0x5cfc7d]));
        }
        return {
            'fac': _0x56d6ba,
            'finv': _0x554d85
        };
    })(_0x4c32f6 + _0x4c32f6);
    const _0x3e616e = (_0x56160d, _0x5ad927) => _0x4b7d6f(_0x21ec12[_0x56160d], _0x4b7d6f(_0x1e305a[_0x5ad927], _0x1e305a[_0x56160d - _0x5ad927]));
    let _0x5df2a3 = 0x1;
    for (const [, _0x5c5b37] of _0x52b8ad)
        _0x5df2a3 = _0x4b7d6f(_0x5df2a3, _0x3e616e(_0x5c5b37 + _0x4c32f6 - 0x1, _0x4c32f6 - 0x1));
    return '' + _0x5df2a3;
})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));