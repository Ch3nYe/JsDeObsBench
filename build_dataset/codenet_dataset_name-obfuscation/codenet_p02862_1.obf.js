'use strict';
const ncr = (_0x4efe4e, _0x986830, _0x52461d) => {
    _0x52461d = _0x52461d || 0x3b9aca00 + 0x7;
    const _0x40f488 = Math['max'](_0x4efe4e, _0x986830);
    const _0x1e1be1 = Math['min'](_0x4efe4e, _0x986830);
    const _0x1d0665 = Math['min'](_0x1e1be1, _0x40f488 - _0x1e1be1);
    const _0x5a3af4 = new Array(_0x1d0665 + 0x1);
    const _0x55b94a = new Array(_0x1d0665 + 0x1);
    let _0x264bba = 0x1;
    if (_0x1d0665 > 0x0) {
        for (let _0x371704 = 0x1; _0x371704 <= _0x1d0665; _0x371704++) {
            _0x5a3af4[_0x371704] = _0x40f488 - _0x1d0665 + _0x371704;
            _0x55b94a[_0x371704] = _0x371704;
        }
        for (let _0x1e4f91 = 0x2; _0x1e4f91 <= _0x1d0665; _0x1e4f91++) {
            const _0x19b295 = _0x55b94a[_0x1e4f91];
            const _0xf42bf7 = _0x19b295 > 0x1 ? -((_0x40f488 - _0x1d0665) % _0x1e4f91) : 0x0;
            for (let _0x4a28ff = _0x1e4f91; _0x4a28ff <= _0x1d0665; _0x4a28ff += _0x1e4f91) {
                _0x5a3af4[_0x4a28ff + _0xf42bf7] /= _0x19b295;
                _0x55b94a[_0x4a28ff] /= _0x19b295;
            }
        }
        for (let _0x2afbad = 0x1; _0x2afbad <= _0x1d0665; _0x2afbad++) {
            if (_0x5a3af4[_0x2afbad] > 0x1)
                _0x264bba = _0x264bba * _0x5a3af4[_0x2afbad] % _0x52461d;
        }
    }
    return _0x264bba;
};
function main(_0x46ce95) {
    _0x46ce95 = _0x46ce95['trim']()['split']('\x20');
    const _0xf5d1d9 = Number(_0x46ce95[0x0]);
    const _0x31f00b = Number(_0x46ce95[0x1]);
    let _0x4f013c = 0x0;
    for (let _0x5c011d = Math['floor'](_0xf5d1d9 / 0x2); _0x5c011d >= 0x0; _0x5c011d--) {
        const _0x1f89ed = _0xf5d1d9 - _0x5c011d * 0x2;
        if (_0x1f89ed * 0x2 + _0x5c011d === _0x31f00b) {
            _0x4f013c = ncr(_0x5c011d + _0x1f89ed, _0x5c011d);
        }
    }
    console['log'](_0x4f013c);
}
main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));