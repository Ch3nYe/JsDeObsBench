'use strict';
const mod = 0x3b9aca00 + 0x7;
function solve(_0x317ea2, _0x647635, _0x5c5b19) {
    if (_0x647635 === 0x0) {
        return 0x1;
    }
    var _0x3a1321 = new Array(_0x647635 + 0x1)['fill'](0x0);
    var _0x3aa1c6 = new Array(_0x317ea2)['fill'](0x0)['map'](_0x52e589 => new Array(_0x647635 + 0x1)['fill'](0x0));
    for (var _0x3b120d = _0x317ea2 - 0x1; _0x3b120d >= 0x0; _0x3b120d--) {
        for (var _0x4e5493 = 0x0; _0x4e5493 <= _0x647635; _0x4e5493++) {
            if (_0x3b120d === _0x317ea2 - 0x1) {
                _0x3a1321[_0x4e5493] = _0x4e5493 <= _0x5c5b19[_0x3b120d] ? 0x1 : 0x0;
                _0x3aa1c6[_0x3b120d][_0x4e5493] = _0x4e5493 - 0x1 >= 0x0 ? _0x3aa1c6[_0x3b120d][_0x4e5493 - 0x1] % mod + _0x3a1321[_0x4e5493] % mod : _0x3a1321[_0x4e5493] % mod;
            } else {
                _0x3a1321[_0x4e5493] = _0x4e5493 <= _0x5c5b19[_0x3b120d] ? _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493] % mod : _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493] % mod - _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493 - _0x5c5b19[_0x3b120d] - 0x1] % mod;
                _0x3aa1c6[_0x3b120d][_0x4e5493] = _0x4e5493 - 0x1 >= 0x0 ? _0x3aa1c6[_0x3b120d][_0x4e5493 - 0x1] % mod + _0x3a1321[_0x4e5493] % mod : _0x3a1321[_0x4e5493] % mod;
            }
        }
    }
    return _0x3a1321[_0x647635] % mod;
}
function main(_0x239e4f) {
    var _0x13194e = _0x239e4f['split']('\x0a');
    var _0x120da5 = _0x13194e[0x0]['split']('\x20')['map'](_0x5bae29 => parseInt(_0x5bae29));
    var _0x5c12a8 = _0x120da5[0x0];
    var _0x1f2529 = _0x120da5[0x1];
    var _0x51e9ad = _0x13194e[0x1]['split']('\x20')['map'](_0x27d383 => parseInt(_0x27d383));
    var _0x45f01e = solve(_0x5c12a8, _0x1f2529, _0x51e9ad);
    console['log'](_0x45f01e);
}
main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));