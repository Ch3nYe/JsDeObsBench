const padLeft = (_0x5cede5, _0x1a55f2, _0x812d08) => ([...Array(_0x1a55f2)]['map'](_0x827e3f => _0x812d08)['join']('') + _0x5cede5)['slice'](_0x1a55f2 * -0x1);
const split = (_0x109d31, _0x25cc70) => (_0x5becb2 => _0x5becb2['reduce']((_0x3a92ee, _0x565298, _0xd7cec9) => _0xd7cec9 % _0x25cc70 ? _0x3a92ee : [
    ..._0x3a92ee,
    _0x5becb2['slice'](_0xd7cec9, _0xd7cec9 + _0x25cc70)['join']('')
], []))([..._0x109d31]);
const arrange = _0xd452a0 => (_0x42dcb8 => _0x42dcb8[0x0] ? [
    _0x42dcb8[0x0] - 0x1,
    _0x42dcb8[0x1] + 0x2540be400
] : _0x42dcb8)(split(padLeft(_0xd452a0, 0x14, '0'), 0xa)['map'](_0x41ca9b => +_0x41ca9b));
const solve0 = (_0x1b2544, _0x3e86f5, _0x797816) => Math['floor'](_0x3e86f5 / _0x797816) - Math['floor'](_0x1b2544 / _0x797816);
const solve1 = (_0x588bda, _0x280e15, _0x4664ec) => Math['floor'](_0x280e15 / _0x4664ec) - (_0x588bda == 0x0 ? -0x1 : Math['floor']((_0x588bda - 0x1) / _0x4664ec));
const nullOrStr = _0x1da877 => _0x1da877 ? String(_0x1da877) : '';
const fn2 = (_0x298a78, _0x5f0e0e, _0x2a09fa) => '' + nullOrStr(solve0(+_0x298a78[0x0], _0x5f0e0e[0x0], _0x2a09fa)) + solve1(_0x298a78[0x1], _0x5f0e0e[0x1], _0x2a09fa);
const fn1 = (_0x1941e4, _0x32b2f1, _0x22091e) => fn2(arrange(_0x1941e4), arrange(_0x32b2f1), _0x22091e);
const main = _0x4b451e => fn1(..._0x4b451e['split']('\x20'));
console['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));