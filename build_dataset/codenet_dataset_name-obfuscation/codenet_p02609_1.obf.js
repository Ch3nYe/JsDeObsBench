const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');
(_0x41df9d => {
    const _0x18e96d = _0x41df9d['split']('\x0a');
    const _0x20056f = _0x18e96d[0x0] - 0x0;
    const _0x5b5f1c = _0x18e96d[0x1];
    const _0x4dca03 = _0x23f83d => {
        let _0x45785b = 0x0;
        do {
            _0x23f83d & 0x1 ? _0x45785b++ : _0x45785b;
        } while (_0x23f83d = _0x23f83d >>> 0x1);
        return _0x45785b;
    };
    const _0x2fa789 = _0x54f616 => {
        if (_0x54f616 === 0x0) {
            return 0x0;
        }
        let _0x3be9cd = 0x1;
        while (_0x54f616 %= _0x4dca03(_0x54f616))
            _0x3be9cd++;
        return _0x3be9cd;
    };
    const _0x58c877 = parseInt(_0x5b5f1c, 0x2);
    const _0xb8b8e3 = _0x4dca03(_0x58c877) - 0x1;
    const _0x3a87d7 = _0x4dca03(_0x58c877) + 0x1;
    for (let _0x2c635e = 0x0; _0x2c635e < _0x20056f; _0x2c635e++) {
        let _0x5bec35 = _0x58c877 ^ Math['pow'](0x2, _0x20056f - _0x2c635e - 0x1);
        if (_0x5bec35 === 0x0) {
            console['log'](0x0);
        } else {
            console['log'](_0x2fa789(_0x5bec35 % (_0x5b5f1c[_0x2c635e] === '1' ? _0xb8b8e3 : _0x3a87d7)) + 0x1);
        }
    }
})(input);