function Main(_0xa15d08) {
    _0xa15d08 = _0xa15d08['split']('\x0a');
    const [_0x136d88, _0x23ebb8] = _0xa15d08[0x0]['split']('\x20')['map'](_0x5ce5fc => {
        return parseInt(_0x5ce5fc, 0xa);
    });
    const _0x3735b9 = _0xa15d08[0x1]['split']('\x20')['map'](_0x236fa6 => {
        return parseInt(_0x236fa6, 0xa);
    });
    const _0xe81412 = Math['pow'](0xa, 0x9);
    console['log'](dp(_0x136d88, _0x23ebb8, _0x3735b9, _0xe81412));
}
Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));
function dp(_0x201b9e, _0x182ac1, _0x4cbfe0, _0x567a38) {
    const _0x4a4bda = [];
    let _0x2c8b68 = [];
    _0x4a4bda[0x0] = 0x0;
    for (var _0x215507 = 0x1; _0x215507 < _0x201b9e; _0x215507++) {
        _0x4a4bda['push'](_0x567a38);
        _0x2c8b68 = [];
        _0x2c8b68['push'](_0x4a4bda[_0x215507]);
        for (var _0x492b8b = 0x1; _0x492b8b <= _0x182ac1; _0x492b8b++) {
            if (_0x215507 - _0x492b8b < 0x0)
                continue;
            _0x2c8b68['push'](_0x4a4bda[_0x215507 - _0x492b8b] + Math['abs'](_0x4cbfe0[_0x215507 - _0x492b8b] - _0x4cbfe0[_0x215507]));
        }
        _0x4a4bda[_0x215507] = Math['min'](..._0x2c8b68);
    }
    return _0x4a4bda[_0x201b9e - 0x1];
}