{"filename": "p02288_1", "type": "JavaScript", "obfuscated": "(function main() {\n    const _0x4a9553 = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    _0x4a9553['shift']();\n    const _0x57fda7 = _0x4a9553['shift']()['split']('\\x20')['map'](Number);\n    buildMaxHeap(_0x57fda7);\n    console['log'](_0x57fda7['reduce']((_0x20b661, _0x491860) => _0x20b661 += '\\x20' + _0x491860, ''));\n}());\nfunction buildMaxHeap(_0x477d64) {\n    const _0x37f3bd = _0x477d64['length'];\n    const _0x29674a = _0x55ccdb => {\n        let _0x4c4b02, _0x3f0106, _0x304386;\n        _0x4c4b02 = 0x2 * _0x55ccdb + 0x1;\n        _0x3f0106 = 0x2 * _0x55ccdb + 0x2;\n        _0x304386 = _0x4c4b02 < _0x37f3bd && _0x477d64[_0x4c4b02] > _0x477d64[_0x55ccdb] ? _0x4c4b02 : _0x55ccdb;\n        if (_0x3f0106 < _0x37f3bd && _0x477d64[_0x3f0106] > _0x477d64[_0x304386])\n            _0x304386 = _0x3f0106;\n        if (_0x304386 != _0x55ccdb) {\n            _0x477d64[_0x304386] = [\n                _0x477d64[_0x55ccdb],\n                _0x477d64[_0x55ccdb] = _0x477d64[_0x304386]\n            ][0x0];\n            _0x29674a(_0x304386);\n        }\n    };\n    for (let _0x4d0c2d = Math['floor'](_0x477d64['length'] / 0x2); _0x4d0c2d >= 0x0; _0x4d0c2d--)\n        _0x29674a(_0x4d0c2d);\n}", "test_cases": [["10\n4 1 3 2 16 9 10 14 8 7", "16 14 10 8 7 9 3 2 4 1"]], "original": "(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  lines.shift();\n  const arr = lines.shift().split(' ').map(Number);\n  buildMaxHeap(arr);\n  console.log(arr.reduce((s, e) => s += ` ${e}`, ''));\n})();\n\nfunction buildMaxHeap(arr) {\n  const n = arr.length;\n  const maxHeapify = (i) => {\n    let left, right, largest;\n    left = 2 * i + 1;\n    right = 2 * i + 2;\n    largest = left < n && arr[left] > arr[i] ? left : i;\n    if (right < n && arr[right] > arr[largest]) largest = right;\n    if (largest != i) {\n      arr[largest] = [arr[i], arr[i] = arr[largest]][0];\n      maxHeapify(largest);\n    }\n  };\n\n  for (let i = Math.floor(arr.length / 2); i >= 0; i--) maxHeapify(i);\n}\n\n", "language": "JavaScript"}
{"filename": "p02772_1", "type": "JavaScript", "obfuscated": "function Main(_0x6133c2) {\n    _0x6133c2 = _0x6133c2['split']('\\x0a');\n    const _0x910dd8 = _0x6133c2['shift']();\n    const _0x26d2dc = _0x6133c2['map'](_0xe36575 => parseInt(_0xe36575));\n    f = ![];\n    for (i = 0x0; i < _0x26d2dc['length']; i++) {\n        if (_0x26d2dc[i] % 0x2 == 0x0) {\n            if (_0x26d2dc[i] % 0x3 != 0x0 && _0x26d2dc[i] % 0x5 != 0x0) {\n                f = !![];\n            }\n        }\n    }\n    if (f) {\n        console['log']('DENIED');\n    } else {\n        console['log']('APPROVED');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n6 7 9 10 31", "APPROVED"], ["3\n28 27 24", "DENIED"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const N = input.shift();\n  const A = input.map(v => parseInt(v));\n  f = false;\n  for (i = 0; i < A.length; i++) {\n    if (A[i] % 2 == 0) {\n      if (A[i] % 3 != 0 && A[i] % 5 != 0) {\n        f = true;\n      }\n    }\n  }\n  if (f) {\n    console.log(\"DENIED\");\n  } else {\n    console.log(\"APPROVED\");\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02755_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x54d344 => {\n    _0x54d344 = _0x54d344['trim']()['split']('\\x0a');\n    const _0x44e1cc = parseInt(_0x54d344[0x0]['split']('\\x20')[0x0]);\n    const _0x386ede = parseInt(_0x54d344[0x0]['split']('\\x20')[0x1]);\n    for (let _0x529fc4 = 0x1; _0x529fc4 <= 0x2710; _0x529fc4++) {\n        const _0x54407a = Math['floor'](_0x529fc4 * 0.08);\n        const _0x595ca9 = Math['floor'](_0x529fc4 * 0.1);\n        if (_0x54407a === _0x44e1cc && _0x595ca9 === _0x386ede) {\n            console['log'](_0x529fc4);\n            return;\n        }\n    }\n    console['log'](-0x1);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2", "25"], ["8 10", "100"], ["19 99", "-1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const A = parseInt(arg[0].split(\" \")[0]);\n    const B = parseInt(arg[0].split(\" \")[1]);\n    \n    // X * 0.08 = A;\n    // X * 0.1  = B;\n    \n    // const X = A / 0.08;\n    \n    // if(X % 1 !== 0) {\n    //     console.log(-1);\n    //     return;\n    // }\n    \n    // const temp1 = Math.floor(X * 0.08);\n    // const temp2 = Math.floor(X * 0.1);\n    \n    // console.log(temp2)\n    \n    // if(temp1 === A && temp2 === B) {\n    //     console.log(X);\n    //     return;\n    // }\n    \n    // console.log(-1);\n\n    for(let i=1; i<=10000; i++) {\n        const temp1 = Math.floor(i * 0.08);\n        const temp2 = Math.floor(i * 0.1);\n        \n        if(temp1 === A && temp2 === B) {\n            console.log(i);\n            return;\n        }\n    }\n    \n    console.log(-1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02888_1", "type": "JavaScript", "obfuscated": "function Main(_0x16a8e7) {\n    _0x16a8e7 = _0x16a8e7['split']('\\x0a');\n    var _0x312eec = _0x16a8e7[0x0];\n    var _0x396ab9 = _0x16a8e7[0x1]['split']('\\x20')['map'](Number);\n    var _0x333fe2 = 0x0;\n    _0x396ab9['sort'](function (_0x1756b1, _0x2f34dd) {\n        return _0x2f34dd - _0x1756b1;\n    });\n    for (var _0xb8d6ca = 0x0; _0xb8d6ca < _0x312eec - 0x1; _0xb8d6ca++) {\n        for (var _0x49c6a1 = _0xb8d6ca + 0x1; _0x49c6a1 < _0x312eec; _0x49c6a1++) {\n            var _0x3c37b8 = _0x396ab9[_0xb8d6ca] - _0x396ab9[_0x49c6a1];\n            var _0x244a59 = _0x396ab9['slice'](0x0, _0x396ab9['length']);\n            _0x244a59['splice'](0x0, _0x49c6a1 + 0x1);\n            _0x244a59['reverse']();\n            _0x333fe2 += _0x244a59['length'] - caninsert(_0x244a59, _0x3c37b8);\n        }\n    }\n    console['log'](_0x333fe2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction caninsert(_0x31b268, _0x513c81) {\n    _0x513c81 += 0.1;\n    var _0xb8e81f = 0x0;\n    var _0x58fc50 = _0x31b268['length'];\n    while (_0xb8e81f < _0x58fc50) {\n        var _0x2d01e3 = Math['floor'](_0xb8e81f + (_0x58fc50 - _0xb8e81f) / 0x2);\n        if (_0x31b268[_0x2d01e3] <= _0x513c81) {\n            _0xb8e81f = _0x2d01e3 + 0x1;\n        } else {\n            _0x58fc50 = _0x2d01e3;\n        }\n    }\n    return _0xb8e81f;\n}\n;", "test_cases": [["4\n3 4 2 1", "1"], ["3\n1 1000 1", "0"], ["7\n218 786 704 233 645 728 389", "23"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = input[0];\n  var L = input[1].split(\" \").map(Number);\n  var sum = 0;\n  L.sort(function(a,b){return b-a;});\n  for(var i=0;i<N-1;i++){\n    for(var j=i+1;j<N;j++){\n      var tag = L[i]-L[j];\n      var arr = L.slice(0,L.length);\n      arr.splice(0,j+1);\n      arr.reverse();\n      sum += arr.length-caninsert(arr,tag);\n    //  console.log(tag,caninsert(arr,tag),arr)\n    }\n  }\n  console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n//以下写経。C++なら関数が用意されてるし多少はね…？\nfunction caninsert(array, value){\n  value += 0.1\n    var lower = 0;\n    var upper = array.length;\n\n    while ( lower < upper ) {\n\n        var mid = Math.floor(lower + (upper - lower) / 2);\n\n        if ( array[mid] <= value ) {\n            lower = mid + 1;\n        } else {\n            upper = mid;\n        }\n\n    }\n    return lower;\n\n};", "language": "JavaScript"}
{"filename": "p02917_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x50bc1d => {\n    lines['push'](_0x50bc1d);\n});\nreader['on']('close', () => {\n    const _0xf30532 = lines[0x1]['split']('\\x20')['map'](_0x14937c => _0x14937c - 0x0);\n    let _0x1148a9 = 0x0;\n    for (let _0x475eec = 0x0; _0x475eec < _0xf30532['length'] - 0x1; _0x475eec++) {\n        _0x1148a9 += Math['min'](_0xf30532[_0x475eec], _0xf30532[_0x475eec + 0x1]);\n    }\n    _0x1148a9 += _0xf30532[_0xf30532['length'] - 0x1] + _0xf30532[0x0];\n    console['log'](_0x1148a9);\n});", "test_cases": [["3\n2 5", "9"], ["2\n3", "6"], ["6\n0 153 10 10 23", "53"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const list = lines[1].split(\" \").map(v=>v-0);\n    let ans = 0;\n    for(let i=0;i<list.length-1;i++){\n        ans+=Math.min(list[i],list[i+1])\n    }\n    ans += list[list.length-1] + list[0];\n    console.log(ans);\n});\n", "language": "JavaScript"}
{"filename": "p02405_1", "type": "JavaScript", "obfuscated": "(function () {\n    var _0x4a8349, _0x553fe6, _0x5656db, _0x5cb6ea, _0x119497, _0x26fdef, _0x940004, _0x5cf531, _0x25b5b3, _0x535753, _0x48297d;\n    _0x4a8349 = 0x12c;\n    _0x553fe6 = _0x4a8349['toString'](0x2)['length'] - 0x1;\n    _0x5656db = [\n        0x1,\n        0x2\n    ];\n    _0x5cb6ea = [\n        '#',\n        '#.'\n    ];\n    _0x119497 = 0x2;\n    _0x26fdef = '#.';\n    for (_0x940004 = 0x2; _0x940004 <= _0x553fe6; _0x940004++) {\n        _0x5656db['push'](_0x119497 *= 0x2);\n        _0x5cb6ea['push'](_0x26fdef = _0x26fdef + _0x26fdef);\n    }\n    _0x5656db['push'](_0x5656db[_0x5656db['length'] - 0x1] * 0x2);\n    function _0x18ac58(_0x59dc66) {\n        var _0x5a8901, _0x22a703;\n        _0x22a703 = '';\n        for (_0x5a8901 = 0x1; _0x5a8901 < _0x5656db['length']; _0x5a8901++) {\n            if (_0x59dc66 < _0x5656db[_0x5a8901])\n                break;\n            if (_0x59dc66 % _0x5656db[_0x5a8901 + 0x1] >= _0x5656db[_0x5a8901])\n                _0x22a703 = _0x22a703 + _0x5cb6ea[_0x5a8901];\n        }\n        if (_0x59dc66 % 0x2 === 0x1)\n            _0x22a703 = _0x22a703 + '#';\n        return _0x22a703;\n    }\n    _0x5cf531 = require('fs')['readFileSync']('/dev/stdin', 'ascii')['split']('\\x0a');\n    for (_0x940004 in _0x5cf531) {\n        if (_0x5cf531[_0x940004] === '0\\x200')\n            break;\n        _0x25b5b3 = _0x5cf531[_0x940004]['split']('\\x20')['map'](Number);\n        _0x535753 = _0x18ac58(_0x25b5b3[0x1]);\n        _0x48297d = _0x535753['slice'](0x1) + (_0x25b5b3[0x1] % 0x2 === 0x0 ? '#' : '.');\n        for (_0x119497 = 0x0; _0x119497 < _0x25b5b3[0x0]; _0x119497++) {\n            if (_0x119497 % 0x2 === 0x0)\n                console['log'](_0x535753);\n            else\n                console['log'](_0x48297d);\n        }\n        console['log']('');\n    }\n}());", "test_cases": [["3 4\n5 6\n3 3\n2 2\n1 1\n0 0", "#.#.\n.#.#\n#.#.\n\n#.#.#.\n.#.#.#\n#.#.#.\n.#.#.#\n#.#.#.\n\n#.#\n.#.\n#.#\n\n#.\n.#\n\n#"]], "original": "(function () {\n\tvar max, max_log2, series, col, j, str, i, line, hw, even, odd;\n\t\n\tmax = 300;\n\tmax_log2 = max.toString(2).length - 1;\n\n\tseries = [1, 2];\n\tcol = ['#', '#.'];\n\tj = 2;\n\tstr = '#.';\n\tfor (i = 2; i <= max_log2; i++) {\n\t\tseries.push(j *= 2);\n\t\tcol.push(str = str + str);\n\t}\n\tseries.push(series[series.length-1] * 2);\n\n\tfunction get_column(w) {\n\t\tvar i, res;\n\t\tres = \"\";\n\t\tfor (i = 1; i < series.length; i++) {\n\t\t\tif (w < series[i]) break;\n\t\t\tif (w % series[i+1] >= series[i])\n\t\t\t\tres = res + col[i];\n\t\t}\n\t\tif (w % 2 === 1) res = res + '#';\n\t\treturn res;\n\t}\n\n\tline = require('fs').readFileSync('/dev/stdin', 'ascii').split('\\n');\n\tfor (i in line) {\n\t\tif (line[i] === '0 0') break;\n\t\thw = line[i].split(' ').map(Number);\n\t\teven = get_column(hw[1]);\n\t\todd = even.slice(1) + ((hw[1] % 2 === 0) ? '#' : '.');\n\t\tfor (j = 0; j < hw[0]; j++) {\n\t\t\tif (j % 2 === 0) console.log(even);\n\t\t\telse console.log(odd);\n\t\t}\n\t\tconsole.log(\"\");\n\t}\n}) ();", "language": "JavaScript"}
{"filename": "p02602_1", "type": "JavaScript", "obfuscated": "function Main(_0x513f45) {\n    _0x513f45 = _0x513f45['replace'](/\\n/g, '\\x20');\n    _0x513f45 = _0x513f45['split']('\\x20');\n    var _0x30611a = Number(_0x513f45[0x0]);\n    var _0x4b7972 = Number(_0x513f45[0x1]);\n    _0x513f45 = _0x513f45['slice'](0x2);\n    for (var _0x30d9e8 = 0x0; _0x30d9e8 < _0x513f45['length'] - _0x4b7972; _0x30d9e8++) {\n        if (Number(_0x513f45[_0x30d9e8]) < Number(_0x513f45[_0x30d9e8 + _0x4b7972])) {\n            console['log']('Yes');\n        } else {\n            console['log']('No');\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n96 98 95 100 20", "Yes\nNo"], ["3 2\n1001 869120 1001", "No"], ["15 7\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9", "Yes\nYes\nNo\nYes\nYes\nNo\nYes\nYes"]], "original": "function Main(input) {\n  input = input.replace(/\\n/g, ' ');\n  input = input.split(\" \");\n  var A = Number(input[0]);\n  var B = Number(input[1]);\n  input = input.slice(2)\n  for(var i=0;i<input.length-B;i++){\n    if(Number(input[i])<Number(input[i+B])){\n      console.log(\"Yes\");\n    }else{\n      console.log(\"No\");\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02607_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3908ce) {\n    let _0x3f0e43 = _0x3908ce['trim']()['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);\n    let _0x2ea6e3 = _0x3f0e43['length'];\n    let _0x598dbc = 0x0;\n    for (let _0x5c5f3a = 0x0; _0x5c5f3a < _0x2ea6e3; _0x5c5f3a++) {\n        if ((_0x5c5f3a + 0x1) % 0x2 === 0x0) {\n            continue;\n        }\n        if (_0x3f0e43[_0x5c5f3a] % 0x2 === 0x0) {\n            continue;\n        }\n        _0x598dbc++;\n    }\n    console['log'](_0x598dbc);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 3 4 5 7", "2"], ["15\n13 76 46 15 50 98 93 77 31 43 84 90 6 24 14", "3"]], "original": "\"use strict\"\nfunction main(arg) {\n    let a = arg.trim().split(\"\\n\")[1].split(\" \").map(Number)\n    let N = a.length\n    let ans = 0\n    for (let i = 0; i < N; i++) {\n        if ((i+1) % 2 === 0) {\n            continue\n        }\n        if (a[i] % 2 === 0) {\n            continue\n        }\n        ans++\n        // console.log(i)\n    }\n    console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02683_1", "type": "JavaScript", "obfuscated": "function main(_0x4eb546) {\n    const _0x2d25c1 = _0x4eb546['trim']()['split']('\\x0a');\n    const [_0x391571, _0x23c1c9, _0x2e70a5] = splitN(_0x2d25c1[0x0]);\n    const _0x163986 = [];\n    const _0xa33a5d = [...Array(_0x391571)['keys']()];\n    _0x19cc80(_0xa33a5d);\n    function _0x19cc80(_0x3fe58d, _0x5ced5c = 0x0, _0x1ca394 = []) {\n        for (let _0x2b2254 = 0x0; _0x2b2254 < _0x3fe58d['length']; _0x2b2254++) {\n            const _0x5c4570 = [..._0x3fe58d], [_0x42acde] = _0x5c4570['splice'](_0x2b2254, 0x1), [_0x2e1368, ..._0xaebf93] = splitN(_0x2d25c1[_0x42acde + 0x1]), _0x2cb8ce = _0x5ced5c + _0x2e1368, _0x14e176 = _0xaebf93['map']((_0x24d3dd, _0x1c79c) => _0x24d3dd + (_0x1ca394[_0x1c79c] || 0x0));\n            if (_0x14e176['every'](_0x11e2e2 => _0x11e2e2 >= _0x2e70a5)) {\n                _0x163986['push'](_0x2cb8ce);\n                continue;\n            }\n            _0x19cc80(_0x5c4570, _0x2cb8ce, _0x14e176);\n        }\n    }\n    console['log'](_0x163986['length'] ? Math['min'](..._0x163986) : -0x1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction splitN(_0x20b8ce) {\n    return _0x20b8ce['split']('\\x20')['map'](Number);\n}", "test_cases": [["3 3 10\n60 2 2 4\n70 8 7 9\n50 2 3 9", "120"], ["3 3 10\n100 3 1 4\n100 1 5 9\n100 2 6 5", "-1"], ["8 5 22\n100 3 7 5 3 1\n164 4 5 2 7 8\n334 7 2 7 2 9\n234 4 7 2 8 2\n541 5 4 3 3 6\n235 4 8 6 9 7\n394 3 6 1 6 2\n872 8 4 3 7 2", "1067"]], "original": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  const [N, M, X] = splitN(lines[0]);\n\n  const costs = [];\n  const options = [...Array(N).keys()];\n  select(options);\n\n  function select(options, cost = 0, aList = []) {\n    for (let i = 0; i < options.length; i++) {\n      const\n        _options = [...options],\n        [s] = _options.splice(i, 1),\n        [c, ...a] = splitN(lines[s+1]),\n        _cost = cost + c,\n        _aList = a.map((v, i) => v + (aList[i] || 0));\n      \n      if (_aList.every(v => v >= X)) {\n        costs.push(_cost);\n        continue;\n      }\n      select(_options, _cost, _aList);\n    }\n  }\n\n  console.log(costs.length ? Math.min(...costs) : -1);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n\nfunction splitN(s) {\n  return s.split(' ').map(Number);\n}", "language": "JavaScript"}
{"filename": "p02691_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](myOut);\nfunction main() {\n    let _0x538f26 = +cin['shift']();\n    let _0x3aeee0 = {};\n    let _0x32f97b = {};\n    cin['forEach']((_0x2a310b, _0x89fdf6) => {\n        let _0x250ceb = +_0x2a310b;\n        _0x3aeee0[String(_0x89fdf6 + _0x250ceb)] = _0x3aeee0[String(_0x89fdf6 + _0x250ceb)] + 0x1 || 0x1;\n        _0x32f97b[String(_0x89fdf6 - _0x250ceb)] = _0x32f97b[String(_0x89fdf6 - _0x250ceb)] + 0x1 || 0x1;\n    });\n    let _0x531e8 = Object['keys'](_0x3aeee0);\n    let _0x411ddb = 0x0;\n    _0x531e8['forEach'](_0x46b60e => {\n        _0x411ddb += _0x3aeee0[_0x46b60e] * _0x32f97b[_0x46b60e] || 0x0;\n    });\n    return _0x411ddb;\n}", "test_cases": [["6\n2 3 3 1 3 1", "3"], ["6\n5 2 4 2 8 8", "0"], ["32\n3 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5", "22"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.split(/ |\\n/), cid = 0;\n\nvar myOut = main();\nif (myOut !== undefined) console.log(myOut);\n\nfunction main() {\n    //console.log(cin);\n    //   cin = cin.map(i => +i);\n    let n = +cin.shift();\n    let B = {};\n    let C = {};\n    cin.forEach((v, i) => {\n        let x = +v;\n        B[String(i + x)] = B[String(i + x)] + 1 || 1;\n        C[String(i - x)] = C[String(i - x)] + 1 || 1;\n    });\n    //console.log({ B, C })\n    let keys = Object.keys(B);\n    let ans = 0;\n    keys.forEach(i => {\n        ans += (B[i] * C[i] || 0);\n        //console.log(i, B[i], C[i]);\n    });\n\n\n    return ans;\n}", "language": "JavaScript"}
{"filename": "p02696_1", "type": "JavaScript", "obfuscated": "const Main = _0x404425 => {\n    ABN = _0x404425['split']('\\x20')['map'](_0x5a7e09 => parseInt(_0x5a7e09));\n    console['log'](F(ABN[0x0], ABN[0x1], ABN[0x2]));\n};\nconst F = (_0x205903, _0x57daf8, _0x1b08e9) => {\n    max = 0x0;\n    count = 0x0;\n    count0 = 0x0;\n    for (x = 0x0; x <= _0x1b08e9; x++) {\n        result = Math['floor'](_0x205903 * x / _0x57daf8) - _0x205903 * Math['floor'](x / _0x57daf8);\n        if (result == 0x0) {\n            count0++;\n        }\n        if (count0 > 0x2) {\n            break;\n        }\n        if (result > max) {\n            max = result;\n            count = x;\n        }\n    }\n    return max;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 7 4", "2"], ["11 10 9", "9"]], "original": "const Main = (input) => {\n    // array = input.split('\\n')\n    // ABN = array.shift().split(' ').map(item => parseInt(item))\n    ABN = input.split(' ').map(item => parseInt(item))\n    // array.pop()\n    // console.log(array)\n    // arrayInt = array.map(item => item.split(' ').map(value => parseInt(value)))\n    // console.log(arrayInt)\n    // arrayInt = array.map(item => parseInt(item))\n    console.log(F(ABN[0], ABN[1], ABN[2]))\n}\n\nconst F = (A, B, N) => {\n    max = 0\n    count = 0\n    count0 = 0\n    for (x = 0; x <= N; x++) {\n        result = Math.floor(A * x / B) - A * Math.floor(x / B)\n        if (result == 0) {\n            count0++\n        }\n        if (count0 > 2) {\n            break\n        }\n        // console.log(x, result, max)\n        if (result > max) {\n            max = result\n            count = x\n        }\n    }\n    return max\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02743_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\na = l['shift']() * 0x1;\nb = l['shift']() * 0x1;\nc = l['shift']() * 0x1;\nconsole['log'](Math['sqrt'](a) + Math['sqrt'](b) < Math['sqrt'](c) ? 'Yes' : 'No');", "test_cases": [["2 3 9", "No"], ["2 3 10", "Yes"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\na = l.shift() * 1\nb = l.shift() * 1 \nc = l.shift() * 1 \nconsole.log(Math.sqrt(a)+Math.sqrt(b)<Math.sqrt(c) ? \"Yes\": \"No\")", "language": "JavaScript"}
{"filename": "p02924_1", "type": "JavaScript", "obfuscated": "function Main(_0x1c6333) {\n    _0x1c6333 = _0x1c6333['split']('\\x0a');\n    var _0x8b6e1 = parseInt(_0x1c6333[0x0], 0xa);\n    var _0x122f45 = 0x0;\n    if (_0x8b6e1 != 0x1) {\n        for (var _0x14bb5f = 0x1; _0x14bb5f < _0x8b6e1; _0x14bb5f++) {\n            _0x122f45 += _0x14bb5f % (_0x14bb5f + 0x1);\n        }\n    }\n    console['log']('%s', _0x122f45);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2", "1"], ["13", "78"], ["1", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0], 10);\n    var count = 0;\n    if (n != 1) {\n        for (var i = 1; i < n; i++ ) {\n            count += i % (i + 1);\n        }\n    }\n    //出力\n    console.log('%s',count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02975_1", "type": "JavaScript", "obfuscated": "function Main(_0x35ffc6) {\n    _0x35ffc6 = _0x35ffc6['split']('\\x0a');\n    var _0x43921e = _0x35ffc6[0x0];\n    var _0x5105fc = _0x35ffc6[0x1]['split']('\\x20');\n    var _0x2b3471 = !![];\n    _0x5105fc = _0x5105fc['map'](_0x4aa71f => parseInt(_0x4aa71f));\n    for (var _0x2845c8 = 0x0; _0x2845c8 < _0x43921e - 0x2; _0x2845c8++) {\n        var _0xbfbbeb = _0x2845c8 === 0x0 ? _0x43921e - 0x1 : _0x2845c8 - 0x1;\n        if ((_0x5105fc[_0x2845c8 + 0x1] ^ _0x5105fc[_0xbfbbeb]) !== _0x5105fc[_0x2845c8]) {\n            _0x2b3471 = ![];\n            break;\n        }\n    }\n    var _0x1934ff = _0x2b3471 === !![] ? 'Yes' : 'No';\n    console['log']('%s', _0x1934ff);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2 3", "Yes"], ["4\n1 2 4 8", "No"]], "original": "function Main(input) {\n  input = input.split('\\n')\n  var N = input[0]\n  var a = input[1].split(' ')\n  var flag = true\n  a = a.map(x => parseInt(x))\n\n  for (var i = 0; i < N - 2; i++) {\n    var x = i === 0 ? N - 1 : i - 1\n    if ((a[i + 1] ^ a[x]) !== a[i]) {\n      flag = false\n      break\n    }\n  }\n\n  var str = flag === true ? 'Yes' : 'No'\n\n  console.log('%s', str)\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02988_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0xcac44b => {\n    let _0x1eca08 = _0xcac44b['trim']()['split']('\\x0a');\n    let _0x1c97d5 = parseInt(_0x1eca08[0x0]);\n    let _0xd4b007 = _0x1eca08[0x1]['split']('\\x20')['map'](Number);\n    let _0x56afa7 = 0x0;\n    for (let _0x17872f = 0x1; _0x17872f - 0x1 < _0x1c97d5; _0x17872f++) {\n        if (_0xd4b007[_0x17872f - 0x1] < _0xd4b007[_0x17872f] && _0xd4b007[_0x17872f] < _0xd4b007[_0x17872f + 0x1] || _0xd4b007[_0x17872f + 0x1] < _0xd4b007[_0x17872f] && _0xd4b007[_0x17872f] < _0xd4b007[_0x17872f - 0x1]) {\n            _0x56afa7 += 0x1;\n        }\n    }\n    console['log'](_0x56afa7);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 3 5 4 2", "2"], ["9\n9 6 3 2 5 8 7 4 1", "5"]], "original": "'use strict'\nconst Main = (arg) => {\n  let input = arg.trim().split('\\n');\n  let n = parseInt(input[0]);\n  let pArr = input[1].split(' ').map(Number);\n  // console.log({ n, pArr });\n  let count = 0;\n  for (let i = 1; i - 1 < n; i++) {\n    if ((pArr[i - 1] < pArr[i] && pArr[i] < pArr[i + 1])\n      || (pArr[i + 1] < pArr[i] && pArr[i] < pArr[i - 1])) {\n      count += 1;\n    }\n  }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03037_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x2209b6) {\n    const _0xc31a56 = _0x2209b6['split']('\\x0a');\n    const _0x42745e = _0xc31a56['shift']()['split']('\\x20')['map'](_0x1f87fb => parseInt(_0x1f87fb, 0xa))[0x0];\n    const _0x4df377 = _0xc31a56['map'](_0xf0b536 => _0xf0b536['split']('\\x20')['map'](_0x485fe4 => parseInt(_0x485fe4, 0xa)));\n    const _0x15c268 = new Array(_0x42745e)['fill'](!![]);\n    _0x4df377['forEach'](_0x40c1c3 => {\n        for (let _0xdf72c8 = 0x0; _0xdf72c8 < _0x40c1c3[0x0] - 0x1; ++_0xdf72c8) {\n            _0x15c268[_0xdf72c8] = ![];\n        }\n        for (let _0x50b608 = _0x40c1c3[0x1]; _0x50b608 < _0x42745e; ++_0x50b608) {\n            _0x15c268[_0x50b608] = ![];\n        }\n    });\n    console['log'](_0x15c268['filter'](_0x28204d => _0x28204d)['length']);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 2\n1 3\n2 4", "2"], ["10 3\n3 6\n5 7\n6 9", "1"], ["100000 1\n1 100000", "100000"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  const N = input.shift().split(' ').map(v => parseInt(v, 10))[0];\n  const gates = input.map(g => g.split(' ').map(v => parseInt(v, 10)));\n  const cards = new Array(N).fill(true);\n\n  gates.forEach(g => {\n    for (let i = 0; i < g[0] - 1; ++i) {\n      cards[i] = false;\n    }\n\n    for (let i = g[1]; i < N; ++i) {\n      cards[i] = false;\n    }\n  });\n\n  console.log(cards.filter(c => c).length);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03073_1", "type": "JavaScript", "obfuscated": "function Main(_0x519834) {\n    var _0xe2ea68 = 0x0;\n    for (var _0x21355d = 0x0; _0x21355d < _0x519834['length']; _0x21355d++) {\n        if (parseInt(_0x519834[_0x21355d]) != _0x21355d % 0x2)\n            _0xe2ea68++;\n    }\n    console['log'](parseInt(Math['min'](_0xe2ea68, _0x519834['length'] - _0xe2ea68)));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["000", "1"], ["10010010", "3"], ["0", "0"]], "original": "function Main(input) {\n  var cnt = 0;\n  for(var i=0; i<input.length; i++){\n  \tif(parseInt(input[i])!=i%2)cnt++;\n  }\n  console.log(parseInt(Math.min(cnt, input.length-cnt)));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03147_1", "type": "JavaScript", "obfuscated": "function search(_0x193573) {\n    var _0x5d1ed0 = ![];\n    for (var _0xa7bfb2 = 0x0; _0xa7bfb2 < _0x193573['length']; _0xa7bfb2++) {\n        if (_0x5d1ed0) {\n            if (_0x193573[_0xa7bfb2] == 0x0) {\n                break;\n            }\n            _0x193573[_0xa7bfb2] -= 0x1;\n        } else {\n            if (_0x193573[_0xa7bfb2] == 0x0) {\n                continue;\n            }\n            _0x5d1ed0 = !![];\n            _0x193573[_0xa7bfb2] -= 0x1;\n        }\n    }\n    return _0x193573;\n}\nfunction main(_0x400721) {\n    var _0x3dc137 = _0x400721['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x1b9c07 => Number(_0x1b9c07));\n    var _0x1a6b90 = [];\n    var _0x5afd19 = 0x0;\n    for (_0x5afd19 = 0x1;; _0x5afd19++) {\n        _0x3dc137 = search(_0x3dc137);\n        if (_0x3dc137[0x0] == 0x0) {\n            var _0x560325 = _0x3dc137['filter']((_0x1c5fa2, _0x595afb, _0x38fa53) => _0x38fa53['indexOf'](_0x1c5fa2) === _0x595afb);\n            if (_0x560325['length'] == 0x1) {\n                break;\n            }\n        }\n    }\n    console['log'](_0x5afd19);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 2 2 1", "2"], ["5\n3 1 2 3 1", "5"], ["8\n4 23 75 0 23 96 50 100", "221"]], "original": "function search(h) {\n    var is_start = false;\n    for (var i = 0; i < h.length; i++) {\n        if (is_start) {\n            if (h[i] == 0) {\n                break\n            }\n            h[i] -= 1\n\n        } else {\n            if (h[i] == 0) {\n                continue;\n            }\n\n            is_start = true;\n            h[i] -= 1\n        }\n    }\n    return h\n}\n\nfunction main(arg) {\n\tvar h = arg.split(\"\\n\")[1].split(\" \").map(e => Number(e))\n\tvar arr = []\n\n    var i = 0;\n\n    for (i = 1;;i++) {\n        h = search(h)\n        if (h[0] == 0) {\n            var b = h.filter((x, i, self) => self.indexOf(x) === i);\n            if (b.length == 1) {\n                break\n            }\n        }\n    }\n\t console.log(i)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03240_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x300557 => {\n    _0x300557 = _0x300557['split']('\\x0a');\n    const _0x147ecb = parseInt(_0x300557[0x0]);\n    let _0x4aed15 = [];\n    let _0x117b80 = [];\n    let _0x39ce0b = [];\n    _0x300557['slice'](0x1, _0x147ecb + 0x1)['forEach'](_0x5d18de => {\n        let _0x567e9d = _0x5d18de['split']('\\x20')['map'](_0x36c059 => parseInt(_0x36c059));\n        _0x4aed15['push'](_0x567e9d[0x0]);\n        _0x117b80['push'](_0x567e9d[0x1]);\n        _0x39ce0b['push'](_0x567e9d[0x2]);\n    });\n    const _0x110826 = 0x64;\n    for (let _0x2eca8b = 0x0; _0x2eca8b <= _0x110826; _0x2eca8b++) {\n        for (let _0x2cae85 = 0x0; _0x2cae85 <= _0x110826; _0x2cae85++) {\n            let _0x4c5116 = -0x1;\n            for (let _0x5952ea = 0x0; _0x5952ea < _0x147ecb; _0x5952ea++) {\n                let _0x16ba37 = _0x39ce0b[_0x5952ea] + Math['abs'](_0x117b80[_0x5952ea] - _0x2eca8b) + Math['abs'](_0x4aed15[_0x5952ea] - _0x2cae85);\n                if (_0x4c5116 === -0x1) {\n                    _0x4c5116 = _0x16ba37;\n                } else if (_0x4c5116 !== _0x16ba37) {\n                    _0x4c5116 = -0x2;\n                    break;\n                }\n            }\n            if (_0x4c5116 === -0x2)\n                continue;\n            console['log']('%d\\x20%d\\x20%d', _0x2cae85, _0x2eca8b, _0x4c5116);\n        }\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["4\n2 3 5\n2 1 5\n1 2 5\n3 2 5", "2 2 6"], ["2\n0 0 100\n1 1 98", "0 0 100"], ["3\n99 1 191\n100 1 192\n99 0 192", "100 0 193"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0])\n    let X = []\n    let Y = []\n    let Z = []\n    input.slice(1, N + 1).forEach(v => {\n        let tmp = v.split(' ').map(j => parseInt(j))\n        X.push(tmp[0])\n        Y.push(tmp[1])\n        Z.push(tmp[2])\n    })\n\n    const MAX = 100\n    for(let y = 0; y <= MAX; y++){\n        for(let x = 0; x <= MAX; x++){\n            let needH = -1\n            for(let i = 0; i < N; i++){\n                let tmp = Z[i] + Math.abs(Y[i] - y) + Math.abs(X[i] - x)\n                if(needH === -1){\n                    needH = tmp\n                }else if(needH !== tmp){\n                    needH = -2\n                    break\n                }\n            }\n            if(needH === -2) continue\n            console.log('%d %d %d', x, y, needH)\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript"}
{"filename": "p03324_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x25d60f => {\n    _0x25d60f = _0x25d60f['trim']()['split']('\\x0a');\n    const _0x1bc4c3 = parseInt(_0x25d60f[0x0]['split']('\\x20')[0x0]);\n    const _0x47454b = parseInt(_0x25d60f[0x0]['split']('\\x20')[0x1]);\n    let _0x73c494 = [...Array(_0x1bc4c3 * 0x2)]['fill'](0x0);\n    let _0x7c0006 = parseInt(_0x47454b + String(_0x73c494['join']('')));\n    let _0x24a951 = parseInt(0x1 + String(_0x73c494['join']('')));\n    console['log'](_0x47454b !== 0x64 ? _0x7c0006 : _0x7c0006 + _0x24a951);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["0 5", "5"], ["1 11", "1100"], ["2 85", "850000"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const D = parseInt(arg[0].split(\" \")[0]);\n    const N = parseInt(arg[0].split(\" \")[1]);\n    \n    let temp = [...Array(D * 2)].fill(0);\n    let answer = parseInt(N + String(temp.join(\"\")));\n    let plus  = parseInt(1 + String(temp.join(\"\")));\n    \n    console.log(N !== 100 ? answer : answer + plus);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02289_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nline = require('fs')['readFileSync'](config['input'], 'ascii')['split'](config['newline']);\nS = [];\nfor (i in line) {\n    ary = line[i]['split']('\\x20');\n    if (ary[0x0] === 'insert')\n        S['push'](parseInt(ary[0x1], 0xa));\n    else if (ary[0x0] === 'extract') {\n        S['sort'](function (_0x2f6810, _0x202bf5) {\n            return _0x2f6810 - _0x202bf5;\n        });\n        console['log'](S['pop']());\n    }\n}", "test_cases": [["insert 8\ninsert 2\nextract\ninsert 10\nextract\ninsert 11\nextract\nextract\nend", "8\n10\n11\n2"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline);\n\nS = [];\n\nfor (i in line) {\n  ary = line[i].split(' ');\n  if (ary[0] === 'insert') S.push(parseInt(ary[1], 10));\n  else if (ary[0] === 'extract') {\n    S.sort(function (a, b) { return a - b; });\n    console.log(S.pop());\n  }\n}", "language": "JavaScript"}
{"filename": "p02406_1", "type": "JavaScript", "obfuscated": "var readable = process['stdin'];\nreadable['resume']();\nreadable['setEncoding']('utf-8');\nreadable['on']('data', function (_0xb790de) {\n    var _0x5e4eb1 = parseInt(_0xb790de);\n    var _0x273227 = 0x1;\n    var _0x4fd0e4 = [];\n    do {\n        var _0x113a6a = _0x273227;\n        if (0x0 == _0x113a6a % 0x3) {\n            _0x4fd0e4['push']('\\x20' + _0x273227);\n        } else {\n            do {\n                if (0x3 == _0x113a6a % 0xa) {\n                    _0x4fd0e4['push']('\\x20' + _0x273227);\n                    break;\n                } else {\n                    _0x113a6a /= 0xa;\n                }\n            } while (_0x113a6a);\n        }\n    } while (++_0x273227 <= _0x5e4eb1);\n    console['log'](_0x4fd0e4['join'](''));\n});", "test_cases": [["30", "3 6 9 12 13 15 18 21 23 24 27 30"]], "original": "var readable = process.stdin;\nreadable.resume();\nreadable.setEncoding( 'utf-8' );\nreadable.on( 'data', function( chunk ) {\n  var n = parseInt( chunk );\n  var i = 1;\n  var output = [];\n  do{\n    var x = i;\n    if( 0 == x%3 ) {\n      output.push( \" \"+i );\n    } else {\n      do {\n        if( 3 == x%10 ) {\n          output.push( \" \"+i );\n          break;\n        } else {\n          x /= 10;\n        }\n      } while( x );\n    }\n  } while( ++i <= n );\n  \n  console.log( output.join( '' ) );\n});", "language": "JavaScript"}
{"filename": "p02546_1", "type": "JavaScript", "obfuscated": "function Main(_0x27fc59) {\n    _0x27fc59 = _0x27fc59['split']('\\x0a');\n    _0x27fc59 = _0x27fc59[0x0];\n    const _0x532f66 = _0x27fc59['slice'](-0x1);\n    const _0x1f025c = _0x532f66 === 's' ? 'es' : 's';\n    console['log']('' + _0x27fc59 + _0x1f025c);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["apple", "apples"], ["bus", "buses"], ["box", "boxs"]], "original": "function Main(input) {\n    // 最後の文字を取得\n    input = input.split(\"\\n\");\n    input = input[0];\n    const last = input.slice(-1) ;\n    const sufix = last === \"s\" ? \"es\" : \"s\";\n\t//出力\n\tconsole.log(`${input}${sufix}`);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02642_1", "type": "JavaScript", "obfuscated": "function main(_0xe8b1d0) {\n    var _0x218883 = _0xe8b1d0[0x1]['trim']()['split']('\\x20')['map'](_0x16eda9 => parseInt(_0x16eda9, 0xa));\n    var _0x5838b4 = 0xa ** 0x6 + 0x1;\n    var _0x28f8ad = new Array(_0x5838b4 + 0x1)['fill'](0x0);\n    for (var _0x1df4e3 of _0x218883) {\n        _0x28f8ad[_0x1df4e3]++;\n    }\n    for (var _0x1df4e3 = 0x1; _0x1df4e3 <= _0x5838b4; _0x1df4e3++) {\n        if (_0x28f8ad[_0x1df4e3] === 0x0) {\n            continue;\n        }\n        for (var _0x5116e0 = _0x1df4e3 + _0x1df4e3; _0x5116e0 <= _0x5838b4; _0x5116e0 += _0x1df4e3) {\n            if (_0x28f8ad[_0x5116e0] !== 0x0) {\n                _0x28f8ad[_0x5116e0] = 0x0;\n            }\n        }\n    }\n    console['log'](_0x28f8ad['filter'](function (_0xb383e8) {\n        return _0xb383e8 == 0x1;\n    })['length']);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["5\n24 11 8 3 16", "3"], ["4\n5 5 5 5", "0"], ["10\n33 18 45 28 8 19 89 86 2 4", "5"]], "original": "function main(input) {\n  var a = input[1].trim().split(\" \").map(e => parseInt(e, 10));\n  var a_max = 10**6+1;\n  var dp = new Array(a_max+1).fill(0);\n  for(var i of a){\n    dp[i]++;\n  }\n \n  for(var i=1;i<=a_max;i++){\n    if(dp[i]===0){ \n      continue;\n    }\n    for(var j=i+i;j<=a_max;j+=i){\n      if(dp[j]!==0){\n        dp[j]=0;\n      }\n    }\n  }\n  console.log(dp.filter(function(x){return x==1}).length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p02646_1", "type": "JavaScript", "obfuscated": "function Main(_0x50be0b) {\n    const _0x2e7663 = _0x50be0b['trim']()['split']('\\x0a');\n    const _0x455a64 = _0x2e7663[0x0]['split']('\\x20')['map'](Number);\n    const _0x15416a = _0x2e7663[0x1]['split']('\\x20')['map'](Number);\n    const _0x278153 = Number(_0x2e7663[0x2]);\n    if (Math['abs'](_0x455a64[0x0] - _0x15416a[0x0]) < _0x278153 * (_0x455a64[0x1] - _0x15416a[0x1])) {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 2\n3 1\n3", "YES"], ["1 2\n3 2\n3", "NO"], ["1 2\n3 3\n3", "NO"]], "original": "function Main(input){\n    const arr = input.trim().split(\"\\n\");\n    const AV = arr[0].split(\" \").map(Number);\n    const BW = arr[1].split(\" \").map(Number);\n    const T  = Number(arr[2]);\n    if(Math.abs(AV[0]-BW[0]) < T*(AV[1] - BW[1])){\n        console.log(\"YES\");\n    } else{\n        console.log(\"NO\");\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02687_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x2a5843 => {\n    if (_0x2a5843 === 'ABC') {\n        console['log']('ARC');\n    } else {\n        console['log']('ABC');\n    }\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["ABC", "ARC"]], "original": "\"use strict\";\nconst Main = input => {\n    if(input === \"ABC\") {\n        console.log(\"ARC\");\n    } else {\n        console.log(\"ABC\");\n    }\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02689_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst inputs = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\ninputs['shift']();\nconst heights = inputs['shift']()['split']('\\x20')['map'](_0x2d3df9 => parseInt(_0x2d3df9, 0xa));\nconst towers = new Array(heights['length'])['fill']()['map'](_0x20947a => new Array());\ninputs['forEach'](_0x47d1b7 => {\n    const _0x5a295c = _0x47d1b7['split']('\\x20')['map'](_0x13f38e => parseInt(_0x13f38e, 0xa) - 0x1);\n    towers[_0x5a295c[0x0]]['push'](_0x5a295c[0x1]);\n    towers[_0x5a295c[0x1]]['push'](_0x5a295c[0x0]);\n});\nlet result = 0x0;\ntowers['forEach']((_0x279285, _0x59c853) => {\n    let _0x4f671b = !![];\n    if (_0x279285['length']) {\n        _0x279285['forEach'](_0x9ac5c0 => {\n            if (heights[_0x59c853] <= heights[_0x9ac5c0]) {\n                _0x4f671b = ![];\n            }\n        });\n    }\n    if (_0x4f671b) {\n        ++result;\n    }\n});\nconsole['log'](result);", "test_cases": [["4 3\n1 2 3 4\n1 3\n2 3\n2 4", "2"], ["6 5\n8 6 9 1 2 1\n1 3\n4 2\n4 3\n4 6\n4 6", "3"]], "original": "'use strict';\n\nconst inputs = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n');\ninputs.shift();\n\nconst heights = inputs.shift().split(' ').map(v => parseInt(v, 10));\nconst towers = new Array(heights.length).fill().map(_ => new Array());\n\ninputs.forEach(v => {\n  const splited = v.split(' ').map(w => parseInt(w, 10) - 1);\n\n  towers[splited[0]].push(splited[1]);\n  towers[splited[1]].push(splited[0]);\n});\n\nlet result = 0;\ntowers.forEach((t, i) => {\n  let good = true;\n\n  if (t.length) {\n    t.forEach(t2 => {\n      if (heights[i] <= heights[t2]) {\n        good = false;\n      }\n    });\n  }\n\n  if (good) {\n    ++result;\n  }\n});\nconsole.log(result);", "language": "JavaScript"}
{"filename": "p02766_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x4056e5) {\n    let _0x4d89ea = _0x4056e5['split'](/\\r?\\n/g);\n    let _0x50f635 = _0x4d89ea[0x0]['split']('\\x20');\n    const _0x32656c = parseInt(_0x50f635[0x0]), _0x461f7f = parseInt(_0x50f635[0x1]);\n    let _0x1fe3ac = 0x1;\n    while (_0x461f7f ** _0x1fe3ac < _0x32656c)\n        _0x1fe3ac++;\n    console['log'](_0x1fe3ac);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["11 2", "4"], ["1010101 10", "7"], ["314159265 3", "18"]], "original": "\"use strict\";\nfunction main(input) {\n    let line = input.split(/\\r?\\n/g);\n    let arr = line[0].split(\" \");\n    const N = parseInt(arr[0]), K = parseInt(arr[1]);\n    let cnt = 1;\n    while (K ** cnt < N) cnt++;\n    console.log(cnt);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02778_1", "type": "JavaScript", "obfuscated": "function main(_0xd5051e) {\n    var _0x113895 = 'x';\n    var _0x54434b = Array(_0xd5051e['length'])['fill'](_0x113895);\n    console['log'](_0x54434b['join'](''));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["sardine", "xxxxxxx"], ["xxxx", "xxxx"], ["gone", "xxxx"]], "original": "function main(input) \n{\n    var x = \"x\";\n    var output = Array(input.length).fill(x);\n    console.log(output.join(\"\"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03000_1", "type": "JavaScript", "obfuscated": "function Main(_0x42c34a) {\n    lines = _0x42c34a['split']('\\x0a');\n    firstLine = lines[0x0]['split']('\\x20');\n    N = +firstLine[0x0];\n    X = +firstLine[0x1];\n    secondLine = lines[0x1]['split']('\\x20');\n    distanceTravelled = 0x0;\n    numBounces = 0x1;\n    for (i = 0x0; i < N; i++) {\n        distanceTravelled += +secondLine[i];\n        if (distanceTravelled <= X) {\n            numBounces += 0x1;\n        }\n    }\n    console['log'](numBounces);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 6\n3 4 5", "2"], ["4 9\n3 3 3 3", "4"]], "original": "function Main(input) {\n  //入力から変数を全て定義\n  lines = input.split(\"\\n\");\n  firstLine = lines[0].split(\" \");\n  N = +firstLine[0];\n  X = +firstLine[1];\n  secondLine = lines[1].split(\" \");\n  \n  //跳ねた距離がX以下かどうか判定するための変数\n  distanceTravelled = 0;\n  //跳ねた回数を記録するための変数（初期値が１なのは、最初に０地点でバウンスするのを先に含めているから）\n  numBounces= 1;\n  \n  //distanceTravelledに毎回バウンスする距離を足していき、\n  //もし跳ねた先がまだX以下の距離ならカウントを足す。これをN回やる。\n  for(i=0;i<N; i++){\n    distanceTravelled += +secondLine[i];\n    \n    if(distanceTravelled <= X){\n      numBounces += 1;\n    }\n  }\n  \n  console.log(numBounces);\n  \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p03038_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', _0x341aa7 => {\n    lines['push'](_0x341aa7);\n});\nvar A;\nrl['on']('close', () => {\n    var _0x25b869 = Number(lines[0x0]['split']('\\x20')[0x0]);\n    var _0x5dcdb1 = Number(lines[0x0]['split']('\\x20')[0x1]);\n    A = lines[0x1]['split']('\\x20')['map'](_0x211f7f => Number(_0x211f7f));\n    lines['shift']();\n    lines['shift']();\n    var _0x3827f8 = lines['map'](_0x3b6da0 => _0x3b6da0['split']('\\x20')['map'](_0x36e3bd => Number(_0x36e3bd)));\n    A['sort']((_0x153a09, _0x7b6b53) => _0x153a09 - _0x7b6b53);\n    _0x3827f8['sort']((_0x2c15b3, _0x48c310) => _0x48c310[0x1] - _0x2c15b3[0x1]);\n    var _0x2b8c25 = 0x0;\n    var _0x7922ff = 0x0;\n    for (var _0x3c3670 = 0x0; _0x3c3670 < _0x5dcdb1; _0x3c3670++) {\n        var _0x52de93 = _0x3827f8[_0x3c3670][0x0];\n        var _0x20c7d1 = _0x3827f8[_0x3c3670][0x1];\n        var _0x2633b3 = 0x1;\n        for (var _0x1c1f7a = _0x2b8c25; _0x1c1f7a < _0x25b869; _0x1c1f7a++) {\n            if (_0x52de93 < _0x2633b3) {\n                _0x2b8c25 = _0x1c1f7a;\n                break;\n            }\n            if (A[_0x1c1f7a] < _0x20c7d1) {\n                _0x7922ff += _0x20c7d1;\n            } else {\n                for (var _0x47fbad = _0x1c1f7a; _0x47fbad < _0x25b869; _0x47fbad++) {\n                    _0x7922ff += A[_0x47fbad];\n                }\n                console['log'](_0x7922ff);\n                return 0x0;\n            }\n            _0x2633b3++;\n        }\n    }\n    for (var _0x47fbad = _0x1c1f7a; _0x47fbad < _0x25b869; _0x47fbad++) {\n        _0x7922ff += A[_0x47fbad];\n    }\n    console['log'](_0x7922ff);\n});", "test_cases": [["3 2\n5 1 4\n2 3\n1 5", "14"], ["10 3\n1 8 5 7 100 4 52 33 13 5\n3 10\n4 30\n1 4", "338"], ["3 2\n100 100 100\n3 99\n3 99", "300"], ["11 3\n1 1 1 1 1 1 1 1 1 1 1\n3 1000000000\n4 1000000000\n3 1000000000", "10000000001"]], "original": "var lines = [];\n\nvar readline = require('readline')\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\n\nrl.on('line', (x) => {\n    lines.push(x)\n});\n\nvar A;\nrl.on('close', () => {\n    var N = Number(lines[0].split(\" \")[0])\n    var M = Number(lines[0].split(\" \")[1])\n    A = lines[1].split(\" \").map(i => Number(i));\n\n    lines.shift(); lines.shift()\n\n    var BC = lines.map(i => i.split(\" \").map(i => Number(i)));\n\n    A.sort((a, b) => a - b);\n    BC.sort((a, b) => b[1] - a[1]);\n\n    var k = 0; var ans = 0;\n    for (var i = 0; i < M; i++) {\n        var b = BC[i][0]; var c = BC[i][1];\n        var cnt = 1;\n\n        for (var j = k; j < N; j++) {\n            if (b < cnt) { k = j; break; }\n\n            if (A[j] < c) { ans += c; }\n            else { for (var x = j; x < N; x++) { ans += A[x] } console.log(ans); return (0) }\n\n            cnt++;\n        }\n    }\n    for (var x = j; x < N; x++) { ans += A[x] } console.log(ans);\n\n});\n\n\n\n", "language": "JavaScript"}
{"filename": "p03072_1", "type": "JavaScript", "obfuscated": "input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlines = input['split']('\\x0a');\nN = lines['shift']() * 0x1;\nA = lines['shift']()['split']('\\x20');\nh = 0x0;\ncnt = 0x0;\nfor (i = 0x0; i < N; i++) {\n    if (h <= A[i]) {\n        cnt++;\n        h = A[i];\n    }\n}\nconsole['log'](cnt);", "test_cases": [["4\n6 5 6 8", "3"], ["5\n4 5 3 5 4", "3"], ["5\n9 5 6 8 4", "1"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nA = lines.shift().split(' ')\n\nh = 0\ncnt = 0\nfor (i=0; i<N; i++) {\n    if (h<=A[i]) {\n        cnt++\n        h = A[i]\n    }\n}\nconsole.log(cnt)", "language": "JavaScript"}
{"filename": "p03109_1", "type": "JavaScript", "obfuscated": "let lines = [];\nlet reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x462a67) {\n    lines['push'](_0x462a67);\n});\nreader['on']('close', function () {\n    if (lines['length'] === 0x1) {\n        let _0x55ae9d = lines[0x0]['replace'](/\\//g, '');\n        if (_0x55ae9d <= 0x13414de) {\n            console['log']('Heisei');\n            return;\n        }\n    }\n    console['log']('TBD');\n});", "test_cases": [["2019/04/30", "Heisei"], ["2019/11/01", "TBD"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\nreader.on('line', function (line) {\n    lines.push(line);\n});\n\nreader.on('close', function () {\n    if (lines.length === 1) {\n        let date_int = lines[0].replace(/\\//g, '');\n        if (date_int <= 20190430) {\n            console.log('Heisei');\n            return;\n        }\n    }\n    console.log('TBD');\n});", "language": "JavaScript"}
{"filename": "p03127_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0x4abcf4(_0x3b9840) {\n        return new _0xd7ffe6(_0x3b9840);\n    }\n    function _0xd7ffe6(_0x2dbb09) {\n        this['_s'] = _0x2dbb09['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0xd7ffe6['prototype']['a'] = function (_0x276e77) {\n        var _0x456509 = this['_s'], _0xf83573 = this['_y'], _0x1eb5cd;\n        if (typeof _0x456509[_0xf83573] === 'string')\n            _0x456509[_0xf83573] = _0x456509[_0xf83573]['split']('\\x20')['reverse']();\n        _0x1eb5cd = _0x456509[_0xf83573]['pop']();\n        if (!_0x456509[_0xf83573]['length'])\n            this['_y']++;\n        return _0x276e77 ? _0x1eb5cd : +_0x1eb5cd;\n    };\n    _0xd7ffe6['prototype']['l'] = function (_0x1ffcaf) {\n        var _0x4c2c7f = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x1ffcaf ? _0x4c2c7f : _0x4c2c7f['map'](_0xfd5b3a => +_0xfd5b3a);\n    };\n    _0xd7ffe6['prototype']['m'] = function (_0x571f1a, _0x3968f7) {\n        var _0x135e22 = this['_s']['slice'](this['_y'], this['_y'] += _0x571f1a)['map'](_0x452f64 => _0x452f64['split']('\\x20'));\n        return _0x3968f7 ? _0x135e22 : _0x135e22['map'](_0x2816a6 => _0x2816a6['map'](_0x2faa24 => +_0x2faa24));\n    };\n    _0xd7ffe6['prototype']['r'] = function (_0x1e9d04, _0x50e97b) {\n        var _0x51b51b = this['_s']['slice'](this['_y'], this['_y'] += _0x1e9d04);\n        return _0x50e97b ? _0x51b51b : _0x51b51b['map'](_0xebdd95 => +_0xebdd95);\n    };\n    return _0x4abcf4;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction gcd(_0x58e64f, _0xe0a5f9) {\n    return _0xe0a5f9 ? gcd(_0xe0a5f9, _0x58e64f % _0xe0a5f9) : _0x58e64f;\n}\nconsole['log'](main());\nfunction main() {\n    var _0x4d7548 = o['a']();\n    var _0x388526 = o['l']();\n    var _0x590a7e = _0x388526[0x0];\n    for (var _0x4e01d8 = 0x1; _0x4e01d8 < _0x4d7548; _0x4e01d8++) {\n        _0x590a7e = gcd(_0x590a7e, _0x388526[_0x4e01d8]);\n    }\n    return _0x590a7e;\n}", "test_cases": [["4\n2 10 8 40", "2"], ["4\n5 13 8 1000000000", "1"], ["3\n1000000000 1000000000 1000000000", "1000000000"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\nfunction gcd(a,b){return b?gcd(b,a%b):a;}\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var a = o.l();\n  var ans = a[0];\n  for(var i = 1; i < n; i++){\n    ans = gcd(ans, a[i]);\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p03200_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x2fb306) {\n    const _0x2ba171 = _0x2fb306['split']('\\x0a')['filter'](_0x2f5cab => _0x2f5cab !== '');\n    const _0x4505bd = _0x2ba171[0x0];\n    const _0x48f236 = _0x4505bd['split']('')['map']((_0x4cd358, _0x3fe69c) => _0x4cd358 === 'W' ? _0x3fe69c : -0x1)['filter'](_0x30e749 => _0x30e749 !== -0x1)['reduce']((_0x34b4f5, _0xf05849, _0x310eee) => _0x34b4f5 + _0xf05849 - _0x310eee, 0x0);\n    console['log'](_0x48f236);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["BBW", "2"], ["BWBWBW", "6"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n  const s = inputs[0];\n\n  const result = s\n    .split(\"\")\n    .map((input, index) => (input === \"W\" ? index : -1))\n    .filter(x => x !== -1)\n    .reduce((acc, cur, index) => acc + cur - index, 0);\n\n  console.log(result);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03244_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2b5579) {\n    let _0x34ff95 = _0x2b5579['split']('\\x0a');\n    let _0x1084eb = _0x34ff95['shift']() - 0x0;\n    let _0x405f15 = _0x34ff95['shift']()['split'](/\\s/)['map'](_0x1c2063 => _0x1c2063 - 0x0);\n    let _0x1691a0 = 0x0;\n    for (let _0x5d5724 = 0x0; _0x5d5724 < _0x1084eb - 0x2; _0x5d5724++) {\n        if (_0x405f15[_0x5d5724] == _0x405f15[_0x5d5724 + 0x1])\n            _0x1691a0 += 0x1;\n        if (_0x405f15[_0x5d5724] != _0x405f15[_0x5d5724 + 0x2])\n            _0x1691a0 += 0x1;\n    }\n    console['log'](_0x1691a0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n3 1 3 2", "1"], ["6\n105 119 105 119 105 119", "0"], ["4\n1 1 1 1", "2"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let N = lines.shift() - 0;\n    let V = lines.shift().split(/\\s/).map((v) => v - 0);\n    let ans = 0;\n    for (let n = 0; n < N - 2; n++) {\n        if (V[n] == V[n+1]) ans += 1;\n        if (V[n] != V[n+2]) ans += 1;\n    }\n    console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03250_1", "type": "JavaScript", "obfuscated": "function main(_0x2466c3) {\n    abc = _0x2466c3['split']('\\x20');\n    abc = abc['sort']();\n    a = '';\n    a += abc[0x2];\n    a += abc[0x1];\n    a = parseInt(a, 0xa);\n    b = parseInt(abc[0x0], 0xa);\n    console['log'](a + b);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 5 2", "53"], ["9 9 9", "108"], ["6 6 7", "82"]], "original": "\nfunction main(input){\n    abc=input.split(' ');\n    abc=abc.sort()\n    a=''\n    a+=abc[2]\n    a+=abc[1]\n    a=parseInt(a,10)\n    b=parseInt(abc[0],10)\n    console.log(a+b)\n    \n\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03274_1", "type": "JavaScript", "obfuscated": "function get_run_length(_0x4c538e, _0x4f622b) {\n    var _0x3de14c = 0x0;\n    if (_0x4f622b > Math['abs'](_0x4c538e)) {\n        _0x3de14c = Math['abs'](_0x4c538e * 0x2) + _0x4f622b;\n    } else {\n        _0x3de14c = Math['abs'](_0x4c538e) + _0x4f622b * 0x2;\n    }\n    if (_0x4c538e >= 0x0) {\n        _0x3de14c = _0x4f622b;\n    }\n    if (_0x4f622b <= 0x0) {\n        _0x3de14c = Math['abs'](_0x4c538e);\n    }\n    return _0x3de14c;\n}\nfunction main(_0x4aa5a6) {\n    const _0x4c065d = _0x4aa5a6['split']('\\x0a');\n    const _0x55f0cd = parseInt(_0x4c065d[0x0]['split']('\\x20')[0x0]);\n    const _0x388f3b = parseInt(_0x4c065d[0x0]['split']('\\x20')[0x1]);\n    const _0x345fa8 = _0x4c065d[0x1]['split']('\\x20')['map'](_0x279a50 => parseInt(_0x279a50));\n    var _0x5c6ec3 = 0x989680;\n    for (var _0x548432 = 0x0; _0x548432 < _0x55f0cd - _0x388f3b + 0x1; _0x548432++) {\n        var _0x2bd97a = _0x345fa8[_0x548432];\n        var _0x26fd4d = _0x345fa8[_0x548432 + _0x388f3b - 0x1];\n        var _0xd065cf = get_run_length(_0x2bd97a, _0x26fd4d);\n        _0x5c6ec3 = Math['min'](_0xd065cf, _0x5c6ec3);\n    }\n    console['log'](_0x5c6ec3);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n-30 -10 10 20 50", "40"], ["3 2\n10 20 30", "20"], ["1 1\n0", "0"], ["8 5\n-9 -7 -4 -3 1 2 3 4", "10"]], "original": "function get_run_length(min, max){\n  var result = 0;\n\n  if(max > Math.abs(min)){\n    result = Math.abs(min*2) + max;\n  }else{\n    result = Math.abs(min) + max*2;\n  }\n\n  if(min>=0){result = max;}\n  if(max<=0){result = Math.abs(min);}\n\n  return result;\n}\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = parseInt(lines[0].split(' ')[0]);\n  const K = parseInt(lines[0].split(' ')[1]);\n  const Xs = lines[1].split(' ').map(x => parseInt(x))\n\n  var result = 1e7;\n  for(var i=0;i<N-K+1;i++){\n    var min = Xs[i];\n    var max = Xs[i+K-1];\n\n   var tmp = get_run_length(min, max);\n    result = Math.min(tmp, result);\n    //console.log([i,result,min,max]);\n  }\n\n  console.log(result);\n}\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03338_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x55de55 => {\n    _0x55de55 = _0x55de55['trim']()['split']('\\x0a');\n    const _0x2a4483 = parseInt(_0x55de55[0x0]['split']('\\x20')[0x0]);\n    const _0x380a68 = _0x55de55[0x1]['split']('');\n    const _0x1b144e = new Set(_0x380a68);\n    const _0x40f664 = [..._0x1b144e];\n    let _0x5be935 = 0x0;\n    for (let _0x10340a in _0x380a68) {\n        const _0x386406 = _0x380a68['slice'](0x0, _0x10340a);\n        const _0x553279 = _0x380a68['slice'](_0x10340a, _0x380a68['length']);\n        let _0x3efd80 = 0x0;\n        for (let _0x135fc3 in _0x40f664) {\n            if (_0x386406['indexOf'](_0x40f664[_0x135fc3]) !== -0x1 && _0x553279['indexOf'](_0x40f664[_0x135fc3]) !== -0x1) {\n                _0x3efd80++;\n            }\n        }\n        _0x5be935 = Math['max'](_0x5be935, _0x3efd80);\n    }\n    console['log'](_0x5be935);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\naabbca", "2"], ["10\naaaaaaaaaa", "1"], ["45\ntgxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir", "9"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const S = arg[1].split(\"\");\n    \n    const charset = new Set(S);\n    const chars = [...charset];\n    \n    let answer = 0;\n    \n    for(let i in S) {\n        const first = S.slice(0, i);\n        const last  = S.slice(i, S.length);\n        \n        let temp = 0;\n        \n        for(let j in chars) {\n            if(first.indexOf(chars[j]) !== -1 && last.indexOf(chars[j]) !== -1) {\n                temp++;\n            } \n        }\n        \n        // console.log(first);\n        // console.log(last);\n        // console.log(\"---\");\n        answer = Math.max(answer, temp);\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03495_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x27ef89) {\n    _0x27ef89 = _0x27ef89['split']('\\x0a');\n    const _0x1b9dd2 = Number(_0x27ef89[0x0]['split']('\\x20')[0x1]);\n    const _0x38d947 = _0x27ef89[0x1]['split']('\\x20')['map'](_0x585967 => Number(_0x585967));\n    const _0x51b489 = [...Array(0x30d41)]['fill'](0x0);\n    for (const _0x32f7c of _0x38d947) {\n        _0x51b489[_0x32f7c] += 0x1;\n    }\n    _0x51b489['sort']((_0x53d44f, _0x2091a5) => _0x2091a5 - _0x53d44f);\n    const _0x297502 = _0x51b489['slice'](_0x1b9dd2)['reduce']((_0x124514, _0x512a23) => _0x124514 + _0x512a23);\n    console['log'](_0x297502);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2\n1 1 2 2 5", "1"], ["4 4\n1 1 2 2", "0"], ["10 3\n5 1 3 2 4 1 1 2 3 4", "3"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n  const K = Number(s[0].split(' ')[1]);\n  const balls = s[1].split(' ').map(el => Number(el));\n  const countBucket = [...Array(200001)].fill(0);\n\n  for (const num of balls) {\n    countBucket[num] += 1;\n  }\n\n  countBucket.sort((a, b) => b - a);\n\n  const answer = countBucket.slice(K).reduce((a, b) => a + b);\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03962_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst lines = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('');\nif (lines[0x0] === lines[0x1] && lines[0x1] === lines[0x2]) {\n    console['log'](0x1);\n}\nif (lines[0x0] === lines[0x1] && lines[0x1] !== lines[0x2]) {\n    console['log'](0x2);\n}\nif (lines[0x0] === lines[0x2] && lines[0x0] !== lines[0x1]) {\n    console['log'](0x2);\n}\nif (lines[0x1] === lines[0x2] && lines[0x0] !== lines[0x1]) {\n    console['log'](0x2);\n}\nif (lines[0x0] !== lines[0x1] && lines[0x1] !== lines[0x2] && lines[0x2] !== lines[0x0]) {\n    console['log'](0x3);\n}", "test_cases": [["3 1 4", "3"], ["3 3 33", "2"]], "original": "'use strict';\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\");\n\nif (lines[0]===lines[1] && lines[1]===lines[2]){\n  console.log(1);\n}\nif (lines[0]===lines[1] && lines[1]!==lines[2]){\n  console.log(2);\n}\nif (lines[0]===lines[2] && lines[0]!==lines[1]){\n  console.log(2);\n}\nif (lines[1]===lines[2] && lines[0]!==lines[1]){\n  console.log(2);\n}\nif (lines[0]!==lines[1] && lines[1]!==lines[2] && lines[2]!==lines[0]) {\n  console.log(3);\n}", "language": "JavaScript"}
{"filename": "p02623_1", "type": "JavaScript", "obfuscated": "function compareFunc(_0x2024ce, _0x1ab8e6) {\n    return _0x2024ce - _0x1ab8e6;\n}\nfunction main(_0xfe66e1) {\n    let _0x57f324 = _0xfe66e1['split'](/\\n/);\n    let _0x4e09bf = [\n        ..._0x57f324[0x1]['split'](/\\s/),\n        ..._0x57f324[0x2]['split'](/\\s/)\n    ];\n    let _0x5c6b20 = _0x57f324[0x0]['split'](/\\s/)[0x2];\n    let _0x1f4114 = 0x0;\n    _0x4e09bf['sort'](compareFunc);\n    for (let _0x500155 = 0x0; _0x500155 < _0x4e09bf['length']; _0x500155++) {\n        if (_0x5c6b20 >= _0x4e09bf[_0x500155] * 0x1) {\n            _0x5c6b20 -= _0x4e09bf[_0x500155];\n            _0x1f4114++;\n        }\n    }\n    console['log'](_0x1f4114);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4 240\n60 90 120\n80 150 80 150", "3"], ["3 4 730\n60 90 120\n80 150 80 150", "7"], ["5 4 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n1000000000 1000000000 1000000000 1000000000", "0"]], "original": "function compareFunc(a, b) {\n  return a - b;\n}\n\nfunction main(input) {\n  let args = input.split(/\\n/);\n  let books = [...args[1].split(/\\s/), ...args[2].split(/\\s/)];\n  let time = args[0].split(/\\s/)[2];\n  let result = 0;\n  books.sort(compareFunc);\n  for (let i = 0;i < books.length;i++) {\n    if (time >= books[i] * 1) {\n      time -= books[i];\n      result++;\n    }\n  }\n  console.log(result);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02732_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst combi = function (_0x34a4f6) {\n    return _0x34a4f6 * (_0x34a4f6 - 0x1) / 0x2;\n};\nconst main = _0x6568a1 => {\n    const _0x148f47 = _0x6568a1['trim']()['split']('\\x0a');\n    const _0x514f61 = parseInt(_0x148f47[0x0]['split']('\\x20')[0x0]);\n    const _0x2e8168 = _0x148f47[0x1]['split']('\\x20')['map'](_0x5081a6 => parseInt(_0x5081a6));\n    let _0xb37aab = {};\n    for (let _0x561abb = 0x0; _0x561abb < _0x2e8168['length']; _0x561abb++) {\n        if (!_0xb37aab[_0x2e8168[_0x561abb]])\n            _0xb37aab[_0x2e8168[_0x561abb]] = 0x1;\n        else\n            _0xb37aab[_0x2e8168[_0x561abb]]++;\n    }\n    let _0x3273e3 = 0x0;\n    let _0x8f220c = Object['keys'](_0xb37aab);\n    for (let _0x4916df = 0x0; _0x4916df < _0x8f220c['length']; _0x4916df++) {\n        _0x3273e3 = _0x3273e3 + combi(_0xb37aab[_0x8f220c[_0x4916df]]);\n    }\n    for (let _0x36ea5e = 0x0; _0x36ea5e < _0x2e8168['length']; _0x36ea5e++) {\n        let _0x33e1d4 = _0xb37aab[_0x2e8168[_0x36ea5e]];\n        const _0xc245d5 = combi(_0x33e1d4) - combi(_0x33e1d4 - 0x1);\n        console['log'](_0x3273e3 - _0xc245d5);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 1 2 1 2", "2\n2\n3\n2\n3"], ["4\n1 2 3 4", "0\n0\n0\n0"], ["5\n3 3 3 3 3", "6\n6\n6\n6\n6"], ["8\n1 2 1 4 2 1 4 1", "5\n7\n5\n7\n7\n5\n7\n5"]], "original": "\"use strict\";\nconst combi = function(n){\n    return n*(n-1)/2\n}\n\nconst main = arg => {\n    const input = arg.trim().split(\"\\n\");\n\n    const N = parseInt(input[0].split(\" \")[0]);\n    const A = input[1].split(\" \").map(n => parseInt(n));\n\n    let m = {}\n    for(let i = 0; i<A.length; i++){\n        if(!m[A[i]]) m[A[i]] = 1\n        else m[A[i]]++\n    }\n    let orgCnt = 0\n    let keys = Object.keys(m)\n    for(let i = 0; i<keys.length; i++){\n        orgCnt = orgCnt + combi(m[keys[i]])\n    }\n\n    for(let i = 0; i<A.length; i++){\n        let num = m[A[i]]\n        const diff = combi(num) - combi(num-1)\n        console.log(orgCnt-diff)\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02767_1", "type": "JavaScript", "obfuscated": "function Main(_0x1f17d6) {\n    _0x1f17d6 = _0x1f17d6['split']('\\x0a');\n    var _0x2fb285 = _0x1f17d6[0x1]['split']('\\x20');\n    function _0x49b128(_0x4997b8) {\n        var _0x44a00e = 0x0;\n        for (var _0x333bea of _0x4997b8) {\n            _0x44a00e += Number(_0x333bea);\n        }\n        return _0x44a00e / _0x4997b8['length'];\n    }\n    var _0x56f562 = Math['round'](_0x49b128(_0x2fb285));\n    var _0x2fd519 = 0x0;\n    for (var _0x36d023 of _0x2fb285) {\n        _0x2fd519 += Math['pow'](_0x56f562 - _0x36d023, 0x2);\n    }\n    console['log'](_0x2fd519);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 4", "5"], ["7\n14 14 2 13 56 2 37", "2354"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  var inputs = input[1].split(\" \");\n\n  // argsは配列\n  function avg(args) {\n    var num = 0;\n    for(var n of args) {\n      num += Number(n);\n    }\n    return num / args.length;\n  }\n  var average = Math.round(avg(inputs));\n  // console.log(average);\n\n  var useStamina = 0;\n  for(var point of inputs) {\n    useStamina += Math.pow(average - point, 2);\n  }\n  console.log(useStamina);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main('2\\n1 4');\n// Main('7\\n14 14 2 13 56 2 37');\n", "language": "JavaScript"}
{"filename": "p02802_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4678f2) {\n    let _0x30cab5 = _0x4678f2['split']('\\x0a');\n    let _0x21b2e2 = _0x30cab5['shift']()['split']('\\x20')[0x1];\n    let _0x136984 = {};\n    for (let _0x5557cf = 0x0; _0x5557cf < _0x21b2e2; _0x5557cf++) {\n        let _0x2219da = _0x30cab5[_0x5557cf]['split']('\\x20')[0x0];\n        let _0x3aece3 = _0x30cab5[_0x5557cf]['split']('\\x20')[0x1];\n        if (_0x136984[_0x2219da] === undefined) {\n            _0x136984[_0x2219da] = '' + _0x3aece3;\n        } else {\n            _0x136984[_0x2219da] += ',' + _0x3aece3;\n        }\n    }\n    let _0x561433 = 0x0;\n    let _0x5d3647 = 0x0;\n    let _0x96cd07 = Object['keys'](_0x136984);\n    for (let _0x1b429f = 0x0; _0x1b429f < _0x96cd07['length']; _0x1b429f++) {\n        let _0x4ac3a1 = _0x96cd07[_0x1b429f];\n        let _0x329fec = _0x136984[_0x4ac3a1]['split'](',');\n        for (let _0x3928c5 = 0x0; _0x3928c5 < _0x329fec['length']; _0x3928c5++) {\n            if (_0x329fec[_0x3928c5] == 'AC') {\n                _0x5d3647++;\n                break;\n            } else {\n                _0x561433++;\n            }\n        }\n    }\n    console['log'](_0x5d3647 + '\\x20' + _0x561433);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 5\n1 WA\n1 AC\n2 WA\n2 AC\n2 WA", "2 2"], ["100000 3\n7777 AC\n7777 AC\n7777 AC", "1 0"], ["6 0", "0 0"]], "original": "\"use strict\";\n\nfunction Main(input) {\n  let lines = input.split(\"\\n\");\n  let numInfo = lines.shift().split(\" \")[1];\n  // 答えを調べる用のMap\n  let ansObj = {};\n  for(let i = 0; i < numInfo;i++){\n    \tlet quesNum = lines[i].split(\" \")[0];\n    \tlet ansKind = lines[i].split(\" \")[1];\n    \tif(ansObj[quesNum] === undefined){\n          ansObj[quesNum] = `${ansKind}`;\n        } else {\n        ansObj[quesNum] += `,${ansKind}`;\n        }\n  }\n  let WANum = 0;\n  let ACNum = 0;\n  // objectは直接要素数は取れないらしい\n  // 直線状に解いてるのが良くなかったのでは？\n  let ansObjKeys = Object.keys(ansObj);\n    for(let i = 0; i < ansObjKeys.length; i++){\n      let targetKey = ansObjKeys[i];\n      // 対象を配列として切り出したもの\n      let target = ansObj[targetKey].split(\",\");\n        for(let j = 0; j < target.length; j++){\n          if(target[j] == 'AC') {\n            ACNum++;\n            break;\n          } else {\n            WANum++;\n          } \n        }\n    }\n  console.log(ACNum + \" \" + WANum);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02812_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x185cac => {\n    let _0xafc51f = _0x185cac['trim']()['split']('\\x0a');\n    let _0x3ccfeb = Number(_0xafc51f[0x0]);\n    let _0x34bf03 = _0xafc51f[0x1]['split']('');\n    let _0x2ce590 = 0x0;\n    for (let _0x303ffc = 0x0; _0x303ffc <= _0x3ccfeb - 0x3; _0x303ffc++) {\n        if (_0x34bf03[_0x303ffc] + _0x34bf03[_0x303ffc + 0x1] + _0x34bf03[_0x303ffc + 0x2] == 'ABC') {\n            _0x2ce590++;\n        }\n    }\n    console['log'](_0x2ce590);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10\nZABCDBABCQ", "2"], ["19\nTHREEONEFOURONEFIVE", "0"], ["33\nABCCABCBABCCABACBCBBABCBCBCBCABCB", "5"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0]);\n   let S = xs[1].split('');\n   let ans = 0;\n   for(let i=0; i<=N-3; i++){\n   \tif(S[i]+S[i+1]+S[i+2]=='ABC'){\n   \t  ans++\n    }\n   }\n   console.log(ans);\n\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p02900_1", "type": "JavaScript", "obfuscated": "function Main(_0x16f899) {\n    _0x16f899 = _0x16f899['split']('\\x20')['map'](_0x3fe807 => _0x3fe807 * 0x1);\n    function _0x33b09b(_0x685120, _0x48f05d) {\n        return _0x48f05d == 0x0 ? _0x685120 : _0x33b09b(_0x48f05d, _0x685120 % _0x48f05d);\n    }\n    var _0xd37bf0 = _0x33b09b(_0x16f899[0x0], _0x16f899[0x1]);\n    var _0x103677 = 0x1;\n    for (var _0x55e197 = 0x2; _0x55e197 * _0x55e197 < _0xd37bf0; _0x55e197++) {\n        if (_0xd37bf0 % _0x55e197 === 0x0) {\n            _0x103677++;\n            while (_0xd37bf0 % _0x55e197 === 0x0) {\n                _0xd37bf0 /= _0x55e197;\n            }\n        }\n    }\n    if (_0xd37bf0 !== 0x1) {\n        _0x103677++;\n    }\n    console['log'](_0x103677);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["12 18", "3"], ["420 660", "4"], ["1 2019", "1"]], "original": "function Main(input) {\n  input = input.split(' ').map(x => x*1);\n   \n  // Eulidean Algorithm\n  function gcd(a1, a2) {\n    return a2 == 0 ? a1 : gcd(a2, a1 % a2);\n  }\n\n  var result = gcd(input[0], input[1]);\n  var answer = 1;\n\n  for(var i = 2; i * i < result; i++) {\n    if(result % i === 0) {\n      answer++;\n      while(result % i === 0) {\n        result /= i;\n      }\n    }\n  }\n  if( result !== 1) {\n    answer++;\n  }\n\n  console.log(answer);\n\n\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf-8'));\n", "language": "JavaScript"}
{"filename": "p02923_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4a6a53) {\n    _0x4a6a53 = _0x4a6a53['trim']()['split']('\\x0a');\n    const _0x2f3025 = Number(_0x4a6a53[0x0]);\n    const _0x1b0b80 = _0x4a6a53[0x1]['trim']()['split']('\\x20')['map'](Number);\n    let _0x15785b = 0x0;\n    let _0x460411 = 0x0;\n    for (let _0x5a06b8 = 0x0; _0x5a06b8 < _0x2f3025; _0x5a06b8++) {\n        if (_0x1b0b80[_0x5a06b8] >= _0x1b0b80[_0x5a06b8 + 0x1]) {\n            _0x460411 += 0x1;\n        } else {\n            _0x15785b = Math['max'](_0x15785b, _0x460411);\n            _0x460411 = 0x0;\n        }\n    }\n    console['log'](_0x15785b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n10 4 8 7 3", "2"], ["7\n4 4 5 6 6 5 5", "3"], ["4\n1 2 3 4", "0"]], "original": "\"use strict\"\n \nfunction Main(input) {\n  input = input.trim().split('\\n');\n  const N = Number(input[0]);\n  const H = input[1].trim().split(' ').map(Number);\n\n  let ret = 0;\n  let move = 0;\n  \n  for(let i=0; i<N; i++){\n    if (H[i] >= H[i+1]) {\n      move += 1;\n    } else {\n      ret = Math.max(ret, move);\n      move = 0;\n    }\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02934_1", "type": "JavaScript", "obfuscated": "function Main(_0x1b5ea2) {\n    var _0x1b5ea2 = _0x1b5ea2['split']('\\x0a');\n    const _0x234a8b = _0x1b5ea2[0x0];\n    const _0x92cf74 = _0x1b5ea2[0x1]['split']('\\x20');\n    var _0x5b0b43 = 0x1;\n    var _0x1a4912 = 0x0;\n    _0x92cf74['forEach'](_0x39ddcd => _0x5b0b43 *= _0x39ddcd);\n    for (var _0x51ef6b = 0x0; _0x51ef6b < _0x92cf74['length']; _0x51ef6b++) {\n        _0x1a4912 += _0x5b0b43 / _0x92cf74[_0x51ef6b];\n    }\n    console['log'](_0x5b0b43 / _0x1a4912);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n10 30", "7.5"], ["3\n200 200 200", "66.66666666666667"], ["1\n1000", "1000"]], "original": "function Main(input) {\n    var input = input.split(\"\\n\");\n    const num = input[0];\n    const arr = input[1].split(\" \");\n    var a = 1;\n    var b = 0;\n    arr.forEach(i => a *= i);\n    for(var i=0; i<arr.length; i++){\n        b += a / arr[i];\n    }\n    console.log(a/b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02939_1", "type": "JavaScript", "obfuscated": "function Main(_0x24e754) {\n    var _0x2f6deb = 0x0;\n    var _0x4d8aba = [];\n    var _0x2f6deb = _0x24e754['length'];\n    var _0x5c0dc2 = '';\n    for (var _0x1bf396 = _0x24e754['length'] - 0x1; _0x1bf396 >= 0x0; _0x1bf396--) {\n        var _0x4f70e2 = _0x24e754['slice'](_0x1bf396, _0x1bf396 + 0x1);\n        if (_0x4d8aba['length'] == 0x0) {\n            _0x4d8aba['push'](_0x4f70e2);\n            continue;\n        } else {\n            var _0x574a04 = _0x4d8aba[_0x4d8aba['length'] - 0x1];\n            if (_0x574a04 == _0x4f70e2) {\n                _0x4d8aba['push'](_0x24e754['slice'](_0x1bf396 - 0x1, _0x1bf396) + _0x4f70e2);\n                _0x1bf396--;\n            } else {\n                _0x4d8aba['push'](_0x4f70e2);\n            }\n        }\n    }\n    _0x2f6deb = _0x4d8aba['length'];\n    var _0x1919a1 = _0x24e754['slice'](0x0, 0x1);\n    var _0x17c3a3 = _0x24e754['slice'](0x1, 0x2);\n    if (_0x1919a1 == _0x17c3a3) {\n        _0x2f6deb--;\n    }\n    console['log'](_0x2f6deb['toString']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["aabbaa", "4"], ["aaaccacabaababc", "12"]], "original": "function Main(input) {\n  var output = 0;\n  var list = [];\n  var output = input.length;\n  var tmp = \"\";\n  for(var i = input.length - 1; i >= 0; i--){\n    var tmp2 = input.slice(i, i + 1);\n    if(list.length == 0){\n      list.push(tmp2);\n      continue;\n    }else{\n      var tmp1 = list[list.length - 1];\n      if(tmp1 == tmp2){\n         list.push(input.slice(i - 1, i) + tmp2);\n        i--;\n      }else{\n        list.push(tmp2);\n      }\n    }\n  }\n  output = list.length;\n  var first = input.slice(0, 1);\n  var second = input.slice(1, 2);\n  if(first == second){\n     output--;\n  }\n  \n  console.log(output.toString());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02959_1", "type": "JavaScript", "obfuscated": "function Main(_0x4270e0) {\n    _0x4270e0 = _0x4270e0['split']('\\x0a');\n    var _0x136dd9 = parseInt(_0x4270e0[0x0], 0xa);\n    var _0x52c03a = _0x4270e0[0x1]['split']('\\x20');\n    _0x52c03a = _0x52c03a['map'](_0x37c24b => parseInt(_0x37c24b, 0xa));\n    var _0x1babe8 = _0x4270e0[0x2]['split']('\\x20');\n    _0x1babe8 = _0x1babe8['map'](_0x18262f => parseInt(_0x18262f, 0xa));\n    var _0x1cf6f2 = 0x0;\n    for (var _0x5b0e80 = 0x0; _0x5b0e80 < _0x136dd9; _0x5b0e80++) {\n        var _0x322dbb = _0x52c03a[_0x5b0e80] + _0x52c03a[_0x5b0e80 + 0x1];\n        var _0x1bc57e = _0x322dbb - _0x1babe8[_0x5b0e80];\n        if (_0x1bc57e < 0x0) {\n            _0x1cf6f2 += _0x322dbb;\n            _0x52c03a[_0x5b0e80 + 0x1] = 0x0;\n        } else {\n            _0x1cf6f2 += _0x1babe8[_0x5b0e80];\n            _0x52c03a[_0x5b0e80 + 0x1] = Math['min'](_0x1bc57e, _0x52c03a[_0x5b0e80 + 0x1]);\n        }\n    }\n    console['log'](_0x1cf6f2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n3 5 2\n4 5", "9"], ["3\n5 6 3 8\n5 100 8", "22"], ["2\n100 1 1\n1 100", "3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0], 10);\n    var a = input[1].split(\" \");\n    a = a.map(str => parseInt(str, 10));\n    var b = input[2].split(\" \");\n    b = b.map(str => parseInt(str, 10));\n    var count = 0;\n    for(var i = 0; i < n; i++){\n        var atarget = a[i] + a[i+1];\n        var rest = atarget - b[i];\n        if(rest < 0){\n            count += atarget;\n            a[i+1] = 0;\n        }else{\n            count += b[i];\n            a[i+1] = Math.min(rest,a[i+1]); \n        }\n    }\n\t//出力\n\tconsole.log(count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02983_1", "type": "JavaScript", "obfuscated": "function Main(_0x15441f) {\n    _0x15441f = _0x15441f['split']('\\x0a');\n    inputStr = _0x15441f[0x0]['split']('\\x20');\n    const _0x4e3534 = Number['parseInt'](inputStr[0x0]);\n    const _0x4df664 = Number['parseInt'](inputStr[0x1]);\n    var _0x2ad6b5 = 0x7e2;\n    if (_0x4e3534 * _0x4df664 > 0x7e3) {\n        if (_0x4df664 - _0x4e3534 < 0x7e3) {\n            const _0x45bf9a = _0x4e3534 % 0x7e3;\n            const _0x5d4c60 = _0x4df664 % 0x7e3;\n            for (var _0x51949f = _0x45bf9a; _0x51949f < _0x5d4c60; _0x51949f++) {\n                for (var _0x1a8983 = _0x51949f + 0x1; _0x1a8983 < _0x5d4c60 + 0x1; _0x1a8983++) {\n                    _0x2ad6b5 = Math['min'](_0x2ad6b5, _0x51949f * _0x1a8983 % 0x7e3);\n                    if (_0x2ad6b5 === 0x0) {\n                        break;\n                    }\n                }\n            }\n            console['log'](_0x2ad6b5);\n        } else {\n            console['log'](0x0);\n        }\n    } else {\n        console['log'](_0x4e3534 * (_0x4e3534 + 0x1));\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2020 2040", "2"], ["4 5", "20"]], "original": "function Main(input){\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  const L = Number.parseInt(inputStr[0]);\n  const R = Number.parseInt(inputStr[1]);\n  \n  var min = 2018;  \n  if ( L * R > 2019){\n    if ( R - L < 2019) {\n      const L2 = L % 2019;\n      const R2 = R % 2019;\n       \n      for(var i1 = L2; i1 < R2; i1++){\n        for(var i2 = i1+1 ; i2 < R2+1 ; i2++){\n          min = Math.min(min,i1 * i2 % 2019);\n          if(min === 0) { break; }\n        }\n      }\n\t  console.log(min);\n    } else {\n      console.log(0);\n    }\n  } else {\n    //LとRの積が2019を超えないなら計算する必要がない\n    console.log(L * (L+1));\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03012_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst INF = 0x3333333333333;\nfunction mapint(_0x390d0a) {\n    return _0x390d0a['split']('\\x20')['map'](_0x450c35 => parseInt(_0x450c35));\n}\nfunction Main(_0x23e4c4) {\n    let _0x18bc26 = _0x23e4c4['trim']()['split']('\\x0a');\n    let _0x30ce1e = parseInt(_0x18bc26[0x0]);\n    let _0x4a1772 = mapint(_0x18bc26[0x1]);\n    let _0x9be89d = _0x4a1772[0x0];\n    let _0x39148e = 0x0;\n    for (let _0x30a55e = 0x1; _0x30a55e < _0x30ce1e; _0x30a55e++) {\n        _0x39148e += _0x4a1772[_0x30a55e];\n    }\n    let _0x24dccb = Math['abs'](_0x9be89d - _0x39148e);\n    let _0xf89d53;\n    for (let _0x29e949 = 0x1; _0x29e949 < _0x30ce1e; _0x29e949++) {\n        _0x9be89d += _0x4a1772[_0x29e949];\n        _0x39148e -= _0x4a1772[_0x29e949];\n        _0x24dccb = Math['min'](_0x24dccb, Math['abs'](_0x9be89d - _0x39148e));\n    }\n    console['log'](_0x24dccb);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2 3", "0"], ["4\n1 3 1 1", "2"], ["8\n27 23 76 2 3 5 62 52", "2"]], "original": "'use strict'\n\nconst INF = 900719925474099;\nfunction mapint(temp){\n    return temp.split(' ').map((v)=>parseInt(v));\n}\n\nfunction Main(input){\n    let temp = input.trim().split('\\n');\n    let n = parseInt(temp[0]);\n    let w = mapint(temp[1]);\n\n    let s1 = w[0];\n    let s2 = 0;\n    for(let i=1;i<n;i++){\n        s2+=w[i];\n    }\n    let sa = Math.abs(s1-s2);\n    let sa2;\n    for(let i=1;i<n;i++){\n        s1+=w[i];\n        s2-=w[i];\n\n        sa = Math.min(sa,Math.abs(s1-s2));\n    }\n    console.log(sa);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03053_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x355e71) {\n    _0x355e71 = _0x355e71['trim']()['split']('\\x0a');\n    _0x355e71['shift']();\n    var _0x18c348 = _0x355e71['length'];\n    var _0x1ed0f2 = _0x355e71[0x0]['length'];\n    var _0x423214 = [];\n    for (var _0x2dd81a = 0x0; _0x2dd81a < _0x355e71['length']; _0x2dd81a++) {\n        _0x423214['push'](_0x355e71[_0x2dd81a]['split'](''));\n    }\n    var _0x2dd81a = 0x0;\n    var _0x4d7022 = [];\n    for (var _0x4c6a07 = 0x0; _0x4c6a07 < _0x18c348; _0x4c6a07++)\n        for (var _0x3d6d44 = 0x0; _0x3d6d44 < _0x1ed0f2; _0x3d6d44++) {\n            if (_0x423214[_0x4c6a07][_0x3d6d44] === '#') {\n                _0x4d7022['push']([\n                    _0x4c6a07,\n                    _0x3d6d44\n                ]);\n            }\n        }\n    var _0x456666 = [];\n    for (var _0x4c6a07 = 0x0; _0x4c6a07 < _0x18c348; _0x4c6a07++)\n        for (var _0x3d6d44 = 0x0; _0x3d6d44 < _0x1ed0f2; _0x3d6d44++) {\n            if (_0x423214[_0x4c6a07][_0x3d6d44] === '.') {\n                var _0x500b34 = Number['MAX_SAFE_INTEGER'];\n                for (var _0x2dd81a = 0x0; _0x2dd81a < _0x4d7022['length']; _0x2dd81a++) {\n                    var _0x13f090 = _0x4d7022[_0x2dd81a][0x0];\n                    var _0x45904b = _0x4d7022[_0x2dd81a][0x1];\n                    var _0xd3e09c = Math['abs'](_0x13f090 - _0x4c6a07) + Math['abs'](_0x45904b - _0x3d6d44);\n                    if (_0xd3e09c < _0x500b34) {\n                        _0x500b34 = _0xd3e09c;\n                    }\n                }\n                _0x456666['push'](_0x500b34);\n            }\n        }\n    console['log'](Math['max'](..._0x456666));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n...\n.#.\n...", "2"], ["6 6\n..#..#\n......\n#..#..\n......\n.#....\n....#.", "3"]], "original": "\"use strict\"\n\nfunction main(arg) {\n    arg = arg.trim().split(\"\\n\")\n    arg.shift()\n    var H = arg.length\n    var W = arg[0].length\n    var m1 = []\n    for (var i = 0; i < arg.length; i++) {\n        m1.push(arg[i].split(''))\n    }\n    var i = 0\n    var slist = []\n    for (var y = 0; y < H; y++) for (var x = 0; x < W; x++) {\n        if (m1[y][x] === '#') {\n            slist.push([y, x])\n        }\n    }\n    var tmp = []\n    for (var y = 0; y < H; y++) for (var x = 0; x < W; x++) {\n        if (m1[y][x] === '.') {\n            var minD = Number.MAX_SAFE_INTEGER\n            for (var i = 0; i < slist.length; i++) {\n                var _y = slist[i][0]\n                var _x = slist[i][1]\n                var d = Math.abs(_y - y) + Math.abs(_x - x)\n                if (d < minD) {\n                    minD = d\n                }\n            }\n            tmp.push(minD)\n        }\n    }\n    console.log(Math.max(...tmp))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03080_1", "type": "JavaScript", "obfuscated": "function Main(_0x591bb2) {\n    let _0xbe8334 = 0x0;\n    let _0x2aa434 = 0x0;\n    const _0x15b8b0 = _0x591bb2['split']('\\x0a');\n    inputS = _0x15b8b0[0x1]['split']('');\n    for (i = 0x0; i < inputS['length']; i++) {\n        if (inputS[i] === 'R') {\n            _0xbe8334++;\n        } else {\n            _0x2aa434++;\n        }\n    }\n    console['log'](_0xbe8334 > _0x2aa434 ? 'Yes' : 'No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\nRRBR", "Yes"], ["4\nBRBR", "No"]], "original": "function Main(input){\n  let Red = 0;\n  let Blue = 0;\n  const input_line = input.split('\\n');\n  inputS = input_line[1].split('');\n  for (i = 0; i < inputS.length; i++) {\n    if (inputS[i] === 'R'){\n      Red++;\n    }else {\n      Blue++;\n    }\n  }\n//  inputS.forEach((s) => {\n//    if (s === 'R'){\n//      console.log(\"Red++\");\n//      Red++;\n//    } else {\n//      console.log(\"Blue++\");\n//      Blue++;\n//    }\n//  });\n  console.log(Red > Blue ? \"Yes\" : \"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03161_1", "type": "JavaScript", "obfuscated": "function Main(_0xa15d08) {\n    _0xa15d08 = _0xa15d08['split']('\\x0a');\n    const [_0x136d88, _0x23ebb8] = _0xa15d08[0x0]['split']('\\x20')['map'](_0x5ce5fc => {\n        return parseInt(_0x5ce5fc, 0xa);\n    });\n    const _0x3735b9 = _0xa15d08[0x1]['split']('\\x20')['map'](_0x236fa6 => {\n        return parseInt(_0x236fa6, 0xa);\n    });\n    const _0xe81412 = Math['pow'](0xa, 0x9);\n    console['log'](dp(_0x136d88, _0x23ebb8, _0x3735b9, _0xe81412));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction dp(_0x201b9e, _0x182ac1, _0x4cbfe0, _0x567a38) {\n    const _0x4a4bda = [];\n    let _0x2c8b68 = [];\n    _0x4a4bda[0x0] = 0x0;\n    for (var _0x215507 = 0x1; _0x215507 < _0x201b9e; _0x215507++) {\n        _0x4a4bda['push'](_0x567a38);\n        _0x2c8b68 = [];\n        _0x2c8b68['push'](_0x4a4bda[_0x215507]);\n        for (var _0x492b8b = 0x1; _0x492b8b <= _0x182ac1; _0x492b8b++) {\n            if (_0x215507 - _0x492b8b < 0x0)\n                continue;\n            _0x2c8b68['push'](_0x4a4bda[_0x215507 - _0x492b8b] + Math['abs'](_0x4cbfe0[_0x215507 - _0x492b8b] - _0x4cbfe0[_0x215507]));\n        }\n        _0x4a4bda[_0x215507] = Math['min'](..._0x2c8b68);\n    }\n    return _0x4a4bda[_0x201b9e - 0x1];\n}", "test_cases": [["5 3\n10 30 40 50 20", "30"], ["3 1\n10 20 10", "20"], ["2 100\n10 10", "0"], ["10 4\n40 10 20 70 80 10 20 70 80 60", "40"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  const [N,K] = input[0].split(' ').map((n) => {\n    return parseInt(n, 10);\n  });\n  const hn = input[1].split(' ').map((n) => {\n    return parseInt(n, 10);\n  });\n  const h_max = Math.pow(10,9);\n  console.log(dp(N,K,hn,h_max));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction dp(N,K,hn,h_max) {\n  const dp = [];\n  let dp_work = [];\n  dp[0] = 0;\n  for (var i = 1; i < N; i++) {\n    dp.push(h_max);\n    dp_work = [];\n    dp_work.push(dp[i]);\n    for (var dp_work_i = 1; dp_work_i <= K; dp_work_i++) {\n      if (i-dp_work_i < 0) continue;\n      dp_work.push(dp[i-dp_work_i] + Math.abs(hn[i-dp_work_i] - hn[i]));\n    }\n    dp[i] = Math.min(...dp_work);\n  }\n  return dp[N-1];\n}\n", "language": "JavaScript"}
{"filename": "p03292_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1b09e9) {\n    const _0x3ea2b7 = _0x1b09e9['split']('\\x0a')[0x0]['split']('\\x20')['map'](_0x2dc883 => Number(_0x2dc883));\n    const _0xbd9fac = Math['max'](..._0x3ea2b7) - Math['min'](..._0x3ea2b7);\n    console['log'](_0xbd9fac);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 6 3", "5"], ["11 5 5", "6"], ["100 100 100", "0"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const nums = s.split('\\n')[0].split(' ').map(n => Number(n));\n  const ans = Math.max(...nums) - Math.min(...nums);\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03339_1", "type": "JavaScript", "obfuscated": "function main(_0x11ec77) {\n    const _0x391801 = _0x11ec77['split']('\\x0a');\n    const _0x3c7f01 = parseInt(_0x391801[0x0]);\n    const _0x465fcb = _0x391801[0x1]['split']('');\n    var _0x254ec1 = Math['pow'](0xa, 0x8);\n    var _0x3650f7 = 0x0;\n    for (var _0x50df71 = 0x0; _0x50df71 < _0x3c7f01; _0x50df71++) {\n        if (_0x465fcb[_0x50df71] == 'E') {\n            _0x3650f7++;\n        }\n    }\n    _0x254ec1 = _0x3650f7;\n    for (var _0x50df71 = 0x1; _0x50df71 < _0x3c7f01; _0x50df71++) {\n        if (_0x465fcb[_0x50df71] == 'E') {\n            _0x3650f7--;\n        }\n        if (_0x465fcb[_0x50df71 - 0x1] == 'W') {\n            _0x3650f7++;\n        }\n        _0x254ec1 = Math['min'](_0x254ec1, _0x3650f7);\n    }\n    console['log'](_0x254ec1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\nWEEWW", "1"], ["12\nWEWEWEEEWWWE", "4"], ["8\nWWWWWEEE", "3"]], "original": "function main(input){\n  const lines = input.split('\\n');\n\n  const N = parseInt(lines[0]);\n  const S = lines[1].split('');\n\n  \n  var result = Math.pow(10, 8);\n  var current_count = 0;\n  for(var i=0;i<N;i++){\n    if(S[i]=='E'){current_count++;}\n  }\n  result = current_count;\n\n//    console.log(current_count);\n  for(var i=1;i<N;i++){\n    if(S[i]=='E'){current_count--;}\n    if(S[i-1]=='W'){current_count++;}\n    result = Math.min(result, current_count);\n//    console.log(current_count);\n  }\n//    console.log('---');\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02595_1", "type": "JavaScript", "obfuscated": "const main = _0x5dd52a => {\n    _0x5dd52a = _0x5dd52a['trim']()['split']('\\x0a');\n    const [_0x117e16, _0x3c8921] = _0x5dd52a[0x0]['split']('\\x20')['map'](Number);\n    const [, ..._0x143abd] = _0x5dd52a;\n    let _0x3d52b2 = 0x0;\n    for (let _0x1183a9 of _0x143abd) {\n        const [_0x541392, _0x4f27e5] = _0x1183a9['split']('\\x20')['map'](Number);\n        if (Math['sqrt'](_0x541392 ** 0x2 + _0x4f27e5 ** 0x2) <= _0x3c8921)\n            _0x3d52b2++;\n    }\n    return console['log'](_0x3d52b2);\n};\nprocess['env']['MYTEST'] ? test() : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5\n0 5\n-2 4\n3 4\n4 -4", "3"], ["12 3\n1 1\n1 1\n1 1\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n3 3", "7"], ["20 100000\n14309 -32939\n-56855 100340\n151364 25430\n103789 -113141\n147404 -136977\n-37006 -30929\n188810 -49557\n13419 70401\n-88280 165170\n-196399 137941\n-176527 -61904\n46659 115261\n-153551 114185\n98784 -6820\n94111 -86268\n-30401 61477\n-55056 7872\n5901 -163796\n138819 -185986\n-69848 -96669", "6"]], "original": "const main = (input) => {\n  input = input.trim().split('\\n')\n  const [N, D] = input[0].split(' ').map(Number)\n  const [, ...points] = input\n\n  let ans = 0\n\n  for (let v of points) {\n    const [x, y] = v.split(' ').map(Number)\n\n    if (Math.sqrt(x**2 + y**2) <= D) ans++\n  }\n\n  return console.log(ans)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02597_1", "type": "JavaScript", "obfuscated": "function MainD(_0x2ef74b) {\n    const _0x2d43d2 = _0x2ef74b['split']('\\x0a');\n    const _0x4f1bd8 = _0x2d43d2[0x0];\n    const _0x193dce = _0x2d43d2[0x1]['split']('');\n    let _0x524935 = 0x0;\n    let _0x3819b4 = 0x0;\n    for (let _0x380441 = 0x0; _0x380441 < _0x193dce['length']; _0x380441++) {\n        if (_0x193dce[_0x380441] === 'W') {\n            _0x3819b4++;\n        }\n    }\n    if (_0x3819b4 === 0x0)\n        return console['log'](0x0);\n    for (let _0x36cc74 = _0x3819b4 - 0x1; _0x36cc74 < _0x193dce['length']; _0x36cc74++) {\n        if (_0x193dce[_0x36cc74] === 'R') {\n            _0x524935++;\n        }\n    }\n    console['log'](_0x524935);\n}\nMainD(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\nWWRR", "2"], ["2\nRR", "0"], ["8\nWRWWRWRR", "3"]], "original": "function MainD(input){\n    const arr = input.split('\\n');\n    const N = arr[0];\n    const Ci = arr[1].split('');\n    let answer = 0;\n\n    // Wの数を数える\n    let Wnum = 0;\n    for(let i=0; i<Ci.length; i++){\n        if(Ci[i] === 'W'){\n            Wnum++;\n        }\n    }\n    if(Wnum===0) return console.log(0); // Wが現れなかったら0を出力\n\n    // Wの数以降のRの数を数える\n    for(let i=Wnum-1; i<Ci.length; i++){\n        if(Ci[i] === 'R'){\n            answer++;\n        }\n    }\n    console.log(answer);\n}\nMainD(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02707_1", "type": "JavaScript", "obfuscated": "const Main = _0x35ffc8 => {\n    const _0x11ae0e = _0x35ffc8['trim']()['split']('\\x0a');\n    const _0x41fbbd = parseInt(_0x11ae0e[0x0]);\n    const _0x18df74 = _0x11ae0e[0x1]['split']('\\x20');\n    const _0x2ddbae = {};\n    const _0x260853 = _0x18df74['filter']((_0x1d5691, _0x1a5c25, _0x6939b6) => _0x6939b6['indexOf'](_0x1d5691) === _0x1a5c25);\n    _0x18df74['forEach'](_0x2ac420 => {\n        _0x2ddbae[_0x2ac420] = _0x2ddbae[_0x2ac420] ? _0x2ddbae[_0x2ac420] + 0x1 : 0x1;\n    });\n    let _0x29c79c = [];\n    _0x260853['forEach'](_0x291c3b => {\n        return _0x29c79c['push'](_0x2ddbae[_0x291c3b]);\n    });\n    const _0x364b46 = _0x41fbbd - _0x260853['length'];\n    if (_0x364b46 > 0x0) {\n        for (let _0xc1b8c4 = 0x0; _0xc1b8c4 < _0x364b46; _0xc1b8c4++) {\n            _0x29c79c['push'](0x0);\n        }\n    }\n    _0x29c79c = _0x29c79c['join']('\\x0a');\n    console['log'](_0x29c79c);\n    return _0x29c79c;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 1 2 2", "2\n2\n0\n0\n0"], ["10\n1 1 1 1 1 1 1 1 1", "9\n0\n0\n0\n0\n0\n0\n0\n0\n0"], ["7\n1 2 3 4 5 6", "1\n1\n1\n1\n1\n1\n0"]], "original": "const Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const employees = parseInt(tmp[0])\n  const subordinateArray = tmp[1].split(' ')\n\n  const subordinateCount = {}\n\n  const distinctSubordinate = subordinateArray.filter(\n    (x, i, self) => self.indexOf(x) === i\n  )\n\n  subordinateArray.forEach((elem) => {\n    subordinateCount[elem] = subordinateCount[elem]\n      ? subordinateCount[elem] + 1\n      : 1\n  })\n\n  let result = []\n  distinctSubordinate.forEach((elem) => {\n    return result.push(subordinateCount[elem])\n  })\n\n  const zeroCount = employees - distinctSubordinate.length\n\n  if (zeroCount > 0) {\n    for (let index = 0; index < zeroCount; index++) {\n      result.push(0)\n    }\n  }\n\n  result = result.join('\\n')\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02756_1", "type": "JavaScript", "obfuscated": "function Main(_0x202464) {\n    'use strict';\n    const _0x43a7e8 = _0x202464['split']('\\x0a');\n    const _0x246958 = _0x43a7e8['shift']()['split']();\n    const _0x29bfd5 = parseInt(_0x43a7e8['shift']());\n    const _0x128dfe = _0x43a7e8['map'](_0x5bb48b => _0x5bb48b['split']('\\x20'));\n    let _0x59dbbe = 0x0;\n    for (let _0x1493aa = 0x0; _0x1493aa < _0x29bfd5; _0x1493aa++) {\n        const _0x164eb8 = _0x128dfe[_0x1493aa];\n        if (_0x164eb8['length'] == 0x1)\n            _0x59dbbe = (_0x59dbbe + 0x1) % 0x2;\n        else if (_0x164eb8['length'] == 0x3) {\n            if (_0x59dbbe + parseInt(_0x164eb8[0x1]) % 0x2 == 0x0)\n                _0x246958['push'](_0x164eb8[0x2]);\n            else\n                _0x246958['unshift'](_0x164eb8[0x2]);\n        }\n    }\n    if (_0x59dbbe)\n        console['log'](_0x246958['reverse']()['join']('') + '\\x0a');\n    else\n        console['log'](_0x246958['join']('') + '\\x0a');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["a\n4\n2 1 p\n1\n2 2 c\n1", "cpa"], ["a\n6\n2 2 a\n2 1 b\n1\n2 2 c\n1\n1", "aabc"], ["y\n1\n2 1 x", "xy"]], "original": "function Main(input) {\n  \"use strict\"\n  const temp = input.split(\"\\n\");\n\n  const s = temp.shift().split()\n  const q = parseInt(temp.shift());\n  const queries = temp.map(query => query.split(\" \"));\n  let reverse_flag = 0\n\n  // queries.forEach( query => {\n  //   if(query.length == 1) reverse_flag = (reverse_flag + 1) % 2\n  //   else if(query.length == 3){\n  //     if((reverse_flag + parseInt(query[1]) % 2 == 0)) s.push(query[2])\n  //     else s.unshift(query[2])\n  //   }\n  // })\n\n  for(let i = 0; i < q; i++){\n    const query = queries[i]\n    if(query.length == 1) reverse_flag = (reverse_flag + 1) % 2\n    else if(query.length == 3){\n      if((reverse_flag + parseInt(query[1]) % 2 == 0)) s.push(query[2])\n      else s.unshift(query[2])\n    }\n  }\n  \n  if(reverse_flag) console.log(s.reverse().join(\"\") + \"\\n\");\n  else console.log(s.join(\"\") + \"\\n\");\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02760_1", "type": "JavaScript", "obfuscated": "function Main(_0x47ad42) {\n    var _0x97ce5f = _0x47ad42[0x3];\n    var _0x464fda = [\n        [\n            ![],\n            ![],\n            ![]\n        ],\n        [\n            ![],\n            ![],\n            ![]\n        ],\n        [\n            ![],\n            ![],\n            ![]\n        ]\n    ];\n    var _0x2fcdfe = [];\n    for (var _0xebadf7 = 0x4; _0xebadf7 < _0x97ce5f + 0x4; _0xebadf7++) {\n        _0x2fcdfe['push'](_0x47ad42[_0xebadf7] - 0x0);\n    }\n    var _0x3529a4 = [\n        _0x47ad42[0x0]['split']('\\x20')['map'](_0x261065 => _0x2fcdfe['indexOf'](_0x261065 - 0x0) >= 0x0),\n        _0x47ad42[0x1]['split']('\\x20')['map'](_0x51b59c => _0x2fcdfe['indexOf'](_0x51b59c - 0x0) >= 0x0),\n        _0x47ad42[0x2]['split']('\\x20')['map'](_0x3204f7 => _0x2fcdfe['indexOf'](_0x3204f7 - 0x0) >= 0x0)\n    ];\n    var _0x11d8fc = ![];\n    if (_0x3529a4[0x0][0x0] && _0x3529a4[0x0][0x1] && _0x3529a4[0x0][0x2])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x1][0x0] && _0x3529a4[0x1][0x1] && _0x3529a4[0x1][0x2])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x2][0x0] && _0x3529a4[0x2][0x1] && _0x3529a4[0x2][0x2])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x0][0x0] && _0x3529a4[0x1][0x0] && _0x3529a4[0x2][0x0])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x0][0x1] && _0x3529a4[0x1][0x1] && _0x3529a4[0x2][0x1])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x0][0x2] && _0x3529a4[0x1][0x2] && _0x3529a4[0x2][0x2])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x0][0x0] && _0x3529a4[0x1][0x1] && _0x3529a4[0x2][0x2])\n        _0x11d8fc = !![];\n    if (_0x3529a4[0x0][0x2] && _0x3529a4[0x1][0x1] && _0x3529a4[0x2][0x0])\n        _0x11d8fc = !![];\n    console['log'](_0x11d8fc ? 'Yes' : 'No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["84 97 66\n79 89 11\n61 59 7\n7\n89\n7\n87\n79\n24\n84\n30", "Yes"], ["41 7 46\n26 89 2\n78 92 8\n5\n6\n45\n16\n57\n17", "No"], ["60 88 34\n92 41 43\n65 73 48\n10\n60\n43\n88\n11\n48\n73\n65\n41\n92\n34", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var n = input[3];\n    var ansmap = [\n        [false,false,false],\n        [false,false,false],\n        [false,false,false]];\n    var chk = [];\n    for(var i=4;i<n+4;i++){\n        chk.push(input[i]-0);\n    }\n    var map = [\n        input[0].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n        input[1].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n        input[2].split(\" \").map(v=>chk.indexOf(v-0)>=0),\n    ];\n    var flg = false;\n    if(map[0][0]&&map[0][1]&&map[0][2]) flg = true;\n    if(map[1][0]&&map[1][1]&&map[1][2]) flg = true;\n    if(map[2][0]&&map[2][1]&&map[2][2]) flg = true;\n    if(map[0][0]&&map[1][0]&&map[2][0]) flg = true;\n    if(map[0][1]&&map[1][1]&&map[2][1]) flg = true;\n    if(map[0][2]&&map[1][2]&&map[2][2]) flg = true;\n    if(map[0][0]&&map[1][1]&&map[2][2]) flg = true;\n    if(map[0][2]&&map[1][1]&&map[2][0]) flg = true;\n    console.log(flg?\"Yes\":\"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p03017_1", "type": "JavaScript", "obfuscated": "debug = ![];\nfunction log(..._0x174fbf) {\n    if (debug) {\n        console['log'](..._0x174fbf);\n    }\n}\nfunction Main(_0x2ca6cd) {\n    lines = _0x2ca6cd['split']('\\x0a');\n    f = lines[0x0]['split']('\\x20');\n    N = f[0x0];\n    A = f[0x1] * 0x1;\n    B = f[0x2] * 0x1;\n    C = f[0x3] * 0x1;\n    D = f[0x4] * 0x1;\n    s = lines[0x1];\n    log(N, A, B, C, D, s);\n    bool = !![];\n    if (C > D) {\n        end = D;\n        if (C - D <= 0x2) {\n            end = C;\n        }\n        s2 = s;\n        if (s[D - 0x2] == '#') {\n            log(s2, s2[D - 0x1]);\n            s2[D - 0x1] = '#';\n            s2 = s2['slice'](0x0, D - 0x1) + '#' + s2['slice'](D);\n        }\n        log(s2);\n        str = s2['slice'](B - 0x1, end);\n        log(str, bool);\n        bool = bool && /\\.\\.\\./['test'](str);\n        log(str, bool);\n    }\n    str = s['slice'](A - 0x1, C);\n    bool = bool && !/##/['test'](str);\n    log(str, bool);\n    str = s['slice'](B - 0x1, D);\n    bool = bool && !/##/['test'](str);\n    log(str, bool);\n    ans = bool ? 'Yes' : 'No';\n    console['log'](ans);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 1 3 6 7\n.#..#..", "Yes"], ["7 1 3 7 6\n.#..#..", "No"], ["15 1 3 15 13\n...#.#...#.#...", "Yes"]], "original": "debug = false\nfunction log(...args) {\n  if (debug) {\n    console.log(...args)\n  }\n}\n\nfunction Main(input) {\n  lines = input.split(\"\\n\")\n  f = lines[0].split(\" \")\n  N = f[0]\n  A = f[1] * 1\n  B = f[2] * 1\n  C = f[3] * 1\n  D = f[4] * 1\n  s = lines[1]\n  log(N, A, B, C, D, s)\n\n  bool = true\n  if (C > D) {\n    end = D\n    if (C - D <= 2) {\n      end = C\n    }\n    s2 = s\n    if (s[D - 2] == '#') {\n      log(s2, s2[D - 1])\n      s2[D - 1] = '#'\n      s2 = s2.slice(0, D - 1) + '#' + s2.slice(D)\n    }\n    log(s2)\n    str = s2.slice(B - 1, end)\n    log(str, bool)\n    bool = bool && (/\\.\\.\\./).test(str)\n    log(str, bool)\n  }\n  str = s.slice(A - 1, C)\n  bool = bool && !(/##/).test(str)\n  log(str, bool)\n  str = s.slice(B - 1, D)\n  bool = bool && !(/##/).test(str)\n  log(str, bool)\n\n  ans = bool ? 'Yes' : 'No'\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03085_1", "type": "JavaScript", "obfuscated": "function Main(_0x2a0dd1) {\n    _0x2a0dd1 = _0x2a0dd1['split']('\\x0a');\n    _0x2a0dd1 = _0x2a0dd1[0x0];\n    switch (_0x2a0dd1) {\n    case 'A': {\n            console['log']('T');\n            return;\n        }\n    case 'T': {\n            console['log']('A');\n            return;\n        }\n    case 'C': {\n            console['log']('G');\n            return;\n        }\n    case 'G': {\n            console['log']('C');\n            return;\n        }\n    default: {\n            return;\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["A", "T"], ["G", "C"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    input = input[0]\n    switch(input) {\n        case 'A': {\n            console.log('T');\n            return;\n        }\n        case 'T': {\n            console.log('A');\n            return;\n        }\n        case 'C': {\n            console.log('G');\n            return;\n        }\n        case 'G': {\n            console.log('C');\n            return;\n        }\n        default: {\n            return;\n        }\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03087_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['split']('\\x0a');\nvar nq = arr[0x0]['split']('\\x20')['map'](Number);\nvar str = arr[0x1];\nvar a = [\n    0x0,\n    0x0\n];\nvar cnt = 0x0;\nfor (var i = 0x1; i < str['length']; i++) {\n    if (str[i] == 'C' && str[i - 0x1] == 'A')\n        cnt++;\n    a['push'](cnt);\n}\nvar ans = [];\nfor (var i = 0x2, len = nq[0x1] + 0x2; i < len; i++) {\n    var lr = arr[i]['split']('\\x20');\n    ans['push'](a[lr[0x1] - 0x0] - a[lr[0x0] - 0x0]);\n}\nconsole['log'](ans['join']('\\x0a'));", "test_cases": [["8 3\nACACTACG\n3 7\n2 3\n1 8", "2\n0\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.split(\"\\n\");\nvar nq=arr[0].split(\" \").map(Number);\nvar str = arr[1];\nvar a=[0,0];\nvar cnt=0;\nfor(var i=1;i<str.length;i++){\n   if(str[i]==\"C\" && str[i-1]==\"A\")cnt++;\n   a.push(cnt);\n}\nvar ans=[];\nfor(var i=2,len=nq[1]+2;i<len;i++){\n   var lr=arr[i].split(\" \");\n   ans.push(a[lr[1]-0]-a[lr[0]-0]);\n}\nconsole.log(ans.join(\"\\n\"));", "language": "JavaScript"}
{"filename": "p03108_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['map'](_0x36e2f7 => _0x36e2f7['split']('\\x20')['map'](_0x1e0d18 => parseInt(_0x1e0d18), 0xa));\nconst N = input[0x0][0x0];\nconst M = input[0x0][0x1];\nconst ans = [];\nconst par = [];\nfor (let i = 0x1; i <= N; i++) {\n    par[i] = -0x1;\n}\nfunction root(_0x420c3c) {\n    if (par[_0x420c3c] < 0x0) {\n        return _0x420c3c;\n    }\n    return par[_0x420c3c] = root(par[_0x420c3c]);\n}\nfunction unite(_0x20c2f1, _0x134c59) {\n    const _0x423b9e = root(_0x20c2f1);\n    const _0x5bcf1c = root(_0x134c59);\n    if (_0x423b9e === _0x5bcf1c) {\n        return;\n    }\n    par[_0x5bcf1c] += par[_0x423b9e];\n    par[_0x423b9e] = _0x5bcf1c;\n}\nfunction isSame(_0x16bbeb, _0x35e963) {\n    return root(_0x16bbeb) === root(_0x35e963);\n}\nfunction getSize(_0x57691a) {\n    return -par[root(_0x57691a)];\n}\nans[M] = N * (N - 0x1) / 0x2;\nfor (let i = M; i > 0x1; i--) {\n    const x = input[i][0x0];\n    const y = input[i][0x1];\n    if (isSame(x, y)) {\n        ans[i - 0x1] = ans[i];\n        continue;\n    }\n    ans[i - 0x1] = ans[i] - getSize(x) * getSize(y);\n    unite(x, y);\n}\nfor (let i = 0x1; i <= M; i++) {\n    console['log'](ans[i]);\n}", "test_cases": [["4 5\n1 2\n3 4\n1 3\n2 3\n1 4", "0\n0\n4\n5\n6"], ["6 5\n2 3\n1 2\n5 6\n3 4\n4 5", "8\n9\n12\n14\n15"], ["2 1\n1 2", "1"]], "original": "\"use strict\";\n\n// read lines from stdin\nconst input = require(\"fs\")\n  .readFileSync(\"/dev/stdin\", \"utf8\")\n  .trim()\n  .split(\"\\n\")\n  .map((line) => line.split(\" \").map((val) => parseInt(val), 10));\n\nconst N = input[0][0];\nconst M = input[0][1];\n\nconst ans = [];\n\n// Union-Find\n\nconst par = [];\n\nfor (let i = 1; i <= N; i++) {\n  par[i] = -1;\n}\n\nfunction root(x) {\n  if (par[x] < 0) { return x; }\n  return par[x] = root(par[x]);\n}\n\nfunction unite(x, y) {\n  const rx = root(x);\n  const ry = root(y);\n  if (rx === ry) { return; }\n\n  par[ry] += par[rx];\n  par[rx] = ry;\n}\n\nfunction isSame(x, y) {\n  return root(x) === root(y);\n}\n\nfunction getSize(x) {\n  return -par[root(x)];\n}\n\n// end Union-Find\n\nans[M] = N * (N - 1) / 2;\n\nfor (let i = M; i > 1; i--) {\n  const x = input[i][0];\n  const y = input[i][1];\n\n  if (isSame(x, y)) {\n    ans[i - 1] = ans[i];\n    continue;\n  }\n\n  ans[i - 1] = ans[i] - (getSize(x) * getSize(y));\n  unite(x, y);\n}\n\nfor (let i = 1; i <= M; i++) {\n  console.log(ans[i]);\n}\n", "language": "JavaScript"}
{"filename": "p03137_1", "type": "JavaScript", "obfuscated": "var readline = require('readline');\nvar lines = [];\nvar result = 0x0;\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x5a9ab2) {\n    lines['push'](_0x5a9ab2);\n});\nrl['on']('close', function () {\n    var _0x2ccdcb = Number(lines[0x0]['split']('\\x20')[0x0]);\n    var _0x355ba7 = Number(lines[0x0]['split']('\\x20')[0x1]);\n    var _0x4d4847 = lines[0x1]['split']('\\x20')['map'](_0x43e9e4 => Number(_0x43e9e4));\n    _0x4d4847['sort']((_0x4ed903, _0x262bbf) => _0x4ed903 - _0x262bbf);\n    var _0x545562 = Array(_0x355ba7)['fill'](0x0);\n    for (var _0x205ddd = 0x1; _0x205ddd < _0x355ba7; _0x205ddd++) {\n        _0x545562[_0x205ddd] = _0x4d4847[_0x205ddd] - _0x4d4847[_0x205ddd - 0x1];\n    }\n    _0x545562['sort']((_0xa280bb, _0x91c108) => _0x91c108 - _0xa280bb);\n    for (var _0x205ddd = _0x2ccdcb - 0x1; _0x205ddd < _0x355ba7; _0x205ddd++) {\n        result += _0x545562[_0x205ddd];\n    }\n    console['log'](result);\n});", "test_cases": [["2 5\n10 12 1 2 14", "5"], ["3 7\n-10 -3 0 9 -100 2 17", "19"], ["100 1\n-100000", "0"]], "original": "var readline = require('readline');\nvar lines = []; var result = 0;\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var M = Number(lines[0].split(\" \")[1]);\n    var X = lines[1].split(\" \").map(value => Number(value));\n\n    X.sort((a, b) => a - b);\n\n    var sum = Array(M).fill(0);\n    for (var i = 1; i < M; i++) { sum[i] = X[i] - X[i - 1]; }\n\n    sum.sort((a, b) => b - a);\n\n    for (var i = N - 1; i < M; i++) { result += sum[i] }\n    \n    console.log(result);\n});\n", "language": "JavaScript"}
{"filename": "p03328_1", "type": "JavaScript", "obfuscated": "function Main(_0x4700de) {\n    _0x4700de = _0x4700de['split']('\\x20');\n    var _0xafacce = parseInt(_0x4700de[0x0], 0xa);\n    var _0x45a5e0 = parseInt(_0x4700de[0x1], 0xa);\n    var _0x5c7d33 = 0x1;\n    var _0x331874 = 0x1;\n    var _0x6094f6 = 0x1;\n    var _0x54b06e = 0x1;\n    var _0x188c18 = 0x0;\n    while (!![]) {\n        while (!![]) {\n            _0x6094f6++;\n            _0x5c7d33 += _0x6094f6;\n            _0x54b06e++;\n            _0x331874 += _0x54b06e;\n            if (_0x5c7d33 > _0xafacce) {\n                break;\n            }\n        }\n        while (!![]) {\n            _0x54b06e++;\n            _0x331874 += _0x54b06e;\n            if (_0x331874 > _0x45a5e0) {\n                break;\n            }\n        }\n        if (_0x5c7d33 - _0xafacce == _0x331874 - _0x45a5e0) {\n            break;\n        }\n    }\n    _0x188c18 = _0x5c7d33 - _0xafacce;\n    console['log'](_0x188c18);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8 13", "2"], ["54 65", "1"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    input = input.split(' ');\n    //文字列から10進数に変換するときはparseIntを使います\n    var a = parseInt(input[0], 10);\n    var b = parseInt(input[1], 10);\n    \n    var a_real = 1;\n    var b_real = 1;\n    var a_count = 1\n    var b_count = 1\n    var ans = 0;\n    while ( true ) {\n        while ( true ) {\n            a_count++;\n            a_real += a_count;\n            b_count++;\n            b_real += b_count;\n            if (a_real > a) {\n                break;\n            }\n        }\n        while ( true ) {\n            b_count++;\n            b_real += b_count;\n            if (b_real > b) {\n                break;\n            }\n        }\n        if ( (a_real - a) == (b_real - b)) {\n            break;\n        }\n    }\n    ans = a_real - a;\n    console.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03363_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x235741 => {\n    _0x235741 = _0x235741['trim']()['split']('\\x0a');\n    const _0x27786e = _0x235741[0x0] * 0x1;\n    const _0x1796ee = _0x235741[0x1]['split']('\\x20')['map'](_0x2d37eb => _0x2d37eb * 0x1);\n    const _0x2340c0 = new Array(_0x27786e)['fill'](0x0);\n    for (let _0x15e3da = 0x0; _0x15e3da < _0x27786e; _0x15e3da++) {\n        _0x2340c0[_0x15e3da] += (_0x2340c0[_0x15e3da - 0x1] || 0x0) + _0x1796ee[_0x15e3da];\n    }\n    let _0x327e7f = {};\n    _0x327e7f[0x0] = 0x1;\n    for (let _0x1e9f29 = 0x0; _0x1e9f29 < _0x27786e; _0x1e9f29++) {\n        _0x327e7f[_0x2340c0[_0x1e9f29]] = (_0x327e7f[_0x2340c0[_0x1e9f29]] || 0x0) + 0x1;\n    }\n    let _0x4c5e51 = 0x0;\n    Object['keys'](_0x327e7f)['forEach'](_0x4a1cf0 => {\n        _0x4c5e51 += _0x327e7f[_0x4a1cf0] * (_0x327e7f[_0x4a1cf0] - 0x1) / 0x2;\n    });\n    console['log'](_0x4c5e51);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n1 3 -4 2 2 -2", "3"], ["7\n1 -1 1 -1 1 -1 1", "12"], ["5\n1 -2 3 -4 5", "0"]], "original": "\"use strict\";\n// 人様のコード参照\nconst main = arg => {\n  \t// お決まりの処理たち\n    arg = arg.trim().split(\"\\n\");\n    const N = arg[0] * 1;\n    const nums = arg[1].split(\" \").map(x => x*1);\n  \t// とりあえず累積和出してみる\n  \tconst totalSum = new Array(N).fill(0);\n   \t// forEachよくないんじゃないか説\n  \tfor(let i = 0; i < N; i++){\n      totalSum[i] += (totalSum[i - 1] || 0) + nums[i];\n    }\n  \n  \t// それぞれの組み合わせがいくつずつかを調べていく\n  \t// そのためにオブジェクト化\n  \tlet accumObj = {};\n  \t// accumObj[0]は必ず存在している体で（理由は不明確）\n  \taccumObj[0] = 1;\n  \tfor(let i = 0; i < N; i++){\n      accumObj[totalSum[i]] = (accumObj[totalSum[i]] || 0) + 1;\n    }\n  \tlet ans = 0;\n  \t// それぞれのエンティティで2つとってくる値を計算する\n  \tObject.keys(accumObj).forEach((x)=> {\n    \tans += accumObj[x]*(accumObj[x]-1)/2\n    })\n  \n  \tconsole.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02266_1", "type": "JavaScript", "obfuscated": "const calc = _0xa4e68e => {\n    const _0x262bc6 = [];\n    const _0x27cbae = [];\n    let _0x2c30a3 = 0x0;\n    for (let _0x3bfadf = 0x0; _0x3bfadf < _0xa4e68e['length']; _0x3bfadf++) {\n        const _0x1d9db7 = _0xa4e68e[_0x3bfadf];\n        if (_0x1d9db7 === '\\x5c') {\n            _0x27cbae['push'](_0x3bfadf);\n            continue;\n        }\n        if (_0x1d9db7 === '/' && _0x27cbae['length'] > 0x0) {\n            const _0x495319 = _0x27cbae['pop']();\n            _0x2c30a3 += _0x3bfadf - _0x495319;\n            let _0x439c8c = _0x3bfadf - _0x495319;\n            while (_0x262bc6['length'] > 0x0 && _0x262bc6[_0x262bc6['length'] - 0x1]['depth'] > _0x495319) {\n                _0x439c8c += _0x262bc6[_0x262bc6['length'] - 0x1]['area'];\n                _0x262bc6['pop']();\n            }\n            _0x262bc6['push']({\n                'depth': _0x495319,\n                'area': _0x439c8c\n            });\n        }\n    }\n    console['log'](_0x2c30a3);\n    if (_0x262bc6['length'] === 0x0) {\n        console['log'](0x0);\n        return;\n    }\n    console['log'](_0x262bc6['length'] + '\\x20' + _0x262bc6['map'](_0x419f0f => _0x419f0f['area'])['join']('\\x20'));\n};\nlet inputStr = '';\nprocess['stdin']['on']('data', _0x12f8d6 => {\n    inputStr += String['raw']`${ _0x12f8d6 }`;\n});\nprocess['stdin']['on']('end', () => {\n    calc(inputStr);\n});", "test_cases": [["\\\\//", "4\n1 4"], ["\\\\///\\_/\\/\\\\\\\\/_/\\\\///__\\\\\\_\\\\/_\\/_/\\", "35\n5 4 2 1 19 9"]], "original": "const calc = (str) => {\n  const areas = [];\n  const depthIndexes = [];\n  let sum = 0;\n\n  for (let i=0; i<str.length; i++) {\n    const char = str[i];\n\n    if (char === '\\\\') {\n      depthIndexes.push(i);\n      continue;\n    }\n\n    if (char === '/' && depthIndexes.length > 0) {\n      const j = depthIndexes.pop();\n      sum += i - j;\n      let currentArea = i - j;\n      while (areas.length > 0 && areas[areas.length-1].depth > j) {\n        currentArea += areas[areas.length-1].area;\n        areas.pop();\n      }\n      areas.push({\n        depth: j,\n        area: currentArea,\n      });\n    }\n  }\n\n\n\n  console.log(sum);\n  if (areas.length === 0) {\n    console.log(0);\n    return;\n  }\n  console.log(`${areas.length} ${areas.map(obj => obj.area).join(' ')}`);\n};\n\n\nlet inputStr = '';\nprocess.stdin.on('data', (input) => { inputStr += String.raw`${input}` });\n\nprocess.stdin.on('end', () => { calc(inputStr); });\n", "language": "JavaScript"}
{"filename": "p02268_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nconst binarySearch = (_0x1d9434, _0x5d5528, _0xf5f116) => {\n    let _0x393c0e;\n    let _0x3fadb6 = 0x0;\n    let _0x3d62fa = _0xf5f116;\n    while (_0x3fadb6 < _0x3d62fa) {\n        _0x393c0e = Math['floor']((_0x3fadb6 + _0x3d62fa) / 0x2);\n        if (_0x1d9434 < _0x5d5528[_0x393c0e])\n            _0x3d62fa = _0x393c0e;\n        else if (_0x1d9434 > _0x5d5528[_0x393c0e])\n            _0x3fadb6 = _0x393c0e + 0x1;\n        else\n            return 0x1;\n    }\n    return 0x0;\n};\n(function () {\n    const _0x57208f = Number(Arr[0x0]);\n    const _0x4eab44 = Arr[0x1]['split']('\\x20')['map'](Number);\n    const _0x324148 = Arr[0x3]['split']('\\x20')['map'](Number);\n    console['log'](_0x324148['map'](_0x195cd6 => binarySearch(_0x195cd6, _0x4eab44, _0x57208f))['reduce']((_0x500e80, _0x206666) => _0x500e80 + _0x206666, 0x0));\n}());", "test_cases": [["5\n1 2 3 4 5\n3\n3 4 1", "3"], ["3\n1 2 3\n1\n5", "0"], ["5\n1 1 2 2 3\n2\n1 2", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr = (input.trim()).split(\"\\n\");\n\nconst binarySearch = (key, arr, N) => {\n  let mid;\n  let left = 0;\n  let right = N;\n  while (left < right) {\n    mid = Math.floor((left + right) / 2);\n    if (key < arr[mid]) right = mid;\n    else if (key > arr[mid]) left = mid + 1;\n    else return 1;\n  }\n  return 0;\n}\n\n\n(function() {\n  const N1 = Number(Arr[0]);\n  const arr1 = Arr[1].split(\" \").map(Number);\n  // const N2 = Number(Arr[2]);\n  const arr2 = Arr[3].split(\" \").map(Number);\n  console.log(arr2.map(e => binarySearch(e, arr1, N1)).reduce((a, b) => a + b, 0));\n})();\n\n", "language": "JavaScript"}
{"filename": "p02271_1", "type": "JavaScript", "obfuscated": "(function main() {\n    const _0x4ca024 = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    const _0x43b922 = Number(_0x4ca024['shift']());\n    const _0x404a93 = _0x4ca024['shift']()['split']('\\x20')['map'](Number);\n    const _0x301bbc = Number(_0x4ca024['shift']());\n    const _0x3d66cb = _0x4ca024['shift']()['split']('\\x20')['map'](Number);\n    const _0x458fc9 = (_0x12ee27, _0x31e017) => {\n        if (_0x31e017 == 0x0)\n            return !![];\n        if (_0x12ee27 >= _0x43b922)\n            return ![];\n        return _0x458fc9(_0x12ee27 + 0x1, _0x31e017) || _0x458fc9(_0x12ee27 + 0x1, _0x31e017 - _0x404a93[_0x12ee27]);\n    };\n    _0x3d66cb['map'](_0x330b4b => _0x458fc9(0x0, _0x330b4b) ? 'yes' : 'no')['forEach'](_0x457bbb => console['log'](_0x457bbb));\n}());", "test_cases": [["5\n1 5 7 10 21\n8\n2 4 17 8 22 21 100 35", "no\nno\nyes\nyes\nyes\nyes\nno\nno"]], "original": "(function main() {\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n1 = Number(lines.shift());\n  const arr1 = lines.shift().split(' ').map(Number);\n  const n2 = Number(lines.shift());\n  const arr2 = lines.shift().split(' ').map(Number);\n\n  const solve = (i, m) => {\n    if (m == 0) return true;\n    if (i >= n1) return false;\n    return solve(i + 1, m) || solve(i + 1, m - arr1[i]);\n  };\n\n  arr2.map(m => solve(0, m) ? 'yes' : 'no').forEach(res => console.log(res));\n})();\n\n", "language": "JavaScript"}
{"filename": "p02404_1", "type": "JavaScript", "obfuscated": "let content = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', _0x5289d0 => {\n    content += _0x5289d0;\n});\nprocess['stdin']['on']('end', () => {\n    const _0xe0b64 = content['trim']()['split']('\\x0a')['map'](_0x10c1a6 => _0x10c1a6['split']('\\x20')['map'](_0x4ddbfe => parseInt(_0x4ddbfe, 0xa)));\n    for (const _0x4d102d of _0xe0b64) {\n        if (_0x4d102d[0x0] !== 0x0 || _0x4d102d[0x1] !== 0x0) {\n            console['log'](drawReact(_0x4d102d));\n        }\n    }\n});\nconst drawReact = ([_0x358488, _0x17155b]) => {\n    const _0x4848e1 = '#'['repeat'](_0x17155b) + '\\x0a';\n    return _0x4848e1 + ('#' + '.'['repeat'](_0x17155b - 0x2) + '#\\x0a')['repeat'](_0x358488 - 0x2) + _0x4848e1;\n};", "test_cases": [["3 4\n5 6\n3 3\n0 0", "####\n#..#\n####\n\n######\n#....#\n#....#\n#....#\n######\n\n###\n#.#\n###"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\nprocess.stdin.on('end', () => {\n  const rects = content\n    .trim()\n    .split('\\n')\n    .map(line => line.split(' ').map(n => parseInt(n, 10)));\n\n  for (const rect of rects) {\n    if (rect[0] !== 0 || rect[1] !== 0) {\n      console.log(drawReact(rect));\n    }\n  }\n});\n\nconst drawReact = ([h, w]) => {\n  const hline = '#'.repeat(w) + '\\n';\n  return hline + `#${'.'.repeat(w - 2)}#\\n`.repeat(h - 2) + hline;\n};\n", "language": "JavaScript"}
{"filename": "p02577_1", "type": "JavaScript", "obfuscated": "function Main(_0x5e1f19) {\n    let _0x11dd03 = parseInt(_0x5e1f19, 0xa);\n    let _0x189c38 = 0x0;\n    let _0x4b533b = 0x0;\n    for (let _0x3b2870 = _0x5e1f19['length'] - 0x1; 0x0 <= _0x3b2870; _0x3b2870--) {\n        _0x4b533b = Math['floor'](_0x11dd03 / Math['pow'](0xa, _0x3b2870));\n        _0x189c38 += _0x4b533b;\n        _0x11dd03 -= _0x4b533b * Math['pow'](0xa, _0x3b2870);\n    }\n    const _0x2e60fd = _0x189c38 % 0x9 === 0x0 ? 'Yes' : 'No';\n    console['log'](_0x2e60fd);\n}\n;\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["123456789", "Yes"], ["0", "Yes"], ["31415926535897932384626433832795028841971693993751058209749445923078164062862089986280", "No"]], "original": "function Main(input) {\n\tlet num = parseInt(input, 10);\n\tlet sum = 0;\n\tlet tmp = 0;\n\tfor(let i = input.length - 1; 0 <= i; i--) {\n\t\ttmp = Math.floor(num / Math.pow(10, i));\n\t\tsum += tmp;\n\t\tnum -= tmp * Math.pow(10, i);\n\t}\n\tconst ans = sum % 9 === 0 ? 'Yes' : 'No'\n\tconsole.log(ans);\n};\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02578_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x456d91 => {\n    lines['push'](_0x456d91);\n});\nreader['on']('close', () => {\n    var _0x49e4d2 = parseInt(lines[0x0]);\n    var _0x1ce110 = 0x0;\n    var _0x54b70e = 0x0;\n    for (var _0x549a70 = 0x0; _0x549a70 < _0x49e4d2; _0x549a70++) {\n        var _0x4a00fb = parseInt(lines[0x1]['split']('\\x20')[_0x549a70]);\n        _0x54b70e = Math['max'](_0x54b70e, _0x4a00fb);\n        _0x1ce110 += _0x54b70e - _0x4a00fb;\n    }\n    console['log'](_0x1ce110);\n});", "test_cases": [["5\n2 1 5 4 3", "4"], ["5\n3 3 3 3 3", "0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var N = parseInt(lines[0]);\n \n  var sum = 0;\n  var MaxNum = 0;\n  for (var i = 0; i < N; i++) {\n    var Ai = parseInt(lines[1].split(' ')[i]);\n\tMaxNum = Math.max(MaxNum, Ai);\n    sum += MaxNum - Ai;\n  }\n  \n  console.log(sum);\n});", "language": "JavaScript"}
{"filename": "p02613_1", "type": "JavaScript", "obfuscated": "const main = _0xc07c08 => {\n    const [_0x56ad8c, ..._0x2931d3] = _0xc07c08['trim']()['split']('\\x0a');\n    const _0x2db99c = [\n        'AC',\n        'WA',\n        'TLE',\n        'RE'\n    ];\n    const _0x34a6c4 = {};\n    for (let _0x30a150 of _0x2db99c)\n        _0x34a6c4[_0x30a150] = 0x0;\n    for (let _0x4430bd of _0x2931d3)\n        _0x34a6c4[_0x4430bd] += 0x1;\n    for (let _0x2bc672 of _0x2db99c)\n        console['log'](_0x2bc672 + '\\x20x\\x20' + _0x34a6c4[_0x2bc672]);\n};\nprocess['env']['MYTEST'] ? test() : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\nAC\nTLE\nAC\nAC\nWA\nTLE", "AC x 3\nWA x 1\nTLE x 2\nRE x 0"], ["10\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC\nAC", "AC x 10\nWA x 0\nTLE x 0\nRE x 0"]], "original": "const main = (input) => {\n  const [n, ...rows] = input.trim().split('\\n')\n  const k = ['AC', 'WA', 'TLE', 'RE']\n  const ans = {}\n  for (let v of k) ans[v] = 0\n\n  for (let r of rows) ans[r] += 1\n\n  for (let v of k) console.log(`${v} x ${ans[v]}`)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02615_1", "type": "JavaScript", "obfuscated": "const main = _0x27b933 => {\n    _0x27b933 = _0x27b933['trim']()['split']('\\x0a');\n    let _0x3bb463 = parseInt(_0x27b933[0x0], 0xa) - 0x2;\n    const _0x5593bb = _0x27b933[0x1]['split']('\\x20')['map'](Number)['sort']((_0x269697, _0xf0157f) => _0xf0157f - _0x269697);\n    let _0x7edaac = [0x1];\n    for (_0x3bb463; _0x3bb463 >= 0x2; _0x3bb463 -= 0x2)\n        _0x7edaac['push'](0x2);\n    _0x7edaac['push'](_0x3bb463);\n    return console['log'](_0x7edaac['reduce']((_0x1463cb, _0x542def, _0x21f0af) => _0x1463cb + _0x542def * _0x5593bb[_0x21f0af], 0x0));\n};\nprocess['env']['MYTEST'] ? test() : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n2 2 1 3", "7"], ["7\n1 1 1 1 1 1 1", "6"]], "original": "const main = (input) => {\n\n  input = input.trim().split('\\n')\n  let n = parseInt(input[0], 10) - 2\n  const nums = input[1].split(' ').map(Number).sort((a, b) => b - a)\n\n  let r = [1]\n  for (n; n >= 2; n-=2) r.push(2)\n  r.push(n)\n\n  return console.log(r.reduce((a, b, i) => a + (b * nums[i]), 0))\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02628_1", "type": "JavaScript", "obfuscated": "function main(_0x1a5ed7) {\n    const [_0x18e601, _0x195ad5] = parseNumberLine(_0x1a5ed7[0x0]);\n    const _0x5c8c65 = parseNumberLine(_0x1a5ed7[0x1])['sort']((_0x5c37b8, _0xdd2739) => _0x5c37b8 - _0xdd2739);\n    let _0x421484 = 0x0;\n    for (let _0x5effa9 = 0x0; _0x5effa9 < _0x195ad5; ++_0x5effa9) {\n        _0x421484 += _0x5c8c65[_0x5effa9];\n    }\n    console['log'](_0x421484);\n}\nfunction parseNumberLine(_0x84463d, _0x19782c = 0xa) {\n    return _0x84463d['split'](/\\s+/)['map'](_0x1f9d54 => parseInt(_0x1f9d54, _0x19782c));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["5 3\n50 100 80 120 80", "210"], ["1 1\n1000", "1000"]], "original": "function main(lines) {\n    const [N, K] = parseNumberLine(lines[0])\n    const prices = parseNumberLine(lines[1])\n    \t.sort((a, b) => a - b)\n\n    let total = 0\n    for (let i = 0; i < K; ++i) {\n      total += prices[i]\n    }\n    console.log(total)\n}\n\nfunction parseNumberLine(line, radix = 10) {\n    return line.split(/\\s+/).map(_ => parseInt(_, radix))\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p02675_1", "type": "JavaScript", "obfuscated": "function Main(_0x129f37) {\n    _0x129f37 = '' + _0x129f37 + '';\n    _0x129f37 = _0x129f37['substr'](_0x129f37['length'] - 0x1, 0x1);\n    var _0xa23613 = '';\n    if (_0x129f37 == 0x2 || _0x129f37 == 0x4 || _0x129f37 == 0x5 || _0x129f37 == 0x7 || _0x129f37 == 0x9) {\n        _0xa23613 = 'hon';\n    }\n    if (_0x129f37 == 0x0 || _0x129f37 == 0x1 || _0x129f37 == 0x6 || _0x129f37 == 0x8) {\n        _0xa23613 = 'pon';\n    }\n    if (_0x129f37 == 0x3) {\n        _0xa23613 = 'bon';\n    }\n    console['log'](_0xa23613);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["16", "pon"], ["2", "hon"], ["183", "bon"]], "original": "function Main(input)\n{\n\tinput = \"\"+input+\"\";\n\tinput = input.substr(input.length - 1, 1);\n\tvar d = \"\";\n\n\tif (input == 2 || input == 4 || input == 5 ||input == 7 ||input == 9 )\n\t{\n\t\td = \"hon\";\n\t}\n\n\tif (input == 0 || input == 1 || input == 6 ||input == 8)\n\t{\n\t\td = \"pon\";\n\t}\n\n\tif (input == 3 )\n\t{\n\t\td = \"bon\";\n\t}\n\n\tconsole.log(d);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02830_1", "type": "JavaScript", "obfuscated": "function Main(_0x30da67) {\n    _0x30da67 = _0x30da67['trim']()['split']('\\x0a');\n    const _0x33c82d = parseInt(_0x30da67[0x0]);\n    const _0x2a056b = _0x30da67[0x1]['split']('\\x20');\n    const _0x144f6c = _0x2a056b[0x0];\n    const _0x1ffdc1 = _0x2a056b[0x1];\n    let _0x3fe5ff = '';\n    for (let _0x446ec2 = 0x0; _0x446ec2 < _0x33c82d; ++_0x446ec2) {\n        _0x3fe5ff += _0x144f6c[_0x446ec2];\n        _0x3fe5ff += _0x1ffdc1[_0x446ec2];\n    }\n    console['log'](_0x3fe5ff);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\nip cc", "icpc"], ["8\nhmhmnknk uuuuuuuu", "humuhumunukunuku"], ["5\naaaaa aaaaa", "aaaaaaaaaa"]], "original": "function Main(input) {\n  input = input.trim().split('\\n')\n  const N = parseInt(input[0])\n  const array = input[1].split(' ')\n  const S = array[0]\n  const T = array[1]\n  let ans = ''\n  for(let i = 0; i < N; ++i) {\n    ans += S[i]\n    ans += T[i]\n  }\n \n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02848_1", "type": "JavaScript", "obfuscated": "function Main(_0x47bcfb) {\n    const _0x4c777b = _0x47bcfb['split']('\\x0a')['filter'](_0x1b3627 => _0x1b3627);\n    const _0x1acec0 = Number(_0x4c777b[0x0]);\n    const _0x4ec33a = _0x4c777b[0x1]['split']('');\n    console['log'](_0x4ec33a['map'](function (_0x506848) {\n        let _0xe8ddec = _0x506848['charCodeAt']() + _0x1acec0;\n        if (_0xe8ddec > 0x5a) {\n            _0xe8ddec -= 0x1a;\n        }\n        return String['fromCharCode'](_0xe8ddec);\n    })['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\nABCXYZ", "CDEZAB"], ["0\nABCXYZ", "ABCXYZ"], ["13\nABCDEFGHIJKLMNOPQRSTUVWXYZ", "NOPQRSTUVWXYZABCDEFGHIJKLM"]], "original": "function Main(input) {\n  const inputs = input.split('\\n')\n    .filter(v => v);\n  const n = Number(inputs[0]);\n  const strs = inputs[1]\n    .split('');\n  \n  console.log(strs.map(function(s) {\n    let c = s.charCodeAt() + n;\n    if (c > 90) {\n      c -= 26;\n    }\n    return String.fromCharCode(c)\n  }).join(''));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02952_1", "type": "JavaScript", "obfuscated": "function keta(_0x5c402e) {\n    for (var _0x1bdf7e = 0x1; _0x1bdf7e <= 0x6; _0x1bdf7e++) {\n        if (_0x5c402e < 0xa ** _0x1bdf7e)\n            return _0x1bdf7e % 0x2;\n    }\n}\nfunction Main(_0x22fcb4) {\n    var _0x866155 = 0x0;\n    var _0x455c43 = 0x1;\n    while (_0x455c43 <= _0x22fcb4) {\n        _0x866155 += keta(_0x455c43);\n        _0x455c43++;\n    }\n    console['log'](_0x866155);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["11", "9"], ["136", "46"], ["100000", "90909"]], "original": "function keta(num) {\n    for(var i=1; i<=6; i++) {\n        if(num < 10**i) return i%2;\n    }\n}\n\nfunction Main(input) {\n    var ans = 0;\n    var cnt = 1;\n    while(cnt <= input) {\n        ans += keta(cnt);\n        cnt++;\n    }\n    console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02987_1", "type": "JavaScript", "obfuscated": "function main(_0x37b7b4) {\n    const _0x1cd189 = _0x37b7b4['split']('');\n    const _0x25e1c4 = [];\n    _0x1cd189['forEach'](_0x27742b => {\n        if (!_0x25e1c4['some'](_0x4fd4f => _0x4fd4f === _0x27742b)) {\n            _0x25e1c4['push'](_0x27742b);\n        }\n    });\n    const _0x2825fa = _0x25e1c4['length'] === 0x2 ? 'Yes' : 'No';\n    console['log'](_0x2825fa);\n}\n;\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["ASSA", "Yes"], ["STOP", "No"], ["FFEE", "Yes"], ["FREE", "No"]], "original": "function main(input) {\n  // 入力値（文字列）を改行で区切る\n  const inputList = input.split('');\n  const list = [];\n  inputList.forEach(il => {\n    if (!list.some(l => l === il)) {\n      list.push(il);\n    }\n  });\n  const result = list.length === 2 ? 'Yes' : 'No';\n  console.log(result);\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03036_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x5a5ebb) {\n    _0x5a5ebb = _0x5a5ebb['trim']()['split'](/\\s+/)['map'](_0x3e5855 => _0x3e5855 - 0x0);\n    const _0x474948 = _0x5a5ebb[0x0];\n    const _0x2ea36b = _0x5a5ebb[0x1];\n    let _0x260305 = _0x5a5ebb[0x2];\n    let _0x325261 = new Array(0xa);\n    for (let _0x416a87 = 0x0; _0x416a87 < 0xa; _0x416a87++) {\n        _0x260305 = _0x474948 * _0x260305 - _0x2ea36b;\n        _0x325261[_0x416a87] = _0x260305;\n    }\n    console['log'](_0x325261['join']('\\x0a'));\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 10 20", "30\n50\n90\n170\n330\n650\n1290\n2570\n5130\n10250"], ["4 40 60", "200\n760\n3000\n11960\n47800\n191160\n764600\n3058360\n12233400\n48933560"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const r=input[0];\n  const D=input[1];\n  let x=input[2];\n  let ans=new Array(10);\n  for(let i=0;i<10;i++){\n    x=r*x-D;\n    ans[i]=x;\n  }\n  \n  console.log(ans.join('\\n'));\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03048_1", "type": "JavaScript", "obfuscated": "function main(_0x54a9d1) {\n    const _0x5afd1f = _0x54a9d1['split']('\\x20');\n    const _0x531e6e = parseInt(_0x5afd1f[0x0], 0xa), _0xda40c8 = parseInt(_0x5afd1f[0x1], 0xa), _0x4e93f5 = parseInt(_0x5afd1f[0x2], 0xa), _0x3e1b12 = parseInt(_0x5afd1f[0x3], 0xa);\n    var _0x5ef717 = 0x0;\n    var _0x30490b = 0x0;\n    for (var _0x595553 = 0x0; _0x595553 <= (_0x3e1b12 / _0x531e6e | 0x0); ++_0x595553) {\n        for (var _0x48adcc = 0x0; _0x48adcc <= (_0x3e1b12 / _0xda40c8 | 0x0); ++_0x48adcc) {\n            _0x30490b = (_0x3e1b12 - _0x595553 * _0x531e6e - _0x48adcc * _0xda40c8) / _0x4e93f5 | 0x0;\n            if (_0x30490b >= 0x0 && _0x595553 * _0x531e6e + _0x48adcc * _0xda40c8 + _0x30490b * _0x4e93f5 == _0x3e1b12)\n                ++_0x5ef717;\n        }\n    }\n    console['log'](_0x5ef717);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 2 3 4", "4"], ["13 1 4 3000", "87058"]], "original": "function main(input){\n  const args = input.split(' ');\n  const R = parseInt(args[0], 10),\n        G = parseInt(args[1], 10),\n        B = parseInt(args[2], 10),\n        N = parseInt(args[3], 10);\n  \n  var s = 0;\n  var k = 0;\n  for (var i = 0; i <= (N / R | 0); ++i){\n    for (var j = 0; j <= (N / G | 0); ++j){\n      k = ((N - i*R - j*G) / B) | 0;\n      if (k >= 0 && i*R + j*G + k*B == N) ++s;\n    }\n  }\n  console.log(s);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03060_1", "type": "JavaScript", "obfuscated": "function Main(_0x3f5f48) {\n    _0x3f5f48 = _0x3f5f48['split']('\\x0a');\n    n = Number(_0x3f5f48[0x0]['split']('\\x20'));\n    V = _0x3f5f48[0x1]['split']('\\x20')['map'](Number);\n    C = _0x3f5f48[0x2]['split']('\\x20')['map'](Number);\n    var _0x41e0e9 = 0x0;\n    for (var _0x126123 = 0x0; _0x126123 < n; _0x126123++) {\n        y = V[_0x126123] - C[_0x126123];\n        if (y >= 0x0) {\n            _0x41e0e9 = _0x41e0e9 + y;\n        }\n    }\n    console['log'](_0x41e0e9);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n10 2 5\n6 3 4", "5"], ["4\n13 21 6 19\n11 30 6 15", "6"], ["1\n1\n50", "0"]], "original": "//   2次配列のよみこみ\n\nfunction Main(input) {\n    input = input.split(\"\\n\");\n  \tn = Number(input[0].split(\" \"));\n    V = input[1].split(\" \").map(Number);\n    C = input[2].split(\" \").map(Number);\n    \n  //  console.log(n);\n  //  console.log(V);\n  //  console.log(C);\n    \n    \n  \tvar Y = 0;\n  \tfor(var i=0; i<n; i++){y = V[i]-C[i];\n                             if ( y >= 0){Y = Y + y;}\n                                      }\n   console.log(Y);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03145_1", "type": "JavaScript", "obfuscated": "function Main(_0x4b73f6) {\n    var _0x447d0e = _0x4b73f6['split']('\\x20');\n    var _0x3ef3c3 = parseInt(_0x447d0e[0x0], 0xa);\n    var _0x369a1a = parseInt(_0x447d0e[0x1], 0xa);\n    console['log'](_0x3ef3c3 * _0x369a1a / 0x2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4 5", "6"], ["5 12 13", "30"], ["45 28 53", "630"]], "original": "function Main(input){ \n  var inputs = input.split(\" \");\n  var ab = parseInt(inputs[0],10);\n  var bc = parseInt(inputs[1],10);\n  console.log(ab*bc/2); \n  \n}\n    Main(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p03327_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2ae2c0) {\n    const _0x1afef7 = Number(_0x2ae2c0);\n    if (_0x1afef7 <= 0x3e7) {\n        console['log']('ABC');\n    } else {\n        console['log']('ABD');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["999", "ABC"], ["1000", "ABD"], ["1481", "ABD"]], "original": "'use strict'\n\nfunction Main(input) {\n  const N = Number(input);\n\n  if(N <= 999) {\n    console.log('ABC');\n  } else {\n    console.log('ABD');\n  }\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03360_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x35dcea => {\n    _0x35dcea = _0x35dcea['split']('\\x0a');\n    const _0x10c387 = _0x35dcea[0x0]['split']('\\x20')['map'](_0x232770 => parseInt(_0x232770));\n    const _0x467602 = parseInt(_0x35dcea[0x1]);\n    _0x10c387['sort']((_0x55d8b3, _0x52cb57) => _0x55d8b3 - _0x52cb57);\n    let _0x4bdb9c = _0x10c387['pop']();\n    _0x4bdb9c = _0x4bdb9c * Math['pow'](0x2, _0x467602);\n    _0x10c387['push'](_0x4bdb9c);\n    console['log'](_0x10c387['reduce']((_0x37e7d0, _0x563c7d) => _0x37e7d0 + _0x563c7d));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["5 3 11\n1", "30"], ["3 3 4\n2", "22"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const nums = input[0].split(' ').map(i => parseInt(i))\n    const K = parseInt(input[1])\n\n    nums.sort((a, b) => a - b)\n    let n = nums.pop()\n    n = n * Math.pow(2, K)\n    nums.push(n)\n    console.log(nums.reduce((p, c) => p + c))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript"}
{"filename": "p03473_1", "type": "JavaScript", "obfuscated": "function Main(_0xcfc397) {\n    _0xcfc397 = _0xcfc397['trim']();\n    console['log'](0x18 + (0x18 - _0xcfc397));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["21", "27"], ["12", "36"]], "original": "function Main(input) {\n  input = input.trim()\n//  input = input.split(\" \").map(Number);\nconsole.log(24+(24-input))\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03574_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x44e4fc) {\n    _0x44e4fc = _0x44e4fc['trim']()['split']('\\x0a');\n    const _0x371795 = _0x44e4fc['shift']()['split']('\\x20')['map'](_0x2fb770 => Number(_0x2fb770));\n    const _0x5ce44a = _0x371795[0x0], _0x34ee85 = _0x371795[0x1];\n    const _0x595395 = _0x44e4fc['map'](_0x2108e2 => _0x2108e2['split'](''));\n    const _0x407806 = [\n        -0x1,\n        -0x1,\n        -0x1,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x1\n    ];\n    const _0x1c17c8 = [\n        -0x1,\n        0x0,\n        0x1,\n        -0x1,\n        0x1,\n        -0x1,\n        0x0,\n        0x1\n    ];\n    for (let _0x43826a = 0x0; _0x43826a < _0x5ce44a; _0x43826a++) {\n        for (let _0xe1539c = 0x0; _0xe1539c < _0x34ee85; _0xe1539c++) {\n            if (_0x595395[_0x43826a][_0xe1539c] === '#')\n                continue;\n            let _0x4a4100 = 0x0;\n            for (let _0x170f7d = 0x0; _0x170f7d < 0x8; _0x170f7d++) {\n                const _0x109fd4 = _0x43826a + _0x407806[_0x170f7d], _0x4fb861 = _0xe1539c + _0x1c17c8[_0x170f7d];\n                if (_0x109fd4 < 0x0 || _0x5ce44a <= _0x109fd4)\n                    continue;\n                if (_0x4fb861 < 0x0 || _0x34ee85 <= _0x4fb861)\n                    continue;\n                if (_0x595395[_0x109fd4][_0x4fb861] === '#') {\n                    _0x4a4100 += 0x1;\n                }\n            }\n            _0x595395[_0x43826a][_0xe1539c] = _0x4a4100;\n        }\n    }\n    const _0x714e7f = _0x595395['map'](_0x5518d9 => _0x5518d9['join'](''))['join']('\\x0a');\n    console['log'](_0x714e7f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 5\n.....\n.#.#.\n.....", "11211\n1#2#1\n11211"], ["3 5\n#####\n#####\n#####", "#####\n#####\n#####"], ["6 6\n#####.\n#.#.##\n####.#\n.#..#.\n#.##..\n#.#...", "#####3\n#8#7##\n####5#\n4#65#2\n#5##21\n#4#310"]], "original": "'use strict'\nfunction Main(input){\n  input = input.trim().split('\\n');\n  const hw = input.shift().split(' ').map((str)=> Number(str));\n  const H  = hw[0], W = hw[1];  \n  const data = input.map(ls => ls.split(''));\n  \n  const hy = [-1, -1, -1, 0, 0, 1, 1, 1];\n  const wx = [-1, 0, 1, -1, 1, -1, 0, 1];\n  \n  for(let i = 0; i < H; i++){\n    for(let j = 0; j < W; j++){\n      \n      if(data[i][j] === '#') continue;\n      \n      let count = 0;\n      for(let k = 0; k < 8; k++){\n        const y = i + hy[k] , x = j + wx[k]; \n        if(y < 0 || H <= y) continue;\n        if(x < 0 || W <= x) continue;\n        \n        if(data[y][x] === '#') {\n          count += 1;\n        }\n      }\n      data[i][j] = count;\n    }\n  }\n  const result = data.map(ls => ls.join('')).join('\\n');\n  console.log(result);\n}\n\n//固定\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04045_1", "type": "JavaScript", "obfuscated": "function main(_0x35f867) {\n    var _0x4d6166 = _0x35f867['split']('\\x0a');\n    var _0x26a044 = _0x4d6166[0x0]['split']('\\x20')[0x0];\n    var _0x1413f1 = new RegExp(_0x4d6166[0x1]['replace']('\\x20', '|'));\n    while (_0x1413f1['test'](String(_0x26a044))) {\n        _0x26a044++;\n    }\n    return _0x26a044;\n}\nconsole['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["1000 8\n1 3 4 5 6 7 8 9", "2000"], ["9999 1\n0", "9999"]], "original": "function main(input) {\n\tvar inputs = input.split(\"\\n\");\n\tvar money = inputs[0].split(\" \")[0];\n    var kRegexp = new RegExp(inputs[1].replace(\" \",\"|\"));\n    while(kRegexp.test(String(money))){\n    \tmoney++;\n    }\n    return money;\n}\n\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));", "language": "JavaScript"}
{"filename": "p02571_1", "type": "JavaScript", "obfuscated": "(_0x174c63 => {\n    const [_0x49c905, _0x32517e] = _0x174c63['trim']()['split']('\\x0a');\n    const _0x123560 = _0x49c905['length'];\n    const _0x1df501 = _0x32517e['length'];\n    const _0x4b0e3c = _0x123560 - _0x1df501;\n    let _0x4c01d7 = _0x1df501;\n    for (let _0x59c572 = 0x0; _0x59c572 < _0x4b0e3c; _0x59c572++) {\n        const _0x482fe5 = _0x49c905['slice'](_0x59c572, _0x1df501 + _0x59c572);\n        let _0x43831c = 0x0;\n        for (let _0x3591bf = 0x0; _0x3591bf < _0x1df501; _0x3591bf++) {\n            if (_0x482fe5[_0x3591bf] !== _0x32517e[_0x3591bf])\n                _0x43831c += 0x1;\n        }\n        if (_0x4c01d7 > _0x43831c) {\n            _0x4c01d7 = _0x43831c;\n        }\n    }\n    console['log'](_0x4c01d7);\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["cabacc\nabc", "1"], ["codeforces\natcoder", "6"]], "original": "((input) => {\n  const [S, T] = input.trim().split('\\n');\n  const sl = S.length;\n  const tl = T.length;\n  const range = sl - tl;\n  let min = tl;\n\n  for (let i = 0; i < range; i++) {\n    const target = S.slice(i, tl + i);\n    let diff = 0;\n    for (let j = 0; j < tl; j++) {\n      if (target[j] !== T[j]) diff += 1;\n    }\n    if (min > diff) {\n      min = diff;\n    }\n   }\n\n  console.log(min);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02608_1", "type": "JavaScript", "obfuscated": "function Main(_0x2915a7) {\n    const _0x1debf1 = Number(_0x2915a7);\n    let _0x3302de = new Array(_0x1debf1)['fill'](0x0);\n    for (let _0x22565e = 0x1; _0x22565e ** 0x2 <= _0x1debf1; _0x22565e++) {\n        for (let _0x20eff9 = 0x1; _0x20eff9 ** 0x2 <= _0x1debf1; _0x20eff9++) {\n            if (_0x22565e + _0x20eff9 > _0x1debf1)\n                break;\n            for (let _0x13ac2d = 0x1; _0x13ac2d ** 0x2 <= _0x1debf1; _0x13ac2d++) {\n                const _0x10c455 = _0x22565e ** 0x2 + _0x20eff9 ** 0x2 + _0x13ac2d ** 0x2 + _0x22565e * _0x20eff9 + _0x20eff9 * _0x13ac2d + _0x13ac2d * _0x22565e;\n                if (_0x10c455 > _0x1debf1)\n                    break;\n                _0x3302de[_0x10c455 - 0x1]++;\n            }\n        }\n    }\n    console['log'](_0x3302de['join']('\\x0a'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["20", "0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n3\n3\n0\n0"]], "original": "// 一回計算した結果を全て持っておく\nfunction Main(input){\n    const N = Number(input);\n    let fn = new Array(N).fill(0);\n    for(let x=1; x**2<=N; x++){\n        for(let y=1; y**2<=N; y++){\n            if(x+y > N) break;\n            for(let z=1; z**2<=N; z++){\n                const i = x**2 + y**2 + z**2 + x*y + y*z + z*x;\n                if(i >N) break;\n                fn[i-1]++\n            }\n        }\n    }\n    console.log(fn.join('\\n'));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02712_1", "type": "JavaScript", "obfuscated": "function Main(_0x191132) {\n    inputs = _0x191132['split']('\\x0a');\n    const _0x229020 = Number(inputs[0x0]);\n    const _0x1b7ee3 = [];\n    for (let _0x5946c1 = 0x1; _0x5946c1 <= _0x229020; _0x5946c1++) {\n        if (_0x5946c1 % 0x3 !== 0x0 && _0x5946c1 % 0x5 !== 0x0) {\n            _0x1b7ee3['push'](_0x5946c1);\n        }\n    }\n    const _0x45378d = _0x1b7ee3['reduce']((_0xed4d90, _0x223b43) => {\n        return _0xed4d90 + _0x223b43;\n    });\n    console['log'](_0x45378d);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["15", "60"], ["1000000", "266666333332"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  inputs = input.split(\"\\n\");\n  \n  const N = Number(inputs[0]);\n  const arr = [];\n  for( let i = 1 ; i  <= N ; i++ ){\n    if( i % 3 !== 0 && i % 5 !== 0){\n      arr.push(i);\n    }\n  }\n\n  const sum = arr.reduce( (prev,current) => {\n    return prev + current;\n  });\n\n  console.log(sum);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02754_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5cda15) {\n    let _0x912f0c = _0x5cda15[0x0]['trim']()['split']('\\x20');\n    let _0x2a89dc = parseInt(_0x912f0c[0x0]);\n    let _0x42e660 = parseInt(_0x912f0c[0x1]);\n    let _0x5c313f = parseInt(_0x912f0c[0x2]);\n    let _0x324b70 = _0x42e660 + _0x5c313f;\n    let _0x557754 = 0x0;\n    if (_0x42e660 === 0x0) {\n        console['log'](0x0);\n    } else if (_0x5c313f === 0x0) {\n        console['log'](_0x2a89dc);\n    } else {\n        if (_0x2a89dc % _0x324b70 < _0x42e660) {\n            _0x557754 = Math['floor'](_0x2a89dc / _0x324b70) * _0x42e660 + _0x2a89dc % _0x324b70;\n        } else {\n            _0x557754 = Math['floor'](_0x2a89dc / _0x324b70) * _0x42e660 + _0x42e660;\n        }\n        console['log'](_0x557754);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["8 3 4", "4"], ["8 0 4", "0"], ["6 2 4", "2"]], "original": "\"use strict\";\nfunction main(input) {\n  let kari = input[0].trim().split(\" \");\n \n  let n = parseInt(kari[0]);\n  let a = parseInt(kari[1]);\n  let b = parseInt(kari[2]);\n \n  let c = a + b;\n  let ans = 0;\n\n  if(a === 0){\n    console.log(0);\n  }else if(b === 0){\n    console.log(n);\n  }else{\n    if(n%c < a){\n      ans = Math.floor(n/c)*a + n%c;\n    }else{\n      ans = Math.floor(n/c)*a + a;\n    }\n    console.log(ans);\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02773_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3c52ab => {\n    const _0x55c6c2 = _0x3c52ab['trim']()['split']('\\x0a');\n    const _0x13b348 = _0x55c6c2['shift']();\n    let _0x8a6cc5 = {};\n    _0x55c6c2['forEach'](_0x2f7795 => {\n        if (_0x8a6cc5[_0x2f7795]) {\n            _0x8a6cc5[_0x2f7795]++;\n        } else {\n            _0x8a6cc5[_0x2f7795] = 0x1;\n        }\n    });\n    let _0x230439 = [];\n    let _0xd43aaf = 0x0;\n    let _0x980bc3 = _0x1fc676 => {\n        console['log'](_0x1fc676);\n    };\n    for (let _0x489a13 = 0x0; _0x489a13 < Object['keys'](_0x8a6cc5)['length']; _0x489a13++) {\n        if (_0x8a6cc5[Object['keys'](_0x8a6cc5)[_0x489a13]] < _0xd43aaf) {\n            continue;\n        } else if (_0x8a6cc5[Object['keys'](_0x8a6cc5)[_0x489a13]] > _0xd43aaf) {\n            _0x230439 = [];\n            _0x230439['push'](Object['keys'](_0x8a6cc5)[_0x489a13]);\n            _0xd43aaf = _0x8a6cc5[Object['keys'](_0x8a6cc5)[_0x489a13]];\n        } else if (_0x8a6cc5[Object['keys'](_0x8a6cc5)[_0x489a13]] * 0x1 == _0xd43aaf) {\n            _0x230439['push'](Object['keys'](_0x8a6cc5)[_0x489a13]);\n        }\n    }\n    _0x230439['sort']();\n    _0x230439['forEach'](_0x980bc3);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\nbeat\nvet\nbeet\nbed\nvet\nbet\nbeet", "beet\nvet"], ["8\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo\nbuffalo", "buffalo"], ["7\nbass\nbass\nkick\nkick\nbass\nkick\nkick", "kick"], ["4\nushi\ntapu\nnichia\nkun", "kun\nnichia\ntapu\nushi"]], "original": "\"use strict\";\nconst main = arg => {\n  \tconst rows = arg.trim().split(\"\\n\");\n  \tconst N = rows.shift();\n  \tlet wordsObj = {};\n  \trows.forEach(row => {\n    \tif(wordsObj[row]){\n        \twordsObj[row]++;\n        } else {\n        \twordsObj[row] = 1;\n        }\n    })\n  \tlet ansArr = [];\n  \tlet max = 0;\n  \tlet output = (w) => {console.log(w)};\n  \tfor(let i = 0; i < Object.keys(wordsObj).length; i++){\n    \tif(wordsObj[Object.keys(wordsObj)[i]] < max){\t\n          continue;\n        } else if(wordsObj[Object.keys(wordsObj)[i]] > max){\t\n          \tansArr = [];\n        \tansArr.push(Object.keys(wordsObj)[i]);\n          \tmax = wordsObj[Object.keys(wordsObj)[i]];\n        } else if(wordsObj[Object.keys(wordsObj)[i]]*1 == max){\n        \tansArr.push(Object.keys(wordsObj)[i])\n        }\n    }\n\tansArr.sort();\n  \tansArr.forEach(output);\n  \t\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02891_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x57db15 => {\n    _0x57db15 = _0x57db15['trim']()['split']('\\x0a');\n    const _0x31ad08 = _0x57db15[0x0]['split']('');\n    const _0x4246f4 = parseInt(_0x57db15[0x1]);\n    let _0x349c7c = 0x0;\n    for (let _0x1f30d2 = 0x1; _0x1f30d2 < _0x31ad08['length']; _0x1f30d2++) {\n        if (_0x31ad08[_0x1f30d2] === _0x31ad08[_0x1f30d2 - 0x1]) {\n            _0x349c7c++;\n            _0x31ad08[_0x1f30d2] = '@';\n        }\n    }\n    console['log'](_0x31ad08['length'] === 0x1 ? Math['floor'](_0x4246f4 / 0x2) : _0x349c7c * _0x4246f4);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["issii\n2", "4"], ["qq\n81", "81"], ["cooooooooonteeeeeeeeeest\n999993333", "8999939997"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    const K = parseInt(arg[1]);\n\n    let streakS = 0;\n    \n    // まずSの連続箇所を調べる\n    for(let i=1; i<S.length; i++) {\n        // 連続している\n        if(S[i] === S[i-1]) {\n            streakS++;\n            S[i] = \"@\";\n        }\n    }\n    \n    console.log(S.length === 1 ? Math.floor(K / 2) : streakS * K);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02898_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5a7fde) {\n    let _0x336abf = parseInt(_0x5a7fde['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    const _0x18e787 = parseInt(_0x5a7fde['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    const _0x29565 = _0x5a7fde['split']('\\x0a')[0x1]['split']('\\x20');\n    for (let _0x4af2e5 = 0x0; _0x4af2e5 < _0x29565['length']; _0x4af2e5++) {\n        if (_0x18e787 > parseInt(_0x29565[_0x4af2e5])) {\n            _0x336abf--;\n        }\n    }\n    console['log'](_0x336abf);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8'));", "test_cases": [["4 150\n150 140 100 200", "2"], ["1 500\n499", "0"], ["5 1\n100 200 300 400 500", "5"]], "original": "\"use strict\";\n\nfunction main(input) {\n  let pass_friend_num = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  const pass_height = parseInt(input.split(\"\\n\")[0].split(\" \")[1]);\n\n  const friend_height_data = input.split(\"\\n\")[1].split(\" \");\n\n  for (let i = 0; i < friend_height_data.length; i++) {\n    if (pass_height > parseInt(friend_height_data[i])) {\n      pass_friend_num--;\n    }\n  }\n\n  console.log(pass_friend_num);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\"));\n", "language": "JavaScript"}
{"filename": "p02909_1", "type": "JavaScript", "obfuscated": "function Main(_0x17a730) {\n    var _0x215524 = _0x17a730['split']('\\x0a')[0x0];\n    if (_0x215524 === 'Sunny') {\n        console['log']('Cloudy');\n    } else if (_0x215524 === 'Cloudy') {\n        console['log']('Rainy');\n    } else if (_0x215524 === 'Rainy') {\n        console['log']('Sunny');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["Sunny", "Cloudy"], ["Rainy", "Sunny"]], "original": "\nfunction Main(arg) {\n \n    var N = arg.split(\"\\n\")[0];\n\n    if (N === \"Sunny\") {\n       console.log(\"Cloudy\");\n    }\n    else if (N === \"Cloudy\") {\n        console.log(\"Rainy\");\n    }\n    else if (N === \"Rainy\") {\n        console.log(\"Sunny\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02911_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet arg_str = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\narg_str = arg_str['split']('\\x0a');\nconst arg_str_0 = arg_str[0x0]['split']('\\x20');\nconst N = arg_str_0[0x0];\nconst K = arg_str_0[0x1];\nconst Q = arg_str_0[0x2];\nconst A_array = arg_str['slice'](0x1);\nlet result_val = [];\nfor (let i = 0x0; i < N; i++) {\n    result_val[i] = K;\n}\nA_array['forEach']((_0x15b308, _0x3c1caa) => {\n    for (let _0x11acf9 = 0x0; _0x11acf9 < N; _0x11acf9++) {\n        if (_0x15b308 - 0x1 != _0x11acf9) {\n            result_val[_0x11acf9]--;\n        }\n    }\n});\nresult_val['map'](_0x55e6c7 => _0x55e6c7 > 0x0 ? console['log']('Yes') : console['log']('No'));", "test_cases": [["6 3 4\n3\n1\n3\n2", "No\nNo\nYes\nNo\nNo\nNo"], ["6 5 4\n3\n1\n3\n2", "Yes\nYes\nYes\nYes\nYes\nYes"], ["10 13 15\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9", "No\nNo\nNo\nNo\nYes\nNo\nNo\nNo\nYes\nNo"]], "original": "\"use strict\"\n \nlet arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\narg_str = arg_str.split('\\n')\nconst arg_str_0 = arg_str[0].split(' ')\nconst N = arg_str_0[0]\nconst K = arg_str_0[1]\nconst Q = arg_str_0[2]\n \nconst A_array = arg_str.slice(1)\n \nlet result_val = []\n \nfor(let i=0;i<N;i++){\n  result_val[i] = K\n}\n \nA_array.forEach((item, index)=>{\n  for(let i=0;i<N;i++){\n    if(item - 1 != i){\n        result_val[i]--\n    }\n  }\n})\n \nresult_val.map(x=>x>0 ? console.log('Yes') : console.log('No'))\n", "language": "JavaScript"}
{"filename": "p02982_1", "type": "JavaScript", "obfuscated": "function main(_0x19af97) {\n    const _0x9fd333 = _0x19af97['split']('\\x0a');\n    const _0x29c019 = _0x9fd333[0x0]['split']('\\x20');\n    const _0x5b39d6 = parseInt(_0x29c019[0x0], 0xa);\n    const _0x127bd6 = parseInt(_0x29c019[0x1], 0xa);\n    var _0x1e88ee = [];\n    for (var _0x5cc830 = 0x0; _0x5cc830 < _0x5b39d6; _0x5cc830++) {\n        _0x1e88ee[_0x5cc830] = [];\n        var _0x4092cf = _0x9fd333[_0x5cc830 + 0x1]['split']('\\x20');\n        for (var _0x1fa931 = 0x0; _0x1fa931 < _0x127bd6 + 0x1; _0x1fa931++) {\n            _0x1e88ee[_0x5cc830]['push'](parseInt(_0x4092cf[_0x1fa931], 0xa));\n        }\n    }\n    var _0x4f6950 = 0x0;\n    function _0x449eb3(_0x172a44, _0x4ced0a) {\n        var _0x261142 = 0x0;\n        for (var _0xa4e616 = 0x0; _0xa4e616 < _0x127bd6; _0xa4e616++) {\n            _0x261142 = _0x261142 + Math['pow'](_0x172a44[_0xa4e616] - _0x4ced0a[_0xa4e616], 0x2);\n        }\n        if (Number['isInteger'](Math['sqrt'](_0x261142)) == !![]) {\n            return !![];\n        } else {\n            return ![];\n        }\n    }\n    for (var _0x5cc830 = 0x0; _0x5cc830 < _0x5b39d6; _0x5cc830++) {\n        for (var _0x1fa931 = _0x5cc830 + 0x1; _0x1fa931 < _0x5b39d6; _0x1fa931++) {\n            if (_0x449eb3(_0x1e88ee[_0x5cc830], _0x1e88ee[_0x1fa931]) == !![]) {\n                _0x4f6950++;\n            }\n        }\n    }\n    console['log'](_0x4f6950);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n1 2\n5 5\n-2 8", "1"], ["3 4\n-3 7 8 2\n-12 1 10 2\n-2 8 9 3", "2"], ["5 1\n1\n2\n3\n4\n5", "10"]], "original": "function main(input){\n  const args=input.split(\"\\n\");\n  const aiueo=args[0].split(\" \");\n  const N=parseInt(aiueo[0],10);\n  const D=parseInt(aiueo[1],10);\n\n  //入力された二次元配列を、javascriptで使える形にする\n  //中身はconsole.log(arr)で確認できる\n  var arr=[]\n  for(var i=0; i<N; i++){\n    arr[i]=[];\n    var subArgs= args[i+1].split(\" \")\n    for(var j=0; j<D+1; j++){\n      arr[i].push(parseInt(subArgs[j],10))\n    }\n  }\n\n  var kakunin=0;\n\n  //二点間の距離を出す関数\n  function kyori(arr1,arr2){\n    var sum=0;\n    for(var i=0; i<D; i++){\n      sum=sum+Math.pow(arr1[i]-arr2[i],2)\n    }\n    //console.log(\"距離の二乗は\"+sum+\"です\")\n    if(Number.isInteger(Math.sqrt(sum))==true){\n      return true\n    }else{\n      return false\n    }\n  }\n\n  //以下は判定用のfor文。距離が整数ならkakunin++する。\n  for(var i=0; i<N; i++){\n    for(var j=i+1; j<N; j++){\n      if(kyori(arr[i],arr[j])==true){\n        kakunin++\n      }\n    }\n  }\n  console.log(kakunin)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p03049_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction counter(_0x5c532b, _0x364c41) {\n    return _0x5c532b['split'](_0x364c41)['length'] - 0x1;\n}\nfunction main(_0x28ccd9) {\n    const _0x43627b = _0x28ccd9['split']('\\x0a');\n    _0x43627b['shift']();\n    let _0x440d4e = 0x0;\n    let _0x519399 = 0x0;\n    let _0x478fdb = 0x0;\n    let _0x5da75f = 0x0;\n    _0x43627b['forEach'](_0x89b89a => {\n        _0x440d4e += counter(_0x89b89a, 'AB');\n        if (_0x89b89a['charAt'](0x0) === 'B') {\n            if (_0x89b89a['charAt'](_0x89b89a['length'] - 0x1) === 'A') {\n                ++_0x5da75f;\n            } else {\n                ++_0x519399;\n            }\n        } else if (_0x89b89a['charAt'](_0x89b89a['length'] - 0x1) === 'A') {\n            ++_0x478fdb;\n        }\n    });\n    const _0x5c5c4b = Math['min'](_0x519399, _0x478fdb);\n    const _0x487577 = Math['max'](_0x519399, _0x478fdb);\n    const _0x5d1406 = _0x487577 - _0x5c5c4b;\n    let _0x26a177 = Math['max'](0x0, _0x5da75f - _0x5d1406);\n    if (_0x5d1406 === 0x0 && _0x26a177 !== 0x0)\n        --_0x26a177;\n    _0x440d4e += _0x5c5c4b;\n    _0x440d4e += Math['min'](_0x5d1406, _0x5da75f);\n    _0x440d4e += _0x26a177;\n    console['log'](_0x440d4e);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\nABCA\nXBAZ\nBAD", "2"], ["9\nBEWPVCRWH\nZZNQYIJX\nBAVREA\nPA\nHJMYITEOX\nBCJHMRMNK\nBP\nQVFABZ\nPRGKSPUNA", "4"], ["7\nRABYBBE\nJOZ\nBMHQUVA\nBPA\nISU\nMCMABAOBHZ\nSZMEHMA", "4"]], "original": "'use strict';\n\nfunction counter(str,seq) {\n    return str.split(seq).length - 1;\n}\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  input.shift();\n\n  let ans = 0;\n  let startsB = 0;\n  let endsA = 0;\n  let startsBandEndsA = 0;\n\n  input.forEach(s => {\n    ans += counter(s, 'AB');\n\n    if (s.charAt(0) === 'B') {\n      if (s.charAt(s.length - 1) === 'A') {\n        ++startsBandEndsA;\n      } else {\n        ++startsB;\n      }\n    } else if (s.charAt(s.length - 1) === 'A') {\n      ++endsA;\n    }\n  });\n\n  const smaller = Math.min(startsB, endsA);\n  const bigger = Math.max(startsB, endsA);\n  const shortage = bigger - smaller;\n  let extra = Math.max(0, startsBandEndsA - shortage);\n  if (shortage === 0 && extra !== 0) --extra;\n  \n\n  ans += smaller;\n  ans += Math.min(shortage, startsBandEndsA);\n  ans += extra;\n\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03069_1", "type": "JavaScript", "obfuscated": "function Main(_0x5290e6) {\n    'use strict';\n    const _0x216a4a = _0x5290e6['split']('\\x0a');\n    let _0x4dc789 = ![];\n    let _0x1a8a23 = 0x0;\n    let _0x25a2dc = 0x0;\n    for (let _0x32a041 = 0x0; _0x32a041 < _0x216a4a[0x0]; _0x32a041++) {\n        if (_0x4dc789 === ![] && _0x216a4a[0x1][_0x32a041] === '#') {\n            _0x4dc789 = !![];\n        }\n        if (_0x4dc789 === !![] && _0x216a4a[0x1][_0x32a041] === '.') {\n            _0x25a2dc++;\n        }\n        if (_0x216a4a[0x1][_0x32a041] === '#') {\n            _0x1a8a23++;\n        }\n    }\n    if (_0x25a2dc === 0x0 && _0x4dc789 === ![]) {\n        console['log']('0');\n    } else if (_0x25a2dc === 0x0 && _0x4dc789 === !![]) {\n        console['log'](_0x1a8a23);\n    } else if (_0x1a8a23 <= _0x25a2dc) {\n        console['log'](_0x1a8a23);\n    } else {\n        console['log'](_0x25a2dc);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["3\n#.#", "1"], ["5\n#.##.", "2"], ["9\n.........", "0"]], "original": "function Main(input) {\n    \"use strict\";\n    const elements = input.split('\\n');\n    let blackFlag = false;\n    let numBlack = 0;\n    let numWhiteAfterBlack = 0;\n\n    for (let i = 0; i < elements[0]; i++) {\n        if (blackFlag === false && elements[1][i] === '#') {\n            blackFlag = true;\n        }\n        if (blackFlag === true && elements[1][i] === '.') {\n            numWhiteAfterBlack++;\n        }\n        if (elements[1][i] === '#') {\n            numBlack++;\n        }\n    }\n\n    if (numWhiteAfterBlack === 0 && blackFlag === false) {\n        console.log('0');\n    } else if(numWhiteAfterBlack === 0 && blackFlag === true){\n        console.log(numBlack);\n    }else if (numBlack <= numWhiteAfterBlack) {\n        console.log(numBlack);\n    } else {\n        console.log(numWhiteAfterBlack);\n    }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf-8'));", "language": "JavaScript"}
{"filename": "p03076_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x46c35b => {\n    const _0x36daf6 = _0x46c35b['trim']()['split']('\\x0a')['map'](_0x5e249d => parseInt(_0x5e249d));\n    let _0x4842ed = 0xa;\n    let _0x58842c = 0x0;\n    for (let _0x4945f2 = 0x0; _0x4945f2 < _0x36daf6['length']; _0x4945f2++) {\n        let _0x28437b = String(_0x36daf6[_0x4945f2])['split']('');\n        _0x28437b = parseInt(_0x28437b[_0x28437b['length'] - 0x1]);\n        let _0x4c771e = 0xa - _0x28437b;\n        _0x58842c += parseInt(_0x36daf6[_0x4945f2]);\n        if (_0x4c771e !== 0xa) {\n            _0x58842c += _0x4c771e;\n        }\n        if (_0x4c771e !== 0xa && _0x28437b < _0x4842ed) {\n            _0x4842ed = _0x28437b;\n        }\n    }\n    console['log'](parseInt(_0x58842c - (0xa - _0x4842ed)));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["29\n20\n7\n35\n120", "215"], ["101\n86\n119\n108\n57", "481"], ["123\n123\n123\n123\n123", "643"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const times = arg.trim().split(\"\\n\").map(n=>parseInt(n));\n    let min = 10;\n    \n    let sum = 0;\n    \n    for(let i=0; i<times.length; i++) {\n        let digitOne   = String(times[i]).split(\"\");\n        digitOne = parseInt(digitOne[digitOne.length - 1]);\n        \n        let digitMinus = 10 - digitOne;\n        sum += parseInt(times[i]);\n        \n        if(digitMinus !== 10) {\n            sum += digitMinus;\n        }\n        \n        if(digitMinus !== 10 && digitOne < min) {\n            min = digitOne;\n        }\n    }\n\n    console.log(parseInt(sum - (10 - min)));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03103_1", "type": "JavaScript", "obfuscated": "function Main(_0x523dfc) {\n    _0x523dfc = _0x523dfc['split']('\\x0a');\n    inputStr = _0x523dfc[0x0]['split']('\\x20');\n    var _0x50f10a = Number['parseInt'](inputStr[0x0]);\n    var _0x15e912 = Number['parseInt'](inputStr[0x1]);\n    var _0x34b25e = [];\n    var _0x31c63e = [];\n    var _0x41a28e = 0x0;\n    var _0x2a668e = 0x0;\n    var _0x302204 = _0x15e912;\n    for (i = 0x0; i < _0x50f10a; i++) {\n        _0x34b25e = _0x523dfc[i + 0x1]['split']('\\x20');\n        _0x31c63e[i] = _0x34b25e['map'](_0x350ee9 => parseInt(_0x350ee9, 0xa));\n        _0x31c63e[i][0x0] = ('0000000000' + _0x31c63e[i][0x0])['substr'](-0xa);\n    }\n    _0x31c63e['sort']();\n    for (i = 0x0; i < _0x50f10a; i++) {\n        if (_0x302204 > parseInt(_0x31c63e[i][0x1])) {\n            _0x2a668e += parseInt(_0x31c63e[i][0x0]) * parseInt(_0x31c63e[i][0x1]);\n            _0x302204 -= parseInt(_0x31c63e[i][0x1]);\n        } else {\n            _0x2a668e += parseInt(_0x31c63e[i][0x0]) * _0x302204;\n            break;\n        }\n    }\n    console['log'](_0x2a668e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 5\n4 9\n2 4", "12"], ["4 30\n6 18\n2 5\n3 10\n7 9", "130"], ["1 100000\n1000000000 100000", "100000000000000"]], "original": "function Main(input){\n  input = input.split(\"\\n\");\n  inputStr = input[0].split(\" \");\n  var N = Number.parseInt(inputStr[0]);\n  var M = Number.parseInt(inputStr[1]);\n  var tmp = [];\n  var array = [];\n  var buycnt = 0;\n  var okane = 0;\n  var mokori = M;\n  //配列に数値化して溜め込む\n  for (i=0;i<N;i++){\n    tmp = input[i+1].split(\" \");\n    array[i] = tmp.map( tmp => parseInt(tmp,10) )\n    array[i][0] = ( \"0000000000\" + array[i][0] ).substr(-10);\n  }\n  //ソートする\n  array.sort();\n  //数値変換しつつ必要本数を買い込む\n  for (i=0 ; i<N ; i++){\n    if (mokori > parseInt(array[i][1])){\n      okane += parseInt(array[i][0]) * parseInt(array[i][1]);\n      mokori -= parseInt(array[i][1]);\n    } else {\n      okane += parseInt(array[i][0]) * mokori;\n      break;\n    }\n  }\n  console.log(okane);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03105_1", "type": "JavaScript", "obfuscated": "const main = _0x172cae => {\n    const _0x5b6e90 = _0x172cae['split']('\\x20')['map'](_0x23e68b => Number(_0x23e68b));\n    const _0x59a78a = _0x5b6e90[0x0] > _0x5b6e90[0x1] ? 0x0 : _0x5b6e90[0x1] / _0x5b6e90[0x0];\n    console['log'](_0x59a78a >= _0x5b6e90[0x2] ? _0x5b6e90[0x2] : _0x59a78a);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 11 4", "4"], ["3 9 5", "3"], ["100 1 10", "0"]], "original": "const main = input =>{\n    const In = input.split(' ').map(n=>Number(n));\n    const o1 = In[0] > In[1] ? 0 : In[1]/In[0];\n    console.log(o1 >= In[2] ? In[2] : o1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03219_1", "type": "JavaScript", "obfuscated": "const rl = require('readline')['createInterface']({ 'input': process['stdin'] });\nrl['on']('line', _0x3c1017 => {\n    const _0xb5b9de = _0x3c1017['split']('\\x20');\n    solve(Number(_0xb5b9de[0x0]), Number(_0xb5b9de[0x1]));\n    rl['close']();\n});\nfunction solve(_0x1efd21, _0x2f87f1) {\n    console['log'](_0x1efd21 + _0x2f87f1 / 0x2);\n}", "test_cases": [["81 58", "110"], ["4 54", "31"]], "original": "const rl = require('readline')\n    .createInterface({\n        input: process.stdin,\n    });\n\nrl.on('line', (line) => {\n    const param = line.split(\" \");\n    solve(Number(param[0]), Number(param[1]));\n    rl.close();\n});\n\nfunction solve(x,y){\n    console.log(x+y/2);\n}\n", "language": "JavaScript"}
{"filename": "p03221_1", "type": "JavaScript", "obfuscated": "function fillZero(_0x26b81a, _0x335896) {\n    _0x335896 = String(_0x335896);\n    for (var _0x89ac25 = _0x335896['length']; _0x89ac25 < _0x26b81a; _0x89ac25++) {\n        _0x335896 = '0' + _0x335896;\n    }\n    return _0x335896;\n}\nfunction main(_0x17da63) {\n    _0x17da63 = _0x17da63['trim']()['split']('\\x0a');\n    _0x17da63[0x0] = _0x17da63[0x0]['split']('\\x20');\n    var _0x26865e = Number(_0x17da63[0x0][0x0]);\n    var _0x4e959a = Number(_0x17da63[0x0][0x1]);\n    _0x17da63['shift']();\n    var _0x2b1751 = {};\n    for (var _0x1c9072 = 0x0; _0x1c9072 < _0x17da63['length']; _0x1c9072++) {\n        var _0x16a5d8 = _0x17da63[_0x1c9072]['split']('\\x20')['map'](_0x6f50a2 => Number(_0x6f50a2));\n        _0x17da63[_0x1c9072] = _0x16a5d8;\n        if (!_0x2b1751[_0x16a5d8[0x0]]) {\n            _0x2b1751[_0x16a5d8[0x0]] = [];\n        }\n        _0x2b1751[_0x16a5d8[0x0]]['push'](_0x16a5d8[0x1]);\n    }\n    for (key in _0x2b1751) {\n        _0x2b1751[key]['sort']();\n    }\n    for (var _0x1c9072 = 0x0; _0x1c9072 < _0x17da63['length']; _0x1c9072++) {\n        var _0x3152e0 = _0x17da63[_0x1c9072][0x0];\n        var _0x391d02 = 0x0;\n        for (var _0x391d02 = 0x0; _0x391d02 < _0x2b1751[_0x3152e0]['length']; _0x391d02++) {\n            if (_0x2b1751[_0x3152e0][_0x391d02] === _0x17da63[_0x1c9072][0x1]) {\n                break;\n            }\n        }\n        console['log'](fillZero(0x6, _0x3152e0) + fillZero(0x6, _0x391d02 + 0x1));\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3\n1 32\n2 63\n1 12", "000001000002\n000002000001\n000001000001"], ["2 3\n2 55\n2 77\n2 99", "000002000001\n000002000002\n000002000003"]], "original": "function fillZero(l,num) {\n\tnum = String(num)\n\tfor (var i = num.length; i < l; i++) {\n\t\tnum = \"0\" + num\n\t}\n\treturn num\n}\n\nfunction main(arg) {\n\targ = arg.trim().split(\"\\n\")\n\targ[0] = arg[0].split(\" \")\n\tvar N = Number(arg[0][0])\n\tvar M = Number(arg[0][1])\n\n\targ.shift()\n\n\tvar p_master = {}\n\n\tfor (var i = 0; i < arg.length; i++) {\n\t\tvar tmp = arg[i].split(\" \").map(e => Number(e))\n\t\targ[i] = tmp\n\n\t\t// p_mastre.push(tmp[0])\n\t\tif (!p_master[tmp[0]]) {\n\t\t\tp_master[tmp[0]] = []\n\t\t}\n\t\tp_master[tmp[0]].push(tmp[1])\n\t}\n\n\tfor (key in p_master) {\n\t\tp_master[key].sort()\n\t}\n\t// console.log(JSON.stringify(p_master))\n\n\tfor (var i = 0; i < arg.length; i++) {\n\t\tvar _p = arg[i][0]\n\n\t\tvar j = 0;\n\t\tfor (var j = 0; j < p_master[_p].length; j++) {\n\t\t\tif (p_master[_p][j] === arg[i][1]) {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tconsole.log(fillZero(6,_p) + fillZero(6, j+1))\n\t}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03337_1", "type": "JavaScript", "obfuscated": "function main(_0x4e7bf2) {\n    const _0x416251 = parseInt(_0x4e7bf2['split']('\\x20')[0x0], 0xa);\n    const _0x28628b = parseInt(_0x4e7bf2['split']('\\x20')[0x1], 0xa);\n    ptnAdd = _0x416251 + _0x28628b;\n    ptnSub = _0x416251 - _0x28628b;\n    ptnMul = _0x416251 * _0x28628b;\n    ans = Math['max']['apply'](null, [\n        ptnAdd,\n        ptnSub,\n        ptnMul\n    ]);\n    console['log'](ans);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 1", "4"], ["4 -2", "6"], ["0 0", "0"]], "original": "function main (input) {\n  const a = parseInt(input.split(' ')[0],10);\n  const b = parseInt(input.split(' ')[1],10);\n\n  ptnAdd = a + b;\n  ptnSub = a - b;\n  ptnMul = a * b;\n\n  ans = Math.max.apply(null,[ptnAdd,ptnSub,ptnMul]);\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03400_1", "type": "JavaScript", "obfuscated": "function Main(_0x3f3d01) {\n    _0x3f3d01 = _0x3f3d01['split']('\\x0a');\n    var _0x5dd97e = Number(_0x3f3d01[0x0]);\n    var _0x55e7a6 = Number(_0x3f3d01[0x1]['split']('\\x20')[0x0]);\n    var _0x482059 = Number(_0x3f3d01[0x1]['split']('\\x20')[0x1]);\n    var _0xdb2df3 = [];\n    for (var _0x50cca5 = 0x0; _0x50cca5 < _0x3f3d01['length'] - 0x2; _0x50cca5++) {\n        _0xdb2df3['push'](Number(_0x3f3d01[_0x50cca5 + 0x2]));\n    }\n    var _0x312805 = [];\n    for (var _0x1a719f = 0x0; _0x1a719f < _0xdb2df3['length']; _0x1a719f++) {\n        for (var _0x2609c4 = 0x1; _0x2609c4 < 0x64; _0x2609c4++) {\n            if (_0x55e7a6 >= _0x2609c4 * _0xdb2df3[_0x1a719f] + 0x1) {\n                _0x312805['push'](_0x2609c4 * _0xdb2df3[_0x1a719f] + 0x1);\n            }\n        }\n    }\n    console['log'](_0x312805['length'] + _0x5dd97e + _0x482059);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n7 1\n2\n5\n10", "8"], ["2\n8 20\n1\n10", "29"], ["5\n30 44\n26\n18\n81\n18\n6", "56"]], "original": "function Main(input) {\ninput = input.split(\"\\n\");\n\nvar n =Number(input[0]);\nvar d =Number(input[1].split(\" \")[0]);\nvar x =Number(input[1].split(\" \")[1]);\nvar array=[];\nfor(var i =0; i<input.length-2; i++){\n    array.push(Number(input[i+2]));\n}\n\nvar total=[]\nfor(var j =0; j<array.length; j++){\n\n    for(var k=1; k<100;k++){\n    if(d>=k*array[j]+1){\n        total.push(k*array[j]+1);\n}\n    }\n}\n\nconsole.log(total.length+n+x);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03470_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x250418) {\n    lines['push'](_0x250418);\n});\nrl['on']('close', function () {\n    var _0x1349eb = Number(lines[0x0]);\n    lines['shift']();\n    var _0x29157a = lines['map'](_0x3630e4 => Number(_0x3630e4));\n    _0x29157a = _0x29157a['filter']((_0xd9c73b, _0x21a980, _0x5d7b63) => {\n        return _0x5d7b63['indexOf'](_0xd9c73b) === _0x21a980;\n    });\n    console['log'](_0x29157a['length']);\n});", "test_cases": [["4\n10\n8\n8\n6", "3"], ["3\n15\n15\n15", "1"], ["7\n50\n30\n50\n100\n50\n80\n30", "4"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]); lines.shift();\n    var D = lines.map(i => Number(i));\n\n    D = D.filter((value, index, array) => {\n        return (array.indexOf(value) === index)\n    })\n\n    console.log(D.length)\n\n});", "language": "JavaScript"}
{"filename": "p03632_1", "type": "JavaScript", "obfuscated": "function Main(_0x30138c) {\n    var _0x271126 = _0x30138c['split']('\\x0a')[0x0]['split']('\\x20')['map'](function (_0x5cf125) {\n        return Number(_0x5cf125);\n    });\n    var _0x58a11a = Math['max'](_0x271126[0x0], _0x271126[0x2]);\n    var _0x4d85e9 = Math['min'](_0x271126[0x1], _0x271126[0x3]);\n    var _0x1ada1c = Math['max'](0x0, _0x4d85e9 - _0x58a11a);\n    console['log'](_0x1ada1c);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["0 75 25 100", "50"], ["0 33 66 99", "0"], ["10 90 20 80", "60"]], "original": "function Main(inp) {\n    var input = inp.split('\\n')[0].split(' ').map(function(n) {\n        return Number(n);\n    });\n    var start = Math.max(input[0], input[2]);\n    var end = Math.min(input[1], input[3]);\n    var overlap = Math.max(0, end - start);\n    console.log(overlap);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03679_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x141acf => {\n    const _0x15065d = _0x141acf['split']('\\x0a')[0x0];\n    const [_0x21050b, _0x514011, _0x1e8b5d] = _0x15065d['split']('\\x20')['map'](_0x3aa218 => Number(_0x3aa218));\n    if (_0x514011 - _0x1e8b5d >= 0x0) {\n        console['log']('delicious');\n    } else if (_0x514011 - _0x1e8b5d < 0x0 && Math['abs'](_0x514011 - _0x1e8b5d) <= _0x21050b) {\n        console['log']('safe');\n    } else {\n        console['log']('dangerous');\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3 6", "safe"], ["6 5 1", "delicious"], ["3 7 12", "dangerous"]], "original": "'use strict'\n\nconst main = (INPUT) => {\n  const input = INPUT.split('\\n')[0]\n  const [X, A, B] = input.split(' ').map(n => Number(n))\n  if (A - B >= 0) {\n    console.log('delicious')\n  } else if (A - B < 0 && Math.abs(A - B) <= X) {\n    console.log('safe')\n  } else {\n    console.log('dangerous')\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03721_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x40aecb) {\n    const _0x5cdcbc = _0x40aecb['trim']()['split']('\\x0a')['map'](_0x1ff332 => _0x1ff332['split']('\\x20')['map'](_0x5c1354 => parseInt(_0x5c1354, 0xa)));\n    const _0x3c51c3 = _0x5cdcbc[0x0][0x1];\n    const _0x4dba84 = _0x5cdcbc['slice'](0x1);\n    let _0x3a4223 = 0x0;\n    let _0x41cad3 = 0x0;\n    while (_0x3a4223 < _0x3c51c3) {\n        _0x3a4223 += _0x4dba84[_0x41cad3][0x1];\n        _0x41cad3++;\n    }\n    console['log'](_0x4dba84[_0x41cad3 - 0x1][0x0]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4\n1 1\n2 2\n3 3", "3"], ["10 500000\n1 100000\n1 100000\n1 100000\n1 100000\n1 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000", "1"]], "original": "\"use strict\";\n\nfunction main(input){\n  const args = input.trim().split('\\n').map(_=>_.split(' ').map(x=>parseInt(x,10)));\n  const k = args[0][1];\n  const arr = args.slice(1);\n  \n  let cnt = 0;\n  let i = 0;\n  while(cnt < k){\n    cnt += arr[i][1];\n    i++;\n  }\n  \n  console.log(arr[i-1][0]);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));  ", "language": "JavaScript"}
{"filename": "p02401_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x38d79d) {\n    var _0x9a4244 = _0x38d79d['split']('\\x0a');\n    var _0xe5a1e8 = '';\n    for (var _0x1ae8c2 = 0x0; _0x1ae8c2 < _0x9a4244['length']; _0x1ae8c2++) {\n        var _0xfd1863 = _0x25a4eb(_0x9a4244[_0x1ae8c2]);\n        if (_0xfd1863 !== ![]) {\n            console['log'](_0xfd1863);\n        }\n    }\n    function _0x25a4eb(_0x2cc7ed) {\n        var _0x342e3b = _0x2cc7ed['split']('\\x20');\n        _0x342e3b[0x0] = Number(_0x342e3b[0x0]);\n        _0x342e3b[0x2] = Number(_0x342e3b[0x2]);\n        if (_0x342e3b[0x1] == '+') {\n            return _0x342e3b[0x0] + _0x342e3b[0x2];\n        } else if (_0x342e3b[0x1] == '-') {\n            return _0x342e3b[0x0] - _0x342e3b[0x2];\n        } else if (_0x342e3b[0x1] == '*') {\n            return _0x342e3b[0x0] * _0x342e3b[0x2];\n        } else if (_0x342e3b[0x1] == '/') {\n            return _0x342e3b[0x0] / _0x342e3b[0x2];\n        } else if (_0x342e3b[0x1] == '?') {\n            return ![];\n        }\n    }\n});", "test_cases": [["1 + 2\n56 - 18\n13 * 2\n100 / 10\n27 + 81\n0 ? 0", "3\n38\n26\n10\n108"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function (chunk) {\n    var input = chunk.split(\"\\n\");\n    var output = \"\";\n    \n    for(var i = 0; i < input.length; i ++){\n        var r = calc(input[i]);\n        if(r !== false){\n            console.log(r);\n        }\n    }\n    \n    function calc(input){\n        var nums = input.split(\" \");\n        nums[0] = Number(nums[0]);\n        nums[2] = Number(nums[2]);\n        if(nums[1] == \"+\"){\n            return nums[0] + nums[2];\n        }\n        else if(nums[1] == \"-\"){\n            return nums[0] - nums[2];\n        }\n        else if(nums[1] == \"*\"){\n            return nums[0] * nums[2];\n        }\n        else if(nums[1] == \"/\"){\n            return nums[0] / nums[2];\n        }\n        else if(nums[1] == \"?\"){\n            return false;\n        }\n        \n    }\n});", "language": "JavaScript"}
{"filename": "p02630_1", "type": "JavaScript", "obfuscated": "function main(_0x36c562) {\n    const [_0x5a272c] = parseNumberLine(_0x36c562[0x0]);\n    const _0x5ee156 = parseNumberLine(_0x36c562[0x1]);\n    const [_0x346d8c] = parseNumberLine(_0x36c562[0x2]);\n    const _0x33d56c = _0x36c562['slice'](0x3);\n    let _0x4c9408 = _0x5ee156['reduce']((_0x35feb1, _0x2e222b) => _0x35feb1 + _0x2e222b, 0x0);\n    for (let _0x391c3c = 0x0; _0x391c3c < _0x346d8c; ++_0x391c3c) {\n        const [_0x410047, _0x28fe79] = parseNumberLine(_0x33d56c[_0x391c3c]);\n        while (!![]) {\n            const _0x2a2a22 = _0x5ee156['indexOf'](_0x410047);\n            if (_0x2a2a22 < 0x0)\n                break;\n            _0x5ee156[_0x2a2a22] = _0x28fe79;\n            _0x4c9408 += _0x28fe79 - _0x410047;\n        }\n        console['log'](_0x4c9408);\n    }\n}\nfunction parseNumberLine(_0x3cb61e, _0x548e9d = 0xa) {\n    return _0x3cb61e['split'](/\\s+/)['map'](_0x41c69d => parseInt(_0x41c69d, _0x548e9d));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["4\n1 2 3 4\n3\n1 2\n3 4\n2 4", "11\n12\n16"], ["4\n1 1 1 1\n3\n1 2\n2 1\n3 5", "8\n4\n4"], ["2\n1 2\n3\n1 100\n2 100\n100 1000", "102\n200\n2000"]], "original": "\nfunction main(lines) {\n    const [N] = parseNumberLine(lines[0])\n    const numbers = parseNumberLine(lines[1])\n    const [Q] = parseNumberLine(lines[2])\n    const operationLines = lines.slice(3)\n\n    let result = numbers.reduce((t, v) => t + v, 0)\n    for (let i = 0; i < Q; ++i) {\n        const [B, C] = parseNumberLine(operationLines[i])\n\n        while (true) {\n            const index = numbers.indexOf(B)\n            if (index < 0) break\n\n            numbers[index] = C\n            result += C - B\n        }\n\n        console.log(result)\n    }\n}\n\nfunction parseNumberLine(line, radix = 10) {\n    return line.split(/\\s+/).map(_ => parseInt(_, radix))\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p02639_1", "type": "JavaScript", "obfuscated": "function main(_0x39928b) {\n    const _0x183aee = _0x39928b['trim']()['split']('\\x20')['map'](_0x4bfd01 => parseInt(_0x4bfd01, 0xa))['findIndex'](_0x362a9e => _0x362a9e === 0x0);\n    console['log'](_0x183aee + 0x1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["0 2 3 4 5", "1"], ["1 2 0 4 5", "3"]], "original": "function main(input) {\n  const idx = input.trim().split(' ').map(el => parseInt(el, 10)).findIndex(el => el === 0)\n  console.log(idx + 1);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02676_1", "type": "JavaScript", "obfuscated": "const main = _0x5278af => {\n    _0x5278af = _0x5278af['trim']()['split']('\\x0a');\n    const _0x5b9793 = _0x5278af[0x0];\n    const _0x242197 = _0x5278af[0x1];\n    if (_0x242197['length'] <= _0x5b9793)\n        console['log'](_0x242197);\n    else\n        console['log'](_0x242197['slice'](0x0, _0x5b9793) + '...');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\nnikoandsolstice", "nikoand..."], ["40\nferelibenterhominesidquodvoluntcredunt", "ferelibenterhominesidquodvoluntcredunt"]], "original": "const main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const k = arg[0]\n    const s = arg[1]\n    if(s.length <= k) console.log(s)\n    else console.log(s.slice(0, k) + '...')\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02701_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x25bfdc => {\n    const _0x594071 = _0x25bfdc['trim']()['split']('\\x0a');\n    const _0x41c9fe = new Set(_0x594071);\n    console['log'](_0x41c9fe['size'] - 0x1);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\napple\norange\napple", "2"], ["5\ngrape\ngrape\ngrape\ngrape\ngrape", "1"], ["4\naaaa\na\naaa\naa", "4"]], "original": "'use strict';\nconst main = arg => {\n  const input = arg.trim().split('\\n');\n\n  const setItems = new Set(input);\n  console.log(setItems.size - 1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02784_1", "type": "JavaScript", "obfuscated": "function main(_0xb19531) {\n    var _0x29391b = _0xb19531['split'](/\\r?\\n/g);\n    var _0x328317 = _0x29391b[0x0]['split']('\\x20');\n    const _0x46c536 = _0x328317[0x0], _0x510a57 = _0x328317[0x1];\n    var _0x922b50 = _0x29391b[0x1]['split']('\\x20')['map'](Number);\n    _0x922b50 = _0x922b50['reduce']((_0x58940a, _0x4206b1) => _0x58940a + _0x4206b1);\n    console['log'](0x1 < Math['ceil'](_0x46c536 / _0x922b50) ? 'No' : 'Yes');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 3\n4 5 6", "Yes"], ["20 3\n4 5 6", "No"], ["210 5\n31 41 59 26 53", "Yes"], ["211 5\n31 41 59 26 53", "No"]], "original": "function main(input) {\n    var line = input.split(/\\r?\\n/g);\n    var arr = line[0].split(\" \");\n    const H = arr[0], N = arr[1];\n    var A = line[1].split(\" \").map(Number);\n    A = A.reduce((A, x) => A + x)\n    console.log(1 < Math.ceil(H / A) ? \"No\" : \"Yes\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02790_1", "type": "JavaScript", "obfuscated": "function Main(_0x3caa11) {\n    var _0x1bcd37 = _0x3caa11['split']('\\x0a')[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x476940 = _0x3caa11['split']('\\x0a')[0x0]['split']('\\x20')[0x1] - 0x0;\n    if (_0x1bcd37 < _0x476940) {\n        console['log'](_0x1bcd37['toString']()['repeat'](_0x476940));\n    } else {\n        console['log'](_0x476940['toString']()['repeat'](_0x1bcd37));\n    }\n    return;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3", "3333"], ["7 7", "7777777"]], "original": "function Main(arg)\n{\n  var a = arg.split(\"\\n\")[0].split(\" \")[0]-0;\n  var b = arg.split(\"\\n\")[0].split(\" \")[1]-0;\n \n  if (a < b) {\n    console.log(a.toString().repeat(b));\n  }\n  else {\n    console.log(b.toString().repeat(a));\n  }\n\n  return;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02791_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x3577de) {\n    _0x3577de = _0x3577de['trim']()['split']('\\x0a');\n    const _0x4cafc7 = Number(_0x3577de[0x0]);\n    const _0x24aa66 = _0x3577de[0x1]['trim']()['split']('\\x20')['map'](Number);\n    let _0x1720d0 = 0x0;\n    for (let _0xd310d7 = 0x1; _0xd310d7 <= _0x4cafc7; _0xd310d7++) {\n        let _0x13a6fb = !![];\n        let _0x4ef35c = _0x24aa66['slice'](0x0, _0xd310d7);\n        let _0x123ca7 = 0x0;\n        while (_0x123ca7 < _0x4ef35c['length'] - 0x1) {\n            if (_0x4ef35c[_0x123ca7] < _0x24aa66[_0xd310d7 - 0x1])\n                _0x13a6fb = ![];\n            _0x123ca7++;\n        }\n        if (_0x13a6fb)\n            _0x1720d0++;\n    }\n    console['log'](_0x1720d0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n4 2 5 1 3", "3"], ["4\n4 3 2 1", "4"], ["6\n1 2 3 4 5 6", "1"], ["8\n5 7 4 2 6 8 1 3", "4"], ["1\n1", "1"]], "original": "\"use strict\"\n \nfunction Main(s) {\n  s = s.trim().split('\\n');\n  const n = Number(s[0]);\n  const p = s[1].trim().split(' ').map(Number);\n \n  let cnt=0;\n  for(let i=1; i<=n; i++){\n    let flg = true;\n \n    let t = p.slice(0, i);\n    let x = 0;\n    while(x < t.length-1) {\n      if(t[x] < p[i-1]) flg=false;\n      x++;\n    }\n \n    if(flg)cnt++;\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02801_1", "type": "JavaScript", "obfuscated": "Main(myin());\nfunction myin() {\n    return require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\n}\nfunction myout(_0x33a3ef) {\n    console['log'](_0x33a3ef);\n}\nfunction myerr(_0x17dc1a) {\n    console['error'](_0x17dc1a);\n}\nfunction myconv(_0x99f289, _0xe0f679) {\n    switch (_0xe0f679) {\n    case 0x1:\n        return parseInt(_0x99f289);\n    case 0x2:\n        return _0x99f289['split']('\\x20');\n    case 0x3:\n        return _0x99f289['split']('\\x0a');\n    case 0x4:\n        return _0x99f289['split']('\\x20')['map'](_0x29582e => Number(_0x29582e));\n    case 0x5:\n        return _0x99f289['split']('\\x0a')['map'](_0x1f3c0b => Number(_0x1f3c0b));\n    case 0x6:\n        return _0x99f289['split']('');\n    case 0x7:\n        return _0x99f289['split']('')['map'](_0x13d2c7 => Number(_0x13d2c7));\n    case 0x8:\n        return _0x99f289['join']('\\x20');\n    case 0x9:\n        return _0x99f289['join']('\\x0a');\n    case 0x0:\n        return _0x99f289['join']('');\n    default:\n        return _0x99f289;\n    }\n}\nfunction Main(_0x9c5d36) {\n    _0x9c5d36 = myconv(_0x9c5d36, null);\n    var _0x425d6a = 'abcdefghijklmnopqrstivwxyz'['split']('');\n    myout(_0x425d6a[_0x425d6a['indexOf'](_0x9c5d36) + 0x1]);\n}", "test_cases": [["a", "b"], ["y", "z"]], "original": "Main(myin());\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\nfunction myerr(t){console.error(t);}//standard error\n//[no]param\n//不明値:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\n//8:半角SPで結合　9:改行で結合　0:文字なしで結合\nfunction myconv(i,no){switch(no){case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));case 8:return i.join(\" \");case 9:return i.join(\"\\n\");case 0:return i.join(\"\");default:return i;}}\nfunction Main(input) {\n  input = myconv(input,null);\n  var list = \"abcdefghijklmnopqrstivwxyz\".split(\"\");\n  myout(list[list.indexOf(input)+1]);\n}", "language": "JavaScript"}
{"filename": "p02912_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst arg_str = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nconst args_lines = arg_str['split']('\\x0a');\nconst n_m = args_lines[0x0]['split']('\\x20');\nconst N = n_m[0x0];\nconst M = n_m[0x1];\nlet A_array = args_lines[0x1]['split']('\\x20');\nA_array = A_array['map'](_0x2a48b9 => parseInt(_0x2a48b9));\nfor (let i = 0x0; i < M; i++) {\n    const max_value = Math['max']['apply'](null, A_array);\n    const max_index = A_array['indexOf'](max_value);\n    A_array[max_index] = A_array[max_index] / 0x2;\n}\nconst result = A_array['map'](_0x2b7603 => Math['floor'](_0x2b7603))['reduce']((_0x18b9f5, _0x235e31) => _0x18b9f5 += _0x235e31, 0x0);\nconsole['log'](result);", "test_cases": [["3 3\n2 13 8", "9"], ["4 4\n1 9 3 5", "6"], ["1 100000\n1000000000", "0"], ["10 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "9500000000"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args_lines = arg_str.split('\\n')\nconst n_m = args_lines[0].split(' ')\nconst N = n_m[0]\nconst M = n_m[1]\nlet A_array = args_lines[1].split(' ')\nA_array = A_array.map(x=>parseInt(x))\n\nfor(let i=0;i<M;i++){\n  const max_value = Math.max.apply(null,A_array)\n    const max_index = A_array.indexOf(max_value)\n\n    A_array[max_index] = A_array[max_index] / 2\n}\n\nconst result = A_array.map(x=>Math.floor(x)).reduce((a,x) => a+=x,0)\nconsole.log(result)\n", "language": "JavaScript"}
{"filename": "p02915_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0xf25146(_0x1537d0) {\n        return new _0x4ffca1(_0x1537d0);\n    }\n    function _0x4ffca1(_0x5e6883) {\n        this['_s'] = _0x5e6883['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0x4ffca1['prototype']['a'] = function (_0x299a19) {\n        var _0x38a5fa = this['_s'], _0xb1d9a6 = this['_y'], _0x29ac5e;\n        if (typeof _0x38a5fa[_0xb1d9a6] === 'string')\n            _0x38a5fa[_0xb1d9a6] = _0x38a5fa[_0xb1d9a6]['split']('\\x20')['reverse']();\n        _0x29ac5e = _0x38a5fa[_0xb1d9a6]['pop']();\n        if (!_0x38a5fa[_0xb1d9a6]['length'])\n            this['_y']++;\n        return _0x299a19 ? _0x29ac5e : +_0x29ac5e;\n    };\n    _0x4ffca1['prototype']['l'] = function (_0xf31d96) {\n        var _0x566a9b = this['_s'][this['_y']++]['split']('\\x20');\n        return _0xf31d96 ? _0x566a9b : _0x566a9b['map'](_0x288ab7 => +_0x288ab7);\n    };\n    _0x4ffca1['prototype']['m'] = function (_0x1af426, _0x199efa) {\n        var _0x1fd092 = this['_s']['slice'](this['_y'], this['_y'] += _0x1af426)['map'](_0x55d93d => _0x55d93d['split']('\\x20'));\n        return _0x199efa ? _0x1fd092 : _0x1fd092['map'](_0x5cec72 => _0x5cec72['map'](_0x1cc81e => +_0x1cc81e));\n    };\n    _0x4ffca1['prototype']['r'] = function (_0x38274c, _0xfa0695) {\n        var _0x89eca9 = this['_s']['slice'](this['_y'], this['_y'] += _0x38274c);\n        return _0xfa0695 ? _0x89eca9 : _0x89eca9['map'](_0x584fa5 => +_0x584fa5);\n    };\n    return _0xf25146;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction xArray(_0x35d263) {\n    var _0x41c7cd = arguments, _0x581159 = _0x41c7cd['length'], _0xc98ba4 = 'Array(a[' + --_0x581159 + ']).fill(0).map(x=>{return\\x20' + _0x35d263 + ';})';\n    while (--_0x581159)\n        _0xc98ba4 = 'Array(a[' + _0x581159 + ']).fill(0).map(x=>' + _0xc98ba4 + ')';\n    return eval(_0xc98ba4);\n}\nconsole['log'](main());\nfunction main() {\n    var _0x2c4622 = o['a']();\n    return _0x2c4622 * _0x2c4622 * _0x2c4622;\n}", "test_cases": [["2", "8"], ["1", "1"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill(0).map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill(0).map(x=>\"+r+\")\";return eval(r);}\n\nconsole.log(main());\nfunction main(){\n  var n=o.a();\n  return n*n*n;\n}", "language": "JavaScript"}
{"filename": "p02935_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x25191a => {\n    lines['push'](_0x25191a);\n});\nreader['on']('close', () => {\n    var _0x2644fe = Number(lines[0x0]);\n    var _0x1ffb53 = lines[0x1]['split']('\\x20');\n    _0x1ffb53 = _0x1ffb53['map'](function (_0x12c90a) {\n        return Number(_0x12c90a);\n    });\n    for (i = 0x0; i < _0x2644fe - 0x1; i++) {\n        var _0x1009cb = _0x1ffb53['sort']((_0x47ce62, _0x36324d) => _0x47ce62 - _0x36324d)[0x0];\n        _0x1ffb53['splice'](0x0, 0x1);\n        var _0xef6c92 = _0x1ffb53[0x0];\n        _0x1ffb53['splice'](0x0, 0x1);\n        var _0x3d8d43 = (_0x1009cb + _0xef6c92) / 0x2;\n        if (_0x1ffb53['length'] == 0x0) {\n            break;\n        }\n        _0x1ffb53['push'](_0x3d8d43);\n    }\n    console['log'](_0x3d8d43);\n});", "test_cases": [["2\n3 4", "3.5"], ["3\n500 300 200", "375"], ["5\n138 138 138 138 138", "138"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = []\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on('line', (line) => {\n  lines.push(line);\n});\n\nreader.on('close', () => {\n var n = Number(lines[0]);\n var v = lines[1].split(' ');\n v = v.map(function(str) { return Number(str)});\n\n for(i=0; i<n-1; i++){\n   var min1 = v.sort((a, b)=> a - b)[0];\n   v.splice(0,1);\n   var min2 = v[0];\n   v.splice(0,1);\n   var a = (min1 + min2)/2;\n   if(v.length == 0){\n     break;\n   }\n   v.push(a);\n }\n console.log(a);\n});", "language": "JavaScript"}
{"filename": "p02993_1", "type": "JavaScript", "obfuscated": "function Main(_0x5780da) {\n    _0x5780da = _0x5780da['split']('\\x20');\n    var _0x1e714e = _0x5780da;\n    var _0x1cabc4 = _0x1e714e;\n    var _0x5bacb6 = String(_0x1e714e)['split']('');\n    var _0x4a6f1f = parseInt(_0x5bacb6[0x0], 0xa);\n    var _0x345b3e = parseInt(_0x5bacb6[0x1], 0xa);\n    var _0x41e826 = parseInt(_0x5bacb6[0x2], 0xa);\n    var _0x572a05 = parseInt(_0x5bacb6[0x3], 0xa);\n    if (_0x4a6f1f == _0x345b3e) {\n        console['log']('Bad');\n    } else if (_0x345b3e == _0x41e826) {\n        console['log']('Bad');\n    } else if (_0x41e826 == _0x572a05) {\n        console['log']('Bad');\n    } else {\n        console['log']('Good');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3776", "Bad"], ["8080", "Good"], ["1333", "Bad"], ["0024", "Bad"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t\tinput = input.split(\" \");\n\t\t\n\t\tvar tem = input;\n \n  \n\t\n\t//文字列から10進数に変換するときはparseIntを使います\n\t //   var tem = parseInt(input[0], 10);\n  \n  // 分割する数値\nvar beforeText = tem;\n// 数値を文字列に変換して、一文字ずつ分割\nvar arr = String(tem).split('');\n\nvar a = parseInt(arr[0], 10);\nvar b = parseInt(arr[1], 10);\nvar c = parseInt(arr[2], 10);\nvar d = parseInt(arr[3], 10);\n\n//console.log(arr); \n//console.log(a,b,c,d); \n\nif (a == b){console.log('Bad');}\n      else if (b == c){console.log('Bad');}\n             else if (c == d){console.log('Bad');}\n                             else {console.log('Good');}\n                             \n                      \n                             \n        \n\n\n  \n   \t   }    //    1    \n     \n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03011_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x35579c) {\n    const _0x39eaa0 = Number(_0x35579c['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    const _0x44ed18 = Number(_0x35579c['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    const _0x123a03 = Number(_0x35579c['split']('\\x0a')[0x0]['split']('\\x20')[0x2]);\n    const _0x48e9aa = Math['max'](_0x39eaa0, _0x44ed18, _0x123a03);\n    console['log'](_0x39eaa0 + _0x44ed18 + _0x123a03 - _0x48e9aa);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["1 3 4", "4"], ["3 2 3", "5"]], "original": "'use strict'\n\nfunction Main(input) {\n  const P = Number(input.split(\"\\n\")[0].split(\" \")[0])\n  const Q = Number(input.split(\"\\n\")[0].split(\" \")[1])\n  const R = Number(input.split(\"\\n\")[0].split(\" \")[2])\n\n  const max = Math.max(P, Q, R)\n  console.log(P + Q + R - max)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim())\n", "language": "JavaScript"}
{"filename": "p03077_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1eb717) {\n    const _0x75aa5b = _0x1eb717['split']('\\x0a');\n    const _0x51a62a = parseInt(_0x75aa5b[0x0]);\n    const _0x3e788d = parseInt(_0x75aa5b[0x1]);\n    const _0x26a919 = parseInt(_0x75aa5b[0x2]);\n    const _0x2ad3e3 = parseInt(_0x75aa5b[0x3]);\n    const _0x28b5e5 = parseInt(_0x75aa5b[0x4]);\n    const _0x39ffbf = parseInt(_0x75aa5b[0x5]);\n    const _0x1512b8 = [\n        _0x3e788d,\n        _0x26a919,\n        _0x2ad3e3,\n        _0x28b5e5,\n        _0x39ffbf\n    ];\n    let _0x3688e9 = Math['min'](..._0x1512b8);\n    console['log'](Math['ceil'](_0x51a62a / _0x3688e9) + 0x4);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n3\n2\n4\n3\n5", "7"], ["10\n123\n123\n123\n123\n123", "5"], ["10000000007\n2\n3\n5\n7\n11", "5000000008"]], "original": "\"use strict\";\nfunction main(input) {\n    const args = input.split('\\n');\n\n    const N = parseInt(args[0]);\n    const A = parseInt(args[1]);\n    const B = parseInt(args[2]);\n    const C = parseInt(args[3]);\n    const D = parseInt(args[4]);\n    const E = parseInt(args[5]);\n\n    const station = [A, B, C, D, E];\n    let max_traf = Math.min(...station);\n    console.log(Math.ceil(N / max_traf) + 4);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03086_1", "type": "JavaScript", "obfuscated": "input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlines = input['split']('\\x0a');\nS = lines['shift']();\nmax = 0x0;\ncnt = 0x0;\nfor (i = 0x0; i < S['length']; i++) {\n    if (/[AGCT]/['test'](S[i])) {\n        cnt++;\n    } else {\n        if (max < cnt) {\n            max = cnt;\n        }\n        cnt = 0x0;\n    }\n}\nconsole['log'](max);", "test_cases": [["ATCODER", "3"], ["HATAGAYA", "5"], ["SHINJUKU", "0"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nS = lines.shift()\nmax = 0\ncnt = 0\nfor(i=0;i < S.length; i++) {\n    if (/[AGCT]/.test(S[i])) {\n       cnt++ \n    } else {\n        if (max < cnt) {\n            max = cnt\n        }\n        cnt = 0\n    }\n}\nconsole.log(max)", "language": "JavaScript"}
{"filename": "p03107_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x5c8b99) {\n    _0x5c8b99 = _0x5c8b99['trim']();\n    _0x5c8b99 = _0x5c8b99['replace'](/\\s+/, '')['split']('');\n    var _0x38951e = _0x5c8b99['length'];\n    var _0x451d8e = 0x0;\n    var _0x297cc4 = 0x0;\n    while (_0x5c8b99['length']) {\n        if (_0x5c8b99['pop']() === '0')\n            _0x297cc4++;\n        else\n            _0x451d8e++;\n    }\n    console['log'](Math['min'](_0x297cc4, _0x451d8e) * 0x2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["0011", "4"], ["11011010001011", "12"], ["0", "0"]], "original": "\"use strict\"\nfunction Main(input){\n  input=input.trim();\n  input=input.replace(/\\s+/,\"\").split(\"\");\n  var height=input.length;\n  var one=0;\n  var zero=0;\n  while(input.length){\n    if(input.pop()===\"0\")zero++;\n    else one++;\n  }\n  console.log(Math.min(zero,one)*2);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03126_1", "type": "JavaScript", "obfuscated": "function Main(_0x591b58) {\n    _0x591b58 = _0x591b58['split']('\\x0a');\n    var _0x806286 = _0x591b58[0x0]['split']('\\x20')['map'](Number);\n    _0x591b58['shift']();\n    var _0x190aee = new Array(0x23)['fill'](0x0);\n    _0x591b58['forEach'](function (_0x446ad1) {\n        var _0x1ca811 = _0x446ad1['split']('\\x20')['map'](Number);\n        _0x1ca811['shift']();\n        _0x1ca811['forEach'](function (_0x33aa0e) {\n            _0x190aee[_0x33aa0e]++;\n        });\n    });\n    var _0x3bf5b5 = 0x0;\n    _0x190aee['forEach'](function (_0x4110e1) {\n        if (_0x4110e1 == _0x806286[0x0])\n            _0x3bf5b5++;\n    });\n    console['log'](_0x3bf5b5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3 4\n2 1 3\n3 1 2 3\n2 3 2", "1"], ["5 5\n4 2 3 4 5\n4 1 3 4 5\n4 1 2 4 5\n4 1 2 3 5\n4 1 2 3 4", "0"], ["1 30\n3 5 10 30", "3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var m = input[0].split(\" \").map(Number);\n    input.shift();\n    var arr = new Array(35).fill(0);\n    input.forEach(function(val){\n        var mem = val.split(\" \").map(Number);\n        mem.shift();\n        mem.forEach(function(p){\n            arr[p]++;\n        });\n    })\n    var ans = 0;\n    arr.forEach(function(val){\n      if(val==m[0]) ans++;  \n    })\n    console.log(ans);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03207_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x15dcef => {\n    const _0x30fcb8 = _0x15dcef['split']('\\x0a')['map'](_0x2566ff => _0x2566ff['split']('\\x20'));\n    const _0x4e16d9 = parseInt(_0x30fcb8[0x0][0x0], 0xa);\n    const _0x3f617d = _0x30fcb8['slice'](0x1, _0x4e16d9 + 0x1)['map'](_0x5a641a => parseInt(_0x5a641a[0x0], 0xa))['sort']((_0x16c1a6, _0x5102d7) => _0x5102d7 - _0x16c1a6);\n    let _0x182696 = _0x3f617d[0x0] / 0x2;\n    for (let _0x208926 = 0x1; _0x208926 < _0x4e16d9; _0x208926++) {\n        _0x182696 += _0x3f617d[_0x208926];\n    }\n    console['log'](_0x182696);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n4980\n7980\n6980", "15950"], ["4\n4320\n4320\n4320\n4320", "15120"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst N = parseInt(args[0][0], 10)\n\tconst p = args.slice(1, N + 1).map(arg => parseInt(arg[0], 10)).sort((a, b) => b - a)\n\tlet sum = p[0] / 2\n\n\tfor (let i = 1; i < N; i++) {\n\t\tsum += p[i]\n\t}\n\n\tconsole.log(sum)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03220_1", "type": "JavaScript", "obfuscated": "var toInt = _0x43ad97 => parseInt(_0x43ad97, 0xa);\nvar toIntArr = _0x196c67 => _0x196c67['map'](_0x31a478 => toInt(_0x31a478));\nvar abs = _0x5a71a4 => _0x5a71a4 > 0x0 ? _0x5a71a4 : -_0x5a71a4;\nfunction min() {\n    var _0x2329bb = arguments, _0x4cfffa = _0x2329bb[0x0];\n    for (var _0x3587a9 = 0x1; _0x3587a9 < _0x2329bb['length']; _0x3587a9++)\n        if (_0x2329bb[_0x3587a9] < _0x4cfffa)\n            _0x4cfffa = _0x2329bb[_0x3587a9];\n    return _0x4cfffa;\n}\nfunction max() {\n    var _0x269946 = arguments, _0x1a30c3 = _0x269946[0x0];\n    for (var _0x4b46d6 = 0x1; _0x4b46d6 < _0x269946['length']; _0x4b46d6++)\n        if (_0x269946[_0x4b46d6] > _0x1a30c3)\n            _0x1a30c3 = _0x269946[_0x4b46d6];\n    return _0x1a30c3;\n}\nfunction gcd() {\n    var _0x111f1e = arguments, _0x51dead = _0x111f1e[0x0], _0x1242af = (_0x45d9db, _0x9a222b) => _0x9a222b ? _0x1242af(_0x9a222b, _0x45d9db % _0x9a222b) : _0x45d9db;\n    for (var _0x247845 = 0x1; _0x247845 < _0x111f1e['length']; _0x247845++)\n        _0x51dead = _0x1242af(_0x51dead, _0x111f1e[_0x247845]);\n    return _0x51dead;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x58b9f0) {\n    var _0x58b9f0 = _0x58b9f0['split']('\\x0a');\n    var _0x9ea094 = toInt(_0x58b9f0[0x0]);\n    var _0x1ade06 = toIntArr(_0x58b9f0[0x1]['split']('\\x20'));\n    var _0x2d9bd3 = toIntArr(_0x58b9f0[0x2]['split']('\\x20'));\n    var _0x5adace = _0x1ade06[0x0];\n    var _0x395d68 = _0x1ade06[0x1];\n    var _0x1ed39b = 0x1;\n    var _0x4ec53e = abs(_0x5adace - _0x395d68 - 0.006 * _0x2d9bd3[0x0]), _0x52e369;\n    for (var _0x31634f = 0x1; _0x31634f < _0x9ea094; _0x31634f++) {\n        _0x52e369 = abs(_0x5adace - _0x395d68 - 0.006 * _0x2d9bd3[_0x31634f]);\n        if (_0x52e369 < _0x4ec53e) {\n            _0x1ed39b = _0x31634f + 0x1;\n            _0x4ec53e = _0x52e369;\n        }\n    }\n    console['log'](_0x1ed39b);\n}", "test_cases": [["2\n12 5\n1000 2000", "1"], ["3\n21 -11\n81234 94124 52141", "3"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest=arguments,v=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<v)v=rest[i];return v}\nfunction max(){var rest=arguments,v=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>v)v=rest[i];return v}\nfunction gcd(){var rest=arguments,v=rest[0],temp=(a,b)=>b?temp(b,a%b):a;for(var i=1;i<rest.length;i++)v=temp(v,rest[i]);return v}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar ta = toIntArr(input[1].split(' '));\n\tvar hs = toIntArr(input[2].split(' '));\n\tvar t = ta[0];\n\tvar a = ta[1];\n\n\tvar ans = 1;\n\tvar x =abs(t-a-0.006*hs[0]) ,y;\n\tfor(var i = 1; i < n; i++){\n\t\ty = abs(t-a-0.006*hs[i]);\n\t\t//console.log(i,x,y)\n\t\tif(y<x){\n\t\t\tans = i+1;\n\t\t\tx = y;\n\t\t}\n\t}\n\n\tconsole.log(ans);\n\n}\n\n", "language": "JavaScript"}
{"filename": "p03309_1", "type": "JavaScript", "obfuscated": "function myin() {\n    return require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\n}\nfunction myout(_0x1dd776) {\n    console['log'](_0x1dd776);\n}\nfunction myconv(_0x3df57f, _0x20cf09) {\n    switch (_0x20cf09) {\n    case 0x0:\n        return _0x3df57f;\n    case 0x1:\n        return parseInt(_0x3df57f);\n    case 0x2:\n        return _0x3df57f['split']('\\x20');\n    case 0x3:\n        return _0x3df57f['split']('\\x0a');\n    case 0x4:\n        return _0x3df57f['split']('\\x20')['map'](_0x2fd280 => Number(_0x2fd280));\n    case 0x5:\n        return _0x3df57f['split']('\\x0a')['map'](_0x5ab54a => Number(_0x5ab54a));\n    case 0x6:\n        return _0x3df57f['split']('');\n    case 0x7:\n        return _0x3df57f['split']('')['map'](_0x5307a8 => Number(_0x5307a8));\n    }\n}\nfunction Main(_0x515af4) {\n    _0x515af4 = myconv(_0x515af4, 0x3);\n    var _0xcd96dd = myconv(_0x515af4[0x0], 0x1);\n    var _0x47d94c = myconv(_0x515af4[0x1], 0x4);\n    var _0x51393d = [];\n    for (var _0x1242cf = 0x0; _0x1242cf < _0xcd96dd; _0x1242cf++) {\n        _0x51393d['push'](_0x47d94c[_0x1242cf] - (_0x1242cf + 0x1));\n    }\n    _0x51393d['sort'](function (_0xd5eac, _0x4c671d) {\n        return _0xd5eac - _0x4c671d;\n    });\n    var _0x51c75e = _0x51393d[myconv(_0x51393d['length'] / 0x2, 0x1)];\n    var _0x28aa04 = 0x0;\n    for (var _0x1242cf = 0x0; _0x1242cf < _0xcd96dd; _0x1242cf++) {\n        _0x28aa04 += Math['abs'](_0x47d94c[_0x1242cf] - (_0x51c75e + (_0x1242cf + 0x1)));\n    }\n    myout(_0x28aa04);\n}\nMain(myin());", "test_cases": [["5\n2 2 3 5 5", "2"], ["9\n1 2 3 4 5 6 7 8 9", "0"], ["6\n6 5 4 3 2 1", "18"], ["7\n1 1 1 1 2 3 4", "6"]], "original": "function myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  var N = myconv(input[0],1);\n  var list = myconv(input[1],4);\n  \n  var tmpList = [];\n  for(var i = 0; i < N; i++){\n    tmpList.push(list[i] - (i + 1));\n  }\n  \n  tmpList.sort(function(a,b){\n  \treturn a-b;\n  });\n  \n  var b = tmpList[myconv(tmpList.length / 2,1)];\n  var output = 0;\n  for(var i = 0; i < N; i++){\n    output += Math.abs(list[i] - (b + (i + 1)));\n  }\n  myout(output);\n}\n\nMain(myin());\n", "language": "JavaScript"}
{"filename": "p03719_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x380d0e => {\n    const _0x1a06e8 = _0x380d0e['trim']()['split']('\\x20');\n    const _0x12cfe3 = parseInt(_0x1a06e8[0x0], 0xa);\n    const _0x542830 = parseInt(_0x1a06e8[0x1], 0xa);\n    const _0x4e34c2 = parseInt(_0x1a06e8[0x2], 0xa);\n    if (_0x4e34c2 >= _0x12cfe3 && _0x4e34c2 <= _0x542830)\n        console['log']('Yes');\n    else\n        console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 3 2", "Yes"], ["6 5 4", "No"], ["2 2 2", "Yes"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.trim().split(' ')\n\tconst a = parseInt(args[0], 10)\n\tconst b = parseInt(args[1], 10)\n\tconst c = parseInt(args[2], 10)\n\tif (c >= a && c <= b) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03852_1", "type": "JavaScript", "obfuscated": "function Main(_0x44b86b) {\n    c = _0x44b86b;\n    const _0x3724b4 = 'aeiou';\n    console['log'](_0x3724b4['indexOf'](c) !== -0x1 ? 'vowel' : 'consonant');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["a", "vowel"], ["z", "consonant"], ["s", "consonant"]], "original": "function Main(input) {\n\tc = input;\n\tconst vowel = 'aeiou';\n  \tconsole.log(vowel.indexOf(c)!==-1 ? \"vowel\" : \"consonant\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02573_1", "type": "JavaScript", "obfuscated": "const processData = _0x3948f1 => {\n    const [_0xd4f4a6, _0x51818d] = _0x3948f1[0x0]['split']('\\x20')['map'](_0x321415 => +_0x321415);\n    let _0x24796f = {};\n    for (let _0x57859f = 0x0; _0x57859f < _0x51818d; _0x57859f++) {\n        const _0x923f26 = _0x3948f1[_0x57859f + 0x1]['split']('\\x20')['map'](_0x581e31 => +_0x581e31);\n        let _0x2ebd20 = _0x24796f[_0x923f26[0x0]] || _0x24796f[_0x923f26[0x1]] || {};\n        _0x24796f[_0x923f26[0x0]] = _0x2ebd20;\n        _0x24796f[_0x923f26[0x1]] = _0x2ebd20;\n        _0x2ebd20[_0x923f26[0x0]] = !![];\n        _0x2ebd20[_0x923f26[0x1]] = !![];\n    }\n    let _0x18678c = 0x1;\n    for (let _0x13776d in _0x24796f) {\n        let _0x7b5171 = 0x0;\n        for (let _0x5e5a24 in _0x24796f[_0x13776d]) {\n            _0x7b5171++;\n        }\n        _0x18678c = Math['max'](_0x18678c, _0x7b5171);\n    }\n    console['log'](_0x18678c);\n};\nlet i = '';\nprocess['stdin']['on']('data', _0x20584a => i += _0x20584a);\nprocess['stdin']['on']('end', () => {\n    const {EOL: _0x2deb20} = require('os');\n    const _0x1e1ab1 = i['split'](_0x2deb20);\n    processData(_0x1e1ab1);\n});", "test_cases": [["5 3\n1 2\n3 4\n5 1", "3"], ["4 10\n1 2\n2 1\n1 2\n2 1\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4", "4"], ["10 4\n3 1\n4 1\n5 9\n2 6", "3"]], "original": "const processData = (lines) => {\n    const [n, m] = lines[0].split(' ').map( x => +x)\n    let friendships = {}\n    for (let i=0; i<m; i++) {\n        const f = lines[i+1].split(' ').map(x => +x)\n        let friendItem = friendships[f[0]] || friendships[f[1]] || {}\n        friendships[f[0]] = friendItem\n        friendships[f[1]] = friendItem\n\n        friendItem[f[0]] = true\n        friendItem[f[1]] = true\n    }\n    \n    let maxCount = 1\n    for (let p in friendships) {\n        let count = 0\n        for (let t2 in friendships[p]) {\n            count++\n        }\n        maxCount = Math.max(maxCount, count)\n    }\n\n    console.log(maxCount)\n}\n\nlet i = ''\nprocess.stdin.on('data', c => i += c)\nprocess.stdin.on('end', () => {\n    const {EOL} = require('os')\n    const lines = i.split(EOL) /*your input text, split by lines*/\n    processData(lines)\n})\n", "language": "JavaScript"}
{"filename": "p02594_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x33789e => {\n    _0x33789e = _0x33789e['trim']()['split']('\\x0a');\n    const _0x2d4967 = parseInt(_0x33789e[0x0]['split']('\\x20')[0x0]);\n    console['log'](_0x2d4967 >= 0x1e ? 'Yes' : 'No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["25", "No"], ["30", "Yes"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n\n    console.log(N >= 30 ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02601_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5907ff) {\n    _0x5907ff = _0x5907ff['trim']()['split']('\\x0a');\n    const _0x2ebcbc = _0x5907ff[0x0]['split']('\\x20');\n    const _0x3b03e4 = parseInt(_0x5907ff[0x1]);\n    let _0x1398b4 = [];\n    for (let _0x4d8ebd in _0x2ebcbc) {\n        _0x1398b4['push'](parseInt(_0x2ebcbc[_0x4d8ebd]));\n    }\n    for (let _0x44bb43 = 0x0; _0x44bb43 < _0x3b03e4; _0x44bb43++) {\n        if (_0x1398b4[0x0] >= _0x1398b4[0x1]) {\n            _0x1398b4[0x1] = _0x1398b4[0x1] * 0x2;\n            continue;\n        }\n        if (_0x1398b4[0x1] >= _0x1398b4[0x2]) {\n            _0x1398b4[0x2] = _0x1398b4[0x2] * 0x2;\n        }\n    }\n    if (_0x1398b4[0x0] < _0x1398b4[0x1] && _0x1398b4[0x1] < _0x1398b4[0x2]) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nfunction numberSort(_0x4d4227) {\n    _0x4d4227['sort'](f);\n    return _0x4d4227;\n}\nvar f = function (_0x544fcc, _0x5755e7) {\n    return _0x544fcc - _0x5755e7;\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["7 2 5\n3", "Yes"], ["7 4 2\n3", "No"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const line_one = input[0].split(\" \");\n  const K = parseInt(input[1]);\n  let line_one_arr = [];\n\n  for (let i in line_one) {\n    line_one_arr.push(parseInt(line_one[i]));\n  }\n\n  for (let i = 0; i < K; i++) {\n    if (line_one_arr[0] >= line_one_arr[1]) {\n      line_one_arr[1] = line_one_arr[1] * 2;\n      continue;\n    }\n    if (line_one_arr[1] >= line_one_arr[2]) {\n      line_one_arr[2] = line_one_arr[2] * 2;\n    }\n  }\n\n  if (line_one_arr[0] < line_one_arr[1] && line_one_arr[1] < line_one_arr[2]) {\n    console.log(\"Yes\");\n  } else {\n    console.log(\"No\");\n  }\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript"}
{"filename": "p02647_1", "type": "JavaScript", "obfuscated": "function Main(_0x5829e8) {\n    _0x5829e8 = _0x5829e8['split']('\\x0a');\n    var _0x24c593 = _0x5829e8[0x0]['split']('\\x20');\n    var _0x3b3574 = _0x5829e8[0x1]['split']('\\x20')['map'](Number);\n    for (var _0x100cc1 = 0x0; _0x100cc1 < _0x24c593[0x1]; _0x100cc1++) {\n        var _0x252f9d = new Array(_0x3b3574['length'])['fill'](0x0);\n        for (var _0x377d7d = 0x0; _0x377d7d < _0x3b3574['length']; _0x377d7d++) {\n            var _0x535a12 = _0x3b3574[_0x377d7d];\n            var _0x17b5dd = _0x377d7d - _0x535a12;\n            var _0x907185 = _0x377d7d + _0x535a12;\n            if (_0x17b5dd < 0x0)\n                _0x17b5dd = 0x0;\n            if (_0x907185 > _0x3b3574['length'] - 0x1)\n                _0x907185 = _0x3b3574['length'] - 0x1;\n            for (var _0x13ed3f = _0x17b5dd; _0x13ed3f <= _0x907185; _0x13ed3f++) {\n                _0x252f9d[_0x13ed3f]++;\n            }\n        }\n        var _0x5da4a8 = !![];\n        for (var _0x377d7d = 0x0; _0x377d7d < _0x3b3574['length']; _0x377d7d++) {\n            if (_0x3b3574[_0x377d7d] != _0x252f9d[_0x377d7d])\n                _0x5da4a8 = ![];\n            _0x3b3574[_0x377d7d] = _0x252f9d[_0x377d7d];\n        }\n        if (_0x5da4a8)\n            break;\n    }\n    console['log'](_0x3b3574['join']('\\x20'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["5 1\n1 0 0 1 0", "1 2 2 1 2"], ["5 2\n1 0 0 1 0", "3 3 4 4 3"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var mem = input[0].split(\" \");\n    var arr = input[1].split(\" \").map(Number);\n    for(var p=0;p<mem[1];p++){\n        var tmp = new Array(arr.length).fill(0);\n        for (var i = 0; i < arr.length; i++) {\n            var n = arr[i];\n          //  console.log(i,n)\n            var min = i - n;\n            var max = i + n;\n            if (min < 0) min = 0;\n            if (max > arr.length-1) max = arr.length-1;\n            for (var j = min; j <= max; j++) {\n                tmp[j]++;\n            }\n          //  console.log(max,min,tmp)\n        }\n      //  console.log(arr)\n        var flag = true;\n      //  console.log(arr.length)\n        for (var i = 0; i < arr.length; i++) {\n            if(arr[i]!=tmp[i]) flag = false;\n            arr[i] = tmp[i];\n        }\n     //   console.log(arr.join(\" \"));\n        if(flag) break;\n    }\n    console.log(arr.join(\" \"));\n} Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p02681_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x31bc75 => {\n    const _0x4aef74 = _0x31bc75['trim']()['split']('\\x0a');\n    const _0x421b76 = _0x4aef74[0x0];\n    const _0x5af60d = _0x4aef74[0x1];\n    let _0x336121 = 'Yes';\n    const _0x24961a = _0x5af60d['replace'](_0x421b76, '');\n    if (_0x5af60d['slice'](-0x1) === _0x24961a && _0x24961a['length'] === 0x1) {\n        _0x336121 = 'Yes';\n    } else {\n        _0x336121 = 'No';\n    }\n    console['log'](_0x336121);\n    return _0x336121;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["chokudai\nchokudaiz", "Yes"], ["snuke\nsnekee", "No"], ["a\naa", "Yes"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const S = tmp[0]\n  const T = tmp[1]\n\n  let result = 'Yes'\n\n  const tmpStr = T.replace(S, '')\n\n  if (T.slice(-1) === tmpStr && tmpStr.length === 1) {\n    result = 'Yes'\n  } else {\n    result = 'No'\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02761_1", "type": "JavaScript", "obfuscated": "function Main(_0x3b5256) {\n    _0x3b5256 = _0x3b5256['split']('\\x0a');\n    tmp = _0x3b5256['shift']();\n    N = parseInt(tmp['split']('\\x20')[0x0]);\n    M = tmp['split']('\\x20')[0x1];\n    S = _0x3b5256;\n    A = 'n'['repeat'](N)['split']('');\n    flag = !![];\n    S['forEach'](_0x346546 => {\n        t = _0x346546['split']('\\x20')['map'](_0x106e6f => parseInt(_0x106e6f));\n        if (A[t[0x0] - 0x1] != 'n' && A[t[0x0] - 0x1] != t[0x1])\n            flag = ![];\n        A[t[0x0] - 0x1] = t[0x1];\n    });\n    A = A['join']('');\n    A = A['replace'](/^nn([0-9])/, '10$1');\n    A = A['replace'](/^n([0-9])/, '1$1');\n    A = A['replace'](/n/g, '0');\n    A = parseInt(A);\n    if (flag && (A + '')['length'] == N) {\n        console['log'](A);\n    } else {\n        console['log'](-0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n1 7\n3 2\n1 7", "702"], ["3 2\n2 1\n2 3", "-1"], ["3 1\n1 0", "-1"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input.shift();\n  N = parseInt(tmp.split(\" \")[0]);\n  M = tmp.split(\" \")[1];\n  S = input;\n  A = \"n\".repeat(N).split(\"\");\n  flag = true;\n  S.forEach(v => {\n    t = v.split(\" \").map(v => parseInt(v));\n    if (A[t[0] - 1] != \"n\" && A[t[0] - 1] != t[1]) flag = false;\n    A[t[0] - 1] = t[1];\n  });\n\n  A = A.join(\"\");\n  A = A.replace(/^nn([0-9])/, \"10$1\");\n  A = A.replace(/^n([0-9])/, \"1$1\");\n  A = A.replace(/n/g, \"0\");\n  A = parseInt(A);\n  if (flag && (A + \"\").length == N) {\n    console.log(A);\n  } else {\n    console.log(-1);\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02885_1", "type": "JavaScript", "obfuscated": "function Main(_0x5dbae1) {\n    var _0x145030 = _0x5dbae1['trim']()['split']('\\x20')['map'](Number);\n    var _0x19bee9 = _0x145030[0x1] * 0x2;\n    var _0x59e0ae = 0x0;\n    if (_0x19bee9 <= _0x145030[0x0]) {\n        _0x59e0ae = _0x145030[0x0] - _0x19bee9;\n    }\n    console['log'](_0x59e0ae);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["12 4", "4"], ["20 15", "0"], ["20 30", "0"]], "original": "function Main(input) {\n    var args = input.trim().split(' ').map(Number);\n    var nums = args[1] * 2\n    var ans = 0;\n    if(nums <= args[0]) {\n      ans = args[0] - nums;\n    }\n    console.log(ans);\n }\n \n/* var input = `12 11`;\nMain(input);\n */ \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02899_1", "type": "JavaScript", "obfuscated": "function Main(_0x6510f9) {\n    _0x6510f9 = _0x6510f9['split']('\\x0a');\n    var _0x2318af = [];\n    var _0x1ea0fa = _0x6510f9[0x1]['split']('\\x20')['map'](Number);\n    for (var _0x13d6b4 = 0x0; _0x13d6b4 < _0x1ea0fa['length']; _0x13d6b4++) {\n        _0x2318af['push']([\n            _0x1ea0fa[_0x13d6b4],\n            _0x13d6b4 + 0x1\n        ]);\n    }\n    _0x2318af = _0x2318af['sort'](function (_0x2991b6, _0x18ad9b) {\n        return _0x2991b6[0x0] - _0x18ad9b[0x0];\n    });\n    var _0xecef7b = '';\n    for (_0x13d6b4 = 0x0; _0x13d6b4 < _0x2318af['length']; _0x13d6b4++) {\n        _0xecef7b += _0x2318af[_0x13d6b4][0x1];\n        _0xecef7b += '\\x20';\n    }\n    console['log'](_0xecef7b['trim']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n2 3 1", "3 1 2"], ["5\n1 2 3 4 5", "1 2 3 4 5"], ["8\n8 2 7 3 4 5 6 1", "8 2 4 5 6 7 3 1"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var N = [];\n    var arr = input[1].split(\" \").map(Number);\n    for(var i=0;i<arr.length;i++){\n        N.push([arr[i],i+1]);\n    }\n    N = N.sort(function(a,b){return a[0]-b[0]});\n    var ans = \"\";\n    for(i=0;i<N.length;i++){\n        ans+=N[i][1]\n        ans+=\" \";\n    }\n   // console.log(N)\n    console.log(ans.trim());\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p02916_1", "type": "JavaScript", "obfuscated": "function Main(_0x2688ff) {\n    _0x2688ff = _0x2688ff['split']('\\x0a');\n    n = Number(_0x2688ff[0x0]['split']('\\x20'));\n    a = _0x2688ff[0x1]['split']('\\x20')['map'](Number);\n    b = _0x2688ff[0x2]['split']('\\x20')['map'](Number);\n    c = _0x2688ff[0x3]['split']('\\x20')['map'](Number);\n    var _0x515b14 = 0x0;\n    for (var _0x30e318 = 0x0; _0x30e318 < n; _0x30e318++) {\n        _0x515b14 += b[a[_0x30e318] - 0x1];\n        if (a[_0x30e318] === a[_0x30e318 - 0x1] + 0x1) {\n            _0x515b14 += c[a[_0x30e318] - 0x2];\n        }\n    }\n    console['log'](_0x515b14);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n3 1 2\n2 5 4\n3 6", "14"], ["4\n2 3 4 1\n13 5 8 24\n45 9 15", "74"], ["2\n1 2\n50 50\n50", "150"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n  \tn = Number(input[0].split(\" \"));\n    a = input[1].split(\" \").map(Number);\n    b = input[2].split(\" \").map(Number);\n    c = input[3].split(\" \").map(Number);\n  \tvar count = 0;\n  \tfor(var i=0; i<n; i++){\n      count += b[a[i]-1];\n      if(a[i] === a[i-1]+1){\n      \tcount += c[a[i]-2];\n      }\n    }\n  console.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02945_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2e1fa9 => {\n    const _0x388e33 = _0x2e1fa9['split']('\\x0a')['map'](_0x1a1cfa => _0x1a1cfa['split']('\\x20'));\n    const _0x4d9488 = parseInt(_0x388e33[0x0][0x0], 0xa);\n    const _0x1604b8 = parseInt(_0x388e33[0x0][0x1], 0xa);\n    console['log'](Math['max'](_0x4d9488 + _0x1604b8, _0x4d9488 - _0x1604b8, _0x4d9488 * _0x1604b8) + 0x0);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["-13 3", "-10"], ["1 -33", "34"], ["13 3", "39"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst A = parseInt(args[0][0], 10)\n\tconst B = parseInt(args[0][1], 10)\n\tconsole.log(Math.max(A + B, A - B, A * B) + 0)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02989_1", "type": "JavaScript", "obfuscated": "const main = _0x1e116f => {\n    var _0xb82921 = _0x1e116f[0x1]['split']('\\x20')['map'](_0x1335c7 => parseInt(_0x1335c7, 0xa))['sort']((_0x15de97, _0x5cb887) => _0x15de97 > _0x5cb887 ? 0x1 : -0x1);\n    console['log'](_0xb82921[_0xb82921['length'] / 0x2] - _0xb82921[_0xb82921['length'] / 0x2 - 0x1]);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["6\n9 1 4 4 6 7", "2"], ["8\n9 1 14 5 5 4 4 14", "0"], ["14\n99592 10342 29105 78532 83018 11639 92015 77204 30914 21912 34519 80835 100000 1", "42685"]], "original": "const main = input => {\n    var d = input[1].split(' ').map(p => parseInt(p, 10)).sort((p,q) => p>q?1:-1);\n    console.log(d[d.length/2]-d[d.length/2-1]);   \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));\n", "language": "JavaScript"}
{"filename": "p02999_1", "type": "JavaScript", "obfuscated": "function Main(_0x16f56b) {\n    var _0x3b053b;\n    const _0xa4c895 = parseInt(_0x16f56b[0x0]);\n    const _0x49378a = parseInt(_0x16f56b[0x1]);\n    _0x3b053b = _0xa4c895 < _0x49378a ? 0x0 : 0xa;\n    console['log'](_0x3b053b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/\\n|\\s/));", "test_cases": [["3 5", "0"], ["7 5", "10"], ["6 6", "10"]], "original": "function Main(input) {\n    var result;\n    const X = parseInt(input[0])\n    const A = parseInt(input[1])\n    \n    result = X < A ? 0 : 10;\n    console.log(result);\n}\n\n// 1行入力の場合\n// Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n\n// 改行で分割\n// Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n/));\n\n// 改行・空白で分割\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));", "language": "JavaScript"}
{"filename": "p03031_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d0c1d) {\n    lines = _0x1d0c1d['split']('\\x0a');\n    lines = _0x1d0c1d['split']('\\x0a');\n    n = lines[0x0]['split']('\\x20')[0x0] * 0x1;\n    m = lines[0x0]['split']('\\x20')[0x1] * 0x1;\n    ps = lines[lines['length'] - 0x1]['split']('\\x20');\n    lines = lines['slice'](0x1, -0x1)['map'](function (_0x4fbdae) {\n        return _0x4fbdae['split']('\\x20')['slice'](0x1);\n    });\n    ans = 0x0;\n    for (i = 0x0; i < 0x1 << n; i++) {\n        s = ('0000000000' + i['toString'](0x2))['slice'](-0x1 * n);\n        flg = !![];\n        for (j = 0x0; j < lines['length']; j++) {\n            on = 0x0;\n            if (!flg)\n                break;\n            for (k = 0x0; k < lines[j]['length']; k++) {\n                on += s[n - lines[j][k]] * 0x1;\n            }\n            if (on % 0x2 != ps[j]) {\n                flg = ![];\n            }\n        }\n        if (flg) {\n            ans++;\n        }\n    }\n    console['log'](ans);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2\n2 1 2\n1 2\n0 1", "1"], ["2 3\n2 1 2\n1 1\n1 2\n0 0 1", "0"], ["5 2\n3 1 2 5\n2 2 3\n1 0", "8"]], "original": "function Main(input) {\n  lines = input.split(\"\\n\")\n  lines = input.split(\"\\n\")\n  n = lines[0].split(\" \")[0] * 1\n  m = lines[0].split(\" \")[1] * 1\n  ps = lines[lines.length - 1].split(\" \")\n  lines = lines.slice(1, -1).map(function(l) { return l.split(' ').slice(1) })\n  ans = 0\n  for (i = 0; i < (1 << n);i++) {\n    s = (\"0000000000\" + i.toString(2)).slice(-1 * n)\n    flg = true\n    for(j = 0; j < lines.length; j++) {\n      on = 0\n      if (!flg) break;\n      for(k = 0; k < lines[j].length; k++) {\n        on += s[n - lines[j][k]] * 1\n      }\n      if (on % 2 != ps[j]) {\n        flg = false\n      }\n    }\n    if (flg) {\n      ans++\n    }\n  }\n  console.log(ans) \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03061_1", "type": "JavaScript", "obfuscated": "function gcd(_0x55624f) {\n    var _0x164263 = (_0x2a6ab0, _0x4edf8b) => _0x4edf8b ? _0x164263(_0x4edf8b, _0x2a6ab0 % _0x4edf8b) : _0x2a6ab0;\n    var _0x548900 = _0x55624f[0x0];\n    for (var _0x3227b5 = 0x1; _0x3227b5 < _0x55624f['length']; _0x3227b5++) {\n        _0x548900 = _0x164263(_0x548900, _0x55624f[_0x3227b5]);\n    }\n    return _0x548900;\n}\nfunction getExcep(_0x1eec00) {\n    var _0x3cd280 = Math['min'](..._0x1eec00);\n    var _0x41e296 = Math['max'](..._0x1eec00);\n    var _0x2843ce = 0x0;\n    var _0x5eb922 = 0x0;\n    var _0x1e6563 = 0x0;\n    for (var _0x509ba9 = 0x0; _0x509ba9 < _0x1eec00['length']; _0x509ba9++) {\n        if (_0x1eec00[_0x509ba9] === _0x3cd280) {\n            _0x2843ce++;\n        }\n    }\n    if (_0x2843ce === 0x1) {\n        _0x1e6563 = _0x3cd280;\n    } else {\n        _0x1e6563 = _0x41e296;\n    }\n    for (var _0x509ba9 = 0x0; _0x509ba9 < _0x1eec00['length']; _0x509ba9++) {\n        if (_0x1eec00[_0x509ba9] === _0x1e6563) {\n            return _0x509ba9;\n        }\n    }\n}\nfunction main(_0x564573) {\n    _0x564573 = _0x564573['trim']()['split']('\\x0a');\n    var _0x19677e = Number(_0x564573[0x0]);\n    var _0x47c846 = _0x564573[0x1]['split']('\\x20')['map'](Number);\n    var _0x518a6e = new Array(_0x47c846['length'])['fill'](0x0);\n    var _0x27398c = 0x0;\n    for (var _0x35f0db = 0x0; _0x35f0db < _0x47c846['length']; _0x35f0db++) {\n        var _0x355386 = _0x47c846['slice']();\n        _0x355386['splice'](_0x35f0db, 0x1);\n        var _0x2e0977 = gcd(_0x355386);\n        _0x518a6e[_0x35f0db] = _0x2e0977;\n    }\n    var _0x55f3ae = getExcep(_0x518a6e);\n    _0x47c846[_0x55f3ae] = _0x47c846[_0x55f3ae + 0x1];\n    console['log'](gcd(_0x47c846));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n7 6 8", "2"], ["3\n12 15 18", "6"], ["2\n1000000000 1000000000", "1000000000"]], "original": "function gcd(arr) {\n    var f = (a, b) => b ? f(b, a % b) : a\n    var ans = arr[0]\n    for (var i = 1; i < arr.length; i++) {\n        ans = f(ans, arr[i]); \n    }\n    return ans \n}\n\nfunction getExcep(c) {\n\tvar min = Math.min(...c)\n\tvar max = Math.max(...c)\n\tvar mincount = 0\n\tvar maxcount = 0\n\tvar findValue = 0\n\tfor (var i = 0; i < c.length; i++) {\n\t\tif (c[i] === min) {\n\t\t\tmincount++\n\t\t}\n\t}\n\tif (mincount === 1) {\n\t\tfindValue = min\n\t} else {\n\t\tfindValue = max\n\t}\n\t// console.log(findValue)\n\tfor (var i = 0; i < c.length; i++) {\n\t\tif (c[i] === findValue) {\n\t\t\treturn i\n\t\t}\n\t}\n}\n\nfunction main(arg) {\n\targ = arg.trim().split(\"\\n\")\n\tvar N = Number(arg[0])\n\tvar A = arg[1].split(\" \").map(Number)\n\tvar c = new Array(A.length).fill(0)\n\tvar result = 0\n\tfor (var i = 0; i < A.length;i ++) {\n\t\tvar _A = A.slice()\n\t\t_A.splice(i, 1)\n\t\tvar n = gcd(_A)\n\t\tc[i] = n\n\t\t// console.log(_A)\n\t}\n\tvar idx = getExcep(c)\n\tA[idx] = A[idx+1]\n\n\tconsole.log(gcd(A))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03163_1", "type": "JavaScript", "obfuscated": "function main(_0x284400) {\n    const _0x4b5b64 = _0x284400['split']('\\x0a');\n    const _0x2a16e2 = _0x4b5b64['shift']()['split']('\\x20')['map'](_0x121dcc => parseInt(_0x121dcc));\n    const _0x264d80 = _0x2a16e2[0x0];\n    const _0x2b2762 = _0x2a16e2[0x1];\n    const _0x44093e = _0x4b5b64['map'](_0x394f95 => _0x394f95['split']('\\x20')['map'](_0xccaf0e => parseInt(_0xccaf0e)));\n    dp = [];\n    for (var _0x45e938 = 0x0; _0x45e938 < _0x2b2762 + 0x1; _0x45e938++) {\n        dp['push'](Array(_0x264d80 + 0x1)['fill'](0x0));\n    }\n    var _0x2fff06 = 0x0;\n    for (var _0x45e938 = 0x0; _0x45e938 < _0x264d80; _0x45e938++) {\n        for (var _0x1a24c5 = 0x0; _0x1a24c5 <= _0x2b2762; _0x1a24c5++) {\n            var _0x20e3e6 = _0x44093e[_0x45e938][0x0];\n            var _0x4f54f7 = _0x44093e[_0x45e938][0x1];\n            if (_0x20e3e6 <= _0x1a24c5) {\n                dp[_0x1a24c5][_0x45e938 + 0x1] = Math['max'](dp[_0x1a24c5][_0x45e938], dp[_0x1a24c5 - _0x20e3e6][_0x45e938] + _0x4f54f7);\n            } else {\n                dp[_0x1a24c5][_0x45e938 + 0x1] = dp[_0x1a24c5][_0x45e938];\n            }\n            if (dp[_0x1a24c5][_0x45e938 + 0x1] > _0x2fff06) {\n                _0x2fff06 = dp[_0x1a24c5][_0x45e938 + 0x1];\n            }\n        }\n    }\n    console['log'](_0x2fff06);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 8\n3 30\n4 50\n5 60", "90"], ["5 5\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000", "5000000000"], ["6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2", "17"]], "original": "//他人のソース\nfunction main(input){\n  const lines = input.split('\\n');\n  const NW = lines.shift().split(' ').map(x => parseInt(x));\n  const N = NW[0]\n  const W = NW[1]\n  const items = lines.map(line => line.split(' ').map(x => parseInt(x)) );\n\n//console.log(N);\n//console.log(W);\n//console.log(items);\n\n  dp = []\n  for(var i=0;i<W+1;i++){\n    dp.push( Array(N+1).fill(0) );\n  }\n\n  var result = 0;\n  for(var i=0;i<N;i++){\n    for(var w=0;w<=W;w++){\n\n      var weight = items[i][0]\n      var value = items[i][1]\n\n      if(weight <= w){\n        dp[w][i+1] = Math.max(dp[w][i], dp[w-weight][i] + value);\n      }else{\n        dp[w][i+1] = dp[w][i];\n      }\n\n      if(dp[w][i+1] > result){result = dp[w][i+1];}\n\n    }\n  }\n\n//  const result = Math.max( ...dp.map(arr => Math.max(...arr)) )\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03208_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1a1a3f) {\n    const _0x570a4f = _0x1a1a3f['split']('\\x0a');\n    const _0x447205 = parseInt(_0x570a4f[0x0]['split']('\\x20')[0x0]);\n    const _0x4dfb5d = parseInt(_0x570a4f[0x0]['split']('\\x20')[0x1]);\n    const _0x381fc2 = _0x570a4f['slice'](0x1, _0x447205 + 0x1)['map'](_0x17a52d => parseInt(_0x17a52d))['sort']((_0x3a4f75, _0x55a7a7) => {\n        return _0x3a4f75 - _0x55a7a7;\n    });\n    let _0x492163, _0x83e363 = [];\n    for (_0x492163 = 0x0; _0x492163 < _0x447205 - _0x4dfb5d + 0x1; ++_0x492163)\n        _0x83e363['push'](_0x381fc2[_0x492163 + _0x4dfb5d - 0x1] - _0x381fc2[_0x492163]);\n    console['log'](Math['min'](..._0x83e363));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n10\n15\n11\n14\n12", "2"], ["5 3\n5\n7\n5\n7\n7", "0"]], "original": "\"use strict\";\nfunction main(arg) {\n    const inputs = arg.split(\"\\n\")\n    const N = parseInt(inputs[0].split(\" \")[0])\n    const K = parseInt(inputs[0].split(\" \")[1])\n    const list = inputs.slice(1,N+1).map((x)=>parseInt(x)).sort((a,b)=>{return a-b})\n    let i, sa = []\n    for(i=0; i<N-K+1; ++i)\n        sa.push(list[i+K-1] - list[i])\n    console.log(Math.min(...sa))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03211_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0x1ea3c7(_0x1cedfb) {\n        return new _0x4f8058(_0x1cedfb);\n    }\n    function _0x4f8058(_0x4c1fd4) {\n        this['_s'] = _0x4c1fd4['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0x4f8058['prototype']['a'] = function (_0x311389) {\n        var _0x38d0c4 = this['_s'], _0x5772ed = this['_y'], _0xd43256;\n        if (typeof _0x38d0c4[_0x5772ed] === 'string')\n            _0x38d0c4[_0x5772ed] = _0x38d0c4[_0x5772ed]['split']('\\x20')['reverse']();\n        _0xd43256 = _0x38d0c4[_0x5772ed]['pop']();\n        if (!_0x38d0c4[_0x5772ed]['length'])\n            this['_y']++;\n        return _0x311389 ? _0xd43256 : +_0xd43256;\n    };\n    _0x4f8058['prototype']['l'] = function (_0x242661) {\n        var _0x1a6da7 = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x242661 ? _0x1a6da7 : _0x1a6da7['map'](_0x4087bb => +_0x4087bb);\n    };\n    _0x4f8058['prototype']['m'] = function (_0x35c882, _0x47a4ba) {\n        var _0x44bbd8 = this['_s']['slice'](this['_y'], this['_y'] += _0x35c882)['map'](_0x397e9b => _0x397e9b['split']('\\x20'));\n        return _0x47a4ba ? _0x44bbd8 : _0x44bbd8['map'](_0x3db00d => _0x3db00d['map'](_0x55123f => +_0x55123f));\n    };\n    _0x4f8058['prototype']['r'] = function (_0x466036, _0x26f262) {\n        var _0x225127 = this['_s']['slice'](this['_y'], this['_y'] += _0x466036);\n        return _0x26f262 ? _0x225127 : _0x225127['map'](_0x2218e9 => +_0x2218e9);\n    };\n    return _0x1ea3c7;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](main());\nfunction main() {\n    var _0x5ed12d = o['a'](0x1);\n    var _0x4ae6bc = 0x3e7;\n    for (var _0x4f851c = 0x2; _0x4f851c < _0x5ed12d['length']; _0x4f851c++) {\n        var _0x19fdfd = _0x5ed12d[_0x4f851c - 0x2] + _0x5ed12d[_0x4f851c - 0x1] + _0x5ed12d[_0x4f851c];\n        _0x19fdfd = Math['abs'](_0x19fdfd - 0x2f1);\n        if (_0x4ae6bc > _0x19fdfd)\n            _0x4ae6bc = _0x19fdfd;\n    }\n    return _0x4ae6bc;\n}", "test_cases": [["1234567876", "34"], ["35753", "0"], ["1111111111", "642"]], "original": "var GET = (function(){\n  function f(s){return new g(s);}\n  function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}\n  g.prototype.a = function(f){\n    var s = this._s, y = this._y, r;\n    if(typeof s[y] === \"string\")s[y]=s[y].split(\" \").reverse();\n    r = s[y].pop();\n    if(!s[y].length)this._y++;\n    return f?r:+r;\n  }\n  g.prototype.l = function(f){\n    var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);\n  }\n  g.prototype.m = function(n,f){\n    var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));\n    return f?r:r.map(a=>a.map(a=>+a));\n  }\n  g.prototype.r = function(n,f){\n    var r = this._s.slice(this._y,this._y+=n);\n    return f?r:r.map(a=>+a);\n  }\n  return f;\n})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var s = o.a(1);\n  var ans = 999;\n  for(var i = 2; i < s.length; i++){\n    var t = s[i-2] + s[i-1] + s[i];\n    t = Math.abs(t - 753);\n    if(ans > t)ans = t;\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p03242_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x245413 => {\n    let _0x4ccab8 = _0x245413[0x0]['split']('');\n    console['log'](_0x4ccab8['map'](_0x58c41c => _0x58c41c == '9' ? 0x1 + '' : 0x9 + '')['reduce']((_0x3a05f8, _0x2644c2) => _0x3a05f8 + _0x2644c2));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["119", "991"], ["999", "111"]], "original": "'use strict';\nconst main = input => {\n  let n = input[0].split('');\n  console.log(n.map(val => val=='9'?1+'':9+'').reduce((acc, cur) => acc+cur));\n  \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));", "language": "JavaScript"}
{"filename": "p03243_1", "type": "JavaScript", "obfuscated": "function myout(_0x14914d) {\n    console['log'](_0x14914d);\n}\nfunction Main(_0x168ac0) {\n    _0x168ac0 = parseInt(_0x168ac0['trim']());\n    var _0x32fe10 = [\n        0x0,\n        0x6f,\n        0xde,\n        0x14d,\n        0x1bc,\n        0x22b,\n        0x29a,\n        0x309,\n        0x378,\n        0x3e7\n    ];\n    for (var _0x4544c0 = 0x0; _0x4544c0 < _0x32fe10['length'] - 0x1; _0x4544c0++) {\n        if (_0x32fe10[_0x4544c0] < _0x168ac0 && _0x32fe10[_0x4544c0 + 0x1] > _0x168ac0) {\n            myout(_0x32fe10[_0x4544c0 + 0x1]);\n            return;\n        } else if (_0x32fe10[_0x4544c0] == _0x168ac0) {\n            myout(_0x32fe10[_0x4544c0]);\n            return;\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["111", "111"], ["112", "222"], ["750", "777"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\tinput = parseInt(input.trim());\n\t//input = input.trim().split(\" \");\n\t//input = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var check = [000,111,222,333,444,555,666,777,888,999];\n  for(var i = 0; i < check.length - 1; i++){\n    if(check[i] < input && check[i + 1] > input){\n       myout(check[i + 1]);\n      return;\n       }else if(check[i] == input){\n             myout(check[i]);\n      return;   \n                }\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03273_1", "type": "JavaScript", "obfuscated": "function main(_0x45a075) {\n    _0x45a075 = _0x45a075['split'](/\\s/);\n    let _0x535886 = parseInt(_0x45a075[0x0]);\n    let _0x2a50c0 = parseInt(_0x45a075[0x1]);\n    let _0x49699a = [];\n    for (let _0x1d758d = 0x2; _0x1d758d < 0x2 + _0x535886; _0x1d758d++)\n        _0x49699a['push'](_0x45a075[_0x1d758d]);\n    function _0x2a4ad3(_0x4a262d, _0x5932cc) {\n        let _0x5898a1 = 0x0;\n        for (let _0x12e24d = 0x0; _0x12e24d < _0x535886; _0x12e24d++)\n            if (_0x49699a[_0x12e24d][_0x4a262d] == '#') {\n                _0x5898a1++;\n                break;\n            }\n        for (let _0x394212 = 0x0; _0x394212 < _0x2a50c0; _0x394212++)\n            if (_0x49699a[_0x5932cc][_0x394212] == '#') {\n                _0x5898a1++;\n                break;\n            }\n        return _0x5898a1 == 0x2;\n    }\n    for (let _0x1ca5be = 0x0; _0x1ca5be < _0x535886; _0x1ca5be++) {\n        ans = '';\n        for (let _0x33e476 = 0x0; _0x33e476 < _0x2a50c0; _0x33e476++)\n            if (_0x2a4ad3(_0x33e476, _0x1ca5be))\n                ans = ans + _0x49699a[_0x1ca5be][_0x33e476];\n        if (ans != '')\n            console['log'](ans);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 4\n##.#\n....\n##.#\n.#.#", "###\n###\n.##"], ["3 3\n#..\n.#.\n..#", "#..\n.#.\n..#"], ["4 5\n.....\n.....\n..#..\n.....", "#"], ["7 6\n......\n....#.\n.#....\n..#...\n..#...\n......\n.#..#.", "..#\n#..\n.#.\n.#.\n#.#"]], "original": "\nfunction main(input){\n    input = input.split(/\\s/);\n    let h = parseInt(input[0]);\n    let w = parseInt(input[1]);\n    let mp = [];\n    for(let i = 2; i < 2 + h; i++) mp.push(input[i]);\n\n    function check(x, y){\n\tlet res = 0;\n\tfor(let i = 0;i < h;i++)\n\t    if(mp[i][x] == '#') {\n\t\tres++;\n\t\tbreak;\n\t    }\n\n\tfor(let j = 0;j < w;j++)\n\t    if(mp[y][j] == '#') {\n\t\tres++;\n\t\tbreak;\n\t    }\n\treturn res == 2;\n    }\n\n    for(let i = 0; i < h;i++){\n\tans = ''\n\tfor(let j = 0; j < w;j++)\n\t    if( check(j, i) ) ans = ans + mp[i][j];\n\tif(ans != '') console.log(ans);\n    }\n    \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03282_1", "type": "JavaScript", "obfuscated": "function main(_0x25e5da) {\n    const _0x42b579 = _0x25e5da['split']('\\x0a')[0x0]['split']('');\n    const _0x3ae6d7 = parseInt(_0x25e5da['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    for (var _0x2802a9 = 0x0; _0x2802a9 < _0x42b579['length']; _0x2802a9++) {\n        if (_0x42b579[_0x2802a9] != '1') {\n            console['log'](_0x42b579[_0x2802a9]);\n            return;\n        }\n    }\n    console['log'](0x1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1214\n4", "2"], ["3\n157", "3"], ["299792458\n9460730472580800", "2"]], "original": "function main(input){\n  const S = input.split('\\n')[0].split('');\n  const K = parseInt(input.split('\\n')[0].split(' ')[1]);\n\n  for(var i=0;i<S.length;i++){\n    if(S[i]!='1'){\n      console.log(S[i]);\n      return;\n    }\n  }\n  console.log(1);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03317_1", "type": "JavaScript", "obfuscated": "function Main(_0x1adf56) {\n    a = _0x1adf56['split']('\\x0a');\n    b = a[0x0]['split']('\\x20')['map'](Number);\n    c = a[0x1]['split']('\\x20')['map'](Number);\n    N = b[0x0], K = b[0x1], r = 0x0;\n    while (c['length'] > 0x1) {\n        r++;\n        d = [];\n        for (i = 0x0; i < K; i++) {\n            d['push'](c[i]);\n        }\n        for (i = 0x0; i < K; i++) {\n            if (d['sort']()[0x0] !== c[i]) {\n                c[i] = '';\n            }\n        }\n        c = c['join']('')['split']('')['map'](Number);\n    }\n    console['log'](r);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3\n2 3 1 4", "2"], ["3 3\n1 2 3", "1"], ["8 3\n7 3 1 8 4 6 2 5", "4"]], "original": "function Main(input) {\n\ta=input.split('\\n');\n\tb=a[0].split(' ').map(Number);\n\tc=a[1].split(' ').map(Number);\n\n\tN=b[0], K=b[1], r=0;\n\n\twhile(c.length>1){\n\t\tr++;\n\t\td=[];\n\t\tfor(i=0;i<K;i++){\n\t\t\td.push(c[i]);\n\t\t}\n\n\t\tfor(i=0;i<K;i++){\n\t\t\tif(d.sort()[0]!==c[i]){\n\t\t\t\tc[i]='';\n\t\t\t}\n\t\t}\n\n\t\tc=c.join('').split('').map(Number);\n\t}\n\n\tconsole.log(r);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03469_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2784f0) {\n    const _0x5ec187 = _0x2784f0['split']('\\x0a')[0x0]['replace'](/^.{4}/, 0x7e2);\n    console['log'](_0x5ec187);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2017/01/07", "2018/01/07"], ["2017/01/31", "2018/01/31"]], "original": "// https://atcoder.jp/contests/abc085/tasks/abc085_a\n\"use strict\"\nfunction Main(input) {\n  const date = input.split(`\\n`)[0].replace(/^.{4}/, 2018 );\n  console.log(date);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03502_1", "type": "JavaScript", "obfuscated": "function Main(_0x256db5) {\n    _0x256db5 = _0x256db5['split']('\\x0a');\n    var _0x1e682f = parseInt(_0x256db5[0x0], 0xa);\n    if (parseInt(_0x1e682f / 0xa) === 0x0) {\n        console['log']('Yes');\n        return;\n    }\n    var _0x3db013 = 0x0;\n    var _0x2de42d = _0x1e682f;\n    for (var _0x37313b = 0x5f5e100; _0x37313b >= 0xa; _0x37313b = _0x37313b / 0xa) {\n        _0x3db013 += parseInt(_0x2de42d / _0x37313b);\n        _0x2de42d = _0x2de42d % _0x37313b;\n    }\n    _0x3db013 += _0x2de42d;\n    if (_0x1e682f % _0x3db013 === 0x0) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["12", "Yes"], ["57", "No"], ["148", "No"]], "original": "    // inputに入力データ全体が入る\n    function Main(input) {\n    \tinput = input.split(\"\\n\");\n\n      var N = parseInt(input[0], 10);\n      \n      if (parseInt(N / 10) === 0){ // 1桁の時\n        console.log('Yes');\n        return;  \n      }\n\n      var Sum = 0;\n      var Mod = N; // 余り\n      for (var i = 100000000; i >= 10; i = i / 10){\n        Sum += parseInt(Mod / i);\n        Mod = Mod % i;\n        // console.log('%d', i);\n        // console.log('%d', Sum);\n        // console.log('%d', Mod);\n        // console.log('--');        \n      }\n      Sum += Mod;\n      // console.log('%d', Sum);\n      // console.log('%d', Mod);\n      // console.log('--');   \n\n      if( N % Sum === 0){\n      \tconsole.log('Yes');\n      }else{\n        console.log('No');\n      }\n    \n    }\n\n    Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p03606_1", "type": "JavaScript", "obfuscated": "Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x23a1e1) {\n    input = _0x23a1e1['split']('\\x0a');\n    const _0x2c2e64 = parseInt(input[0x0]);\n    var _0x2767a7;\n    var _0x4e0111 = 0x0;\n    for (var _0x4a896d = 0x1; _0x4a896d <= _0x2c2e64; _0x4a896d++) {\n        _0x2767a7 = input[_0x4a896d]['split']('\\x20');\n        _0x4e0111 += parseInt(_0x2767a7[0x1]) - parseInt(_0x2767a7[0x0]) + 0x1;\n    }\n    console['log'](_0x4e0111);\n}", "test_cases": [["1\n24 30", "7"], ["2\n6 8\n3 3", "4"]], "original": "Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction Main(args){\n    input = args.split(\"\\n\");\n    const N = parseInt(input[0]);\n    var tmp;\n    var result = 0;\n    \n    for(var i=1; i<=N; i++){\n        tmp = input[i].split(\" \");\n        result += (parseInt(tmp[1]) - parseInt(tmp[0]) + 1);\n    }\n\n    console.log(result);\n}", "language": "JavaScript"}
{"filename": "p03835_1", "type": "JavaScript", "obfuscated": "function Main(_0x372947) {\n    let _0x252aa6 = _0x372947['split']('\\x20');\n    let _0x47b360 = Number(_0x252aa6[0x0]);\n    let _0x37b01a = Number(_0x252aa6[0x1]);\n    let _0x38ef34 = 0x0;\n    for (let _0x3a990b = 0x0; _0x3a990b <= _0x47b360; _0x3a990b++) {\n        for (let _0x16dbc3 = 0x0; _0x16dbc3 <= _0x47b360; _0x16dbc3++) {\n            for (let _0x474f6f = 0x0; _0x474f6f <= _0x47b360; _0x474f6f++) {\n                if (_0x3a990b + _0x16dbc3 + _0x474f6f === _0x37b01a) {\n                    _0x38ef34++;\n                }\n            }\n        }\n    }\n    console['log'](_0x38ef34);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2", "6"], ["5 15", "1"]], "original": "function Main(input) {\n  let inputs = input.split(' ');\n  let K = Number(inputs[0]);\n  let S = Number(inputs[1]);\n  let count = 0;\n  for(let X = 0; X <= K; X++) {\n    for(let Y = 0; Y <= K; Y++) {\n      for(let Z = 0; Z <= K; Z++) {\n        if (X + Y + Z === S) {\n          count++;\n        }\n      }\n    }\n  }\n  console.log(count);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04030_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x5a0f0a) {\n    const _0x322fac = _0x5a0f0a['split']('\\x0a')[0x0]['split']('');\n    const _0x3cf8c1 = [];\n    for (const _0x40a157 of _0x322fac) {\n        if (_0x40a157 === 'B') {\n            _0x3cf8c1['pop']();\n        } else {\n            _0x3cf8c1['push'](_0x40a157);\n        }\n    }\n    console['log'](_0x3cf8c1['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["01B0", "00"], ["0BB1", "1"]], "original": "'use strict'\n\nfunction Main(input) {\n    const tape = input.split('\\n')[0].split('');\n    const result = []\n\n    for (const v of tape) {\n        if (v === 'B') {\n            result.pop();\n        } else {\n            result.push(v);\n        }\n    }\n\n    console.log(result.join(''));\n}\n\n// input\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02398_1", "type": "JavaScript", "obfuscated": "var abc = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x20')['map'](Number);\nvar a = abc[0x0];\nvar b = abc[0x1];\nvar c = abc[0x2];\nvar i;\nvar result = 0x0;\nfor (i = a; i <= b; i++) {\n    if (c % i === 0x0) {\n        result++;\n    }\n}\nconsole['log'](result);", "test_cases": [["5 14 80", "3"]], "original": "var abc = require('fs').readFileSync('/dev/stdin', 'utf8').split(' ').map(Number);\nvar a = abc[0];\nvar b = abc[1];\nvar c = abc[2];\n\nvar i;\nvar result = 0;\nfor (i = a; i <= b; i++) {\n  if (c % i === 0) {\n    result++;\n  }\n}\nconsole.log(result);", "language": "JavaScript"}
{"filename": "p02419_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x2b5138) {\n    var _0x4b05ff = _0x2b5138['toString']()['split']('\\x0a');\n    var _0x5b28a9 = function (_0x31c38e, _0x1dd814) {\n        return _0x1dd814['filter'](function (_0x16af84) {\n            return _0x16af84 === _0x31c38e;\n        })['length'];\n    }(_0x4b05ff['shift']()['toLowerCase'](), _0x4b05ff['join']('')['split']('END_OF_TEXT')[0x0]['toLowerCase']()['trim']()['split']('\\x20'));\n    console['log'](_0x5b28a9);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["computer\nNurtures computer scientists and highly-skilled computer engineers\nwho will create and exploit \"knowledge\" for the new era.\nProvides an outstanding computer environment.\nEND_OF_TEXT", "3"]], "original": "'use strict';\n(function(stdin) {\n  var lines = stdin.toString().split('\\n');\n\n  var result = (function(word,data) {\n    return data.filter(function(v) {\n      return v === word;\n    }).length;\n  }(\n    lines.shift().toLowerCase()\n    ,lines.join('').split('END_OF_TEXT')[0].toLowerCase().trim().split(' ')\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02572_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0xfcae5b) {\n    _0xfcae5b = _0xfcae5b['trim']()['split']('\\x0a');\n    const _0x116a6b = Number(_0xfcae5b[0x0]);\n    const _0x13a368 = _0xfcae5b[0x1]['split']('\\x20');\n    let _0x22adc4 = 0x0;\n    for (let _0x29acdf = 0x0; _0x29acdf < _0x116a6b; _0x29acdf++) {\n        if (Number(_0x13a368[_0x29acdf]) == 0x0)\n            continue;\n        for (let _0x5e7cda = _0x29acdf + 0x1; _0x5e7cda < _0x116a6b; _0x5e7cda++) {\n            _0x22adc4 = _0x22adc4 + Number(_0x13a368[_0x29acdf]) * Number(_0x13a368[_0x5e7cda]);\n        }\n    }\n    console['log'](_0x22adc4 % 0x3b9aca07);\n}\nfunction numberSort(_0x368a01) {\n    _0x368a01['sort'](f);\n    return _0x368a01;\n}\nvar f = function (_0x38e6d3, _0x4b82ea) {\n    return _0x38e6d3 - _0x4b82ea;\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["3\n1 2 3", "11"], ["4\n141421356 17320508 22360679 244949", "437235829"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\"\\n\");\n  const N = Number(input[0]);\n  const line2_arr = input[1].split(\" \");\n  let ans = 0;\n  for (let i = 0; i < N; i++) {\n    if (Number(line2_arr[i]) == 0) continue;\n    for (let j = i + 1; j < N; j++) {\n      ans = ans + Number(line2_arr[i]) * Number(line2_arr[j]);\n      // console.log(ans);\n    }\n  }\n  console.log(ans % 1000000007);\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript"}
{"filename": "p02621_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n(_0x446a4a => {\n    const _0xd27c32 = _0x446a4a - 0x0;\n    console['log'](_0xd27c32 + _0xd27c32 * _0xd27c32 + _0xd27c32 * _0xd27c32 * _0xd27c32);\n})(input);", "test_cases": [["2", "14"], ["10", "1110"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n\n    const a = input - 0\n\n    console.log(a + a * a + a * a * a)\n\n})(input)\n", "language": "JavaScript"}
{"filename": "p02640_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf-8')['split']('\\x0a');\nconst [X, Y] = input[0x0]['split']('\\x20')['map'](Number);\nlet ans = 'No';\nif (X < Y) {\n    const r = Y - X * 0x2;\n    if (r % 0x2 === 0x0 && r / 0x2 <= X)\n        ans = 'Yes';\n}\nconsole['log'](ans);", "test_cases": [["3 8", "Yes"], ["2 100", "No"], ["1 2", "Yes"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf-8').split('\\n')\nconst [X, Y] = input[0].split(' ').map(Number)\nlet ans = 'No'\nif (X < Y) {\n  const r = Y - X * 2\n  if (r % 2 === 0 && r / 2 <= X) ans = 'Yes'\n}\nconsole.log(ans)\n", "language": "JavaScript"}
{"filename": "p02641_1", "type": "JavaScript", "obfuscated": "function Main(_0x2c7a5a) {\n    _0x2c7a5a = _0x2c7a5a['split']('\\x0a');\n    let _0x1ff4bc = parseInt(_0x2c7a5a[0x0]['split']('\\x20')[0x0]);\n    let _0x3380ec = parseInt(_0x2c7a5a[0x0]['split']('\\x20')[0x1]);\n    if (_0x3380ec == 0x0) {\n        console['log'](_0x1ff4bc);\n    } else {\n        let _0x321bd6 = _0x2c7a5a[0x1]['split']('\\x20');\n        for (let _0x25dea7 = 0x0; _0x25dea7 < _0x321bd6['length']; _0x25dea7++) {\n            let _0x16f851 = parseInt(_0x321bd6[_0x25dea7]);\n            _0x321bd6[_0x25dea7] = _0x1ff4bc - _0x16f851;\n        }\n        for (let _0x250f98 = 0x1; _0x250f98 <= 0x64; _0x250f98++) {\n            const _0x4bf571 = _0x321bd6['indexOf'](_0x250f98);\n            const _0x365d4c = _0x321bd6['indexOf'](-_0x250f98);\n            if (_0x4bf571 == -0x1) {\n                console['log'](_0x1ff4bc - _0x250f98);\n                break;\n            }\n            if (_0x365d4c == -0x1) {\n                console['log'](_0x1ff4bc + _0x250f98);\n                break;\n            }\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 5\n4 7 10 6 5", "8"], ["10 5\n4 7 10 6 5", "9"], ["100 0", "100"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  let target = parseInt(input[0].split(\" \")[0]);\n  let zerocheck = parseInt(input[0].split(\" \")[1]);\n  if (zerocheck == 0) {\n    console.log(target);\n  } else {\n    let str = input[1].split(\" \");\n    for (let i = 0; i < str.length; i++) {\n      let num = parseInt(str[i]);\n      str[i] = target - num;\n    }\n    for (let ite = 1; ite <= 100; ite++) {\n      const isp = str.indexOf(ite);//小さい方\n      const isn = str.indexOf(-ite);//大きい方\n      if (isp == -1) {\n        console.log(target - ite);\n        break;\n      }\n      if (isn == -1) {\n        console.log(target + ite);\n        break;\n      }\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02682_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1ae8d8) {\n    let _0x1e6e6b = _0x1ae8d8['trim']()['split']('\\x20')[0x3];\n    let _0x16746f = _0x1ae8d8['trim']()['split']('\\x20')[0x0];\n    let _0x3a003b = _0x1ae8d8['trim']()['split']('\\x20')[0x1];\n    let _0x36ad09 = _0x1ae8d8['trim']()['split']('\\x20')[0x2];\n    let _0x197996 = 0x0;\n    if (_0x16746f == 0x0 && _0x3a003b == 0x0 && _0x36ad09 == 0x0) {\n        console['log'](0x0);\n        return;\n    }\n    if (_0x1e6e6b > 0x0) {\n        if (_0x1e6e6b > _0x16746f) {\n            _0x197996 = _0x16746f * 0x1;\n        } else {\n            _0x197996 = _0x1e6e6b * 0x1;\n        }\n        _0x1e6e6b = _0x1e6e6b - _0x16746f;\n    }\n    if (_0x1e6e6b > 0x0) {\n        _0x1e6e6b = _0x1e6e6b - _0x3a003b;\n    }\n    if (_0x1e6e6b > 0x0) {\n        _0x197996 = _0x197996 + _0x1e6e6b * -0x1;\n    }\n    console['log'](_0x197996);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 1 1 3", "2"], ["1 2 3 4", "0"], ["2000000000 0 0 2000000000", "2000000000"]], "original": "\"use strict\"\nfunction main(arg) {\n    let getInt = arg.trim().split(\" \")[3];\n    let oneCount = arg.trim().split(\" \")[0];\n    let zeroCnt = arg.trim().split(\" \")[1];\n    let minusCnt = arg.trim().split(\" \")[2];\n\n    let result = 0;\n\n    if(oneCount == 0 && zeroCnt == 0 && minusCnt == 0){\n        console.log(0);\n        return;\n    }\n\n    if(getInt > 0){\n        \n        if(getInt > oneCount){\n            result = oneCount * 1;   \n        }else{\n            result = getInt * 1;\n        }\n        getInt = getInt - oneCount;\n    }\n\n    if(getInt > 0){\n        getInt = getInt - zeroCnt;\n    }\n\n    if(getInt > 0){\n        result = result + (getInt * - 1);\n    }\n\n    console.log(result);\n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02753_1", "type": "JavaScript", "obfuscated": "'use strict;';\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8')['trim']()['split']('\\x0a'));\nfunction main(_0x36a737) {\n    _0x36a737 = _0x36a737[0x0]['split']('');\n    let _0x4b0d20 = 0x2;\n    let _0x5b8de6 = !![];\n    while (_0x4b0d20 > 0x0) {\n        if (_0x36a737[_0x4b0d20] !== _0x36a737[0x0]) {\n            _0x5b8de6 = ![];\n            break;\n        }\n        _0x4b0d20--;\n    }\n    console['log'](_0x5b8de6 ? 'No' : 'Yes');\n}", "test_cases": [["ABA", "Yes"], ["BBA", "Yes"], ["BBB", "No"]], "original": "\"use strict;\";\nmain(\n  require(\"fs\")\n    .readFileSync(\"/dev/stdin\", \"UTF-8\")\n    .trim()\n    .split(\"\\n\")\n);\nfunction main(input) {\n  input = input[0].split(\"\");\n  let num = 2;\n  let isSame = true;\n  while (num > 0) {\n    if (input[num] !== input[0]) {\n      isSame = false;\n      break;\n    }\n    num--;\n  }\n  console.log(isSame ? \"No\" : \"Yes\");\n}\n", "language": "JavaScript"}
{"filename": "p02765_1", "type": "JavaScript", "obfuscated": "function main(_0x3ee942) {\n    var _0xf89492 = _0x3ee942['trim']();\n    var _0x2b7f1b = _0xf89492['split']('\\x20');\n    var _0x41b080 = parseInt(_0x2b7f1b[0x0], 0xa);\n    var _0x206b9b = parseInt(_0x2b7f1b[0x1], 0xa);\n    var _0x48f313;\n    if (_0x41b080 >= 0xa) {\n        _0x48f313 = _0x206b9b;\n    } else {\n        var _0x4fe9bb = 0x64 * (0xa - _0x41b080);\n        _0x48f313 = _0x206b9b + _0x4fe9bb;\n    }\n    return _0x48f313;\n}\nconsole['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 2919", "3719"], ["22 3051", "3051"]], "original": "function main(input) {\n  var marginDelete = input.trim();\n  var args = marginDelete.split(' ');\n  var n = parseInt(args[0], 10);\n  var r = parseInt(args[1], 10);\n  var hiddenRating;\n  if ( n >= 10) {\n    hiddenRating = r;\n  } else {\n    var argument = 100*(10 - n);\n    hiddenRating = r + argument;\n  }\n  return hiddenRating;\n}\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02785_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x54b235) {\n    const _0x356797 = _0x54b235['split']('\\x0a'), _0x5e89ae = parseInt(_0x356797[0x0]['split']('\\x20')[0x1]), _0x32599c = _0x356797[0x1]['split']('\\x20');\n    var _0x47c633 = _0x32599c['sort']()['splice'](0x0, _0x32599c['length'] - _0x5e89ae)['reduce']((_0x5ef26c, _0x43f4c4) => _0x5ef26c + parseInt(_0x43f4c4), 0x0);\n    console['log'](_0x47c633);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 1\n4 1 5", "5"], ["8 9\n7 9 3 2 3 8 4 6", "0"], ["3 0\n1000000000 1000000000 1000000000", "3000000000"]], "original": "'use strict';\n\nfunction main(input) {\n  const args = input.split('\\n'),\n        K = parseInt(args[0].split(' ')[1]),\n        H = args[1].split(' ');\n  var ans = H.sort().splice(0, H.length-K).reduce((a, x) => a + parseInt(x), 0);\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02831_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x522a17 => {\n    let _0x54800a = _0x522a17['trim']()['split']('\\x20')['map'](_0x451567 => parseInt(_0x451567, 0xa));\n    let _0x1ec3b6 = _0x54800a[0x0];\n    let _0x573983 = _0x54800a[0x1];\n    let _0x5043d1 = 0x0;\n    let _0x1b2590 = 0x0;\n    let _0x146ec1 = _0x1ec3b6;\n    let _0x2d2a64 = _0x573983;\n    if (_0x1ec3b6 >= _0x573983) {\n        while (_0x573983 > 0x0) {\n            let _0x310b72 = _0x1ec3b6 % _0x573983;\n            _0x1ec3b6 = _0x573983;\n            _0x573983 = _0x310b72;\n        }\n        _0x1b2590 = _0x1ec3b6;\n    } else {\n        while (_0x1ec3b6 > 0x0) {\n            _0x5043d1 = _0x573983 % _0x1ec3b6;\n            _0x573983 = _0x1ec3b6;\n            _0x1ec3b6 = _0x5043d1;\n        }\n        _0x1b2590 = _0x573983;\n    }\n    let _0x2c4af9 = _0x146ec1 * _0x2d2a64 / _0x1b2590;\n    console['log'](_0x2c4af9);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3", "6"], ["123 456", "18696"], ["100000 99999", "9999900000"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split(' ').map(v=>parseInt(v,10));\n   let m = xs[0];\n   let n = xs[1];\n   let r = 0;\n   let d = 0;\n   let x = m;\n   let y = n;\n   if(m >= n) {\n        \twhile (n > 0) {\n        \t\tlet r = m % n; \n        \t\tm = n;     \n        \t\tn = r;     \n        \t}\n        \td = m;\n        }else{ \n        \twhile (m > 0) {\n        \t\tr = n % m; \n        \t\tn = m;     \n        \t\tm = r;     \n        \t}\n        \td = n;\n        }\n        let ans = x*y/d;\n        console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p02836_1", "type": "JavaScript", "obfuscated": "function Main(_0x40baf4) {\n    _0x40baf4 = _0x40baf4['split']('\\x0a');\n    T = _0x40baf4[0x0];\n    var _0x14bf3c = T['length'];\n    var _0xbb6526 = _0x14bf3c % 0x2;\n    q = Math['floor'](_0x14bf3c / 0x2);\n    cnt = 0x0;\n    i = 0x0;\n    for (i = 0x0; i < q; i++) {\n        if (T['substr'](i, 0x1) == T['substr'](_0x14bf3c - 0x1 - i, 0x1)) {\n            cnt = cnt + 0x0;\n        } else {\n            cnt++;\n        }\n    }\n    console['log'](cnt);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["redcoder", "1"], ["vvvvvv", "0"], ["abcdabc", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n    input = input.split(\"\\n\");\n    T = input[0];\n  // console.log(T);\n   \n    var len = T.length;\n  //console.log(len);\n var p = len%2;q = Math.floor(len/2);cnt=0;i=0;\n// console.log (p,q);\n //console.log(T.substr(i,1));\n// console.log(T.substr(len-1,1));\n  \n\t  for(i = 0;i<q;i++)\n\t  {if (T.substr(i,1)==T.substr(len-1-i,1)){cnt=cnt+0;}\n\t  else{cnt++;}\n\t\t  \n\t  }\n\t  console.log(cnt);\n\t\n\n\t\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02881_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3e1789) {\n    const _0x5d70b2 = parseInt(_0x3e1789);\n    let _0x4ecbb5 = _0x5d70b2 - 0x1;\n    for (let _0xfa7f36 = 0x2; _0xfa7f36 <= Math['sqrt'](_0x5d70b2); ++_0xfa7f36) {\n        let _0x4c4d49 = _0x5d70b2 / _0xfa7f36;\n        if (Number['isInteger'](_0x4c4d49) && _0xfa7f36 + _0x4c4d49 - 0x2 < _0x4ecbb5) {\n            _0x4ecbb5 = _0xfa7f36 + _0x4c4d49 - 0x2;\n        }\n    }\n    console['log'](_0x4ecbb5);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "5"], ["50", "13"], ["10000000019", "10000000018"]], "original": "'use strict';\nfunction main(input) {\n  const N = parseInt(input);\n  let distance = N - 1;\n  for (let a = 2; a <= Math.sqrt(N); ++a) {\n    let b = N / a;\n    if (Number.isInteger(b) && a+b-2 < distance) {\n      distance = a+b-2;\n    }\n  }\n  console.log(distance);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03013_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3bdf68 => {\n    _0x3bdf68 = _0x3bdf68['trim']()['split']('\\x0a');\n    const _0xea6ef8 = parseInt(_0x3bdf68[0x0]['split']('\\x20')[0x0]);\n    const _0xfa6faa = parseInt(_0x3bdf68[0x0]['split']('\\x20')[0x1]);\n    const _0x3d3348 = _0x3bdf68['slice'](0x1, _0xfa6faa + 0x1);\n    let _0x2d7b16 = [...Array(_0xea6ef8 + 0x1)]['fill'](0x1);\n    let _0x213b44 = -0x1;\n    let _0x2391fa = ![];\n    for (let _0x61ab26 in _0x3d3348) {\n        if (_0x213b44 + 0x1 === _0x3d3348[_0x61ab26]) {\n            _0x2391fa = !![];\n        }\n        _0x2d7b16[_0x3d3348[_0x61ab26]] = 0x0;\n        _0x213b44 = _0x3d3348[_0x61ab26];\n    }\n    for (let _0x9e7c97 = 0x2; _0x9e7c97 <= _0xea6ef8; _0x9e7c97++) {\n        _0x2d7b16[_0x9e7c97] = _0x2d7b16[_0x9e7c97] * (_0x2d7b16[_0x9e7c97 - 0x2] + _0x2d7b16[_0x9e7c97 - 0x1]) % 0x3b9aca07;\n    }\n    console['log'](_0x2d7b16[_0xea6ef8]);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 1\n3", "4"], ["10 2\n4\n5", "0"], ["100 5\n1\n23\n45\n67\n89", "608200469"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const M = parseInt(arg[0].split(\" \")[1]);\n    \n    const dangers = arg.slice(1, M + 1);\n    \n    let answer = [...Array(N + 1)].fill(1);\n    let broken = -1;\n    let NG     = false;\n    \n    for(let i in dangers) {\n        if(broken + 1 === dangers[i]) {\n            NG = true;\n        }\n        \n        answer[dangers[i]] = 0;\n        broken = dangers[i];\n    }\n    \n    for(let i=2; i<=N; i++) {\n        answer[i] = answer[i] * (answer[i - 2] + answer[i - 1]) % 1000000007;\n    }\n    \n    console.log(answer[N]);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03078_1", "type": "JavaScript", "obfuscated": "const main = _0x105c9c => {\n    var _0x356cf0 = _0x105c9c['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x3];\n    var _0x57844e = _0x105c9c['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x0];\n    var _0x2cf0fd = _0x105c9c['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x1];\n    var _0x560a39 = _0x105c9c['trim']()['split']('\\x0a')[0x0]['split']('\\x20')[0x2];\n    var _0x3f4935 = _0x105c9c['trim']()['split']('\\x0a')[0x1]['split']('\\x20')['sort']((_0x24a8b9, _0x53a09e) => _0x53a09e - _0x24a8b9)['map'](_0x1c49d8 => _0x1c49d8 - 0x0);\n    var _0x30ecd0 = _0x105c9c['trim']()['split']('\\x0a')[0x2]['split']('\\x20')['sort']((_0x2c7788, _0x5dc1ad) => _0x5dc1ad - _0x2c7788)['map'](_0x26e315 => _0x26e315 - 0x0);\n    var _0x3a7c0c = _0x105c9c['trim']()['split']('\\x0a')[0x3]['split']('\\x20')['sort']((_0x75a3a6, _0x3f8aa6) => _0x3f8aa6 - _0x75a3a6)['map'](_0x39a4fb => _0x39a4fb - 0x0);\n    var _0xd65e70 = [];\n    var _0x31e7d8 = 0x0, _0x4146b9 = 0x0, _0x38c13f = 0x0;\n    var _0x447bee = 0x0;\n    for (var _0x55f7da = 0x0; _0x55f7da < _0x57844e; _0x55f7da++) {\n        for (var _0x7e192c = 0x0; _0x7e192c < _0x2cf0fd; _0x7e192c++) {\n            for (var _0x554880 = 0x0; _0x554880 < _0x560a39; _0x554880++) {\n                if (_0x55f7da * _0x7e192c * _0x554880 > _0x356cf0)\n                    break;\n                var _0x1e7cb2 = _0x3f4935[_0x55f7da] + _0x30ecd0[_0x7e192c] + _0x3a7c0c[_0x554880];\n                _0xd65e70['push'](_0x1e7cb2);\n            }\n        }\n    }\n    console['log'](_0xd65e70['sort']((_0x3774d4, _0x24b08e) => _0x24b08e - _0x3774d4)['filter']((_0x4d8a08, _0x439247) => _0x439247 < _0x356cf0)['join']('\\x0a'));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8'));", "test_cases": [["2 2 2 8\n4 6\n1 5\n3 8", "19\n17\n15\n14\n13\n12\n10\n8"], ["3 3 3 5\n1 10 100\n2 20 200\n1 10 100", "400\n310\n310\n301\n301"], ["10 10 10 20\n7467038376 5724769290 292794712 2843504496 3381970101 8402252870 249131806 6310293640 6690322794 6082257488\n1873977926 2576529623 1144842195 1379118507 6003234687 4925540914 3902539811 3326692703 484657758 2877436338\n4975681328 8974383988 2882263257 7690203955 514305523 6679823484 4263279310 585966808 3752282379 620585736", "23379871545\n22444657051\n22302177772\n22095691512\n21667941469\n21366963278\n21287912315\n21279176669\n21160477018\n21085311041\n21059876163\n21017997739\n20703329561\n20702387965\n20590247696\n20383761436\n20343962175\n20254073196\n20210218542\n20150096547"]], "original": "const main = (input) => {\n  var K = input.trim().split(\"\\n\")[0].split(\" \")[3];\n  var x = input.trim().split(\"\\n\")[0].split(\" \")[0];\n  var y = input.trim().split(\"\\n\")[0].split(\" \")[1];\n  var z = input.trim().split(\"\\n\")[0].split(\" \")[2];\n\n  var a = input.trim().split(\"\\n\")[1].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var b = input.trim().split(\"\\n\")[2].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var c = input.trim().split(\"\\n\")[3].split(\" \").sort((a,b)=>b-a).map(v=>v-0);\n  var anss = [];\n  var idxa=0,idxb=0,idxc=0;\n  var min = 0;\n  for(var i=0;i<x;i++){\n    for(var j=0;j<y;j++){\n      for(var k=0;k<z;k++){\n        if(i*j*k > K) break;\n        var sum = a[i]+b[j]+c[k];\n        anss.push(sum);\n      }\n    }\n  }\n  console.log(anss.sort((a,b)=>b-a).filter((v,i)=>i<K).join(\"\\n\"));\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));\n", "language": "JavaScript"}
{"filename": "p03095_1", "type": "JavaScript", "obfuscated": "function roop(_0x3fd058, _0x57af78, _0x46c489) {\n    var _0x57575c = 0x0, _0x2b16a0 = 0x0;\n    if (_0x3fd058 < _0x46c489) {\n        for (_0x2b16a0 = _0x3fd058; _0x2b16a0 < _0x46c489; _0x2b16a0++) {\n            _0x57575c += roop(_0x2b16a0 + 0x1, _0x57af78, _0x46c489);\n        }\n        return _0x57af78[_0x3fd058] + _0x57af78[_0x3fd058] * _0x57575c;\n    } else {\n        return _0x57af78[_0x3fd058];\n    }\n}\nfunction main(_0x6a2cd0) {\n    var _0x3f967e, _0x4e85cb, _0x366466, _0x40f3af, _0x6c848 = 0x0, _0x5f42c9 = 0x0;\n    var _0x4e9552 = _0x6a2cd0['split']('\\x0a');\n    var _0x2ecada = Number(_0x4e9552[0x0]);\n    var _0x160eb5 = _0x4e9552[0x1]['split']('');\n    _0x366466 = {};\n    for (_0x3f967e = 0x0; _0x3f967e < _0x2ecada; ++_0x3f967e) {\n        if (_0x366466[_0x160eb5[_0x3f967e]]) {\n            _0x366466[_0x160eb5[_0x3f967e]]++;\n        } else {\n            _0x366466[_0x160eb5[_0x3f967e]] = 0x1;\n            _0x5f42c9++;\n        }\n    }\n    _0x40f3af = [];\n    for (key in _0x366466) {\n        _0x40f3af['push'](_0x366466[key]);\n    }\n    for (_0x3f967e = 0x0; _0x3f967e < _0x5f42c9; ++_0x3f967e) {\n        _0x6c848 += roop(_0x3f967e, _0x40f3af, _0x5f42c9 - 0x1);\n    }\n    _0x6c848 = Math['round'](_0x6c848);\n    console['log'](_0x6c848 % 0x3b9aca07);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\nabcd", "15"], ["3\nbaa", "5"], ["5\nabcab", "17"]], "original": "function roop(depth, A, end){\n    var ans=0, i=0\n    if (depth < end){\n        for (i=depth;i<end;i++){\n            ans+=roop(i+1, A, end)\n        }\n        return A[depth] + A[depth] * ans\n    }else{\n        return A[depth]\n    }\n}\n\nfunction main(input) {\n    var i, j, A, B, ans=0, count=0\n    var inputs = input.split(\"\\n\")\n    var arg = Number(inputs[0])\n    var str = inputs[1].split(\"\")\n    //A=new Array(arg[0])\n    A={}\n    for (i=0;i<arg;++i){\n        if (A[str[i]]){\n            A[str[i]]++\n        }else{\n            A[str[i]]=1\n            count++\n        }\n    }\n    B=[]\n    for(key in A){\n        B.push(A[key])\n    }\n    for(i=0;i<count;++i){\n        ans+=roop(i, B, count-1)\n    }\n    ans=Math.round(ans)\n    console.log(ans%(1000000007))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03102_1", "type": "JavaScript", "obfuscated": "function Main(_0x477d3b) {\n    _0x477d3b = _0x477d3b['split']('\\x0a');\n    tmp0 = _0x477d3b[0x0]['split']('\\x20');\n    N = Number(tmp0[0x0]);\n    M = Number(tmp0[0x1]);\n    C = Number(tmp0[0x2]);\n    B = _0x477d3b[0x1]['split']('\\x20');\n    var _0x326ac1 = 0x0;\n    for (var _0x57cd27 = 0x0; _0x57cd27 < N; _0x57cd27++) {\n        A = _0x477d3b[0x2 + _0x57cd27]['split']('\\x20');\n        var _0x2d160e = 0x0;\n        for (var _0x4e91b7 = 0x0; _0x4e91b7 < M; _0x4e91b7++) {\n            _0x2d160e += Number(A[_0x4e91b7]) * Number(B[_0x4e91b7]);\n        }\n        if (_0x2d160e + C > 0x0) {\n            _0x326ac1++;\n        }\n    }\n    console['log'](_0x326ac1);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 -10\n1 2 3\n3 2 1\n1 2 2", "1"], ["5 2 -4\n-2 5\n100 41\n100 40\n-3 0\n-6 -2\n18 -13", "2"], ["3 3 0\n100 -100 0\n0 100 100\n100 100 100\n-100 100 100", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\")\n  tmp0 = input[0].split(\" \")\n  N = Number(tmp0[0])\n  M = Number(tmp0[1])\n  C = Number(tmp0[2])\n  B = input[1].split(\" \")\n\n  var ans = 0;\n  for(var i = 0; i < N; i++)\n  {\n    A = input[2 + i].split(\" \")\n    var tmpSum = 0\n    for(var j = 0; j < M; j++)\n    {\n      tmpSum += Number(A[j]) * Number(B[j])\n    }\n    if( (tmpSum+ C) > 0){\n      ans++;\n    }\n\n  }\n  console.log(ans)\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main(\"3 2\\n2 1\\n\")", "language": "JavaScript"}
{"filename": "p03146_1", "type": "JavaScript", "obfuscated": "const collatz = _0x55364d => {\n    if (_0x55364d % 0x2 === 0x0) {\n        _0x55364d /= 0x2;\n    } else {\n        _0x55364d = 0x3 * _0x55364d + 0x1;\n    }\n    return _0x55364d;\n};\nconst main = _0x25a565 => {\n    const _0x1da81d = _0x25a565['trim']()['split']('\\x0a');\n    const _0x5d4056 = parseInt(_0x1da81d[0x0]);\n    if (_0x5d4056 === 0x1 || _0x5d4056 === 0x2 || _0x5d4056 === 0x4) {\n        console['log'](0x4);\n        return;\n    }\n    let _0x5555b7 = _0x5d4056;\n    let _0xbf9ece = 0x0;\n    let _0x1a4ca7 = 0x0;\n    for (let _0x25cc74 = 0x1;; _0x25cc74++) {\n        if (_0x5555b7 === 0x4 && _0xbf9ece === 0x0) {\n            _0xbf9ece = _0x25cc74;\n        } else if (_0x5555b7 === 0x4 && _0xbf9ece !== 0x0) {\n            _0x1a4ca7 = _0x25cc74;\n            break;\n        }\n        _0x5555b7 = collatz(_0x5555b7);\n    }\n    console['log'](_0x1a4ca7);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8", "5"], ["7", "18"], ["54", "114"]], "original": "const collatz = (n) => {\n  if (n % 2 === 0) {\n    n /= 2\n  } else {\n    n = 3 * n + 1\n  }\n\n  return n\n}\n\nconst main = stdin => {\n  const input = stdin.trim().split('\\n')\n  const s = parseInt(input[0])\n\n  if (s === 1 || s === 2 || s === 4) {\n    console.log(4)\n    return\n  }\n\n  let tmp = s\n  let first = 0\n  let second = 0\n  for (let i = 1; ; i++) {\n    if (tmp === 4 && first === 0) {\n      first = i\n    } else if (tmp === 4 && first !== 0) {\n      second = i\n      break\n    }\n    tmp = collatz(tmp)\n  }\n\n  console.log(second)\n}\n// 標準入力\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript"}
{"filename": "p03252_1", "type": "JavaScript", "obfuscated": "function Main(_0xed009f) {\n    _0xed009f = _0xed009f['split']('\\x0a');\n    var _0x17ab2d = _0xed009f[0x0];\n    var _0x5ecf18 = _0xed009f[0x1];\n    var _0xea66be = 'Yes';\n    while (_0x5ecf18['length'] != 0x0) {\n        for (i = 0x1; i < _0x5ecf18['length']; i++) {\n            if (_0x5ecf18['substr'](0x0, 0x1) == _0x5ecf18['substr'](i, 0x1)) {\n                if (_0x17ab2d['substr'](0x0, 0x1) != _0x17ab2d['substr'](i, 0x1)) {\n                    _0xea66be = 'No';\n                    break;\n                }\n            }\n            if (_0x17ab2d['substr'](0x0, 0x1) == _0x17ab2d['substr'](i, 0x1)) {\n                if (_0x5ecf18['substr'](0x0, 0x1) != _0x5ecf18['substr'](i, 0x1)) {\n                    _0xea66be = 'No';\n                    break;\n                }\n            }\n        }\n        if (_0xea66be == 'No') {\n            break;\n        }\n        _0x17ab2d = _0x17ab2d['substr'](0x1);\n        _0x5ecf18 = _0x5ecf18['substr'](0x1);\n    }\n    console['log']('%s', _0xea66be);\n}\nfunction debug() {\n    var _0x4243f6 = document['getElementById']('input')['value'];\n    Main(_0x4243f6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["azzel\napple", "Yes"], ["chokudai\nredcoder", "No"], ["abcdefghijklmnopqrstuvwxyz\nibyhqfrekavclxjstdwgpzmonu", "Yes"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var S = input[0];\n  var T = input[1];\n  var ans=\"Yes\";\n  while(T.length!=0){\n    for(i=1;i<T.length;i++){\n      if(T.substr(0,1)==T.substr(i,1)){\n        if(S.substr(0,1)!=S.substr(i,1)){\n          ans=\"No\";\n          break;\n        }\n      }\n      if(S.substr(0,1)==S.substr(i,1)){\n        if(T.substr(0,1)!=T.substr(i,1)){\n          ans=\"No\";\n          break;\n        }\n      }\n    }\n    if(ans==\"No\"){\n      break;\n    }\n    S=S.substr(1);\n    T=T.substr(1);\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03272_1", "type": "JavaScript", "obfuscated": "a = require('fs')['readFileSync']('/dev/stdin', 'utf8')['match'](/\\d+/g);\nconsole['log'](a[0x0] - a[0x1] + 0x1);", "test_cases": [["4 2", "3"], ["1 1", "1"], ["15 11", "5"]], "original": "a=require('fs').readFileSync('/dev/stdin','utf8').match(/\\d+/g);console.log(a[0]-a[1]+1)", "language": "JavaScript"}
{"filename": "p03280_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nA = l[0x0] * 0x1 - 0x1;\nB = l[0x1] * 0x1 - 0x1;\nconsole['log'](A * B);", "test_cases": [["2 2", "1"], ["5 7", "24"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nA = l[0] * 1 - 1\nB = l[1] * 1 - 1\nconsole.log(A * B)", "language": "JavaScript"}
{"filename": "p03472_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x43b9e6 => {\n    _0x43b9e6 = _0x43b9e6['trim']()['split']('\\x0a');\n    const _0x3f9ccb = parseInt(_0x43b9e6[0x0]['split']('\\x20')[0x0]);\n    let _0xc168c9 = parseInt(_0x43b9e6[0x0]['split']('\\x20')[0x1]);\n    let _0x30544e = _0x43b9e6['slice'](0x1, _0x3f9ccb + 0x1)['map'](_0x3f365b => _0x3f365b['split']('\\x20')['map'](_0x233ae4 => parseInt(_0x233ae4)));\n    _0x30544e['sort']((_0x159815, _0x50ff1e) => _0x50ff1e[0x0] - _0x159815[0x0]);\n    const _0x45029c = _0x30544e[0x0][0x0];\n    _0x30544e = _0x30544e['sort']((_0x12811a, _0x3b057b) => _0x3b057b[0x1] - _0x12811a[0x1])['filter'](_0x3543d1 => _0x3543d1[0x1] > _0x45029c);\n    let _0xfd25ae = 0x0;\n    let _0x5e8665 = 0x0;\n    for (let _0x57187b in _0x30544e) {\n        _0xc168c9 -= _0x30544e[_0x57187b][0x1];\n        _0x5e8665++;\n        if (_0xc168c9 <= 0x0) {\n            console['log'](_0x5e8665);\n            return;\n        }\n    }\n    const _0x20fef6 = Math['ceil'](_0xc168c9 / _0x45029c);\n    console['log'](_0x5e8665 + _0x20fef6);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 10\n3 5", "3"], ["2 10\n3 5\n2 6", "2"], ["4 1000000000\n1 1\n1 10000000\n1 30000000\n1 99999999", "860000004"], ["5 500\n35 44\n28 83\n46 62\n31 79\n40 43", "9"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N  = parseInt(arg[0].split(\" \")[0]);\n    let H  = parseInt(arg[0].split(\" \")[1]);\n    let ab = arg.slice(1, N + 1).map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    ab.sort((a,b)=>b[0] - a[0]);\n    \n    const aMax = ab[0][0];\n    \n    ab = ab.sort((a,b)=>b[1] - a[1]).filter(n=>n[1] > aMax);\n\n    let damage = 0;\n    let throwAttack = 0;\n    \n    for(let i in ab) {\n        H -= ab[i][1];\n        throwAttack++;\n        \n        if(H <= 0) {\n            console.log(throwAttack);\n            return;\n        }\n    }\n    \n    const directAttack = Math.ceil(H / aMax);\n    \n    console.log(throwAttack + directAttack);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03695_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar g_input = '';\nprocess['stdin']['on']('data', function (_0x5af855) {\n    g_input += _0x5af855;\n});\nprocess['stdin']['on']('end', function () {\n    main(g_input['split'](/\\r?\\n/));\n});\nfunction main(_0x4e12ed) {\n    var _0xab66df = parseInt(_0x4e12ed[0x0]);\n    var _0xf5b7c5 = _0x4e12ed[0x1]['split']('\\x20')['map'](function (_0x23f956) {\n        return parseInt(_0x23f956);\n    });\n    var _0x2c64d2 = new Array(0x7)['fill'](![]);\n    var _0x286ee6 = 0x0;\n    var _0x5cc7fc = 0x0;\n    for (var _0xaa9334 = 0x0; _0xaa9334 < _0xab66df; _0xaa9334++) {\n        for (var _0x410d71 = 0x0; _0x410d71 < 0x9; _0x410d71++) {\n            if (_0x410d71 != 0x8) {\n                if (_0xf5b7c5[_0xaa9334] < (_0x410d71 + 0x1) * 0x190) {\n                    if (!_0x2c64d2[_0x410d71]) {\n                        _0x2c64d2[_0x410d71] = !![];\n                        _0x5cc7fc += 0x1;\n                    }\n                    break;\n                }\n            } else {\n                _0x286ee6 += 0x1;\n            }\n        }\n    }\n    var _0x49acb6 = _0x5cc7fc;\n    if (_0x49acb6 == 0x0 && _0xab66df > 0x0) {\n        _0x49acb6 = 0x1;\n        if (_0x286ee6 > 0x0) {\n            _0x286ee6 -= 0x1;\n        }\n    }\n    var _0x2ac681 = Math['min'](0x8, _0x49acb6 + _0x286ee6);\n    console['log']('' + _0x49acb6 + '\\x20' + _0x2ac681);\n}", "test_cases": [["4\n2100 2500 2700 2700", "2 2"], ["5\n1100 1900 2800 3200 3200", "3 5"], ["20\n800 810 820 830 840 850 860 870 880 890 900 910 920 930 940 950 960 970 980 990", "1 1"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\nprocess.stdin.on('end', function() {\n    main(g_input.split(/\\r?\\n/));\n});\n\nfunction main(inputs) {\n  var N = parseInt(inputs[0]);\n  var rs = inputs[1].split(\" \").map(function(a){return parseInt(a);});\n  var a = new Array(7).fill(false);\n  var a8 = 0;\n  var count = 0;\n  for(var i = 0; i < N; i++){\n    for(var j = 0; j < 9; j++){\n      if(j != 8){\n        if(rs[i] < (j+1)*400){\n          if(!a[j]){\n            a[j] = true;\n            count += 1;\n          }\n          break;\n        }\n      }else{\n        a8 += 1;\n      }\n    }\n  }\n  var min = count;\n  if(min == 0 && N>0){\n    min = 1;\n    if(a8>0){\n      a8 -=1;\n    }\n  }\n  var max = Math.min(8, min + a8);\n  console.log(\"\"+min+\" \"+max);\n}\n", "language": "JavaScript"}
{"filename": "p03777_1", "type": "JavaScript", "obfuscated": "function Main(_0x4a16e5) {\n    _0x4a16e5 = _0x4a16e5['split']('\\x20');\n    var _0x374511 = String(_0x4a16e5[0x0]);\n    var _0x3d9849 = String(_0x4a16e5[0x1]);\n    if (_0x374511 === 'H' && _0x3d9849 === 'H' || _0x374511 === 'D' && _0x3d9849 === 'D') {\n        console['log']('H');\n    } else {\n        console['log']('D');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["H H", "H"], ["D H", "D"], ["D D", "H"]], "original": "function Main(input){\n  input = input.split(' ');\n  var a = String(input[0]);\n  var b = String(input[1]);\n\n  if( a === 'H' && b === 'H' || a === 'D' && b === 'D') {\n      console.log('H');\n  } else {\n    console.log('D');\n\n\n}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03854_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x1438c0) {\n    const _0x5c64cf = [\n        'dream',\n        'dreamer',\n        'erase',\n        'eraser'\n    ];\n    for (let _0x3245c8 in _0x5c64cf) {\n        _0x5c64cf[_0x3245c8] = reverse(_0x5c64cf[_0x3245c8]);\n    }\n    _0x1438c0 = reverse(_0x1438c0);\n    while (_0x1438c0['length'] > 0x0) {\n        let _0xa83dc9 = ![];\n        for (let _0x42dd3f of _0x5c64cf) {\n            if (_0x1438c0['slice'](0x0, _0x42dd3f['length']) == _0x42dd3f) {\n                _0x1438c0 = _0x1438c0['substr'](_0x42dd3f['length']);\n                _0xa83dc9 = !![];\n            }\n        }\n        if (_0xa83dc9 == ![])\n            break;\n    }\n    if (_0x1438c0['length'] <= 0x0) {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nfunction reverse(_0x44625a) {\n    return _0x44625a['split']('')['reverse']()['join']('');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["erasedream", "YES"], ["dreameraser", "YES"], ["dreamerer", "NO"]], "original": "\"use strict\";\nfunction Main(input) {\n  const arr = [\"dream\", \"dreamer\", \"erase\", \"eraser\"];\n\n  for (let i in arr) {\n    arr[i] = reverse(arr[i]);\n  }\n  input = reverse(input);\n  while (input.length > 0) {\n    let flag = false;\n    for (let s of arr) {\n      // console.log(\n      //   `input: ${input.slice(0, s.length)}, s: ${s}, length: ${s.length}`\n      // );\n      if (input.slice(0, s.length) == s) {\n        input = input.substr(s.length);\n        flag = true;\n      }\n    }\n    if (flag == false) break;\n  }\n  if (input.length <= 0) {\n    console.log(\"YES\");\n  } else {\n    console.log(\"NO\");\n  }\n}\n\nfunction reverse(str) {\n  return str.split(\"\").reverse().join(\"\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript"}
{"filename": "p02265_1", "type": "JavaScript", "obfuscated": "const config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nconst line = require('fs')['readFileSync'](config['input'], 'utf-8')['split'](config['newline']);\nconst insert = (_0x2b160b, _0x29e629) => _0x2b160b['unshift'](_0x29e629);\nconst del = (_0x2a1cc3, _0x5dddf0) => {\n    for (var _0x493a7c = 0x0; _0x493a7c < _0x2a1cc3['length']; _0x493a7c++) {\n        if (_0x5dddf0 === _0x2a1cc3[_0x493a7c])\n            break;\n    }\n    if (_0x493a7c !== _0x2a1cc3['length'])\n        _0x2a1cc3['splice'](_0x493a7c, 0x1);\n};\nconst delFirst = _0x138390 => _0x138390['shift']();\nconst delLast = _0x28b325 => _0x28b325['pop']();\nconst cmds = line['slice'](0x1);\nconst ans = cmds['reduce']((_0xc0069c, _0x210368) => {\n    const _0x411e95 = _0x210368['split']('\\x20');\n    switch (_0x411e95[0x0]) {\n    case 'insert':\n        insert(_0xc0069c, parseInt(_0x411e95[0x1]));\n        break;\n    case 'delete':\n        del(_0xc0069c, parseInt(_0x411e95[0x1]));\n        break;\n    case 'deleteFirst':\n        delFirst(_0xc0069c);\n        break;\n    case 'deleteLast':\n        delLast(_0xc0069c);\n        break;\n    }\n    return _0xc0069c;\n}, [])['map'](_0x3955eb => _0x3955eb['toString']())['join']('\\x20');\nconsole['log'](ans);", "test_cases": [["7\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5", "6 1 2"], ["9\ninsert 5\ninsert 2\ninsert 3\ninsert 1\ndelete 3\ninsert 6\ndelete 5\ndeleteFirst\ndeleteLast", "1"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nconst insert = (arr, x) => arr.unshift(x);\nconst del = (arr, x) => {\n    for (var i = 0; i < arr.length; i++) {\n        if (x === arr[i]) break;\n    }\n    if (i !== arr.length) arr.splice(i, 1);\n};\nconst delFirst = arr => arr.shift();\nconst delLast = arr => arr.pop();\n\nconst cmds = line.slice(1);\nconst ans = cmds.reduce((acc, x) => {\n    const cmd = x.split(' ');\n    switch (cmd[0]) {\n        case 'insert':\n            insert(acc, parseInt(cmd[1]));\n            break;\n        case 'delete':\n            del(acc, parseInt(cmd[1]));\n            break;\n        case 'deleteFirst':\n            delFirst(acc);\n            break;\n        case 'deleteLast':\n            delLast(acc);\n            break;\n    }\n\n    return acc;\n}, []).map(x => x.toString()).join(' ');\n\nconsole.log(ans);\n\n", "language": "JavaScript"}
{"filename": "p02413_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x1a7920) {\n    function _0x3c835e(_0x48166c, _0x4739fe) {\n        return _0x48166c + _0x4739fe;\n    }\n    function _0x50b71e(_0x3cfa7d) {\n        var _0xd80000 = _0x3cfa7d['shift']();\n        _0x3cfa7d['map'](function (_0x2f2a35) {\n            return _0x2f2a35['push'](_0x2f2a35['reduce'](_0x3c835e));\n        });\n        var _0xb9fe36 = [];\n        for (var _0x795f6 = 0x0; _0x795f6 < _0xd80000[0x1] + 0x1; _0x795f6++) {\n            var _0x4721a = 0x0;\n            for (var _0x1280b5 = 0x0; _0x1280b5 < _0xd80000[0x0]; _0x1280b5++) {\n                _0x4721a += _0x3cfa7d[_0x1280b5][_0x795f6];\n            }\n            _0xb9fe36['push'](_0x4721a);\n        }\n        _0x3cfa7d['push'](_0xb9fe36);\n        return _0x3cfa7d['join']('\\x0a')['replace'](/,/g, '\\x20');\n    }\n    var _0x1bb677 = _0x1a7920['toString']()['trim']()['split']('\\x0a');\n    var _0x2bd3cc = _0x1bb677['map'](function (_0x34c4b8) {\n        return _0x34c4b8['split']('\\x20')['map'](Number);\n    });\n    console['log'](_0x50b71e(_0x2bd3cc));\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4 5\n1 1 3 4 5\n2 2 2 4 5\n3 3 0 1 1\n2 3 4 4 6", "1 1 3 4 5 14\n2 2 2 4 5 15\n3 3 0 1 1 8\n2 3 4 4 6 19\n8 9 9 13 17 56"]], "original": "'use strict';\n(function(stdin) {\n  //declare function\n  function sumLine(a, b) {\n    return a + b;\n  }\n\n  function result(matrix) {\n    var size = matrix.shift();\n    matrix.map(function(v) {\n      return v.push(v.reduce(sumLine));\n    });\n    var sumColumn = [];\n    for (var i = 0; i < size[1] + 1; i++) {\n      var sumValue = 0;\n      for (var j = 0; j < size[0]; j++) {\n        sumValue += matrix[j][i];\n      }\n      sumColumn.push(sumValue);\n    }\n    matrix.push(sumColumn);\n    return matrix.join('\\n').replace(/,/g, ' ');\n  }\n  //declare variable\n  var inputs = stdin.toString().trim().split('\\n');\n  var sheet = inputs.map(function(v) {\n    return v.split(' ').map(Number);\n  });\n  //main\n\n  //display\n  console.log(result(sheet));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02553_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar t = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x18fc5d => {\n    lines['push'](_0x18fc5d);\n});\nreader['on']('close', () => {\n    var _0x105b13 = lines[0x0]['split']('\\x20');\n    var _0x3b662d = parseInt(_0x105b13[0x0]);\n    var _0x7fed07 = parseInt(_0x105b13[0x1]);\n    var _0x2c4290 = parseInt(_0x105b13[0x2]);\n    var _0xa7619f = parseInt(_0x105b13[0x3]);\n    var _0x36afa9 = _0x3b662d * _0x2c4290;\n    var _0x1a937e = _0x3b662d * _0xa7619f;\n    var _0x2e1e7a = _0x7fed07 * _0x2c4290;\n    var _0x2dbc19 = _0x7fed07 * _0xa7619f;\n    t['push'](_0x36afa9);\n    t['push'](_0x1a937e);\n    t['push'](_0x2e1e7a);\n    t['push'](_0x2dbc19);\n    console['log'](Math['max']['apply'](null, t));\n});", "test_cases": [["1 2 1 1", "2"], ["3 5 -4 -2", "-6"], ["-1000000000 0 -1000000000 0", "1000000000000000000"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar lines = [];\nvar t = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var x = lines[0].split(' ');\n  var a = parseInt(x[0]);\n  var b= parseInt(x[1]);\n  var c = parseInt(x[2]);\n  var d = parseInt(x[3]);\n  var ac = a * c;\n  var ad = a * d;\n  var bc = b * c;\n  var bd = b * d;\n  t.push(ac);\n  t.push(ad);\n  t.push(bc);\n  t.push(bd);\n  console.log(Math.max.apply(null,t));\n});", "language": "JavaScript"}
{"filename": "p02576_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0xe04702) {\n    _0xe04702 = _0xe04702['trim']()['split']('\\x20');\n    const _0x2e38a2 = Number(_0xe04702[0x0]);\n    const _0x7b0acb = Number(_0xe04702[0x1]);\n    const _0xf63b92 = Number(_0xe04702[0x2]);\n    let _0x571198 = 0x0;\n    let _0x214803;\n    for (_0x214803 = 0x0; _0x571198 < _0x2e38a2; _0x214803++) {\n        _0x571198 += _0x7b0acb;\n    }\n    console['log'](_0xf63b92 * _0x214803);\n}\nfunction numberSort(_0x20095e) {\n    _0x20095e['sort'](f);\n    return _0x20095e;\n}\nvar f = function (_0x3bb015, _0x1746e1) {\n    return _0x3bb015 - _0x1746e1;\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["20 12 6", "12"], ["1000 1 1000", "1000000"]], "original": "\"use strict\";\n\nfunction main(input) {\n  input = input.trim().split(\" \");\n  const N = Number(input[0]);\n  const X = Number(input[1]);\n  const T = Number(input[2]);\n  let ans = 0;\n\n  let i;\n  for (i = 0; ans < N; i++) {\n    ans += X;\n  }\n\n  console.log(T * i);\n}\n\nfunction numberSort(array) {\n  array.sort(f);\n  return array;\n}\n\nvar f = function (a, b) {\n  return a - b;\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf-8\"));\n", "language": "JavaScript"}
{"filename": "p02614_1", "type": "JavaScript", "obfuscated": "const fs = require('fs');\nconst [h, w, k, ...m] = fs['readFileSync']('/dev/stdin', 'utf8')['split'](/\\s/);\nfunction solve(_0x48ca33, _0x11421a = 0x0, _0x381b76 = 0x0, _0x3533cf) {\n    if (_0x48ca33['length'] === 0x0 || _0x48ca33[0x0]['length'] === 0x0) {\n        return 0x0;\n    }\n    const _0x2cfc52 = _0x48ca33['join']('')['replace'](/\\./g, '')['length'];\n    let _0xc7a861 = 0x0;\n    if (_0x2cfc52 == k) {\n        _0xc7a861++;\n    }\n    if (_0x2cfc52 < k) {\n        return _0xc7a861;\n    }\n    if (!_0x3533cf) {\n        for (let _0x5a35dc = _0x381b76; _0x5a35dc < _0x48ca33['length']; _0x5a35dc++) {\n            _0xc7a861 += solve([\n                ..._0x48ca33['slice'](0x0, _0x5a35dc),\n                ..._0x48ca33['slice'](_0x5a35dc + 0x1)\n            ], _0x11421a, _0x5a35dc < _0x381b76 ? _0x381b76 : _0x5a35dc);\n        }\n    }\n    for (let _0x278be7 = _0x11421a; _0x278be7 < _0x48ca33[0x0]['length']; _0x278be7++) {\n        _0xc7a861 += solve(_0x48ca33['map'](_0x4eaebe => _0x4eaebe['slice'](0x0, _0x278be7) + _0x4eaebe['slice'](_0x278be7 + 0x1)), _0x278be7 < _0x11421a ? _0x11421a : _0x278be7, _0x381b76, !![]);\n    }\n    return _0xc7a861;\n}\nconsole['log'](solve(m));", "test_cases": [["2 3 2\n..#\n###", "5"], ["2 3 4\n..#\n###", "1"], ["2 2 3\n##\n##", "0"], ["6 6 8\n..##..\n.#..#.\n#....#\n######\n#....#\n#....#", "208"]], "original": "const fs = require('fs');\nconst [h, w, k, ...m] = fs.readFileSync('/dev/stdin', 'utf8').split(/\\s/);\n\nfunction solve(m, x=0, y=0, f) {\n  if (m.length === 0 || m[0].length === 0) {\n    return 0;\n  }\n  const n = m.join('').replace(/\\./g, '').length;\n  let a = 0;\n  if (n == k) {\n    a++;\n  }\n  if (n < k) {\n\t  return a;\n  }\n  if (!f) {\n    for (let i = y; i < m.length; i++) {\n      a += solve([...m.slice(0, i), ...m.slice(i + 1)], x, i < y ? y : i);\n    }\n  }\n  for (let i = x; i < m[0].length; i++) {\n    a += solve(m.map(l => l.slice(0, i) + l.slice(i + 1)), i < x ? x : i, y, true);\n  }\n  return a;\n}\n\nconsole.log(solve(m));", "language": "JavaScript"}
{"filename": "p02627_1", "type": "JavaScript", "obfuscated": "function main(_0x4b1f69) {\n    _0x4b1f69 = _0x4b1f69['split']('\\x0a');\n    var _0x431c21 = _0x4b1f69[0x0];\n    var _0x2bafc2 = _0x4b1f69[0x0]['toUpperCase']();\n    if (_0x431c21 == _0x2bafc2) {\n        console['log']('A');\n    } else {\n        console['log']('a');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["B", "A"], ["a", "a"]], "original": "function main(input){\n\tinput=input.split(\"\\n\");\nvar answer=input[0];\nvar answerA=input[0].toUpperCase();\n\nif(answer==answerA){console.log(\"A\")}else{console.log(\"a\")}\n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02684_1", "type": "JavaScript", "obfuscated": "function main(_0x2bf08d) {\n    const _0x288e69 = _0x2bf08d['trim']()['split']('\\x0a');\n    let [_0x5865c0, _0xc0ded8] = _0x288e69[0x0]['split']('\\x20');\n    _0x5865c0 = +_0x5865c0;\n    _0xc0ded8 = BigInt(_0xc0ded8);\n    const _0x4cfd5d = _0x288e69[0x1]['split']('\\x20')['map'](Number);\n    const _0x50c0f9 = new Map();\n    let _0x4469ef = 0x1;\n    while (_0xc0ded8 > 0x0) {\n        const _0x49083b = _0x50c0f9['get'](_0x4469ef);\n        if (!_0x49083b) {\n            _0x50c0f9['set'](_0x4469ef, BigInt(_0x50c0f9['size']));\n            _0x4469ef = _0x4cfd5d[_0x4469ef - 0x1];\n            _0xc0ded8--;\n        } else {\n            const _0x53a42f = BigInt(_0x50c0f9['size']) - _0x49083b;\n            const _0x4bd97f = _0xc0ded8 % _0x53a42f;\n            for (let [_0x2bab06, _0x2161c6] of _0x50c0f9) {\n                if (_0x2161c6 == _0x49083b + _0x4bd97f) {\n                    _0x4469ef = _0x2bab06;\n                    break;\n                }\n            }\n            _0xc0ded8 = 0x0;\n        }\n    }\n    console['log'](_0x4469ef);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5\n3 2 4 1", "4"], ["6 727202214173249351\n6 5 2 5 3 2", "2"]], "original": "function main(input) {\n  const lines = input.trim().split(\"\\n\");\n  let [n, k] = lines[0].split(' ');\n  n = +n;\n  k = BigInt(k);\n  const towns = lines[1].split(' ').map(Number);\n\n  const visited = new Map();\n  let pos = 1;\n  while (k > 0) {\n    const i = visited.get(pos);\n    if (!i) {\n      visited.set(pos, BigInt(visited.size));\n      pos = towns[pos - 1];\n      k--;\n    } else {\n      const cycle = BigInt(visited.size) - i;\n      const rest = k % cycle;\n      for (let [key, value] of visited) {\n        if (value == i + rest) {\n          pos = key;\n          break;\n        }\n      }\n      k = 0;\n    }\n  }\n  \n  console.log(pos);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02730_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst is_palindrome = _0x7476c5 => {\n    let _0x19609e = _0x7476c5['length'];\n    for (let _0x198420 = 0x0; _0x198420 < _0x19609e; _0x198420++) {\n        if (_0x7476c5[_0x198420] !== _0x7476c5[_0x19609e - _0x198420 - 0x1])\n            return ![];\n    }\n    return !![];\n};\nconst main = _0x4710f0 => {\n    const _0xd2ee62 = _0x4710f0['split']('\\x0a');\n    const _0x4e6878 = _0xd2ee62[0x0];\n    const _0x2b0661 = _0x4e6878['length'];\n    if (is_palindrome(_0x4e6878) && is_palindrome(_0x4e6878['substring'](0x0, (_0x2b0661 - 0x1) / 0x2)) && is_palindrome(_0x4e6878['substr']((_0x2b0661 + 0x3) / 0x2 - 0x1)))\n        console['log']('Yes');\n    else\n        console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["akasaka", "Yes"], ["level", "No"], ["atcoder", "No"]], "original": "\"use strict\";\n\nconst is_palindrome = s => {\n    let n = s.length;\n    for (let i = 0; i < n; i++) {\n        if (s[i] !== s[n - i - 1]) return false;\n    }\n\n    return true;\n}\n\nconst main = (input) => {\n    const spi = input.split('\\n');\n    const s = spi[0];\n    const n = s.length;\n\n    if (is_palindrome(s)\n        && is_palindrome(s.substring(0, (n-1)/2))\n        && is_palindrome(s.substr((n+3)/2-1)))\n        console.log(\"Yes\");\n    else\n        console.log(\"No\");\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02742_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x4c5c6c => {\n    const _0x2fbb58 = _0x4c5c6c['trim']()['split']('\\x20');\n    const _0x383d43 = parseInt(_0x2fbb58[0x0]);\n    const _0x143f02 = parseInt(_0x2fbb58[0x1]);\n    let _0x5831d1 = 0x0;\n    if (_0x383d43 % 0x2 != 0x0 && _0x143f02 % 0x2 != 0x0) {\n        _0x5831d1 = Math['ceil'](_0x383d43 * _0x143f02 / 0x2);\n    } else {\n        _0x5831d1 = _0x383d43 * _0x143f02 / 0x2;\n    }\n    console['log'](_0x5831d1);\n    return _0x5831d1;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5", "10"], ["7 3", "11"], ["1000000000 1000000000", "500000000000000000"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split(' ')\n  const H = parseInt(tmp[0])\n  const W = parseInt(tmp[1])\n\n  let result = 0\n\n  if ((H % 2) != 0 && (W % 2) != 0) {\n    result = Math.ceil(H * W / 2)\n  } else {\n    result = H * W / 2\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02777_1", "type": "JavaScript", "obfuscated": "function Main(_0x10f4af) {\n    let _0x3d3421 = _0x10f4af['split']('\\x0a');\n    let _0x11bf19 = _0x3d3421[0x0]['split']('\\x20');\n    let _0x42cedb = _0x3d3421[0x1]['split']('\\x20');\n    if (_0x11bf19[0x0] === _0x3d3421[0x2])\n        _0x42cedb[0x0]--;\n    else\n        _0x42cedb[0x1]--;\n    console['log'](_0x42cedb[0x0] + '\\x20' + _0x42cedb[0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["red blue\n3 4\nred", "2 4"], ["red blue\n5 5\nblue", "5 4"]], "original": "function Main(impu) {\n\tlet imput = impu.split(\"\\n\");\n\tlet name = imput[0].split(\" \");\n\tlet count = imput[1].split(\" \");\n\t\n\tif(name[0] === imput[2]) \n\t\tcount[0]--;\n\telse\n\t\tcount[1]--;\n\t\n\tconsole.log(count[0] + \" \" + count[1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02818_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2b7f76) {\n    const _0x59f831 = _0x2b7f76['split']('\\x0a');\n    const _0x49d72e = Number(_0x59f831[0x0]['split']('\\x20')[0x0]);\n    const _0x1d6751 = Number(_0x59f831[0x0]['split']('\\x20')[0x1]);\n    const _0x543eac = Number(_0x59f831[0x0]['split']('\\x20')[0x2]);\n    console['log'](_0x49d72e > _0x543eac ? _0x49d72e - _0x543eac : 0x0, _0x49d72e + _0x1d6751 > _0x543eac ? _0x49d72e + _0x1d6751 - _0x543eac : 0x0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 3", "0 2"], ["500000000000 500000000000 1000000000000", "0 0"]], "original": "'use strict';\nfunction Main(inputs) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  const input = inputs.split(\"\\n\");\n  const a = Number(input[0].split(' ')[0]);\n  const b = Number(input[0].split(' ')[1]);\n  const k = Number(input[0].split(' ')[2]);\n\n  console.log((a > k ? a - k : 0), (a + b > k ? a + b - k : 0));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02832_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x5409c2 => {\n    lines['push'](_0x5409c2);\n});\nreader['on']('close', () => {\n    var _0x73457d = lines[0x0];\n    var _0x2cfb31 = lines[0x1]['split']('\\x20')['map'](_0x36d8d9 => Number(_0x36d8d9));\n    var _0x36ff4b = 0x0;\n    var _0x4347b3 = 0x1;\n    var _0x19b545 = 0x0;\n    for (var _0x43ad66 = 0x0; _0x43ad66 < _0x73457d; _0x43ad66++) {\n        if (_0x2cfb31[_0x4347b3 - 0x1] == _0x4347b3) {\n            _0x19b545 += _0x4347b3;\n            _0x4347b3++;\n        } else {\n            _0x36ff4b++;\n            _0x2cfb31['splice'](_0x4347b3 - 0x1, 0x1);\n        }\n    }\n    var _0x470aca = ![];\n    if (_0x2cfb31['length'] == 0x0) {\n        _0x470aca = !![];\n    }\n    if (_0xd8a97a(_0x2cfb31['length']) != _0x19b545) {\n        _0x470aca = !![];\n    }\n    if (_0x36ff4b == 0x0 && _0x470aca) {\n        console['log'](0x0);\n    } else {\n        if (_0x470aca) {\n            console['log'](-0x1);\n        } else {\n            console['log'](_0x36ff4b);\n        }\n    }\n    function _0xd8a97a(_0x152588) {\n        return _0x152588 * (_0x152588 + 0x1) * 0.5;\n    }\n});", "test_cases": [["3\n2 1 2", "1"], ["3\n2 2 2", "-1"], ["10\n3 1 4 1 5 9 2 6 5 3", "7"], ["1\n1", "0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n  var count = lines[0]\n  var ary = lines[1].split(\" \").map( x => Number(x) )\n  var break_count = 0\n  // 1から開始\n  var tmp_count = 1\n  var c = 0\n  for(var i = 0; i < count; i++) {\n    if (ary[tmp_count - 1] == tmp_count) {\n      c+=tmp_count\n      tmp_count++\n    } else {\n      break_count++\n      ary.splice(tmp_count - 1, 1)\n    }\n  }\n  // 順列になっているか\n  var judge = false\n  if (ary.length == 0) {\n    judge = true\n  }\n  if (sum(ary.length) != c) {\n    judge = true\n  }\n\n  // 順列になっているかつ 0 の時は0\n  if (break_count == 0 && judge) {\n    console.log(0)\n  } else {\n    if (judge) {\n      console.log(-1)\n    } else {\n      console.log(break_count)\n    }\n  }\n  \n  // 1~nの総和を求める関数\n  function sum(n) {\n    return (n * (n + 1) * 0.5)\n  }\n});\n", "language": "JavaScript"}
{"filename": "p02847_1", "type": "JavaScript", "obfuscated": "function Main(_0x11427e) {\n    var _0x4512df;\n    switch (_0x11427e) {\n    case 'SUN':\n        _0x4512df = '7';\n        break;\n    case 'MON':\n        _0x4512df = '6';\n        break;\n    case 'TUE':\n        _0x4512df = '5';\n        break;\n    case 'WED':\n        _0x4512df = '4';\n        break;\n    case 'THU':\n        _0x4512df = '3';\n        break;\n    case 'FRI':\n        _0x4512df = '2';\n        break;\n    case 'SAT':\n        _0x4512df = '1';\n        break;\n    }\n    console['log'](_0x4512df);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["SAT", "1"], ["SUN", "7"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n  \tvar result;\n  \tswitch (input){\n        case 'SUN':\n        result = '7';\n        break;\n        case 'MON':\n        result = '6';\n        break;\n        case 'TUE':\n        result = '5';\n        break;\n        case 'WED':\n        result = '4';\n        break;\n        case 'THU':\n        result = '3';\n        break;\n        case 'FRI':\n        result = '2';\n        break;\n        case 'SAT':\n        result = '1';\n        break;\n    }\n\tconsole.log(result);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02886_1", "type": "JavaScript", "obfuscated": "function Main(_0x30f1f4) {\n    var _0x30f1f4 = _0x30f1f4['split']('\\x0a');\n    const _0x5f1106 = Number(_0x30f1f4[0x0]);\n    const _0x5306f0 = _0x30f1f4[0x1]['split']('\\x20')['map'](_0x28ab59 => Number(_0x28ab59));\n    var _0x2882f5 = 0x0;\n    for (var _0x3a5284 = 0x0; _0x3a5284 < _0x5f1106; _0x3a5284++) {\n        for (var _0x34ff50 = _0x3a5284 + 0x1; _0x34ff50 < _0x5f1106; _0x34ff50++) {\n            _0x2882f5 += _0x5306f0[_0x3a5284] * _0x5306f0[_0x34ff50];\n        }\n    }\n    console['log'](_0x2882f5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n3 1 2", "11"], ["7\n5 0 7 8 3 3 2", "312"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var input = input.split('\\n');\n  const n = Number(input[0])\n  const ocps = input[1].split(' ').map(ocp => Number(ocp));\n  var r = 0;\n  for (var i = 0; i < n; i++) {\n    for (var j = i+1; j < n; j++) {\n      r += ocps[i] * ocps[j]\n    }\n  }\n  console.log(r)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02887_1", "type": "JavaScript", "obfuscated": "function main(_0xedae35) {\n    var _0x7bd4e0 = _0xedae35['split'](/\\n/g);\n    var _0x43ea60 = _0x7bd4e0[0x1];\n    var _0x26df33 = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n    for (i = 0x0; i < _0x26df33['length']; i++) {\n        var _0x30f00d = _0x26df33['substr'](i, 0x1);\n        var _0x4a28a7 = new RegExp(_0x30f00d + '+', 'g');\n        _0x43ea60 = _0x43ea60['replace'](_0x4a28a7, _0x30f00d);\n    }\n    console['log'](_0x43ea60['length']);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10\naabbbbaaca", "5"], ["5\naaaaa", "1"], ["20\nxxzaffeeeeddfkkkkllq", "10"]], "original": "function main(arg) {\n    var arg2 = arg.split(/\\n/g);\n\tvar honbun = arg2[1];\n\tvar alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n\tfor(i=0;i<alphabet.length;i++){\n\t\tvar iro = alphabet.substr(i,1);\n\t\tvar regkun = new RegExp(iro+\"+\", 'g');\n\t\thonbun = honbun.replace(regkun,iro);\n\t}\n\tconsole.log(honbun.length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02922_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x2648d5 => {\n    let _0x55a1cc = _0x2648d5['trim']()['split']('\\x20')['map'](_0x573a02 => parseInt(_0x573a02, 0xa));\n    let _0x21ca1e = _0x55a1cc[0x0];\n    let _0x32a44a = _0x55a1cc[0x1];\n    let _0x1cac44 = 0x1;\n    if (_0x21ca1e >= _0x32a44a) {\n        _0x1cac44 = 0x1;\n    } else {\n        for (let _0x4de37d = 0x1; (_0x21ca1e - 0x1) * _0x4de37d + 0x1 < _0x32a44a; _0x4de37d++) {\n            _0x1cac44 += 0x1;\n        }\n    }\n    console['log'](_0x1cac44);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 10", "3"], ["8 9", "2"], ["8 8", "1"]], "original": "\"use strict\"\nconst Main = (input) =>{\n\tlet xs = input.trim().split(' ').map(v=>parseInt(v,10));\n    let a = xs[0];\n    let b = xs[1];\n    let ans = 1;\n    if(a >= b){\n    ans = 1;\n    }else{ \n    \tfor(let i = 1; (a-1)*i+1 < b; i++){\n    \tans += 1;\n    \t}\n    }\n    console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p02946_1", "type": "JavaScript", "obfuscated": "var input = '\\x0a3\\x207\\x0a';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar k = arr[0x0]['split']('\\x20')[0x0] - 0x0;\nvar x = arr[0x0]['split']('\\x20')[0x1] - 0x0;\nvar a = [];\nfor (var i = x - k + 0x1; i < x + k; i++)\n    a['push'](i);\nconsole['log'](a['join']('\\x20'));", "test_cases": [["3 7", "5 6 7 8 9"], ["4 0", "-3 -2 -1 0 1 2 3"], ["1 100", "100"]], "original": "var input=`\n3 7\n`;\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar k=arr[0].split(\" \")[0]-0;\nvar x=arr[0].split(\" \")[1]-0;\nvar a=[];\nfor(var i=x-k+1;i<x+k;i++)a.push(i);\nconsole.log(a.join(\" \"));", "language": "JavaScript"}
{"filename": "p02947_1", "type": "JavaScript", "obfuscated": "function main(_0xcc883e) {\n    const _0x49ddcf = _0xcc883e['split']('\\x0a')['slice'](0x1)['map'](_0x20124f => Array['from'](_0x20124f)['sort']()['join'](''));\n    let _0x3894fc = 0x0;\n    const _0xad1158 = new Map();\n    for (let _0x216cde = 0x0; _0x216cde < _0x49ddcf['length']; _0x216cde++) {\n        if (!_0xad1158['has'](_0x49ddcf[_0x216cde])) {\n            _0xad1158['set'](_0x49ddcf[_0x216cde], 0x1);\n            continue;\n        }\n        _0x3894fc += _0xad1158['get'](_0x49ddcf[_0x216cde]);\n        _0xad1158['set'](_0x49ddcf[_0x216cde], _0xad1158['get'](_0x49ddcf[_0x216cde]) + 0x1);\n    }\n    console['log'](_0x3894fc);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\nacornistnt\npeanutbomb\nconstraint", "1"], ["2\noneplustwo\nninemodsix", "0"], ["5\nabaaaaaaaa\noneplustwo\naaaaaaaaba\ntwoplusone\naaaabaaaaa", "4"]], "original": "function main(input) {\n  const list = input.split(\"\\n\")\n    .slice(1)\n    .map(s => Array.from(s).sort().join(''))\n\n  let totalCount = 0\n  const map = new Map()\n  for (let i = 0; i < list.length; i++) {\n    if (!map.has(list[i])) {\n      map.set(list[i], 1)\n      continue;\n    }\n    totalCount += map.get(list[i])\n    map.set(list[i], map.get(list[i]) + 1)\n  }\n\n  console.log(totalCount)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02996_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5c2fe1) {\n    const _0xca6ecd = _0x5c2fe1['split']('\\x0a');\n    const _0x559914 = parseInt(_0xca6ecd['shift']());\n    const _0x29908b = [];\n    for (let _0x1aace4 = 0x0; _0x1aace4 < _0x559914; _0x1aace4++) {\n        _0x29908b['push'](_0xca6ecd[_0x1aace4]['split']('\\x20')['map'](_0x1a7253 => parseInt(_0x1a7253)));\n    }\n    _0x29908b['sort']((_0x279ca4, _0x93eb79) => _0x279ca4[0x1] - _0x93eb79[0x1]);\n    let _0x5901ee = 'Yes';\n    let _0x3d9dc1 = 0x0;\n    for (let _0x2a1854 = 0x0; _0x2a1854 < _0x559914; _0x2a1854++) {\n        _0x3d9dc1 += _0x29908b[_0x2a1854][0x0];\n        if (_0x3d9dc1 > _0x29908b[_0x2a1854][0x1]) {\n            _0x5901ee = 'No';\n            break;\n        }\n    }\n    console['log'](_0x5901ee);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n2 4\n1 9\n1 8\n4 9\n3 12", "Yes"], ["3\n334 1000\n334 1000\n334 1000", "No"], ["30\n384 8895\n1725 9791\n170 1024\n4 11105\n2 6\n578 1815\n702 3352\n143 5141\n1420 6980\n24 1602\n849 999\n76 7586\n85 5570\n444 4991\n719 11090\n470 10708\n1137 4547\n455 9003\n110 9901\n15 8578\n368 3692\n104 1286\n3 4\n366 12143\n7 6649\n610 2374\n152 7324\n4 7042\n292 11386\n334 5720", "Yes"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = parseInt(lines.shift());\n  const tasks = []\n  for(let i=0;i<N;i++){\n    tasks.push( lines[i].split(' ').map( x => parseInt(x) ) );\n  }\n\n  tasks.sort( (a,b) => a[1]-b[1])\n\n  let result = 'Yes';\n  let sum = 0\n  for(let i=0;i<N;i++){\n    sum += tasks[i][0]\n    if(sum > tasks[i][1]){\n      result = 'No';\n      break;\n    }\n  }\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03029_1", "type": "JavaScript", "obfuscated": "(_0x349b18 => {\n    var _0xab9868 = _0x349b18['trim']()['split']('\\x0a');\n    var _0xccd038 = _0xab9868['shift']()['split']('\\x20')['map'](Number);\n    console['log'](Math['floor']((_0xccd038[0x0] * 0x3 + _0xccd038[0x1]) / 0x2));\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 3", "3"], ["0 1", "0"], ["32 21", "58"]], "original": "((stdin) => {\n  var lines = stdin.trim().split('\\n');\n  var inputs = lines.shift().split(' ').map(Number);\n  console.log(Math.floor((inputs[0] * 3 + inputs[1]) / 2));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03035_1", "type": "JavaScript", "obfuscated": "function main(_0x1b2813) {\n    const _0x3edbc5 = _0x1b2813['split']('\\x20')['map'](_0x3616ac => parseInt(_0x3616ac, 0xa));\n    console['log'](_0x3edbc5[0x0] >= 0xd ? _0x3edbc5[0x1] : _0x3edbc5[0x0] >= 0x6 ? _0x3edbc5[0x1] / 0x2 : 0x0);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["30 100", "100"], ["12 100", "50"], ["0 100", "0"]], "original": "function main(input) {\n  const nums = input.split(\" \").map(num => parseInt(num, 10))\n  console.log(nums[0] >= 13 ? nums[1] : nums[0] >= 6 ? nums[1] / 2 : 0)\n}\n \nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript"}
{"filename": "p03059_1", "type": "JavaScript", "obfuscated": "function Main(_0x5c4c22) {\n    _0x5c4c22 = _0x5c4c22['split']('\\x20');\n    var _0x1b9f7a = parseInt(_0x5c4c22[0x0], 0xa);\n    var _0x439b8a = parseInt(_0x5c4c22[0x1], 0xa);\n    var _0x4bd5a9 = parseInt(_0x5c4c22[0x2], 0xa);\n    console['log']('%d', Math['floor']((_0x4bd5a9 + 0.5) / _0x1b9f7a) * _0x439b8a);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 5 7", "10"], ["3 2 9", "6"], ["20 20 19", "0"]], "original": "function Main(input) {\n  input = input.split(\" \");\n  var a = parseInt(input[0], 10);\n  var b = parseInt(input[1], 10);\n  var t = parseInt(input[2], 10);\n  console.log('%d',Math.floor((t + 0.5) / a) * b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03062_1", "type": "JavaScript", "obfuscated": "function main(_0x5ecf06) {\n    const _0x15ebe6 = _0x5ecf06['split']('\\x0a');\n    const _0x13f076 = parseInt(_0x15ebe6[0x0], 0xa);\n    const _0x417825 = _0x15ebe6[0x1]['split']('\\x20')['map'](_0x392421 => parseInt(_0x392421));\n    dp = [];\n    for (var _0x449b1f = 0x0; _0x449b1f < _0x13f076; _0x449b1f++) {\n        var _0x516747 = [];\n        if (_0x449b1f == 0x0) {\n            _0x516747 = [\n                _0x417825[_0x449b1f],\n                _0x417825[_0x449b1f] * -0x1\n            ];\n        } else {\n            var _0x5965c3 = Math['max'](dp[_0x449b1f - 0x1][0x0] + _0x417825[_0x449b1f], dp[_0x449b1f - 0x1][0x1] - _0x417825[_0x449b1f]);\n            var _0x502738 = Math['max'](dp[_0x449b1f - 0x1][0x0] - _0x417825[_0x449b1f], dp[_0x449b1f - 0x1][0x1] + _0x417825[_0x449b1f]);\n            _0x516747 = [\n                _0x5965c3,\n                _0x502738\n            ];\n        }\n        dp['push'](_0x516747);\n    }\n    console['log'](dp[_0x13f076 - 0x1][0x0]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n-10 5 -4", "19"], ["5\n10 -4 -8 -11 3", "30"], ["11\n-1000000000 1000000000 -1000000000 1000000000 -1000000000 0 1000000000 -1000000000 1000000000 -1000000000 1000000000", "10000000000"]], "original": "function main(input) {\n  const formatted_input = input.split('\\n');\n\n  const N = parseInt(formatted_input[0], 10);\n  const As = formatted_input[1].split(' ').map(x => parseInt(x));\n\n  dp = [];\n\n  for(var i=0;i<N;i++){\n    var results = [];\n    if(i==0){\n      results=[As[i], As[i]*-1]\n    }else{\n      var not_flipped = Math.max(dp[i-1][0] + As[i], dp[i-1][1] - As[i]);\n      var flipped = Math.max(dp[i-1][0] - As[i], dp[i-1][1] + As[i]);\n      results = [not_flipped, flipped]\n    }\n    dp.push(results);\n  }\n\n  //console.log(dp);\n  console.log(dp[N-1][0]);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n\n", "language": "JavaScript"}
{"filename": "p03081_1", "type": "JavaScript", "obfuscated": "function Main(_0x34730b) {\n    var _0x3a88bc = [];\n    for (var _0x5ccb4c = 0x0; _0x5ccb4c < _0x34730b['split']('\\x0a')[0x0]['split']('\\x20')[0x0]; _0x5ccb4c++) {\n        _0x3a88bc['push'](0x1);\n    }\n    var _0x16c9a4 = _0x34730b['split']('\\x0a')[0x1];\n    for (var _0x5ccb4c = 0x2; _0x5ccb4c < _0x34730b['split']('\\x0a')['length']; _0x5ccb4c++) {\n        var _0x347904 = _0x34730b['split']('\\x0a')[_0x5ccb4c]['split']('\\x20');\n        var _0x488773 = [];\n        for (var _0xc9d0e7 = 0x0; _0xc9d0e7 < _0x3a88bc['length']; _0xc9d0e7++) {\n            _0x488773['push'](0x0);\n        }\n        if (_0x347904[0x1] == 'L') {\n            for (var _0xc9d0e7 = 0x0; _0xc9d0e7 < _0x16c9a4['length']; _0xc9d0e7++) {\n                if (_0xc9d0e7 != 0x0 || _0x16c9a4[_0xc9d0e7] != _0x347904[0x0])\n                    _0x488773[_0x16c9a4[_0xc9d0e7] == _0x347904[0x0] ? _0xc9d0e7 - 0x1 : _0xc9d0e7] += _0x3a88bc[_0xc9d0e7];\n            }\n        } else {\n            for (var _0xc9d0e7 = 0x0; _0xc9d0e7 < _0x16c9a4['length']; _0xc9d0e7++) {\n                if (_0xc9d0e7 != _0x3a88bc['length'] - 0x1 || _0x16c9a4[_0xc9d0e7] != _0x347904[0x0])\n                    _0x488773[_0x16c9a4[_0xc9d0e7] == _0x347904[0x0] ? _0xc9d0e7 + 0x1 : _0xc9d0e7] += _0x3a88bc[_0xc9d0e7];\n            }\n        }\n        _0x3a88bc = _0x488773['concat']();\n    }\n    var _0x1f8e81 = 0x0;\n    for (var _0x5ccb4c of _0x3a88bc)\n        _0x1f8e81 += _0x5ccb4c;\n    console['log'](_0x1f8e81);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4\nABC\nA L\nB L\nB R\nA R", "2"], ["8 3\nAABCBDBA\nA L\nB R\nA R", "5"], ["10 15\nSNCZWRCEWB\nB R\nR R\nE R\nW R\nZ L\nS R\nQ L\nW L\nB R\nC L\nA L\nN L\nE R\nZ L\nS L", "3"]], "original": "function Main(input){\n  var ary = [];\n  for(var i=0;i<input.split(\"\\n\")[0].split(\" \")[0];i++){\n  \tary.push(1);\n  }\n  var str = input.split(\"\\n\")[1];\n  for(var i=2;i<input.split(\"\\n\").length;i++){\n  \tvar jumon = input.split(\"\\n\")[i].split(\" \");\n    var newAry = [];\n    for(var j=0;j<ary.length;j++){\n        newAry.push(0);\n    }\n    if(jumon[1]==\"L\"){\n      for(var j=0;j<str.length;j++){\n        if(j!=0||str[j]!=jumon[0])newAry[str[j]==jumon[0]?j-1:j]+=ary[j];\n      }\n    }else{\n      for(var j=0;j<str.length;j++){\n        if(j!=ary.length-1||str[j]!=jumon[0])newAry[str[j]==jumon[0]?j+1:j]+=ary[j];\n      }\n    }\n    ary=newAry.concat();\n  }\n  var golems = 0;\n  for(var i of ary)golems+=i;\n  console.log(golems);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03141_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x3b779c) {\n    var _0x5a1fe6 = _0x3b779c['split']('\\x0a');\n    var _0x52cd31 = _0x5a1fe6['shift']() - 0x0;\n    var _0x4dd255 = new Array(_0x52cd31);\n    for (var _0x201f46 = 0x0; _0x201f46 < _0x52cd31; _0x201f46++) {\n        var _0x36768e = _0x5a1fe6[_0x201f46]['split']('\\x20');\n        _0x4dd255[_0x201f46] = {\n            'taka': _0x36768e[0x0] - 0x0,\n            'aoki': _0x36768e[0x1] - 0x0\n        };\n        _0x4dd255[_0x201f46]['sa'] = _0x4dd255[_0x201f46]['aoki'] - _0x4dd255[_0x201f46]['taka'];\n    }\n    _0x4dd255['sort'](function (_0x2a0bd0, _0x2762f7) {\n        return _0x2762f7['sa'] - _0x2a0bd0['sa'];\n    });\n    _0x4dd255['sort'](function (_0x3c0dd4, _0x506458) {\n        return _0x506458['taka'] - _0x3c0dd4['taka'];\n    });\n    var _0xb8b3e2 = 0x0;\n    for (var _0x201f46 = 0x0; _0x201f46 < _0x52cd31; _0x201f46++) {\n        if (_0x201f46 % 0x2 == 0x0) {\n            _0xb8b3e2 += _0x4dd255[_0x201f46]['taka'];\n            _0x4dd255[_0x201f46]['taka'] = 0x0;\n        } else {\n            _0xb8b3e2 -= _0x4dd255[_0x201f46]['aoki'];\n            _0x4dd255[_0x201f46]['aoki'] = 0x0;\n        }\n    }\n    console['log'](_0xb8b3e2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n10 10\n20 20\n30 30", "20"], ["3\n20 10\n20 20\n20 30", "20"], ["6\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000\n1 1000000000", "-2999999997"]], "original": "\"use strict\";\nfunction Main(input) {\n    var lines = input.split(\"\\n\");\n    var N = lines.shift() - 0;\n    var ryo = new Array(N);\n    for (var n = 0; n < N; n++) {\n        var nums = lines[n].split(\" \");\n        ryo[n] = {\n            taka : nums[0] - 0,\n            aoki : nums[1] - 0,\n        };\n        ryo[n].sa = ryo[n].aoki - ryo[n].taka;\n    }\n    ryo.sort(function(a, b) { return b.sa - a.sa; });\n    ryo.sort(function(a, b) { return b.taka - a.taka; });\n    var koufuku = 0;\n    for (var n = 0; n < N; n++) {\n        if (n % 2 == 0) {\n            koufuku += ryo[n].taka;\n            ryo[n].taka = 0;\n        } else {\n            koufuku -= ryo[n].aoki;\n            ryo[n].aoki = 0;\n        }\n    }\n    console.log(koufuku);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03150_1", "type": "JavaScript", "obfuscated": "'use strict';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x372968 => {\n    let _0x3caba6 = _0x372968;\n    let _0x37be77 = [\n        'k',\n        'e',\n        'y',\n        'e',\n        'n',\n        'c',\n        'e'\n    ];\n    let _0x5cf6fd = 'keyence';\n    if (_0x3caba6['indexOf']('keyence') != -0x1) {\n        console['log']('YES');\n        return;\n    }\n    let _0x43b674 = '';\n    let _0x15047d = ![];\n    for (let _0x2152b2 = 0x0; _0x2152b2 < 0x6; _0x2152b2++) {\n        _0x43b674 += _0x37be77['shift']();\n        let _0x47a0e8 = _0x5cf6fd['slice'](_0x2152b2 + 0x1);\n        if (_0x3caba6['indexOf'](_0x43b674) != -0x1 && _0x3caba6['indexOf'](_0x47a0e8) != -0x1) {\n            _0x15047d = !![];\n            break;\n        }\n    }\n    if (_0x15047d)\n        console['log']('YES');\n    else\n        console['log']('NO');\n});", "test_cases": [["keyofscience", "YES"], ["mpyszsbznf", "NO"], ["ashlfyha", "NO"], ["keyence", "YES"]], "original": "\"use strict\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\n\nvar reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on(\"line\", line => {\n  let word = line;\n  let arr = [\"k\", \"e\", \"y\", \"e\", \"n\", \"c\", \"e\"];\n  let keyence = \"keyence\";\n\n  if (word.indexOf(\"keyence\") != -1) {\n    console.log(\"YES\");\n    return;\n  }\n\n  let str = \"\";\n  let ans = false;\n  for (let i = 0; i < 6; i++) {\n    str += arr.shift();\n    let tmp = keyence.slice(i + 1);\n    if (word.indexOf(str) != -1 && word.indexOf(tmp) != -1) {\n     ans = true;\n     break;\n    }\n  }\n\n  if (ans) console.log(\"YES\");\n  else console.log(\"NO\");\n});\n", "language": "JavaScript"}
{"filename": "p03162_1", "type": "JavaScript", "obfuscated": "function main(_0x274e0f) {\n    let _0x32b588 = _0x274e0f['split']('\\x0a');\n    let _0x21d7f1 = [];\n    for (let _0x2ebdce = 0x1; _0x2ebdce < _0x32b588['length']; _0x2ebdce++) {\n        let _0x1f7adf = _0x32b588[_0x2ebdce]['split']('\\x20')['map'](_0x263738 => parseInt(_0x263738, 0xa));\n        _0x21d7f1['push'](_0x1f7adf);\n    }\n    let _0x3eea0a = [\n        0x0,\n        0x0,\n        0x0\n    ];\n    for (let _0x2a5578 = 0x0; _0x2a5578 < _0x21d7f1['length']; _0x2a5578++) {\n        let _0x497e3f = _0x21d7f1[_0x2a5578];\n        let _0x2da44f = [\n            0x0,\n            0x0,\n            0x0\n        ];\n        for (let _0x5c721e = 0x0; _0x5c721e < 0x3; _0x5c721e++) {\n            for (let _0x13d6a3 = 0x0; _0x13d6a3 < 0x3; _0x13d6a3++) {\n                if (_0x5c721e !== _0x13d6a3) {\n                    _0x2da44f[_0x13d6a3] = Math['max'](_0x2da44f[_0x13d6a3], _0x3eea0a[_0x5c721e] + _0x497e3f[_0x13d6a3]);\n                }\n            }\n        }\n        _0x3eea0a = _0x2da44f;\n    }\n    console['log'](Math['max'](_0x3eea0a[0x0], _0x3eea0a[0x1], _0x3eea0a[0x2]));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n10 40 70\n20 50 80\n30 60 90", "210"], ["1\n100 10 1", "100"], ["7\n6 7 8\n8 8 3\n2 5 2\n7 8 6\n4 6 8\n2 3 4\n7 5 1", "46"]], "original": "function main(input) {\n  let tmp = input.split(\"\\n\");\n  let vacations = [];\n  for (let i = 1; i < tmp.length; i++ ){\n    let vacation = tmp[i].split(\" \").map(element => parseInt(element, 10));\n    vacations.push(vacation);\n  }\n  let dp = [0, 0, 0];\n  for (let day = 0; day < vacations.length; day++) {\n    let vacation = vacations[day];\n    let new_dp = [0, 0, 0];\n    for (let i = 0; i < 3; i++) {\n      for(let j = 0; j < 3; j++) {\n        if (i !== j) {\n           new_dp[j] = Math.max(new_dp[j], dp[i] + vacation[j]);\n        }\n      }\n    }\n    dp = new_dp;\n  }\n  console.log(Math.max(dp[0], dp[1], dp[2]));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03206_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst i = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlet r = 'Christmas\\x20';\nswitch (i) {\ncase '22':\n    r = r + 'Eve\\x20Eve\\x20Eve';\n    break;\ncase '23':\n    r = r + 'Eve\\x20Eve';\n    break;\ncase '24':\n    r = r + 'Eve';\n    break;\ncase '25':\n    r = r;\n    break;\n}\nconsole['log'](r);", "test_cases": [["25", "Christmas"], ["22", "Christmas Eve Eve Eve"]], "original": "'use strict'\nconst i = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet r = 'Christmas ';\nswitch (i) {\n    case '22':\n        r = r + 'Eve Eve Eve';\n        break\n    case '23':\n        r = r + 'Eve Eve';\n        break\n    case '24':\n        r = r + 'Eve'\n        break\n    case '25':\n        r = r;\n        break\n}\nconsole.log(r);", "language": "JavaScript"}
{"filename": "p03210_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x341705) {\n    const _0x2bb885 = _0x341705['split']('\\x0a')[0x0];\n    if (_0x2bb885 == 0x7 || _0x2bb885 == 0x5 || _0x2bb885 == 0x3) {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5", "YES"], ["6", "NO"]], "original": "'use strict';\n\nfunction Main(INPUT) {\n    const N = INPUT.split(\"\\n\")[0];\n    if (N == 7 || N == 5 || N == 3) {\n        console.log(\"YES\");\n    } else {\n        console.log(\"NO\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03239_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar result = Infinity;\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x1bb844) {\n    lines['push'](_0x1bb844);\n});\nrl['on']('close', function () {\n    var _0x264995 = Number(lines[0x0]['split']('\\x20')[0x0]);\n    var _0x499a9a = Number(lines[0x0]['split']('\\x20')[0x1]);\n    lines['shift']();\n    var _0x90a716 = lines['map'](_0x50dc67 => _0x50dc67['split']('\\x20')['map'](_0x10482b => Number(_0x10482b)));\n    for (var _0x57103d of _0x90a716) {\n        if (_0x57103d[0x1] <= _0x499a9a) {\n            result = Math['min'](result, _0x57103d[0x0]);\n        }\n    }\n    result !== Infinity ? console['log'](result) : console['log']('TLE');\n});", "test_cases": [["3 70\n7 60\n1 80\n4 50", "4"], ["4 3\n1 1000\n2 4\n3 1000\n4 500", "TLE"], ["5 9\n25 8\n5 9\n4 10\n1000 1000\n6 1", "5"]], "original": "var lines = []; var result = Infinity;\nvar readline = require('readline');\n\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var T = Number(lines[0].split(\" \")[1]);\n\n    lines.shift();\n\n    var array = lines.map(value => value.split(\" \").map(value => Number(value)));\n\n    for (var i of array) {\n        if (i[1] <= T) { result = Math.min(result, i[0]); }\n    }\n    result !== Infinity ? console.log(result): console.log(\"TLE\");\n});", "language": "JavaScript"}
{"filename": "p03308_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4dd0f3) {\n    const _0x4c6baf = _0x4dd0f3['split']('\\x0a');\n    const _0x4d648a = Number(_0x4c6baf[0x0]);\n    let _0x362aa9 = 0x0;\n    let _0x47b8cc = Math['pow'](0xa, 0xa);\n    _0x4c6baf[0x1]['split']('\\x20')['forEach'](_0x35176e => {\n        _0x362aa9 = Math['max'](_0x362aa9, Number(_0x35176e));\n        _0x47b8cc = Math['min'](_0x47b8cc, Number(_0x35176e));\n    });\n    console['log'](_0x362aa9 - _0x47b8cc);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 4 6 3", "5"], ["2\n1000000000 1", "999999999"], ["5\n1 1 1 1 1", "0"]], "original": "// https://atcoder.jp/contests/abc102/tasks/abc102_b\n\"use strict\"\nfunction Main(input) {\n  const params = input.split('\\n')\n  const n = Number(params[0]);\n  let max = 0;\n  let min = Math.pow(10, 10);\n  params[1].split(' ').forEach(val => {\n    max = Math.max(max, Number(val));\n    min = Math.min(min, Number(val));\n  });\n  console.log(max -　min);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03325_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1f9e9c) {\n    const _0x1c234f = _0x1f9e9c['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x2c52d0 => Number(_0x2c52d0));\n    let _0x158884 = 0x0;\n    for (let _0x1d8d8b of _0x1c234f) {\n        while (_0x1d8d8b % 0x2 === 0x0) {\n            _0x1d8d8b = _0x1d8d8b / 0x2;\n            _0x158884 += 0x1;\n        }\n    }\n    console['log'](_0x158884);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n5 2 4", "3"], ["4\n631 577 243 199", "0"], ["10\n2184 2126 1721 1800 1024 2528 3360 1945 1280 1776", "39"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const a = s.split('\\n')[1].split(' ').map(n => Number(n));\n\n  let ans = 0;\n\n  for (let n of a) {\n    while (n % 2 === 0) {\n      n = n / 2;\n      ans += 1;\n    }\n  }\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03352_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1bd9e9) {\n    const _0x4ee645 = Number(_0x1bd9e9);\n    const _0xa07306 = [...Array(0x1f)]['map']((_0x5393e8, _0x3ef598) => _0x3ef598 + 0x1);\n    _0xa07306['shift']();\n    const _0x1365fc = [0x1];\n    for (let _0x4e2fe6 = 0x0; _0x4e2fe6 < _0xa07306['length']; _0x4e2fe6++) {\n        let _0x4343b0 = 0x2;\n        let _0x5ea3e5 = _0xa07306[_0x4e2fe6];\n        let _0x78bf83 = Math['pow'](_0x5ea3e5, _0x4343b0);\n        if (_0x78bf83 > _0x4ee645)\n            continue;\n        while (_0x78bf83 <= _0x4ee645) {\n            _0x4343b0 += 0x1;\n            _0x78bf83 = Math['pow'](_0x5ea3e5, _0x4343b0);\n        }\n        _0x78bf83 = Math['pow'](_0x5ea3e5, _0x4343b0 - 0x1);\n        _0x1365fc['push'](_0x78bf83);\n    }\n    const _0x366e90 = Math['max'](..._0x1365fc);\n    console['log'](_0x366e90);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "9"], ["1", "1"], ["999", "961"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const x = Number(s);\n  const nums = [...Array(31)].map((x, i) => i + 1);\n  nums.shift();\n  const max_ary = [1];\n\n  for (let i = 0; i < nums.length; i++) {\n    let j = 2;\n    let n = nums[i];\n    let max = Math.pow(n, j);\n    if (max > x) continue;\n    while (max <= x) {\n      j += 1;\n      max = Math.pow(n, j);\n    }\n    max = Math.pow(n, j - 1);\n    max_ary.push(max);\n  }\n\n  const ans = Math.max(...max_ary);\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03434_1", "type": "JavaScript", "obfuscated": "function main(_0x47dfb2) {\n    const _0xca29a7 = _0x47dfb2['split']('\\x0a');\n    const _0x36dae9 = parseInt(_0xca29a7[0x0], 0xa);\n    const _0x201d10 = _0xca29a7[0x1]['split']('\\x20')['map'](_0x176226 => parseInt(_0x176226))['sort']((_0x28de7e, _0x366022) => _0x366022 - _0x28de7e);\n    var _0xbd0319 = 0x0;\n    var _0xff425c = 0x0;\n    _0x201d10['forEach']((_0x1eade8, _0x3f0fb8) => {\n        if ((_0x3f0fb8 + 0x1) % 0x2 == 0x0) {\n            _0xff425c += _0x1eade8;\n        } else {\n            _0xbd0319 += _0x1eade8;\n        }\n    });\n    console['log'](_0xbd0319 - _0xff425c);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n3 1", "2"], ["3\n2 7 4", "5"], ["4\n20 18 2 18", "18"]], "original": "function main(input) {\n  const args = input.split('\\n');\n  const N = parseInt(args[0], 10);\n  const sorted = args[1].split(' ').map(v => parseInt(v)).sort((a, b) => b - a);\n  var alice = 0;\n  var bob = 0;\n  \n  sorted.forEach((v, i) => {\n    if ((i + 1) % 2 == 0) {\n      bob += v;\n    } else {\n      alice += v;\n    }\n  });\n  console.log(alice - bob);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03479_1", "type": "JavaScript", "obfuscated": "var toInt = _0x1a93ee => parseInt(_0x1a93ee, 0xa);\nvar toIntArr = _0x755b09 => _0x755b09['map'](_0x418396 => toInt(_0x418396));\nvar abs = _0x2c39d6 => _0x2c39d6 > 0x0 ? _0x2c39d6 : -_0x2c39d6;\nfunction min() {\n    var _0x5269bf = arguments, _0x3b1db6 = _0x5269bf[0x0];\n    for (var _0xc44acb = 0x1; _0xc44acb < _0x5269bf['length']; _0xc44acb++)\n        if (_0x5269bf[_0xc44acb] < _0x3b1db6)\n            _0x3b1db6 = _0x5269bf[_0xc44acb];\n    return _0x3b1db6;\n}\nfunction max() {\n    var _0x168773 = arguments, _0x2bca31 = _0x168773[0x0];\n    for (var _0x2d0a61 = 0x1; _0x2d0a61 < _0x168773['length']; _0x2d0a61++)\n        if (_0x168773[_0x2d0a61] > _0x2bca31)\n            _0x2bca31 = _0x168773[_0x2d0a61];\n    return _0x2bca31;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x3c3275) {\n    var _0x3c3275 = _0x3c3275['split']('\\x0a');\n    var _0x4dac5e = toIntArr(_0x3c3275[0x0]['split']('\\x20'));\n    var _0x4dba8b = _0x4dac5e[0x0];\n    var _0x64bb40 = _0x4dac5e[0x1];\n    var _0x37dc7e = _0x64bb40 / _0x4dba8b;\n    var _0x4426c4 = 0x1;\n    var _0x3bf0b4 = 0x0;\n    while (_0x4426c4 <= _0x37dc7e) {\n        _0x4426c4 *= 0x2;\n        _0x3bf0b4++;\n    }\n    console['log'](_0x3bf0b4);\n}", "test_cases": [["3 20", "3"], ["25 100", "3"], ["314159265 358979323846264338", "31"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar nk = toIntArr(input[0].split(' '));\n\tvar x = nk[0];\n\tvar y = nk[1];\n\tvar a = y/x;\n  \tvar temp = 1;\n \tvar ans = 0;\n    while(temp<=a){\n    \ttemp *= 2;\n      \tans++;\n      //console.log(ans,temp)\n    }\n\n\tconsole.log(ans);\n}", "language": "JavaScript"}
{"filename": "p03493_1", "type": "JavaScript", "obfuscated": "function Main(_0x478b74) {\n    var _0xb4a917 = _0x478b74['split']('\\x20');\n    var _0x2577ac = parseInt(_0xb4a917[0x0], 0xa);\n    var _0x1ab6cf = _0x2577ac['toString'](0xa);\n    var _0x197aa0 = 0x0;\n    for (var _0x4f25c5 = 0x0; _0x4f25c5 < _0x1ab6cf['length']; _0x4f25c5++) {\n        if (_0x1ab6cf[_0x4f25c5] == '1') {\n            _0x197aa0 += 0x1;\n        }\n    }\n    console['log'](_0x197aa0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["101", "2"], ["000", "0"]], "original": "function Main(input){\n  \tvar args = input.split(\" \");\n  \tvar num = parseInt(args[0], 10); // 10進数\n\tvar str = num.toString(10);\n  \tvar count = 0;\n\tfor(var i=0; i<str.length; i++){\n      if(str[i]==\"1\"){\n        count += 1;\n      }\n    }\n  \tconsole.log(count);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03611_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x31688d => {\n    _0x31688d = _0x31688d['trim']()['split']('\\x0a');\n    const _0x285905 = parseInt(_0x31688d[0x0]);\n    const _0x47b570 = _0x31688d[0x1]['split']('\\x20')['map'](_0x5e54b7 => parseInt(_0x5e54b7))['sort']((_0x7630ed, _0x2adfce) => _0x7630ed - _0x2adfce);\n    const _0x16867d = new Set();\n    let _0x4aa037 = 0x0;\n    for (let _0x422e6b = 0x0; _0x422e6b < _0x285905; _0x422e6b++) {\n        let _0x588eff = 0x0;\n        if (_0x16867d['has'](_0x47b570[_0x422e6b])) {\n            continue;\n        }\n        _0x16867d['add'](_0x47b570[_0x422e6b]);\n        for (let _0xae803f = 0x0; _0xae803f < _0x285905; _0xae803f++) {\n            if (Math['abs'](_0x47b570[_0xae803f] - _0x47b570[_0x422e6b]) <= 0x1) {\n                _0x588eff++;\n            }\n        }\n        if (_0x588eff > _0x4aa037) {\n            _0x4aa037 = _0x588eff;\n        }\n    }\n    console['log'](_0x4aa037);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\n3 1 4 1 5 9 2", "4"], ["10\n0 1 2 3 4 5 6 7 8 9", "3"], ["1\n99999", "1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const a = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>a-b);\n    \n    const set = new Set();\n    \n    let max = 0;\n    \n    for(let i=0; i<N; i++) {\n        let cnt = 0;\n        \n        if(set.has(a[i])) {\n            continue;\n        }\n        \n        set.add(a[i]);\n        \n        for(let j=0; j<N; j++) {\n            if(Math.abs(a[j] - a[i]) <= 1) {\n                cnt++;\n            }\n        }\n        \n        if(cnt > max) {\n            max = cnt;\n        }\n    }\n    \n    console.log(max);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03636_1", "type": "JavaScript", "obfuscated": "function Main(_0x142e93) {\n    _0x142e93 = String(_0x142e93);\n    var _0x46c9e4 = _0x142e93['length'];\n    var _0x212bac = _0x142e93['substring'](0x0, 0x1);\n    if (_0x46c9e4 < 0x4) {\n        var _0x35faa3 = 0x1;\n    } else {\n        var _0x35faa3 = _0x46c9e4 - 0x2;\n    }\n    var _0x1a47e6 = _0x142e93['substring'](_0x46c9e4 - 0x1, _0x46c9e4);\n    console['log']('%s', _0x212bac + String(_0x35faa3) + _0x1a47e6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["internationalization", "i18n"], ["smiles", "s4s"], ["xyz", "x1z"]], "original": "function Main(input){\n    input = String(input);\n\n    var len = input.length;\n    var first = input.substring(0,1);\n\n    if(len < 4){\n        var mid = 1;\n    }else{\n        var mid = len - 2;\n    }\n\n    var last = input.substring(len - 1, len);\n\n    console.log('%s', first + String(mid) + last);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03834_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('ascii');\nvar input_stdin = '';\nvar input_stdin_array = '';\nvar input_currentline = 0x0;\nprocess['stdin']['on']('data', function (_0xbae900) {\n    input_stdin += _0xbae900;\n});\nprocess['stdin']['on']('end', function () {\n    input_stdin_array = input_stdin['split']('\\x0a');\n    main();\n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction main() {\n    var _0x26bc8f = readLine();\n    _0x26bc8f = _0x26bc8f['split'](',');\n    _0x26bc8f = _0x26bc8f['join']('\\x20');\n    process['stdout']['write'](_0x26bc8f);\n}", "test_cases": [["happy,newyear,enjoy", "happy newyear enjoy"], ["haiku,atcoder,tasks", "haiku atcoder tasks"], ["abcde,fghihgf,edcba", "abcde fghihgf edcba"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\n\nfunction main() {\n    var s = readLine();\n    s = s.split(\",\");\n    s = s.join(\" \");\n    \n    process.stdout.write(s);\n}\n", "language": "JavaScript"}
{"filename": "p04029_1", "type": "JavaScript", "obfuscated": "function main(_0x59c136) {\n    const _0x452a68 = parseInt(_0x59c136, 0xa);\n    let _0x1b5a19 = 0x0;\n    for (let _0x44c006 = 0x1; _0x44c006 <= _0x452a68; _0x44c006++) {\n        _0x1b5a19 += _0x44c006;\n    }\n    console['log'](_0x1b5a19);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "6"], ["10", "55"], ["1", "1"]], "original": "function main(input) {\n  const n = parseInt(input, 10);\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p00002_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x2f818a) {\n    var _0x1b319e = _0x2f818a['trim']()['split']('\\x0a');\n    function _0x3c9512(_0x550d7f) {\n        var _0x477872 = _0x550d7f['split']('\\x20');\n        var _0x5c8287 = parseInt(_0x477872[0x0]) + parseInt(_0x477872[0x1]);\n        return _0x5c8287['toString']()['length'];\n    }\n    console['log'](_0x1b319e['map'](_0x3c9512)['join']('\\x0a'));\n});", "test_cases": [["5 7\n1 99\n1000 999", "2\n3\n4"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on(\"data\",function(chunk){\n   var nums=chunk.trim().split(\"\\n\");\n   function digit (e){\n       var a=e.split(\" \");\n       var wa = parseInt(a[0]) + parseInt(a[1]);\n       return  wa.toString().length;\n       }\n   console.log(nums.map(digit).join(\"\\n\"));\n   \n});", "language": "JavaScript"}
{"filename": "p02255_1", "type": "JavaScript", "obfuscated": "function main(_0x3ebfca) {\n    const _0x36f466 = _0x3ebfca['split']('\\x0a')[0x0];\n    const _0x5881be = _0x3ebfca['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);\n    console['log'](_0x5881be['join']('\\x20'));\n    for (let _0x27a992 = 0x1; _0x27a992 < _0x36f466; _0x27a992++) {\n        value = _0x5881be[_0x27a992];\n        let _0x145208 = _0x27a992 - 0x1;\n        while (_0x145208 >= 0x0 && value < _0x5881be[_0x145208]) {\n            _0x5881be[_0x145208 + 0x1] = _0x5881be[_0x145208];\n            _0x145208--;\n        }\n        _0x5881be[_0x145208 + 0x1] = value;\n        console['log'](_0x5881be['join']('\\x20'));\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n5 2 4 6 1 3", "5 2 4 6 1 3\n2 5 4 6 1 3\n2 4 5 6 1 3\n2 4 5 6 1 3\n1 2 4 5 6 3\n1 2 3 4 5 6"], ["3\n1 2 3", "1 2 3\n1 2 3\n1 2 3"]], "original": "function main(lines) {\n    const n = lines.split('\\n')[0]\n    const An = lines.split('\\n')[1].split(' ').map(Number)\n    // 初期の配列\n    console.log(An.join(' '))\n\n    for(let i=1; i<n; i++){\n        value = An[i]\n        let j = i - 1\n        while(j>=0 && value<An[j]){\n            An[j+1] = An[j]\n            j--\n        }\n\n        An[j+1] = value\n\n        console.log(An.join(' '))\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p02270_1", "type": "JavaScript", "obfuscated": "(function main() {\n    let _0x3b972f = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    let [_0x43a15c, _0x51f302] = _0x3b972f['shift']()['split']('\\x20')['map'](Number);\n    let _0x4c756c = _0x3b972f['map'](Number);\n    const _0x3ab40d = _0x410cdc => {\n        let _0xbf0b8c = 0x0, _0x3ba93d = 0x0;\n        for (let _0x283358 = 0x0; _0x283358 < _0x51f302; _0x283358++) {\n            for (_0x3ba93d = 0x0; _0x3ba93d + _0x4c756c[_0xbf0b8c] <= _0x410cdc;) {\n                _0x3ba93d += _0x4c756c[_0xbf0b8c++];\n                if (_0xbf0b8c === _0x43a15c)\n                    return _0x43a15c;\n            }\n        }\n        return _0xbf0b8c;\n    };\n    let _0x202dbd, _0x372abd = 0x0, _0x3cc08b = 0x3b9aca00;\n    while (_0x3cc08b - _0x372abd > 0x1) {\n        _0x202dbd = (_0x3cc08b + _0x372abd) / 0x2;\n        if (_0x3ab40d(_0x202dbd) >= _0x43a15c)\n            _0x3cc08b = _0x202dbd;\n        else\n            _0x372abd = _0x202dbd;\n    }\n    console['log'](Math['floor'](_0x3cc08b));\n}());", "test_cases": [["5 3\n8\n1\n7\n3\n9", "10"], ["4 2\n1\n2\n2\n6", "6"]], "original": "(function main(){\n  let lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\");\n  let [n, k] = lines.shift().split(' ').map(Number);\n  let w = lines.map(Number);\n\n  const canAllStack = (p) => {\n    let cnt = 0, sum = 0;\n    for (let i = 0; i < k; i++) {\n      for (sum = 0; sum + w[cnt] <= p;) {\n        sum += w[cnt++]\n        if (cnt === n) return n;\n      }\n    }\n    return cnt;\n  };\n\n  let mid, left = 0, right = 1e9;\n  while (right - left > 1) {\n    mid = (right + left) / 2;\n    if (canAllStack(mid) >= n) right = mid;\n    else left = mid;\n  }\n  console.log(Math.floor(right));\n})();\n", "language": "JavaScript"}
{"filename": "p02408_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x4d7742) {\n    var _0x121690 = _0x4d7742['toString']()['split']('\\x0a');\n    var _0x2ab06e = function (_0x46e1d5) {\n        return new _0x12c113()['filter'](function (_0xd02385) {\n            return this['indexOf'](_0xd02385) === -0x1;\n        }, _0x46e1d5)['join']('\\x0a');\n        function _0x12c113() {\n            var _0x46bbfd = [];\n            [\n                'S',\n                'H',\n                'C',\n                'D'\n            ]['forEach'](function (_0x52ba9c) {\n                for (var _0x1521d7 = 0x0; _0x1521d7 < 0xd; _0x1521d7++)\n                    _0x46bbfd['push']([\n                        _0x52ba9c,\n                        _0x1521d7 + 0x1\n                    ]['join']('\\x20'));\n            });\n            return _0x46bbfd;\n        }\n    }(_0x121690['slice'](0x0, _0x121690['shift']()));\n    if (_0x2ab06e['length'] !== 0x0)\n        console['log'](_0x2ab06e);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["47\nS 10\nS 11\nS 12\nS 13\nH 1\nH 2\nS 6\nS 7\nS 8\nS 9\nH 6\nH 8\nH 9\nH 10\nH 11\nH 4\nH 5\nS 2\nS 3\nS 4\nS 5\nH 12\nH 13\nC 1\nC 2\nD 1\nD 2\nD 3\nD 4\nD 5\nD 6\nD 7\nC 3\nC 4\nC 5\nC 6\nC 7\nC 8\nC 9\nC 10\nC 11\nC 13\nD 9\nD 10\nD 11\nD 12\nD 13", "S 1\nH 3\nH 7\nC 12\nD 8"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString().split('\\n');\n  var result = (function(data) {\n    return new Deck().filter(function(v) {\n      return this.indexOf(v) === -1;\n    },data).join('\\n');\n\n    function Deck() {\n      var deck = [];\n      ['S','H','C','D'].forEach(function(v) { \n        for (var i = 0; i < 13;i++)\n          deck.push([v,i + 1].join(' '));\n      });\n      return deck;\n    }\n  }(lines.slice(0,lines.shift())\n    ));\n\n  if(result.length !== 0) console.log(result);\n  \n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02547_1", "type": "JavaScript", "obfuscated": "let lines = [];\nlet reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x2f7ed2) {\n    lines['push'](_0x2f7ed2);\n});\nreader['on']('close', function () {\n    let _0x42cc63 = [];\n    let _0x3e16fd = [];\n    const _0x2a1e43 = lines[0x0];\n    let _0x550195 = 'No';\n    for (let _0x1fd09e = 0x1; _0x1fd09e < _0x2a1e43; _0x1fd09e++) {\n        _0x42cc63['push'](lines[_0x1fd09e]['split']('\\x20')[0x0]);\n        _0x3e16fd['push'](lines[_0x1fd09e]['split']('\\x20')[0x1]);\n    }\n    for (let _0x5785e8 = 0x0; _0x5785e8 < _0x2a1e43 - 0x2; _0x5785e8++) {\n        if (_0x42cc63[_0x5785e8] == _0x3e16fd[_0x5785e8]) {\n            if (_0x42cc63[_0x5785e8 + 0x1] == _0x3e16fd[_0x5785e8 + 0x1]) {\n                if (_0x42cc63[_0x5785e8 + 0x2] == _0x3e16fd[_0x5785e8 + 0x2]) {\n                    _0x550195 = 'Yes';\n                    break;\n                }\n            }\n        }\n    }\n    console['log'](_0x550195);\n});", "test_cases": [["5\n1 2\n6 6\n4 4\n3 3\n3 2", "Yes"], ["5\n1 1\n2 2\n3 4\n5 5\n6 6", "No"], ["6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "Yes"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// 標準入力の読み込み\nreader.on('line', function(line) {\n    lines.push(line);\n});\n\nreader.on('close', function() {\n    let d1 = [];\n    let d2 = [];\n    // 処理の記述\n    const n = lines[0];\n    \n    let zorome = 'No';\n    for (let i = 1; i < n; i++) {\n        d1.push(lines[i].split(' ')[0]);\n        d2.push(lines[i].split(' ')[1]);\n    }\n    for (let i = 0; i < n - 2; i++) {\n        if (d1[i] == d2[i]) {\n            if (d1[i+1] == d2[i+1]) {\n                if (d1[i+2] == d2[i+2]) {\n                    zorome = 'Yes';\n                    break;\n                }\n            }\n        }\n\n    }\n\n    // 表示\n    console.log(zorome);\n});", "language": "JavaScript"}
{"filename": "p02629_1", "type": "JavaScript", "obfuscated": "function Main(_0x1f2b84) {\n    const _0x50cec6 = _0x1f2b84['split']('\\x0a')['map'](_0x44bfa6 => parseInt(_0x44bfa6, 0xa));\n    const _0x3a48ab = _0x50cec6[0x0];\n    function _0x2d70fb(_0x21af82) {\n        let _0x4408ce = _0x21af82 % 0x1a;\n        let _0xa28f95 = Math['floor'](_0x21af82 / 0x1a);\n        let _0x484000 = _0x4408ce != 0x0 ? String['fromCharCode'](0x40 + _0x4408ce) : (--_0xa28f95, 'Z');\n        return _0x484000 = _0xa28f95 != 0x0 ? _0x2d70fb(_0xa28f95) + _0x484000 : _0x484000;\n    }\n    console['log'](_0x2d70fb(_0x3a48ab)['toLowerCase']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2", "b"], ["27", "aa"], ["123456789", "jjddja"]], "original": "function Main(inputs) {\n\tconst inputline = inputs.split(\"\\n\").map(x => parseInt(x, 10));\n  \tconst line = inputline[0];\n  \n  \tfunction base26(number) {\n    \tlet remainder26 = number % 26;\n    \tlet division26 = Math.floor(number / 26) ;\n    \tlet output = (remainder26 != 0) ? String.fromCharCode(64 + remainder26) : (--division26, 'Z');\n      \treturn output = (division26 != 0) ? base26(division26) + output : output;\n\t}\n  \n  \tconsole.log(base26(line).toLowerCase());\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02659_1", "type": "JavaScript", "obfuscated": "function Main(_0x5f26c9) {\n    _0x5f26c9 = _0x5f26c9['split']('\\x0a');\n    var _0xcd1c8d = Number(_0x5f26c9[0x0]['split']('\\x20')[0x0]);\n    var _0x18ecf4 = Number(_0x5f26c9[0x0]['split']('\\x20')[0x1]);\n    var _0x285d72 = BigInt(Math['floor'](_0xcd1c8d * _0x18ecf4));\n    var _0x285d72 = _0x285d72['toString']();\n    console['log']('%s', _0x285d72);\n    return _0x285d72;\n}\nfunction debug(_0x276111) {\n    var _0x4b2d0b = document['getElementById']('input' + _0x276111)['value'];\n    var _0x317912 = Main(_0x4b2d0b);\n    var _0x4b7632 = 'WA';\n    if (_0x317912 == document['getElementById']('output' + _0x276111)['value']['split']('\\x0a')[0x0]) {\n        _0x4b7632 = 'AC';\n    }\n    document['getElementById']('result' + _0x276111)['innerHTML'] = _0x4b7632;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["198 1.10", "217"], ["1 0.01", "0"], ["1000000000000000 9.99", "9990000000000000"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var A = Number(input[0].split(\" \")[0]);\n  var B = Number(input[0].split(\" \")[1]);\n  var ans = BigInt(Math.floor(A * B));\n  var ans = ans.toString();\n\n\n  console.log('%s', ans);\n  return ans;\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02711_1", "type": "JavaScript", "obfuscated": "const Main = _0x1d684e => {\n    const _0x3a7cbf = _0x1d684e['trim']()['split']('');\n    let _0x9ecbdc = '';\n    if (_0x3a7cbf['indexOf']('7') === -0x1) {\n        _0x9ecbdc = 'No';\n    } else {\n        _0x9ecbdc = 'Yes';\n    }\n    console['log'](_0x9ecbdc);\n    return _0x9ecbdc;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["117", "Yes"], ["123", "No"], ["777", "Yes"]], "original": "const Main = (input) => {\n  const tmp = input.trim().split('')\n\n  let result = ''\n\n  if (tmp.indexOf('7') === -1) {\n    result = 'No'\n  } else {\n    result = 'Yes'\n  }\n\n  console.log(result)\n  return result\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02718_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x6146ac) {\n    const _0x3efcd4 = Number(_0x6146ac['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    const _0x42a8b8 = Number(_0x6146ac['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    let _0x4122ce = [];\n    let _0x364295 = 0x0;\n    for (let _0xeb92a0 = 0x0; _0xeb92a0 < _0x3efcd4; _0xeb92a0++) {\n        _0x4122ce[_0xeb92a0] = _0x6146ac['split']('\\x0a')[0x1]['split']('\\x20')[_0xeb92a0];\n        _0x364295 += Number(_0x4122ce[_0xeb92a0]);\n    }\n    let _0xbb3514 = 0x0;\n    for (let _0x4a33b0 = 0x0; _0x4a33b0 < _0x3efcd4; _0x4a33b0++) {\n        if (_0x4122ce[_0x4a33b0] * (0x4 * _0x42a8b8) - _0x364295 > 0x0) {\n            _0xbb3514++;\n        }\n    }\n    if (_0xbb3514 >= _0x42a8b8) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 1\n5 4 2 1", "Yes"], ["3 2\n380 19 1", "No"], ["12 3\n4 56 78 901 2 345 67 890 123 45 6 789", "Yes"]], "original": "\"use strict\"\n// input data\nfunction main(input) {\n    const n = Number(input.split('\\n')[0].split(' ')[0]);\n    const m = Number(input.split('\\n')[0].split(' ')[1]);\n    let a = [];\n    let sum = 0;\n    for (let index = 0; index < n; index++) {\n        a[index] = input.split('\\n')[1].split(' ')[index];\n        sum += Number(a[index]);\n    }\n    let count = 0;\n    for (let index = 0; index < n; index++) {\n        if (a[index] * (4 * m) - sum > 0) {\n            count++;\n        }\n    }\n    if (count>=m) {\n        console.log('Yes');\n    }else {\n        console.log('No');\n    }\n}\n\n// output\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02796_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet a = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\na['shift']();\nlet d = a['map'](_0x15ccae => {\n    let _0x3f1cfd = _0x15ccae['split']('\\x20')['map'](Number);\n    return [\n        _0x3f1cfd[0x0] - _0x3f1cfd[0x1],\n        _0x3f1cfd[0x1] + _0x3f1cfd[0x0]\n    ];\n})['sort']((_0x2c2a7d, _0x2633a4) => {\n    return _0x2c2a7d[0x1] - _0x2633a4[0x1];\n});\nlet s = 0x0;\nlet P = Number['MIN_SAFE_INTEGER'];\nfor (let i = 0x0; i < d['length']; i++) {\n    if (P <= d[i][0x0]) {\n        s++;\n        P = d[i][0x1];\n    }\n}\nconsole['log'](s);", "test_cases": [["4\n2 4\n4 3\n9 3\n100 5", "3"], ["2\n8 20\n1 10", "1"], ["5\n10 1\n2 1\n4 1\n6 1\n8 1", "5"]], "original": "\"use strict\";let a=require('fs').readFileSync('/dev/stdin','utf8').trim().split(\"\\n\");a.shift();let d = a.map(e => {let r = e.split(\" \").map(Number);return [r[0]-r[1],r[1]+r[0]];}).sort((a,b) => {return a[1]-b[1];});let s = 0;let P = Number.MIN_SAFE_INTEGER;for(let i=0;i<d.length;i++){if(P<=d[i][0]){s++;P = d[i][1];}}console.log(s);", "language": "JavaScript"}
{"filename": "p02921_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst Nums = input['split']('\\x0a');\nconst S = Nums[0x0]['split']('');\nconst T = Nums[0x1]['split']('');\nlet ans = 0x0;\nS['forEach']((_0x57779f, _0x39ced2) => {\n    if (_0x57779f == T[_0x39ced2]) {\n        ans++;\n    }\n});\nconsole['log'](ans);", "test_cases": [["CSS\nCSR", "2"], ["SSR\nSSR", "3"], ["RRR\nSSS", "0"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst Nums = input.split('\\n');\nconst S = Nums[0].split(\"\");\nconst T = Nums[1].split(\"\");\nlet ans = 0;\nS.forEach((x,i)=> {\n\tif(x==T[i]){\n    \tans++;\n    }\n});\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p02972_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst arg_str = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nconst args = arg_str['split']('\\x0a');\nconst N = parseInt(args[0x0]);\nconst a_array = args[0x1]['split']('\\x20')['map'](_0x33f861 => parseInt(_0x33f861));\nfor (let i = N; i >= 0x1; i--) {\n    let i_n = 0x0;\n    if (i == 0x1) {\n        i_n = N;\n    } else {\n        i_n = Math['sqrt'](N);\n    }\n    for (let j = i_n; j >= 0x1; j--) {\n        if (i < j) {\n            if (j % i == 0x0) {\n                a_array[i - 0x1] ^= a_array[j - 0x1];\n            }\n        } else {\n            continue;\n        }\n    }\n}\nconst result = [];\na_array['forEach']((_0x2d271b, _0x599e29) => {\n    if (_0x2d271b == 0x1) {\n        result['push'](_0x599e29 + 0x1);\n    }\n});\nconsole['log'](result['length']);\nif (result['length'] > 0x0) {\n    console['log'](result['join']('\\x20'));\n}", "test_cases": [["3\n1 0 0", "1\n1"], ["5\n0 0 0 0 0", "0"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args= arg_str.split('\\n')\nconst N = parseInt(args[0])\nconst a_array = args[1].split(' ').map(x=>parseInt(x))\n\nfor(let i=N;i>=1;i--){\n  let i_n = 0\n  if(i==1){\n    i_n = N\n  }else{\n    i_n = Math.sqrt(N)\n  }\n  for(let j=i_n;j>=1;j--){\n    if(i < j){\n      if(j % i == 0){\n        a_array[i-1] ^= a_array[j-1]\n      }\n    }else{\n      continue\n    }\n  }\n}\n\nconst result = []\na_array.forEach((item, index)=>{\n  if(item==1){\n    result.push(index+1)\n  }\n})\n\nconsole.log(result.length)\nif(result.length > 0){\n  console.log(result.join(' '))\n}\n", "language": "JavaScript"}
{"filename": "p02994_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x189716) {\n    const _0x4f0f59 = _0x189716['split']('\\x20')['map'](_0x406136 => parseInt(_0x406136, 0xa));\n    const _0x374c26 = _0x4f0f59[0x0];\n    const _0x3a7e99 = _0x4f0f59[0x1];\n    let _0x1aa2c7 = 0x0;\n    let _0x2f10d2 = Infinity;\n    for (let _0x2a5f82 = _0x3a7e99; _0x2a5f82 < _0x3a7e99 + _0x374c26; ++_0x2a5f82) {\n        _0x1aa2c7 += _0x2a5f82;\n        if (Math['abs'](_0x2a5f82) < Math['abs'](_0x2f10d2))\n            _0x2f10d2 = _0x2a5f82;\n    }\n    console['log'](_0x1aa2c7 - _0x2f10d2);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2", "18"], ["3 -1", "0"], ["30 -50", "-1044"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split(' ').map(v => parseInt(v, 10));\n  const N = input[0];\n  const L = input[1];\n\n  let sum = 0;\n  let min = Infinity;\n\n  for (let i = L; i < L + N; ++i) {\n    sum += i;\n    if (Math.abs(i) < Math.abs(min)) min = i;\n  }\n  \n  console.log(sum - min);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03075_1", "type": "JavaScript", "obfuscated": "fs = require('fs');\nl = fs['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nx = [];\nfor (i = 0x0; i < 0x6; i++) {\n    x['push'](parseInt(l[i]));\n}\nif (x[0x4] - x[0x0] <= x[0x5]) {\n    console['log']('Yay!');\n} else {\n    console['log'](':(');\n}", "test_cases": [["1\n2\n4\n8\n9\n15", "Yay!"], ["15\n18\n26\n35\n36\n18", ":("]], "original": "fs=require(\"fs\");\nl=fs.readFileSync(\"/dev/stdin\",\"utf8\").split(\"\\n\");\nx=[];\nfor(i=0;i<6;i++){\n  x.push(parseInt(l[i]));\n}\nif(x[4]-x[0]<=x[5]){\n  console.log('Yay!');\n}else{\n  console.log(':(');\n}", "language": "JavaScript"}
{"filename": "p03261_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nlet ws = new Set();\nlet prev = null;\nconsole['log'](((() => {\n    for (const _0x47ca16 of input['slice'](0x1, parseInt(input[0x0]) + 0x1)) {\n        if (prev && prev != _0x47ca16[0x0]) {\n            return 'No';\n        }\n        if (ws['has'](_0x47ca16)) {\n            return 'No';\n        }\n        ws['add'](_0x47ca16);\n        prev = _0x47ca16['substr'](-0x1);\n    }\n    return 'Yes';\n})()));", "test_cases": [["4\nhoge\nenglish\nhoge\nenigma", "No"], ["9\nbasic\nc\ncpp\nphp\npython\nnadesico\nocaml\nlua\nassembly", "Yes"], ["8\na\naa\naaa\naaaa\naaaaa\naaaaaa\naaa\naaaaaaa", "No"], ["3\nabc\narc\nagc", "No"]], "original": "\"use strict\";\nconst input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\nlet ws = new Set();\nlet prev = null;\nconsole.log((() => {\n\tfor (const w of input.slice(1,parseInt(input[0]) + 1)) {\n\t\tif (prev && prev != w[0]) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tif (ws.has(w)) {\n\t\t\treturn \"No\";\n\t\t}\n\t\tws.add(w);\n\t\tprev = w.substr(-1);\n\t}\n\treturn \"Yes\";\n})());\n", "language": "JavaScript"}
{"filename": "p03262_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2e9af1 => {\n    _0x2e9af1 = _0x2e9af1['split']('\\x0a');\n    const _0x5ee898 = parseInt(_0x2e9af1[0x0]['split']('\\x20')[0x0]);\n    const _0x336a80 = parseInt(_0x2e9af1[0x0]['split']('\\x20')[0x1]);\n    const _0x207404 = _0x2e9af1[0x1]['split']('\\x20')['map'](_0x58f146 => parseInt(_0x58f146))['sort']((_0x2507f8, _0x37c3a8) => _0x2507f8 - _0x37c3a8);\n    let _0x45603e = 0x174876e800;\n    _0x207404['forEach'](_0x261d02 => {\n        let _0x1b2367 = Math['abs'](_0x336a80 - _0x261d02);\n        if (_0x1b2367 < _0x45603e) {\n            _0x45603e = _0x1b2367;\n        }\n    });\n    for (let _0x2d813d = _0x45603e; _0x2d813d >= 0x0; _0x2d813d--) {\n        for (let _0x1be485 of _0x207404) {\n            let _0x42691d = Math['abs'](_0x1be485 - _0x336a80);\n            if (_0x42691d % _0x45603e !== 0x0) {\n                break;\n            }\n            console['log'](_0x2d813d);\n            return;\n        }\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["3 3\n1 7 11", "2"], ["3 81\n33 105 57", "24"], ["1 1\n1000000000", "999999999"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0].split(' ')[0])\n    const X = parseInt(input[0].split(' ')[1])\n    const arr = input[1].split(' ').map(v => parseInt(v)).sort((a, b) => a - b)\n    let mostNear = 100000000000\n    arr.forEach(v => {\n        let dist = Math.abs(X - v)\n        if(dist < mostNear){\n            mostNear = dist\n        }\n    })\n\n    for(let i = mostNear; i >= 0; i--){\n        for(let v of arr){\n            let diff = Math.abs(v - X)\n            if(diff % mostNear !== 0){\n                break\n            }\n            console.log(i)\n            return\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript"}
{"filename": "p03370_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['split']('\\x0a');\nlet info = input['shift']();\nlet N = info['split']('\\x20')[0x0] * 0x1;\nlet X = info['split']('\\x20')[0x1];\nlet arr = input['map'](_0x1cd677 => _0x1cd677 * 0x1);\nlet min = Math['min'](...arr);\nlet sum = arr['reduce']((_0xffc0a0, _0x18497d) => {\n    return _0x18497d + _0xffc0a0;\n});\nlet ans = N + Math['floor']((X - sum) / min);\nconsole['log'](ans);", "test_cases": [["3 1000\n120\n100\n140", "9"], ["4 360\n90\n90\n90\n90", "4"], ["5 3000\n150\n130\n150\n130\n110", "26"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n// 必要な変数に定義する\ninput = input.split('\\n');\nlet info = input.shift();\nlet N = info.split(\" \")[0]*1;\nlet X = info.split(\" \")[1];\n// 配列要素を数値に変換\nlet arr = input.map(x=> x*1);\nlet min = Math.min(...arr);\n// とりあえず1つずつ要素を足したもの\nlet sum = arr.reduce((x,a)=> {return a+x})\n// 残りで一番量が少なくて済むドーナッツに割り当てる\nlet ans = N + Math.floor((X - sum)/min);\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p03377_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nA = l[0x0] * 0x1;\nB = l[0x1] * 0x1;\nX = l[0x2] * 0x1;\nconsole['log'](A + B > X && A < X ? 'YES' : 'NO');", "test_cases": [["3 5 4", "YES"], ["2 2 6", "NO"], ["5 3 2", "NO"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nA = l[0] * 1\nB = l[1] * 1 \nX = l[2] * 1 \nconsole.log(A + B > X && A < X ? 'YES' : 'NO')\t", "language": "JavaScript"}
{"filename": "p03399_1", "type": "JavaScript", "obfuscated": "function Main(_0x2c02fe) {\n    var _0x291091 = _0x2c02fe['trim']()['split']('\\x0a')['map'](_0x3cf2eb => parseInt(_0x3cf2eb, 0xa));\n    var _0x20f0f3 = 0x0;\n    if (_0x291091[0x0] <= _0x291091[0x1]) {\n        _0x20f0f3 = _0x20f0f3 + _0x291091[0x0];\n    } else if (_0x291091[0x0] >= _0x291091[0x1]) {\n        _0x20f0f3 = _0x20f0f3 + _0x291091[0x1];\n    }\n    var _0x550552 = 0x0;\n    if (_0x291091[0x2] <= _0x291091[0x3]) {\n        _0x550552 = _0x550552 + _0x291091[0x2];\n    } else if (_0x291091[0x2] >= _0x291091[0x3]) {\n        _0x550552 = _0x550552 + _0x291091[0x3];\n    }\n    console['log'](_0x20f0f3 + _0x550552);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["600\n300\n220\n420", "520"], ["555\n555\n400\n200", "755"], ["549\n817\n715\n603", "1152"]], "original": "function Main(input){\n\tvar xs = input.trim().split('\\n').map(v=>parseInt(v,10));\n      var A = 0;\n      if(xs[0] <= xs[1]){\n      A = A + xs[0];\n      }else if(xs[0] >= xs[1]){\n      A = A + xs[1];\n      }\n      var B = 0;\n      if(xs[2] <= xs[3]){\n      B = B + xs[2];\n      }else if(xs[2] >= xs[3]){\n      B = B + xs[3];\n      }\n    console.log(A+B);      \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03448_1", "type": "JavaScript", "obfuscated": "function main(_0x116e7f) {\n    const _0x4b2108 = _0x116e7f['split']('\\x0a');\n    const _0x18780c = _0x4b2108['slice'](0x0, 0x3);\n    const _0xb03ab2 = parseInt(_0x4b2108['slice'](-0x1), 0xa);\n    var _0x4103ee = 0x0;\n    for (i = 0x0; i <= parseInt(_0x18780c[0x0], 0xa); i++) {\n        for (j = 0x0; j <= parseInt(_0x18780c[0x1], 0xa); j++) {\n            for (k = 0x0; k <= parseInt(_0x18780c[0x2], 0xa); k++) {\n                if (0x1f4 * i + 0x64 * j + 0x32 * k == _0xb03ab2) {\n                    _0x4103ee++;\n                }\n            }\n        }\n    }\n    console['log'](_0x4103ee);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n2\n2\n100", "2"], ["5\n1\n0\n150", "0"], ["30\n40\n50\n6000", "213"]], "original": "// 500, 100, 50\nfunction main(input) {\n  const input_array = input.split(\"\\n\");\n  const coins_count = input_array.slice(0,3);\n  const desired_sum = parseInt(input_array.slice(-1), 10);\n\n  var answer = 0;\n  for(i=0; i<=parseInt(coins_count[0], 10); i++){\n    for(j=0; j<=parseInt(coins_count[1], 10); j++){\n      for(k=0; k<=parseInt(coins_count[2], 10); k++){\n        if (500 * i + 100 * j + 50 * k == desired_sum){\n          answer++;\n        }\n      }\n    }\n  }\n  \n  console.log(answer);\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03456_1", "type": "JavaScript", "obfuscated": "function Main(_0x58af27) {\n    var _0x345af7 = _0x58af27['split']('\\x20');\n    var _0xbd758b = _0x345af7[0x0];\n    var _0x5dd716 = _0x345af7[0x1];\n    var _0x3d10be = parseInt(_0xbd758b + _0x5dd716);\n    var _0x4937fb = Math['floor'](Math['sqrt'](_0x3d10be));\n    _0x4937fb * _0x4937fb === _0x3d10be ? console['log']('Yes') : console['log']('No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 21", "Yes"], ["100 100", "No"], ["12 10", "No"]], "original": "function Main(input){\n  var inp = input.split(' ');\n  var a = inp[0];\n  var b = inp[1];\n  var n = parseInt(a + b);\n  var flsqn = Math.floor(Math.sqrt(n));\n  flsqn * flsqn === n ? console.log('Yes') : console.log('No');\n//  (Math.floor(Math.sqrt(n))) ** 2 ? console.log('Yes') : console.log('No');\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03597_1", "type": "JavaScript", "obfuscated": "function Main(_0x32be6a) {\n    _0x32be6a = _0x32be6a['split']('\\x0a')['map'](_0x51756b => parseInt(_0x51756b, 0xa));\n    console['log'](Math['pow'](_0x32be6a[0x0], 0x2) - _0x32be6a[0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n4", "5"], ["19\n100", "261"], ["10\n0", "100"]], "original": "function Main(input) {\n    input = input.split('\\n').map(n => parseInt(n, 10));\n    console.log((Math.pow(input[0], 2)) - input[1]);\n }\n  Main(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03625_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x46fffb) {\n    _0x46fffb = _0x46fffb['split'](/\\r?\\n/);\n    _0x46fffb = _0x46fffb[0x1]['split']('\\x20')['map'](_0x141e82 => ~~_0x141e82)['sort']((_0x1da187, _0x3fefb6) => _0x3fefb6 - _0x1da187);\n    let _0x20ed29 = 0x0;\n    let _0xeabf60 = [];\n    let _0x59cba8 = _0x46fffb[0x0];\n    for (let _0x1f6de8 = 0x1; _0x1f6de8 < _0x46fffb['length']; _0x1f6de8++) {\n        if (_0x59cba8 == _0x46fffb[_0x1f6de8]) {\n            _0xeabf60['push'](_0x59cba8);\n            _0xeabf60['push'](_0x46fffb[_0x1f6de8]);\n            _0x59cba8 = 0x0;\n        } else {\n            _0x59cba8 = _0x46fffb[_0x1f6de8];\n        }\n    }\n    if (_0xeabf60['length'] >= 0x4) {\n        _0x20ed29 = _0xeabf60[0x0] * _0xeabf60[0x3];\n        console['log'](_0x20ed29);\n    } else {\n        console['log'](0x0);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n3 1 2 4 2 1", "2"], ["4\n1 2 3 4", "0"], ["10\n3 3 3 3 4 4 4 5 5 5", "20"]], "original": "\n\"use strict\"\n\nfunction main(input) {\n    input = input.split(/\\r?\\n/)\n    input = input[1].split(' ').map(v => ~~v).sort((a, b) => b - a)\n\n    let ans = 0\n    let sticks = [] // 2本ずつ、2本ずつ、\n    let prev = input[0]\n    for (let i = 1; i < input.length; i++) {\n\n        if (prev == input[i]) {\n            sticks.push(prev)\n            sticks.push(input[i])\n            prev = 0\n        } else {\n            prev = input[i]\n        }\n\n    }\n    if (sticks.length >= 4) {\n        ans = sticks[0] * sticks[3]\n        console.log(ans)\n    } else {\n        console.log(0)\n    }\n\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03680_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x12ecab => {\n    _0x12ecab = _0x12ecab['trim']()['split']('\\x0a');\n    const _0x2bc863 = ~~_0x12ecab[0x0];\n    const _0x3255c1 = _0x12ecab['slice'](0x1, _0x2bc863 + 0x1)['map'](_0x1b467e => ~~_0x1b467e);\n    let _0x48eb2c = 0x1;\n    let _0x5b5e6b = 0x0;\n    while (_0x48eb2c !== 0x2) {\n        _0x48eb2c = _0x3255c1[_0x48eb2c - 0x1];\n        _0x5b5e6b++;\n        if (_0x5b5e6b > _0x2bc863) {\n            console['log'](-0x1);\n            return;\n        }\n    }\n    console['log'](_0x5b5e6b);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n3\n1\n2", "2"], ["4\n3\n4\n1\n2", "-1"], ["5\n3\n3\n4\n2\n4", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = ~~arg[0];\n    const S = arg.slice(1, N + 1).map(n=>~~n);\n    \n    let now = 1;\n    let cnt = 0;\n    \n    while(now !== 2) {\n        now = S[now - 1];\n        cnt++;\n        \n        if(cnt > N) {\n            console.log(-1);\n            return;\n        }\n    }\n    \n    console.log(cnt);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03773_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x2a7c4b) {\n    var _0x4559e0 = _0x2a7c4b['toString']()['split']('\\x20');\n    var _0x41c0fa = Number(_0x4559e0[0x0]);\n    var _0x39bd4c = Number(_0x4559e0[0x1]);\n    var _0x18153c = _0x39bd4c + _0x41c0fa;\n    if (_0x18153c < 0x18) {\n        console['log'](_0x18153c);\n    } else {\n        console['log'](_0x18153c - 0x18);\n    }\n});", "test_cases": [["9 12", "21"], ["19 0", "19"], ["23 2", "1"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('data', function (chunk) {\n    var lines = chunk.toString().split(' ');\n    var first = Number(lines[0]);\n    var second = Number(lines[1]);\n\n    var time = second + first;\n    \n    if(\n        time<24)\n        {\n            console.log(time)\n        }else{\n            console.log(time-24)\n        }\n        \n//    console.log(lines);\n});", "language": "JavaScript"}
{"filename": "p00007_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x7ea59a = 0x186a0;\n    for (var _0x8e9540 = 0x0; _0x8e9540 < input['trim']() - 0x0; _0x8e9540++) {\n        _0x7ea59a = Math['ceil'](_0x7ea59a * 1.05 / 0x3e8) * 0x3e8;\n    }\n    console['log'](_0x7ea59a);\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x3f02f2) {\n    input += _0x3f02f2;\n});\nprocess['stdin']['on']('end', function () {\n    main();\n});", "test_cases": [["5", "130000"]], "original": "function main(){\n  var debt = 100000;\n \n  for(var i = 0; i < input.trim()-0; i++){\n    debt = Math.ceil((debt * 1.05)/1000) * 1000;\n  }\n\n  console.log(debt);\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  main();\n});", "language": "JavaScript"}
{"filename": "p02233_1", "type": "JavaScript", "obfuscated": "(function main() {\n    const _0x6e0a7f = Number(require('fs')['readFileSync']('/dev/stdin', 'utf8')) + 0x1;\n    root5 = Math['sqrt'](0x5);\n    console['log'](Math['round'](0x1 / root5 * (Math['pow']((0x1 + root5) / 0x2, _0x6e0a7f) - Math['pow']((0x1 - root5) / 0x2, _0x6e0a7f))));\n}());", "test_cases": [["3", "3"]], "original": "(function main() {\n  const n = Number(require('fs').readFileSync('/dev/stdin', 'utf8')) + 1;\n  root5 = Math.sqrt(5);\n  console.log(Math.round(1/root5 * (Math.pow((1 + root5) / 2, n) - Math.pow((1 - root5) / 2, n))));\n})();\n\n", "language": "JavaScript"}
{"filename": "p02612_1", "type": "JavaScript", "obfuscated": "function Main(_0xe71ae4) {\n    const _0x4a460e = Number(_0xe71ae4) % 0x3e8;\n    console['log'](_0x4a460e === 0x0 ? 0x0 : 0x3e8 - _0x4a460e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1900", "100"], ["3000", "0"]], "original": "function Main(input) {\n    const hyaku = Number(input)%1000;\n    console.log(hyaku === 0 ? 0: 1000-hyaku);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02694_1", "type": "JavaScript", "obfuscated": "const main = _0x5c0052 => {\n    var _0x112ae2 = _0x5c0052[0x0]['split']('\\x20');\n    var _0x382e6a = Number(_0x112ae2);\n    var _0x14ad7f = 0x64;\n    var _0x524233 = 0x0;\n    while (0x1) {\n        var _0x41b2a7 = Math['floor'](_0x14ad7f * 0.01);\n        _0x14ad7f = _0x14ad7f + _0x41b2a7;\n        _0x524233++;\n        if (_0x382e6a <= _0x14ad7f)\n            break;\n    }\n    console['log'](_0x524233);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["103", "3"], ["1000000000000000000", "3760"], ["1333333333", "1706"]], "original": "const main = (inputs) => {\n  var array = inputs[0].split(\" \");\n  var X = Number(array);\n\n  var num = 100;\n  var count = 0;\n  while (1) {\n    var risoku = Math.floor(num * 0.01);\n    num = num + risoku;\n    count++;\n    if (X <= num) break;\n  }\n\n  console.log(count);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02702_1", "type": "JavaScript", "obfuscated": "const Main = () => {\n    let _0x55e6fa = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n    const _0x53f116 = {};\n    let _0xa3dc60 = 0x0;\n    for (let _0x33b68d = _0x55e6fa['length']; 0x0 < _0x33b68d; _0x33b68d--) {\n        const _0x21abd2 = parseInt(_0x55e6fa, 0xa);\n        const _0x3e8f5e = _0x21abd2 % 0x7e3;\n        if (_0x53f116[_0x3e8f5e] || _0x3e8f5e === 0x0) {\n            _0xa3dc60++;\n        }\n        _0x53f116[_0x3e8f5e] = !![];\n        _0x55e6fa = _0x55e6fa['slice'](0x1);\n    }\n    console['log'](_0xa3dc60);\n};\nMain();", "test_cases": [["1817181712114", "3"], ["14282668646", "2"], ["2119", "0"]], "original": "const Main = () => {\n    let line = require('fs').readFileSync('/dev/stdin', 'utf8');\n    const mod = {};\n    let count = 0;\n    for (let i = line.length; 0 < i; i--) {\n        const n = parseInt(line, 10);\n        const m = n % 2019;\n        if (mod[m] || m === 0) {\n            count ++;\n        }\n        mod[m] = true;\n        line = line.slice(1);\n    }\n    console.log(count);\n}\n\nMain();", "language": "JavaScript"}
{"filename": "p02717_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x13dcaf) {\n    var _0x34e5be = _0x13dcaf['split']('\\x20');\n    console['log'](_0x34e5be[0x2] + '\\x20' + _0x34e5be[0x0] + '\\x20' + _0x34e5be[0x1]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 2 3", "3 1 2"], ["100 100 100", "100 100 100"], ["41 59 31", "31 41 59"]], "original": "\"use strict\";\nfunction main(input) {\n    var line = input.split(\" \");\n    console.log(line[2] + \" \" + line[0] + \" \" + line[1]); \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02719_1", "type": "JavaScript", "obfuscated": "function Main(_0x3b812b) {\n    _0x3b812b = _0x3b812b['split']('\\x0a');\n    tmp = _0x3b812b[0x0]['split']('\\x20');\n    var _0x23f426 = Number(tmp[0x0]);\n    var _0x224187 = Number(tmp[0x1]);\n    if (_0x224187 === 0x1)\n        return console['log'](0x0);\n    var _0x85d9a8 = Math['abs'](_0x23f426 - _0x224187);\n    _0x23f426 = _0x85d9a8;\n    while (_0x85d9a8 >= _0x23f426) {\n        _0x23f426 = _0x85d9a8;\n        _0x85d9a8 = Math['abs'](_0x23f426 - _0x224187);\n    }\n    console['log'](_0x85d9a8);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 4", "1"], ["2 6", "2"], ["1000000000000000000 1", "0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\ttmp = input[0].split(\" \");\n\tvar N = Number(tmp[0])\n    var K = Number(tmp[1])\n    if(K === 1) return console.log(0)\n    \n    var current = Math.abs(N - K)\n    N = current\n    while(current >= N) {\n      \n      N = current\n      current = Math.abs(N - K)\n    }\n  console.log(current)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02789_1", "type": "JavaScript", "obfuscated": "function main(_0x496177) {\n    var _0x587164 = _0x496177['split']('\\x20');\n    var _0x41d99e = parseInt(_0x587164[0x0], 0xa);\n    var _0x1f7f37 = parseInt(_0x587164[0x1], 0xa);\n    if (_0x41d99e === _0x1f7f37) {\n        return 'Yes';\n    } else {\n        return 'No';\n    }\n}\nconsole['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3 3", "Yes"], ["3 2", "No"], ["1 1", "Yes"]], "original": "function main(input) {\n  var args = input.split(' ');\n  var n = parseInt(args[0], 10);\n  var m = parseInt(args[1], 10);\n  if ( n === m) {\n    return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02829_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5e53a3) {\n    const _0x47af65 = _0x5e53a3['split']('\\x0a');\n    const _0x139007 = _0x47af65['map'](_0x2a68bc => parseInt(_0x2a68bc));\n    const _0x27f137 = [\n        0x1,\n        0x2,\n        0x3\n    ];\n    let _0x1c2fed = _0x27f137['filter'](_0x9b068b => _0x9b068b !== _0x139007[0x0]);\n    _0x1c2fed = _0x1c2fed['find'](_0x21f332 => _0x21f332 !== _0x139007[0x1]);\n    console['log'](_0x1c2fed);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1", "2"], ["1\n2", "3"]], "original": "'use strict'\nfunction main(input) {\n  const args = input.split('\\n');\n  const num = args.map(el => parseInt(el))\n  const ans = [1, 2, 3]\n  let out = ans.filter(el => el !== num[0])\n  out = out.find(el => el !== num[1])\n  console.log(out)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02866_1", "type": "JavaScript", "obfuscated": "function main(_0x2daea2) {\n    var _0x25c702 = _0x2daea2['split']('\\x0a')[0x1]['split'](/\\s/g);\n    var _0xfacfe8 = [];\n    for (i = 0x0; i < _0x2daea2['split']('\\x0a')[0x0]; i++) {\n        if (!_0xfacfe8[_0x25c702[i]]) {\n            _0xfacfe8[_0x25c702[i]] = 0x0;\n        }\n        _0xfacfe8[_0x25c702[i]] += 0x1;\n    }\n    var _0x396675 = 0x1;\n    for (j = 0x0; j < _0xfacfe8['length']; j++) {\n        if (j > 0x1) {\n            _0x396675 = _0x396675 * Math['pow'](_0xfacfe8[j - 0x1], _0xfacfe8[j]);\n        }\n        if (!_0xfacfe8[j]) {\n            _0x396675 = 0x0;\n            break;\n        }\n    }\n    console['log'](_0x396675 % 0x3b800001);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n0 1 1 2", "2"], ["4\n1 1 1 1", "0"], ["7\n0 3 2 1 2 2 1", "24"]], "original": "function main(arg) {\n    var arg2 = arg.split(\"\\n\")[1].split(/\\s/g); //元データ\n    var kazoe = []; //各数字の個数の配列\n\n\tfor(i=0;i<arg.split(\"\\n\")[0];i++){\n\t\t//もし存在しなければ作る\n\t\tif(!kazoe[arg2[i]]){\n\t\t\tkazoe[arg2[i]] = 0;\n\t\t}\n\t\tkazoe[arg2[i]] += 1;\n\t}\n\t//答えは(1の個数)^(2の個数)*(2の個数)^(3の個数)*(3の個数)^(4の個数)*…*(N-1の個数)^(Nの個数)\n\tvar ans = 1;\n\tfor(j=0;j<kazoe.length;j++){\n\t    if(j>1){\n\t    \tans = ans * Math.pow(kazoe[j-1],kazoe[j]);\n\t    }\n\t    //もし間に歯抜けがあればfalse\n\t    if(!kazoe[j]){\n\t       ans = 0;\n\t       break;\n\t    }\n\t}\n    console.log(ans%998244353);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02933_1", "type": "JavaScript", "obfuscated": "const Main = _0x5985ca => {\n    _0x5985ca = _0x5985ca['split']('\\x0a');\n    const _0x226ae5 = _0x5985ca[0x0];\n    const _0x2d7ef5 = _0x5985ca[0x1];\n    if (_0x226ae5 >= 0xc80) {\n        console['log'](_0x2d7ef5);\n    } else {\n        console['log']('red');\n    }\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3200\npink", "pink"], ["3199\npink", "red"], ["4049\nred", "red"]], "original": "const Main = (input) => {\ninput = input.split('\\n')\nconst a = input[0];\nconst s = input[1];\n\nif(a>=3200){\n  console.log(s);\n}\nelse{\n  console.log(\"red\");\n}\n  \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript"}
{"filename": "p02936_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5358b6) {\n    const _0x5543ba = _0x5358b6['trim']()['split']('\\x0a')['map'](_0x1f41b9 => _0x1f41b9['split']('\\x20')['map'](_0x38f14a => parseFloat(_0x38f14a)));\n    const _0x5e1bc3 = _0x5543ba[0x0][0x0];\n    const _0x3593c6 = _0x5543ba[0x0][0x1];\n    const _0x555af0 = _0x5543ba['slice'](0x1, _0x5e1bc3);\n    const _0x2a75de = _0x5543ba['slice'](_0x5e1bc3, _0x5e1bc3 + _0x3593c6);\n    const _0x39ebee = [...new Array(_0x5e1bc3 + 0x1)]['map'](_0xa9539d => []);\n    for (let _0x40bb5 = 0x0; _0x40bb5 < _0x5e1bc3 - 0x1; _0x40bb5++) {\n        const _0x51a276 = _0x555af0[_0x40bb5][0x0];\n        _0x39ebee[_0x51a276]['push'](_0x555af0[_0x40bb5][0x1]);\n    }\n    const _0x318826 = [...new Array(_0x5e1bc3 + 0x1)]['map'](_0x4c9355 => 0x0);\n    for (let _0x6e48fe = 0x0; _0x6e48fe < _0x3593c6; _0x6e48fe++) {\n        const _0x274c7d = _0x2a75de[_0x6e48fe];\n        const _0x13885e = _0x274c7d[0x1];\n        _0x318826[_0x274c7d[0x0]] += _0x13885e;\n        let _0x564e08 = [..._0x39ebee[_0x274c7d[0x0]]];\n        while (_0x564e08['length'] > 0x0) {\n            const _0x4cada1 = _0x564e08['pop']();\n            _0x318826[_0x4cada1] += _0x13885e;\n            _0x564e08 = _0x564e08['concat'](_0x39ebee[_0x4cada1]);\n        }\n    }\n    console['log'](_0x318826['slice'](0x1)['join']('\\x20'));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3\n1 2\n2 3\n2 4\n2 10\n1 100\n3 1", "100 110 111 110"], ["6 2\n1 2\n1 3\n2 4\n3 6\n2 5\n1 10\n1 10", "20 20 20 20 20 20"]], "original": "'use strict'\n\nfunction main(input) {\n  const tmp = input\n    .trim()\n    .split('\\n')\n    .map(v => v.split(' ').map(v => parseFloat(v)))\n  const n = tmp[0][0]\n  const q = tmp[0][1]\n  const edges = tmp.slice(1, n)\n  const actions = tmp.slice(n, n + q)\n\n  const nodes = [...new Array(n + 1)].map(v => [])\n  for (let i = 0; i < n - 1; i++) {\n    const p = edges[i][0]\n    nodes[p].push(edges[i][1])\n  }\n\n  const ans = [...new Array(n + 1)].map(v => 0)\n  // actions.forEach((act, i, self) => {\n  for (let i = 0; i < q; i++) {\n    const act = actions[i]\n    const cnt = act[1]\n    ans[act[0]] += cnt\n    let stack = [...nodes[act[0]]]\n\n    while (stack.length > 0) {\n      const t = stack.pop()\n      ans[t] += cnt\n      // stack = [...stack, ...nodes[t]]\n      stack = stack.concat(nodes[t])\n    }\n  }\n  console.log(ans.slice(1).join(' '))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02957_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3b1633 => {\n    const _0x35459d = _0x3b1633['split']('\\x0a')['map'](_0x1636ca => _0x1636ca['split']('\\x20'));\n    const _0x427091 = parseInt(_0x35459d[0x0][0x0], 0xa);\n    const _0x3cdda4 = parseInt(_0x35459d[0x0][0x1], 0xa);\n    const _0x2bd0ea = _0x427091 + _0x3cdda4;\n    const _0x378d8d = _0x2bd0ea / 0x2;\n    if (_0x378d8d % 0x1 === 0x0)\n        console['log'](_0x378d8d);\n    else\n        console['log']('IMPOSSIBLE');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 16", "9"], ["0 3", "IMPOSSIBLE"], ["998244353 99824435", "549034394"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst a = parseInt(args[0][0], 10)\n\tconst b = parseInt(args[0][1], 10)\n\tconst t1 = a + b\n\tconst t2 = t1 / 2\n\tif (t2 % 1 === 0) console.log(t2)\n\telse console.log('IMPOSSIBLE')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02958_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x453c11 => {\n    lines['push'](_0x453c11);\n});\nreader['on']('close', () => {\n    const _0x1b3fec = lines[0x1]['split']('\\x20')['map'](_0x55bb53 => _0x55bb53 - 0x0);\n    const _0x4d9dd6 = lines[0x1]['split']('\\x20')['map'](_0x504c7b => _0x504c7b - 0x0)['sort']((_0x2da859, _0x46bab7) => _0x2da859 - _0x46bab7);\n    let _0x1a1ba6 = _0x1b3fec['filter']((_0x1ef880, _0x8a6a5b) => _0x1ef880 != _0x4d9dd6[_0x8a6a5b])['length'];\n    console['log'](_0x1a1ba6 <= 0x2 ? 'YES' : 'NO');\n});\nmin = (..._0x4c7a32) => {\n    return _0x4c7a32['reduce']((_0x2fdfd7, _0x5c0989) => _0x2fdfd7 < _0x5c0989 ? _0x2fdfd7 : _0x5c0989, _0x4c7a32[0x0]);\n};", "test_cases": [["5\n5 2 3 4 1", "YES"], ["5\n2 4 3 5 1", "NO"], ["7\n1 2 3 4 5 6 7", "YES"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const a = lines[1].split(\" \").map(v=>v-0);\n    const b = lines[1].split(\" \").map(v=>v-0).sort((a,b)=>a-b);\n    let ans = a.filter((v,i)=>v!=b[i]).length;\n    console.log(ans<=2?\"YES\":\"NO\");\n});\n\nmin = (...a)=>{return a.reduce((a,b)=>a<b?a:b, a[0])};\n", "language": "JavaScript"}
{"filename": "p02969_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar r = parseInt(input, 0xa);\nconsole['log'](0x3 * r * r);", "test_cases": [["4", "48"], ["15", "675"], ["80", "19200"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar r = parseInt(input, 10);\nconsole.log(3 * r * r);\n", "language": "JavaScript"}
{"filename": "p02971_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x160c0b) {\n    var _0x459c99 = _0x160c0b['split']('\\x0a');\n    var _0x10c4c9 = _0x459c99[0x0];\n    var _0x125faa = [];\n    for (var _0xad2582 = 0x1; _0x10c4c9 >= _0xad2582; _0xad2582++) {\n        _0x125faa['push'](_0x459c99[_0xad2582]);\n    }\n    for (var _0x51eefa = 0x0, _0x472a44 = _0x125faa['length']; _0x51eefa < _0x472a44; ++_0x51eefa) {\n        var _0x4c1918 = _0x125faa['slice'](0x0, _0x125faa['length']);\n        _0x4c1918['splice'](_0x51eefa, 0x1);\n        console['log'](Math['max']['apply'](null, _0x4c1918));\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1\n4\n3", "4\n3\n4"], ["2\n5\n5", "5\n5"]], "original": "\"use strict\"\nfunction main(arg) {\n    //とりあえず行を分割\n    var input = arg.split(\"\\n\");\n    var retu = input[0];\n    var kazu = [];\n    for(var i = 1; retu >= i ;i++){\n        kazu.push(input[i]);\n    }\n\n//X番目を抜いた中で一番大きいやつを求める\nfor (var x = 0, len = kazu.length; x < len; ++x) {\n  var kazu2 = kazu.slice(0, kazu.length);\n  kazu2.splice(x, 1);\n  console.log(Math.max.apply(null, kazu2));\n}\n    \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03024_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2b03bf => {\n    _0x2b03bf = _0x2b03bf['trim']()['split']('\\x0a');\n    const _0x135b54 = _0x2b03bf[0x0]['split']('');\n    const _0x43414c = _0x135b54['filter'](_0x56e626 => _0x56e626 === 'o')['length'];\n    const _0x554048 = 0xf - _0x135b54['length'];\n    console['log'](_0x554048 + _0x43414c >= 0x8 ? 'YES' : 'NO');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["oxoxoxoxoxoxox", "YES"], ["xxxxxxxx", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    const win  = S.filter(n=>n===\"o\").length;\n    const rest = 15 - S.length;\n    \n    console.log((rest + win) >= 8 ? \"YES\" : \"NO\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03042_1", "type": "JavaScript", "obfuscated": "function Main(_0x48340c) {\n    var _0x19f977 = parseInt(_0x48340c['charAt'](0x0) + _0x48340c['charAt'](0x1));\n    var _0x5db7dd = parseInt(_0x48340c['charAt'](0x2) + _0x48340c['charAt'](0x3));\n    var _0x2ce611 = 0x0;\n    if (_0x19f977 >= 0xd || _0x19f977 == 0x0) {\n        _0x2ce611 = 0x1;\n    }\n    if (_0x5db7dd >= 0xd || _0x5db7dd == 0x0) {\n        _0x2ce611 = 0x2;\n    }\n    if (_0x19f977 >= 0x1 && _0x19f977 <= 0xc && _0x5db7dd >= 0x1 && _0x5db7dd <= 0xc) {\n        _0x2ce611 = 0x3;\n    }\n    if (_0x19f977 >= 0xd && _0x5db7dd >= 0xd || _0x19f977 >= 0xd && _0x5db7dd == 0x0 || _0x19f977 == 0x0 && _0x5db7dd >= 0xd || _0x19f977 == 0x0 && _0x5db7dd == 0x0) {\n        _0x2ce611 = 0x4;\n    }\n    if (_0x2ce611 == 0x1) {\n        console['log']('YYMM');\n    }\n    if (_0x2ce611 == 0x2) {\n        console['log']('MMYY');\n    }\n    if (_0x2ce611 == 0x3) {\n        console['log']('AMBIGUOUS');\n    }\n    if (_0x2ce611 == 0x4) {\n        console['log']('NA');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1905", "YYMM"], ["0112", "AMBIGUOUS"], ["1700", "NA"]], "original": "function Main(input) {\n\tvar a = parseInt(input.charAt(0)+input.charAt(1));\n\tvar b = parseInt(input.charAt(2)+input.charAt(3));\n\tvar r = 0;\t// 1=YYMM、2=MMYY、3=両方、4=どちらでもない\n\tif(a >= 13 || a == 0){\n\t\tr = 1;\n\t}\n\tif(b >= 13 || b == 0){\n\t\tr = 2;\n\t}\n\tif(a >= 1 && a <= 12 && b >= 1 && b <= 12){\n\t\tr = 3;\n\t}\n\tif(a >= 13 && b >= 13 || a >= 13 && b == 0 || a == 0 && b >= 13 || a == 0 && b == 0){\n\t\tr = 4;\n\t}\n\tif(r == 1){ console.log(\"YYMM\"); }\n\tif(r == 2){ console.log(\"MMYY\"); }\n\tif(r == 3){ console.log(\"AMBIGUOUS\"); }\n\tif(r == 4){ console.log(\"NA\"); }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03068_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x4900a2) {\n    lines['push'](_0x4900a2);\n});\nrl['on']('close', function () {\n    var _0x183ceb = Number(lines[0x0]);\n    var _0x20bb32 = lines[0x1]['split']('');\n    var _0x11570c = Number(lines[0x2]);\n    for (var _0x66cd83 = 0x0; _0x66cd83 < _0x183ceb; _0x66cd83++) {\n        if (_0x20bb32[_0x11570c - 0x1] !== _0x20bb32[_0x66cd83]) {\n            _0x20bb32[_0x66cd83] = '*';\n        }\n    }\n    var _0x179427 = '';\n    for (var _0x66cd83 = 0x0; _0x66cd83 < _0x183ceb; _0x66cd83++) {\n        _0x179427 = _0x179427 + _0x20bb32[_0x66cd83];\n    }\n    console['log'](_0x179427);\n});", "test_cases": [["5\nerror\n2", "*rr*r"], ["6\neleven\n5", "e*e*e*"], ["9\neducation\n7", "******i**"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var S = lines[1].split(\"\");\n    var K = Number(lines[2]);\n\n    for (var i = 0; i < N; i++) {\n        if (S[K - 1] !== S[i]) { S[i] = \"*\"; }\n    }\n    var result =\"\";\n    for (var i = 0; i < N; i++) {\n        result = result + S[i];\n    }\n    console.log(result);\n});", "language": "JavaScript"}
{"filename": "p03125_1", "type": "JavaScript", "obfuscated": "function main(_0xff80ad) {\n    _0xff80ad = _0xff80ad['trim']();\n    const _0x3b3966 = _0xff80ad['split']('\\x20')['map'](Number);\n    console['log'](_0x3b3966[0x1] % _0x3b3966[0x0] == 0x0 ? _0x3b3966[0x0] + _0x3b3966[0x1] : _0x3b3966[0x1] - _0x3b3966[0x0]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 12", "16"], ["8 20", "12"], ["1 1", "2"]], "original": "function main(input) {\n   input = input.trim();\n  const a = input.split(\" \").map(Number);\n\tconsole.log(a[1]%a[0]==0?a[0]+a[1]:a[1]-a[0]);\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03136_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x599f51 => {\n    _0x599f51 = _0x599f51['trim']()['split']('\\x0a');\n    const _0x2f9592 = parseInt(_0x599f51[0x0]['split']('\\x20')[0x0]);\n    let _0x3f0766 = _0x599f51[0x1]['split']('\\x20')['map'](_0x71213d => parseInt(_0x71213d))['sort']((_0x37902f, _0x2a5f4a) => _0x2a5f4a - _0x37902f);\n    const _0x588421 = _0x3f0766['shift']();\n    const _0xbbe2a5 = _0x3f0766['reduce']((_0xdc17a6, _0x33a04c) => _0xdc17a6 + _0x33a04c);\n    console['log'](_0x588421 < _0xbbe2a5 ? 'Yes' : 'No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n3 8 5 1", "Yes"], ["4\n3 8 4 1", "No"], ["10\n1 8 10 5 8 12 34 100 11 3", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    let L = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>b-a);\n    \n    const longest = L.shift();\n    const sum = L.reduce((m,n)=>m+n);\n    \n    console.log(longest < sum ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03285_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x1afa1c) {\n    let _0x2fa179 = Number(_0x1afa1c);\n    const _0x55d3f6 = () => {\n        if (_0x2fa179 < 0x4) {\n            console['log']('No');\n        } else if (_0x2fa179 % 0x4 === 0x0) {\n            console['log']('Yes');\n        } else if (_0x2fa179 % 0x7 === 0x0) {\n            console['log']('Yes');\n        } else {\n            _0x2fa179 -= 0x4;\n            _0x55d3f6();\n        }\n    };\n    _0x55d3f6();\n}\n;\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["11", "Yes"], ["40", "Yes"], ["3", "No"]], "original": "'use strict';\n\nfunction Main(input) {\n  let N = Number(input);\n\n  const func = () => {\n    if(N < 4) {\n      console.log('No');\n    } else if (N % 4 === 0) {\n      console.log('Yes');\n    } else if (N % 7 === 0) {\n      console.log('Yes');\n    } else {\n      N -= 4;\n      func();\n    }\n  };\n\n  func();\n\n\n\n};\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03294_1", "type": "JavaScript", "obfuscated": "var toInt = _0x4192e1 => parseInt(_0x4192e1, 0xa);\nvar toIntArr = _0x1686d8 => _0x1686d8['map'](_0x1f737c => toInt(_0x1f737c));\nvar abs = _0x4100d8 => _0x4100d8 > 0x0 ? _0x4100d8 : -_0x4100d8;\nfunction min() {\n    var _0x5703f9 = arguments, _0x5e1a2d = _0x5703f9[0x0];\n    for (var _0x2a744f = 0x1; _0x2a744f < _0x5703f9['length']; _0x2a744f++)\n        if (_0x5703f9[_0x2a744f] < _0x5e1a2d)\n            _0x5e1a2d = _0x5703f9[_0x2a744f];\n    return _0x5e1a2d;\n}\nfunction max() {\n    var _0x449f86 = arguments, _0x234390 = _0x449f86[0x0];\n    for (var _0xf32954 = 0x1; _0xf32954 < _0x449f86['length']; _0xf32954++)\n        if (_0x449f86[_0xf32954] > _0x234390)\n            _0x234390 = _0x449f86[_0xf32954];\n    return _0x234390;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x23e8c5) {\n    var _0x23e8c5 = _0x23e8c5['split']('\\x0a');\n    var _0x30b435 = toInt(_0x23e8c5[0x0]);\n    var _0xe44232 = toIntArr(_0x23e8c5[0x1]['split']('\\x20'));\n    _0xe44232['length'] = _0x30b435;\n    var _0x23b8bb = -_0x30b435;\n    for (var _0xf4c9d0 = 0x0; _0xf4c9d0 < _0x30b435; _0xf4c9d0++) {\n        _0x23b8bb += _0xe44232[_0xf4c9d0];\n    }\n    console['log'](_0x23b8bb);\n}", "test_cases": [["3\n3 4 6", "10"], ["5\n7 46 11 20 11", "90"], ["7\n994 518 941 851 647 2 581", "4527"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar as = toIntArr(input[1].split(' '));\n\tas.length = n;\n\tvar ans = -n;\n\tfor(var i = 0; i < n; i++){\n\t\tans += as[i];\n\t}\n\tconsole.log(ans);\t\n}", "language": "JavaScript"}
{"filename": "p03316_1", "type": "JavaScript", "obfuscated": "function main(_0x1579fa) {\n    var _0x4a81ab = _0x1579fa['toString']()['split']('');\n    var _0x1d4096 = 0x0;\n    for (var _0x3eec86 = 0x0; _0x3eec86 < _0x4a81ab['length']; _0x3eec86++) {\n        _0x1d4096 += parseInt(_0x4a81ab[_0x3eec86]);\n    }\n    if (parseInt(_0x1579fa) % _0x1d4096 == 0x0) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["12", "Yes"], ["101", "No"], ["999999999", "Yes"]], "original": "function main(input) {\n  var inputA = input.toString().split('');\n  var sum = 0;\n  for (var i=0;i<inputA.length;i++){\n   \tsum += parseInt(inputA[i]);\n  }\n  if (parseInt(input) % sum == 0) {\n  \tconsole.log('Yes');\n  } else {\n  \tconsole.log('No');\n  }\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03359_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst list = input['split']('\\x20');\nconst a = Number(list[0x0]);\nconst b = Number(list[0x1]);\nif (a > b) {\n    console['log'](a - 0x1);\n} else {\n    console['log'](a);\n}", "test_cases": [["5 5", "5"], ["2 1", "1"], ["11 30", "11"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst list = input.split(' ');\n\nconst a = Number(list[0]);\n\nconst b = Number(list[1]);\n\nif (a > b) {\n  console.log(a - 1);\n} else {\n  console.log(a);\n}\n", "language": "JavaScript"}
{"filename": "p03369_1", "type": "JavaScript", "obfuscated": "function main(_0x2ce93d) {\n    var _0x3ce264 = 0x0;\n    for (var _0x3172bf = 0x0; _0x3172bf < 0x3; _0x3172bf++) {\n        if (_0x2ce93d[_0x3172bf] == 'o') {\n            _0x3ce264++;\n        }\n    }\n    console['log'](0x2bc + _0x3ce264 * 0x64);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["oxo", "900"], ["ooo", "1000"], ["xxx", "700"]], "original": "function main (s) {\n    var add=0;\n    for(var i=0;i<3;i++){\n        if(s[i]=='o'){\n            add++;\n        }\n    }\n    console.log(700+add*100);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03474_1", "type": "JavaScript", "obfuscated": "function Main(_0x99599) {\n    _0x99599 = _0x99599['split']('\\x0a');\n    var _0x5c1576 = parseInt(_0x99599[0x0]['split']('\\x20')[0x0], 0xa);\n    var _0x2f0a67 = parseInt(_0x99599[0x0]['split']('\\x20')[0x1], 0xa);\n    var _0x407648 = _0x99599[0x1];\n    var _0x1a9808 = new RegExp('^[0-9]{' + _0x5c1576 + '}-[0-9]{' + _0x2f0a67 + '}$', 'g');\n    var _0x1728c1 = _0x407648['match'](_0x1a9808);\n    console['log'](_0x1728c1 == null ? 'No' : 'Yes');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4\n269-6650", "Yes"], ["1 1\n---", "No"], ["1 2\n7444", "No"]], "original": "function Main(input) {\n  input = input.split('\\n');\n\n  var a = parseInt(input[0].split(' ')[0], 10);\n  var b = parseInt(input[0].split(' ')[1], 10);\n  var s = input[1];\n\n  var regex = new RegExp(`^[0-9]{${a}}-[0-9]{${b}}$`, 'g');\n  var f = s.match(regex);\n\n  console.log(f == null ? 'No' : 'Yes');\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03501_1", "type": "JavaScript", "obfuscated": "function Main(_0x467938) {\n    const _0x16acb3 = _0x467938['split']('\\x20')['map'](_0x3489ac => Number(_0x3489ac));\n    const _0xf4ca5f = _0x16acb3[0x0] * _0x16acb3[0x1];\n    const _0x40eb08 = _0x16acb3[0x2];\n    if (_0xf4ca5f > _0x40eb08) {\n        console['log'](_0x40eb08);\n    } else {\n        console['log'](_0xf4ca5f);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 17 120", "119"], ["5 20 100", "100"], ["6 18 100", "100"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const p1 = numbers[0] * numbers[1];\n  const p2 = numbers[2];\n\n  if (p1 > p2) {\n    console.log(p2);\n  } else {\n    console.log(p1);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03657_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x1fa3dc) {\n    _0x1fa3dc = _0x1fa3dc['split']('\\x0a');\n    const _0x2f254c = _0x1fa3dc[0x0]['split']('\\x20');\n    if (_0x2f254c[0x0] % 0x3 === 0x0 || _0x2f254c[0x1] % 0x3 === 0x0 || (_0x2f254c[0x0] + _0x2f254c[0x1]) % 0x3 === 0x0) {\n        console['log']('Possible');\n    } else {\n        console['log']('Impossible');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5", "Possible"], ["1 1", "Impossible"]], "original": "'use strict'\nfunction Main(input) {\n    input = input.split(\"\\n\");\n    const arr = input[0].split(' ')\n    if (arr[0] % 3 === 0 || arr[1] % 3 === 0 || (arr[0] + arr[1]) % 3 === 0) {\n        console.log('Possible')\n    } else {\n        console.log('Impossible')\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03997_1", "type": "JavaScript", "obfuscated": "function Main(_0x34f9bf) {\n    _0x34f9bf = _0x34f9bf['split']('\\x0a');\n    _0x34f9bf[0x0] = Number(_0x34f9bf[0x0]);\n    _0x34f9bf[0x1] = Number(_0x34f9bf[0x1]);\n    _0x34f9bf[0x2] = Number(_0x34f9bf[0x2]);\n    console['log']((_0x34f9bf[0x0] + _0x34f9bf[0x1]) * _0x34f9bf[0x2] / 0x2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n4\n2", "7"], ["4\n4\n4", "16"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    input[0] = Number(input[0]);\n    input[1] = Number(input[1]);\n    input[2] = Number(input[2]);\n    console.log((input[0] + input[1]) * input[2] / 2);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04044_1", "type": "JavaScript", "obfuscated": "function Main(_0x5be8d9) {\n    var _0xe6f912 = _0x5be8d9['split']('\\x0a');\n    var _0x26c79c = _0xe6f912['splice'](0x1, _0xe6f912['length']);\n    var _0x68a9c = _0x26c79c['sort']((_0x455df6, _0x261db5) => _0x455df6 > _0x261db5 ? 0x1 : -0x1);\n    console['log'](_0x68a9c['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\ndxx\naxx\ncxx", "axxcxxdxx"]], "original": "function Main(input) {\n\tvar lines = input.split(\"\\n\");\n\tvar s = lines.splice(1, lines.length)\n\tvar s_sorted = s.sort((a, b) => a > b ? 1 : -1)\n\tconsole.log(s_sorted.join(''))\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02264_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar t = Arr[0x0]['split']('\\x20')[0x1] - 0x0;\nArr['shift']();\nvar T = 0x0;\nwhile (Arr['length'] != 0x0) {\n    var arr = Arr[0x0]['split']('\\x20');\n    Arr['shift']();\n    var a = arr[0x0];\n    var b = arr[0x1] - 0x0;\n    if (b - t <= 0x0) {\n        console['log'](a + '\\x20' + (T + b));\n        T += b;\n    } else {\n        Arr['push'](a + '\\x20' + (b - t));\n        T += t;\n    }\n}", "test_cases": [["5 100\np1 150\np2 80\np3 200\np4 350\np5 20", "p2 180\np5 400\np1 450\np3 550\np4 800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar t=(Arr[0].split(\" \"))[1]-0;\nArr.shift();\nvar T=0;\nwhile(Arr.length!=0){\n   var arr=Arr[0].split(\" \");\n   Arr.shift();\n   var a=arr[0];\n   var b=arr[1]-0;\n   if(b-t<=0){\n      console.log(a+\" \"+(T+b));\n      T+=b;\n   }else{\n      Arr.push(a+\" \"+(b-t));\n      T+=t;\n   }\n}", "language": "JavaScript"}
{"filename": "p02269_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['shift']();\nvar obj = {};\nArr['forEach'](function (_0x58cc6f) {\n    var _0x4d2f27 = _0x58cc6f['split']('\\x20');\n    if (_0x4d2f27[0x0] == 'insert')\n        obj[_0x4d2f27[0x1]] = !![];\n    if (_0x4d2f27[0x0] == 'find')\n        console['log'](obj['hasOwnProperty'](_0x4d2f27[0x1]) ? 'yes' : 'no');\n});", "test_cases": [["5\ninsert A\ninsert T\ninsert C\nfind G\nfind A", "no\nyes"], ["13\ninsert AAA\ninsert AAC\ninsert AGA\ninsert AGG\ninsert TTT\nfind AAA\nfind CCC\nfind CCC\ninsert CCC\nfind CCC\ninsert T\nfind TTT\nfind T", "yes\nno\nno\nyes\nyes\nyes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.shift();\nvar obj={};\nArr.forEach(function(v){\nvar arr=v.split(\" \");\nif(arr[0]==\"insert\")obj[arr[1]]=true;\nif(arr[0]==\"find\")console.log(obj.hasOwnProperty(arr[1]) ? \"yes\":\"no\");\n});", "language": "JavaScript"}
{"filename": "p02392_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x73ce55) {\n    var _0x399d1a = _0x73ce55['split']('\\x20')['map'](Number);\n    var _0x55cde8 = _0x399d1a[0x0];\n    var _0x483363 = _0x399d1a[0x1];\n    var _0x4af634 = _0x399d1a[0x2];\n    console['log']('%s', _0x55cde8 < _0x483363 && _0x483363 < _0x4af634 ? 'Yes' : 'No');\n});", "test_cases": [["1 3 8", "Yes"], ["3 8 1", "No"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(x) {\n    var args = x.split(' ').map(Number);\n    var a = args[0];\n    var b = args[1];\n    var c = args[2];\n    console.log('%s', a < b && b < c ? 'Yes' : 'No');\n});", "language": "JavaScript"}
{"filename": "p02393_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cnt, i, j;\ninput = input['split']('\\x20');\nfor (cnt = 0x0; cnt < 0x3; cnt++) {\n    for (i = 0x0; i < 0x3; i++) {\n        if (input[i] > input[i + 0x1]) {\n            j = input[i];\n            input[i] = input[i + 0x1];\n            input[i + 0x1] = j;\n        }\n    }\n}\nconsole['log']('%d\\x20%d\\x20%d', input[0x0], input[0x1], input[0x2]);", "test_cases": [["3 8 1", "1 3 8"]], "original": "var input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cnt,i,j;\n\ninput=input.split(\" \");\nfor(cnt=0;cnt<3;cnt++){\nfor(i=0;i<3;i++){\n    if(input[i]>input[i+1]){\n        j=input[i]\n        input[i]=input[i+1]\n        input[i+1]=j\n    }\n}\n}\n\nconsole.log(\"%d %d %d\",input[0],input[1],input[2]);\n\n", "language": "JavaScript"}
{"filename": "p02397_1", "type": "JavaScript", "obfuscated": "function main(_0x3d6e9b) {\n    var _0x235c1f = 0x0;\n    while (_0x3d6e9b[_0x235c1f] != 0x0 && _0x3d6e9b[_0x235c1f + 0x1] != 0x0) {\n        if (_0x3d6e9b[_0x235c1f] < _0x3d6e9b[_0x235c1f + 0x1])\n            console['log'](_0x3d6e9b[_0x235c1f] + '\\x20' + _0x3d6e9b[_0x235c1f + 0x1]);\n        else\n            console['log'](_0x3d6e9b[_0x235c1f + 0x1] + '\\x20' + _0x3d6e9b[_0x235c1f]);\n        _0x235c1f = _0x235c1f + 0x2;\n    }\n}\nvar lines = [];\nvar b = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x4d85e7) {\n    var _0x51a1ad = _0x4d85e7['split']('\\x20');\n    var _0x99cc88 = parseInt(_0x51a1ad[0x0], 0xa);\n    var _0x26eccb = parseInt(_0x51a1ad[0x1], 0xa);\n    b['push'](_0x99cc88);\n    b['push'](_0x26eccb);\n    if (_0x99cc88 == 0x0 && _0x26eccb == 0x0)\n        main(b);\n});\nprocess['stdin']['on']('end', function () {\n});", "test_cases": [["3 2\n2 2\n5 3\n0 0", "2 3\n2 2\n3 5"]], "original": "function main(tmp) {\n  var i = 0;\n  while(tmp[i]!=0 && tmp[i+1]!=0){\n    if(tmp[i]<tmp[i+1])\n      console.log(tmp[i]+\" \"+tmp[i+1]);\n    else\n      console.log(tmp[i+1]+\" \"+tmp[i]);\n    i = i + 2;\n  }\n}\nvar lines = [];\nvar b = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var c = parseInt(a[0],10);\n  var d = parseInt(a[1],10);\n  b.push(c);\n  b.push(d);\n  if(c==0 && d==0)\n    main(b);\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript"}
{"filename": "p02552_1", "type": "JavaScript", "obfuscated": "const main = _0xbd282f => {\n    console['log'](+_0xbd282f === 0x0 ? 0x1 : 0x0);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1", "0"], ["0", "1"]], "original": "const main = (arg) => {\n  console.log(+arg === 0 ? 1 : 0);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02582_1", "type": "JavaScript", "obfuscated": "function main(_0x443340) {\n    _0x443340 = _0x443340['trim']();\n    let _0x434770 = _0x443340['split']('');\n    let _0x125d41 = 0x0;\n    for (let _0x27251f = 0x0; _0x27251f < _0x434770['length']; _0x27251f++) {\n        if (_0x434770[_0x27251f] === 'R') {\n            if (_0x125d41 === 0x0) {\n                _0x125d41++;\n            } else if (_0x434770[_0x27251f - 0x1] === 'R') {\n                _0x125d41++;\n            }\n        }\n    }\n    console['log'](_0x125d41);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["RRS", "2"], ["SSS", "0"], ["RSR", "1"]], "original": "function main(input){\n  input = input.trim();\n  let list = input.split(\"\");\n  let answer = 0;\n  for(let i=0; i<list.length; i++){\n    if(list[i]===\"R\"){\n      if(answer===0){answer++;\n      }else if(list[i-1]===\"R\"){\n        answer++;\n      }                 \n    }\n  }\n  console.log(answer);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02724_1", "type": "JavaScript", "obfuscated": "function Main(_0x26d01d) {\n    var _0x38c5a9 = 0x0;\n    _0x38c5a9 += Math['floor'](_0x26d01d / 0x1f4) * 0x3e8;\n    _0x38c5a9 += Math['floor'](_0x26d01d % 0x1f4 / 0x5) * 0x5;\n    console['log'](_0x38c5a9);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1024", "2020"], ["0", "0"], ["1000000000", "2000000000"]], "original": "function Main(input) {\n  var joy = 0;\n  joy += (Math.floor(input / 500)) * 1000;\n  joy += Math.floor((input % 500) / 5) * 5;\n  console.log(joy);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02970_1", "type": "JavaScript", "obfuscated": "function Main(_0x452d0a) {\n    var _0x3c4948 = _0x452d0a['split']('\\x0a');\n    var _0x3b3648 = _0x3c4948[0x0]['split']('\\x20');\n    var _0x52fd10 = _0x3b3648[0x0];\n    var _0x132adb = _0x3b3648[0x1];\n    var _0x21534f = _0x132adb * 0x2 + 0x1;\n    var _0x1b5681 = Math['floor'](_0x52fd10 / _0x21534f);\n    var _0x30ca8c = _0x52fd10 % _0x21534f;\n    if (_0x30ca8c > 0x0)\n        _0x1b5681 += 0x1;\n    console['log'](_0x1b5681);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 2", "2"], ["14 3", "2"], ["20 4", "3"]], "original": "function Main(input) {\n  var dataList = input.split(\"\\n\");\n  var data = dataList[0].split(\" \");\n  var n = data[0];\n  var d = data[1];\n  var checkNum = (d * 2) + 1;\n  var num = Math.floor(n/checkNum);\n  var rest = n % checkNum;\n  if (rest > 0) num += 1;\n  console.log(num);\n  \n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03032_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5976ec) {\n    _0x5976ec = _0x5976ec['trim']()['split']('\\x0a');\n    const _0x5ab1f0 = _0x5976ec['shift']()['split']('\\x20')['map'](_0xcd9ca => Number(_0xcd9ca));\n    const _0x72c5f1 = Math['min'](..._0x5ab1f0);\n    _0x5976ec = _0x5976ec[0x0]['split']('\\x20')['map'](_0x5e1cf0 => Number(_0x5e1cf0));\n    const _0x47209c = [];\n    for (let _0x57e353 = 0x0; _0x57e353 <= _0x72c5f1; _0x57e353++) {\n        for (let _0x1cfbdb = 0x0; _0x1cfbdb <= _0x72c5f1 - _0x57e353; _0x1cfbdb++) {\n            let _0x47504b = [\n                ..._0x5976ec['slice'](0x0, _0x57e353),\n                ..._0x5976ec['slice'](_0x5ab1f0[0x0] - _0x1cfbdb)\n            ]['sort']((_0x1fd282, _0x1b1c20) => _0x1fd282 - _0x1b1c20);\n            let _0x1bf166 = _0x5ab1f0[0x1] - _0x57e353 - _0x1cfbdb;\n            for (let _0x20fce8 = 0x0; _0x20fce8 < _0x1bf166; _0x20fce8++) {\n                if (_0x47504b[_0x20fce8] >= 0x0)\n                    break;\n                _0x47504b[_0x20fce8] = 0x0;\n            }\n            _0x47209c['push'](_0x47504b['reduce']((_0x5b3078, _0x467faa) => _0x5b3078 + _0x467faa, 0x0));\n        }\n    }\n    console['log'](Math['max'](..._0x47209c));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 4\n-10 8 2 1 2 6", "14"], ["6 4\n-6 -100 50 -2 -5 -3", "44"], ["6 3\n-6 -100 50 -2 -5 -3", "0"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  const NK = input.shift().split(' ').map(val => Number(val))\n  const count = Math.min(...NK)\n  input = input[0].split(' ').map(val => Number(val))\n\n  const ans = []\n\n  for(let l = 0; l <= count; l ++) {\n    for (let r = 0; r <= count - l; r ++) {\n      let temp = [\n        ...input.slice(0, l),\n        ...input.slice(NK[0] - r)\n      ].sort((a, b) => a - b)\n      let remain = NK[1] - l - r\n      for (let i = 0; i < remain; i++) {\n        if (temp[i] >= 0) break;\n        temp[i] = 0\n      }\n      ans.push(temp.reduce((p, c) => p + c, 0))\n    }\n  }\n  console.log(Math.max(...ans))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03041_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x5be5d0 => {\n    let _0x3b238b = _0x5be5d0['split']('\\x0a');\n    let _0x19298c = _0x3b238b[0x0]['split']('\\x20')['map'](Number)[0x0];\n    let _0x495727 = _0x3b238b[0x0]['split']('\\x20')['map'](Number)[0x1];\n    let _0x2ea018 = _0x3b238b[0x1]['trim']();\n    let _0x5a8f4d = _0x2ea018[_0x495727 - 0x1];\n    switch (_0x5a8f4d) {\n    case 'A':\n        _0x5a8f4d = 'a';\n        break;\n    case 'B':\n        _0x5a8f4d = 'b';\n        break;\n    case 'C':\n        _0x5a8f4d = 'c';\n        break;\n    }\n    let _0x96f695 = _0x2ea018['split']('');\n    _0x96f695[_0x495727 - 0x1] = _0x5a8f4d;\n    _0x2ea018 = _0x96f695['join']('');\n    console['log'](_0x2ea018);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 1\nABC", "aBC"], ["4 3\nCABA", "CAbA"]], "original": "'use strict'\nconst Main = input => {\n\n  let tmp = input.split('\\n');\n  let Num = tmp[0].split(' ').map(Number)[0];\n  let Kji = tmp[0].split(' ').map(Number)[1];\n  let Str = tmp[1].trim();\n  // console.log({ Num });\n  // console.log({ Kji });\n  // console.log({ Str });\n\n  let Change = Str[Kji - 1];\n\n  switch (Change) {\n    case 'A': Change = 'a';\n      break;\n    case 'B': Change = 'b';\n      break;\n    case 'C': Change = 'c';\n      break;\n  }\n\n  let StrArr = Str.split('');\n  StrArr[Kji - 1] = Change;\n  Str = StrArr.join('');\n\n  console.log(Str);\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03079_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d9a7d) {\n    var _0x491c4f = _0x1d9a7d;\n    var _0x3d6285 = _0x491c4f['split']('\\x20')['map'](Number);\n    if (_0x3d6285[0x0] == _0x3d6285[0x1] && _0x3d6285[0x1] == _0x3d6285[0x2]) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2 2", "Yes"], ["3 4 5", "No"]], "original": "function Main(input){\n  \n  var str = input;\n  var tmp = str.split(\" \").map(Number);\n\n  if(tmp[0]==tmp[1] && tmp[1]==tmp[2]){\n     console.log(\"Yes\");}\n  \n  else {\n       console.log(\"No\");}\n    \n}//function\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03101_1", "type": "JavaScript", "obfuscated": "function main(_0x482bc9) {\n    var _0x37e72a = _0x482bc9['split']('\\x0a')[0x0]['split']('\\x20');\n    var _0x336a70 = _0x482bc9['split']('\\x0a')[0x1]['split']('\\x20');\n    console['log'](_0x37e72a[0x0] * _0x37e72a[0x1] - _0x37e72a[0x1] * _0x336a70[0x0] - (_0x37e72a[0x0] - _0x336a70[0x0]) * _0x336a70[0x1]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n2 1", "1"], ["5 5\n2 3", "6"], ["2 4\n2 4", "0"]], "original": "function main(arg) {\n    var size = arg.split(\"\\n\")[0].split(\" \")\n    var sel = arg.split(\"\\n\")[1].split(\" \")\n    console.log(size[0]*size[1]-size[1]*sel[0]-(size[0]-sel[0])*sel[1])\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03160_1", "type": "JavaScript", "obfuscated": "function Main(_0x26de83) {\n    _0x26de83 = _0x26de83['trim']()['split']('\\x0a')['map'](function (_0x540c78) {\n        return _0x540c78['split']('\\x20');\n    });\n    let _0x169372 = parseInt(_0x26de83[0x0][0x0], 0xa);\n    let _0x52fe1d = _0x26de83[0x1]['map'](_0x149964 => parseInt(_0x149964, 0xa));\n    let _0xec08c2 = [\n        0x0,\n        Math['abs'](_0x52fe1d[0x1] - _0x52fe1d[0x0])\n    ];\n    let _0x469590, _0xc53add;\n    for (let _0x365724 = 0x2; _0x365724 < _0x169372; _0x365724++) {\n        _0x469590 = _0xec08c2[_0x365724 - 0x2] + Math['abs'](_0x52fe1d[_0x365724] - _0x52fe1d[_0x365724 - 0x2]);\n        _0xc53add = _0xec08c2[_0x365724 - 0x1] + Math['abs'](_0x52fe1d[_0x365724] - _0x52fe1d[_0x365724 - 0x1]);\n        _0xec08c2['push'](Math['min'](_0x469590, _0xc53add));\n    }\n    console['log'](_0xec08c2[_0x169372 - 0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n10 30 40 20", "30"], ["2\n10 10", "0"], ["6\n30 10 60 10 60 50", "40"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\n    let N = parseInt(input[0][0], 10);\n    let v_h = input[1].map(e => parseInt(e, 10));\n\n    let DP = [0, Math.abs(v_h[1] - v_h[0])];\n\n    let x1, x2;\n    for(let i = 2; i < N; i++){\n        x1 = DP[i - 2] + Math.abs(v_h[i] - v_h[i - 2]);\n        x2 = DP[i - 1] + Math.abs(v_h[i] - v_h[i - 1]);\n        DP.push(Math.min(x1, x2));\n    }\n\n    console.log(DP[N - 1]);\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03253_1", "type": "JavaScript", "obfuscated": "console['log']((_0x183bc2 => {\n    let [_0x4c32f6, _0x5d8034] = _0x183bc2['trim']()['split']` `['map'](_0x44d88a => _0x44d88a | 0x0);\n    const _0x36addf = 0x3b9aca00 + 0x7;\n    const _0x52b8ad = new Map();\n    for (let _0x13b776 = 0x2; _0x13b776 <= _0x5d8034; _0x13b776++) {\n        if (_0x5d8034 % _0x13b776)\n            continue;\n        let _0x4f8d5b = 0x0;\n        do {\n            _0x4f8d5b++;\n            _0x5d8034 /= _0x13b776;\n        } while (_0x5d8034 % _0x13b776 === 0x0);\n        _0x52b8ad['set'](_0x13b776, _0x4f8d5b);\n    }\n    const _0x4b7d6f = (_0x5c41cb, _0x39b5fa) => ((_0x5c41cb >> 0x10) * _0x39b5fa % _0x36addf * 0x10000 + (_0x5c41cb & 0xffff) * _0x39b5fa) % _0x36addf;\n    const {\n        fac: _0x21ec12,\n        finv: _0x1e305a\n    } = (_0x15c493 => {\n        const _0x56d6ba = [\n                0x1,\n                0x1\n            ], _0x3e9a62 = [\n                0x0,\n                0x1\n            ], _0x554d85 = [\n                0x1,\n                0x1\n            ];\n        for (let _0x5cfc7d = 0x2; _0x5cfc7d < _0x15c493; _0x5cfc7d++) {\n            _0x56d6ba['push'](_0x4b7d6f(_0x56d6ba[_0x5cfc7d - 0x1], _0x5cfc7d));\n            _0x3e9a62['push'](_0x36addf - _0x4b7d6f(_0x3e9a62[_0x36addf % _0x5cfc7d], _0x36addf / _0x5cfc7d | 0x0));\n            _0x554d85['push'](_0x4b7d6f(_0x554d85[_0x5cfc7d - 0x1], _0x3e9a62[_0x5cfc7d]));\n        }\n        return {\n            'fac': _0x56d6ba,\n            'finv': _0x554d85\n        };\n    })(_0x4c32f6 + _0x4c32f6);\n    const _0x3e616e = (_0x56160d, _0x5ad927) => _0x4b7d6f(_0x21ec12[_0x56160d], _0x4b7d6f(_0x1e305a[_0x5ad927], _0x1e305a[_0x56160d - _0x5ad927]));\n    let _0x5df2a3 = 0x1;\n    for (const [, _0x5c5b37] of _0x52b8ad)\n        _0x5df2a3 = _0x4b7d6f(_0x5df2a3, _0x3e616e(_0x5c5b37 + _0x4c32f6 - 0x1, _0x4c32f6 - 0x1));\n    return '' + _0x5df2a3;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 6", "4"], ["3 12", "18"], ["100000 1000000000", "957870001"]], "original": "console.log((args=>{\n  let [N,M] = args.trim().split` `.map(v=>v|0);\n  const MOD = 1e9+7;\n  const d = new Map();\n  for ( let i = 2; i <= M; i++ ) {\n    if ( M % i ) continue;\n    let k = 0;\n    do {\n      k++;\n      M /= i;\n    } while ( M % i === 0 );\n    d.set( i, k );\n  }\n  const mul = (a,b) => ((a>>16)*b%MOD*65536+(a&65535)*b)%MOD;\n  const {fac,finv} = (max=>{\n    const fac = [1,1], inv = [0,1], finv = [1,1];\n    for (let i = 2; i < max; i++) {\n      fac.push( mul( fac[i-1], i) );\n      inv.push( MOD - mul(inv[MOD%i], MOD/i|0) );\n      finv.push( mul( finv[i-1], inv[i]) );\n    }\n    return {fac,finv};\n  })(N+N);\n  const nCr = (n,r) => mul(fac[n],mul(finv[r],finv[n-r]));\n  let c = 1;\n  for ( const [,i] of d ) c = mul(c,nCr(i+N-1,N-1));\n  return `${c}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03254_1", "type": "JavaScript", "obfuscated": "function Main(_0x5444a0) {\n    _0x5444a0 = _0x5444a0['split']('\\x0a');\n    var _0x48efc4 = Number(_0x5444a0[0x0]['split']('\\x20')[0x0]);\n    var _0x338945 = Number(_0x5444a0[0x0]['split']('\\x20')[0x1]);\n    var _0x50170c = _0x5444a0[0x1]['split']('\\x20')['map'](_0x234223 => Number(_0x234223))['sort']((_0x2dfdd9, _0x4d88b9) => _0x2dfdd9 - _0x4d88b9);\n    var _0xb1ee6e = 0x0;\n    var _0x4639b9 = 0x0;\n    for (var _0x36dee9 = 0x0; _0x36dee9 < _0x48efc4; _0x36dee9++) {\n        if (_0x338945 - _0x50170c[_0x36dee9] >= 0x0) {\n            _0x338945 = _0x338945 - _0x50170c[_0x36dee9];\n            _0xb1ee6e++;\n        } else {\n            break;\n        }\n    }\n    if (_0x338945 > 0x0 && _0xb1ee6e != 0x0) {\n        _0xb1ee6e--;\n    }\n    console['log'](_0xb1ee6e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 70\n20 30 10", "2"], ["3 10\n20 30 10", "1"], ["4 1111\n1 10 100 1000", "4"], ["2 10\n20 20", "0"]], "original": "function Main(input){\n  input = input.split('\\n');\n  var N = Number(input[0].split(' ')[0]);\n  var x = Number(input[0].split(' ')[1]);\n  var a = input[1].split(' ').map((a)=>Number(a)).sort((a,b)=>a-b);\n  var match = 0;\n  var left = 0;\n  for(var i=0;i<N;i++){\n    if(x-a[i]>=0){\n      x=x-a[i];\n      match++;\n    }else{\n      break;\n    }\n  }\n  if((x>0)&&(match!=0)){\n    match--;\n  }\n  console.log(match);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03281_1", "type": "JavaScript", "obfuscated": "function main(_0x449f69) {\n    var _0x593075 = _0x449f69[0x0] - 0x0;\n    var _0x5b7bd5 = 0x0;\n    for (var _0x22c96f = 0x69; _0x22c96f <= _0x593075; _0x22c96f += 0x2) {\n        var _0x44feca = 0x0;\n        for (var _0x556ca0 = 0x1; _0x556ca0 <= _0x22c96f; _0x556ca0++) {\n            if (_0x22c96f % _0x556ca0 == 0x0)\n                _0x44feca++;\n            if (_0x44feca > 0x8)\n                break;\n        }\n        if (_0x44feca == 0x8)\n            _0x5b7bd5++;\n    }\n    console['log'](_0x5b7bd5);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["105", "1"], ["7", "0"]], "original": "function main(input) {\n  var N = input[0]-0;\n  var ans = 0;\n  for(var i=105;i<=N;i+=2){\n    var cnt = 0;\n    for(var j=1;j<=i;j++){\n      if(i%j==0) cnt++;\n      if(cnt>8) break;\n    }\n    if(cnt == 8) ans++;\n  }\n  console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p03307_1", "type": "JavaScript", "obfuscated": "function Main(_0x35f906) {\n    _0x35f906 = _0x35f906['split']('\\x20');\n    X = 0x2;\n    N = _0x35f906['map'](_0x116488 => parseInt(_0x116488, 0xa));\n    if (N % X == 0x0) {\n        console['log'](N[0x0]);\n    } else {\n        var _0x4acec7 = N[0x0] * X;\n        console['log'](_0x4acec7);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "6"], ["10", "10"], ["999999999", "1999999998"]], "original": "function Main(input){\n   input = input.split(' ');\n   X = 2;\n   N = input.map(input=>parseInt(input,10));\n   if(N % X ==0){\n      console.log(N[0]);\n      }else{\n      var ans = N[0] * X;\n      console.log(ans);\n      }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03353_1", "type": "JavaScript", "obfuscated": "function Main(_0x5bac88) {\n    _0x5bac88 = _0x5bac88['split']('\\x0a');\n    var _0xd4a7ce = +_0x5bac88[0x1];\n    _0x5bac88 = _0x5bac88[0x0];\n    var _0x320919 = 0x60;\n    var _0x26adcb = _0x5bac88['length'];\n    var _0x5eb437 = {};\n    var _0x5545dd;\n    _0x28e2f1:\n        while (_0x320919 <= 0x7a) {\n            _0x320919++;\n            var _0x1c7223 = _0x5bac88['indexOf'](String['fromCharCode'](_0x320919));\n            while (_0x1c7223 !== -0x1) {\n                for (_0x5545dd = 0x0; _0x5545dd < _0xd4a7ce; _0x5545dd++) {\n                    if (_0x1c7223 + _0x5545dd >= _0x26adcb)\n                        break;\n                    _0x5eb437[_0x5bac88['slice'](_0x1c7223, _0x1c7223 + _0x5545dd + 0x1)] = 0x1;\n                }\n                _0x1c7223 = _0x5bac88['indexOf'](String['fromCharCode'](_0x320919), _0x1c7223 + 0x1);\n            }\n            _0x5545dd = 0x0;\n            var _0x29507d = [];\n            for (i in _0x5eb437) {\n                _0x5545dd++;\n                _0x29507d['push'](i);\n            }\n            if (_0x5545dd >= _0xd4a7ce) {\n                _0x29507d['sort']();\n                console['log'](_0x29507d[_0xd4a7ce - 0x1]);\n                break _0x28e2f1;\n            }\n        }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["aba\n4", "b"], ["atcoderandatcodeer\n5", "andat"], ["z\n1", "z"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var k = +s[1];\n  s = s[0];\n  var a = 96;\n  var sl = s.length;\n  var ans = {};\n  var j;\n  loop:\n  while(a <= 122){\n    a++;\n    var n = s.indexOf(String.fromCharCode(a));\n    while(n !== -1){\n      for(j = 0; j < k; j++){\n        if(n + j >= sl)break;\n        ans[s.slice(n, n + j + 1)] = 1;\n      }\n      n = s.indexOf(String.fromCharCode(a), n+1);\n    }\n    j = 0;\n    var ans2 = [];\n    for(i in ans){\n      j++;\n      ans2.push(i)\n    }\n    if(j >= k){\n      ans2.sort();\n      console.log(ans2[k-1]);\n      break loop;\n    }\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03361_1", "type": "JavaScript", "obfuscated": "const main = _0x39893e => {\n    const _0xefd292 = _0x39893e['split']('\\x0a');\n    const [_0x2e96b6, _0x2fdfda] = _0xefd292[0x0]['split']('\\x20')['map'](Number);\n    const _0x548ae3 = Array(_0x2e96b6)['fill'](![])['map']((_0x2701f5, _0x1c45bd) => _0xefd292[_0x1c45bd + 0x1]['split']('')['slice'](0x0, _0x2fdfda)['map'](_0x577e1d => _0x577e1d === '#'));\n    const _0x2bdeb3 = _0x548ae3['every']((_0xfbea4f, _0x48a612) => _0xfbea4f['every']((_0x1b1a33, _0x5d8ce0) => !_0x1b1a33 || (_0x548ae3[_0x48a612 - 0x1] || [])[_0x5d8ce0] || (_0x548ae3[_0x48a612 + 0x1] || [])[_0x5d8ce0] || _0x548ae3[_0x48a612][_0x5d8ce0 - 0x1] || _0x548ae3[_0x48a612][_0x5d8ce0 + 0x1]));\n    console['log'](_0x2bdeb3 ? 'Yes' : 'No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n.#.\n###\n.#.", "Yes"], ["5 5\n#.#.#\n.#.#.\n#.#.#\n.#.#.\n#.#.#", "No"], ["11 11\n...#####...\n.##.....##.\n#..##.##..#\n#..##.##..#\n#.........#\n#...###...#\n.#########.\n.#.#.#.#.#.\n##.#.#.#.##\n..##.#.##..\n.##..#..##.", "Yes"]], "original": "const main = input => {\n  const lines = input.split('\\n');\n  const [h, w] = lines[0].split(' ').map(Number);\n\n  const data = Array(h).fill(false).map((_, i) =>\n    lines[i + 1]\n      .split('')\n      .slice(0, w)\n      .map(c => c === '#')\n  );\n\n  const ans = data.every((row, i) =>\n    row.every(\n      (cell, j) =>\n        !cell ||\n        (data[i - 1] || [])[j] ||\n        (data[i + 1] || [])[j] ||\n        data[i][j - 1] ||\n        data[i][j + 1]\n    )\n  );\n  console.log(ans ? 'Yes' : 'No');\n};\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03379_1", "type": "JavaScript", "obfuscated": "console['log']((_0x4d60b2 => {\n    const [[_0x2ed86d], _0x69d3d4] = _0x4d60b2['trim']()['split']('\\x0a')['map'](_0x3b279b => _0x3b279b['split']('\\x20')['map'](_0x2f11ff => _0x2f11ff | 0x0));\n    const _0x4a2455 = []['concat'](_0x69d3d4)['sort']((_0x1a4b6a, _0x5c679b) => _0x1a4b6a - _0x5c679b);\n    const _0x34bb43 = _0x4a2455[_0x2ed86d / 0x2 - 0x1], _0x1498b7 = _0x4a2455[_0x2ed86d / 0x2];\n    const _0xcf1c0a = [];\n    for (let _0x9426e8 = 0x0; _0x9426e8 < _0x2ed86d; _0x9426e8++) {\n        if (_0x69d3d4[_0x9426e8] <= _0x34bb43)\n            _0xcf1c0a['push'](_0x1498b7);\n        else\n            _0xcf1c0a['push'](_0x34bb43);\n    }\n    return _0xcf1c0a['join']`\\n`;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4\n2 4 4 3", "4\n3\n3\n4"], ["2\n1 2", "2\n1"], ["6\n5 5 4 4 3 3", "4\n4\n4\n4\n4\n4"]], "original": "console.log((args=>{\n  const [[N],X] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  const _X = [].concat(X).sort((a,b)=>a-b);\n  const M1 = _X[N/2-1], M2 = _X[N/2];\n  const m = [];\n  for ( let i = 0; i < N; i++ ) {\n    if ( X[i] <= M1 ) m.push(M2); else m.push(M1);\n  }\n  return m.join`\\n`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03408_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x1890ac) {\n    const _0x11da47 = _0x1890ac['trim']()['split']('\\x0a');\n    const _0x4e30da = Number(_0x11da47[0x0]['trim']());\n    const _0x1ff725 = Number(_0x11da47[_0x4e30da + 0x1]['trim']());\n    const _0x171ebc = _0x11da47['slice'](0x1, _0x4e30da + 0x1);\n    const _0x540f45 = _0x11da47['slice'](_0x4e30da + 0x2);\n    let _0x479347 = {};\n    for (const _0x3bb202 of _0x171ebc) {\n        const _0x3d1705 = _0x3bb202['trim']();\n        if (_0x479347['hasOwnProperty'](_0x3d1705)) {\n            _0x479347[_0x3d1705] = _0x479347[_0x3d1705] + 0x1;\n        } else {\n            _0x479347[_0x3d1705] = 0x1;\n        }\n    }\n    for (const _0x236fe7 of _0x540f45) {\n        const _0x192b4d = _0x236fe7['trim']();\n        if (_0x479347['hasOwnProperty'](_0x192b4d)) {\n            _0x479347[_0x192b4d] = _0x479347[_0x192b4d] - 0x1;\n        } else {\n            _0x479347[_0x192b4d] = 0x1;\n        }\n    }\n    let _0x3d9371 = 0x0;\n    for (const [_0x10efe3, _0x431cfc] of Object['entries'](_0x479347)) {\n        if (_0x3d9371 < _0x431cfc) {\n            _0x3d9371 = _0x431cfc;\n        }\n    }\n    console['log'](_0x3d9371);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\napple\norange\napple\n1\ngrape", "2"], ["3\napple\norange\napple\n5\napple\napple\napple\napple\napple", "1"], ["1\nvoldemort\n10\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort\nvoldemort", "0"], ["6\nred\nred\nblue\nyellow\nyellow\nred\n5\nred\nred\nyellow\ngreen\nblue", "1"]], "original": "// https://atcoder.jp/contests/abc091/tasks/abc091_b\n\"use strict\";\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const M = Number(params[N + 1].trim());\n  const blueCards = params.slice(1, N + 1);\n  const redCards = params.slice(N + 2);\n\n  let cardCount = {};\n  for (const card of blueCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] + 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n\n  for (const card of redCards) {\n    const c = card.trim();\n    if (cardCount.hasOwnProperty(c)) {\n      cardCount[c] = cardCount[c] - 1;\n    } else {\n      cardCount[c] = 1;\n    }\n  }\n\n  let maxMoney = 0;\n  for (const [key, money] of Object.entries(cardCount)) {\n    if (maxMoney < money) {\n      maxMoney = money;\n    }\n  }\n\n  console.log(maxMoney);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03416_1", "type": "JavaScript", "obfuscated": "function Main(_0x51819c) {\n    var _0x51819c = _0x51819c['split']('\\x20');\n    var _0x2761cf = _0x51819c[0x0];\n    var _0xa4fc0f = _0x51819c[0x1];\n    var _0x355950 = 0x0;\n    function _0xcafd37() {\n        var _0x3e44ba = _0x2761cf['toString']();\n        if (_0x3e44ba[0x0] === _0x3e44ba[0x4] && _0x3e44ba[0x1] === _0x3e44ba[0x3]) {\n            return !![];\n        }\n    }\n    while (_0x2761cf <= _0xa4fc0f) {\n        if (_0xcafd37()) {\n            _0x355950++;\n        }\n        _0x2761cf++;\n    }\n    console['log'](_0x355950);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["11009 11332", "4"], ["31415 92653", "612"]], "original": "function Main(input) {\n    var input = input.split(' ');\n    var A = input[0];\n    var B = input[1];\n    var cnt = 0;\n    function hoge(){\n        var x = A.toString();\n        if(x[0] === x[4] && x[1] === x[3]){\n            return true;\n        }\n    }\n    while(A <= B) {\n     if(hoge()) {\n            cnt++;\n        }\n    A++;\n    }\n    console.log(cnt);\n    }\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03485_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst numbers = input['split']('\\x20');\nlet sum = 0x0;\nnumbers['forEach'](function (_0x37c76b) {\n    sum += Number(_0x37c76b);\n});\nconsole['log'](Math['ceil'](sum / numbers['length']));", "test_cases": [["1 3", "2"], ["7 4", "6"], ["5 5", "5"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\n\nconst numbers = input.split(' ');\n\nlet sum = 0;\nnumbers.forEach(function (number) {\n    sum += Number(number);\n});\nconsole.log(Math.ceil(sum / numbers.length));\n", "language": "JavaScript"}
{"filename": "p03494_1", "type": "JavaScript", "obfuscated": "function main(_0x5d8575) {\n    var _0x65dcb5 = _0x5d8575['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x1da4ee => parseInt(_0x1da4ee, 0xa));\n    var _0x3a9228 = 0x0;\n    while (_0x65dcb5['every'](_0x1d3d60 => _0x1d3d60 % 0x2 === 0x0)) {\n        _0x3a9228++;\n        _0x65dcb5 = _0x65dcb5['map'](_0x47956d => _0x47956d / 0x2);\n    }\n    console['log'](_0x3a9228);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n8 12 40", "2"], ["4\n5 6 8 10", "0"], ["6\n382253568 723152896 37802240 379425024 404894720 471526144", "8"]], "original": "function main(input){\n  var nums = input.split('\\n')[1].split(' ').map((n) => parseInt(n,10));\n  var count = 0;\n  while(nums.every((n) => (n % 2) === 0)) {\n        count++;\n        nums = nums.map((n) => n / 2);\n    }\n\n  console.log(count);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03547_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nx = l[0x0];\ny = l[0x1];\nconsole['log'](x == y ? '=' : x['charCodeAt']() < y['charCodeAt']() ? '<' : '>');", "test_cases": [["A B", "<"], ["E C", ">"], ["F F", "="]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nx = l[0]\ny = l[1]\nconsole.log(x == y ? '=' : x.charCodeAt() < y.charCodeAt() ? '<' : '>')", "language": "JavaScript"}
{"filename": "p03624_1", "type": "JavaScript", "obfuscated": "function main(_0x48017a) {\n    const _0x335d3d = _0x48017a['split']('');\n    alphabetList = 'abcdefghijklmnopqrstuvwxyz'['split']('');\n    arr = _0x335d3d['filter'](function (_0x1cf2eb, _0xe34bbd, _0x4c04b5) {\n        return _0x4c04b5['indexOf'](_0x1cf2eb) === _0xe34bbd;\n    })['sort']();\n    tmp = _0x18aa50(arr, alphabetList);\n    function _0x18aa50(_0xe0ba8d, _0x5bb7e1) {\n        var _0x31eeb2 = [];\n        var _0x4b58c2 = [];\n        for (var _0x7b03cd = 0x0; _0x7b03cd < _0xe0ba8d['length']; _0x7b03cd++) {\n            _0x31eeb2[_0xe0ba8d[_0x7b03cd]] = !![];\n        }\n        for (var _0x7b03cd = 0x0; _0x7b03cd < _0x5bb7e1['length']; _0x7b03cd++) {\n            if (_0x31eeb2[_0x5bb7e1[_0x7b03cd]]) {\n                delete _0x31eeb2[_0x5bb7e1[_0x7b03cd]];\n            } else {\n                _0x31eeb2[_0x5bb7e1[_0x7b03cd]] = !![];\n            }\n        }\n        for (var _0x225f45 in _0x31eeb2) {\n            _0x4b58c2['push'](_0x225f45);\n        }\n        return _0x4b58c2;\n    }\n    if (tmp['length'] > 0x0) {\n        ans = tmp[0x0];\n    } else {\n        ans = 'None';\n    }\n    console['log'](ans);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["atcoderregularcontest", "b"], ["abcdefghijklmnopqrstuvwxyz", "None"], ["fajsonlslfepbjtsaayxbymeskptcumtwrmkkinjxnnucagfrg", "d"]], "original": "function main (input) {\n    const S = input.split('');\n    alphabetList = 'abcdefghijklmnopqrstuvwxyz'.split('');\n\n    // 重複を削除\n    arr = S.filter(function (x,i,self){\n        return self.indexOf(x) === i;\n    }).sort();\n\n    tmp = arrDiff(arr,alphabetList);\n    // 差分抽出\n    function arrDiff (arr, alphabetList) {\n        var a = [];\n        var diff = [];\n        for (var i = 0; i < arr.length; i++) {\n            a[arr[i]] = true;\n        }\n        for (var i = 0; i < alphabetList.length; i++) {\n            if (a[alphabetList[i]]) {\n                delete a[alphabetList[i]];\n            } else {\n                a[alphabetList[i]] = true;\n            }\n        }\n        for (var k in a) {\n            diff.push (k);\n        }\n        return diff;\n    }\n    if (tmp.length > 0) {\n        ans = tmp[0];\n    } else {\n        ans = 'None';\n    }\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03645_1", "type": "JavaScript", "obfuscated": "function Main(_0x52c907) {\n    _0x52c907 = _0x52c907['split']('\\x0a');\n    var _0x22b854 = parseInt(_0x52c907[0x0]['split']('\\x20')[0x0]);\n    var _0x592081 = parseInt(_0x52c907[0x0]['split']('\\x20')[0x1]);\n    x = new Array();\n    var _0x4f05b4 = 'IMPOSSIBLE';\n    for (i = 0x0; i < _0x592081; i++) {\n        tmp = _0x52c907[i + 0x1]['split']('\\x20');\n        if (tmp[0x0] == 0x1) {\n            if (x['indexOf'](tmp[0x1]) != -0x1) {\n                _0x4f05b4 = 'POSSIBLE';\n                break;\n            } else {\n                x['push'](tmp[0x1]);\n            }\n        }\n        if (tmp[0x1] == _0x22b854) {\n            if (x['indexOf'](tmp[0x0]) != -0x1) {\n                _0x4f05b4 = 'POSSIBLE';\n                break;\n            } else {\n                x['push'](tmp[0x0]);\n            }\n        }\n    }\n    console['log']('%s', _0x4f05b4);\n}\nfunction debug() {\n    var _0x492f94 = document['getElementById']('input')['value'];\n    Main(_0x492f94);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n1 2\n2 3", "POSSIBLE"], ["4 3\n1 2\n2 3\n3 4", "IMPOSSIBLE"], ["100000 1\n1 99999", "IMPOSSIBLE"], ["5 5\n1 3\n4 5\n2 3\n2 4\n1 4", "POSSIBLE"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0].split(\" \")[0]);\n  var m = parseInt(input[0].split(\" \")[1]);\n  x= new Array();\n  var ans = \"IMPOSSIBLE\";\n  for(i=0;i<m;i++){\n    tmp=input[i+1].split(\" \");\n    if(tmp[0]==1){\n      if(x.indexOf(tmp[1])!=-1){\n        ans=\"POSSIBLE\";\n        break;\n      }else{\n      x.push(tmp[1]);\n      }\n    }\n    if(tmp[1]==n){\n      if(x.indexOf(tmp[0])!=-1){\n        ans=\"POSSIBLE\";\n        break;\n      }else{\n        x.push(tmp[0]);\n      }\n    }\n  }\n\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03729_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x13ea1e => {\n    const _0x28b44c = _0x13ea1e['split']('\\x0a')[0x0]['split']('\\x20');\n    let _0x1e5d53 = _0x28b44c[0x0]['split']('')['pop']();\n    for (let _0x17f92c = 0x1; _0x17f92c < _0x28b44c['length']; _0x17f92c++) {\n        if (_0x1e5d53 == _0x28b44c[_0x17f92c]['split']('')[0x0]) {\n            _0x1e5d53 = _0x28b44c[_0x17f92c]['split']('')['pop']();\n        } else {\n            console['log']('NO');\n            return;\n        }\n    }\n    console['log']('YES');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["rng gorilla apple", "YES"], ["yakiniku unagi sushi", "NO"], ["a a a", "YES"], ["aaaaaaaaab aaaaaaaaaa aaaaaaaaab", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const S  = arg.split(\"\\n\")[0].split(\" \");\n    let tail = S[0].split(\"\").pop();\n\n    for(let i=1; i<S.length; i++) {\n        if(tail == S[i].split(\"\")[0]) {\n            tail = S[i].split(\"\").pop();\n        } else {\n            console.log(\"NO\");\n            return;\n        }\n    }\n    \n    console.log(\"YES\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03795_1", "type": "JavaScript", "obfuscated": "let n = Number(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](0x320 * n - 0xc8 * ~~(n / 0xf));", "test_cases": [["20", "15800"], ["60", "47200"]], "original": "let n = Number(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\nconsole.log(800 * n - 200 * ~~(n / 15));", "language": "JavaScript"}
{"filename": "p03943_1", "type": "JavaScript", "obfuscated": "function Main(_0x5f0617) {\n    _0x5f0617 = _0x5f0617['split']('\\x20');\n    _0x5f0617 = _0x5f0617['map'](Number);\n    children = 0x2;\n    var _0x25462f = function (_0x225ccf, _0x13340b) {\n        var _0x44ca45 = 0x0;\n        _0x225ccf['forEach'](_0x5d9b9c => {\n            _0x44ca45 += _0x5d9b9c;\n        });\n        return _0x225ccf['includes'](_0x44ca45 / _0x13340b);\n    };\n    if (_0x25462f(_0x5f0617, children)) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 30 20", "Yes"], ["30 30 100", "No"], ["56 25 31", "Yes"]], "original": "function Main(input){\n    input= input.split(\" \");\n    input= input.map(Number);\n    children = 2;\n    \n    var sub = function(arry,num){\n        var sum = 0;\n        arry.forEach(element => {\n            sum += element;\n        });\n        return arry.includes(sum/num);\n    }\n    \n    if(sub(input,children)){\n        console.log('Yes');\n    }else{\n        console.log('No');\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript"}
{"filename": "p02394_1", "type": "JavaScript", "obfuscated": "function main(_0x1c8110) {\n    let _0x565494 = _0x1c8110['split']('\\x20')['map'](Number);\n    let _0x34731d, _0x4391a3, _0x16b16a, _0x3385d0, _0x41dce3;\n    _0x34731d = _0x565494[0x0];\n    _0x4391a3 = _0x565494[0x1];\n    _0x16b16a = _0x565494[0x2];\n    _0x3385d0 = _0x565494[0x3];\n    _0x41dce3 = _0x565494[0x4];\n    if (_0x16b16a < _0x41dce3 || _0x3385d0 < _0x41dce3 || _0x16b16a + _0x41dce3 > _0x34731d || _0x3385d0 + _0x41dce3 > _0x4391a3) {\n        console['log']('No');\n    } else {\n        console['log']('Yes');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 4 2 2 1", "Yes"], ["5 4 2 4 1", "No"]], "original": "function main(input){\n    let numarray=input.split(' ').map(Number);\n    let W,H,x,y,r;\n    W=numarray[0];\n    H=numarray[1];\n    x=numarray[2];\n    y=numarray[3];\n    r=numarray[4];\n    if (x<r || y<r || x+r > W || y+r > H){\n        console.log('No');\n    } else {\n        console.log('Yes');\n    }\n    \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02402_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst arr = input['split'](/\\n/);\nconst numbers = arr[0x1]['split']('\\x20')['map'](Number);\nlet min = numbers[0x0];\nlet max = numbers[0x0];\nlet sum = 0x0;\nnumbers['forEach'](_0x1c8c67 => {\n    if (min > _0x1c8c67)\n        min = _0x1c8c67;\n    if (max < _0x1c8c67)\n        max = _0x1c8c67;\n    sum += _0x1c8c67;\n});\nconsole['log'](min + '\\x20' + max + '\\x20' + sum);", "test_cases": [["5\n10 1 5 4 17", "1 17 37"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst arr = input.split(/\\n/);\nconst numbers = arr[1].split(\" \").map(Number);\nlet min = numbers[0];\nlet max = numbers[0];\nlet sum = 0;\n\nnumbers.forEach(number => {\n  if(min > number) min = number;\n  if(max < number) max = number;\n  sum += number;\n})\n\nconsole.log(min + \" \" + max + \" \" + sum);\n\n\n", "language": "JavaScript"}
{"filename": "p02411_1", "type": "JavaScript", "obfuscated": "let input = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nlet array = input['split']('\\x0a');\nlet result = '';\nfor (let i = 0x0; i < array['length']; i++) {\n    let data = array[i]['split']('\\x20')['map'](Number);\n    let fScore = data[0x0];\n    let lScore = data[0x1];\n    let retest = data[0x2];\n    if (fScore === -0x1 && lScore === -0x1 && retest === -0x1)\n        break;\n    if (i !== 0x0)\n        result += '\\x0a';\n    if (fScore === -0x1 || lScore === -0x1) {\n        result += 'F';\n    } else {\n        let sum = fScore + lScore;\n        switch (!![]) {\n        case sum >= 0x50:\n            result += 'A';\n            break;\n        case 0x41 <= sum && sum < 0x50:\n            result += 'B';\n            break;\n        case 0x32 <= sum && sum < 0x41:\n            result += 'C';\n            break;\n        case 0x1e <= sum && sum < 0x32:\n            result += retest >= 0x32 ? 'C' : 'D';\n            break;\n        default:\n            result += 'F';\n        }\n        ;\n    }\n}\nconsole['log'](result);", "test_cases": [["40 42 -1\n20 30 -1\n0 2 -1\n-1 -1 -1", "A\nC\nF"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'UTF-8');\nlet array = input.split('\\n'); // 3人分の試験データ配列\nlet result = '';\n\n// 学生分ループ\nfor (let i=0; i<array.length; i++) {\n  let data = array[i].split(' ').map(Number);\n  let fScore = data[0];\n  let lScore = data[1];\n  let retest = data[2];\n\n  // データが全て-1の時終了する\n  if (fScore === -1 && lScore === -1 && retest === -1) break;\n\n  if (i !== 0) result += '\\n';\n\n  // 中間試験、期末試験のいずれかを欠席した場合成績はF\n  if (fScore === -1 || lScore === -1) {\n    result += 'F';\n  } else {\n    let sum = fScore + lScore;\n    switch (true) {\n      case sum >= 80:\n        result += 'A';\n        break;\n      case 65 <= sum && sum < 80:\n        result += 'B';\n        break;\n      case 50 <= sum && sum < 65:\n        result += 'C';\n        break;\n      case 30 <= sum && sum < 50:\n        result += retest >= 50 ? 'C' : 'D';\n        break;\n      default:\n        result += 'F';\n    };\n  }\n}\nconsole.log(result);\n", "language": "JavaScript"}
{"filename": "p02556_1", "type": "JavaScript", "obfuscated": "function Main(_0x267063) {\n    _0x267063 = _0x267063['split']('\\x0a');\n    _0x267063['shift']();\n    let _0x40446a = _0x267063['map'](_0x5c52eb => _0x5c52eb['split']('\\x20')['map'](Number));\n    let _0x5c19bb = _0x40446a['map'](_0x3e06a7 => _0x3e06a7[0x0] + _0x3e06a7[0x1]);\n    let _0x3429c9 = _0x40446a['map'](_0x109fa1 => _0x109fa1[0x0] - _0x109fa1[0x1]);\n    let _0x2a1042 = Math['max'](..._0x5c19bb) - Math['min'](..._0x5c19bb);\n    let _0x2664df = Math['max'](..._0x3429c9) - Math['min'](..._0x3429c9);\n    console['log'](Math['max'](_0x2a1042, _0x2664df));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 1\n2 4\n3 2", "4"], ["2\n1 1\n1 1", "0"]], "original": "function Main(input) {\n\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    input.shift();\n    \n    let xy = input.map(val => val.split(\" \").map(Number));\n\n    let arr0 = xy.map(val => val[0] + val[1]);\n    let arr1 = xy.map(val => val[0] - val[1]);\n    \n    let arr0_calc = Math.max(...arr0) - Math.min(...arr0);\n    let arr1_calc = Math.max(...arr1) - Math.min(...arr1);\n \n    console.log(Math.max(arr0_calc,arr1_calc));\n    \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02599_1", "type": "JavaScript", "obfuscated": "function Main(_0x5ef2ba) {\n    _0x5ef2ba = _0x5ef2ba['split']('\\x0a');\n    var [_0x898ee0, _0xc77830] = _0x5ef2ba[0x0]['split']('\\x20')['map'](_0x1f6648 => parseInt(_0x1f6648, 0xa));\n    var _0x5180f4 = _0x5ef2ba[0x1]['split']('\\x20');\n    for (var _0x362128 = 0x0; _0x362128 < _0xc77830; _0x362128++) {\n        var [_0x143200, _0x22aab7] = _0x5ef2ba[_0x362128 + 0x2]['split']('\\x20')['map'](_0xf10629 => parseInt(_0xf10629, 0xa));\n        var _0x2b8a08 = [];\n        for (var _0x2ac2d9 = _0x143200 - 0x1; _0x2ac2d9 < _0x22aab7; _0x2ac2d9++) {\n            var _0x53ad22 = _0x5180f4[_0x2ac2d9];\n            if (_0x2b8a08['indexOf'](_0x53ad22) === -0x1) {\n                _0x2b8a08['push'](_0x53ad22);\n            }\n        }\n        console['log'](_0x2b8a08['length']);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3\n1 2 1 3\n1 3\n2 4\n3 3", "2\n3\n1"], ["10 10\n2 5 6 5 2 1 7 9 7 2\n5 5\n2 4\n6 7\n2 2\n7 8\n7 9\n1 8\n6 9\n8 10\n6 8", "1\n2\n2\n1\n2\n2\n6\n3\n3\n3"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var [n, q] = input[0].split(\" \").map(a => parseInt(a, 10));\n  var colors = input[1].split(\" \");\n  for (var i = 0; i<q; i++) {\n    var [start, end] = input[i+2].split(\" \").map(a => parseInt(a, 10));\n    var cs = [];\n    for (var j = start - 1; j<end; j++) {\n      var color = colors[j];\n      if (cs.indexOf(color) === -1) {\n        cs.push(color);\n      }\n    }\n    console.log(cs.length);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02714_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nconst lines = [];\nconst reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x48fe8e => {\n    lines['push'](_0x48fe8e);\n});\nreader['on']('close', () => {\n    const _0x2eeebd = Number(lines[0x0]);\n    const _0x2ea0bc = lines[0x1];\n    const _0x2a1ced = _0x2ea0bc['split']('');\n    const _0x24be8f = _0x2a1ced['filter'](_0xb5595d => _0xb5595d === 'R');\n    const _0x3e8607 = _0x2a1ced['filter'](_0x576b04 => _0x576b04 === 'G');\n    const _0x110bcc = _0x2a1ced['filter'](_0x585bd3 => _0x585bd3 === 'B');\n    let _0x4c08df = 0x0;\n    for (let _0x55c273 = 0x1; _0x55c273 < Number(_0x2eeebd) + 0x1; _0x55c273++) {\n        for (let _0x3d12e7 = _0x55c273 + 0x1; _0x3d12e7 < Number(_0x2eeebd) + 0x1; _0x3d12e7++) {\n            const _0x2c9388 = _0x3d12e7 + _0x3d12e7 - _0x55c273;\n            if (_0x2c9388 <= _0x2eeebd && _0x2a1ced[_0x55c273 - 0x1] !== _0x2a1ced[_0x3d12e7 - 0x1] && _0x2a1ced[_0x3d12e7 - 0x1] !== _0x2a1ced[_0x2c9388 - 0x1] && _0x2a1ced[_0x55c273 - 0x1] !== _0x2a1ced[_0x2c9388 - 0x1]) {\n                _0x4c08df = _0x4c08df + 0x1;\n            }\n        }\n    }\n    console['log'](_0x24be8f['length'] * _0x3e8607['length'] * _0x110bcc['length'] - _0x4c08df);\n});", "test_cases": [["4\nRRGB", "1"], ["39\nRBRBGRBGGBBRRGBBRRRBGGBRBGBRBGBRBBBGBBB", "1800"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nconst lines = [];\nconst reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line)\n});\nreader.on('close', () => {\n  const inputLength = Number(lines[0])\n  const inputString = lines[1]\n  const inputArray = inputString.split('')\n  const rArray = inputArray.filter(element => element === 'R')\n  const gArray = inputArray.filter(element => element === 'G')\n  const bArray = inputArray.filter(element => element === 'B')\n\n  let sum = 0\n  for (let i = 1; i < Number(inputLength) + 1; i++) {\n    for (let j = i + 1; j < Number(inputLength) + 1; j++) {\n      const k = j + j - i \n\n      if(k <= inputLength && inputArray[i - 1] !== inputArray[j - 1]  && inputArray[j - 1] !== inputArray[k - 1] && inputArray[i - 1] !== inputArray[k - 1]){\n        sum = sum + 1\n      }\n    }\n  }\n\n  console.log(rArray.length * gArray.length * bArray.length - sum)\n\n});", "language": "JavaScript"}
{"filename": "p02747_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x175763 => {\n    let _0x59680f = _0x175763['trim']()['split']('');\n    let _0x2db869 = _0x59680f['length'];\n    let _0x26f8c3 = 0x0;\n    for (let _0x402bac = 0x0; _0x402bac <= _0x2db869; _0x402bac++) {\n        if (_0x402bac % 0x2 == 0x0 && _0x59680f[_0x402bac] == 'h' && [_0x402bac + 0x1] != 'h') {\n            _0x26f8c3 += 0x1;\n        } else if (_0x402bac % 0x2 == 0x1 && _0x59680f[_0x402bac] == 'i' && _0x59680f[_0x402bac + 0x1] != 'i') {\n            _0x26f8c3 += 0x1;\n        } else {\n            _0x26f8c3 += 0x0;\n        }\n    }\n    if (_0x26f8c3 >= 0x2) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["hihi", "Yes"], ["hi", "Yes"], ["ha", "No"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('');\n   let len = xs.length;\n   let ans = 0;\n\n    for(let i =0; i<=len; i++) {\n       if(i%2==0 && xs[i]=='h'&&[i+1]!='h') {\n       \tans+=1;\n       }else if(i%2==1 && xs[i]=='i' &&xs[i+1]!='i'){\n        ans+=1;\n       }else{\n        ans+=0;\n       }\n    }\n    if(ans>=2){\n    console.log('Yes');\n    }else{\n    console.log('No');\n    }\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p02823_1", "type": "JavaScript", "obfuscated": "function Main(_0x2ddc50) {\n    const _0x3d1eff = _0x2ddc50['trim']()['split']('\\x20')['map'](_0x4c2c78 => parseInt(_0x4c2c78));\n    const _0x13e10c = _0x3d1eff[0x0];\n    var _0x2e8911 = _0x3d1eff[0x1];\n    var _0x3c1b28 = _0x3d1eff[0x2];\n    var _0x49af49 = 0x0;\n    var _0x523fc9 = _0x3c1b28 - _0x2e8911;\n    if (_0x523fc9 % 0x2) {\n        var _0x1eaedb = Math['min'](_0x13e10c - _0x3c1b28, _0x2e8911 - 0x1) + 0x1;\n        _0x49af49 += _0x1eaedb;\n        _0x49af49 += Math['floor']((_0x3c1b28 - _0x2e8911 - 0x1) / 0x2);\n    } else {\n        _0x49af49 = _0x523fc9 / 0x2;\n    }\n    console['log'](_0x49af49);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2 4", "1"], ["5 2 3", "2"]], "original": "function Main(input) {\n  const array = input.trim().split(' ').map(s => parseInt(s))\n  const N = array[0]\n  var A = array[1]\n  var B = array[2]\n\n  var ans = 0\n  var dist = B - A\n  if (dist % 2) {\n    var diff = Math.min(N - B, A - 1) + 1\n    ans += diff\n    ans += Math.floor((B - A - 1)/2)\n  } else {\n    ans = dist / 2\n  }\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02844_1", "type": "JavaScript", "obfuscated": "function Main(_0x3c325) {\n    _0x3c325 = _0x3c325['trim']()['split']('\\x0a');\n    var _0x5e1f54 = parseInt(_0x3c325[0x0]);\n    var _0x3bc8c3 = _0x3c325[0x1];\n    var _0x42e341 = 0x0;\n    var _0x33f583, _0x4c9f5d, _0x2f5c01, _0x43f814, _0x1759ef, _0x25e56a, _0x218d26, _0x1e0447;\n    for (var _0x16b235 = 0x3e8; _0x16b235 < 0x7d0; _0x16b235++) {\n        _0x43f814 = String(_0x16b235);\n        _0x33f583 = _0x43f814['substr'](0x1, 0x1);\n        _0x4c9f5d = _0x43f814['substr'](0x2, 0x1);\n        _0x2f5c01 = _0x43f814['substr'](0x3, 0x1);\n        _0x1759ef = _0x3bc8c3['indexOf'](_0x33f583);\n        if (_0x1759ef !== -0x1) {\n            _0x1e0447 = _0x3bc8c3['substr'](_0x1759ef + 0x1);\n            _0x25e56a = _0x1e0447['indexOf'](_0x4c9f5d);\n            if (_0x25e56a !== -0x1) {\n                _0x1e0447 = _0x1e0447['substr'](_0x25e56a + 0x1);\n                _0x218d26 = _0x1e0447['indexOf'](_0x2f5c01);\n                if (_0x218d26 !== -0x1) {\n                    _0x42e341++;\n                }\n            }\n        }\n    }\n    console['log'](_0x42e341);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n0224", "3"], ["6\n123123", "17"], ["19\n3141592653589793238", "329"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\");\n    var N = parseInt(input[0]);\n    var SasStr = input[1];\n    var ans = 0;\n    var x1, x2, x3, xTmp, x1i, x2i, x3i, sTmp;\n    for (var i = 1000; i < 2000; i++){\n    \txTmp = String(i);\n    \tx1 = xTmp.substr(1, 1);\n    \tx2 = xTmp.substr(2, 1);\n    \tx3 = xTmp.substr(3, 1);\n    \tx1i = SasStr.indexOf(x1);\n    \tif (x1i !== -1) { \n    \t\tsTmp = SasStr.substr(x1i + 1);\n    \t\tx2i = sTmp.indexOf(x2);\n    \t\tif (x2i !== -1) { \n    \t\tsTmp = sTmp.substr(x2i + 1);\n    \t\tx3i = sTmp.indexOf(x3);\n    \t\t\tif (x3i !== -1) { \n    \t\t\t\tans ++;\n    \t\t\t}\n    \t\t}\n    \t}\t\n    }\n    console.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02953_1", "type": "JavaScript", "obfuscated": "function Main(_0x85609b) {\n    const _0x17f65b = _0x85609b['split']('\\x0a')[0x0];\n    const _0x148e95 = _0x85609b['split']('\\x0a')[0x1]['split']('\\x20');\n    for (var _0x205fc7 = _0x148e95['length'] - 0x1; _0x205fc7 > 0x0; _0x205fc7--) {\n        if (_0x148e95[_0x205fc7 - 0x1] > _0x148e95[_0x205fc7]) {\n            _0x148e95[_0x205fc7 - 0x1] -= 0x1;\n        }\n        if (_0x148e95[_0x205fc7 - 0x1] > _0x148e95[_0x205fc7]) {\n            return console['log']('No');\n        }\n    }\n    console['log']('Yes');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 2 1 1 3", "Yes"], ["4\n1 3 2 1", "No"], ["5\n1 2 3 4 5", "Yes"], ["1\n1000000000", "Yes"]], "original": "\nfunction Main(args){\n\n  const firstRow = args.split(\"\\n\")[0];\n  const row = args.split(\"\\n\")[1].split(\" \");\n\n  for(var i = row.length -1; i > 0; i-- ){\n    if( row[i-1] > row[i] ){\n      // console.log(row[i-1] + \"を\" + String(row[i-1] -1));\n      row[i-1] -= 1;\n    }\n    if( row[i-1] > row[i] ){\n      return console.log(\"No\");\n    }\n  }\n\n  console.log(\"Yes\");\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03238_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x6bfea2 => {\n    const _0xfe04fc = _0x6bfea2['trim']()['split']('\\x0a');\n    const _0xdd8c0a = parseInt(_0xfe04fc[0x0], 0xa);\n    if (_0xdd8c0a === 0x1) {\n        console['log']('Hello\\x20World');\n    } else {\n        const _0xbdd83e = parseInt(_0xfe04fc[0x1], 0xa);\n        const _0x2a9b26 = parseInt(_0xfe04fc[0x2], 0xa);\n        console['log'](_0xbdd83e + _0x2a9b26);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1", "Hello World"], ["2\n3\n5", "8"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.trim().split('\\n')\n\tconst n = parseInt(args[0], 10)\n\n\tif (n === 1) {\n\t\tconsole.log('Hello World')\n\t} else {\n\t\tconst a = parseInt(args[1], 10)\n\t\tconst b = parseInt(args[2], 10)\n\t\tconsole.log(a + b)\n\t}\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03264_1", "type": "JavaScript", "obfuscated": "function Main(_0x1e37be) {\n    var _0x13d369 = parseInt(_0x1e37be['split']('\\x0a')[0x0], 0xa);\n    var _0x1b5248 = 0x0;\n    var _0x2ecce9 = 0x0;\n    for (i = 0x1; i <= _0x13d369; i++) {\n        if (i % 0x2 == 0x0) {\n            _0x1b5248++;\n        } else {\n            _0x2ecce9++;\n        }\n    }\n    console['log'](_0x1b5248 * _0x2ecce9);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "2"], ["6", "9"], ["11", "30"], ["50", "625"]], "original": "function Main(input){\n  var k = parseInt(input.split(\"\\n\")[0],10);\n  var a = 0;\n  var b = 0;\n  for(i = 1; i <= k;i++){\n    if(i % 2 == 0){\n    \ta++;\n  \t}else{\n    \tb++;\n  \t}\n  }\n  console.log(a * b);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03288_1", "type": "JavaScript", "obfuscated": "function main(_0xd68eb4) {\n    var _0x1aa486 = _0xd68eb4[0x0] - 0x0;\n    if (_0x1aa486 < 0x4b0)\n        console['log']('ABC');\n    else if (_0x1aa486 < 0xaf0)\n        console['log']('ARC');\n    else\n        console['log']('AGC');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["1199", "ABC"], ["1200", "ARC"], ["4208", "AGC"]], "original": "function main(input) {\n  var R = input[0]-0;\n  if(R<1200) console.log('ABC');\n  else if(R<2800) console.log('ARC');\n  else console.log('AGC');\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p03293_1", "type": "JavaScript", "obfuscated": "function Main(_0x38c2b0) {\n    ans = 'No';\n    _0x38c2b0 = _0x38c2b0['trim']()['split']('\\x0a');\n    rotate = _0x38c2b0[0x0];\n    for (i = 0x0; i <= _0x38c2b0[0x0]['length']; i++) {\n        head = rotate['substr'](0x0, 0x1);\n        str = rotate['slice'](0x1) + head;\n        if (_0x38c2b0[0x1] === str) {\n            ans = 'Yes';\n            break;\n        }\n        rotate = str;\n    }\n    console['log'](ans);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["kyoto\ntokyo", "Yes"], ["abc\narc", "No"], ["aaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tans = 'No'\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.trim().split(\"\\n\");\n\trotate = input[0]\n\t// s = input[0].split(' ').map((n) => (parseInt(n)))\n\tfor (i = 0; i <= input[0].length; i++) {\n\t\thead = rotate.substr(0,1)\n\t\tstr = rotate.slice(1) + head\n\n\t\tif (input[1] === str) {\n\t\t\tans = 'Yes'\n\t\t\tbreak\n\t\t}\n\t\trotate = str\n\t}\n\n\t// sort\n\t// s.sort()\n\t// s.sort((a, b) => { return b - a})\n\n\n\n\t//出力\n\tconsole.log(ans)\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n// Main(require('fs').readFileSync('./input.txt', 'utf-8'));", "language": "JavaScript"}
{"filename": "p03477_1", "type": "JavaScript", "obfuscated": "function Main(_0x261f54) {\n    const _0x4551e4 = _0x261f54['split']('\\x20')['map'](_0x185a63 => Number(_0x185a63));\n    const _0x32beee = _0x4551e4[0x0] + _0x4551e4[0x1];\n    const _0x14d30b = _0x4551e4[0x2] + _0x4551e4[0x3];\n    if (_0x32beee > _0x14d30b) {\n        console['log']('Left');\n    } else if (_0x32beee < _0x14d30b) {\n        console['log']('Right');\n    } else {\n        console['log']('Balanced');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 8 7 1", "Left"], ["3 4 5 2", "Balanced"], ["1 7 6 4", "Right"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const l = numbers[0] + numbers[1];\n  const r = numbers[2] + numbers[3];\n  if (l > r) {\n    console.log('Left');\n  } else if (l < r) {\n    console.log('Right');\n  } else {\n    console.log('Balanced');\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03557_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x348dfb) {\n    const _0x3f5cad = _0x348dfb['split']('\\x0a');\n    const _0x21bcc2 = parseInt(_0x3f5cad['shift']());\n    const _0x3f4aa8 = _0x3f5cad['shift']()['split']('\\x20')['map'](_0x232136 => parseInt(_0x232136))['sort']((_0x4424aa, _0xbceaa1) => _0x4424aa - _0xbceaa1);\n    const _0x18bb4c = _0x3f5cad['shift']()['split']('\\x20')['map'](_0x327bae => parseInt(_0x327bae))['sort']((_0x214b18, _0x4b65bd) => _0x214b18 - _0x4b65bd);\n    const _0x3a0420 = _0x3f5cad['shift']()['split']('\\x20')['map'](_0x458dd6 => parseInt(_0x458dd6))['sort']((_0x9c7e01, _0x2aa471) => _0x9c7e01 - _0x2aa471);\n    let _0x394a63 = 0x0;\n    for (let _0x402373 = 0x0; _0x402373 < _0x21bcc2; _0x402373++) {\n        let _0x292666 = _0x18bb4c[_0x402373];\n        let _0x4d5009 = _0x21bcc2;\n        for (let _0x29202a = 0x0; _0x29202a < _0x21bcc2; _0x29202a++) {\n            if (_0x292666 <= _0x3f4aa8[_0x29202a]) {\n                _0x4d5009--;\n            }\n        }\n        let _0x1ad8ee = _0x21bcc2;\n        for (let _0x30221f = 0x0; _0x30221f < _0x21bcc2; _0x30221f++) {\n            if (_0x292666 >= _0x3a0420[_0x30221f]) {\n                _0x1ad8ee--;\n            }\n        }\n        _0x394a63 += _0x4d5009 * _0x1ad8ee;\n    }\n    console['log'](_0x394a63);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 5\n2 4\n3 6", "3"], ["3\n1 1 1\n2 2 2\n3 3 3", "27"], ["6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288", "87"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N  =parseInt(lines.shift());\n  const A = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n  const B = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n  const C = lines.shift().split(' ').map(x => parseInt(x)).sort((a,b) => a-b);\n\n\n//console.log(A);\n//console.log(B);\n//console.log(C);\n\n  let result = 0;\n\n  for(let b=0;b<N;b++){\n    let current_b = B[b];\n\n    let count_a = N;\n    for(let a=0;a<N;a++){\n      if(current_b <= A[a] ){\n        count_a--;\n      }\n    }\n  \n\n    let count_c = N;\n    for(let c=0;c<N;c++){\n      if(current_b >= C[c]){\n        count_c --;\n      }\n    }\n//console.log([count_a,count_c])\n    result += count_a*count_c\n  }\n\n  console.log(result);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03573_1", "type": "JavaScript", "obfuscated": "function Main(_0x2f1c1c) {\n    const _0x3441a9 = _0x2f1c1c['split']('\\x20')['map'](_0x35e421 => Number(_0x35e421));\n    const _0x2785e7 = _0x3441a9[0x0];\n    const _0x50aa2f = _0x3441a9[0x1];\n    const _0x1cd5c2 = _0x3441a9[0x2];\n    if (_0x2785e7 === _0x50aa2f) {\n        console['log'](_0x1cd5c2);\n    } else if (_0x50aa2f === _0x1cd5c2) {\n        console['log'](_0x2785e7);\n    } else {\n        console['log'](_0x50aa2f);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 7 5", "7"], ["1 1 7", "7"], ["-100 100 100", "-100"]], "original": "function Main(input) {\n  const numbers = input.split(' ').map(n => Number(n));\n  const a = numbers[0];\n  const b = numbers[1];\n  const c = numbers[2];\n\n  if (a === b) {\n    console.log(c);\n  } else if (b === c) {\n    console.log(a);\n  } else {\n    console.log(b);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03623_1", "type": "JavaScript", "obfuscated": "function Main(_0x2b9561) {\n    _0x2b9561 = _0x2b9561['split']('\\x0a')[0x0]['split']('\\x20');\n    if (Math['abs'](_0x2b9561[0x0] - _0x2b9561[0x1]) < Math['abs'](_0x2b9561[0x0] - _0x2b9561[0x2]))\n        console['log']('A');\n    else\n        console['log']('B');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2 7", "B"], ["1 999 1000", "A"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\")[0].split(\" \"); // 1行目がinput[0], 2行目がinput[1], …に入る\n    \n    if( Math.abs(input[0] - input[1]) < Math.abs(input[0] - input[2]))\n        console.log(\"A\");\n    else\n        console.log(\"B\");\n}\n \n// ※この行以降は編集しない (標準入力から一度に読み込みMainを呼び出します)\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript"}
{"filename": "p03759_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x35cbee => {\n    const [_0x5d3007, _0x12072f, _0x58d116] = _0x35cbee['split']('\\x0a')[0x0]['split']('\\x20');\n    console['log'](_0x12072f - _0x5d3007 == _0x58d116 - _0x12072f ? 'YES' : 'NO');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 4 6", "YES"], ["2 5 6", "NO"], ["3 2 1", "YES"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    const [a, b, c] = arg.split(\"\\n\")[0].split(\" \");\n    console.log(b - a == c - b ? \"YES\" : \"NO\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03775_1", "type": "JavaScript", "obfuscated": "function divisor(_0x58bbc8) {\n    var _0x415ba3 = [];\n    for (var _0x565936 = 0x1; _0x565936 * _0x565936 <= _0x58bbc8; _0x565936++) {\n        if (_0x58bbc8 % _0x565936 == 0x0) {\n            _0x415ba3['push'](_0x565936);\n            if (_0x565936 * _0x565936 != _0x58bbc8)\n                _0x415ba3['push'](_0x58bbc8 / _0x565936);\n        }\n    }\n    return _0x415ba3;\n}\nfunction f(_0x3a8c4c, _0x4e394f) {\n    return Math['max'](('' + _0x3a8c4c)['length'], ('' + _0x4e394f)['length']);\n}\nfunction main(_0x18efd8) {\n    var _0x6f2f67 = _0x18efd8['split']('\\x0a');\n    var _0x4469de = parseInt(_0x6f2f67[0x0], 0xa);\n    var _0x38e68c = divisor(_0x4469de)['sort']((_0x39118f, _0x5e1c04) => _0x39118f - _0x5e1c04);\n    var _0x109c7b = _0x38e68c['length'] % 0x2;\n    var _0x130f29 = _0x38e68c['length'] - 0x1;\n    var _0xe14c30 = Math['floor'](_0x38e68c['length'] / 0x2);\n    var _0x14dba5 = ('' + _0x4469de)['length'];\n    for (var _0xee40c2 = 0x0; _0xee40c2 < _0xe14c30 - _0x109c7b; _0xee40c2++) {\n        _0x14dba5 = Math['min'](_0x14dba5, f(_0x38e68c[_0xee40c2], _0x38e68c[_0x130f29 - _0xee40c2]));\n    }\n    if (_0x109c7b == 0x1)\n        _0x14dba5 = Math['min'](_0x14dba5, ('' + _0x38e68c[_0xe14c30])['length']);\n    console['log'](_0x14dba5);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10000", "3"], ["1000003", "7"], ["9876543210", "6"]], "original": "// Atcoder057 - C\nfunction divisor(n) {var ret=[]; for (var i=1;i*i<=n;i++){if(n%i==0){ret.push(i);if(i*i!=n)ret.push(n/i);}}return ret;}\nfunction f(a , b){return Math.max(`${a}`.length, `${b}`.length);}\nfunction main(input) {\n  var inputs = input.split('\\n');\n  var n = parseInt(inputs[0], 10);\n\n  var divisors = divisor(n).sort((a, b) => a - b);\n  var surplus = divisors.length % 2;\n\n  var lastIndex = divisors.length - 1;\n  var halfLen = Math.floor(divisors.length / 2);\n\n  var minF = `${n}`.length;\n  for (var i = 0; i < halfLen - surplus; i++) {\n    minF = Math.min(minF, f(divisors[i], divisors[lastIndex - i]));\n  }\n  if (surplus == 1) minF = Math.min(minF, `${divisors[halfLen]}`.length);\n\n  console.log(minF);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03803_1", "type": "JavaScript", "obfuscated": "let [a, b] = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x20')['map'](Number);\nif (a == 0x1)\n    a = 0xe;\nif (b == 0x1)\n    b = 0xe;\nconsole['log'](a == b ? 'Draw' : a > b ? 'Alice' : 'Bob');", "test_cases": [["8 6", "Alice"], ["1 1", "Draw"], ["13 1", "Bob"]], "original": "let [a, b] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nif (a == 1) a = 14;\nif (b == 1) b = 14;\nconsole.log(a == b ? \"Draw\" : a > b ? \"Alice\" : \"Bob\");", "language": "JavaScript"}
{"filename": "p03813_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0xabff7d) {\n    const _0x8d0842 = Number(_0xabff7d);\n    const _0x54d56a = _0x8d0842 >= 0x4b0 ? 'ARC' : 'ABC';\n    console['log'](_0x54d56a);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1000", "ABC"], ["2000", "ARC"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const x = Number(s);\n\n  const ans = (x >= 1200) ? 'ARC' : 'ABC';\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03860_1", "type": "JavaScript", "obfuscated": "function Main(_0x3ccee6) {\n    _0x3ccee6 = _0x3ccee6['split']('\\x20');\n    tmp = _0x3ccee6[0x1][0x0];\n    console['log']('A' + tmp + 'C');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["AtCoder Beginner Contest", "ABC"], ["AtCoder Snuke Contest", "ASC"], ["AtCoder X Contest", "AXC"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\" \");\n\ttmp = input[1][0];\n\tconsole.log(\"A\" + tmp + \"C\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03944_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x50ca7c) {\n    _0x50ca7c = _0x50ca7c['trim']()['split']('\\x0a');\n    let _0x2fa058 = _0x50ca7c[0x0]['split']('\\x20')['map'](Number);\n    let _0x1e1a21 = 0x0;\n    let _0x4270d7 = 0x0;\n    let _0x5a9eba = _0x2fa058[0x0];\n    let _0x1dc697 = _0x2fa058[0x1];\n    const _0x9ec9cb = _0x2fa058[0x2];\n    for (let _0x14055a = 0x1; _0x14055a <= _0x9ec9cb; _0x14055a++) {\n        let _0x3e4b76 = _0x50ca7c[_0x14055a]['trim']()['split']('\\x20')['map'](Number);\n        let _0x40d5a7 = _0x3e4b76[0x2];\n        if (_0x40d5a7 === 0x1) {\n            if (_0x3e4b76[0x0] > _0x1e1a21) {\n                _0x1e1a21 = _0x3e4b76[0x0];\n            }\n        } else if (_0x40d5a7 === 0x2) {\n            if (_0x3e4b76[0x0] < _0x5a9eba) {\n                _0x5a9eba = _0x3e4b76[0x0];\n            }\n        } else if (_0x40d5a7 === 0x3) {\n            if (_0x3e4b76[0x1] > _0x4270d7) {\n                _0x4270d7 = _0x3e4b76[0x1];\n            }\n        } else if (_0x40d5a7 === 0x4) {\n            if (_0x3e4b76[0x1] < _0x1dc697) {\n                _0x1dc697 = _0x3e4b76[0x1];\n            }\n        }\n    }\n    const _0x271f14 = _0x5a9eba - _0x1e1a21;\n    const _0x41e606 = _0x1dc697 - _0x4270d7;\n    if (_0x271f14 <= 0x0 || _0x41e606 <= 0x0) {\n        console['log'](0x0);\n    } else {\n        console['log'](_0x271f14 * _0x41e606);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 4 2\n2 1 1\n3 3 4", "9"], ["5 4 3\n2 1 1\n3 3 4\n1 4 2", "0"], ["10 10 5\n1 6 1\n4 1 3\n6 9 4\n9 4 2\n3 1 3", "64"]], "original": "\"use strict\"\nfunction Main(input) {\n  input = input.trim().split('\\n');\n  let WHN = input[0].split(' ').map(Number);\n  let minX = 0;\n  let minY = 0;\n  let maxX = WHN[0];\n  let maxY = WHN[1];\n  const N = WHN[2];\n \n  for(let i=1; i<=N; i++){\n    let tmp = input[i].trim().split(' ').map(Number)\n    let A = tmp[2];\n    if(A === 1){\n      if(tmp[0] > minX){\n        minX = tmp[0];\n      }\n    } else if (A === 2) {\n      if(tmp[0] < maxX){\n        maxX = tmp[0];\n      }\n    } else if (A === 3) {\n      if(tmp[1] > minY) {\n        minY = tmp[1];\n      }\n    } else if (A === 4) {\n      if(tmp[1] < maxY) {\n        maxY = tmp[1];\n      }\n    }\n  }\n \n  const X = maxX - minX;\n  const Y = maxY - minY;\n  if(X <= 0 || Y <= 0){\n    console.log(0);\n  } else {\n    console.log(X*Y);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03963_1", "type": "JavaScript", "obfuscated": "function Main(_0x5f5416) {\n    var _0x5f5416 = _0x5f5416['split']('\\x0a');\n    var _0x19c71f = _0x5f5416[0x0]['split']('\\x20');\n    var _0x251f5f = _0x19c71f[0x0];\n    var _0x5d4070 = _0x19c71f[0x1];\n    var _0x27daf5 = _0x5d4070;\n    for (i = 0x1; i < _0x251f5f; i++) {\n        _0x27daf5 *= _0x5d4070 - 0x1;\n    }\n    console['log'](_0x27daf5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2", "2"], ["1 10", "10"]], "original": "function Main(input) {\n    // 1行目がinput[0], 2行目がinput[1], …に入る\n    var input = input.split(\"\\n\");\n    var tmp = input[0].split(\" \");\n    var N = tmp[0];\n    var K = tmp[1];\n\n    var pattern = K;\n    for (i = 1;i < N;i++) {\n\tpattern *= K - 1;\n    }\n\n    console.log(pattern);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p00019_1", "type": "JavaScript", "obfuscated": "function main(_0x3b235c) {\n    var _0x149c4e = 0x1;\n    var _0x965f05 = toInt(_0x3b235c);\n    for (var _0x188f9c = 0x1; _0x188f9c <= _0x3b235c; _0x188f9c++) {\n        _0x149c4e = _0x149c4e * _0x188f9c;\n    }\n    console['log'](_0x149c4e);\n}\nfunction toInt(_0x56a3f1) {\n    return parseInt(_0x56a3f1, 0xa);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5", "120"]], "original": "function main(input){\n    var ans=1;\n    var inputNum=toInt(input);\n    for(var i=1;i<=input;i++){\n        ans=ans*i;\n    }\n    console.log(ans);\n}\nfunction toInt(str){\n    return parseInt(str, 10);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00021_1", "type": "JavaScript", "obfuscated": "(function (_0x4cb0fd) {\n    var _0x1c75ea = _0x4cb0fd['replace'](/\\n$/, '')['split']('\\x0a');\n    var _0x33e6e6 = Number(_0x1c75ea['shift']());\n    var _0x471ed5 = 0x0;\n    while (_0x471ed5++ < _0x33e6e6) {\n        var _0x47cabe = _0x1c75ea['shift']()['split']('\\x20')['map'](Number);\n        var _0x5d117e = _0x47cabe['shift']();\n        var _0x2215da = _0x47cabe['shift']();\n        var _0x393694 = _0x47cabe['shift']();\n        var _0x49a73e = _0x47cabe['shift']();\n        var _0x3c2edd = _0x47cabe['shift']();\n        var _0x16a16e = _0x47cabe['shift']();\n        var _0x5bd434 = _0x47cabe['shift']();\n        var _0x3abb7d = _0x47cabe['shift']();\n        console['log'](((_0x49a73e - _0x2215da) / (_0x393694 - _0x5d117e))['toFixed'](0x5) === ((_0x3abb7d - _0x16a16e) / (_0x5bd434 - _0x3c2edd))['toFixed'](0x5) ? 'YES' : 'NO');\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2\n0.0 0.0 1.0 1.0 1.0 0.0 2.0 1.0\n3.0 2.0 9.0 6.0 13.0 5.0 7.0 9.0", "YES\nNO"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  var i = 0;\n  while (i++ < n) {\n    var args = p.shift().split(' ').map(Number);\n    var x1 = args.shift();\n    var y1 = args.shift();\n    var x2 = args.shift();\n    var y2 = args.shift();\n    var x3 = args.shift();\n    var y3 = args.shift();\n    var x4 = args.shift();\n    var y4 = args.shift();\n    console.log(((y2 - y1) / (x2 - x1)).toFixed(5) === ((y4 - y3) / (x4 - x3)).toFixed(5) ? 'YES' : 'NO');\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02259_1", "type": "JavaScript", "obfuscated": "function bubbleSort(_0x4a936d) {\n    var _0x101c82 = _0x4a936d['length'];\n    var _0x16784b = 0x1;\n    var _0x322d1a = 0x0;\n    var _0x5934b6 = 0x0;\n    while (_0x16784b == 0x1) {\n        _0x16784b = 0x0;\n        for (var _0x7647ab = _0x101c82 - 0x1; _0x7647ab >= _0x322d1a + 0x1; _0x7647ab--) {\n            if (_0x4a936d[_0x7647ab] < _0x4a936d[_0x7647ab - 0x1]) {\n                var _0x19f3a8 = _0x4a936d[_0x7647ab];\n                _0x4a936d[_0x7647ab] = _0x4a936d[_0x7647ab - 0x1];\n                _0x4a936d[_0x7647ab - 0x1] = _0x19f3a8;\n                _0x16784b = 0x1;\n                _0x5934b6++;\n            }\n        }\n        _0x322d1a++;\n    }\n    return [\n        _0x4a936d,\n        _0x5934b6\n    ];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['shift']();\nvar arr = Arr[0x0]['split']('\\x20')['map'](Number);\nvar result = bubbleSort(arr);\nconsole['log'](result[0x0]['join']('\\x20'));\nconsole['log'](result[0x1]);", "test_cases": [["5\n5 3 2 4 1", "1 2 3 4 5\n8"], ["6\n5 2 4 6 1 3", "1 2 3 4 5 6\n9"]], "original": "function bubbleSort(A){\n   var N=A.length;\n   var flag=1;\n   var i=0;\n   var cnt=0;\n   while(flag==1){\n      flag=0;\n      for(var j=N-1;j>=i+1;j--){\n         if(A[j]<A[j-1]){\n         var m=A[j];\n         A[j]=A[j-1];\n         A[j-1]=m;\n         flag=1;\n         cnt++;\n         }\n      }\n      i++;   \n   }\n   return [A,cnt];\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.shift();\nvar arr=Arr[0].split(\" \").map(Number);\nvar result=bubbleSort(arr);\nconsole.log(result[0].join(\" \"));\nconsole.log(result[1]);", "language": "JavaScript"}
{"filename": "p02580_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x29977c) {\n    const _0x4c2cf9 = _0x29977c['trim']()['split']('\\x0a');\n    const [_0x4a1a80, _0xaeb030, _0x5dbe7d] = _0x4c2cf9['shift']()['split']('\\x20')['map'](_0x1574b2 => Number(_0x1574b2));\n    const _0x3c782f = _0x4c2cf9['map'](_0x51fc80 => _0x51fc80['split']('\\x20')['map'](_0xa51a2f => Number(_0xa51a2f)));\n    let _0x408418 = 0x0;\n    for (let _0x380a22 = 0x1; _0x380a22 <= _0x4a1a80; _0x380a22++) {\n        const _0x49a6b6 = _0x3c782f['filter'](_0x317173 => _0x317173[0x0] !== _0x380a22);\n        const _0x471e91 = _0x3c782f['length'] - _0x49a6b6['length'];\n        for (let _0x50d40a = 0x1; _0x50d40a <= _0xaeb030; _0x50d40a++) {\n            const _0xbdb2aa = _0x49a6b6['filter'](_0x5438ea => _0x5438ea[0x1] === _0x50d40a);\n            if (_0x408418 < _0x471e91 + _0xbdb2aa['length']) {\n                _0x408418 = _0x471e91 + _0xbdb2aa['length'];\n            }\n        }\n    }\n    console['log'](_0x408418);\n    return;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 3\n2 2\n1 1\n1 3", "3"], ["3 3 4\n3 3\n3 1\n1 1\n1 2", "3"], ["5 5 10\n2 5\n4 3\n2 3\n5 5\n2 2\n5 4\n5 3\n5 1\n3 5\n1 4", "6"]], "original": "'use strict';\n\nfunction Main(input) {\n    //H W M\n    // (hi, wi)\n    const tmp = input.trim().split('\\n');\n    const [H, W, M] = tmp\n        .shift()\n        .split(' ')\n        .map((v) => Number(v));\n    const hw = tmp.map((v) => v.split(' ').map((v) => Number(v)));\n    // console.log(H, W, M, hw);\n    let result = 0;\n    for (let i = 1; i <= H; i++) {\n        const harr = hw.filter((v) => v[0] !== i);\n        const hlen = hw.length - harr.length;\n        for (let j = 1; j <= W; j++) {\n            const warr = harr.filter((v) => v[1] === j);\n            if (result < hlen + warr.length) {\n                result = hlen + warr.length;\n            }\n        }\n    }\n    console.log(result);\n    return;\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02606_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x36ba83 => {\n    _0x36ba83 = _0x36ba83['trim']()['split']('\\x0a');\n    const _0x5e1e3c = parseInt(_0x36ba83[0x0]['split']('\\x20')[0x0]);\n    const _0xac7960 = parseInt(_0x36ba83[0x0]['split']('\\x20')[0x1]);\n    const _0x209460 = parseInt(_0x36ba83[0x0]['split']('\\x20')[0x2]);\n    let _0x252d3f = 0x0;\n    for (let _0x251181 = _0x5e1e3c; _0x251181 <= _0xac7960; _0x251181++) {\n        if (_0x251181 % _0x209460 === 0x0)\n            _0x252d3f++;\n    }\n    console['log'](_0x252d3f);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 10 2", "3"], ["6 20 7", "2"], ["1 100 1", "100"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const L = parseInt(arg[0].split(\" \")[0]);\n    const R = parseInt(arg[0].split(\" \")[1]);\n    const d = parseInt(arg[0].split(\" \")[2]);\n    \n    let answer = 0;\n    \n    for(let i=L; i<=R; i++) {\n        if(i % d === 0) answer++;\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02657_1", "type": "JavaScript", "obfuscated": "const main = _0x360705 => {\n    const [_0x227d32, _0x932b35] = _0x360705['trim']()['split']('\\x20')['map'](_0x2b489b => parseInt(_0x2b489b));\n    console['log'](_0x227d32 * _0x932b35);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 5", "10"], ["100 100", "10000"]], "original": "const main = stdin => {\n  const [A, B] = stdin.trim().split(' ').map(x => parseInt(x))\n  console.log(A * B)\n}\n\n// 標準入力\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript"}
{"filename": "p02660_1", "type": "JavaScript", "obfuscated": "function Main(_0x298dbf) {\n    _0x298dbf = _0x298dbf['split']('\\x0a');\n    var _0x1ac778 = parseInt(_0x298dbf[0x0]);\n    var _0x55ac7d = 0x0;\n    var _0x1326de = new Set();\n    var _0x295d48 = _0x1ac778;\n    for (var _0x348985 = 0x2; _0x348985 < Math['sqrt'](_0x1ac778); _0x348985++) {\n        var _0x305d0a = _0x348985;\n        for (var _0x51b71c = 0x1; _0x305d0a < _0x1ac778; _0x51b71c++) {\n            if (_0x295d48 % Math['pow'](_0x348985, _0x51b71c) == 0x0) {\n                _0x55ac7d++;\n                _0x295d48 = _0x295d48 / Math['pow'](_0x348985, _0x51b71c);\n            } else {\n                break;\n            }\n            _0x305d0a = Math['pow'](_0x348985, _0x51b71c + 0x1);\n        }\n    }\n    if (_0x55ac7d == 0x0 && _0x1ac778 != 0x1) {\n        _0x55ac7d = 0x1;\n    }\n    console['log']('%s', _0x55ac7d);\n    return _0x55ac7d;\n}\nfunction debug(_0x3dfb20) {\n    var _0x35eb7f = document['getElementById']('input' + _0x3dfb20)['value'];\n    var _0x1828df = Main(_0x35eb7f);\n    var _0x636250 = 'WA';\n    if (_0x1828df == document['getElementById']('output' + _0x3dfb20)['value']['split']('\\x0a')[0x0]) {\n        _0x636250 = 'AC';\n    }\n    document['getElementById']('result' + _0x3dfb20)['innerHTML'] = _0x636250;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["24", "3"], ["1", "0"], ["64", "3"], ["1000000007", "1"], ["997764507000", "7"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var ans = 0;\n  var set = new Set();\n  var N2=N;\n  for(var i=2;i<Math.sqrt(N);i++){\n    var x =i;\n    for(var j=1;x<N;j++){\n      if(N2%Math.pow(i,j)==0){\n        ans++;\n        N2=N2/Math.pow(i,j);\n      }else{\n        break;\n      }\n      x=Math.pow(i,j+1);\n    }\n  }\n  if(ans==0&&N!=1){\n    ans=1;\n  }\n  \n\n\n\n  console.log('%s', ans);\n  return ans;\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02688_1", "type": "JavaScript", "obfuscated": "function Main(_0x26053d) {\n    tmp = _0x26053d['split']('\\x0a');\n    tmp2 = tmp[0x0]['split']('\\x20');\n    var _0x4ce10c = parseInt(tmp2[0x0], 0xa);\n    var _0x9cfbc3 = parseInt(tmp2[0x1], 0xa);\n    tmp['shift']();\n    arry = tmp['slice']();\n    list = [];\n    count = 0x0;\n    tmp3 = [];\n    for (let _0x47d90c = 0x0; _0x47d90c < arry['length']; _0x47d90c++) {\n        if (_0x47d90c % 0x2 !== 0x0) {\n            arry[_0x47d90c] = arry[_0x47d90c]['split']('\\x20');\n            tmp3 = arry[_0x47d90c]['map'](Number);\n            for (let _0x57ffd1 = 0x0; _0x57ffd1 < tmp3['length']; _0x57ffd1++) {\n                list['push'](tmp3[_0x57ffd1]);\n            }\n        }\n    }\n    for (let _0x1c5e11 = 0x1; _0x1c5e11 <= _0x4ce10c; _0x1c5e11++) {\n        if (list['indexOf'](_0x1c5e11) >= 0x0) {\n        } else {\n            count += 0x1;\n        }\n    }\n    console['log'](count);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n2\n1 3\n1\n3", "1"], ["3 3\n1\n3\n1\n3\n1\n3", "2"]], "original": "function Main(input) {\n    tmp = input.split(\"\\n\");\n    tmp2 = tmp[0].split(\" \");\n    var n = parseInt(tmp2[0], 10);\n    var k = parseInt(tmp2[1], 10);\n    tmp.shift();\n    arry = tmp.slice();\n    list = [];\n    count = 0;\n    tmp3 = [];\n\n    for (let i = 0; i < arry.length; i++) {\n       if (i % 2 !== 0) {\n\n           arry[i] = arry[i].split(\" \");\n           tmp3 = arry[i].map(Number);\n\n           for (let index = 0; index < tmp3.length; index++) {\n               list.push(tmp3[index]);\n           }\n       }\n    }\n  \n    for (let i = 1; i <= n; i++) {\n        if (list.indexOf(i) >= 0) {\n            \n        } else{\n            count += 1;\n        }        \n    }\n\n    console.log(count);    \n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02713_1", "type": "JavaScript", "obfuscated": "function gcd(_0x1f36ab, _0x36d300, _0x105d8f) {\n    var _0x4188a1 = 0x0;\n    if (_0x4188a1 < _0x1f36ab) {\n        _0x4188a1 = _0x1f36ab;\n    }\n    if (_0x4188a1 < _0x36d300) {\n        _0x4188a1 = _0x36d300;\n    }\n    if (_0x4188a1 < _0x105d8f) {\n        _0x4188a1 = _0x105d8f;\n    }\n    var _0x2bad7b = 0x0;\n    for (var _0x3d7362 = 0x1; _0x3d7362 <= _0x4188a1; _0x3d7362++) {\n        if (_0x1f36ab % _0x3d7362 == 0x0 && _0x1f36ab >= _0x3d7362 && (_0x36d300 % _0x3d7362 == 0x0 && _0x36d300 >= _0x3d7362) && (_0x105d8f % _0x3d7362 == 0x0 && _0x105d8f >= _0x3d7362)) {\n            _0x2bad7b = _0x3d7362;\n        }\n    }\n    return _0x2bad7b;\n}\nfunction Main(_0x5c2bfc) {\n    var _0x22f668 = parseInt(_0x5c2bfc, 0xa);\n    var _0x55d88f = 0x0;\n    for (var _0x18e691 = 0x1; _0x18e691 <= _0x22f668; _0x18e691++) {\n        for (var _0x3d9d42 = 0x1; _0x3d9d42 <= _0x22f668; _0x3d9d42++) {\n            for (var _0x31d41a = 0x1; _0x31d41a <= _0x22f668; _0x31d41a++) {\n                _0x55d88f += gcd(_0x18e691, _0x3d9d42, _0x31d41a);\n            }\n        }\n    }\n    console['log'](_0x55d88f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2", "9"], ["200", "10813692"]], "original": "function gcd(i,j,k){\n    var max = 0;\n    if(max<i){max = i;}\n    if(max<j){max = j;}\n    if(max<k){max = k;}\n    var a =0;\n    for(var count=1;count<=max;count++){\n        if((i%count ==0 && i>=count) && (j%count == 0 && j>=count) && (k%count == 0 && k>=count)){a = count;}    \n    }\n\n    return a;\n\n}\n\nfunction Main(input) {\n    var N = parseInt(input,10);\n    var sum = 0;\n    for(var i=1;i<=N;i++){\n        for(var j=1;j<=N;j++){\n            for(var k=1;k<=N;k++){\n                //console.log(i+\",\"+j+\",\"+k)\n                sum += gcd(i,j,k);\n            }\n        }\n    }\n    \n    console.log(sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02727_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['split']('\\x0a');\nconst parse = (_0x1dc728, _0x578a09) => {\n    return _0x1dc728['split'](_0x578a09)['map'](_0x2384e2 => parseInt(_0x2384e2));\n};\nconst split = (_0x3f5e59, _0x49c5d8, _0x5a905d, _0x16cb97) => {\n    var _0x1cdeba = parse(_0x3f5e59, _0x49c5d8);\n    for (var _0x4337d2 = 0x0; _0x4337d2 < _0x1cdeba['length']; _0x4337d2++) {\n        _0x5a905d[_0x16cb97[_0x4337d2]] = _0x1cdeba[_0x4337d2];\n    }\n};\nvar inp = {};\nsplit(lines[0x0], '\\x20', inp, [\n    'x',\n    'y',\n    'a',\n    'b',\n    'c'\n]);\nvar p = parse(lines[0x1], '\\x20')['sort']((_0x4f103c, _0x4c124f) => _0x4c124f - _0x4f103c);\nvar q = parse(lines[0x2], '\\x20')['sort']((_0x4b64f3, _0x2d5b53) => _0x2d5b53 - _0x4b64f3);\nvar r = parse(lines[0x3], '\\x20')['sort']((_0x43dc3f, _0x806ecf) => _0x806ecf - _0x43dc3f);\np = p['slice'](0x0, inp['x']);\nq = q['slice'](0x0, inp['y']);\nconsole['log'](p['concat'](q, r)['sort']((_0x2369fb, _0x5983f5) => _0x5983f5 - _0x2369fb)['slice'](0x0, inp['x'] + inp['y'])['reduce']((_0x17be5f, _0x4c38c9) => _0x17be5f + _0x4c38c9, 0x0));", "test_cases": [["1 2 2 2 1\n2 4\n5 1\n3", "12"], ["2 2 2 2 2\n8 6\n9 1\n2 1", "25"], ["2 2 4 4 4\n11 12 13 14\n21 22 23 24\n1 2 3 4", "74"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nconst parse = (s, sep) => {\n  return s.split(sep).map(v => parseInt(v));\n}\nconst split = (s, sep, result, keys) => {\n  var arr = parse(s, sep);\n  for (var i = 0; i < arr.length; i++) {\n    result[keys[i]] = arr[i];\n  }\n}\n\nvar inp = {};\nsplit(lines[0], ' ', inp, ['x', 'y', 'a', 'b', 'c']);\nvar p = parse(lines[1], ' ').sort((a, b) => b - a);\nvar q = parse(lines[2], ' ').sort((a, b) => b - a);\nvar r = parse(lines[3], ' ').sort((a, b) => b - a);\np = p.slice(0, inp.x);\nq = q.slice(0, inp.y);\n\nconsole.log(p.concat(q, r).sort((a, b) => b - a).slice(0, inp.x + inp.y).reduce((a, b) => a + b, 0));\n", "language": "JavaScript"}
{"filename": "p02783_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d2b09) {\n    const _0x4d06cd = _0x1d2b09['split']('\\x20');\n    const _0x4585ee = parseInt(_0x4d06cd[0x0], 0xa);\n    const _0x4bff85 = parseInt(_0x4d06cd[0x1], 0xa);\n    const _0x48a80e = Math['ceil'](_0x4585ee / _0x4bff85);\n    console['log'](_0x48a80e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 4", "3"], ["1 10000", "1"], ["10000 1", "10000"]], "original": "function Main(input) {\n    const args = input.split(' ');\n    const H = parseInt(args[0], 10);\n    const A = parseInt(args[1], 10);\n    const ans = Math.ceil(H/A)\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p02842_1", "type": "JavaScript", "obfuscated": "function Main(_0x9d840e) {\n    var _0x1d1a4b = 1.08;\n    var _0x339814 = ':(';\n    var _0x9d840e = _0x9d840e['split']('\\x0a');\n    var _0xb8bcc3 = parseInt(_0x9d840e[0x0], 0xa);\n    var _0x3cf200 = Math['floor'](_0xb8bcc3 / _0x1d1a4b);\n    var _0x103e75 = Math['floor'](_0x3cf200 * _0x1d1a4b);\n    if (_0xb8bcc3 == _0x103e75) {\n        console['log'](_0x3cf200);\n        return;\n    }\n    var _0x17b7fd = _0x3cf200 + 0x1;\n    if (Math['floor'](_0x17b7fd * _0x1d1a4b) == _0xb8bcc3) {\n        console['log'](_0x17b7fd);\n        return;\n    }\n    var _0x3bfa8f = _0x3cf200 + 0x2;\n    if (Math['floor'](_0x3bfa8f * _0x1d1a4b) == _0xb8bcc3) {\n        console['log'](_0x3bfa8f);\n        return;\n    }\n    var _0x55f102 = _0x3cf200 - 0x1;\n    if (Math['floor'](_0x55f102 * _0x1d1a4b) == _0xb8bcc3) {\n        console['log'](_0x55f102);\n        return;\n    }\n    var _0x55f102 = _0x3cf200 - 0x2;\n    if (Math['floor'](_0x55f102 * _0x1d1a4b) == _0xb8bcc3) {\n        console['log'](_0x55f102);\n        return;\n    }\n    console['log'](_0x339814);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["432", "400"], ["1079", ":("], ["1001", "927"]], "original": "function Main(input) {\n    var tax = 1.08;\n    var invalid = \":(\";\n\n\tvar input = input.split(\"\\n\");\n\tvar n = parseInt(input[0], 10);\n\n    var x = Math.floor( n / tax);\n\n    var reverse_n = Math.floor(x * tax);\n\n    if (n == reverse_n) {\n        console.log(x);\n        return;\n    } \n\n    var x_u = x + 1;\n    if ((Math.floor((x_u) * tax)) == n) {\n        console.log(x_u);\n        return;\n    }\n\n    var x_u2 = x + 2;\n    if ((Math.floor((x_u2) * tax)) == n) {\n        console.log(x_u2);\n        return;\n    }\n\n    var x_d = x - 1;\n    if ((Math.floor((x_d) * tax)) == n) {\n        console.log(x_d);\n        return;\n    }\n\n    var x_d = x - 2;\n    if ((Math.floor((x_d) * tax)) == n) {\n        console.log(x_d);\n        return;\n    }\n\n    console.log(invalid);\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03018_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4f97da) {\n    let _0x21a0f7 = _0x4f97da;\n    let _0x10176a = _0x21a0f7['split']('ABC');\n    let _0x2b0770 = _0x10176a['length'] - 0x1;\n    while (_0x10176a['length'] !== 0x1) {\n        _0x21a0f7 = _0x10176a['join']('BCA');\n        _0x10176a = _0x21a0f7['split']('ABC');\n        _0x2b0770 += _0x10176a['length'] - 0x1;\n    }\n    console['log'](_0x2b0770);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["ABCABC", "3"], ["C", "0"], ["ABCACCBABCBCAABCB", "6"]], "original": "'use strict'\n\nfunction Main(input) {\n  let s = input;\n  let tmp = s.split('ABC');\n  let result = tmp.length - 1;\n  while(tmp.length !== 1){\n    s = tmp.join('BCA')\n    tmp = s.split('ABC');\n    result += tmp.length - 1;\n  }\n  console.log(result)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03047_1", "type": "JavaScript", "obfuscated": "function Main(_0x21e21d) {\n    var _0xf6e490 = _0x21e21d['trim']();\n    var _0x5959db = _0xf6e490['split']('\\x20');\n    var _0x1fadf1 = _0x5959db[0x0];\n    var _0x3516ca = _0x5959db[0x1];\n    var _0x165cde = 0x0;\n    var _0x165cde = _0x1fadf1 - _0x3516ca + 0x1;\n    console['log'](_0x165cde);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2", "2"], ["13 3", "11"]], "original": "function Main(input){\n  \n  var str = input.trim();\n    var h = str.split(\" \");\n  var n = h[0];\n  var k = h[1];\n\n  var kekka = 0;\n  \n  var kekka = n-k+1;\n  \n  console.log(kekka);\n \n}//function end\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03289_1", "type": "JavaScript", "obfuscated": "function main(_0x361f61) {\n    _0x361f61 = _0x361f61['trim']();\n    var _0xf4d762 = _0x361f61['split']('')['map'](_0x2a6448 => _0x2a6448);\n    var _0x2ab075 = 0x0;\n    if (_0xf4d762[0x0] == 'A') {\n        _0x2ab075++;\n    }\n    var _0x92b518 = 0x0;\n    var _0xb29845 = 0x0;\n    for (var _0x4614f1 = 0x2; _0x4614f1 < _0xf4d762['length'] - 0x1; _0x4614f1++) {\n        if (_0xf4d762[_0x4614f1] == 'C') {\n            _0x92b518++;\n            _0xb29845 = _0x4614f1;\n        }\n    }\n    if (_0x92b518 == 0x1) {\n        _0x2ab075++;\n    }\n    if (_0x2ab075 == 0x2) {\n        _0xf4d762['splice'](0x0, 0x1);\n        _0xf4d762['splice'](_0xb29845 - 0x1, 0x1);\n        if (/A-Z/['test'](_0xf4d762) == ![]) {\n            _0x2ab075++;\n        }\n        if (_0x2ab075 == 0x3) {\n            console['log']('AC');\n        } else {\n            console['log']('WA');\n        }\n    } else {\n        console['log']('WA');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["AtCoder", "AC"], ["ACoder", "WA"], ["AcycliC", "WA"], ["AtCoCo", "WA"], ["Atcoder", "WA"]], "original": "function main(input) {\n  input=input.trim();\n  var arr = input.split(\"\").map((n) => (n));\n  var ans = 0\n\n  if(arr[0]==\"A\"){\n    ans++\n  }\n\n  var temp=0;\n  var memo=0;\n  for(var i=2; i<arr.length-1; i++){\n    if(arr[i]==\"C\"){\n      temp++;\n      memo=i\n    }\n  }\n  if(temp==1){\n    ans++\n  }\n\n  if(ans==2){\n    arr.splice(0,1);\n    arr.splice(memo-1,1);\n    if(/A-Z/.test(arr)==false){\n      ans++\n    }\n    if(ans==3){\n      console.log(\"AC\");\n    }else{\n      console.log(\"WA\");\n    }\n  }else{\n    console.log(\"WA\");\n  }\n \n\n  \n\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03351_1", "type": "JavaScript", "obfuscated": "function Main(_0x1e049e) {\n    _0x1e049e = _0x1e049e['split'](/\\s/);\n    _0x1e049e['forEach'](function (_0x42316b, _0x5a41f1, _0x2472cc) {\n        _0x2472cc[_0x5a41f1] = Number(_0x2472cc[_0x5a41f1]);\n    });\n    var _0x44d420 = 'No';\n    if (Math['abs'](_0x1e049e[0x0] - _0x1e049e[0x2]) <= _0x1e049e[0x3]) {\n        _0x44d420 = 'Yes';\n    }\n    if (Math['abs'](_0x1e049e[0x0] - _0x1e049e[0x1]) <= _0x1e049e[0x3] && Math['abs'](_0x1e049e[0x1] - _0x1e049e[0x2]) <= _0x1e049e[0x3]) {\n        _0x44d420 = 'Yes';\n    }\n    console['log'](_0x44d420);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 7 9 3", "Yes"], ["100 10 1 2", "No"], ["10 10 10 1", "Yes"], ["1 100 2 10", "Yes"]], "original": "function Main(input){\n\tinput=input.split(/\\s/);\n\tinput.forEach(function(e,i,a){a[i]=Number(a[i]);});\n\t\n\tvar ans=\"No\";\n\tif(Math.abs(input[0]-input[2])<=input[3]){ans=\"Yes\";}\n\tif(Math.abs(input[0]-input[1])<=input[3]&&Math.abs(input[1]-input[2])<=input[3]){ans=\"Yes\";}\n\t\n\tconsole.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03371_1", "type": "JavaScript", "obfuscated": "function Main(_0x430739) {\n    _0x430739 = _0x430739['split']('\\x0a');\n    A = parseInt(_0x430739[0x0]['split']('\\x20')[0x0]);\n    B = parseInt(_0x430739[0x0]['split']('\\x20')[0x1]);\n    C = parseInt(_0x430739[0x0]['split']('\\x20')[0x2]);\n    X = parseInt(_0x430739[0x0]['split']('\\x20')[0x3]);\n    Y = parseInt(_0x430739[0x0]['split']('\\x20')[0x4]);\n    var _0x5b2eef = 0x0;\n    if (C <= (A + B) / 0x2 && C >= Math['min'](A, B)) {\n        if (X <= Y) {\n            _0x5b2eef = C * X * 0x2 + B * (Y - X);\n        } else {\n            _0x5b2eef = C * Y * 0x2 + A * (X - Y);\n        }\n    } else if (C <= (A + B) / 0x2 && C < Math['min'](A, B)) {\n        _0x5b2eef = C * Math['max'](X, Y) * 0x2;\n    } else {\n        _0x5b2eef = X * A + Y * B;\n    }\n    console['log']('%s', _0x5b2eef);\n}\nfunction debug() {\n    var _0x1eba92 = document['getElementById']('input')['value'];\n    Main(_0x1eba92);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1500 2000 1600 3 2", "7900"], ["1500 2000 1900 3 2", "8500"], ["1500 2000 500 90000 100000", "100000000"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  A = parseInt(input[0].split(\" \")[0]);\n  B = parseInt(input[0].split(\" \")[1]);\n  C = parseInt(input[0].split(\" \")[2]);\n  X = parseInt(input[0].split(\" \")[3]);\n  Y = parseInt(input[0].split(\" \")[4]);\n  var ans =0;\n  if(C<=(A+B)/2&&C>=Math.min(A,B)){\n    if(X<=Y){\n    ans=C*X*2+B*(Y-X);\n    }else{\n      ans=C*Y*2+A*(X-Y);\n    }\n  }else if(C<=(A+B)/2&&C<Math.min(A,B)){\n    ans=C*Math.max(X,Y)*2;\n  }else{\n    ans=X*A+Y*B;\n\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03415_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3852a0) {\n    const _0x10b2af = _0x3852a0['split']('\\x0a')['map'](_0x6b615e => _0x6b615e['split'](''));\n    console['log'](_0x10b2af[0x0][0x0] + _0x10b2af[0x1][0x1] + _0x10b2af[0x2][0x2]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["ant\nobe\nrec", "abc"], ["edu\ncat\nion", "ean"]], "original": "\"use strict\";\n\nfunction main(arg) {\n    const letters = arg.split(\"\\n\").map(n=>n.split(\"\"));\n    console.log(letters[0][0] + letters[1][1] + letters[2][2]);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03523_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['trim']();\nlet ans = 'YES';\nif (input[0x0] == 'A') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'K') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'I') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'H') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'A') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'B') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'A') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'R') {\n    input = input['slice'](0x1);\n}\nif (input[0x0] == 'A') {\n    input = input['slice'](0x1);\n}\ninput == '' ? ans = 'YES' : ans = 'NO';\nconsole['log'](ans);", "test_cases": [["KIHBR", "YES"], ["AKIBAHARA", "NO"], ["AAKIAHBAARA", "NO"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.trim();\nlet ans = \"YES\";\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"K\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"I\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"H\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"B\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"R\"){\n  input = input.slice(1);\n}\n\nif(input[0] == \"A\"){\n  input = input.slice(1);\n}\n\ninput == \"\" ? ans = \"YES\" : ans = \"NO\";\n\nconsole.log(ans);\n", "language": "JavaScript"}
{"filename": "p03543_1", "type": "JavaScript", "obfuscated": "function Main(_0xba64f3) {\n    _0xba64f3 = _0xba64f3['split']('\\x0a');\n    var _0x2306a5 = _0xba64f3[0x0];\n    var _0x2e81f3 = 'No';\n    if (_0x2306a5[0x1] == _0x2306a5[0x2]) {\n        if (_0x2306a5[0x0] == _0x2306a5[0x1] || _0x2306a5[0x2] == _0x2306a5[0x3])\n            _0x2e81f3 = 'Yes';\n    }\n    console['log']('%s', _0x2e81f3);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1118", "Yes"], ["7777", "Yes"], ["1234", "No"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar n = input[0];\n\tvar s = \"No\";\n\tif(n[1]==n[2]){\n\t    if(n[0]==n[1]||n[2]==n[3])s = \"Yes\";\n\t}\n\tconsole.log('%s',s);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03555_1", "type": "JavaScript", "obfuscated": "function Main(_0x1a1d72) {\n    _0x1a1d72 = _0x1a1d72['trim']();\n    _0x1a1d72 = _0x1a1d72['split']('\\x0a');\n    var _0x5024c4 = _0x1a1d72[0x0]['split']('');\n    var _0x2e1dcd = _0x1a1d72[0x1]['split']('');\n    if (_0x5024c4[0x0] == _0x2e1dcd[0x2] && _0x5024c4[0x1] == _0x2e1dcd[0x1] && _0x5024c4[0x2] == _0x2e1dcd[0x0])\n        console['log']('YES');\n    else\n        console['log']('NO');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["pot\ntop", "YES"], ["tab\nbet", "NO"], ["eye\neel", "NO"]], "original": "function Main(input) {\n  input = input.trim()\n  input = input.split(\"\\n\");\n  var A = input[0].split(\"\");\n  var B = input[1].split(\"\");\n  if(A[0]==B[2]&&A[1]==B[1]&&A[2]==B[0]) console.log(\"YES\")\n  else console.log(\"NO\")\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03556_1", "type": "JavaScript", "obfuscated": "function Main(_0x254bea) {\n    _0x254bea = _0x254bea['split']('\\x0a');\n    var _0x5653bc = parseInt(_0x254bea[0x0]);\n    var _0x5005b6 = Math['pow'](Math['floor'](Math['sqrt'](_0x5653bc)), 0x2);\n    console['log']('%s', _0x5005b6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "9"], ["81", "81"], ["271828182", "271821169"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  var ans =Math.pow(Math.floor(Math.sqrt(n)),2);\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03644_1", "type": "JavaScript", "obfuscated": "function main(_0x9988c6) {\n    const _0x53da82 = _0x9988c6;\n    var _0x459b1e = 0x1;\n    var _0x24821b = 0x0;\n    var _0x45cb52 = 0x0;\n    for (var _0x6e1306 = 0x1; _0x6e1306 <= _0x53da82; _0x6e1306++) {\n        _0x24821b = 0x0;\n        var _0x57e4f9 = _0x6e1306;\n        while (!![]) {\n            if (_0x57e4f9 % 0x2 === 0x0) {\n                _0x24821b = _0x24821b + 0x1;\n                _0x57e4f9 = _0x57e4f9 / 0x2;\n            } else {\n                break;\n            }\n        }\n        if (_0x45cb52 < _0x24821b) {\n            _0x45cb52 = _0x24821b;\n            _0x459b1e = _0x6e1306;\n        }\n    }\n    console['log'](_0x459b1e);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7", "4"], ["32", "32"], ["1", "1"], ["100", "64"]], "original": "function main (input) {\n    const N = input;\n    var ans = 1;\n    var cnt = 0;\n    var maxCnt = 0;\n\n    for (var i = 1;i <= N;i++){\n        cnt = 0;\n        var tmp = i;\n        while (true) {\n            if (tmp%2 === 0) {\n                cnt = cnt + 1;\n                tmp = tmp/2;\n            } else {\n                break;\n            }\n        }\n        if (maxCnt < cnt) {\n            maxCnt = cnt;\n            ans = i;\n        }\n    }\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03671_1", "type": "JavaScript", "obfuscated": "let [a, b, c] = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x20')['map'](Number);\nconsole['log'](a + b + c - Math['max'](...[\n    a,\n    b,\n    c\n]));", "test_cases": [["700 600 780", "1300"], ["10000 10000 10000", "20000"]], "original": "let [a, b, c] = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\" \").map(Number);\nconsole.log(a + b + c - Math.max(...[a, b, c]));", "language": "JavaScript"}
{"filename": "p03705_1", "type": "JavaScript", "obfuscated": "main = function (_0x149246) {\n    var _0x4fc157 = _0x149246['split']('\\x20');\n    var _0x297d5e = parseInt(_0x4fc157[0x0]);\n    var _0x419a4c = parseInt(_0x4fc157[0x1]);\n    var _0x4336f2 = parseInt(_0x4fc157[0x2]);\n    var _0xb406c6 = (_0x297d5e - 0x2) * (_0x4336f2 - _0x419a4c) + 0x1;\n    console['log'](Math['max'](_0xb406c6, 0x0));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 4 6", "5"], ["5 4 3", "0"], ["1 7 10", "0"], ["1 3 3", "1"]], "original": "main = function(input) {\n    var data = input.split(' ');\n    var n = parseInt(data[0]);\n    var a = parseInt(data[1]);\n    var b = parseInt(data[2]);\n    \n    var ans = (n - 2) * (b - a) + 1;\n    \n    \n    console.log(Math.max(ans, 0));\n};\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03711_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x30f03a => {\n    const _0x279d50 = _0x30f03a['split']('\\x0a')['map'](_0xc89484 => _0xc89484['split']('\\x20'));\n    const _0x39489f = parseInt(_0x279d50[0x0][0x0], 0xa);\n    const _0x5513e6 = parseInt(_0x279d50[0x0][0x1], 0xa);\n    const _0x5b5069 = [\n        0x1,\n        0x3,\n        0x5,\n        0x7,\n        0x8,\n        0xa,\n        0xc\n    ];\n    const _0x517580 = [\n        0x4,\n        0x6,\n        0x9,\n        0xb\n    ];\n    if (_0x5b5069['includes'](_0x39489f) && _0x5b5069['includes'](_0x5513e6))\n        console['log']('Yes');\n    else if (_0x517580['includes'](_0x39489f) && _0x517580['includes'](_0x5513e6))\n        console['log']('Yes');\n    else\n        console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 3", "Yes"], ["2 4", "No"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst x = parseInt(args[0][0], 10)\n\tconst y = parseInt(args[0][1], 10)\n\tconst group1 = [1, 3, 5, 7, 8, 10, 12]\n\tconst group2 = [4, 6, 9, 11]\n\n\tif (group1.includes(x) && group1.includes(y)) console.log('Yes')\n\telse if (group2.includes(x) && group2.includes(y)) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03844_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('ascii');\nvar input_stdin = '';\nvar input_stdin_array = '';\nvar input_currentline = 0x0;\nprocess['stdin']['on']('data', function (_0x7fd2c1) {\n    input_stdin += _0x7fd2c1;\n});\nprocess['on']('SIGINT', function () {\n    input_stdin_array = input_stdin['split']('\\x0a');\n    main();\n    process['exit']();\n});\nprocess['stdin']['on']('end', function () {\n    input_stdin_array = input_stdin['split']('\\x0a');\n    main();\n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction main() {\n    var _0x37c088 = readLine()['split']('\\x20');\n    var _0xed49db = parseInt(_0x37c088[0x0]);\n    var _0xb42d61 = _0x37c088[0x1];\n    var _0x2012f2 = parseInt(_0x37c088[0x2]);\n    var _0x2e5e33;\n    if (_0xb42d61 == '+') {\n        _0x2e5e33 = _0xed49db + _0x2012f2;\n    } else {\n        _0x2e5e33 = _0xed49db - _0x2012f2;\n    }\n    console['log'](_0x2e5e33);\n}", "test_cases": [["1 + 2", "3"], ["5 - 7", "-2"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.on('SIGINT', function(){\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();\n    process.exit();\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n\tvar s = readLine().split(\" \");\n\tvar a = parseInt(s[0]);\n\tvar op = s[1];\n\tvar b = parseInt(s[2]);\n\tvar c;\n\t\n\tif (op == \"+\"){ c = a+b;}\n\telse {c = a-b;}\n\t\n\tconsole.log(c);\n}\n", "language": "JavaScript"}
{"filename": "p03994_1", "type": "JavaScript", "obfuscated": "function Main(_0x19d371) {\n    var _0x22d359, _0x3c17f1, _0x4def14;\n    _0x4def14 = _0x19d371['split']('\\x0a'), _0x22d359 = _0x4def14[0x0], _0x3c17f1 = parseInt(_0x4def14[0x1]);\n    console['log'](Array['from'](_0x22d359)['map']((_0x2325d6, _0x5d90f, _0x581b6c) => {\n        var _0x26fec9 = _0x2325d6['charCodeAt']();\n        if (_0x5d90f === _0x581b6c['length'] - 0x1) {\n            _0x26fec9 += _0x3c17f1 % 0x1a;\n            _0x26fec9 -= _0x26fec9 > 0x7a ? 0x1a : 0x0;\n            return String['fromCharCode'](_0x26fec9);\n        } else {\n            if (_0x2325d6 === 'a')\n                return _0x2325d6;\n            return 0x7b - _0x26fec9 <= _0x3c17f1 ? (_0x3c17f1 -= 0x7b - _0x26fec9, 'a') : _0x2325d6;\n        }\n    })['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["xyz\n4", "aya"], ["a\n25", "z"], ["codefestival\n100", "aaaafeaaivap"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var s, K, ref;\n  ref = input.split(\"\\n\"), s = ref[0], K = parseInt(ref[1]);\n  console.log(Array.from(s).map((v, i, arr)=> {\n    var code = v.charCodeAt();\n    if(i === arr.length - 1) {\n      code += K%26;\n      code -= code >122 ? 26 : 0;\n      return String.fromCharCode(code);\n    } else {\n      if(v === \"a\") return v;\n      return 123 - code <= K ? ((K -= 123 - code), \"a\") : v;\n    }\n  }).join(\"\"));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04048_1", "type": "JavaScript", "obfuscated": "function Main(_0x2e0eee) {\n    _0x2e0eee = _0x2e0eee['split']('\\x20');\n    _0x2e0eee[0x0] = Number(_0x2e0eee[0x0]);\n    _0x2e0eee[0x1] = Number(_0x2e0eee[0x1]);\n    var _0x382138 = _0x2e0eee[0x1] + (_0x2e0eee[0x0] - _0x2e0eee[0x1]) + (_0x2e0eee[0x0] - (_0x2e0eee[0x0] - _0x2e0eee[0x1])) * 0x2 + (_0x2e0eee[0x0] - _0x2e0eee[0x1] - (_0x2e0eee[0x0] - (_0x2e0eee[0x0] - _0x2e0eee[0x1]))) * 0x3;\n    console['log'](_0x382138);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2", "12"]], "original": "function Main (data) {\n  data = data.split(\" \");\n  data[0] = Number(data[0]);\n  data[1] = Number(data[1]);\n  var a = data[1] + (data[0] - data[1])\n  + ((data[0] - (data[0] - data[1])) * 2)\n  + (data[0] - data[1] - (data[0] - (data[0] - data[1]))) * 3\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02645_1", "type": "JavaScript", "obfuscated": "function main(_0x1112e1) {\n    const _0x36fce8 = _0x1112e1['split']('\\x20');\n    console['log'](_0x36fce8['join']()['slice'](0x0, 0x3));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["takahashi", "tak"], ["naohiro", "nao"]], "original": "function main(lines) {\n  const input = lines.split(' ')\n  console.log(input.join().slice(0,3))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02700_1", "type": "JavaScript", "obfuscated": "function Main(_0x13b924) {\n    const _0x10ecf8 = _0x13b924['split']('\\x20');\n    let _0x2ee31a = Number(_0x10ecf8[0x0]);\n    let _0x473810 = Number(_0x10ecf8[0x2]);\n    let _0x4f67bd = 0x0;\n    let _0x4db7bf = !![];\n    while (_0x4db7bf) {\n        if (_0x4f67bd % 0x2 === 0x0) {\n            _0x473810 = _0x473810 - Number(_0x10ecf8[0x1]);\n            if (_0x473810 <= 0x0) {\n                console['log']('Yes');\n                _0x4db7bf = ![];\n            }\n        } else {\n            _0x2ee31a = _0x2ee31a - Number(_0x10ecf8[0x3]);\n            if (_0x2ee31a <= 0x0) {\n                console['log']('No');\n                _0x4db7bf = ![];\n            }\n        }\n        _0x4f67bd++;\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 9 10 10", "No"], ["46 4 40 5", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  const array = input.split(' ');\n  let takahashi = Number(array[0]);\n  let aoki = Number(array[2]);\n  \n  let count = 0;\n  let bool = true;\n  while(bool) {\n    if(count%2 === 0){\n      aoki = aoki - Number(array[1]);\n      if(aoki <= 0){\n        console.log('Yes');\n        bool = false;\n      }\n    } else {\n      takahashi = takahashi - Number(array[3]);\n      if(takahashi <= 0){\n        console.log('No');\n        bool = false;\n      }\n    }\n    count++;\n  }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02706_1", "type": "JavaScript", "obfuscated": "const main = _0x2d0ceb => {\n    var _0x103a12 = _0x2d0ceb[0x0]['split']('\\x20');\n    var _0x433e48 = _0x2d0ceb[0x1]['split']('\\x20');\n    var _0x106732 = _0x103a12[0x0] - 0x0;\n    var _0x2914cf = _0x103a12[0x1] - 0x0;\n    var _0x2d2f8e = 0x0;\n    for (var _0x2cab98 = 0x0; _0x2cab98 < _0x2914cf; _0x2cab98++) {\n        _0x2d2f8e = _0x2d2f8e + Number(_0x433e48[_0x2cab98]);\n    }\n    console['log'](_0x106732 - _0x2d2f8e < 0x0 ? -0x1 : _0x106732 - _0x2d2f8e);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["41 2\n5 6", "30"], ["10 2\n5 6", "-1"], ["11 2\n5 6", "0"], ["314 15\n9 26 5 35 8 9 79 3 23 8 46 2 6 43 3", "9"]], "original": "const main = (inputs) => {\n  var array = inputs[0].split(\" \");\n  var array2 = inputs[1].split(\" \");\n  var N = array[0] - 0;\n  var M = array[1] - 0;\n  var sum = 0;\n\n  for (var i = 0; i < M; i++) {\n    sum = sum + Number(array2[i]);\n  }\n\n  console.log(N - sum < 0 ? -1 : N - sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02729_1", "type": "JavaScript", "obfuscated": "function Main(_0x2a1494) {\n    var _0x17943b = _0x2a1494[0x0]['split']('\\x20')['map'](_0x53b096 => _0x53b096 - 0x0);\n    if (_0x17943b[0x0] + _0x17943b[0x1] == 0x0)\n        console['log'](0x0);\n    else\n        console['log'](~~(_0x17943b[0x0] * (_0x17943b[0x0] - 0x1) / 0x2 + _0x17943b[0x1] * (_0x17943b[0x1] - 0x1) / 0x2));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["2 1", "1"], ["4 3", "9"], ["1 1", "0"], ["13 3", "81"], ["0 3", "3"]], "original": "function Main(input) {\n    var a = input[0].split(\" \").map(v=>v-0);\n    if(a[0]+a[1] == 0) console.log(0);\n    else console.log(~~(a[0]*(a[0]-1)/2+(a[1]*(a[1]-1)/2)));\n}\n\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02741_1", "type": "JavaScript", "obfuscated": "function Main(_0x48f65e) {\n    var _0x2e1e73 = [\n        0x1,\n        0x1,\n        0x1,\n        0x2,\n        0x1,\n        0x2,\n        0x1,\n        0x5,\n        0x2,\n        0x2,\n        0x1,\n        0x5,\n        0x1,\n        0x2,\n        0x1,\n        0xe,\n        0x1,\n        0x5,\n        0x1,\n        0x5,\n        0x2,\n        0x2,\n        0x1,\n        0xf,\n        0x2,\n        0x2,\n        0x5,\n        0x4,\n        0x1,\n        0x4,\n        0x1,\n        0x33\n    ];\n    _0x48f65e = parseInt(_0x48f65e);\n    if (0x1 <= _0x48f65e && _0x48f65e <= 0x20) {\n        console['log'](_0x2e1e73[_0x48f65e - 0x1]);\n    } else {\n        console['log'](0x0);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6", "2"], ["27", "5"]], "original": "function Main(input) {\nvar list = [1, 1, 1, 2, 1, 2, 1, 5, 2, 2, 1, 5, 1, 2, 1, 14, 1, 5, 1, 5, 2, 2, 1, 15, 2, 2, 5, 4, 1, 4, 1, 51];\n  input = parseInt(input);\n  if(1 <= input && input <= 32)\n  {\n      console.log(list[input - 1]);\n  } else {\n  console.log(0);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02771_1", "type": "JavaScript", "obfuscated": "const Main = _0x1f28d9 => {\n    const _0x20ecab = _0x1f28d9['split']('\\x20');\n    var _0x3cc12c = parseInt(_0x20ecab[0x0]);\n    var _0x2d2960 = parseInt(_0x20ecab[0x1]);\n    var _0x84f7ee = parseInt(_0x20ecab[0x2]);\n    if (_0x3cc12c === _0x2d2960 && _0x2d2960 !== _0x84f7ee || _0x2d2960 === _0x84f7ee && _0x84f7ee !== _0x3cc12c || _0x84f7ee === _0x3cc12c && _0x2d2960 !== _0x84f7ee) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 7 5", "Yes"], ["4 4 4", "No"], ["4 9 6", "No"], ["3 3 4", "Yes"]], "original": "const Main = (input) => {\n  const tmp = input.split(' ')\n  var a = parseInt(tmp[0])\n  var b = parseInt(tmp[1])\n  var c = parseInt(tmp[2])\n  if (((a === b) && (b !== c)) || ((b === c) && (c !== a)) || ((c === a) && (b !== c))) {\n    console.log('Yes')\n  } else {\n    console.log('No')\n  }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02786_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nH = inp['shift']() * 0x1;\nc = 0x1;\nh = 0x2;\nwhile (H >= h) {\n    h *= 0x2;\n    c++;\n}\nconsole['log'](Math['pow'](0x2, c) - 0x1);", "test_cases": [["2", "3"], ["4", "7"], ["1000000000000", "1099511627775"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nH = inp.shift() * 1\nc=1\nh=2\nwhile(H>=h) {\n    h *= 2\n    c++\n}\nconsole.log(Math.pow(2,c)-1)\n\n", "language": "JavaScript"}
{"filename": "p02880_1", "type": "JavaScript", "obfuscated": "function Main(_0x4eacff) {\n    _0x4eacff = _0x4eacff['split']('\\x20');\n    const _0x5981eb = parseInt(_0x4eacff[0x0], 0xa);\n    if (_0x5981eb > 0x51) {\n        console['log']('No');\n        return;\n    }\n    if (_0x5981eb % 0x2 == 0x0 && _0x5981eb / 0x2 < 0xa || _0x5981eb % 0x3 == 0x0 && _0x5981eb / 0x3 < 0xa || _0x5981eb % 0x4 == 0x0 && _0x5981eb / 0x4 < 0xa || _0x5981eb % 0x5 == 0x0 && _0x5981eb / 0x5 < 0xa || _0x5981eb % 0x6 == 0x0 && _0x5981eb / 0x6 < 0xa || _0x5981eb % 0x7 == 0x0 && _0x5981eb / 0x7 < 0xa || _0x5981eb % 0x8 == 0x0 && _0x5981eb / 0x8 < 0xa || _0x5981eb % 0x9 == 0x0 && _0x5981eb / 0x9 < 0xa) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "Yes"], ["50", "No"], ["81", "Yes"]], "original": "function Main(input) {\n\t\tinput = input.split(\" \");\n\t\tconst num = parseInt(input[0], 10);\n\t\tif (num > 81) {\n\t\t\t\tconsole.log('No');\n\t\t\t\treturn;\n\t\t}\n\nif((num%2==0 && num/2<10) ||(num%3==0 && num/3<10) ||(num%4==0 && num/4<10) ||(num%5==0 && num/5<10) ||(num%6==0 && num/6<10) ||(num%7==0 && num/7<10) ||(num%8==0 && num/8<10) ||(num%9==0 && num/9<10)){\nconsole.log('Yes');\n}else {\nconsole.log('No');\n}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02954_1", "type": "JavaScript", "obfuscated": "function Main(_0x4615aa) {\n    var _0x53785c = _0x4615aa['split']('');\n    var _0x250bb6 = [];\n    var _0x543dd0 = [];\n    for (let _0x17dd1f = 0x0; _0x17dd1f < _0x53785c['length']; _0x17dd1f++) {\n        _0x250bb6['push'](0x1);\n        _0x543dd0['push'](0x0);\n    }\n    var _0x5a1d65 = _0x543dd0['slice']();\n    for (let _0x4b72e3 = 0x0; _0x4b72e3 < _0x250bb6['length'] + _0x250bb6['length'] % 0x2; _0x4b72e3++) {\n        for (let _0x5b7fa9 = 0x0; _0x5b7fa9 < _0x250bb6['length']; _0x5b7fa9++) {\n            if (_0x53785c[_0x5b7fa9] == 'R') {\n                _0x5a1d65[_0x5b7fa9 + 0x1] += _0x250bb6[_0x5b7fa9];\n            } else if (_0x53785c[_0x5b7fa9] == 'L') {\n                _0x5a1d65[_0x5b7fa9 - 0x1] += _0x250bb6[_0x5b7fa9];\n            }\n        }\n        _0x250bb6 = _0x5a1d65['slice']();\n        _0x5a1d65 = _0x543dd0['slice']();\n    }\n    console['log'](_0x250bb6['join']('\\x20'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["RRLRL", "0 1 2 1 1"], ["RRLLLLRLRRLL", "0 3 3 0 0 0 1 1 0 2 2 0"], ["RRRLLRLLRRRLLLLL", "0 0 3 2 0 2 1 0 0 0 4 4 0 0 0 0"]], "original": "function Main(input) {\n\tvar idata = input.split(\"\");\n\tvar ninzuu = [];\n\tvar nextninzuutemp = [];\n\t//人数の配列を生成\n\tfor( let i=0; i<idata.length ; i++ ){\n\t    ninzuu.push(1);\n\t    nextninzuutemp.push(0);\n\t}\n\tvar nextninzuu = nextninzuutemp.slice();\n\t//一回ごとに操作が行われる\n\tfor( let turn=0; turn<ninzuu.length+ninzuu.length%2 ; turn++ ){\n\t\tfor( let j=0; j<ninzuu.length ; j++ ){\n\t\t\t//着目しているマスに右に行けと書いてあった場合\n\t\t\tif(idata[j]==\"R\"){\n\t\t\t\tnextninzuu[j+1]+=ninzuu[j];\n\t\t\t}else if(idata[j]==\"L\"){\n\t\t\t    nextninzuu[j-1]+=ninzuu[j];\n\t\t\t}\n\t\t}\n\t\tninzuu = nextninzuu.slice();\n\t\tnextninzuu = nextninzuutemp.slice();\n\t}\n\tconsole.log(ninzuu.join(\" \"));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03071_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x40dd6a) {\n    _0x40dd6a = _0x40dd6a['split']('\\x0a')[0x0];\n    const _0x21c92f = _0x40dd6a['split']('\\x20')['map'](_0x110295 => {\n        return parseInt(_0x110295, 0xa);\n    });\n    const _0x4c807b = _0x21c92f[0x0];\n    const _0x482ff3 = _0x21c92f[0x1];\n    let _0x3d046b = 0x0;\n    if (_0x4c807b > _0x482ff3) {\n        _0x3d046b = 0x2 * _0x4c807b - 0x1;\n    } else if (_0x482ff3 > _0x4c807b) {\n        _0x3d046b = 0x2 * _0x482ff3 - 0x1;\n    } else {\n        _0x3d046b = 0x2 * _0x4c807b;\n    }\n    console['log'](_0x3d046b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3", "9"], ["3 4", "7"], ["6 6", "12"]], "original": "'use strict'\nfunction Main(input) {\n    input = input.split(\"\\n\")[0]\n    const numbers = input.split(' ').map(i => {\n      return parseInt(i, 10)\n    })\n\n    const a = numbers[0]\n    const b = numbers[1]\n    let result = 0\n\n    if(a > b) {\n      result = 2*a - 1\n    } else if (b > a) {\n      result = 2*b - 1  \n    } else {\n      result = 2 * a\n    }\n    \n    console.log(result)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript"}
{"filename": "p03074_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x50c80f) {\n    let _0x420f98 = _0x50c80f['split']('\\x0a');\n    let _0x4c4231 = _0x420f98['shift']()['split'](/\\s/)['map'](_0x441dae => _0x441dae - 0x0);\n    let _0x477359 = _0x4c4231[0x0], _0x31382b = _0x4c4231[0x1];\n    let _0x5bd5b2 = _0x420f98['shift']()['split'](/\\s/)[0x0]['split']('')['map'](_0x2e7a40 => _0x2e7a40 - 0x0);\n    let _0x4ae156 = 0x0, _0x1fd84e = [];\n    let _0x58e156, _0x117a53 = _0x5bd5b2[0x0], _0x5dc3f1 = 0x0;\n    while (_0x4ae156 < _0x477359) {\n        for (_0x58e156 = _0x4ae156; _0x58e156 < _0x477359 && _0x5bd5b2[_0x58e156] == _0x117a53; _0x58e156++) {\n        }\n        let _0x204ffa = _0x58e156 - _0x4ae156;\n        _0x1fd84e['push']({\n            'kind': _0x117a53,\n            'pos': _0x4ae156,\n            'len': _0x204ffa,\n            'index': _0x5dc3f1++\n        });\n        _0x117a53 = (_0x117a53 + 0x1) % 0x2;\n        _0x4ae156 = _0x58e156;\n    }\n    let _0x93b299 = _0x1fd84e['length'], _0x4e6906 = _0x93b299 - (_0x31382b - 0x1) * 0x2;\n    let _0x37e046 = _0x1fd84e[0x0]['kind'];\n    let _0x1e2b71 = 0x0;\n    for (let _0x22397b = 0x0; _0x22397b < _0x4e6906; _0x22397b += 0x2) {\n        let _0x1b9e57 = 0x0, _0x208b0e, _0x429492;\n        for (_0x208b0e = _0x22397b, _0x429492 = 0x0; _0x208b0e < _0x93b299 && _0x429492 < _0x31382b; _0x429492++, _0x208b0e += 0x2) {\n            if (_0x208b0e < _0x93b299)\n                _0x1b9e57 += _0x1fd84e[_0x208b0e]['len'];\n            if (_0x208b0e + 0x1 < _0x93b299)\n                _0x1b9e57 += _0x1fd84e[_0x208b0e + 0x1]['len'];\n        }\n        if (_0x37e046 == 0x1 && _0x208b0e < _0x93b299)\n            _0x1b9e57 += _0x1fd84e[_0x208b0e]['len'];\n        if (_0x1e2b71 < _0x1b9e57)\n            _0x1e2b71 = _0x1b9e57;\n    }\n    console['log'](_0x1e2b71);\n}\nif (typeof window == 'undefined')\n    Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 1\n00010", "4"], ["14 2\n11101010110011", "8"], ["1 1\n1", "1"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let nk = lines.shift().split(/\\s/).map((v) => v - 0);\n    let N = nk[0], K = nk[1];\n    let S = lines.shift().split(/\\s/)[0].split(\"\").map((v) => v - 0);\n    let n = 0, Z = [];\n    let p, b = S[0], i = 0;\n    while (n < N) {\n        for (p = n; p < N && S[p] == b; p++) { }\n        let l = p - n;\n        Z.push({kind: b, pos: n, len: l, index: i++});\n        b = (b + 1) % 2;\n        n = p;\n    }\n    let L = Z.length, LL = L - (K - 1) * 2;\n    let start = Z[0].kind;\n    let ans = 0;\n    for (let n = 0; n < LL; n += 2) {\n        let sum = 0, m, k;\n        for (m = n, k = 0; m < L && k < K; k++, m += 2) {\n            if (m < L) sum += Z[m].len;\n            if (m + 1 < L) sum += Z[m + 1].len;\n        }\n        if (start == 1 && m < L) sum += Z[m].len;\n        if (ans < sum) ans = sum;\n    }\n    console.log(ans);\n}\nif (typeof window == \"undefined\") Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03106_1", "type": "JavaScript", "obfuscated": "function main(_0x5b13c6) {\n    const _0x5d78fe = _0x5b13c6['split']('\\x20');\n    var _0x36e53b = Number(_0x5d78fe[0x0]);\n    var _0x5d94ea = Number(_0x5d78fe[0x1]);\n    var _0x456b0a = Number(_0x5d78fe[0x2]);\n    var _0x117b10 = 0x0;\n    var _0x2257cd;\n    var _0x52d2e0 = 0x0;\n    for (_0x117b10 = _0x36e53b; _0x117b10 > 0x0; --_0x117b10) {\n        if (Number['isInteger'](_0x36e53b / _0x117b10) && Number['isInteger'](_0x5d94ea / _0x117b10)) {\n            _0x52d2e0++;\n            if (_0x52d2e0 === _0x456b0a) {\n                _0x2257cd = _0x117b10;\n                break;\n            }\n        }\n    }\n    console['log'](_0x2257cd);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8 12 2", "2"], ["100 50 4", "5"], ["1 1 1", "1"]], "original": "function main(input) {\n  const args = input.split(' ');\n  var A = Number(args[0]);\n  var B = Number(args[1]);\n  var K = Number(args[2]);\n  var cu = 0;\n  var sum;\n  var count = 0;\n  for (cu = A; cu > 0; --cu) {\n    if (Number.isInteger(A / cu) && Number.isInteger(B / cu)) {\n      count++;\n      if (count === K) {\n        sum = cu;\n        break;\n      }\n    }\n  }\n  console.log(sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03140_1", "type": "JavaScript", "obfuscated": "function Main(_0x108a43) {\n    inputList = _0x108a43['split']('\\x0a');\n    inputNum = parseInt(inputList[0x0], 0xa);\n    firstList = inputList[0x1]['split']('');\n    secondList = inputList[0x2]['split']('');\n    thirdList = inputList[0x3]['split']('');\n    count = 0x0;\n    for (var _0x168058 = 0x0; _0x168058 < inputNum; _0x168058++) {\n        if (firstList[_0x168058] == secondList[_0x168058] && secondList[_0x168058] == thirdList[_0x168058]) {\n            continue;\n        }\n        if (firstList[_0x168058] == secondList[_0x168058] || secondList[_0x168058] == thirdList[_0x168058] || thirdList[_0x168058] == firstList[_0x168058]) {\n            count++;\n            continue;\n        }\n        count++;\n        count++;\n    }\n    console['log'](count);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\nwest\neast\nwait", "3"], ["9\ndifferent\ndifferent\ndifferent", "0"], ["7\nzenkoku\ntouitsu\nprogram", "13"]], "original": "// inputに入力データ全体が入る\n// 7\n// zenkoku\n// touitsu\n// program\n\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinputList = input.split(\"\\n\");\n    inputNum = parseInt(inputList[0], 10);\n    firstList = inputList[1].split(\"\");\n    secondList = inputList[2].split(\"\");\n    thirdList = inputList[3].split(\"\");\n    count = 0;\n    for (var i = 0; i < inputNum; i++) {\n        if(firstList[i] == secondList[i] && secondList[i] == thirdList[i]) {\n            continue;\n        }\n        if(firstList[i] == secondList[i] || secondList[i] == thirdList[i] || thirdList[i] == firstList[i]) {\n            count++;\n            continue;\n        }\n        count++;\n        count++;\n    }\n\tconsole.log(count);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03202_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x4eb5ec) {\n    const _0x58ce2c = _0x4eb5ec['split']('\\x0a')['filter'](_0x2deda2 => _0x2deda2 !== '');\n    const _0x4b177c = _0x58ce2c[0x0];\n    const _0x11495e = _0x58ce2c[0x1]['split']('\\x20')['map'](_0x307ffb => Number(_0x307ffb));\n    let _0x311af9 = 0x1;\n    while (_0x3a28e5(_0x311af9, _0x11495e) === ![]) {\n        _0x311af9 = _0x311af9 + 0x1;\n    }\n    console['log'](_0x311af9);\n    function _0x3a28e5(_0x492df9, _0x25c3b9) {\n        let _0x134593 = '0'['repeat'](_0x25c3b9[0x0]);\n        for (let _0x560a56 = 0x1; _0x560a56 < _0x25c3b9['length']; _0x560a56++) {\n            if (_0x25c3b9[_0x560a56 - 0x1] < _0x25c3b9[_0x560a56]) {\n                _0x134593 = _0x134593 + '0'['repeat'](_0x25c3b9[_0x560a56] - _0x25c3b9[_0x560a56 - 0x1]);\n            } else {\n                _0x134593 = parseInt(_0x134593['substring'](0x0, _0x25c3b9[_0x560a56]), _0x492df9) + 0x1;\n                if (isNaN(_0x134593)) {\n                    return ![];\n                }\n                _0x134593 = '' + _0x134593;\n                if (_0x134593['length'] > _0x25c3b9[_0x560a56]) {\n                    return ![];\n                } else {\n                    _0x134593 = '0'['repeat'](_0x25c3b9[_0x560a56] - _0x134593['length']) + _0x134593;\n                }\n            }\n        }\n        return !![];\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n3 2 1", "2"], ["5\n2 3 2 1 2", "2"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n\n  const n = inputs[0];\n  const a = inputs[1].split(\" \").map(x => Number(x));\n\n  let result = 1;\n  while (testN(result, a) === false) {\n    result = result + 1;\n  }\n\n  console.log(result);\n\n  function testN(n, a) {\n    let current = \"0\".repeat(a[0]);\n\n    for (let i = 1; i < a.length; i++) {\n      if (a[i - 1] < a[i]) {\n        current = current + \"0\".repeat(a[i] - a[i - 1]);\n      } else {\n        current = parseInt(current.substring(0, a[i]), n) + 1;\n        if (isNaN(current)) {\n          return false;\n        }\n\n        current = \"\" + current;\n        if (current.length > a[i]) {\n          return false;\n        } else {\n          current = \"0\".repeat(a[i] - current.length) + current;\n        }\n      }\n    }\n    return true;\n  }\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03251_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x390b70 => {\n    const _0x5a9a40 = _0x390b70[0x0]['split']('\\x20')['map'](_0x520ba7 => parseInt(_0x520ba7)), _0x22bbc8 = _0x5a9a40[0x0], _0x1e900b = _0x5a9a40[0x1], _0x1c055e = _0x5a9a40[0x2], _0x58face = _0x5a9a40[0x3], _0x4822e6 = _0x390b70[0x1]['split']('\\x20')['map'](_0x242bdc => parseInt(_0x242bdc)), _0x2bc8c8 = _0x390b70[0x2]['split']('\\x20')['map'](_0x196372 => parseInt(_0x196372));\n    const _0x36dda8 = Math['max'](..._0x4822e6), _0x23423f = Math['min'](..._0x2bc8c8);\n    let _0x999486 = 0x0;\n    for (let _0x4ecb44 = _0x1c055e + 0x1; _0x4ecb44 <= _0x58face; _0x4ecb44++) {\n        if (_0x36dda8 < _0x4ecb44 && _0x23423f >= _0x4ecb44) {\n            _0x999486 = 0x1;\n            break;\n        }\n    }\n    console['log'](_0x999486 == 0x1 ? 'No\\x20War' : 'War');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["3 2 10 20\n8 15 13\n16 22", "No War"], ["4 2 -48 -1\n-20 -35 -91 -23\n-22 66", "War"], ["5 3 6 8\n-10 3 1 5 -100\n100 6 14", "War"]], "original": "'use strict';\nconst main = input => {\n  const num = input[0].split(' ').map(val => parseInt(val)), N = num[0], M = num[1], X = num[2], Y = num[3], x = input[1].split(' ').map(val => parseInt(val)), y = input[2].split(' ').map(val => parseInt(val));\n  // console.log(N, M, X, Y, x, y);\n  const xMax = Math.max(...x), yMin = Math.min(...y);\n  // console.log(xMax, yMin);\n  let ans = 0;\n  for(let z=X+1; z<=Y; z++) {\n    if (xMax < z && yMin >= z) {\n      ans = 1;\n      break;\n    }\n  }\n  console.log(ans==1?'No War':'War');\n  \n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split('\\n'));", "language": "JavaScript"}
{"filename": "p03315_1", "type": "JavaScript", "obfuscated": "function main(_0x1d33af) {\n    var _0x1d33af = _0x1d33af;\n    var _0x12d3ba = 0x0;\n    for (var _0x541866 = 0x0; _0x541866 < 0x4; _0x541866++) {\n        if (_0x1d33af[_0x541866] == '+') {\n            _0x12d3ba += 0x1;\n        } else {\n            _0x12d3ba -= 0x1;\n        }\n    }\n    console['log'](_0x12d3ba);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["+-++", "2"], ["-+--", "-2"], ["----", "-4"]], "original": "function main(input) {\n  \n  var input = input;\n  var sum = 0;\n  for (var i=0;i<4;i++){\n    if(input[i] == '+') {\n    \tsum += 1;\n    } else {\n    \tsum -= 1;\n    }\n  }\n  console.log(sum);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03385_1", "type": "JavaScript", "obfuscated": "function main(_0x2761b7) {\n    var _0x4c1775 = _0x2761b7['indexOf']('a');\n    var _0xbc2924 = _0x2761b7['indexOf']('b');\n    var _0x24d231 = _0x2761b7['indexOf']('c');\n    if (_0x4c1775 == -0x1 || _0xbc2924 == -0x1 || _0x24d231 == -0x1) {\n        console['log']('No');\n    } else {\n        console['log']('Yes');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["bac", "Yes"], ["bab", "No"], ["abc", "Yes"], ["aaa", "No"]], "original": "function main(input) {\n    \n    var aa=input.indexOf(\"a\");\n    var bb=input.indexOf(\"b\");\n    var cc=input.indexOf(\"c\");\n\n  if(aa==-1 || bb==-1 || cc==-1){\n  console.log(\"No\");\n  }else{\n    console.log(\"Yes\");\n}\n}\n  main(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03409_1", "type": "JavaScript", "obfuscated": "function Main(_0x35e16e) {\n    _0x35e16e = _0x35e16e['split']('\\x0a');\n    var _0x487d26 = parseInt(_0x35e16e[0x0]);\n    var _0x1302cf = Array(_0x487d26);\n    var _0x1ca230 = Array(_0x487d26);\n    for (var _0x5d1260 = 0x0; _0x5d1260 < _0x487d26; _0x5d1260++) {\n        _0x1302cf[_0x5d1260] = _0x35e16e[_0x5d1260 + 0x1]['split']('\\x20')['map'](_0x5889dd => parseInt(_0x5889dd));\n    }\n    for (var _0x5d1260 = 0x0; _0x5d1260 < _0x487d26; _0x5d1260++) {\n        _0x1ca230[_0x5d1260] = _0x35e16e[_0x5d1260 + _0x487d26 + 0x1]['split']('\\x20')['map'](_0x21e324 => parseInt(_0x21e324));\n    }\n    _0x1302cf = _0x1302cf['sort']((_0x3150e4, _0x234854) => _0x3150e4[0x1] - _0x234854[0x1]);\n    _0x1302cf = _0x1302cf['sort']((_0x45086f, _0x1c5247) => _0x45086f[0x0] - _0x1c5247[0x0]);\n    _0x1ca230 = _0x1ca230['sort']((_0xf2bb41, _0x82a62b) => _0xf2bb41[0x0] - _0x82a62b[0x0]);\n    _0x1ca230 = _0x1ca230['sort']((_0x56367c, _0x4b52c3) => _0x4b52c3[0x1] - _0x56367c[0x1]);\n    var _0x4a833b = 0x0;\n    for (_0x5d1260 = _0x487d26 - 0x1; _0x5d1260 >= 0x0; _0x5d1260--) {\n        for (var _0x24518d = _0x1ca230['length'] - 0x1; _0x24518d >= 0x0; _0x24518d--) {\n            if (_0x1302cf[_0x5d1260][0x0] < _0x1ca230[_0x24518d][0x0] && _0x1302cf[_0x5d1260][0x1] < _0x1ca230[_0x24518d][0x1]) {\n                _0x4a833b++;\n                _0x1ca230['splice'](_0x24518d, 0x1);\n                break;\n            }\n        }\n    }\n    console['log'](_0x4a833b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5", "2"], ["3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5", "2"], ["2\n2 2\n3 3\n0 0\n1 1", "0"], ["5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7", "5"], ["5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9", "4"]], "original": "function Main(s) {\n\ts = s.split(\"\\n\");\n\tvar n = parseInt(s[0]);\n\tvar a = Array(n);\n\tvar c = Array(n);\n\tfor(var i = 0; i < n; i++){\n\t\ta[i] = s[i+1].split(\" \").map(a => parseInt(a));\n\t}\n\tfor(var i = 0; i < n; i++){\n\t\tc[i] = s[i+n+1].split(\" \").map(a => parseInt(a));\n\t}\n\ta = a.sort((a,b) => a[1] - b[1]);\n\ta = a.sort((a,b) => a[0] - b[0]);\n\tc = c.sort((a,b) => a[0] - b[0]);\n\tc = c.sort((a,b) => b[1] - a[1]);\n\t\n\tvar ans = 0;\n\tfor(i = n-1; i >= 0; i--){\n\t\tfor(var j = c.length-1; j >= 0; j--){\n\t\t\tif(a[i][0] < c[j][0] && a[i][1] < c[j][1]){\n\t\t\t\tans++;\n\t\t\t\tc.splice(j,1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03423_1", "type": "JavaScript", "obfuscated": "function main(_0x299d26) {\n    _0x299d26 = _0x299d26['trim']();\n    const _0x2227a2 = parseInt(_0x299d26['split']('\\x20')[0x0], 0xa);\n    console['log'](Math['floor'](_0x2227a2 / 0x3));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8", "2"], ["2", "0"], ["9", "3"]], "original": "function main(input) {\n  input=input.trim();\nconst a = parseInt(input.split(\" \")[0], 10);\n  console.log(Math.floor(a/3));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03455_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3159c7) {\n    _0x3159c7 = _0x3159c7['trim']()['split']('\\x20')['map'](Number);\n    const _0x14f947 = _0x3159c7[0x0];\n    const _0x595695 = _0x3159c7[0x1];\n    const _0x346859 = _0x14f947 % 0x2 ^ _0x595695 % 0x2 ? 'Even' : 'Odd';\n    console['log'](_0x346859);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4", "Even"], ["1 21", "Odd"]], "original": "'use strict'\n\nfunction main(input) {\n  input = input\n    .trim()\n    .split(' ')\n    .map(Number)\n\n  const A = input[0]\n  const B = input[1]\n  const ans = A % 2 ^ B % 2 ? 'Even' : 'Odd'\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03478_1", "type": "JavaScript", "obfuscated": "function Main(_0x139f79) {\n    var _0x139f79 = _0x139f79['split']('\\x20');\n    var _0x451771 = _0x139f79[0x0];\n    var _0x5441d3 = _0x139f79[0x1];\n    var _0x51ff7b = _0x139f79[0x2];\n    var _0x550754 = 0x0;\n    for (j = 0x1; j <= _0x451771; j++) {\n        if (0x0 <= j && j <= 0x9) {\n            if (_0x5441d3 <= j && j <= _0x51ff7b) {\n                _0x550754 += j;\n            }\n        } else {\n            var _0x563928 = j['toString']();\n            var _0xca2da9 = _0x563928['split']('')['map'](_0x53d6dc => parseInt(_0x53d6dc));\n            var _0x214dc2 = _0xca2da9['reduce'](function (_0x2847f6, _0x36ce97, _0x3be676, _0x416304) {\n                return _0x2847f6 + _0x36ce97;\n            });\n        }\n        ;\n        if (_0x5441d3 <= _0x214dc2 && _0x214dc2 <= _0x51ff7b) {\n            _0x550754 += j;\n        }\n    }\n    console['log'](_0x550754);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["20 2 5", "84"], ["10 1 2", "13"], ["100 4 16", "4554"]], "original": "function Main(input) {\n    var input  = input.split(' ');\n    var n = input[0];\n    var a = input[1];\n    var b = input[2];\n    var Sum = 0;\n    for (j = 1; j <= n; j++) {\n        if(0 <= j && j <= 9) {\n            if(a <= j && j <= b) {\n                Sum += j;\n            }\n        } else {\n        var str = j.toString();\n        var arr = str.split('').map(n => parseInt(n));\n        var x = arr.reduce(function(prev, current, i, arr) {\n                return prev+current;\n            });\n        };\n        if(a <= x && x <= b) {\n            Sum += j;\n        }\n    \n    }\n    console.log(Sum);\n\n    }\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03486_1", "type": "JavaScript", "obfuscated": "function main(_0x19fada) {\n    var _0xdb0e00 = _0x19fada['split']('\\x0a');\n    var _0x3372d6 = _0xdb0e00[0x0]['split']('');\n    var _0x5369bc = _0xdb0e00[0x1]['split']('');\n    _0x3372d6 = _0x3372d6['sort']()['join']();\n    _0x5369bc = _0x5369bc['sort']()['reverse']()['join']();\n    _0x3372d6 < _0x5369bc ? console['log']('Yes') : console['log']('No');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8'));", "test_cases": [["yx\naxy", "Yes"], ["ratcode\natlas", "Yes"], ["cd\nabc", "No"], ["w\nww", "Yes"], ["zzz\nzzz", "No"]], "original": "function main(input){\n  var lines = input.split('\\n');\n  var s = lines[0].split(\"\"); // change to array\n  var t = lines[1].split(\"\");\n  s = s.sort().join();\n  t = t.sort().reverse().join();\n\n  s < t ? console.log(\"Yes\") : console.log(\"No\");\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));", "language": "JavaScript"}
{"filename": "p03563_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x17c4ac) {\n    _0x17c4ac = _0x17c4ac['split']('\\x0a');\n    const _0x46e0ac = Number(_0x17c4ac[0x0]);\n    const _0x9d03b = Number(_0x17c4ac[0x1]);\n    let _0x101262 = _0x9d03b + (_0x9d03b - _0x46e0ac);\n    console['log'](_0x101262);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2002\n2017", "2032"], ["4500\n0", "-4500"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n  const r = Number(s[0]);\n  const g = Number(s[1]);\n  let ans = g + (g - r);\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03610_1", "type": "JavaScript", "obfuscated": "function Main(_0x5192c0) {\n    _0x5192c0 = _0x5192c0['split']('\\x0a');\n    _0x5192c0 = _0x5192c0[0x0];\n    var _0x43ddb3 = '';\n    for (var _0x43aa06 = 0x1; _0x43aa06 <= _0x5192c0['length']; _0x43aa06 = _0x43aa06 + 0x2) {\n        _0x43ddb3 += _0x5192c0[_0x43aa06 - 0x1];\n    }\n    console['log'](_0x43ddb3);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["atcoder", "acdr"], ["aaaa", "aa"], ["z", "z"], ["fukuokayamaguchi", "fkoaaauh"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\tinput = input[0];\n\n\tvar ans = \"\";\n\tfor(var i = 1; i <= input.length; i = i + 2){\n\t\tans += input[i-1];\n\t}\n\tconsole.log(ans);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03693_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x28450b) {\n    const _0x53d05b = Number(_0x28450b['split']('\\x20')['join'](''));\n    if (_0x53d05b % 0x4 === 0x0) {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3 2", "YES"], ["2 3 4", "NO"]], "original": "// https://atcoder.jp/contests/abc064/tasks/abc064_a\n\"use strict\"\nfunction Main(input) {\n  const param = Number(input.split(' ').join(''));\n  if(param % 4 === 0) {\n    console.log('YES');\n  } else {\n    console.log('NO');\n  }\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03697_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x11aa19) {\n    const _0x22b3a3 = _0x11aa19['split']('\\x0a')[0x0]['split']('\\x20');\n    const _0x43daad = parseInt(_0x22b3a3[0x0], 0xa);\n    const _0x1659ae = parseInt(_0x22b3a3[0x1], 0xa);\n    console['log'](_0x43daad + _0x1659ae >= 0xa ? 'error' : _0x43daad + _0x1659ae);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 3", "9"], ["6 4", "error"]], "original": "'use strict';\n\nfunction Main(INPUT) {\n    const input = INPUT.split(\"\\n\")[0].split(\" \");\n    const A = parseInt(input[0], 10);\n    const B = parseInt(input[1], 10);\n\n    console.log(A + B >= 10 ? \"error\" : A + B);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03698_1", "type": "JavaScript", "obfuscated": "function main(_0x2ea585) {\n    input = _0x2ea585['split']('');\n    len = input['length'];\n    temp = [];\n    for (i = 0x0; i < len; i += 0x1) {\n        if (temp['indexOf'](input[i]) === -0x1) {\n            temp['push'](input[i]);\n        } else {\n            console['log']('no');\n            return;\n        }\n    }\n    console['log']('yes');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["uncopyrightable", "yes"], ["different", "no"], ["no", "yes"]], "original": "function main(data){\n    input = data.split(\"\");\n    len = input.length;\n    temp = []\n    for(i = 0; i<len; i+=1){\n        if(temp.indexOf(input[i]) === -1){\n            temp.push(input[i]);\n        }else{\n            console.log(\"no\");\n            return;\n        }\n    }\n    console.log(\"yes\");\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03737_1", "type": "JavaScript", "obfuscated": "function Main(_0x1e878f) {\n    console['log']((_0x1e878f || '')['split'](/\\s+/)['map'](function (_0x2949c7) {\n        return _0x2949c7[0x0]['toUpperCase']();\n    })['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["atcoder beginner contest", "ABC"], ["resident register number", "RRN"], ["k nearest neighbor", "KNN"], ["async layered coding", "ALC"]], "original": "function Main(input) {\n  console.log( (input || \"\").split(/\\s+/).map(function(entry) {\n    return entry[0].toUpperCase();\n  }).join(\"\"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03826_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar inputArray = input['split']('\\x20');\nvar a = inputArray[0x0];\nvar b = inputArray[0x1];\nvar c = inputArray[0x2];\nvar d = inputArray[0x3];\nvar result = a * b > c * d ? a * b : c * d;\nconsole['log'](result);", "test_cases": [["3 5 2 7", "15"], ["100 600 200 300", "60000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar inputArray = input.split(' ');\nvar a = inputArray[0];\nvar b = inputArray[1];\nvar c = inputArray[2];\nvar d = inputArray[3];\n\nvar result = (a * b > c * d) ? a * b : c * d;\nconsole.log(result);", "language": "JavaScript"}
{"filename": "p04012_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x22ee54) {\n    const _0x3fb560 = _0x22ee54['replace'](/\\n/g, '')['split']('');\n    let _0x5e8adf = [];\n    _0x3fb560['forEach']((_0xc15a5a, _0x4c6a5e, _0x41f691) => {\n        if (_0x41f691['indexOf'](_0xc15a5a) === _0x4c6a5e) {\n            _0x5e8adf['push']({\n                'word': _0xc15a5a,\n                'counter': 0x1\n            });\n        } else {\n            _0x5e8adf['forEach'](_0x1e80f8 => {\n                if (_0xc15a5a === _0x1e80f8['word']) {\n                    _0x1e80f8['counter'] += 0x1;\n                }\n            });\n        }\n    });\n    const _0x7eed96 = _0x5e8adf['every'](_0xab91d => _0xab91d['counter'] % 0x2 === 0x0) ? 'Yes' : 'No';\n    console['log'](_0x7eed96);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abaccaba", "Yes"], ["hthth", "No"]], "original": "'use strict'\n\nfunction main(s) {  \n  \n  const input = s.replace(/\\n/g, '').split('');\n  let words = [];\n\n  // 文字配列の重複を検出\n  input.forEach((x, i, self) => {\n    \n    // 初出時はオブジェクト追加\n    if(self.indexOf(x) === i) {\n      words.push({word : x, counter: 1});\n\n    // 2回目以降はカウントするのみ\n    } else {\n      words.forEach(y => {\n        if(x === y.word) {\n          y.counter += 1;\n        }\n      })\n    }\n  });\n\n  // 全ての文字が偶数回出ているかどうか\n  const result = words.every(x => (x.counter % 2) === 0) ? 'Yes' : 'No';\n  \n  console.log(result);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p00006_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar string = input['trim']();\nconsole['log'](reverse(string));\nfunction reverse(_0x2c51e8) {\n    return string['split']('')['reverse']()['join']('');\n}", "test_cases": [["w32nimda", "admin23w"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar string = input.trim();\n\nconsole.log(reverse(string));\n\nfunction reverse(s){\n    return string.split(\"\").reverse().join(\"\");\n}", "language": "JavaScript"}
{"filename": "p00018_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\s/)['sort'](function (_0x4fc040, _0x2f2602) {\n    return _0x2f2602 - _0x4fc040;\n})['join']('\\x20'));", "test_cases": [["3 6 9 7 5", "9 7 6 5 3"]], "original": "console.log(require('fs').readFileSync('/dev/stdin','utf8').split(/\\s/).sort(function(a,b){return b-a}).join(\" \"));", "language": "JavaScript"}
{"filename": "p00024_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar minvs = input['trim']()['split']('\\x0a');\nvar minv;\nwhile (minv = minvs['shift']()) {\n    var floor = Math['ceil'](Math['pow'](parseFloat(minv), 0x2) / 0x62 + 0x1);\n    console['log'](floor);\n}", "test_cases": [["25.4\n25.4", "8\n8"]], "original": "'use strict';\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar minvs = input.trim().split('\\n');\n//var minvs = ['25.4','21.4','36.3'];\nvar minv;\nwhile (minv = minvs.shift()) {\n\tvar floor = Math.ceil(Math.pow(parseFloat(minv), 2)/98 + 1);\n\tconsole.log(floor);\n}", "language": "JavaScript"}
{"filename": "p00036_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a\\x0a')['map'](function (_0x136395) {\n    c = _0x136395['replace'](/\\s/g, '')['split']('')['join']('');\n    console['log'](c['indexOf']('1111') != -0x1 ? 'C' : c['indexOf']('111') != -0x1 ? 'F' : c['indexOf']('1101') != -0x1 ? 'D' : c['indexOf']('101') != -0x1 ? 'B' : c['indexOf']('1000001') != -0x1 ? 'G' : c['indexOf']('10000001') != -0x1 ? 'A' : 'E');\n});", "test_cases": [["00000000\n00000000\n01100000\n00110000\n00000000\n00000000\n00000000\n00000000\n\n00011110\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n00000000\n\n00000000\n00000000\n00110000\n00110000\n00000000\n00000000\n00000000\n00000000", "E\nC\nA"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n\\n').map(function(i){c=i.replace(/\\s/g,'').split('').join('');console.log(c.indexOf(\"1111\")!=-1?\"C\":c.indexOf(\"111\")!=-1?\"F\":c.indexOf(\"1101\")!=-1?\"D\":c.indexOf(\"101\")!=-1?\"B\":c.indexOf(\"1000001\")!=-1?\"G\":c.indexOf(\"10000001\")!=-1?\"A\":\"E\")})", "language": "JavaScript"}
{"filename": "p02391_1", "type": "JavaScript", "obfuscated": "function main(_0x12c95e) {\n    let _0x240683 = _0x12c95e['split']('\\x20')['map'](_0x9188a4 => parseInt(_0x9188a4));\n    if (_0x240683[0x0] > _0x240683[0x1]) {\n        console['log']('a\\x20>\\x20b');\n    } else if (_0x240683[0x0] < _0x240683[0x1]) {\n        console['log']('a\\x20<\\x20b');\n    } else {\n        console['log']('a\\x20==\\x20b');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["1 2", "a < b"], ["4 3", "a > b"], ["5 5", "a == b"]], "original": "function main(input){\n    let nums = input.split(\" \").map(item=>parseInt(item));\n    if(nums[0]>nums[1]){\n        console.log(\"a > b\");\n    }else if(nums[0]<nums[1]){\n        console.log(\"a < b\");\n    }else{\n        console.log(\"a == b\");\n    }\n    \n    \n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf-8\"));\n", "language": "JavaScript"}
{"filename": "p02407_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\n/);\nlet num = input[0x1]['split']('\\x20')['map'](Number);\nnum['reverse']();\nconsole['log'](num['join']('\\x20'));", "test_cases": [["5\n1 2 3 4 5", "5 4 3 2 1"], ["8\n3 3 4 4 5 8 7 9", "9 7 8 5 4 4 3 3"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/);\nlet num = input[1].split(' ').map(Number);\nnum.reverse();\n\nconsole.log(num.join(' '));\n", "language": "JavaScript"}
{"filename": "p02583_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x54e4f4, _0x190891) {\n    return _0x190891 ? cin['slice'](cid, cid += _0x54e4f4) : cin['slice'](cid, cid += _0x54e4f4)['map'](_0x3cf2a3 => +_0x3cf2a3);\n}\nfunction nextm(_0x421618, _0x4cc266, _0x40b9f1) {\n    var _0x25ab5a = [], _0x2bf10e = 0x0;\n    if (_0x40b9f1)\n        for (; _0x2bf10e < _0x421618; _0x2bf10e++)\n            _0x25ab5a['push'](cin['slice'](cid, cid += _0x4cc266));\n    else\n        for (; _0x2bf10e < _0x421618; _0x2bf10e++)\n            _0x25ab5a['push'](cin['slice'](cid, cid += _0x4cc266)['map'](_0x2c2c44 => +_0x2c2c44));\n    return _0x25ab5a;\n}\nfunction xArray(_0x20182b) {\n    var _0x3d930a = arguments, _0x33a796 = _0x3d930a['length'], _0x26a56b = 'Array(a[' + --_0x33a796 + ']).fill().map(x=>{return\\x20' + _0x20182b + ';})';\n    while (--_0x33a796)\n        _0x26a56b = 'Array(a[' + _0x33a796 + ']).fill().map(x=>' + _0x26a56b + ')';\n    return eval(_0x26a56b);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x33f066 = next();\n    var _0x1e383e = nexts(_0x33f066)['sort']((_0x5bf08c, _0x2a8a99) => _0x5bf08c - _0x2a8a99);\n    var _0x3b2fa1 = 0x0;\n    for (var _0x1a7554 = 0x0; _0x1a7554 < _0x33f066; _0x1a7554++)\n        for (var _0x594b69 = _0x1a7554 + 0x1; _0x594b69 < _0x33f066; _0x594b69++)\n            for (var _0x41577b = _0x594b69 + 0x1; _0x41577b < _0x33f066; _0x41577b++) {\n                if (_0x1e383e[_0x1a7554] === _0x1e383e[_0x594b69] || _0x1e383e[_0x594b69] === _0x1e383e[_0x41577b])\n                    continue;\n                if (_0x1e383e[_0x1a7554] + _0x1e383e[_0x594b69] > _0x1e383e[_0x41577b])\n                    _0x3b2fa1++;\n            }\n    return _0x3b2fa1;\n}", "test_cases": [["5\n4 4 9 7 5", "5"], ["6\n4 5 4 3 3 5", "8"], ["10\n9 4 6 1 9 6 10 6 6 8", "39"], ["2\n1 1", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var l = nexts(n).sort((a,b)=>a-b);\n  var ans = 0;\n  for(var i = 0; i < n; i++)\n  for(var j = i+1; j < n; j++)\n  for(var k = j+1; k < n; k++){\n    if(l[i] === l[j] || l[j] === l[k])continue;\n    if(l[i] + l[j] > l[k])ans++;\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p02584_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['split']('\\x0a');\nlet [X, K, D] = lines[0x0]['split']('\\x20')['map'](Number);\nX = Math['abs'](X);\nconst div = Math['min'](Math['floor'](X / D), K);\nlet x = X - div * D;\nlet k = K - div;\nfor (let i = 0x0; i < k; i++) {\n    x -= D;\n    if (x <= 0x0) {\n        if (!((k - i) % 0x2)) {\n            x += D;\n        }\n        break;\n    }\n}\nconsole['log'](Math['abs'](x));", "test_cases": [["6 2 4", "2"], ["7 4 3", "1"], ["10 1 2", "8"], ["1000000000000000 1000000000000000 1000000000000000", "1000000000000000"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nconst lines = input.split('\\n')\nlet [X, K, D] = lines[0].split(' ').map(Number)\n\nX = Math.abs(X)\nconst div = Math.min(Math.floor(X / D), K)\nlet x = X - div * D\nlet k = K - div\nfor (let i = 0; i < k; i++) {\n    x -= D\n    if (x <= 0) {\n        if (!((k - i) % 2)) {\n            x += D\n        }\n        break\n    }\n}\nconsole.log(Math.abs(x))", "language": "JavaScript"}
{"filename": "p02723_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3b0cb6) {\n    let _0x2c3741 = 'No';\n    if (_0x3b0cb6[0x2] === _0x3b0cb6[0x3] && _0x3b0cb6[0x4] === _0x3b0cb6[0x5]) {\n        _0x2c3741 = 'Yes';\n    }\n    console['log'](_0x2c3741);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["sippuu", "Yes"], ["iphone", "No"], ["coffee", "Yes"]], "original": "'use strict'\nfunction main(inp) {\n  let ans = \"No\";\n  if(inp[2] === inp[3] && inp[4] === inp[5]){\n  \tans = \"Yes\"\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02759_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x40859a) {\n    _0x40859a = _0x40859a['split']('\\x0a');\n    const _0x51f8d5 = parseInt(_0x40859a[0x0], 0xa);\n    console['log'](Math['round'](_0x51f8d5 / 0x2));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5", "3"], ["2", "1"], ["100", "50"]], "original": "'use strict';\nfunction main(input) {\n  input = input.split(\"\\n\");\n  const a = parseInt(input[0], 10);\n  \n  console.log(Math.round(a / 2));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02779_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x5baeea) {\n    _0x5baeea = _0x5baeea['trim']()['split']('\\x0a');\n    const _0x58b2ef = Number(_0x5baeea[0x0]['trim']());\n    const _0x454c49 = _0x5baeea[0x1]['trim']()['split']('\\x20')['map'](Number);\n    let _0x12e661 = 'YES';\n    for (let _0x1b507b = 0x0; _0x1b507b < _0x58b2ef; _0x1b507b++) {\n        let _0x17eded = _0x454c49['slice'](_0x1b507b + 0x1);\n        let _0x2cc91d = _0x17eded['indexOf'](_0x454c49[_0x1b507b]);\n        if (_0x2cc91d !== -0x1) {\n            _0x12e661 = 'NO';\n            break;\n        }\n    }\n    console['log'](_0x12e661);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n2 6 1 4 5", "YES"], ["6\n4 1 3 1 6 2", "NO"], ["2\n10000000 10000000", "NO"]], "original": "\"use strict\"\nfunction Main(input) {\n  input = input.trim().split('\\n');\n  const N = Number(input[0].trim());\n  const A = input[1].trim().split(' ').map(Number);\n  \n  let ret = 'YES';\n  for(let i=0; i<N; i++){\n    let tmp = A.slice(i+1);\n    let r = tmp.indexOf(A[i]);\n    if(r !== -1){\n      ret = 'NO';\n      break;\n    }\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02819_1", "type": "JavaScript", "obfuscated": "var fs = require('fs');\nvar inn = parseInt(fs['readFileSync'](0x0)['toString']());\nfunction isPrime(_0x2ea4a8) {\n    if (_0x2ea4a8 <= 0x3)\n        return _0x2ea4a8 > 0x1;\n    else if (_0x2ea4a8 % 0x2 === 0x0 || _0x2ea4a8 % 0x3 === 0x0)\n        return ![];\n    var _0x6aaf66 = 0x5;\n    while (Math['pow'](_0x6aaf66, 0x2) <= _0x2ea4a8) {\n        if (_0x2ea4a8 % _0x6aaf66 === 0x0 || _0x2ea4a8 % (_0x6aaf66 + 0x2) === 0x0)\n            return ![];\n        _0x6aaf66 += 0x6;\n    }\n    return !![];\n}\nwhile (!isPrime(inn)) {\n    inn++;\n}\nconsole['log'](inn);", "test_cases": [["20", "23"], ["2", "2"], ["99992", "100003"]], "original": "var fs = require('fs');\nvar inn = parseInt(fs.readFileSync(0).toString());\nfunction isPrime(n) {\n    if(n <= 3) return n > 1;\n    else if (n % 2 === 0 || n % 3 === 0) return false;\n    var i = 5;\n    while (Math.pow(i, 2) <= n) {\n        if (n % i === 0 || n % (i + 2) === 0) return false;\n        i += 6;\n    }\n    return true;\n}\nwhile (!isPrime(inn)) {\ninn++;\n}\nconsole.log(inn);", "language": "JavaScript"}
{"filename": "p02948_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x33736e) {\n    const _0x34e144 = Number(_0x33736e['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    const _0x5776cb = Number(_0x33736e['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    const _0x387de9 = _0x33736e['split']('\\x0a')['slice'](0x1)['map'](_0x51a87b => _0x51a87b['split']('\\x20')['map'](_0x41b23c => Number(_0x41b23c)))['filter'](_0x86b8af => _0x86b8af[0x0] <= _0x5776cb)['sort']((_0x482846, _0x3bb55f) => {\n        if (_0x482846[0x1] === _0x3bb55f[0x1]) {\n            return _0x3bb55f[0x0] - _0x482846[0x0];\n        } else {\n            return _0x3bb55f[0x1] - _0x482846[0x1];\n        }\n    });\n    let _0x40dac6 = 0x0;\n    let _0x2cae68 = 0x0;\n    if (_0x387de9['length'] === 0x0) {\n        console['log'](0x0);\n        return;\n    }\n    for (let _0x3f0b5a = 0x0; _0x3f0b5a < _0x34e144; _0x3f0b5a++) {\n        if (_0x2cae68 === _0x5776cb) {\n            break;\n        }\n        if (_0x387de9[_0x3f0b5a][0x0] > _0x5776cb - _0x2cae68) {\n            continue;\n        }\n        _0x40dac6 += _0x387de9[_0x3f0b5a][0x1];\n        _0x2cae68++;\n    }\n    console['log'](_0x40dac6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3 4\n4 3\n4 1\n2 2", "5"], ["5 3\n1 2\n1 3\n1 4\n2 1\n2 3", "10"], ["1 1\n2 1", "0"]], "original": "'use strict'\n\nfunction Main(input) {\n  const N = Number(input.split(\"\\n\")[0].split(\" \")[0])\n  const M = Number(input.split(\"\\n\")[0].split(\" \")[1])\n  const list = input.split(\"\\n\").slice(1)\n    .map(x => x.split(\" \")\n    .map(x => Number(x)))\n    .filter(x => x[0] <= M)\n    .sort((a, b) => {\n      if(a[1] === b[1]) {\n        return b[0] - a[0]\n      } else {\n        return b[1] - a[1]\n      }\n    })\n  \n  let ans = 0\n  let now = 0\n  if(list.length === 0) {\n    console.log(0)\n    return\n  }\n\n  for(let i=0; i<N; i++) {\n    if(now === M) {\n      break\n    }\n    if(list[i][0] > M-now) {\n      continue\n    }\n    ans += list[i][1]\n    now++\n  }\n  console.log(ans)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim())\n", "language": "JavaScript"}
{"filename": "p02981_1", "type": "JavaScript", "obfuscated": "var main = _0x252e5c => {\n    var _0x48a078 = _0x252e5c['split']('\\x20');\n    var _0xf7c0a1 = Number['parseInt'](_0x48a078[0x0]);\n    var _0x597130 = Number['parseInt'](_0x48a078[0x1]);\n    var _0x2d7c99 = Number['parseInt'](_0x48a078[0x2]);\n    if (_0xf7c0a1 * _0x597130 >= _0x2d7c99) {\n        console['log'](_0x2d7c99);\n    } else {\n        console['log'](_0xf7c0a1 * _0x597130);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8'));", "test_cases": [["4 2 9", "8"], ["4 2 7", "7"], ["4 2 8", "8"]], "original": "var main = (standardInput) => {\n    var lengthList = standardInput.split(' ');\n\tvar n = Number.parseInt(lengthList[0]);\n\tvar a = Number.parseInt(lengthList[1])\n    var b = Number.parseInt(lengthList[2])\n    \n    if ( n*a >= b){\n \t console.log(b);\n\t} else {\n  \t console.log(n*a)\n \t}\n    \t\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));", "language": "JavaScript"}
{"filename": "p03030_1", "type": "JavaScript", "obfuscated": "function Main(_0x539fd4) {\n    'use strict';\n    const _0x26bfd0 = _0x539fd4['split']('\\x0a');\n    const _0x525684 = parseInt(_0x26bfd0['shift'](), 0xa);\n    for (let _0x2d611f = 0x0; _0x2d611f < _0x525684; _0x2d611f++) {\n        _0x26bfd0[_0x2d611f] = _0x26bfd0[_0x2d611f]['split']('\\x20');\n        _0x26bfd0[_0x2d611f]['push'](_0x2d611f + 0x1);\n        _0x26bfd0[_0x2d611f][0x1] = parseInt(_0x26bfd0[_0x2d611f][0x1], 0xa);\n    }\n    _0x26bfd0['sort']((_0x560304, _0xba52fa) => _0xba52fa[0x1] - _0x560304[0x1]);\n    _0x26bfd0['sort']((_0x58e636, _0x22c4f2) => {\n        if (_0x58e636[0x0] < _0x22c4f2[0x0])\n            return -0x1;\n        else if (_0x58e636[0x0] > _0x22c4f2[0x0])\n            return 0x1;\n        else\n            0x0;\n    });\n    const _0x25ceef = _0x26bfd0['map'](_0x267f60 => _0x267f60[0x2]);\n    console['log'](_0x25ceef['join']('\\x0a'));\n    return ![];\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\nkhabarovsk 20\nmoscow 10\nkazan 50\nkazan 35\nmoscow 60\nkhabarovsk 40", "3\n4\n6\n1\n5\n2"], ["10\nyakutsk 10\nyakutsk 20\nyakutsk 30\nyakutsk 40\nyakutsk 50\nyakutsk 60\nyakutsk 70\nyakutsk 80\nyakutsk 90\nyakutsk 100", "10\n9\n8\n7\n6\n5\n4\n3\n2\n1"]], "original": "function Main(input) {\n    'use strict';\n   \n    const temp = input.split(\"\\n\");\n   \n    const n = parseInt(temp.shift(), 10);\n    for(let i = 0; i < n; i++){\n      temp[i] = temp[i].split(\" \");\n      temp[i].push(i + 1);\n      temp[i][1] = parseInt(temp[i][1],10)\n    }\n   \n    temp.sort((a,b) => b[1] - a[1]);\n    temp.sort((a,b) => {\n      if(a[0] < b[0]) return -1;\n      else if(a[0] > b[0]) return 1;\n      else 0;\n    });\n    \n    // temp.forEach(e => console.log(e[2]))\n    const ans = temp.map(e => e[2]);\n    console.log(ans.join(\"\\n\"));\n    return false;\n}\n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03290_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x370007) {\n    _0x370007 = _0x370007['trim']()['split']('\\x0a');\n    const _0x514794 = _0x370007['shift']()['split']('\\x20')['map'](_0xdca72e => Number(_0xdca72e));\n    _0x370007 = _0x370007['map'](_0x8b5cb0 => _0x8b5cb0['split']('\\x20')['map'](_0x96e14e => Number(_0x96e14e)));\n    const _0x396deb = (_0x25496e, _0x43de46) => {\n        let _0x5f16ea = [Math['pow'](0xa, 0x8)];\n        for (let _0x31aeec = 0x0; _0x31aeec < _0x514794[0x0]; _0x31aeec++) {\n            const _0xf1d23d = Math['pow'](0x2, _0x31aeec);\n            if ((_0x25496e & _0xf1d23d) === _0xf1d23d) {\n                const _0x2c9cf8 = (_0x31aeec + 0x1) * 0x64;\n                let _0x3bc474 = _0x2c9cf8 * _0x370007[_0x31aeec][0x0] + _0x370007[_0x31aeec][0x1];\n                let _0x3f684f = Math['ceil'](_0x43de46 / _0x2c9cf8);\n                if (_0x3bc474 < _0x43de46) {\n                    _0x5f16ea['push'](_0x370007[_0x31aeec][0x0] + _0x396deb(_0x25496e - _0xf1d23d, _0x43de46 - _0x3bc474));\n                } else {\n                    _0x5f16ea['push'](_0x3f684f < _0x370007[_0x31aeec][0x0] ? _0x3f684f : _0x370007[_0x31aeec][0x0]);\n                }\n            }\n        }\n        return Math['min'](..._0x5f16ea);\n    };\n    console['log'](_0x396deb(Math['pow'](0x2, _0x514794[0x0]) - 0x1, _0x514794[0x1]));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 700\n3 500\n5 800", "3"], ["2 2000\n3 500\n5 800", "7"], ["2 400\n3 500\n5 800", "2"], ["5 25000\n20 1000\n40 1000\n50 1000\n30 1000\n1 1000", "66"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  const DG = input.shift().split(' ').map(v => Number(v))\n  input = input.map(v => v.split(' ').map(v => Number(v)))\n  const calc = (a, r) => {\n    let count = [Math.pow(10, 8)]\n    for(let i = 0; i < DG[0]; i++) {\n      const cur = Math.pow(2, i)\n      if ((a & cur) === cur) {\n        const points = (i+1) * 100\n        let max = points * input[i][0] + input[i][1]\n        let num = Math.ceil(r / points)\n        if (max < r) {\n          count.push(input[i][0] + calc(a - cur, r - max))\n        } else {\n          count.push(num < input[i][0] ? num : input[i][0])\n        }\n      }\n    }\n    return Math.min(...count)\n  }\n  console.log(calc(Math.pow(2, DG[0]) - 1, DG[1]))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03407_1", "type": "JavaScript", "obfuscated": "function Main(_0x410711) {\n    _0x410711 = _0x410711['split']('\\x20')['map'](_0x29fa8d => parseInt(_0x29fa8d));\n    console['log'](_0x410711[0x0] + _0x410711[0x1] >= _0x410711[0x2] ? 'Yes' : 'No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["50 100 120", "Yes"], ["500 100 1000", "No"], ["19 123 143", "No"], ["19 123 142", "Yes"]], "original": "function Main(s) {\n\ts = s.split(\" \").map(a => parseInt(a));\n\t\n\tconsole.log(s[0] + s[1] >= s[2] ? \"Yes\" : \"No\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03447_1", "type": "JavaScript", "obfuscated": "const BKRT = '\\x0a';\nconst SPAC = '\\x20';\nconst NOSP = '';\nfunction Main(_0x58fd0c) {\n    _0x58fd0c = []['concat'](..._0x58fd0c['split'](BKRT)['map'](_0x1b2029 => _0x1b2029['split'](SPAC)));\n    const _0x200a1c = () => _0x58fd0c['shift']();\n    const _0x2e6104 = () => ~~_0x58fd0c['shift']();\n    return ~~(_0x2e6104() - _0x2e6104()) % _0x2e6104();\n}\n((_0x37069e, _0x433682, _0x4be368) => 'undefined' != typeof require ? console['log'](Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'))) : [\n    _0x37069e = _0x37069e['split']('\\x0a')['slice'](0x1, -0x1)['join']('\\x0a'),\n    _0x433682 = (function () {\n        try {\n            return Main(_0x37069e);\n        } catch (_0x34c0a0) {\n            return _0x34c0a0['stack'] || _0x34c0a0['message'];\n        }\n    }()),\n    _0x4be368 = typeof _0x433682,\n    'string' == _0x4be368 || (_0x433682 = JSON['stringify'](_0x433682)),\n    $('<form>')['append']([\n        [\n            0xa,\n            _0x37069e\n        ],\n        0x0,\n        [\n            0x1,\n            _0x4be368\n        ],\n        0x0,\n        [\n            0xa,\n            _0x433682\n        ]\n    ]['map'](_0x5cd8d5 => $(_0x5cd8d5 ? '<textarea>' : '<br>', _0x5cd8d5 && {\n        'rows': _0x5cd8d5[0x0],\n        'cols': 0x28,\n        'text': _0x5cd8d5[0x1]\n    })))['appendTo']('body')\n])('\\x0a1234\\x0a150\\x0a100\\x0a');", "test_cases": [["1234\n150\n100", "84"], ["1000\n108\n108", "28"], ["579\n123\n456", "0"], ["7477\n549\n593", "405"]], "original": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\n\nfunction Main(input){\n\tinput = [].concat(...input.split(BKRT).map(a=>a.split(SPAC)));\n  const strShift = ()=>input.shift();\n  const intShift = ()=>~~input.shift();\n  \n  return ~~(intShift()-intShift())%intShift();\n}\n\n// If you are interested in the algorithms I used, \n// there is no need to read down from this line.\n\n((b,c,d)=>\"undefined\"!=typeof require?console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"))):[b=b.split(\"\\n\").slice(1,-1).join(\"\\n\"),c=function(){try{return Main(b)}catch(f){return f.stack||f.message}}(),d=typeof c,\"string\"==d||(c=JSON.stringify(c)),$(\"<form>\").append([[10,b],0,[1,d],0,[10,c]].map(f=>$(f?\"<textarea>\":\"<br>\",f&&{rows:f[0],cols:40,text:f[1]}))).appendTo(\"body\")])(`\n1234\n150\n100\n`);", "language": "JavaScript"}
{"filename": "p03565_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3189eb) {\n    _0x3189eb = _0x3189eb['split'](/\\n/);\n    let _0x27a542 = _0x3189eb[0x0]['split']('');\n    const _0x994153 = _0x3189eb[0x1]['split']('');\n    const _0x3f5b1a = 'UNRESTORABLE';\n    for (let _0xf8959a = _0x27a542['length'] - _0x994153['length']; _0xf8959a >= 0x0; _0xf8959a--) {\n        let _0x3c4168 = 0x0;\n        for (let _0x3f2d88 = 0x0; _0x3f2d88 < _0x994153['length']; _0x3f2d88++) {\n            if (_0x27a542[_0xf8959a + _0x3f2d88] == _0x994153[_0x3f2d88] || _0x27a542[_0xf8959a + _0x3f2d88] == '?') {\n            } else {\n                _0x3c4168++;\n                continue;\n            }\n        }\n        if (_0x3c4168 > 0x0)\n            continue;\n        for (let _0x2b8081 = 0x0; _0x2b8081 < _0x994153['length']; _0x2b8081++) {\n            _0x27a542[_0xf8959a + _0x2b8081] = _0x994153[_0x2b8081];\n        }\n        for (let _0x261055 = 0x0; _0x261055 < _0x27a542['length']; _0x261055++) {\n            _0x27a542[_0x261055] = _0x27a542[_0x261055] == '?' ? 'a' : _0x27a542[_0x261055];\n        }\n        console['log'](_0x27a542 = _0x27a542['join'](''));\n        return;\n    }\n    console['log'](_0x3f5b1a);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["?tc????\ncoder", "atcoder"], ["??p??d??\nabc", "UNRESTORABLE"]], "original": "\"use strict\"\n\nfunction main(input) {\n  input = input.split(/\\n/)\n  let S = input[0].split(\"\")\n  const T = input[1].split(\"\")\n  const us = \"UNRESTORABLE\"\n  // if (S.length < T.length) {\n  //   console.log(us)\n  //   return\n  // } else {\n  for (let i = S.length - T.length; i >= 0; i--) {\n    //\n    let x = 0\n    for (let j = 0; j < T.length; j++) {\n      //Tの区間の中で合致するかどうか\n      if (S[i + j] == T[j] || S[i + j] == \"?\") {\n        //この文字は合致、または?だからパス\n      } else {\n        //合致しない＞この区間は合致しない\n        x++\n        continue\n      }\n      //\n    }\n    //合致しなかったら次のforへ、合致したら次のステップへ\n    if (x > 0) continue\n\n    //Tで埋める\n    for (let k = 0; k < T.length; k++) {\n      S[i + k] = T[k]\n    }\n    //残りの?をaに変換 <todo> : 正規表現などで\n    // S = S.replace(/(.+)/, \"a\")\n    for (let i = 0; i < S.length; i++) {\n      S[i] = S[i] == \"?\" ? \"a\" : S[i]\n    }\n    console.log((S = S.join(\"\")))\n    return\n  }\n  // }\n  //\n  console.log(us)\n  //\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript"}
{"filename": "p03605_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar g_input = '';\nprocess['stdin']['on']('data', function (_0x1959a0) {\n    g_input += _0x1959a0;\n});\nprocess['stdin']['on']('end', function () {\n    Main(g_input['split'](/\\r?\\n/));\n});\nfunction Main(_0x51445c) {\n    if (_0x51445c[0x0][0x0] === '9' || _0x51445c[0x0][0x1] === '9') {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n    return 0x0;\n}", "test_cases": [["29", "Yes"], ["72", "No"], ["91", "Yes"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\n\nprocess.stdin.on('end', function() {\n    Main(g_input.split(/\\r?\\n/));\n});\n\nfunction Main(input) {\n\n    if (input[0][0] === '9' || input[0][1] === '9') {\n        console.log('Yes');\n    }\n    else {\n        console.log('No');\n    }\n\n    return 0;\n}\n\n", "language": "JavaScript"}
{"filename": "p03643_1", "type": "JavaScript", "obfuscated": "function Main(_0x2480f3) {\n    console['log']('ABC' + _0x2480f3);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["100", "ABC100"], ["425", "ABC425"], ["999", "ABC999"]], "original": "function Main(input) {\n  console.log('ABC' + input);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03658_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x184c70 => {\n    let _0x520448 = _0x184c70['trim']()['split']('\\x0a');\n    let _0x39fe09 = Number(_0x520448[0x0]['split']('\\x20')[0x0]);\n    let _0x3aedb7 = Number(_0x520448[0x0]['split']('\\x20')[0x1]);\n    let _0xf89770 = [];\n    for (let _0x3f5132 = 0x0; _0x3f5132 < _0x39fe09; _0x3f5132++) {\n        _0xf89770['push'](_0x520448[0x1]['split']('\\x20')[_0x3f5132]);\n    }\n    const _0x1fe480 = (_0x24899f, _0x15148a) => {\n        return _0x15148a - _0x24899f;\n    };\n    _0xf89770['sort'](_0x1fe480);\n    let _0xe39871 = 0x0;\n    for (let _0x41ec35 = 0x0; _0x41ec35 < _0x3aedb7; _0x41ec35++) {\n        _0xe39871 += Number(_0xf89770[_0x41ec35]);\n    }\n    console['log'](_0xe39871);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n1 2 3 4 5", "12"], ["15 14\n50 26 27 21 41 7 42 35 7 5 5 36 39 1 45", "386"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0].split(' ')[0]);\n   let K = Number(xs[0].split(' ')[1]);\n   let l = [];\n   for(let i=0; i<N; i++){\n   l.push(xs[1].split(' ')[i]);\n   }\n   const compare = (b, a)=>{ //関数名は何でもOK\n   return a - b;  //a - b 昇順 b - a 降順\n   }\n   l.sort(compare);\n   \n   let ans = 0;\n   for(let i=0; i<K; i++){\n     ans += Number(l[i]);\n   }  \n   console.log(ans);\n\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p03745_1", "type": "JavaScript", "obfuscated": "(function (_0x50d314) {\n    input = _0x50d314['split']('\\x0a');\n    var _0x115321 = parseInt(input[0x0], 0xa);\n    var _0x361161 = input[0x1]['split']('\\x20');\n    var _0x4cc3b0 = 0x1;\n    var _0x2213cf = ![];\n    var _0x51ff3e = ![];\n    for (var _0x5c14aa = 0x0; _0x5c14aa < _0x115321 - 0x1; _0x5c14aa++) {\n        if (_0x361161[_0x5c14aa] < _0x361161[_0x5c14aa + 0x1]) {\n            _0x2213cf = !![];\n        }\n        if (_0x361161[_0x5c14aa] > _0x361161[_0x5c14aa + 0x1]) {\n            _0x51ff3e = !![];\n        }\n        if (_0x2213cf && _0x51ff3e) {\n            _0x2213cf = _0x51ff3e = ![];\n            _0x4cc3b0++;\n        }\n    }\n    console['log']('%d', _0x4cc3b0);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["6\n1 2 3 2 2 1", "2"], ["9\n1 2 1 2 1 2 1 2 1", "5"], ["7\n1 2 3 2 1 999999999 1000000000", "3"]], "original": "(function(stdin){\n  input = stdin.split(\"\\n\");\n  var n = parseInt(input[0], 10);\n  var a = input[1].split(\" \");\n\n  var ans = 1;\n  var up = false;\n  var down = false;\n  for (var i = 0; i < n - 1; i++) {\n    if (a[i] < a[i + 1]) {\n      up = true;\n    }\n\n    if (a[i] > a[i + 1]) {\n      down = true;\n    }\n\n    if (up && down) {\n      up = down = false;\n      ans++;\n    }\n  }\n\n  console.log(\"%d\", ans);\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03999_1", "type": "JavaScript", "obfuscated": "function Main(_0x2f6beb) {\n    const _0x447165 = _0x2f6beb['length'] - 0x1;\n    const _0x55730d = _0x2f6beb['split']('')['map'](_0xbb8c1f => parseInt(_0xbb8c1f));\n    var _0x40bbf2 = 0x0;\n    for (var _0x21734b = 0x0; _0x21734b < 0x1 << _0x447165; _0x21734b++) {\n        var _0x4539d8 = 0x0;\n        for (var _0x5238b8 = 0x0; _0x5238b8 < _0x447165; _0x5238b8++) {\n            _0x4539d8 += _0x55730d[_0x5238b8];\n            if (_0x21734b & 0x1 << _0x5238b8) {\n                _0x40bbf2 += _0x4539d8;\n                _0x4539d8 = 0x0;\n            } else\n                _0x4539d8 *= 0xa;\n        }\n        _0x40bbf2 += _0x4539d8 + _0x55730d[_0x447165];\n    }\n    console['log'](_0x40bbf2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["125", "176"], ["9999999999", "12656242944"]], "original": "function Main(s) {\n  const sl = s.length - 1;\n  const sa = s.split(\"\").map(a => parseInt(a));\n  var ans = 0;\n  for(var i = 0; i < 1 << sl; i++){\n    var b = 0;\n    for(var j = 0; j < sl; j++){\n      b += sa[j];\n      if(i & 1 << j){\n        ans += b;\n        b = 0;\n      }\n      else b *= 10;\n    }\n    ans += b + sa[sl];\n }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p00023_1", "type": "JavaScript", "obfuscated": "(function (_0x28d12d) {\n    var _0x5b7875 = _0x28d12d['replace'](/\\n$/, '')['split']('\\x0a');\n    var _0x4d7ee0 = Number(_0x5b7875['shift']());\n    for (var _0x5a9ed1 = 0x0; _0x5a9ed1 < _0x4d7ee0; _0x5a9ed1++) {\n        var _0x4fce1a = _0x5b7875['shift']()['split']('\\x20')['map'](Number);\n        var _0xb904bf = _0x4fce1a['shift']();\n        var _0x5c3fad = _0x4fce1a['shift']();\n        var _0xe4fb71 = _0x4fce1a['shift']();\n        var _0xf97368 = _0x4fce1a['shift']();\n        var _0x47b4a7 = _0x4fce1a['shift']();\n        var _0x53d8c4 = _0x4fce1a['shift']();\n        var _0x46ff00 = Math['sqrt'](Math['pow'](_0xf97368 - _0xb904bf, 0x2) + Math['pow'](_0x47b4a7 - _0x5c3fad, 0x2));\n        if (_0xe4fb71 > _0x46ff00 + _0x53d8c4) {\n            console['log'](0x2);\n        } else if (_0x53d8c4 > _0x46ff00 + _0xe4fb71) {\n            console['log'](-0x2);\n        } else if (_0x46ff00 < _0xe4fb71 + _0x53d8c4) {\n            console['log'](0x1);\n        } else {\n            console['log'](0x0);\n        }\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2\n0.0 0.0 5.0 0.0 0.0 4.0\n0.0 0.0 2.0 4.1 0.0 2.0", "2\n0"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var args = p.shift().split(' ').map(Number);\n    var xa = args.shift();\n    var ya = args.shift();\n    var ra = args.shift();\n    var xb = args.shift();\n    var yb = args.shift();\n    var rb = args.shift();\n    var d = Math.sqrt(Math.pow(xb - xa, 2) + Math.pow(yb - ya, 2));\n\n    if (ra > d + rb) {\n      console.log(2);\n    } else if (rb > d + ra) {\n      console.log(-2);\n    } else if (d < ra + rb) {\n      console.log(1);\n    } else {\n      console.log(0);\n    }\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p01101_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['trim']()['split']('\\x0a');\nwhile (line = lines['shift']()) {\n    const [n, max] = line['split']('\\x20')['map'](Number);\n    if (n === 0x0 && max === 0x0) {\n        break;\n    }\n    const prices = lines['shift']()['split']('\\x20')['map'](Number);\n    const allSum = [];\n    prices['map']((_0x8aa1da, _0x664099) => {\n        prices['map']((_0x35742b, _0x339f24) => {\n            if (_0x664099 !== _0x339f24) {\n                const _0x14f7e0 = _0x8aa1da + _0x35742b;\n                if (_0x14f7e0 <= max) {\n                    allSum['push'](_0x14f7e0);\n                }\n            }\n        });\n    });\n    const answer = allSum['sort']((_0x2bcc6f, _0x2b58ce) => _0x2b58ce - _0x2bcc6f)[0x0];\n    if (answer) {\n        console['log'](answer);\n        continue;\n    }\n    console['log']('NONE');\n}", "test_cases": [["3 45\n10 20 30\n6 10\n1 2 5 8 9 11\n7 100\n11 34 83 47 59 29 70\n4 100\n80 70 60 50\n4 20\n10 5 10 16\n0 0", "40\n10\n99\nNONE\n20"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst lines = input.trim().split('\\n');\n\nwhile (line = lines.shift()) {\n\tconst [n, max] = line.split(' ').map(Number);\n\n\tif (n === 0 && max === 0) {break;}\n\n\tconst prices = lines.shift().split(' ').map(Number);\n\n\tconst allSum = [];\n\n\tprices.map((priceA, indexA) => {\n\t\t\tprices.map((priceB, indexB) => {\n\t\t\t\tif (indexA !== indexB) {\n\t\t\t\t\tconst sum = priceA + priceB;\n\n\t\t\t\t\tif(sum <= max) {\n\t\t\t\t\t\tallSum.push(sum);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t);\n\n\tconst answer = allSum.sort((a,b) => b - a)[0];\n\n\tif (answer) {\n\t\tconsole.log(answer);\n\t\tcontinue;\n\t}\n\n\tconsole.log('NONE');\n}\n\n", "language": "JavaScript"}
{"filename": "p02256_1", "type": "JavaScript", "obfuscated": "function Main(_0x5c7202) {\n    var [_0x1ad3eb, _0x3ca7f1] = _0x5c7202['split']('\\x20')['map'](Number);\n    if (_0x3ca7f1 > _0x1ad3eb)\n        [_0x1ad3eb, _0x3ca7f1] = [\n            _0x3ca7f1,\n            _0x1ad3eb\n        ];\n    var _0x38de01;\n    do {\n        _0x38de01 = _0x1ad3eb % _0x3ca7f1;\n        _0x1ad3eb = _0x3ca7f1;\n        _0x3ca7f1 = _0x38de01;\n    } while (_0x38de01);\n    console['log'](_0x1ad3eb);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["54 20", "2"], ["147 105", "21"]], "original": "function Main(input) {\n  var [a, b] = input.split(\" \").map(Number);\n  if(b > a) [a, b] = [b, a];\n  var r;\n  do {\n    r = a % b;\n    a = b;\n    b = r;\n  } while(r)\n  console.log(a);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p02390_1", "type": "JavaScript", "obfuscated": "var x = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nx = parseInt(x, 0xa);\nvar h = Math['floor'](x / 0xe10);\nvar m = Math['floor'](x % 0xe10 / 0x3c);\nvar s = x % 0xe10 % 0x3c;\nconsole['log'](h + ':' + m + ':' + s);", "test_cases": [["46979", "13:2:59"]], "original": "var x = require('fs').readFileSync('/dev/stdin', 'utf8');\nx = parseInt(x, 10)\nvar h = Math.floor(x / 3600)\nvar m = Math.floor((x % 3600) / 60)\nvar s = x % 3600 % 60;\nconsole.log(h + \":\" + m + \":\" + s);\n", "language": "JavaScript"}
{"filename": "p02570_1", "type": "JavaScript", "obfuscated": "function Main(_0x26cd35) {\n    const [_0x2eb6a9] = _0x26cd35['split']('\\x0a');\n    const [_0x5cf2c9, _0x308a80, _0x2259cf] = toNumArray(_0x2eb6a9);\n    let _0x1dac39 = _0x308a80 * _0x2259cf >= _0x5cf2c9;\n    console['log'](_0x1dac39 ? 'Yes' : 'No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction toNumArray(_0x1cb399, _0xbe8472 = '\\x20') {\n    return _0x1cb399['split'](_0xbe8472)['map'](_0xe752b5 => parseInt(_0xe752b5, 0xa));\n}\nfunction toBitIntArray(_0xc1fe3, _0x118944 = '\\x20') {\n    return _0xc1fe3['split'](_0x118944)['map'](_0x55cf18 => BigInt(_0x55cf18));\n}\nfunction toMatrix(_0x5a7bc6, _0x14f52f = '\\x20') {\n    const _0x41c8a0 = _0x5a7bc6['map'](_0x462c60 => _0x462c60['split'](_0x14f52f));\n    return _0x41c8a0;\n}\nfunction sum(_0x3ac3ef) {\n    return _0x3ac3ef['reduce']((_0x14f8a4, _0x251090) => _0x14f8a4 + _0x251090);\n}", "test_cases": [["1000 15 80", "Yes"], ["2000 20 100", "Yes"], ["10000 1 1", "No"]], "original": "/**\n * @param {String} raw_input 入力\n */\nfunction Main(raw_input) {\n\tconst [line] = raw_input.split(\"\\n\");\n\tconst [ d, t, s ] = toNumArray(line);\n\t\n\tlet isYes = t * s >= d;\n\tconsole.log(isYes ? 'Yes': 'No');\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n////////// ユーティリティ関数\n\n/**\n * 文字列を数値配列\n * @param {String} str 文字列\n */\nfunction toNumArray(str, delimitor = ' ') {\n\treturn str.split(delimitor).map(s => parseInt(s, 10));\n}\n\n/**\n * 文字列をVigInt配列に変換する\n * @param {String} str 文字列\n */\nfunction toBitIntArray(str, delimitor = ' ') {\n\treturn str.split(delimitor).map(s => BigInt(s));\n}\n\n/**\n * 2次元配列を返す\n * @param {Array<String>} array 1次元の文字列配列\n * @param {String} delimitor デリミタ\n */\nfunction toMatrix(array, delimitor = ' ') {\n\tconst result = array.map(v => v.split(delimitor));\n\treturn result;\n}\n\n/**\n * 合計を出す\n * @param {Array<Number>} n 数値配列\n */\nfunction sum(n) {\n\treturn n.reduce((a, b) => a + b);\n}", "language": "JavaScript"}
{"filename": "p02843_1", "type": "JavaScript", "obfuscated": "function Main(_0x5eaa15) {\n    const _0x45d637 = _0x5eaa15['split']('\\x0a')[0x0];\n    var _0x232bc2 = 0x0;\n    if (_0x45d637 >= 0x9dd) {\n        _0x232bc2 = 0x1;\n        console['log'](_0x232bc2);\n    } else {\n        for (var _0x59d767 = 0x1; _0x59d767 <= 0x19; _0x59d767++) {\n            if (_0x45d637 >= _0x59d767 * 0x65 && _0x45d637 <= _0x59d767 * 0x69) {\n                _0x232bc2 = 0x1;\n                break;\n            }\n        }\n    }\n    console['log'](_0x232bc2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["615", "1"], ["217", "0"]], "original": "function Main(input) {\n    const n = input.split(\"\\n\")[0];\n    var ans = 0 \n    if (n >= 2525){\n        ans = 1\n        console.log(ans);\n    } else {\n        for(var i = 1; i <= 25; i++){\n            if (n >= i * 101 && n <= i* 105) {\n                ans = 1\n                break;\n            }\n        }\n    }\n    console.log(ans)\n    }    \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  ", "language": "JavaScript"}
{"filename": "p02859_1", "type": "JavaScript", "obfuscated": "console['log'](Math['pow'](parseInt(require('fs')['readFileSync']('/dev/stdin', 'utf8'), 0xa), 0x2));", "test_cases": [["2", "4"], ["100", "10000"]], "original": "console.log(Math.pow(parseInt(require('fs').readFileSync('/dev/stdin','utf8'),10),2))", "language": "JavaScript"}
{"filename": "p02860_1", "type": "JavaScript", "obfuscated": "function Main(_0x21487e) {\n    var _0x1921d7 = _0x21487e['split']('\\x0a');\n    var _0x4a8643 = parseInt(_0x1921d7[0x0]) / 0x2;\n    var _0x31f777 = [];\n    for (let _0x40218e = 0x0; _0x40218e < _0x1921d7[0x1]['length']; _0x40218e += _0x4a8643) {\n        _0x31f777['push'](_0x1921d7[0x1]['slice'](_0x40218e, _0x40218e + _0x4a8643));\n    }\n    if (_0x31f777[0x0] == _0x31f777[0x1]) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\nabcabc", "Yes"], ["6\nabcadc", "No"], ["1\nz", "No"]], "original": "function Main(input) {\n    var data = input.split(\"\\n\")\n    var split = parseInt(data[0])/2;\n\tvar cdn = [];\n\tfor (let i = 0; i < data[1].length; i+=split) {\n    \tcdn.push(data[1].slice(i, i+split));\n\t}\n\tif(cdn[0]==cdn[1]) {\n\t\tconsole.log('Yes');\n\t}else{\n\t\tconsole.log('No');\n\t}\n}\n\n// Don't edit this line!\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02951_1", "type": "JavaScript", "obfuscated": "function Main(_0x4e2303) {\n    var _0x1b0e89, _0x4d4d58, _0xdcc36f;\n    _0x1b0e89 = Number(_0x4e2303['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    _0x4d4d58 = Number(_0x4e2303['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    _0xdcc36f = Number(_0x4e2303['split']('\\x0a')[0x0]['split']('\\x20')[0x2]);\n    console['log'](_0xdcc36f - (_0x1b0e89 - _0x4d4d58) > 0x0 ? _0xdcc36f - (_0x1b0e89 - _0x4d4d58) : 0x0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 4 3", "1"], ["8 3 9", "4"], ["12 3 7", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var a,b,c;\n  a = Number(input.split('\\n')[0].split(' ')[0]);\n  b = Number(input.split('\\n')[0].split(' ')[1]);\n  c = Number(input.split('\\n')[0].split(' ')[2]);\n  console.log(c - (a - b) > 0 ? c - (a - b) : 0);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03006_1", "type": "JavaScript", "obfuscated": "function Main(_0x475026) {\n    _0x475026 = _0x475026['split']('\\x0a');\n    const _0x321a98 = +_0x475026[0x0];\n    if (_0x321a98 <= 0x2) {\n        console['log'](0x1);\n        return;\n    }\n    const _0x5409c9 = _0x475026['slice'](0x1)['map'](_0x283641 => _0x283641['split']('\\x20')['map'](_0x1c44df => +_0x1c44df));\n    const _0x4a4e02 = {};\n    _0x5409c9['forEach'](_0x3fa8ad => {\n        _0x5409c9['forEach'](_0x257519 => {\n            if (_0x3fa8ad === _0x257519)\n                return;\n            const _0x5ba09a = [\n                _0x257519[0x0] - _0x3fa8ad[0x0],\n                _0x257519[0x1] - _0x3fa8ad[0x1]\n            ];\n            const _0x2fd296 = _0x5ba09a['join']('_');\n            _0x4a4e02[_0x2fd296] = _0x4a4e02[_0x2fd296] == null ? 0x1 : _0x4a4e02[_0x2fd296] + 0x1;\n        });\n    });\n    const _0x5700bc = Object['keys'](_0x4a4e02)['reduce']((_0x45fe5d, _0x226bd7) => {\n        const _0x59ca07 = _0x4a4e02[_0x226bd7];\n        return _0x59ca07 > _0x45fe5d[0x0] ? [\n            _0x59ca07,\n            _0x226bd7\n        ] : [\n            _0x45fe5d[0x0],\n            _0x45fe5d[0x1]\n        ];\n    }, [\n        0x0,\n        ''\n    ]);\n    console['log'](0x1 + (_0x321a98 - 0x1) - _0x5700bc[0x0]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 1\n2 2", "1"], ["3\n1 4\n4 6\n7 8", "1"], ["4\n1 1\n1 2\n2 1\n2 2", "2"]], "original": "function Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    const n = +input[0];\n  \n    if (n <= 2) {\n      console.log(1);\n      return;\n    }\n  \n    const xy = input.slice(1).map(s => s.split(' ').map(n => +n));\n    // [[x, y],[x, y],[]]\n  \n    const map = {};\n    xy.forEach(a => {\n      xy.forEach(b => {\n        if (a === b) return; // 自分自身の場合\n        \n        const vec = [b[0] - a[0], b[1] - a[1]];\n        const m = vec.join('_');\n        map[m] = map[m] == null ? 1 : map[m] + 1;\n      });\n    });\n\n\tconst res = Object.keys(map).reduce((r, xystr) => {\n\t\tconst count = map[xystr];\n        return count > r[0] ? [count, xystr] : [r[0], r[1]];\n    }, [0, '']);\n  \t\n//    const pq = res[1];\n    \n    \n    console.log(1 + (n - 1) - res[0]);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03164_1", "type": "JavaScript", "obfuscated": "var MAX_VALUE = 0x3e8;\nvar inputRaw = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar rows = inputRaw['trim']()['split']('\\x0a');\nvar row1 = rows[0x0]['split']('\\x20')['map'](Number);\nvar N = row1[0x0];\nvar W = row1[0x1];\nvar list = rows['slice'](0x1)['map'](_0x15eb61 => _0x15eb61['split']('\\x20')['map'](Number));\nvar dp = Array['from']({ 'length': N + 0x1 }, _0x77107f => Array(N * MAX_VALUE + 0x1)['fill'](0x0));\ndp[0x0] = Array(N * MAX_VALUE + 0x1)['fill'](Infinity);\ndp[0x0][0x0] = 0x0;\nfunction solve() {\n    for (var _0x52637d = 0x0; _0x52637d < N; _0x52637d++) {\n        for (var _0x4eb5be = 0x0; _0x4eb5be <= N * MAX_VALUE; _0x4eb5be++) {\n            if (list[_0x52637d][0x1] <= _0x4eb5be) {\n                var _0xfd7733 = dp[_0x52637d][_0x4eb5be - list[_0x52637d][0x1]] + list[_0x52637d][0x0];\n                var _0x39dc4f = dp[_0x52637d][_0x4eb5be];\n                dp[_0x52637d + 0x1][_0x4eb5be] = Math['min'](_0xfd7733, _0x39dc4f);\n            } else {\n                dp[_0x52637d + 0x1][_0x4eb5be] = dp[_0x52637d][_0x4eb5be];\n            }\n        }\n    }\n    var _0x4092e9 = 0x0;\n    for (var _0x52637d = 0x0; _0x52637d <= N * MAX_VALUE; _0x52637d++)\n        if (dp[N][_0x52637d] <= W)\n            _0x4092e9 = _0x52637d;\n    return _0x4092e9;\n}\nconsole['log'](solve());", "test_cases": [["3 8\n3 30\n4 50\n5 60", "90"], ["1 1000000000\n1000000000 10", "10"], ["6 15\n6 5\n5 6\n6 4\n6 6\n3 5\n7 2", "17"]], "original": "var MAX_VALUE = 1000;\n\nvar inputRaw = require('fs').readFileSync('/dev/stdin', 'utf8')\nvar rows = inputRaw.trim().split('\\n');\nvar row1 = rows[0].split(' ').map(Number);\nvar N = row1[0];\nvar W = row1[1];\nvar list = rows.slice(1).map(r => r.split(' ').map(Number));\nvar dp = Array.from({ length: N + 1 }, _ => Array( N * MAX_VALUE + 1).fill(0));\ndp[0] = Array( N * MAX_VALUE + 1).fill(Infinity)\ndp[0][0] = 0;\n// console.log(dp);\n\nfunction solve() {\n\n  for (var i = 0; i < N; i++) {\n    for (var j = 0; j <= N * MAX_VALUE; j++) {\n      if (list[i][1] <= j) {\n        var a = dp[i][j - list[i][1]] + list[i][0];\n        var b = dp[i][j];\n        dp[i + 1][j] = Math.min(a, b);\n      } else {\n        dp[i + 1][j] = dp[i][j];\n      }\n    }\n  }\n\n  var result = 0;\n  for (var i = 0; i <= N * MAX_VALUE; i++) if (dp[N][i] <= W) result = i;\n  return result;\n}\n\nconsole.log(solve());\n", "language": "JavaScript"}
{"filename": "p03166_1", "type": "JavaScript", "obfuscated": "'use strict';\nconsole['log'](function (_0x5c1152) {\n    const _0x296211 = _0x5c1152['trim']()['split']('\\x0a')['map'](_0x3f2f00 => _0x3f2f00['split']('\\x20')['map'](_0x26b7e8 => _0x26b7e8 | 0x0));\n    const _0xd389e5 = _0x296211[0x0][0x0], _0x57cf6a = _0x296211[0x0][0x1];\n    const _0x38829e = [], _0x58114e = [];\n    for (let _0x3033f5 = 0x0; _0x3033f5 < _0x57cf6a; _0x3033f5++) {\n        _0x38829e['push'](_0x296211[0x1 + _0x3033f5][0x0]);\n        _0x58114e['push'](_0x296211[0x1 + _0x3033f5][0x1]);\n    }\n    const _0x1f7246 = Array(_0x57cf6a + 0x1)['fill'](0x0)['map'](_0x2ef09a => Array(_0xd389e5 + 0x1)['fill'](0x0));\n    for (let _0x31411d = 0x1; _0x31411d <= _0x57cf6a; _0x31411d++) {\n        for (let _0x38448e = 0x0; _0x38448e < _0x57cf6a; _0x38448e++) {\n            _0x1f7246[_0x31411d][_0x58114e[_0x38448e]] = Math['max'](_0x1f7246[_0x31411d][_0x58114e[_0x38448e]], _0x1f7246[_0x31411d - 0x1][_0x38829e[_0x38448e]] + 0x1);\n        }\n    }\n    return Math['max'](..._0x1f7246[_0x57cf6a])['toString']();\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4 5\n1 2\n1 3\n3 2\n2 4\n3 4", "3"], ["6 3\n2 3\n4 5\n5 6", "2"], ["5 8\n5 3\n2 3\n2 4\n5 2\n5 1\n1 4\n4 3\n1 3", "3"]], "original": "'use strict';\nconsole.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const N = tmp[0][0], M = tmp[0][1];\n  const x = [], y = [];\n  for ( let i = 0; i < M; i++ ) {\n    x.push( tmp[1+i][0] );\n    y.push( tmp[1+i][1] );\n  }\n  const dp = Array(M+1).fill(0).map(_=>Array(N+1).fill(0));\n  for ( let i = 1; i <= M; i++ ) {\n    for ( let j = 0; j < M; j++ ) {\n      dp[i][y[j]] = Math.max( dp[i][y[j]], dp[i-1][x[j]] + 1 );\n    }\n  }\n  return Math.max(...dp[M]).toString();\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03212_1", "type": "JavaScript", "obfuscated": "function f(_0x920d03, _0x4790ac, _0x23dd90, _0x392dc6) {\n    if (_0x4790ac > _0x23dd90)\n        return _0x392dc6;\n    if (_0x920d03 === 0x7)\n        _0x392dc6 += 0x1;\n    _0x392dc6 += f(_0x920d03 | 0x1, _0x4790ac * 0xa + 0x3, _0x23dd90, 0x0);\n    _0x392dc6 += f(_0x920d03 | 0x2, _0x4790ac * 0xa + 0x5, _0x23dd90, 0x0);\n    _0x392dc6 += f(_0x920d03 | 0x4, _0x4790ac * 0xa + 0x7, _0x23dd90, 0x0);\n    return _0x392dc6;\n}\nfunction Main(_0x3a1363) {\n    var _0x52d442 = parseInt(_0x3a1363);\n    console['log'](f(0x0, 0x0, _0x52d442, 0x0));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["575", "4"], ["3600", "13"], ["999999999", "26484"]], "original": "  function f(use, x, n, acc) {\n    if (x > n) return acc;\n    if (use === 0b111) acc += 1;\n    acc += f(use | 0b001, x * 10 + 3, n, 0);\n    acc += f(use | 0b010, x * 10 + 5, n, 0);\n   acc += f(use | 0b100, x * 10 + 7, n, 0);\n    return acc;\n  }\n\n  function Main(input) {\n    var n = parseInt(input);\n    console.log(f(0, 0, n, 0));\n  }\n\n  //*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\n  Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03215_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction _(_0xc4e2b8) {\n    let _0x5dfe8c = _0xc4e2b8['split']('\\x0a');\n    if (_0x5dfe8c[_0x5dfe8c['length'] - 0x1] == '')\n        _0x5dfe8c['pop']();\n    this['l'] = _0x5dfe8c;\n    this['y'] = 0x0;\n}\n_['prototype']['ints'] = function () {\n    return this['l'][this['y']++]['split']('\\x20')['map'](_0x81e09f => +_0x81e09f);\n};\n_['prototype']['intv'] = function () {\n    const _0x379be8 = this['y'];\n    this['y'] = this['l']['length'];\n    return this['l']['slice'](_0x379be8)['map'](_0x3698f7 => +_0x3698f7);\n};\n_['prototype']['strv'] = function () {\n    const _0x1d9e85 = this['y'];\n    this['y'] = this['l']['length'];\n    return this['l']['slice'](_0x1d9e85);\n};\n_['prototype']['strn'] = function (_0x34d180) {\n    const _0x198095 = this['y'];\n    this['y'] += _0x34d180;\n    return this['l']['slice'](_0x198095, _0x198095 + _0x34d180);\n};\nconst $ = new _(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\n((() => {\n    const _0x1eedea = $['ints']();\n    const _0x1926cb = _0x1eedea[0x0];\n    const _0xb8387e = _0x1eedea[0x1];\n    const _0x53802e = $['ints']();\n    const _0x4bf6ba = [];\n    for (let _0x4983e4 = 0x0; _0x4983e4 < _0x1926cb; _0x4983e4++) {\n        let _0x5eab81 = 0x0;\n        for (let _0x515398 = _0x4983e4; _0x515398 < _0x1926cb; _0x515398++) {\n            _0x5eab81 += _0x53802e[_0x515398];\n            _0x4bf6ba['push'](_0x5eab81);\n        }\n    }\n    _0x4bf6ba['sort']((_0x483e6f, _0x4c3f57) => _0x4c3f57 - _0x483e6f);\n    let _0xc23296 = 0x0;\n    for (let _0x4b984b = 0x29; _0x4b984b >= 0x0; _0x4b984b--) {\n        let _0x99b1a1 = 0x1 << _0x4b984b;\n        let _0x45c793 = _0x4bf6ba['filter'](_0x20ea68 => (_0x20ea68 & _0xc23296 + _0x99b1a1) === _0xc23296 + _0x99b1a1)['length'];\n        if (_0x45c793 >= _0xb8387e) {\n            _0xc23296 += _0x99b1a1;\n        }\n    }\n    console['log'](_0xc23296);\n})());", "test_cases": [["4 2\n2 5 2 5", "12"], ["8 4\n9 1 8 2 7 5 6 4", "32"]], "original": "'use strict'\nfunction _(s){let l=s.split('\\n');if(l[l.length-1]=='')l.pop();this.l=l;this.y=0}\n_.prototype.ints = function(){return this.l[this.y++].split(' ').map(v=>+v)}\n_.prototype.intv = function(){const y=this.y;this.y=this.l.length;return this.l.slice(y).map(v=>+v)}\n_.prototype.strv = function(){const y=this.y;this.y=this.l.length;return this.l.slice(y)}\n_.prototype.strn = function(n){const y=this.y;this.y+=n;return this.l.slice(y,y+n)}\nconst $ = new _(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n(()=>{\n\nconst nk = $.ints()\nconst n = nk[0]\nconst k = nk[1]\nconst a = $.ints()\n\nconst rr = []\nfor(let i=0;i<n;i++){\n    let s = 0;\n    for(let j=i;j<n;j++){\n        s+=a[j]\n        rr.push(s)\n    }\n}\nrr.sort((a,b)=>b-a)\nlet res = 0\nfor(let d=41; d>=0; d--){\n    let border = 1 << d\n    let num = rr.filter(e=>(e&(res+border)) === (res+border)).length\n    if(num>=k){\n        res += border\n    }\n}\nconsole.log(res)\n\n\n\n\n})()", "language": "JavaScript"}
{"filename": "p03231_1", "type": "JavaScript", "obfuscated": "function toNum(_0x51db1b) {\n    return parseInt(_0x51db1b, 0xa);\n}\nfunction gcd(_0x55701e, _0x2afe5c) {\n    if (_0x55701e % _0x2afe5c === 0x0) {\n        return _0x2afe5c;\n    } else {\n        return gcd(_0x2afe5c, _0x55701e % _0x2afe5c);\n    }\n}\nfunction lcm(_0x43d85a, _0x47ad0b) {\n    return _0x43d85a * _0x47ad0b / gcd(_0x43d85a, _0x47ad0b);\n}\nfunction Main(_0x1bc270) {\n    var _0x32cb97 = toNum(_0x1bc270['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    var _0x3041b8 = toNum(_0x1bc270['split']('\\x0a')[0x0]['split']('\\x20')[0x1]);\n    var _0x401932 = _0x1bc270['split']('\\x0a')[0x1];\n    var _0x1829ab = _0x1bc270['split']('\\x0a')[0x2];\n    var _0x1b10c2 = lcm(_0x32cb97, _0x3041b8);\n    var _0x3e69da = !![];\n    var _0x44675e = [];\n    for (var _0x2cbcd9 = 0x0; _0x2cbcd9 < _0x1b10c2; _0x2cbcd9++) {\n        _0x44675e['push']('');\n    }\n    _0x44675e[0x0] = _0x401932[0x0];\n    for (var _0x2cbcd9 = 0x1; _0x2cbcd9 < _0x401932['length']; _0x2cbcd9++) {\n        _0x44675e[_0x2cbcd9 * (_0x1b10c2 / _0x32cb97)] = _0x401932[_0x2cbcd9];\n    }\n    if (_0x44675e[0x0] != _0x1829ab[0x0]) {\n        console['log']('-1');\n    } else {\n        for (var _0x2cbcd9 = 0x1; _0x2cbcd9 < _0x1829ab['length']; _0x2cbcd9++) {\n            if (_0x44675e[_0x2cbcd9 * (_0x1b10c2 / _0x3041b8)] != '' && _0x44675e[_0x2cbcd9 * (_0x1b10c2 / _0x3041b8)] != _0x1829ab[_0x2cbcd9]) {\n                console['log']('-1');\n                _0x3e69da = ![];\n                break;\n            }\n        }\n    }\n    if (_0x3e69da) {\n        console['log'](_0x1b10c2);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\nacp\nae", "6"], ["6 3\nabcdef\nabc", "-1"], ["15 9\ndnsusrayukuaiia\ndujrunuma", "45"]], "original": "function toNum(str) {\n\treturn parseInt(str, 10);\n}\n\n// 最大公約数\nfunction gcd(a, b) {\n\tif (a % b === 0) {\n\t\treturn b;\n\t} else {\n\t\treturn gcd(b, a % b);\n\t}\n}\n\n// 最小公倍数\nfunction lcm(a, b) {\n\treturn a * b / gcd(a, b);\n}\n\n// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar N = toNum(input.split('\\n')[0].split(' ')[0]);\n\tvar M = toNum(input.split('\\n')[0].split(' ')[1]);\n\tvar S = input.split('\\n')[1];\n\tvar T = input.split('\\n')[2];\n\tvar L = lcm(N, M);\n\tvar flag = true;\n\tvar X = [];\n\tfor ( var i = 0; i < L; i++) {\n\t\tX.push('');\n\t}\n\tX[0] = S[0];\n\tfor ( var i = 1; i < S.length; i++ ) {\n\t\tX[i * (L / N)] = S[i];\n\t}\n\tif ( X[0] != T[0] ) {\n\t\tconsole.log('-1');\n\t} else {\n\t\tfor (var i = 1; i < T.length; i++) {\n\t\t\tif (X[i * (L / M)] != '' && X[i * (L / M)] != T[i]) {\n\t\t\t\tconsole.log('-1');\n\t\t\t\tflag = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif ( flag ) {\n\t\tconsole.log(L);\n\t}\n}\n\n// ※この行以降は編集しない (標準入力から一度に読み込みMainを呼び出します)\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03284_1", "type": "JavaScript", "obfuscated": "function Main(_0x5e7131) {\n    var _0x43f06e = _0x5e7131['split']('\\x20')[0x0];\n    var _0x4bfe97 = _0x5e7131['split']('\\x20')[0x1];\n    _0x43f06e = parseInt(_0x43f06e, 0xa);\n    _0x4bfe97 = parseInt(_0x4bfe97, 0xa);\n    var _0x14ef93 = _0x43f06e % _0x4bfe97 === 0x0;\n    if (_0x14ef93) {\n        console['log'](0x0);\n    } else {\n        console['log'](0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 3", "1"], ["100 10", "0"], ["1 1", "0"]], "original": "function Main(input){\n  var N = input.split(\" \")[0];\n  var K = input.split(\" \")[1];\n  N = parseInt(N,10);\n  K = parseInt(K,10);\n\n  var jud = N%K === 0;\n  if(jud){\n    console.log(0);\n  }else{\n    console.log(1);\n  }\n}\n  Main(require('fs').readFileSync('/dev/stdin','utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03329_1", "type": "JavaScript", "obfuscated": "function equal(_0x116774, _0x5708f7) {\n    var _0x46af22 = Object['getOwnPropertyNames'](_0x116774);\n    var _0x304ba3 = Object['getOwnPropertyNames'](_0x5708f7);\n    if (_0x46af22['length'] != _0x304ba3['length'])\n        return ![];\n    for (var _0x3003a2 = 0x0; _0x3003a2 < _0x46af22['length']; _0x3003a2++)\n        if (_0x116774[_0x46af22[_0x3003a2]] !== _0x5708f7[_0x46af22[_0x3003a2]])\n            return ![];\n    return !![];\n}\nfunction pi(_0x5249ce) {\n    return parseInt(_0x5249ce, 0xa);\n}\nvar six = [\n    0x6,\n    0x5,\n    0x4,\n    0x3,\n    0x2,\n    0x1\n]['map'](_0x1ca1a8 => Math['pow'](0x6, _0x1ca1a8));\nvar nine = [\n    0x5,\n    0x4,\n    0x3,\n    0x2,\n    0x1\n]['map'](_0x4afbe9 => Math['pow'](0x9, _0x4afbe9));\nfunction count(_0x104dfe) {\n    if (_0x104dfe < 0x6)\n        return _0x104dfe;\n    if (_0x104dfe < 0x9)\n        return 0x1 + (_0x104dfe - 0x6);\n    return Math['min'](count(_0x104dfe - six['find'](_0x306088 => _0x306088 <= _0x104dfe)) + 0x1, count(_0x104dfe - nine['find'](_0x93657 => _0x93657 <= _0x104dfe)) + 0x1);\n}\nfunction main(_0x4f0a74) {\n    var _0xae25d3 = pi(_0x4f0a74);\n    console['log'](count(_0xae25d3));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["127", "4"], ["3", "3"], ["44852", "16"]], "original": "function equal(a, b) {\n    var aP = Object.getOwnPropertyNames(a);\n    var bP = Object.getOwnPropertyNames(b);\n    if (aP.length != bP.length)\n        return false;\n    for (var i = 0; i < aP.length; i++)\n        if (a[aP[i]] !== b[aP[i]])\n            return false;\n    return true;\n}\nfunction pi(text) {\n    return parseInt(text, 10);\n}\nvar six = [6, 5, 4, 3, 2, 1].map(_ => Math.pow(6, _));\nvar nine = [5, 4, 3, 2, 1].map(_ => Math.pow(9, _));\nfunction count(i) {\n    if (i < 6)\n        return i;\n    if (i < 9)\n        return 1 + (i - 6);\n    return Math.min(count(i - six.find(_ => _ <= i)) + 1, count(i - nine.find(_ => _ <= i)) + 1);\n}\nfunction main(input) {\n    var i = pi(input);\n    console.log(count(i));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03449_1", "type": "JavaScript", "obfuscated": "function Main(_0x12e3c9) {\n    const _0x191a17 = _0x12e3c9['trim']()['split']('\\x0a');\n    const _0x225ced = _0x191a17[0x0] - 0x0;\n    const _0x381b6 = _0x191a17[0x1]['split']('\\x20');\n    const _0x1fae06 = _0x191a17[0x2]['split']('\\x20');\n    let _0x334653 = 0x0;\n    for (let _0x306431 = 0x0; _0x306431 < _0x225ced; _0x306431++) {\n        let _0x5e0053 = _0x225ced - _0x306431 - 0x1;\n        let _0x3432c8 = 0x0;\n        for (let _0x3171da = 0x0; _0x3171da <= _0x306431; _0x3171da++) {\n            _0x3432c8 += parseInt(_0x381b6[_0x3171da]);\n        }\n        for (let _0x312364 = 0x0; _0x312364 <= _0x5e0053; _0x312364++) {\n            _0x3432c8 += parseInt(_0x1fae06[_0x306431 + _0x312364]);\n        }\n        if (_0x334653 < _0x3432c8) {\n            _0x334653 = _0x3432c8;\n        }\n    }\n    console['log'](_0x334653);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n3 2 2 4 1\n1 2 2 2 1", "14"], ["4\n1 1 1 1\n1 1 1 1", "5"], ["7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2", "29"], ["1\n2\n3", "5"]], "original": "function Main(input) {\n\tconst setting = input.trim().split('\\n')\n  const process_sum = setting[0] - 0\n  const up = setting[1].split(' ')\n  const down = setting[2].split(' ')\n\n  let answer = 0\n\n  for (let process_up = 0; process_up < process_sum; process_up++) {\n    let process_down = process_sum - process_up - 1\n    let candies = 0\n    for (let i = 0; i <= process_up; i++) {\n      candies += parseInt(up[i])\n    }\n\n    for (let i = 0; i <= process_down; i++) {\n      candies += parseInt(down[process_up + i])\n    }\n    if (answer < candies) {\n      answer = candies\n    }\n  }\n\n  console.log(answer)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03631_1", "type": "JavaScript", "obfuscated": "function Main(_0xa9924a) {\n    var _0x4ec70e = String(_0xa9924a);\n    var _0x1323d4 = 0x0;\n    if (_0x4ec70e[0x2] == _0x4ec70e[0x0]) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["575", "Yes"], ["123", "No"], ["812", "No"]], "original": "function Main(input) {\n        var tmp = String(input);\n        var truecount = 0;\n        if(tmp[2] == tmp[0]) {\n           console.log(\"Yes\");\n        } else {\n           console.log(\"No\");\n        }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03633_1", "type": "JavaScript", "obfuscated": "log = console['log'];\nvar stdin = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nvar lines = stdin['split']('\\x0a');\nvar N = lines[0x0]['split']('\\x20')['map'](Number)[0x0];\nvar T = lines['slice'](0x1)['filter'](_0x1f54b9 => _0x1f54b9 !== '')['map'](Number);\nfunction gcd(_0x20c42a, _0xc04361) {\n    if (_0xc04361 === 0x0)\n        return _0x20c42a;\n    return gcd(_0xc04361, _0x20c42a % _0xc04361);\n}\nfunction lcm(_0x585334, _0x4f078d) {\n    return _0x585334 * _0x4f078d / gcd(_0x585334, _0x4f078d);\n}\nfor (var i = 0x1; i < N; i++) {\n    T[i] = lcm(T[i], T[i - 0x1]);\n}\nlog(T[N - 0x1]);", "test_cases": [["2\n2\n3", "6"], ["5\n2\n5\n10\n1000000000000000000\n1000000000000000000", "1000000000000000000"]], "original": "log = console.log;\n\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin.split(\"\\n\");\nvar N = lines[0].split(\" \").map(Number)[0];\nvar T = lines\n  .slice(1)\n  .filter(v => v !== \"\")\n  .map(Number);\n\nfunction gcd(a,b){\n  if(b === 0) return a\n  return gcd(b,a % b)\n}\n\nfunction lcm(a,b){\n  return a * b / gcd(a,b)\n}\n\nfor(var i=1; i<N;i++){\n  T[i] = lcm(T[i],T[i-1])\n}\n\nlog(T[N-1])", "language": "JavaScript"}
{"filename": "p04011_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nfunction Main(_0x993d56) {\n    var _0x5c4dd3 = _0x993d56['split']('\\x0a');\n    var _0x4ce874 = _0x5c4dd3[0x0]['split']('\\x20');\n    var _0x771db = _0x5c4dd3[0x1]['split']('\\x20');\n    var _0x3ffa01 = _0x5c4dd3[0x2]['split']('\\x20');\n    var _0x529017 = _0x5c4dd3[0x3]['split']('\\x20');\n    var _0x2dee4a = Number(_0x4ce874[0x0]);\n    var _0x18b353 = Number(_0x771db[0x0]);\n    var _0x4e8c98 = Number(_0x3ffa01[0x0]);\n    var _0x250841 = Number(_0x529017[0x0]);\n    var _0x1b042e = 'initial_answer';\n    if (_0x2dee4a < _0x18b353)\n        console['log'](_0x4e8c98 * _0x2dee4a);\n    else\n        console['log'](_0x4e8c98 * _0x18b353 + (_0x2dee4a - _0x18b353) * _0x250841);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n3\n10000\n9000", "48000"], ["2\n3\n10000\n9000", "20000"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var arg   = input.split(\"\\n\");\n  var line0 = arg[0].split(\" \");\n  var line1 = arg[1].split(\" \");\n  var line2 = arg[2].split(\" \");\n  var line3 = arg[3].split(\" \");\n\n  var input1 = Number(line0[0]);\n  var input2 = Number(line1[0]);\n  var input3 = Number(line2[0]);\n  var input4 = Number(line3[0]);\n//  var a = input2;\n  //var b = input3;\n\n  var ans = \"initial_answer\";\n  //console.log( \"[INPUT] \"+ input1 +\" \"+ input2 +\" \"+ input3 + \" \" + input4 );\n  \n  // LOGIC //\n\n  if(input1 < input2) console.log( input3 * input1);\n  else console.log( input3 * input2 + ((input1 - input2) * input4) );\n\n\n  \n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p00003_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x4e987b) {\n    var _0x48de67 = _0x4e987b['toString']();\n    var _0x159897 = _0x48de67['split']('\\x0a');\n    _0x159897['shift']();\n    for (var _0x3c1152 in _0x159897) {\n        var _0x5dd82d = _0x159897[_0x3c1152]['split']('\\x20');\n        for (var _0x3c1152 in _0x5dd82d) {\n            _0x5dd82d[_0x3c1152] = new Number(_0x5dd82d[_0x3c1152]);\n        }\n        _0x5dd82d['sort'](function (_0x2d84cd, _0x15a3c5) {\n            if (_0x2d84cd > _0x15a3c5)\n                return -0x1;\n            if (_0x2d84cd < _0x15a3c5)\n                return 0x1;\n            return 0x0;\n        });\n        var _0x8a5479 = new Number(_0x5dd82d[0x0]) * new Number(_0x5dd82d[0x0]);\n        var _0x129054 = new Number(_0x5dd82d[0x1]) * new Number(_0x5dd82d[0x1]);\n        var _0x18d970 = new Number(_0x5dd82d[0x2]) * new Number(_0x5dd82d[0x2]);\n        var _0x17a201 = _0x129054 + _0x18d970;\n        if (_0x8a5479 === _0x17a201) {\n            console['log']('YES');\n        } else {\n            console['log']('NO');\n        }\n    }\n});", "test_cases": [["3\n4 3 5\n4 3 6\n8 8 8", "YES\nNO\nNO"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nprocess.stdin.on('data', function (chunk) {\n    var aaa = chunk.toString();\n    var line = aaa.split(\"\\n\")\n    //line.pop();\n    line.shift();\n    for(var i in line){\n        var l = line[i].split(\" \")\n        for(var i in l){\n            l[i] = new Number(l[i]);\n        }\n        l.sort(function(a,b){\n            if( a > b ) return -1;\n            if( a < b ) return 1;\n            return 0;\n        });\n        var num1 = new Number(l[0]) *new Number(l[0]);\n        var num2 = new Number(l[1])*new Number(l[1]);\n        var num3 = new Number(l[2])*new Number(l[2]);\n        var num4 = num2+num3;\n        if(num1 === num4){\n            console.log(\"YES\");\n        }else{\n            console.log(\"NO\")\n            \n        }\n    }\n});", "language": "JavaScript"}
{"filename": "p02258_1", "type": "JavaScript", "obfuscated": "function main(_0x2e8298) {\n    _0x2e8298 = _0x2e8298['split']('\\x0a');\n    var _0x2da79e = _0x2e8298['map'](function (_0x4db6bf) {\n        return parseInt(_0x4db6bf);\n    });\n    var _0x427287 = Number['MAX_VALUE'], _0x1166a1 = -Number['MAX_VALUE'];\n    var _0x18e80b = _0x2da79e[0x0];\n    for (var _0x4c21d4 = 0x1; _0x4c21d4 <= _0x18e80b - 0x1; _0x4c21d4++) {\n        if (_0x427287 >= _0x2da79e[_0x4c21d4]) {\n            _0x427287 = _0x2da79e[_0x4c21d4];\n        }\n        if (_0x2da79e[_0x4c21d4 + 0x1] - _0x427287 >= _0x1166a1) {\n            _0x1166a1 = _0x2da79e[_0x4c21d4 + 0x1] - _0x427287;\n        }\n    }\n    console['log'](_0x1166a1);\n    return _0x1166a1;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n5\n3\n1\n3\n4\n3", "3"], ["3\n4\n3\n2", "-1"]], "original": "function main(input) {\n  input = input.split(\"\\n\");\n  var values = input.map(function(v) { return parseInt(v); });\n\n  var min = Number.MAX_VALUE, val = -Number.MAX_VALUE;\n  var N = values[0];\n  for (var i = 1; i <= N-1; i++) {\n    if (min >= values[i]) {\n      min = values[i];\n    }\n    if (values[i+1] - min >= val) {\n      val = values[i+1] - min;\n    }\n  }\n  console.log(val);\n  return val;\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02415_1", "type": "JavaScript", "obfuscated": "(function (_0x507b6e) {\n    console['log'](_0x507b6e['replace'](/\\n$/, '')['split']('')['map'](function (_0xb84cc5) {\n        if (_0xb84cc5['match'](/[a-z]/)) {\n            return _0xb84cc5['toUpperCase']();\n        } else if (_0xb84cc5['match'](/[A-Z]/)) {\n            return _0xb84cc5['toLowerCase']();\n        }\n        return _0xb84cc5;\n    })['join'](''));\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["fAIR, LATER, OCCASIONALLY CLOUDY.", "Fair, later, occasionally cloudy."]], "original": "(function(input) {\n    console.log(input.replace(/\\n$/, '').split('').map(function(e) {\n        if (e.match(/[a-z]/)) {\n            return e.toUpperCase();\n        } else if (e.match(/[A-Z]/)) {\n            return e.toLowerCase();\n        }\n        return e;\n    }).join(''));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02725_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x45e872) {\n    const _0x5d7f2a = _0x45e872['split']('\\x0a')[0x0];\n    const _0x47ab11 = _0x45e872['split']('\\x0a')[0x1];\n    let _0xf7a58c = _0x47ab11['split']('\\x20');\n    const _0xfb28fb = Number(_0x5d7f2a['split']('\\x20')[0x0]);\n    const _0x54bc2d = Number(_0x5d7f2a['split']('\\x20')[0x1]);\n    let _0x116a60 = 0x0;\n    const _0x470260 = Math['floor'](_0xfb28fb / 0x2);\n    for (let _0x1a1072 = 0x0; _0x1a1072 < _0x54bc2d; _0x1a1072++) {\n        _0x116a60 += Math['abs'](0x0 - _0xf7a58c[_0x1a1072]) > Math['abs'](_0x470260 - _0xf7a58c[_0x1a1072]) ? Math['abs'](_0x470260 - _0xf7a58c[_0x1a1072]) : Math['abs'](0x0 - _0xf7a58c[_0x1a1072]);\n    }\n    console['log'](_0x116a60);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["20 3\n5 10 15", "10"], ["20 3\n0 5 15", "10"]], "original": "\"use strict\"\n// input\nfunction main(input) {\n    const args = input.split('\\n')[0];\n    const a = input.split('\\n')[1];\n    let as = a.split(' ');\n    \n    const K = Number(args.split(' ')[0]);\n    const N = Number(args.split(' ')[1]);\n    let ans = 0;\n    const kh = Math.floor(K / 2);\n    for (let i = 0; i < N; i++) {\n        ans += Math.abs(0 - as[i]) > Math.abs(kh - as[i]) ? Math.abs(kh - as[i]) : Math.abs(0 - as[i]);\n    }\n    console.log(ans);\n}\n\n// output\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02820_1", "type": "JavaScript", "obfuscated": "function Main(_0x2cd827) {\n    _0x2cd827 = _0x2cd827['split']('\\x0a');\n    var _0x3f4151 = _0x2cd827[0x0]['split']('\\x20');\n    var _0x2a9d4c = _0x3f4151[0x0] - 0x0;\n    var _0x59c2ef = _0x3f4151[0x1] - 0x0;\n    var _0x329ae2 = _0x2cd827[0x1]['split']('\\x20');\n    var _0x5d71c5 = {\n        'r': _0x329ae2[0x2] - 0x0,\n        's': _0x329ae2[0x0] - 0x0,\n        'p': _0x329ae2[0x1] - 0x0\n    };\n    var _0x441f29 = _0x2cd827[0x2];\n    var _0x33fccd = 0x0;\n    for (var _0x13c9f4 = 0x0; _0x13c9f4 < _0x2a9d4c; _0x13c9f4++) {\n        var _0x1f678a = _0x441f29[_0x13c9f4];\n        var _0x561724 = '';\n        if (_0x13c9f4 - _0x59c2ef >= 0x0) {\n            _0x561724 = _0x441f29[_0x13c9f4 - _0x59c2ef];\n        }\n        if (_0x1f678a == _0x561724) {\n            _0x441f29 = _0x441f29['slice'](0x0, _0x13c9f4) + 'B' + _0x441f29['slice'](_0x13c9f4 + 0x1);\n            continue;\n        }\n        _0x33fccd += _0x5d71c5[_0x1f678a];\n    }\n    console['log'](_0x33fccd);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2\n8 7 6\nrsrpr", "27"], ["7 1\n100 10 1\nssssppr", "211"], ["30 5\n325 234 123\nrspsspspsrpspsppprpsprpssprpsr", "4996"]], "original": "function Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  \n  //入力データ取得\n  var tmp0 = input[0].split(\" \");\n  var N = tmp0[0] - 0;\n  var K = tmp0[1] - 0;\n  var tmp1 = input[1].split(\" \");\n  \n  var point = {r:tmp1[2]-0,s:tmp1[0]-0,p:tmp1[1]-0};\n  var str = input[2];\n  var sum = 0;\n  \n  for(var i=0; i<N; i++){\n    var char = str[i];\n    var charBK = \"\";\n    if(i-K >= 0){\n      charBK = str[i-K];\n    }\n    if(char == charBK){\n      str = str.slice(0,i) + 'B' + str.slice(i+1);\n      continue;\n    }\n    sum += point[char];\n  }\n  //出力\n  console.log(sum);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02835_1", "type": "JavaScript", "obfuscated": "function Main(_0x3276ee) {\n    _0x3276ee = _0x3276ee['split']('\\x20');\n    tmp = parseInt(_0x3276ee[0x0]) + parseInt(_0x3276ee[0x1]) + parseInt(_0x3276ee[0x2]);\n    if (tmp > 0x15) {\n        console['log']('bust');\n    } else {\n        console['log']('win');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 7 9", "win"], ["13 7 2", "bust"]], "original": "function Main(input){\n    input = input.split(\" \");\n    tmp = parseInt(input[0]) + parseInt(input[1]) + parseInt(input[2]);\n    if(tmp > 21){\n     console.log(\"bust\");   \n    }else{\n     console.log(\"win\");\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02837_1", "type": "JavaScript", "obfuscated": "'use strict';\nconsole['log'](function (_0x561a39) {\n    const _0x439a3a = _0x561a39['trim']()['split']('\\x0a');\n    const _0x21f97d = _0x439a3a['shift']() | 0x0;\n    const _0x4056bb = [], _0x54877a = [], _0x10a577 = [];\n    for (let _0x2f9063 = 0x0; _0x2f9063 < _0x21f97d; _0x2f9063++) {\n        _0x4056bb[_0x2f9063] = _0x439a3a['shift']() | 0x0;\n        _0x54877a[_0x2f9063] = [];\n        _0x10a577[_0x2f9063] = [];\n        for (let _0x330fbf = 0x0; _0x330fbf < _0x4056bb[_0x2f9063]; _0x330fbf++) {\n            const _0x3d8c22 = _0x439a3a[_0x330fbf]['split']('\\x20');\n            _0x54877a[_0x2f9063][_0x330fbf] = _0x3d8c22[0x0] - 0x1;\n            _0x10a577[_0x2f9063][_0x330fbf] = _0x3d8c22[0x1] | 0x0;\n        }\n        _0x439a3a['splice'](0x0, _0x4056bb[_0x2f9063]);\n    }\n    let _0x220ffb = 0x0;\n    _0x3c75cf:\n        for (let _0x2eea8e = 0x1; _0x2eea8e < 0x1 << _0x21f97d; _0x2eea8e++) {\n            let _0x19b912 = 0x0;\n            for (let _0x53776f = 0x0; _0x53776f < _0x21f97d; _0x53776f++) {\n                if (!(_0x2eea8e & 0x1 << _0x53776f))\n                    continue;\n                _0x19b912++;\n                for (let _0x19f46d = 0x0; _0x19f46d < _0x4056bb[_0x53776f]; _0x19f46d++) {\n                    const _0x5e941e = _0x54877a[_0x53776f][_0x19f46d], _0xe44b71 = _0x10a577[_0x53776f][_0x19f46d];\n                    const _0xd4ef02 = _0x2eea8e & 0x1 << _0x5e941e;\n                    if (_0xd4ef02 !== _0xe44b71 << _0x5e941e)\n                        continue _0x3c75cf;\n                }\n            }\n            if (_0x19b912 > _0x220ffb)\n                _0x220ffb = _0x19b912;\n        }\n    return _0x220ffb;\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n1\n2 1\n1\n1 1\n1\n2 0", "2"], ["3\n2\n2 1\n3 0\n2\n3 1\n1 0\n2\n1 1\n2 0", "0"], ["2\n1\n2 0\n1\n1 0", "1"]], "original": "'use strict';\nconsole.log(function(args){\n  const _tmp = args.trim().split('\\n');\n  const N = _tmp.shift()|0;\n  const A = [], x = [], y = [];\n  for ( let i = 0; i < N; i++ ) {\n    A[i] = _tmp.shift()|0;\n    x[i] = []; y[i] = [];\n    for ( let j = 0; j < A[i]; j++ ) {\n      const xy = _tmp[j].split(' ');\n      x[i][j] = xy[0]-1; y[i][j] = xy[1]|0;\n    }\n    _tmp.splice(0,A[i]);\n  }\n  let K = 0;\n  TEST: for ( let honest = 1; honest < 1<<N; honest++ ) {\n    let k = 0;\n    for ( let i = 0; i < N; i++ ) {\n        if ( !(honest&1<<i) ) continue;\n      k++;\n      for ( let j = 0; j < A[i]; j++ ) {\n        const Xij = x[i][j], Yij = y[i][j];\n        const target = honest&(1<<Xij);\n        if ( target!==(Yij<<Xij) ) continue TEST;\n      }\n    }\n    if ( k > K ) K = k;\n  }\n  return K;\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03129_1", "type": "JavaScript", "obfuscated": "function main(_0x3add26) {\n    _0x3add26 = _0x3add26['split']('\\x0a')[0x0]['split']('\\x20');\n    var _0x2ebe2f = Number(_0x3add26[0x0]);\n    var _0x507c89 = Number(_0x3add26[0x1]);\n    var _0x106a3c = 0x0;\n    for (var _0x35229e = 0x1; _0x35229e <= _0x2ebe2f; _0x35229e += 0x2) {\n        _0x106a3c++;\n    }\n    if (_0x507c89 > _0x106a3c) {\n        console['log']('NO');\n    } else {\n        console['log']('YES');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2", "YES"], ["5 5", "NO"], ["31 10", "YES"], ["10 90", "NO"]], "original": "function main(arg) {\n\targ = arg.split(\"\\n\")[0].split(\" \")\n\tvar N = Number(arg[0])\n\tvar K = Number(arg[1])\n\tvar count = 0\n\tfor (var i = 1; i <= N; i+=2 ) {\n\t\tcount++\n\t}\n\tif (K > count) {\n\t\tconsole.log(\"NO\")\n\t} else {\n\t\tconsole.log(\"YES\")\n\t}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03260_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['split'](/\\s/);\nconst A = Number(input[0x0]);\nconst B = Number(input[0x1]);\nvar result = A === 0x2 || B === 0x2 ? 'No' : 'Yes';\nconsole['log'](result);", "test_cases": [["3 1", "Yes"], ["1 2", "No"], ["2 2", "No"]], "original": "var input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\ninput = input.split(/\\s/);\n\nconst A = Number(input[0]);\nconst B = Number(input[1]);\n\nvar result = (A === 2 || B === 2) ? \"No\" : \"Yes\";\n\nconsole.log(result);\n", "language": "JavaScript"}
{"filename": "p03283_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2a7ee3) {\n    let _0xc7420e = _0x2a7ee3['split']('\\x0a');\n    let _0x570727 = _0xc7420e['shift']()['split'](/\\s/)['map'](_0x14d3f5 => _0x14d3f5 - 0x0);\n    let _0x521163 = _0x570727[0x0], _0x13aed6 = _0x570727[0x1], _0xd2145c = _0x570727[0x2];\n    let _0xd020eb = new Array(_0x521163 + 0x1)['fill'](0x0)['map'](() => new Array(_0x521163 + 0x1)['fill'](0x0));\n    for (let _0xe14308 = 0x0; _0xe14308 < _0x13aed6; _0xe14308++) {\n        let _0x5bad27 = _0xc7420e['shift']()['split'](/\\s/)['map'](_0x17ae45 => _0x17ae45 - 0x0);\n        _0xd020eb[_0x5bad27[0x0]][_0x5bad27[0x1]] += 0x1;\n    }\n    for (let _0x5a2335 = 0x1; _0x5a2335 <= _0x521163; _0x5a2335++) {\n        for (let _0x3402ac = 0x1; _0x3402ac <= _0x521163; _0x3402ac++) {\n            _0xd020eb[_0x5a2335][_0x3402ac] += _0xd020eb[_0x5a2335 - 0x1][_0x3402ac];\n            _0xd020eb[_0x5a2335][_0x3402ac] += _0xd020eb[_0x5a2335][_0x3402ac - 0x1];\n            _0xd020eb[_0x5a2335][_0x3402ac] -= _0xd020eb[_0x5a2335 - 0x1][_0x3402ac - 0x1];\n        }\n    }\n    for (let _0x33cd91 = 0x0; _0x33cd91 < _0xd2145c; _0x33cd91++) {\n        let _0x5b9dc9 = _0xc7420e['shift']()['split'](/\\s/)['map'](_0x1c7083 => _0x1c7083 - 0x0);\n        let _0x3203a1 = _0x5b9dc9[0x0], _0x44167f = _0x5b9dc9[0x1];\n        console['log'](_0xd020eb[_0x44167f][_0x44167f] - _0xd020eb[_0x3203a1 - 0x1][_0x44167f]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 1\n1 1\n1 2\n2 2\n1 2", "3"], ["10 3 2\n1 5\n2 8\n7 10\n1 7\n3 10", "1\n1"], ["10 10 10\n1 6\n2 9\n4 5\n4 7\n4 7\n5 8\n6 6\n6 7\n7 9\n10 10\n1 8\n1 9\n1 10\n2 8\n2 9\n2 10\n3 8\n3 9\n3 10\n1 10", "7\n9\n10\n6\n8\n9\n6\n7\n8\n10"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let nmq = lines.shift().split(/\\s/).map((v) => v - 0);\n    let N = nmq[0], M = nmq[1], Q = nmq[2];\n    let T = new Array(N+1).fill(0).map(() => new Array(N+1).fill(0));\n    for (let m = 0; m < M; m++) {\n        let lr = lines.shift().split(/\\s/).map((v) => v - 0);\n        T[lr[0]][lr[1]] += 1;\n    }\n    for (let p = 1; p <= N; p++) {\n        for (let q = 1; q <= N; q++) {\n            T[p][q] += T[p - 1][q];\n            T[p][q] += T[p][q - 1];\n            T[p][q] -= T[p - 1][q - 1];\n        }\n    }\n    for (let n = 0; n < Q; n++) {\n        let pq = lines.shift().split(/\\s/).map((v) => v - 0);\n        let p = pq[0], q = pq[1];\n        console.log(T[q][q] - T[p - 1][q]);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03326_1", "type": "JavaScript", "obfuscated": "function Main(_0x2ca85b) {\n    _0x2ca85b = _0x2ca85b['split']('\\x0a');\n    var _0x5a4793 = _0x2ca85b[0x0]['split']('\\x20')['map'](_0x1d5ad3 => +_0x1d5ad3);\n    var _0x4a6815 = _0x5a4793[0x1];\n    _0x5a4793 = _0x5a4793[0x0];\n    var _0x290257;\n    var _0x37b491 = Array(0x4)['fill'](0x0)['map'](_0x209d23 => Array(_0x5a4793));\n    for (var _0x3eb832 = 0x0; _0x3eb832 < _0x5a4793; _0x3eb832++) {\n        _0x290257 = _0x2ca85b[_0x3eb832 + 0x1]['split']('\\x20')['map'](_0x298f11 => +_0x298f11);\n        _0x37b491[0x0][_0x3eb832] = _0x290257[0x0] + _0x290257[0x1] + _0x290257[0x2];\n        _0x37b491[0x1][_0x3eb832] = _0x290257[0x0] + _0x290257[0x1] - _0x290257[0x2];\n        _0x37b491[0x2][_0x3eb832] = _0x290257[0x0] - _0x290257[0x1] + _0x290257[0x2];\n        _0x37b491[0x3][_0x3eb832] = -_0x290257[0x0] + _0x290257[0x1] + _0x290257[0x2];\n    }\n    var _0x478a52 = 0x0;\n    for (_0x3eb832 = 0x0; _0x3eb832 < 0x4; _0x3eb832++) {\n        _0x37b491[_0x3eb832]['sort']((_0x177c75, _0x37bc47) => _0x177c75 - _0x37bc47);\n        var _0x599a57 = 0x0;\n        for (var _0x2ffb05 = 0x0; _0x2ffb05 < _0x4a6815; _0x2ffb05++) {\n            _0x599a57 += _0x37b491[_0x3eb832][_0x2ffb05];\n        }\n        _0x478a52 = Math['max'](_0x478a52, Math['abs'](_0x599a57));\n        _0x599a57 = 0x0;\n        for (_0x2ffb05 = _0x5a4793; _0x2ffb05 > _0x5a4793 - _0x4a6815;) {\n            _0x599a57 += _0x37b491[_0x3eb832][--_0x2ffb05];\n        }\n        _0x478a52 = Math['max'](_0x478a52, Math['abs'](_0x599a57));\n    }\n    console['log'](_0x478a52);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n3 1 4\n1 5 9\n2 6 5\n3 5 8\n9 7 9", "56"], ["5 3\n1 -2 3\n-4 5 -6\n7 -8 -9\n-10 11 -12\n13 -14 15", "54"], ["10 5\n10 -80 21\n23 8 38\n-94 28 11\n-26 -2 18\n-69 72 79\n-26 -86 -54\n-72 -50 59\n21 65 -32\n40 -94 87\n-62 18 82", "638"], ["3 2\n2000000000 -9000000000 4000000000\n7000000000 -5000000000 3000000000\n6000000000 -1000000000 8000000000", "30000000000"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1];\n  n = n[0];\n  var x;\n  var a = Array(4).fill(0).map(a=>Array(n));\n  for(var i = 0; i < n; i++){\n    x = s[i+1].split(\" \").map(a=>+a);\n    a[0][i] = x[0] + x[1] + x[2];\n    a[1][i] = x[0] + x[1] - x[2];\n    a[2][i] = x[0] - x[1] + x[2];\n    a[3][i] = -x[0] + x[1] + x[2];\n  }\n  var ans = 0;\n  for(i = 0; i < 4; i++){\n    a[i].sort((a,b)=>a-b);\n    var t = 0;\n    for(var j = 0; j < m; j++){\n      t += a[i][j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n    t = 0;\n    for(j = n; j > n - m;){\n      t += a[i][--j];\n    }\n    ans = Math.max(ans, Math.abs(t));\n  }\n  \n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03433_1", "type": "JavaScript", "obfuscated": "function main(_0xc578e2) {\n    var _0x553c46 = _0xc578e2['split']('\\x0a')['map'](_0x4a3be1 => parseInt(_0x4a3be1, 0xa));\n    while (_0x553c46[0x0] > 0x1f4) {\n        _0x553c46[0x0] -= 0x1f4;\n    }\n    _0x553c46[0x0] <= _0x553c46[0x1] ? console['log']('Yes') : console['log']('No');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2018\n218", "Yes"], ["2763\n0", "No"], ["37\n514", "Yes"]], "original": "function main (input) {\n  var line = input.split('\\n').map(n => parseInt(n, 10));  \n\n  while(line[0] > 500) {\n    line[0] -= 500;\n  }\n\n  line[0]<=line[1] ? console.log('Yes') : console.log('No');\n  \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03609_1", "type": "JavaScript", "obfuscated": "function main(_0x1e3d10) {\n    _0x1e3d10 = _0x1e3d10['trim']();\n    const _0x3492cd = _0x1e3d10['split']('\\x20')['map'](Number);\n    if (_0x3492cd[0x0] <= _0x3492cd[0x1]) {\n        console['log']('0');\n    } else {\n        console['log'](_0x3492cd[0x0] - _0x3492cd[0x1]);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["100 17", "83"], ["48 58", "0"], ["1000000000 1000000000", "0"]], "original": "function main(input) {\n  input = input.trim();\n  const a = input.split(\" \").map(Number);\n  if(a[0]<=a[1]){\n    console.log(\"0\");\n  }else{\n    console.log(a[0]-a[1]);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03694_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x2b258c) {\n    const _0x2c7439 = _0x2b258c['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x25ec55 => Number(_0x25ec55));\n    const _0xd346aa = Math['min'](..._0x2c7439);\n    const _0x4fb805 = Math['max'](..._0x2c7439);\n    const _0x14deac = _0x4fb805 - _0xd346aa;\n    console['log'](_0x14deac);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n2 3 7 9", "7"], ["8\n3 1 4 1 5 9 2 6", "8"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const houses = s.split('\\n')[1].split(' ').map(n => Number(n));\n  const min = Math.min(...houses);\n  const max = Math.max(...houses);\n\n  const answer = max - min;\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03796_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nfunction Main(_0x63656) {\n    var _0x3b93e4 = _0x63656['split']('\\x0a');\n    var _0x50aa7a = Number(_0x3b93e4[0x0]);\n    var _0x3f99d4 = 0x1;\n    for (var _0x22c886 = 0x1; _0x22c886 <= _0x50aa7a; _0x22c886++) {\n        _0x3f99d4 *= _0x22c886;\n        _0x3f99d4 %= 0x3b9aca07;\n    }\n    console['log'](_0x3f99d4);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "6"], ["10", "3628800"], ["100000", "457992974"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var tmp = input.split(\"\\n\");\n  //var line0 = tmp[0].split(\" \");\n  //var line1 = tmp[1].split(\" \");\n  //var line2 = tmp[2].split(\" \");\n  //var line3 = tmp[3].split(\" \");\n\n  var N = Number(tmp[0]);\n  //var A = Number(line0[1]);\n  //var B = Number(line0[2]);\n  \n  var pow = 1;\n  for(var i=1; i<=N; i++){\n    pow *= i;\n    pow %= 1000000007;\n  }\n  \n  console.log(pow);\n\n  \n  //入出力確認コード\n  // A.forEach( function(value) console.log(value); );\n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03814_1", "type": "JavaScript", "obfuscated": "function main(_0x2f0717) {\n    const _0x51ee2b = _0x2f0717['split']('');\n    let _0x3cf246;\n    let _0x5e1141;\n    for (let _0x3c3753 = 0x0; _0x3c3753 < _0x51ee2b['length']; _0x3c3753++) {\n        if (_0x51ee2b[_0x3c3753] === 'A' && !_0x3cf246) {\n            _0x3cf246 = _0x3c3753;\n        }\n        if (_0x51ee2b[_0x3c3753] === 'Z') {\n            _0x5e1141 = _0x3c3753;\n        }\n    }\n    console['log'](_0x5e1141 - _0x3cf246 + 0x1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["QWERTYASDFZXCV", "5"], ["ZABCZ", "4"], ["HASFJGHOGAKZZFEGA", "12"]], "original": "function main(input) {\n  const S = input.split('');\n  let a_idx;\n  let z_idx;\n  \n  for(let i = 0; i < S.length; i++) {\n  \tif (S[i] === 'A' && !a_idx) { a_idx = i; }\n    if (S[i] === 'Z') { z_idx = i; }\n  }\n  \n  console.log((z_idx - a_idx) + 1);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p00017_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar strA = input['trim']();\nvar abc = 'abcdefghijklmnopqrstuvwxyz'['split']('');\nfor (var i = 0x0; i < 0x1a; i++) {\n    var strB = strA['replace'](/[a-z]/g, function (_0xadb283) {\n        return abc[(abc['indexOf'](_0xadb283) + i) % 0x1a];\n    });\n    if (strB['match'](/the|this|that/))\n        break;\n}\nconsole['log'](strB);", "test_cases": [["xlmw mw xli tmgxyvi xlex m xsso mr xli xvmt.", "this is the picture that i took in the trip."]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar strA=input.trim();\nvar abc=\"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nfor(var i=0;i<26;i++){\n   var strB=strA.replace(/[a-z]/g,function(s){\n      return abc[(abc.indexOf(s)+i)%26];\n   });\n   if(strB.match(/the|this|that/))break;\n}\nconsole.log(strB);", "language": "JavaScript"}
{"filename": "p00026_1", "type": "JavaScript", "obfuscated": "var input = '';\nvar mem = new Array(0xe);\nfor (var i = 0x0; i < 0xe; i++) {\n    mem[i] = new Array(0xe);\n    for (var j = 0x0; j < 0xe; j++)\n        mem[i][j] = 0x0;\n}\nvar dx = [\n    [\n        0x0,\n        -0x1,\n        0x0,\n        0x1,\n        0x0\n    ],\n    [\n        -0x1,\n        0x0,\n        0x1,\n        -0x1,\n        0x0,\n        0x1,\n        -0x1,\n        0x0,\n        0x1\n    ],\n    [\n        0x0,\n        -0x1,\n        0x0,\n        -0x1,\n        -0x2,\n        -0x1,\n        0x0,\n        0x1,\n        0x2,\n        -0x1,\n        0x0,\n        0x1,\n        0x0\n    ]\n];\nvar dy = [\n    [\n        -0x1,\n        0x0,\n        0x0,\n        0x0,\n        0x1\n    ],\n    [\n        -0x1,\n        -0x1,\n        -0x1,\n        0x0,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x1\n    ],\n    [\n        -0x2,\n        -0x1,\n        -0x1,\n        -0x1,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x1,\n        0x2\n    ]\n];\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x372827) {\n    input += _0x372827;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    for (var _0x4e7368 = 0x0; _0x4e7368 < input['length']; _0x4e7368++) {\n        s = input[_0x4e7368]['split'](',');\n        x = Number(s[0x0]) + 0x2;\n        y = Number(s[0x1]) + 0x2;\n        v = Number(s[0x2]) - 0x1;\n        for (var _0x4ee6b2 in dx[v])\n            mem[x + dx[v][_0x4ee6b2]][y + dy[v][_0x4ee6b2]]++;\n    }\n    m = 0x0;\n    b = 0x0;\n    for (var _0x4e7368 = 0x2; _0x4e7368 < 0xc; _0x4e7368++) {\n        for (var _0x4ee6b2 = 0x2; _0x4ee6b2 < 0xc; _0x4ee6b2++) {\n            if (mem[_0x4e7368][_0x4ee6b2] == 0x0)\n                b++;\n            m = Math['max'](m, mem[_0x4e7368][_0x4ee6b2]);\n        }\n    }\n    console['log'](b);\n    console['log'](m);\n});", "test_cases": [["2,5,3\n3,6,1\n3,4,2\n4,5,2\n3,6,3\n2,4,1", "77\n5"]], "original": "\nvar input = \"\";\nvar mem = new Array(14);\nfor(var i = 0; i < 14; i++)\n{\n  mem[i] = new Array(14);\n  for(var j = 0; j < 14; j++)\n    mem[i][j] = 0;\n}\nvar dx = [\n  [0, -1, 0, 1, 0],\n  [-1, 0, 1, -1, 0, 1, -1, 0, 1],\n  [0, -1, 0, -1, -2, -1, 0, 1, 2, -1, 0, 1, 0]\n]\nvar dy =[\n  [-1, 0, 0, 0, 1],\n  [-1, -1, -1, 0, 0, 0, 1, 1, 1,],\n  [-2, -1, -1, -1, 0, 0, 0, 0, 0, 1, 1, 1, 2]\n]\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk){input += chunk});\nprocess.stdin.on('end', function()\n{\n  input = input.split('\\n');\n  for(var i = 0; i < input.length; i++)\n  {\n    s = input[i].split(',');\n    x = Number(s[0]) + 2;\n    y = Number(s[1]) + 2;\n    v = Number(s[2]) - 1;\n    for(var j in dx[v])\n      mem[x + dx[v][j]][y + dy[v][j]]++;\n  }\n  m = 0;\n  b = 0;\n  for(var i = 2; i < 12; i++)\n  {\n    for(var j = 2; j < 12; j++)\n    {\n      if(mem[i][j] == 0)\n        b++;\n      m = Math.max(m, mem[i][j]);\n    }\n  }\n  console.log(b);\n  console.log(m);\n});", "language": "JavaScript"}
{"filename": "p02260_1", "type": "JavaScript", "obfuscated": "let inputString = '';\nprocess['stdin']['on']('data', _0x4d104d => {\n    inputString += _0x4d104d;\n});\nprocess['stdin']['on']('end', function () {\n    inputString = inputString['replace'](/\\s*$/, '')['split']('\\x0a')['map'](_0x1576d2 => _0x1576d2['replace'](/\\s*$/, ''));\n    selectionSort(inputString[0x1]['split']('\\x20')['map'](_0x537f76 => Number(_0x537f76)));\n});\nconst selectionSort = _0x4894a8 => {\n    let _0x5c1647 = 0x0;\n    for (let _0x1108d6 = 0x0; _0x1108d6 < _0x4894a8['length']; _0x1108d6++) {\n        let _0x17997d = _0x1108d6;\n        for (let _0x4ef8d7 = _0x1108d6; _0x4ef8d7 < _0x4894a8['length']; _0x4ef8d7++) {\n            if (_0x4894a8[_0x4ef8d7] < _0x4894a8[_0x17997d]) {\n                _0x17997d = _0x4ef8d7;\n            }\n        }\n        const _0x244afd = _0x4894a8[_0x1108d6];\n        const _0x277266 = _0x4894a8[_0x17997d];\n        if (_0x244afd !== _0x277266) {\n            _0x4894a8[_0x17997d] = _0x244afd;\n            _0x4894a8[_0x1108d6] = _0x277266;\n            _0x5c1647++;\n        }\n    }\n    console['log'](_0x4894a8['join']('\\x20'));\n    console['log'](_0x5c1647);\n};", "test_cases": [["6\n5 6 4 2 1 3", "1 2 3 4 5 6\n4"], ["6\n5 2 4 6 1 3", "1 2 3 4 5 6\n3"]], "original": "let inputString = '';\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\nprocess.stdin.on('end', function() {\n    inputString = inputString.replace(/\\s*$/, '')\n        .split('\\n')\n        .map(str => str.replace(/\\s*$/, ''));\n\n    selectionSort(inputString[1].split(' ').map(str => Number(str)));\n});\n\nconst selectionSort = (arr) => {\n  let swap = 0;\n\n  for (let i=0; i<arr.length; i++) {\n    let minj = i;\n    for (let j=i; j<arr.length; j++) {\n      if (arr[j] < arr[minj]) { minj = j; }\n    }\n    const a = arr[i];\n    const b = arr[minj];\n    if (a !== b) {\n      arr[minj] = a;\n      arr[i] = b;\n      swap++;\n    }\n  }\n\n  console.log(arr.join(' '));\n  console.log(swap);\n};\n", "language": "JavaScript"}
{"filename": "p02327_1", "type": "JavaScript", "obfuscated": "console['log'](0x6);", "test_cases": [["4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0", "6"]], "original": "console.log(6);", "language": "JavaScript"}
{"filename": "p02389_1", "type": "JavaScript", "obfuscated": "(function (_0x3b2ee8) {\n    var _0xf778d4 = _0x3b2ee8['toString']()['split']('\\x20');\n    var _0x128175 = parseInt(_0xf778d4[0x0], 0xa);\n    var _0x34ff3c = parseInt(_0xf778d4[0x1], 0xa);\n    console['log'](_0x128175 * _0x34ff3c, (_0x128175 + _0x34ff3c) * 0x2);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3 5", "15 16"]], "original": " (function(stdin) {\n    var lines = stdin.toString().split(' ');\n    var x = parseInt(lines[0],10);\n    var y = parseInt(lines[1],10);\n    \n    console.log((x*y),(x+y)*2);\n\n }(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02600_1", "type": "JavaScript", "obfuscated": "function main(_0x5cddf1) {\n    console['log'](0xa - Math['floor'](_0x5cddf1 / 0xc8));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["725", "7"], ["1600", "2"]], "original": "function main(input) {\n    console.log(10 - Math.floor(input / 200));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02603_1", "type": "JavaScript", "obfuscated": "function main(_0x4c2e83) {\n    let _0x1956d5 = Number(_0x4c2e83['split']('\\x0a')[0x0]);\n    let _0xa19281 = _0x4c2e83['split']('\\x0a')[0x1]['split']('\\x20')['map'](Number);\n    let _0x357074 = [];\n    for (let _0x56d3f5 = 0x0; _0x56d3f5 < _0x1956d5 + 0x1; _0x56d3f5++)\n        _0x357074[_0x56d3f5] = 0x0;\n    _0x357074[0x0] = 0x3e8;\n    let _0xbeb6d8 = 0x0;\n    for (let _0x50663c = 0x1; _0x50663c < _0x1956d5 + 0x1; _0x50663c++) {\n        if (_0x50663c == _0x1956d5) {\n            _0x357074[_0x50663c] = _0x357074[_0x50663c - 0x1] + _0xbeb6d8 * _0xa19281[_0x50663c - 0x1];\n        } else if (_0xa19281[_0x50663c] > _0xa19281[_0x50663c - 0x1]) {\n            let _0x1fdbe7 = parseInt(_0x357074[_0x50663c - 0x1] / _0xa19281[_0x50663c - 0x1]);\n            _0x357074[_0x50663c] = _0x357074[_0x50663c - 0x1] - _0x1fdbe7 * _0xa19281[_0x50663c - 0x1];\n            _0xbeb6d8 += _0x1fdbe7;\n        } else {\n            let _0x362590 = _0xbeb6d8;\n            _0x357074[_0x50663c] = _0x357074[_0x50663c - 0x1] + _0x362590 * _0xa19281[_0x50663c - 0x1];\n            _0xbeb6d8 -= _0x362590;\n        }\n    }\n    console['log'](_0x357074[_0x1956d5]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\n100 130 130 130 115 115 150", "1685"], ["6\n200 180 160 140 120 100", "1000"], ["2\n157 193", "1216"]], "original": "function main(arg) {\n    let n = Number(arg.split(\"\\n\")[0])\n    let a = arg.split(\"\\n\")[1].split(\" \").map(Number)\n    \n    let dp = []\n    for(let i=0; i<n+1; i++)dp[i]=0\n    dp[0] = 1000\n    \n    let stock = 0\n    for(let i=1; i<n+1; i++) {\n        if(i==n) {\n        // 売却\n            dp[i] = dp[i-1] + stock*a[i-1]\n        }else if(a[i]>a[i-1]) {\n        // 購入\n            let addStock = parseInt(dp[i-1]/a[i-1])\n            dp[i] = dp[i-1] - addStock * a[i-1]\n            stock += addStock\n            //console.log(`addStock=${addStock}`)\n        } else {\n        // 売却\n            let rmStock = stock\n            dp[i] = dp[i-1] + rmStock * a[i-1]\n            stock -= rmStock\n            //console.log(`rmStock=${rmStock}`)\n        }\n            //console.log(`stock=${stock}`)\n    }\n    console.log(dp[n])\n    \n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02663_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlet cin = input['split'](/ |\\n/), cid = 0x0;\nconst next = () => cin[cid++];\nconst nexts = _0x30e321 => cin['slice'](cid, cid += _0x30e321)['map'](_0x2a8cbb => parseInt(_0x2a8cbb));\nconst [H1, M1, H2, M2, K] = nexts(0x5);\nconst time = H2 * 0x3c + M2 - (H1 * 0x3c + M1) - K;\ntime > 0x0 ? console['log'](time) : console['log'](0x0);", "test_cases": [["10 0 15 0 30", "270"], ["10 0 12 0 120", "0"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nlet cin = input.split(/ |\\n/), cid = 0\nconst next = () => cin[cid++]\nconst nexts = (n) => cin.slice(cid, cid+=n).map(i=>parseInt(i))\n\nconst [H1, M1, H2, M2, K] = nexts(5);\nconst time = H2 * 60 + M2 - (H1 * 60 + M1) - K\ntime > 0 ? console.log(time) : console.log(0)\n", "language": "JavaScript"}
{"filename": "p02693_1", "type": "JavaScript", "obfuscated": "function Main(_0x1b429f) {\n    var _0x10387f = _0x1b429f;\n    const _0x3af104 = _0x10387f['split']('\\x0a');\n    var _0xdee04d = Number(_0x3af104[0x0]);\n    var _0x422a74 = _0x3af104[0x1]['split']('\\x20');\n    var _0xad16ca = Number(_0x422a74[0x0]);\n    var _0x4c8293 = Number(_0x422a74[0x1]);\n    var _0x95ddd = '';\n    for (var _0x18a9b0 = _0xad16ca; _0x18a9b0 <= _0x4c8293; _0x18a9b0++) {\n        if (_0x18a9b0 % _0xdee04d === 0x0) {\n            _0x95ddd = 'OK';\n        }\n    }\n    if (_0x95ddd !== 'OK') {\n        _0x95ddd = 'NG';\n    }\n    console['log'](_0x95ddd);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\n500 600", "OK"], ["4\n5 7", "NG"], ["1\n11 11", "OK"]], "original": "function Main(input) {\n\tvar str = input;\n\tconst n = str.split('\\n');\n\tvar k  =Number(n[0]);\n\tvar p = n[1].split(\" \");\t\n\tvar a = Number(p[0]); \n\tvar b = Number(p[1]);\n\tvar ans = \"\";\n\t\n\tfor(var i = a; i <= b; i++){\n\t\tif(i%k===0){\n\t\t\tans = \"OK\";\n\t\t}\n\t}\nif(ans !== \"OK\"){\n\tans = \"NG\"\n}\n console.log(ans);\n }\n \n \n//*おまじない\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02879_1", "type": "JavaScript", "obfuscated": "function Main(_0x3218b9) {\n    var _0x3218b9 = _0x3218b9['split']('\\x20');\n    var _0x4122f0 = Number(_0x3218b9[0x0]);\n    var _0x5bc108 = Number(_0x3218b9[0x1]);\n    if (_0x4122f0 > 0x9 || _0x5bc108 > 0x9) {\n        console['log'](-0x1);\n        return;\n    }\n    var _0x38ee0b = _0x4122f0 * _0x5bc108;\n    console['log'](_0x38ee0b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 5", "10"], ["5 10", "-1"], ["9 9", "81"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  var input = input.split(' ')\n  var a = Number(input[0])\n  var b = Number(input[1])\n  if (a > 9 || b > 9){\n    console.log(-1)\n  \treturn;\n  }\n  var result = a * b;\n  console.log(result);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02918_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2da521 => {\n    _0x2da521 = _0x2da521['trim']()['split']('\\x0a');\n    const _0x4f8b86 = parseInt(_0x2da521[0x0]['split']('\\x20')[0x0]);\n    const _0x560e90 = parseInt(_0x2da521[0x0]['split']('\\x20')[0x1]);\n    const _0x67d241 = _0x2da521[0x1]['split']('');\n    let _0x4cdb32 = 0x0;\n    let _0x3c4f81;\n    for (let _0x48fed9 in _0x67d241) {\n        if (_0x3c4f81 === 'L' && _0x67d241[_0x48fed9] === 'L') {\n            _0x4cdb32++;\n        }\n        if (_0x3c4f81 === 'R' && _0x67d241[_0x48fed9] === 'R') {\n            _0x4cdb32++;\n        }\n        _0x3c4f81 = _0x67d241[_0x48fed9];\n    }\n    console['log'](Math['min'](_0x4f8b86 - 0x1, _0x4cdb32 + 0x2 * _0x560e90));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6 1\nLRLRRL", "3"], ["13 3\nLRRLRLRRLRLLR", "9"], ["10 1\nLLLLLRRRRR", "9"], ["9 2\nRRRLRLRLL", "7"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n    \n    const S = arg[1].split(\"\");\n    let alreadyHappy = 0;\n    let last;\n    \n    for(let i in S) {\n        if(last === \"L\" && S[i] === \"L\") {\n            alreadyHappy++;\n        }\n        \n        if(last === \"R\" && S[i] === \"R\") {\n            alreadyHappy++;\n        }\n        \n        last = S[i];\n    }\n\n    console.log(Math.min(N - 1, alreadyHappy + (2 * K)));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03014_1", "type": "JavaScript", "obfuscated": "const main = _0xf5594d => {\n    var _0x3c0d42 = _0xf5594d[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x4d407f = _0xf5594d[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x4060b2 = {};\n    var _0x53abd7 = {};\n    var _0x54ce6c = {};\n    var _0xf7a21f = [];\n    for (var _0x154022 = 0x0; _0x154022 < _0x3c0d42; _0x154022++) {\n        _0x4060b2[_0x154022] = _0xf5594d[_0x154022 + 0x1];\n        for (var _0x85b5c6 = 0x0; _0x85b5c6 < _0x4d407f; _0x85b5c6++) {\n            var _0x134c37 = _0x154022 - 0x1 + '_' + _0x85b5c6;\n            var _0x39e414 = _0x154022 + '_' + (_0x85b5c6 - 0x1);\n            var _0x557bdb = _0x154022 + '_' + _0x85b5c6;\n            if (_0x4060b2[_0x154022][_0x85b5c6] == '#') {\n            } else {\n                _0xf7a21f['push'](_0x557bdb);\n                if (_0x53abd7[_0x39e414]) {\n                    _0x53abd7[_0x557bdb] = _0x53abd7[_0x39e414];\n                    _0x53abd7[_0x557bdb]['n']++;\n                } else {\n                    _0x53abd7[_0x557bdb] = { 'n': 0x1 };\n                }\n                if (_0x54ce6c[_0x134c37]) {\n                    _0x54ce6c[_0x557bdb] = _0x54ce6c[_0x134c37];\n                    _0x54ce6c[_0x557bdb]['n']++;\n                } else {\n                    _0x54ce6c[_0x557bdb] = { 'n': 0x1 };\n                }\n            }\n        }\n    }\n    var _0x4a4355 = 0x0;\n    var _0x557bdb;\n    for (var _0x523a45 = _0xf7a21f['length'] - 0x1; _0x523a45 >= 0x0; _0x523a45--) {\n        _0x557bdb = _0xf7a21f[_0x523a45];\n        _0x4a4355 = Math['max'](_0x4a4355, _0x54ce6c[_0x557bdb]['n'] + _0x53abd7[_0x557bdb]['n'] - 0x1);\n        if (_0x4a4355 == _0x3c0d42 + _0x4d407f - 0x1)\n            break;\n    }\n    console['log'](_0x4a4355);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["4 6\n#..#..\n.....#\n....#.\n#.#...", "8"], ["8 8\n..#...#.\n....#...\n##......\n..###..#\n...#..#.\n##....#.\n#...#...\n###.#..#", "13"]], "original": "const main = (inputs) => {\n  var H = inputs[0].split(\" \")[0]-0;\n  var W = inputs[0].split(\" \")[1]-0;\n \n  var map = {};\n  var ymap = {};\n  var tmap = {};\n  var keys = [];\n  for(var h=0;h<H;h++){\n    map[h] = inputs[h+1];\n    for(var w=0;w<W;w++){\n      var ukey = (h-1)+\"_\"+w;\n      var lkey = h+\"_\"+(w-1);\n      var key = h+\"_\"+w;\n      if(map[h][w] == \"#\"){\n      }else{\n        keys.push(key);\n        if(ymap[lkey]){\n          ymap[key] = ymap[lkey];\n          ymap[key].n++;\n        }else{\n          ymap[key] = {n:1};\n        }\n \n        if(tmap[ukey]){\n          tmap[key] = tmap[ukey];\n          tmap[key].n++;\n        }else{\n          tmap[key] = {n:1};\n        }\n      }\n    }\n  }\n  var ans = 0;\n  var key;\n  for(var i=keys.length-1;i>=0;i--){\n    key = keys[i];\n    ans = Math.max(ans, tmap[key].n + ymap[key].n - 1);\n    if(ans == H+W-1) break;\n  }\n  console.log(ans);\n}\n \nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p03089_1", "type": "JavaScript", "obfuscated": "input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlines = input['split']('\\x0a');\nN = lines['shift']() * 0x1;\nb = lines['shift']()['split']('\\x20');\na = [];\nfor (i = N; i > 0x0; i--) {\n    found = ![];\n    for (j = i; j > 0x0; j--) {\n        if (b[j - 0x1] == j) {\n            a['push'](b['splice'](j - 0x1, 0x1));\n            found = !![];\n            break;\n        }\n    }\n    if (!found) {\n        a = [-0x1];\n        break;\n    }\n}\nconsole['log'](a['reverse']()['join']('\\x0a'));", "test_cases": [["3\n1 2 1", "1\n1\n2"], ["2\n2 2", "-1"], ["9\n1 1 1 2 2 1 2 3 2", "1\n2\n2\n3\n1\n2\n2\n1\n1"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nb = lines.shift().split(' ')\na = []\nfor (i=N; i>0; i--) {\n    found = false\n    for (j=i; j>0; j--) {\n        if (b[j-1] == j) {\n            a.push(b.splice(j-1, 1))\n            found = true\n            break;\n        }\n    }\n    if (!found) {\n        a = [-1]\n        break;\n    }\n}\nconsole.log(a.reverse().join(\"\\n\"))", "language": "JavaScript"}
{"filename": "p03295_1", "type": "JavaScript", "obfuscated": "var toInt = _0x237d68 => parseInt(_0x237d68, 0xa);\nvar toIntArr = _0x321af4 => _0x321af4['map'](_0x331fd3 => toInt(_0x331fd3));\nvar abs = _0x3f2033 => _0x3f2033 > 0x0 ? _0x3f2033 : -_0x3f2033;\nfunction min() {\n    var _0x537650 = arguments, _0x2fad9a = _0x537650[0x0];\n    for (var _0x502613 = 0x1; _0x502613 < _0x537650['length']; _0x502613++)\n        if (_0x537650[_0x502613] < _0x2fad9a)\n            _0x2fad9a = _0x537650[_0x502613];\n    return _0x2fad9a;\n}\nfunction max() {\n    var _0x5bc90b = arguments, _0x22e010 = _0x5bc90b[0x0];\n    for (var _0x2f8145 = 0x1; _0x2f8145 < _0x5bc90b['length']; _0x2f8145++)\n        if (_0x5bc90b[_0x2f8145] > _0x22e010)\n            _0x22e010 = _0x5bc90b[_0x2f8145];\n    return _0x22e010;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x3b15f2) {\n    var _0x3b15f2 = _0x3b15f2['split']('\\x0a');\n    var _0x1902c4 = _0x3b15f2[0x0]['split']('\\x20');\n    var _0x4d7666 = toInt(_0x1902c4[0x0]);\n    var _0xa2f0e = toInt(_0x1902c4[0x1]);\n    var _0x5087c7 = [];\n    for (var _0x743f3f = 0x0; _0x743f3f < _0xa2f0e; _0x743f3f++) {\n        c = toIntArr(_0x3b15f2[_0x743f3f + 0x1]['split']('\\x20'));\n        a = c[0x0];\n        b = c[0x1];\n        _0x5087c7[_0x743f3f] = [\n            a,\n            b\n        ];\n    }\n    _0x5087c7['sort'](function (_0x2921eb, _0x270e25) {\n        if (_0x2921eb[0x0] !== _0x270e25[0x0]) {\n            return _0x2921eb[0x0] - _0x270e25[0x0];\n        } else {\n            return _0x2921eb[0x1] - _0x270e25[0x1];\n        }\n    });\n    var _0x3a39c7 = 0x0;\n    r = _0x4d7666 - 0x1;\n    var _0x1d2876;\n    var _0x29cff8 = 0x1;\n    for (var _0x743f3f = 0x0; _0x743f3f < _0xa2f0e; _0x743f3f++) {\n        _0x1d2876 = _0x5087c7[_0x743f3f];\n        if (_0x1d2876[0x1] <= _0x3a39c7 || r <= _0x1d2876[0x0]) {\n            _0x29cff8++;\n            _0x3a39c7 = _0x1d2876[0x0];\n            r = _0x1d2876[0x1];\n        } else {\n            _0x3a39c7 = max(_0x3a39c7, _0x1d2876[0x0]);\n            r = min(r, _0x1d2876[0x1]);\n        }\n    }\n    console['log'](_0x29cff8);\n}", "test_cases": [["5 2\n1 4\n2 5", "1"], ["9 5\n1 8\n2 7\n3 5\n4 6\n7 9", "2"], ["5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5", "4"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar temp1 = input[0].split(' ');\n\tvar n = toInt(temp1[0]);\n\tvar m = toInt(temp1[1]);\n\tvar abs = [];\n\tfor(var i = 0; i < m; i++){\n\t\tc = toIntArr(input[i+1].split(' '));\n\t\ta = c[0];\n\t\tb = c[1];\n\t\tabs[i] = [a,b];\n\t}\n\tabs.sort(function(a,b){\n\t\tif(a[0]!==b[0]){\n\t\t\treturn a[0] - b[0];\n\t\t}else{\n\t\t\treturn a[1] - b[1];\n\t\t}\n\t})\n\tvar l=0;r=n-1;\n\tvar ab;\n\tvar ans = 1;\n\tfor(var i = 0; i < m; i++){\n\t\tab = abs[i];\n\t\tif(ab[1]<=l || r<=ab[0]){\n\t\t\tans++;\n\t\t\tl = ab[0];\n\t\t\tr = ab[1];\n\t\t}else{\n\t\t\tl = max(l,ab[0]);\n\t\t\tr = min(r,ab[1]);\n\t\t}\n\t}\n\tconsole.log(ans);\n}", "language": "JavaScript"}
{"filename": "p03331_1", "type": "JavaScript", "obfuscated": "function main(_0x265a10) {\n    var _0x8d403a = _0x265a10['toString']()['length'];\n    var _0x265a10 = parseInt(_0x265a10, 0xa);\n    var _0x9f5dca = Math['pow'](0xa, _0x8d403a - 0x1);\n    var _0x10ccb5 = [];\n    for (var _0x3fcd51 = 0x0; _0x3fcd51 < _0x8d403a; _0x3fcd51++) {\n        _0x10ccb5['push'](Math['floor'](_0x265a10 / _0x9f5dca));\n        _0x265a10 = _0x265a10 % _0x9f5dca;\n        _0x9f5dca /= 0xa;\n    }\n    var _0x4266c1 = _0x10ccb5['reduce']((_0x582605, _0x5891c6) => _0x582605 + _0x5891c6);\n    if (_0x4266c1 == 0x1) {\n        _0x4266c1 = 0xa;\n    }\n    console['log'](_0x4266c1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["15", "6"], ["100000", "10"]], "original": "function main(input) {\n  var digits = input.toString().length;\n  var input = parseInt(input, 10);\n \n  var divisor = Math.pow(10, digits - 1);\n  var arr = [];\n  for (var i = 0; i < digits; i++) {\n  \tarr.push(Math.floor(input / divisor))\n  \tinput = input % divisor;\n  \tdivisor /= 10;\n \n  }\n  var answer = arr.reduce((a, b) => a + b);\n  if(answer == 1) {answer = 10;}\n \n  console.log(answer);\n \n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03457_1", "type": "JavaScript", "obfuscated": "function Main(_0x562a9f) {\n    var _0x2bb1c2 = _0x562a9f['split']('\\x0a');\n    var _0x2230c9 = parseInt(_0x2bb1c2, 0xa);\n    var _0x3b9b63 = _0x2bb1c2['slice'](0x1, _0x2230c9 + 0x1);\n    var _0x5ae18c;\n    var _0x56a74c = 0x1;\n    var _0x48519b = [];\n    _0x48519b[0x0] = [\n        0x0,\n        0x0,\n        0x0\n    ];\n    for (var _0x24d2af = 0x0; _0x24d2af < _0x2230c9; _0x24d2af++) {\n        _0x48519b[_0x24d2af + 0x1] = parser(_0x3b9b63[_0x24d2af]);\n    }\n    for (var _0x24d2af = 0x1; _0x24d2af < _0x48519b['length']; _0x24d2af++) {\n        var _0x5dea35 = _0x48519b[_0x24d2af - 0x1];\n        var _0xfad0e = _0x48519b[_0x24d2af];\n        var _0x127c04 = _0xfad0e[0x0] - _0x5dea35[0x0];\n        var _0x2726bd = Math['abs'](_0xfad0e[0x1] + _0xfad0e[0x2] - _0x5dea35[0x1] - _0x5dea35[0x2]);\n        if (_0x127c04 >= _0x2726bd && _0x127c04 % 0x2 === _0x2726bd % 0x2) {\n        } else {\n            _0x56a74c = 0x0;\n        }\n    }\n    _0x5ae18c = _0x56a74c ? 'Yes' : 'No';\n    console['log'](_0x5ae18c);\n}\nfunction parser(_0x52d6ba) {\n    var _0x5860ee = _0x52d6ba['split']('\\x20');\n    var _0x4fe975 = [];\n    _0x4fe975['push'](parseInt(_0x5860ee[0x0], 0xa));\n    _0x4fe975['push'](parseInt(_0x5860ee[0x1], 0xa));\n    _0x4fe975['push'](parseInt(_0x5860ee[0x2], 0xa));\n    return _0x4fe975;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n3 1 2\n6 1 1", "Yes"], ["1\n2 100 100", "No"], ["2\n5 1 1\n100 1 1", "No"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar args = input.split(\"\\n\");\n\tvar N = parseInt(args,10);\n\tvar history = args.slice(1,N+1);\n\tvar answer;\n\tvar flg = 1;\n\tvar plan = [];\n\tplan[0]=[0,0,0];\n\tfor(var i=0;i<N;i++){\n\t\tplan[i+1] = parser(history[i]);\n\t}\n\n\tfor(var i=1;i<plan.length;i++){\n\t\tvar rec1 = plan[i-1];\n\t\tvar rec2 = plan[i];\n\t\tvar dt = rec2[0] - rec1[0];\n\t\tvar dist = Math.abs(rec2[1]+rec2[2]-rec1[1]-rec1[2]);\n\t\tif (dt >= dist && dt % 2 === dist % 2){\n\t\t}else{\n\t\t\t\tflg = 0;\n\t\t}\n\t}\n\tanswer = flg ? \"Yes\" : \"No\" ;\n\t//出力\n\tconsole.log(answer);\n}\nfunction parser(record){\n\tvar args = record.split(\" \");\n\tvar return_val=[];\n\treturn_val.push(parseInt(args[0],10));\n\treturn_val.push(parseInt(args[1],10));\n\treturn_val.push(parseInt(args[2],10));\n\treturn return_val\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03635_1", "type": "JavaScript", "obfuscated": "function Main(_0x290f67) {\n    _0x290f67 = _0x290f67['split']('\\x0a');\n    var _0x349ef7 = _0x290f67[0x0]['split']('\\x20');\n    var _0x2a0288 = parseInt(_0x349ef7[0x0]);\n    var _0x159f22 = parseInt(_0x349ef7[0x1]);\n    var _0x3a2bd5 = (_0x2a0288 - 0x1) * (_0x159f22 - 0x1);\n    console['log'](_0x3a2bd5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4", "6"], ["2 2", "1"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    var line = input[0].split(\" \");\n    var m = parseInt(line[0]);\n    var n = parseInt(line[1]);\n    \n    var ans = (m-1)*(n-1);\n    console.log(ans);\n    \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03998_1", "type": "JavaScript", "obfuscated": "function Main(_0x3bfc19) {\n    var _0x3bfc19 = _0x3bfc19['split']('\\x0a');\n    var _0x1937ba;\n    var _0x535a28 = {\n        'a': _0x3bfc19[0x0]['split'](''),\n        'b': _0x3bfc19[0x1]['split'](''),\n        'c': _0x3bfc19[0x2]['split']('')\n    };\n    var _0x3b776c = 'a';\n    while (!![]) {\n        currentCard = _0x535a28[_0x3b776c]['shift']();\n        if (currentCard) {\n            _0x3b776c = currentCard;\n        } else {\n            _0x1937ba = _0x3b776c['toUpperCase']();\n            break;\n        }\n    }\n    console['log'](_0x1937ba);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["aca\naccc\nca", "A"], ["abcb\naacb\nbccc", "C"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar input = input.split(\"\\n\");\n\tvar answer;\n\n\t// input = input.map((x) => parseInt(x, 10));\n\n\tvar hands = {\n\t\ta: input[0].split(''),\n\t\tb: input[1].split(''),\n\t\tc: input[2].split(''),\n\t};\n\n\tvar currentPlayer = 'a';\n\n\twhile (true) {\n\t\tcurrentCard = hands[currentPlayer].shift();\n\n\t\tif (currentCard) {\n\t\t\tcurrentPlayer = currentCard;\n\t\t} else {\n\t\t\tanswer = currentPlayer.toUpperCase();\n\t\t\tbreak;\n\t\t}\n\t}\n\n\n\t// 出力\n\tconsole.log(answer);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p00093_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nx = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/\\s/);\nfor (i = 0x0; i < x['length']; i += 0x2) {\n    count = 0x0;\n    y = x[i];\n    if (y + x[i + 0x1] == 0x0)\n        break;\n    for (; y <= x[i + 0x1]; y++) {\n        if (y % 0x190 == 0x0 || y % 0x4 == 0x0 && y % 0x64 != 0x0) {\n            console['log'](String(y)['trim']());\n            count++;\n        }\n    }\n    if (i != 0x0 || i == x['length'] - 0x1)\n        console['log']();\n    if (count == 0x0) {\n        console['log']('NA\\x0a');\n    }\n}", "test_cases": [["2001 2010\n2005 2005\n2001 2010\n0 0", "2004\n2008\n\nNA\n\n2004\n2008"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n// Here your code !\nx=require('fs').readFileSync('/dev/stdin','utf8').trim().split(/\\s/);\nfor(i=0;i<x.length;i+=2){\n    count=0;\n    y=x[i];\n    //if(i!=0||i==x.length-1)console.log();\n    if(y+x[i+1]==0)break;\n    for(;y<=x[i+1];y++){\n        if (y % 400 == 0 || (y % 4 == 0 && y % 100 != 0)){\n            console.log(String(y).trim());\n            count++;\n        }\n    }\n    if(i!=0||i==x.length-1)console.log();\n    if(count==0){\n        console.log(\"NA\\n\");\n    }\n    \n}", "language": "JavaScript"}
{"filename": "p02248_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar a = arr[0x0];\nvar b = arr[0x1];\nvar str = '';\nfor (var i = 0x0; i < a['length']; i++) {\n    var flag = !![];\n    ;\n    for (var j = 0x0; j < b['length']; j++) {\n        if (a[i + j] != b[j]) {\n            flag = ![];\n            break;\n        }\n    }\n    if (flag)\n        str += i + '\\x0a';\n}\nconsole['log'](str);", "test_cases": [["aabaaa\naa", "0\n3\n4"], ["xyzz\nyz", "1"], ["abc\nxyz", ""]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar a=arr[0];\nvar b=arr[1];\nvar str=\"\";\nfor(var i=0;i<a.length;i++){\n   var flag=true;;\n   for(var j=0;j<b.length;j++){\n      if(a[i+j]!=b[j]){\n         flag=false;\n         break;\n      }\n   }\n   if(flag)str+=i+\"\\n\";\n}\nconsole.log(str);", "language": "JavaScript"}
{"filename": "p02414_1", "type": "JavaScript", "obfuscated": "var n, m, l, a, b, bt;\nprocess['stdin']['setEncoding']('ascii');\nprocess['stdin']['on']('data', function (_0x270e3c) {\n    var _0x57a26a, _0xd31cd8;\n    _0x57a26a = _0x270e3c['toString']()['split'](/\\r?\\n/);\n    for (i in _0x57a26a) {\n        _0xd31cd8 = _0x57a26a[i]['split']('\\x20');\n        if (_0xd31cd8['length'] !== 0x0)\n            _0x57a26a[i] = _0xd31cd8['map'](Number);\n    }\n    n = _0x57a26a[0x0][0x0];\n    m = _0x57a26a[0x0][0x1];\n    l = _0x57a26a[0x0][0x2];\n    a = _0x57a26a['slice'](0x1, n + 0x1);\n    b = _0x57a26a['slice'](n + 0x1, n + m + 0x1);\n});\nprocess['stdin']['on']('end', function () {\n    var _0x28970e, _0xec9152, _0x16c906;\n    make_b_transpose();\n    for (_0x28970e in a) {\n        _0x16c906 = [];\n        for (_0xec9152 in bt) {\n            _0x16c906['push'](inner_product(a[_0x28970e], bt[_0xec9152]));\n        }\n        console['log'](_0x16c906['join']('\\x20'));\n    }\n});\nfunction make_b_transpose() {\n    var _0x7af168, _0x2f3a0c, _0x5cdd0a;\n    bt = [];\n    for (_0x7af168 = 0x0; _0x7af168 < l; _0x7af168++) {\n        _0x5cdd0a = [];\n        for (_0x2f3a0c = 0x0; _0x2f3a0c < m; _0x2f3a0c++)\n            _0x5cdd0a['push'](b[_0x2f3a0c][_0x7af168]);\n        bt['push'](_0x5cdd0a);\n    }\n}\nfunction inner_product(_0x5e4ac7, _0x442389) {\n    var _0xf74cfc = 0x0;\n    for (var _0x5723cf in _0x5e4ac7)\n        _0xf74cfc += _0x5e4ac7[_0x5723cf] * _0x442389[_0x5723cf];\n    return _0xf74cfc;\n}", "test_cases": [["3 2 3\n1 2\n0 3\n4 5\n1 2 1\n0 3 2", "1 8 5\n0 9 6\n4 23 14"]], "original": "var n, m, l, a, b, bt;\n\nprocess.stdin.setEncoding('ascii');\nprocess.stdin.on('data', function (chunk) {\n\tvar line, ary;\n\tline = chunk.toString().split(/\\r?\\n/);\n\tfor (i in line) {\n\t\tary = line[i].split(' ');\n\t\tif (ary.length !== 0) line[i] = ary.map(Number);\n\t}\n\tn = line[0][0];\n\tm = line[0][1];\n\tl = line[0][2];\n\ta = line.slice(1, n+1);\n\tb = line.slice(n+1, n+m+1);\n});\n\nprocess.stdin.on('end', function() {\n\tvar i, j, ci;\n\n\tmake_b_transpose();\n\n\tfor (i in a) {\n\t\tci = [];\n\t\tfor (j in bt) {\n\t\t\tci.push(inner_product(a[i], bt[j]));\n\t\t}\n\t\tconsole.log(ci.join(' '));\n\t}\n});\n\nfunction make_b_transpose() {\n\tvar j, k, bj;\n\tbt = [];\n\tfor (j = 0; j < l; j++) {\n\t\tbj = [];\n\t\tfor (k = 0; k < m; k++)\n\t\t\tbj.push(b[k][j]);\n\t\tbt.push(bj);\n\t}\n}\n\nfunction inner_product(a, b) {\n\tvar res = 0;\n\tfor (var i in a) res += a[i] * b[i];\n\treturn res;\n}", "language": "JavaScript"}
{"filename": "p02598_1", "type": "JavaScript", "obfuscated": "function main(_0x5f2b8d) {\n    const _0x1ad2df = _0x5f2b8d['split']('\\x0a');\n    const _0x2f5491 = 0x0 | _0x1ad2df[0x0]['split']('\\x20')[0x1];\n    let _0x5ce706 = new Int32Array(_0x1ad2df[0x1]['split']('\\x20'));\n    let _0x9caaeb = (_0x10a038 = 0x0, _0x3f0f6c = 0x0) => {\n        _0x5ce706['forEach'](_0x1bdb4e => {\n            let _0x566f26 = 0x0 | _0x1bdb4e / _0x10a038;\n            if (_0x1bdb4e === _0x566f26 * _0x10a038) {\n                _0x566f26--;\n            }\n            _0x3f0f6c -= _0x566f26;\n        });\n        return _0x3f0f6c >= 0x0;\n    };\n    let _0x14770c = 0x0;\n    let _0x33b857 = Math['max'](..._0x5ce706);\n    let _0x44ee34 = 0x0 | (_0x33b857 + _0x14770c) * 0.5;\n    let _0x4f19d1 = _0x33b857;\n    while (_0x14770c < _0x33b857) {\n        if (_0x9caaeb(_0x44ee34, _0x2f5491)) {\n            _0x4f19d1 = _0x44ee34;\n            _0x33b857 = _0x44ee34 - 0x1;\n        } else {\n            _0x14770c = _0x44ee34 + 0x1;\n        }\n        _0x44ee34 = 0x0 | (_0x33b857 + _0x14770c) * 0.5;\n    }\n    return _0x4f19d1;\n}\nexports['main'] = main;\nfunction Main(_0x271ceb) {\n    console['log'](main(_0x271ceb['trim']()));\n}\nif (process['argv'][0x2] !== 'test') {\n    Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\n}", "test_cases": [["2 3\n7 9", "4"], ["3 0\n3 4 5", "5"], ["10 10\n158260522 877914575 602436426 24979445 861648772 623690081 433933447 476190629 262703497 211047202", "292638192"]], "original": "//解説参照済み\n\nfunction main(input) {\n    const lines = input.split(\"\\n\");\n    const K = 0 | lines[0].split(\" \")[1];\n    let arr = new Int32Array(lines[1].split(\" \"));\n\n    let isOk = (t = 0, k = 0) => {\n        arr.forEach((v) => {\n            let d = 0 | v / t;\n            if (v === d * t) { d--; }\n            k -= d;\n        })\n        return k >= 0;\n    }\n\n    let l = 0;\n    let r = Math.max(...arr);\n    let mid = 0 | (r + l) * 0.5;\n    let res = r;\n    while (l < r) {\n        if (isOk(mid, K)) {\n            res = mid;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n        mid = 0 | (r + l) * 0.5;\n    }\n    return res;\n}\n\n\n//******************************\nexports.main = main;\n\nfunction Main(input) {\n    console.log(main(input.trim()));\n}\n\nif (process.argv[2] !== \"test\") {\n    Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n}", "language": "JavaScript"}
{"filename": "p02699_1", "type": "JavaScript", "obfuscated": "function Main(_0x146380) {\n    _0x146380 = _0x146380['split']('\\x20');\n    const _0x55ea95 = parseInt(_0x146380[0x0]);\n    const _0x4497cf = parseInt(_0x146380[0x1]);\n    const _0x1d6006 = _0x55ea95 <= _0x4497cf ? 'unsafe' : 'safe';\n    console['log'](_0x1d6006);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5", "unsafe"], ["100 2", "safe"], ["10 10", "unsafe"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\" \");\n\tconst S = parseInt(input[0]);\n  const W = parseInt(input[1]);\n\n  const ret = (S <= W)? 'unsafe' : 'safe';\n  console.log(ret);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02973_1", "type": "JavaScript", "obfuscated": "function Main(_0x16562e) {\n    _0x16562e = _0x16562e['split']('\\x0a');\n    if (_0x16562e[_0x16562e['length'] - 0x1] === '') {\n        _0x16562e['pop']();\n    }\n    const _0x214283 = _0x16562e[0x0] - 0x0;\n    var _0x3415c9 = [];\n    var _0x196131;\n    var _0x2cea24, _0x1c9c1b, _0x34b435;\n    for (var _0x19acd5 = 0x1; _0x19acd5 < _0x16562e['length']; _0x19acd5++) {\n        _0x196131 = _0x16562e[_0x19acd5] - 0x0;\n        if (_0x3415c9['length'] === 0x0) {\n            _0x3415c9['push'](_0x196131);\n            continue;\n        }\n        if (_0x196131 <= _0x3415c9[0x0]) {\n            _0x3415c9['unshift'](_0x196131);\n            continue;\n        }\n        if (_0x196131 > _0x3415c9[_0x3415c9['length'] - 0x1]) {\n            _0x3415c9[_0x3415c9['length'] - 0x1] = _0x196131;\n            continue;\n        }\n        _0x2cea24 = 0x0;\n        _0x1c9c1b = _0x3415c9['length'] - 0x1;\n        while (_0x1c9c1b - _0x2cea24 > 0x1) {\n            _0x34b435 = Math['floor']((_0x1c9c1b + _0x2cea24) / 0x2);\n            if (_0x3415c9[_0x34b435] <= _0x196131) {\n                _0x1c9c1b = _0x34b435;\n            } else {\n                _0x2cea24 = _0x34b435;\n            }\n        }\n        _0x3415c9[_0x2cea24] = _0x196131;\n    }\n    console['log'](_0x3415c9['length']);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n2\n1\n4\n5\n3", "2"], ["4\n0\n0\n0\n0", "4"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0]-0;\n  var colors=[];\n  var temp;\n  var min,max,mid;\n  for(var i=1;i<input.length;i++){\n    temp=input[i]-0;\n    if(colors.length===0){\n      colors.push(temp);\n      continue;\n    }\n    if(temp<=colors[0]){\n      colors.unshift(temp);\n      continue;\n    }\n    if(temp>colors[colors.length-1]){\n      colors[colors.length-1]=temp;\n      continue;\n    }\n    min=0;\n    max=colors.length-1;\n    while(max-min>1){\n      mid=Math.floor((max+min)/2);\n      if(colors[mid]<=temp){\n        max=mid;\n      }else{\n        min=mid;\n      }\n    }\n    colors[min]=temp;\n  }\n  console.log(colors.length);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03067_1", "type": "JavaScript", "obfuscated": "function Main(_0x1316ab) {\n    var _0x52287c = parseInt(_0x1316ab[0x0], 0xa);\n    var _0x3dddb4 = parseInt(_0x1316ab[0x1], 0xa);\n    var _0x35f132 = parseInt(_0x1316ab[0x2], 0xa);\n    if (_0x52287c < _0x3dddb4) {\n        if (_0x52287c < _0x35f132 && _0x35f132 < _0x3dddb4) {\n            console['log']('Yes');\n        } else {\n            console['log']('No');\n        }\n    } else {\n        if (_0x3dddb4 < _0x35f132 && _0x35f132 < _0x52287c) {\n            console['log']('Yes');\n        } else {\n            console['log']('No');\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/\\n|\\s/));", "test_cases": [["3 8 5", "Yes"], ["7 3 1", "No"], ["10 2 4", "Yes"], ["31 41 59", "No"]], "original": "\nfunction Main(input) {\n  // 数字\n  var A = parseInt(input[0], 10);\n  var B = parseInt(input[1], 10);\n  var C = parseInt(input[2], 10);\n  // 文字\n  // var A = input[0];\n\n  if (A < B) {\n    if (A < C && C < B) {\n      console.log('Yes');\n    } else {\n      console.log('No');\n    }\n  } else {\n    if (B < C && C < A) {\n      console.log('Yes');\n    } else {\n      console.log('No');\n    }\n  }\n}\n \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(/\\n|\\s/));", "language": "JavaScript"}
{"filename": "p03139_1", "type": "JavaScript", "obfuscated": "function main(_0x1a80f6) {\n    _0x1a80f6 = _0x1a80f6['split']('\\x20');\n    var _0x3a160e = _0x1a80f6[0x1] < _0x1a80f6[0x2] ? _0x1a80f6[0x1] : _0x1a80f6[0x2];\n    var _0x4dbb6d = _0x1a80f6[0x0] - _0x1a80f6[0x1] > _0x1a80f6[0x2] ? 0x0 : _0x1a80f6[0x2] - (_0x1a80f6[0x0] - _0x1a80f6[0x1]);\n    console['log'](_0x3a160e + '\\x20' + _0x4dbb6d);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 3 5", "3 0"], ["10 7 5", "5 2"], ["100 100 100", "100 100"]], "original": "function main(input) {\n  input = input.split(\" \");\n  var max = input[1] < input[2] ? input[1] : input[2];\n  var min = input[0]-input[1] > input[2] ? 0 : input[2]-(input[0]-input[1]);\n  console.log(max + \" \" + min);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03149_1", "type": "JavaScript", "obfuscated": "function Main(_0x4b9f35) {\n    tmp = _0x4b9f35['split']('\\x20');\n    a = 0x0;\n    b = 0x0;\n    c = 0x0;\n    d = 0x0;\n    for (var _0x12ce84 = 0x0; _0x12ce84 < 0x4; _0x12ce84++) {\n        if (tmp[_0x12ce84] == '1') {\n            a = 0x1;\n        }\n        if (tmp[_0x12ce84] == '9') {\n            b = 0x1;\n        }\n        if (tmp[_0x12ce84] == '7') {\n            c = 0x1;\n        }\n        if (tmp[_0x12ce84] == '4') {\n            d = 0x1;\n        }\n    }\n    if (a == 0x1 && b == 0x1 && c == 0x1 && d == 0x1) {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 7 9 4", "YES"], ["1 9 7 4", "YES"], ["1 2 9 1", "NO"], ["4 9 0 8", "NO"]], "original": "function Main(input) {\n\ttmp = input.split(\" \");\n\ta=0;\n\tb=0;\n\tc=0;\n\td=0;\n\tfor ( var i = 0 ; i < 4 ; i++ ){\n\t\tif(tmp[i]==\"1\"){\n\t\t\ta=1;\n\t\t}\n\t\tif(tmp[i]==\"9\"){\n\t\t\tb=1;\n\t\t}\n\t\tif(tmp[i]==\"7\"){\n\t\t\tc=1;\n\t\t}\n\t\tif(tmp[i]==\"4\"){\n\t\t\td=1;\n\t\t}\n\t}\n\tif(a==1 && b==1 && c==1 && d==1){\n\t\tconsole.log(\"YES\");\n\t}else{\n\t\tconsole.log(\"NO\");\n\t}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03475_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x2ac85c) {\n    _0x2ac85c = _0x2ac85c['split'](/\\n/);\n    const _0x56f7fd = ~~_0x2ac85c['shift']();\n    _0x2ac85c = _0x2ac85c['map'](_0x4d49da => _0x4d49da['split'](/\\s/)['map'](_0x281bd3 => ~~_0x281bd3));\n    let _0x178059 = '';\n    for (let _0x5033f2 = 0x0; _0x5033f2 < _0x2ac85c['length']; _0x5033f2++) {\n        let _0x246de8 = 0x0;\n        let _0x416a5c = 0x0;\n        for (let _0xba6058 = _0x5033f2; _0xba6058 < _0x2ac85c['length']; _0xba6058++) {\n            _0x246de8 += _0x246de8 > _0x2ac85c[_0xba6058][0x1] ? 0x0 : _0x2ac85c[_0xba6058][0x1] - _0x246de8;\n            _0x246de8 += _0x2ac85c[_0xba6058][0x0];\n        }\n        _0x178059 += _0x246de8 + '\\x0a';\n    }\n    _0x178059 += '0\\x0a';\n    console['log'](_0x178059);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n6 5 1\n1 10 1", "12\n11\n0"], ["4\n12 24 6\n52 16 4\n99 2 2", "187\n167\n101\n0"], ["4\n12 13 1\n44 17 17\n66 4096 64", "4162\n4162\n4162\n0"]], "original": "\"use strict\";\n\nfunction main(input) {\n  //かかる秒数　開業からの運行開始　運行間隔\n  input = input.split(/\\n/);\n  const n = ~~input.shift();\n  input = input.map(v => v.split(/\\s/).map(x => ~~x));\n\n  //[[12, 13, 1], [44, 17, 17], [66, 4096, 64]]\n  let ans = \"\";\n  for (let i = 0; i < input.length; i++) {\n    let time = 0;\n    let wait = 0;\n    for (let j = i; j < input.length; j++) {\n      time += time > input[j][1] ? 0 : input[j][1] - time;\n      time += input[j][0];\n    }\n    ans += time + \"\\n\";\n  }\n\n  ans += \"0\\n\";\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03564_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nfunction Main(_0x4d5bfa) {\n    var _0x569575 = _0x4d5bfa['split']('\\x0a');\n    var _0x480909 = _0x569575[0x0]['split']('\\x20');\n    var _0x4a9521 = _0x569575[0x1]['split']('\\x20');\n    var _0x5f2415 = Number(_0x480909[0x0]);\n    var _0x4acb59 = Number(_0x4a9521[0x0]);\n    var _0x312b44 = 0x1;\n    for (var _0x2fc1b1 = 0x1; _0x2fc1b1 <= _0x5f2415; _0x2fc1b1++) {\n        if (_0x312b44 < _0x4acb59)\n            _0x312b44 *= 0x2;\n        else\n            _0x312b44 += _0x4acb59;\n    }\n    console['log'](_0x312b44);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n3", "10"], ["10\n10", "76"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \n// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がline1, 2行目がline2, …に入る\n  var tmp = input.split(\"\\n\");\n  var line0 = tmp[0].split(\" \");\n  var line1 = tmp[1].split(\" \");\n  //var line2 = tmp[2].split(\" \");\n  //var line3 = tmp[3].split(\" \");\n\n  var n = Number(line0[0]);\n  var k = Number(line1[0]);\n//  var b = Number(line0[2]);\n\n  var ans = 1;\n\n  //console.log( n+\" \"+ k +\" \"+ \" hoge \")\n  \n  for(var i=1; i <=n; i++){\n    if(ans < k) ans *= 2;\n    else ans += k;\n  }\n\n  console.log(ans);\n  \n  \n\n\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03699_1", "type": "JavaScript", "obfuscated": "function Main(_0x52a465) {\n    _0x52a465 = _0x52a465['trim']()['split']('\\x0a')['map'](_0x25e961 => Number(_0x25e961));\n    var _0x460510 = _0x52a465[0x0];\n    _0x52a465['shift']();\n    _0x52a465['sort'](function (_0xb75e92, _0x4e1edc) {\n        return _0xb75e92 - _0x4e1edc;\n    });\n    var _0x231618 = 0x0;\n    for (var _0x58bb28 = 0x0; _0x58bb28 < _0x52a465['length']; _0x58bb28++) {\n        _0x231618 += _0x52a465[_0x58bb28];\n    }\n    var _0x71de78 = 0x0;\n    while (_0x231618 % 0xa == 0x0 && _0x231618 != 0x0) {\n        _0x231618 -= _0x52a465[_0x71de78];\n        _0x71de78++;\n    }\n    console['log'](_0x231618);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n5\n10\n15", "25"], ["3\n10\n10\n15", "35"], ["3\n10\n20\n30", "0"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map((input)=>Number(input));\n  var len = input[0];\n  input.shift();\n  input.sort(function(a,b){\n  \treturn a - b;\n  });\n  var sum = 0;\n  for(var i = 0; i < input.length; i++){\n    sum += input[i];\n  }\n  var count = 0;\n  while(sum % 10 == 0 && sum != 0){\n     sum -= input[count];\n    count++;\n  }\n  console.log(sum);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03730_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2847d6 => {\n    let _0x4c1444 = _0x2847d6['split']('\\x0a')[0x0]['split']('\\x20')['map'](_0x1ef1ea => Number(_0x1ef1ea));\n    let _0x26a7aa = _0x4c1444[0x0], _0x3c7db7 = _0x4c1444[0x1], _0x35edd0 = _0x4c1444[0x2];\n    let _0x6ac359 = 'NO';\n    for (let _0xb5e6cc = 0x1; _0xb5e6cc <= _0x3c7db7; _0xb5e6cc++) {\n        if (_0x26a7aa * _0xb5e6cc % _0x3c7db7 == _0x35edd0) {\n            _0x6ac359 = 'YES';\n        }\n    }\n    console['log'](_0x6ac359);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 5 1", "YES"], ["2 2 1", "NO"], ["1 100 97", "YES"], ["40 98 58", "YES"], ["77 42 36", "NO"]], "original": "\"use strict\";\n    \nconst main = arg => {\n  // とりあえず切り分け\n  let Nums = arg.split(\"\\n\")[0].split(\" \").map(n => Number(n));  \n  let A = Nums[0],B = Nums[1], C = Nums[2];\n  let ans = \"NO\";\n  // 解説見ての回答\n  for(let i = 1; i<= B; i++){\n  \tif(A*i % B == C){\n\t\tans = \"YES\"\n    }\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03804_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nconst NM = input[0x0]['split']('\\x20')['map'](Number);\nconst N = NM[0x0];\nconst M = NM[0x1];\nconst As = input['slice'](0x1, N + 0x1);\nconst Bs = input['slice'](N + 0x1, N + M + 0x1);\nfor (let ax = 0x0; ax < N - M; ax++) {\n    for (let ay = 0x0; ay < N - M; ay++) {\n        let flag = !![];\n        for (let bx = 0x0; bx < M; bx++) {\n            for (let by = 0x0; by < M; by++) {\n                if (As[ax + bx][ay + by] !== Bs[bx][by]) {\n                    flag = ![];\n                    break;\n                }\n            }\n            if (!flag)\n                break;\n        }\n        if (flag) {\n            console['log']('Yes');\n            process['exit'](0x0);\n        }\n    }\n}\nconsole['log']('No');", "test_cases": [["3 2\n#.#\n.#.\n#.#\n#.\n.#", "Yes"], ["4 1\n....\n....\n....\n....\n#", "No"]], "original": "'use strict';\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nconst NM = input[0].split(' ').map(Number);\nconst N = NM[0];\nconst M = NM[1];\nconst As = input.slice(1, N + 1);\nconst Bs = input.slice(N + 1, N + M + 1);\n\nfor (let ax = 0; ax < N - M; ax++) {\n    for (let ay = 0; ay < N - M; ay++) {\n        let flag = true;\n        for (let bx = 0; bx < M; bx++) {\n            for (let by = 0; by < M; by++) {\n                if (As[ax + bx][ay + by] !== Bs[bx][by]) {\n                    flag = false;\n                    break;\n                }\n            }\n            if (!flag) break;\n        }\n\n        if (flag) {\n            console.log('Yes');\n            process.exit(0);\n        }\n    }\n}\nconsole.log('No');", "language": "JavaScript"}
{"filename": "p02263_1", "type": "JavaScript", "obfuscated": "let content = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', _0x2e7a11 => {\n    content += _0x2e7a11;\n});\nprocess['stdin']['on']('end', () => {\n    const _0x501f9c = [];\n    const _0x1730b9 = content['trim']()['split']('\\x20')['map'](_0x54b5e2 => {\n        const _0x4a1f74 = parseInt(_0x54b5e2, 0xa);\n        return isNaN(_0x4a1f74) ? _0x54b5e2 : _0x4a1f74;\n    });\n    const _0x121136 = '+-/*'['split']('');\n    for (const _0x55a22a of _0x1730b9) {\n        if (_0x121136['includes'](_0x55a22a)) {\n            const _0x592097 = _0x501f9c['pop']();\n            const _0x3dd96e = _0x501f9c['pop']();\n            _0x501f9c['push'](expr(_0x55a22a, _0x3dd96e, _0x592097));\n        } else {\n            _0x501f9c['push'](_0x55a22a);\n        }\n    }\n    console['log'](_0x501f9c['pop']());\n});\nconst expr = (_0x548b6c, _0x446d75, _0x4a49fb) => {\n    switch (_0x548b6c) {\n    case '*':\n        return _0x446d75 * _0x4a49fb;\n    case '/':\n        return _0x446d75 / _0x4a49fb;\n    case '+':\n        return _0x446d75 + _0x4a49fb;\n    case '-':\n        return _0x446d75 - _0x4a49fb;\n    }\n};", "test_cases": [["1 2 +", "3"], ["1 2 + 3 4 - *", "-3"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\n\nprocess.stdin.on('end', () => {\n  const stack = [];\n  const tokens = content\n    .trim()\n    .split(' ')\n    .map(line => {\n      const num = parseInt(line, 10);\n      return isNaN(num) ? line : num;\n    });\n\n  const opTokens = '+-/*'.split('');\n  for (const token of tokens) {\n    if (opTokens.includes(token)) {\n      const b = stack.pop();\n      const a = stack.pop();\n      stack.push(expr(token, a, b));\n    } else {\n      stack.push(token);\n    }\n\n  }\n\n  console.log(stack.pop());\n});\n\nconst expr = (op, a, b) => {\n  switch(op) {\n    case '*':\n      return a * b;\n    case '/':\n      return a / b;\n    case '+':\n      return a + b;\n    case '-':\n      return a - b;\n  }\n};\n", "language": "JavaScript"}
{"filename": "p02609_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n(_0x41df9d => {\n    const _0x18e96d = _0x41df9d['split']('\\x0a');\n    const _0x20056f = _0x18e96d[0x0] - 0x0;\n    const _0x5b5f1c = _0x18e96d[0x1];\n    const _0x4dca03 = _0x23f83d => {\n        let _0x45785b = 0x0;\n        do {\n            _0x23f83d & 0x1 ? _0x45785b++ : _0x45785b;\n        } while (_0x23f83d = _0x23f83d >>> 0x1);\n        return _0x45785b;\n    };\n    const _0x2fa789 = _0x54f616 => {\n        if (_0x54f616 === 0x0) {\n            return 0x0;\n        }\n        let _0x3be9cd = 0x1;\n        while (_0x54f616 %= _0x4dca03(_0x54f616))\n            _0x3be9cd++;\n        return _0x3be9cd;\n    };\n    const _0x58c877 = parseInt(_0x5b5f1c, 0x2);\n    const _0xb8b8e3 = _0x4dca03(_0x58c877) - 0x1;\n    const _0x3a87d7 = _0x4dca03(_0x58c877) + 0x1;\n    for (let _0x2c635e = 0x0; _0x2c635e < _0x20056f; _0x2c635e++) {\n        let _0x5bec35 = _0x58c877 ^ Math['pow'](0x2, _0x20056f - _0x2c635e - 0x1);\n        if (_0x5bec35 === 0x0) {\n            console['log'](0x0);\n        } else {\n            console['log'](_0x2fa789(_0x5bec35 % (_0x5b5f1c[_0x2c635e] === '1' ? _0xb8b8e3 : _0x3a87d7)) + 0x1);\n        }\n    }\n})(input);", "test_cases": [["3\n011", "2\n1\n1"], ["23\n00110111001011011001110", "2\n1\n2\n2\n1\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n1\n3"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n\n    const lines = input.split('\\n')\n    const N = lines[0] - 0\n    const X = lines[1]\n\n    const popcount = n => {\n        let count = 0\n        do {\n            n & 1 ? count++ : count\n        } while  (n = n >>> 1)\n        return count\n    }\n\n    const f = n => {\n        if (n === 0) {\n            return 0\n        }\n        let count = 1\n        while (n %= popcount(n)) count++\n        return count\n    }\n\n    const x = parseInt(X, 2)\n    const pr = popcount(x) - 1\n    const nx = popcount(x) + 1\n    for (let i = 0; i < N; i++) {\n        let n = x ^ Math.pow(2, N - i - 1)\n        if (n === 0) {\n            console.log(0)\n        } else {\n            console.log(f(n % (X[i] === '1' ? pr : nx)) + 1)\n        }\n    }\n\n})(input)\n", "language": "JavaScript"}
{"filename": "p02925_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x17122c) {\n    const _0x3dc891 = _0x17122c['split']('\\x0a');\n    const _0x492938 = Number(_0x3dc891['shift']());\n    const _0x210308 = _0x3dc891['map'](_0x370b6a => _0x370b6a['split']('\\x20')['map'](_0x15e35e => parseInt(_0x15e35e, 0xa)));\n    console['log'](solve(_0x210308));\n}\nfunction solve(_0x59425f) {\n    const _0x13808d = _0x59425f['length'];\n    function _0x335f97() {\n        let _0x390908 = ![];\n        for (let _0x207a53 = 0x0; _0x207a53 < _0x13808d; ++_0x207a53) {\n            const _0x26f3f2 = _0x59425f[_0x207a53][_0x75bd88[_0x207a53]] - 0x1;\n            if (isNaN(_0x26f3f2))\n                continue;\n            if (_0x59425f[_0x26f3f2][_0x75bd88[_0x26f3f2]] - 0x1 === _0x207a53) {\n                _0x390908 = !![];\n                ++_0x75bd88[_0x207a53];\n                ++_0x75bd88[_0x26f3f2];\n            }\n        }\n        return _0x390908;\n    }\n    function _0x38de08() {\n        return _0x75bd88['some'](_0x125eb0 => _0x125eb0 < _0x13808d - 0x1);\n    }\n    const _0x75bd88 = [];\n    for (let _0x2f10a5 = 0x0; _0x2f10a5 < _0x13808d; ++_0x2f10a5) {\n        _0x75bd88[_0x2f10a5] = 0x0;\n    }\n    let _0x3f5a89 = 0x1;\n    while (_0x38de08()) {\n        const _0x18cd33 = _0x335f97();\n        if (_0x18cd33 === ![])\n            return -0x1;\n        ++_0x3f5a89;\n    }\n    return _0x3f5a89;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n2 3\n1 3\n1 2", "3"], ["4\n2 3 4\n1 3 4\n4 1 2\n3 1 2", "4"], ["3\n2 3\n3 1\n1 2", "-1"]], "original": "'use strict';\n\nfunction main(stdin) {\n  const input = stdin.split('\\n');\n  const N = Number(input.shift());\n  const params = input.map(p => p.split(' ').map(v => parseInt(v, 10)));\n  \n  console.log(solve(params));\n}\n\nfunction solve(params) {\n  const l = params.length;\n\n  function matching() {\n    let matched = false;\n\n    for (let i = 0; i < l; ++i) {\n      const op = params[i][cur[i]] - 1;\n      if (isNaN(op)) continue;\n      if (params[op][cur[op]] - 1 === i) {\n        matched = true;\n        ++cur[i];\n        ++cur[op];\n      }\n    }\n\n    return matched;\n  }\n\n  function isNotCompleted() {\n    return cur.some(v => v < l - 1);\n  }\n\n  const cur = [];\n  for (let i = 0; i < l; ++i) {\n    cur[i] = 0;\n  }\n\n  let day = 1;\n  while (isNotCompleted()) {\n    const res = matching();\n    if (res === false) return -1;\n    ++day;\n  }\n\n  return day;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim());", "language": "JavaScript"}
{"filename": "p03111_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5b56b6) {\n    _0x5b56b6 = _0x5b56b6['trim']()['split']('\\x0a');\n    let _0x2bc295 = _0x5b56b6['shift']()['split']('\\x20')['map'](_0x816878 => Number(_0x816878));\n    const _0x24428e = _0x2bc295['shift']();\n    _0x5b56b6 = _0x5b56b6['map'](_0x2488aa => Number(_0x2488aa))['sort']((_0xb6f487, _0x26c336) => _0x26c336 - _0xb6f487);\n    const _0x2a47de = Math['pow'](0xa, 0x9);\n    const _0x23e623 = (_0x2b3be3, _0x224d92, _0x3b7c1b, _0x35ac3d) => {\n        if (_0x2b3be3 === _0x24428e) {\n            if (Math['min'](_0x224d92, _0x3b7c1b, _0x35ac3d) > 0x0) {\n                return Math['abs'](_0x224d92 - _0x2bc295[0x0]) + Math['abs'](_0x3b7c1b - _0x2bc295[0x1]) + Math['abs'](_0x35ac3d - _0x2bc295[0x2]) - 0x1e;\n            }\n            return _0x2a47de;\n        }\n        return Math['min'](_0x23e623(_0x2b3be3 + 0x1, _0x224d92, _0x3b7c1b, _0x35ac3d), _0x23e623(_0x2b3be3 + 0x1, _0x224d92 + _0x5b56b6[_0x2b3be3], _0x3b7c1b, _0x35ac3d) + 0xa, _0x23e623(_0x2b3be3 + 0x1, _0x224d92, _0x3b7c1b + _0x5b56b6[_0x2b3be3], _0x35ac3d) + 0xa, _0x23e623(_0x2b3be3 + 0x1, _0x224d92, _0x3b7c1b, _0x35ac3d + _0x5b56b6[_0x2b3be3]) + 0xa);\n    };\n    console['log'](_0x23e623(0x0, 0x0, 0x0, 0x0));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 100 90 80\n98\n40\n30\n21\n80", "23"], ["8 100 90 80\n100\n100\n90\n90\n90\n80\n80\n80", "0"], ["8 1000 800 100\n300\n333\n400\n444\n500\n555\n600\n666", "243"]], "original": "'use strict'\nfunction main(input) {\n  input = input.trim().split('\\n')\n  let ABC = input.shift().split(' ').map(v => Number(v))\n  const N = ABC.shift()\n  input = input.map(v => Number(v)).sort((a, b) => b - a)\n  const INF = Math.pow(10, 9)\n\n  const dfs = (cur, a, b, c) => {\n    if (cur === N) {\n      if (Math.min(a, b, c) > 0) {\n        return Math.abs(a - ABC[0]) + Math.abs(b - ABC[1]) + Math.abs(c - ABC[2]) - 30\n      }\n      return INF\n    }\n    return Math.min(\n      dfs(cur+1, a, b, c),\n      dfs(cur+1, a + input[cur], b, c) + 10,\n      dfs(cur+1, a, b + input[cur], c) + 10,\n      dfs(cur+1, a, b, c + input[cur]) + 10\n    )\n  }\n  console.log(dfs(0,0,0,0))\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03172_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst mod = 0x3b9aca00 + 0x7;\nfunction solve(_0x317ea2, _0x647635, _0x5c5b19) {\n    if (_0x647635 === 0x0) {\n        return 0x1;\n    }\n    var _0x3a1321 = new Array(_0x647635 + 0x1)['fill'](0x0);\n    var _0x3aa1c6 = new Array(_0x317ea2)['fill'](0x0)['map'](_0x52e589 => new Array(_0x647635 + 0x1)['fill'](0x0));\n    for (var _0x3b120d = _0x317ea2 - 0x1; _0x3b120d >= 0x0; _0x3b120d--) {\n        for (var _0x4e5493 = 0x0; _0x4e5493 <= _0x647635; _0x4e5493++) {\n            if (_0x3b120d === _0x317ea2 - 0x1) {\n                _0x3a1321[_0x4e5493] = _0x4e5493 <= _0x5c5b19[_0x3b120d] ? 0x1 : 0x0;\n                _0x3aa1c6[_0x3b120d][_0x4e5493] = _0x4e5493 - 0x1 >= 0x0 ? _0x3aa1c6[_0x3b120d][_0x4e5493 - 0x1] % mod + _0x3a1321[_0x4e5493] % mod : _0x3a1321[_0x4e5493] % mod;\n            } else {\n                _0x3a1321[_0x4e5493] = _0x4e5493 <= _0x5c5b19[_0x3b120d] ? _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493] % mod : _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493] % mod - _0x3aa1c6[_0x3b120d + 0x1][_0x4e5493 - _0x5c5b19[_0x3b120d] - 0x1] % mod;\n                _0x3aa1c6[_0x3b120d][_0x4e5493] = _0x4e5493 - 0x1 >= 0x0 ? _0x3aa1c6[_0x3b120d][_0x4e5493 - 0x1] % mod + _0x3a1321[_0x4e5493] % mod : _0x3a1321[_0x4e5493] % mod;\n            }\n        }\n    }\n    return _0x3a1321[_0x647635] % mod;\n}\nfunction main(_0x239e4f) {\n    var _0x13194e = _0x239e4f['split']('\\x0a');\n    var _0x120da5 = _0x13194e[0x0]['split']('\\x20')['map'](_0x5bae29 => parseInt(_0x5bae29));\n    var _0x5c12a8 = _0x120da5[0x0];\n    var _0x1f2529 = _0x120da5[0x1];\n    var _0x51e9ad = _0x13194e[0x1]['split']('\\x20')['map'](_0x27d383 => parseInt(_0x27d383));\n    var _0x45f01e = solve(_0x5c12a8, _0x1f2529, _0x51e9ad);\n    console['log'](_0x45f01e);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4\n1 2 3", "5"], ["1 10\n9", "0"], ["2 0\n0 0", "1"], ["4 100000\n100000 100000 100000 100000", "665683269"]], "original": "'use strict'\n\nconst mod = 1e9 + 7\n\nfunction solve(N, K, A) {\n  if (K === 0) {\n    return 1\n  }\n  var dp = new Array(K+1).fill(0)\n  var prefix = new Array(N).fill(0).map(e => new Array(K+1).fill(0))\n\n  for (var i = N-1; i >= 0; i--) {\n    for (var j = 0; j <= K; j++) {\n      if (i === (N-1)) {\n        dp[j] = j <= A[i] ? 1 : 0\n        prefix[i][j] = (j - 1) >= 0 ? (prefix[i][j-1] % mod) + (dp[j] % mod) : dp[j] % mod\n      } else {\n        dp[j] = j <= A[i] ? prefix[i+1][j] % mod : (prefix[i+1][j] % mod) - (prefix[i+1][j - A[i] - 1] % mod)\n        prefix[i][j] = (j - 1) >= 0 ? (prefix[i][j-1] % mod) + (dp[j] % mod) : dp[j] % mod\n      }\n    }\n  }\n  return dp[K] % mod\n}\n\nfunction main(input) {\n  var lines = input.split(\"\\n\")\n  var NK = lines[0].split(' ').map(l => parseInt(l))\n  var N = NK[0]\n  var K = NK[1]\n  var A = lines[1].split(' ').map(l => parseInt(l))\n  var ans = solve(N, K, A)\n  console.log(ans)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03196_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nN = l['shift']() * 0x1;\nP = l['shift']() * 0x1;\n_primFactors = function (_0x23ba07) {\n    var _0x1cbdec = [];\n    if (_0x23ba07 == 0x1) {\n        return [{\n                'n': 0x1,\n                'r': 0x1\n            }];\n    }\n    s = _0x23ba07;\n    var _0x4aed15 = 0x2;\n    r = 0x0;\n    if (_0x23ba07 % _0x4aed15 === 0x0) {\n        do {\n            r++;\n            _0x23ba07 /= _0x4aed15;\n        } while (_0x23ba07 % _0x4aed15 === 0x0);\n        _0x1cbdec['push']({\n            'n': _0x4aed15,\n            'r': r\n        });\n    }\n    for (_0x4aed15 = 0x3; _0x4aed15 * _0x4aed15 <= s; _0x4aed15 += 0x2) {\n        r = 0x0;\n        if (_0x23ba07 % _0x4aed15 === 0x0) {\n            do {\n                r++;\n                _0x23ba07 /= _0x4aed15;\n            } while (_0x23ba07 % _0x4aed15 === 0x0);\n            _0x1cbdec['push']({\n                'n': _0x4aed15,\n                'r': r\n            });\n        }\n    }\n    if (_0x23ba07 > 0x1) {\n        _0x1cbdec['push']({\n            'n': _0x23ba07,\n            'r': 0x1\n        });\n    }\n    return _0x1cbdec;\n};\narr = _primFactors(P);\nans = 0x1;\nfor (i = 0x0; i < arr['length']; i++) {\n    a = arr[i];\n    r = a['r'];\n    while (r >= N) {\n        ans *= a['n'];\n        r -= N;\n    }\n}\nconsole['log'](ans);", "test_cases": [["3 24", "2"], ["5 1", "1"], ["1 111", "111"], ["4 972439611840", "206"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\nN = l.shift() * 1\nP = l.shift() * 1\n\n// 素因数分解\n_primFactors = function(n) {\n  var arr = []\n  if (n == 1) {\n      return [{n:1, r:1}]\n  }\n  s = n\n\n  var i = 2\n  r = 0\n  if (n % i === 0) {\n    do {\n      r++\n      n /= i\n    } while(n%i===0)\n    arr.push({n: i, r: r})\n  }\n  \n  for (i = 3; i*i <= s; i+=2) {\n    r = 0\n    if (n % i === 0) {\n       do {\n           r++\n           n /= i\n       } while(n%i===0)\n       arr.push({n: i, r: r})\n    }\n  }\n  if (n > 1) {\n      arr.push({n: n, r: 1})\n  }\n  return arr\n}\n\narr = _primFactors(P)\nans = 1\nfor (i=0; i<arr.length;i++) {\n    a = arr[i]\n    r = a.r\n    while (r>=N) {\n        ans *= a.n\n        r -= N\n    }\n}\nconsole.log(ans)", "language": "JavaScript"}
{"filename": "p03265_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x1a701e => {\n    lines['push'](_0x1a701e);\n});\nreader['on']('close', () => {\n    var _0x56ad3a = lines[0x0]['split']('\\x20');\n    var _0x1486df = Number(_0x56ad3a[0x0]);\n    var _0x89632c = Number(_0x56ad3a[0x1]);\n    var _0x46c413 = Number(_0x56ad3a[0x2]);\n    var _0x9cae1f = Number(_0x56ad3a[0x3]);\n    var _0x5855ff = [];\n    _0x5855ff['push'](_0x46c413 + (_0x89632c - _0x9cae1f));\n    _0x5855ff['push'](_0x46c413 + _0x9cae1f - _0x1486df);\n    _0x5855ff['push'](_0x1486df + _0x89632c - _0x9cae1f);\n    _0x5855ff['push'](_0x46c413 + _0x89632c - _0x1486df);\n    console['log'](_0x5855ff['join']('\\x20'));\n});", "test_cases": [["0 0 0 1", "-1 1 -1 0"], ["2 3 6 6", "3 10 -1 7"], ["31 -41 -59 26", "-126 -64 -36 -131"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = []\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nreader.on('line', (line) => {\n  lines.push(line);\n});\n\nreader.on('close', () => {\n var abcd = lines[0].split(' ');\n var one = Number(abcd[0]);\n var two = Number(abcd[1]);\n var three = Number(abcd[2]);\n var four = Number(abcd[3]);\n\n var ans = [];\n ans.push(three + (two - four));\n ans.push((three + four) - one);\n ans.push((one + two) - four);\n ans.push((three + two) - one);\n\n console.log(ans.join(' '));\n \n});", "language": "JavaScript"}
{"filename": "p03598_1", "type": "JavaScript", "obfuscated": "function Main(_0x5c7756) {\n    var _0x5c7756 = _0x5c7756['split']('\\x0a');\n    var _0x553832 = _0x5c7756[0x2]['split']('\\x20');\n    var _0x1a96e5 = 0x0;\n    for (var _0x909856 = 0x0; _0x909856 < _0x5c7756[0x0]; _0x909856++) {\n        var _0x559cd9 = _0x553832[_0x909856];\n        var _0x3ec8ab = _0x5c7756[0x1] - _0x553832[_0x909856];\n        var _0x1a96e5 = _0x1a96e5 + (_0x559cd9 < _0x3ec8ab ? _0x559cd9 : _0x3ec8ab) * 0x2;\n    }\n    console['log'](_0x1a96e5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1\n10\n2", "4"], ["2\n9\n3 6", "12"], ["5\n20\n11 12 9 17 12", "74"]], "original": "function Main(input) {\n  var input = input.split('\\n');\n\n  var ballXList = input[2].split(' ');\n  var ret = 0;\n  for (var i = 0; i < input[0]; i++) {\n    var aDistance = ballXList[i];\n    var bDistance = input[1] - ballXList[i];\n    var ret = ret + (aDistance < bDistance ? aDistance : bDistance) * 2;\n  }\n\n  console.log(ret);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03767_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4b3987) {\n    const _0x1ec926 = _0x4b3987['trim']()['split']('\\x0a');\n    const _0x5be66d = Number(_0x1ec926[0x0]['trim']());\n    const _0x5ed9b0 = _0x1ec926[0x1]['trim']()['split']('\\x20')['map'](Number)['sort']((_0x211ee4, _0x1e8bd4) => _0x1e8bd4 - _0x211ee4);\n    let _0x7c6513 = 0x0;\n    for (let _0x42cf4 = 0x0; _0x42cf4 < _0x5be66d; _0x42cf4++) {\n        _0x7c6513 += _0x5ed9b0[_0x42cf4 * 0x2 + 0x1];\n    }\n    console['log'](_0x7c6513);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n5 2 8 5 1 5", "10"], ["10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "10000000000"]], "original": "// https://atcoder.jp/contests/agc012/tasks/agc012_a\n\"use strict\";\nfunction Main(input) {\n  const params = input.trim().split(\"\\n\");\n  const N = Number(params[0].trim());\n  const sortedA = params[1]\n    .trim()\n    .split(\" \")\n    .map(Number)\n    .sort((a, b) => b - a);\n\n  let total = 0;\n  for (let i = 0; i < N; i++) {\n    total += sortedA[i * 2 + 1];\n  }\n\n  console.log(total);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03785_1", "type": "JavaScript", "obfuscated": "function Main(_0x5cfe15) {\n    var _0x5cfe15 = _0x5cfe15['split']('\\x0a');\n    var _0x45fdea = _0x5cfe15[0x0]['split']('\\x20')['map'](_0xea275e => parseInt(_0xea275e, 0xa));\n    var _0x3620f2 = _0x5cfe15['slice'](0x1)['map'](_0x49823c => parseInt(_0x49823c, 0xa))['sort']((_0x5a231f, _0x5693e6) => _0x5a231f - _0x5693e6);\n    var _0x526e80 = 0x1;\n    var _0x5bc6d8 = _0x45fdea[0x1];\n    for (var _0x390cb6 = 0x1; _0x390cb6 < _0x45fdea[0x0]; _0x390cb6++) {\n        if (_0x3620f2[_0x390cb6 - 0x1] <= _0x3620f2[_0x390cb6] && _0x3620f2[_0x390cb6] <= _0x3620f2[_0x390cb6 - 0x1] + _0x45fdea[0x2]) {\n            _0x5bc6d8--;\n            if (_0x5bc6d8 === 0x0) {\n                _0x526e80++;\n                _0x5bc6d8 = _0x45fdea[0x1];\n            }\n        } else {\n            _0x526e80++;\n            _0x5bc6d8 = _0x45fdea[0x1];\n        }\n    }\n    console['log'](_0x526e80);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3 5\n1\n2\n3\n6\n12", "3"], ["6 3 3\n7\n6\n2\n8\n10\n6", "3"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var zero = s[0].split(\" \").map(e => parseInt(e, 10));\n  var t = s.slice(1).map(e => parseInt(e, 10)).sort((a, b) => a - b);\n  var cnt = 1;\n  var c = zero[1];\n  for (var i = 1; i < zero[0]; i++) {\n    if (t[i - 1] <= t[i] && t[i] <= t[i - 1] + zero[2]) {\n      c--;\n      if (c === 0) {\n        cnt++;\n        c = zero[1];\n      }\n    } else {\n      cnt++;\n      c = zero[1];\n    }\n  }\n  console.log(cnt);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02257_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nArr['shift']();\nArr['sort'](function (_0x5372ab, _0x3c8368) {\n    return _0x5372ab - _0x3c8368;\n});\nvar max = Arr[Arr['length'] - 0x1];\nvar arr = [0x2];\nfor (var i = 0x3; i <= max; i = i + 0x2) {\n    var a = !![];\n    var sqrt = ~~Math['sqrt'](i) + 0x1;\n    for (var j = 0x0; j < arr['length']; j++) {\n        if (arr[j] > sqrt)\n            break;\n        if (i % arr[j] == 0x0) {\n            a = ![];\n            break;\n        }\n    }\n    if (a)\n        arr['push'](i);\n}\nvar num = 0x0;\nvar f = 0x0;\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (Arr[i] != 0x2 && Arr[i] % 0x2 == 0x0)\n        continue;\n    var index = arr['indexOf'](Arr[i], f);\n    if (index != -0x1) {\n        f = index;\n        num++;\n    }\n}\nconsole['log'](num);", "test_cases": [["5\n2\n3\n4\n5\n6", "3"], ["11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n \nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nArr.shift();\nArr.sort(function(a,b){return a-b;});\nvar max=Arr[Arr.length-1];\nvar arr=[2];\n \nfor(var i=3;i<=max;i=i+2){\n   var a=true;\n   var sqrt=~~(Math.sqrt(i))+1;\n   for(var j=0;j<arr.length;j++){\n      if(arr[j]>sqrt)break;\n      if(i%arr[j]==0){\n         a=false;\n         break;\n      }\n   }\n   if(a)arr.push(i);\n}\n \nvar num=0;\nvar f=0;\n \nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]!=2 && Arr[i]%2==0)continue;\n   var index=arr.indexOf(Arr[i],f);\n   if(index!=-1){\n      f=index;\n      num++;\n   }\n}\nconsole.log(num);", "language": "JavaScript"}
{"filename": "p02267_1", "type": "JavaScript", "obfuscated": "function Main(_0x49fec1) {\n    _0x49fec1 = _0x49fec1['split']('\\x0a');\n    var _0x11b3e6 = parseInt(_0x49fec1[0x0], 0xa);\n    var _0x568f81 = parseInt(_0x49fec1[0x2], 0xa);\n    _0x49fec1[0x1] = _0x49fec1[0x1]['split']('\\x20');\n    _0x49fec1[0x3] = _0x49fec1[0x3]['split']('\\x20');\n    var _0x1e2bd9 = Array(_0x11b3e6), _0x35a7a7 = Array(_0x568f81);\n    for (var _0x5de1a0 = 0x0; _0x5de1a0 < _0x11b3e6; _0x5de1a0++) {\n        _0x1e2bd9[_0x5de1a0] = parseInt(_0x49fec1[0x1][_0x5de1a0], 0xa);\n    }\n    for (var _0x5de1a0 = 0x0; _0x5de1a0 < _0x568f81; _0x5de1a0++) {\n        _0x35a7a7[_0x5de1a0] = parseInt(_0x49fec1[0x3][_0x5de1a0], 0xa);\n    }\n    var _0x27b44b = 0x0;\n    for (var _0x5de1a0 = 0x0; _0x5de1a0 < _0x568f81; _0x5de1a0++) {\n        var _0x1e62d0;\n        for (_0x1e62d0 = 0x0; _0x1e62d0 < _0x11b3e6; _0x1e62d0++) {\n            if (_0x1e2bd9[_0x1e62d0] == _0x35a7a7[_0x5de1a0])\n                break;\n        }\n        if (_0x1e62d0 < _0x11b3e6)\n            _0x27b44b++;\n    }\n    console['log'](_0x27b44b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 2 3 4 5\n3\n3 4 1", "3"], ["3\n3 1 2\n1\n5", "0"], ["5\n1 1 2 2 3\n2\n1 2", "2"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var n = parseInt(input[0],10);\n    var q = parseInt(input[2],10);\n    input[1] = input[1].split(\" \");\n    input[3] = input[3].split(\" \");\n    var s = Array(n),t = Array(q);\n    for(var i = 0;i < n;i++){\n        s[i] = parseInt(input[1][i],10);\n    }\n    for(var i = 0;i < q;i++){\n        t[i] = parseInt(input[3][i],10);\n    }\n    var count = 0;\n\n    for(var i = 0;i < q;i++){\n        var j;\n        for(j = 0;j < n;j++){\n           if(s[j] == t[i])\n                break;\n        }\n        if(j < n)\n            count++;\n    }\n    console.log(count);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p02410_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split'](/\\n/g);\nvar n = +lines[0x0]['split']('\\x20')[0x0];\nvar m = +lines[0x0]['split']('\\x20')[0x1];\nvar A = lines['slice'](0x1, m);\nvar b = lines['slice'](m, m + m);\nvar ans;\nfor (var i = 0x0; i < n; i++) {\n    ans = 0x0;\n    for (var j = 0x0; j < m; j++) {\n        ans += A[i]['split']('\\x20')[j] * b[j];\n    }\n    console['log'](ans);\n}", "test_cases": [["3 4\n1 2 0 1\n0 3 0 1\n4 1 1 0\n1\n2\n3\n0", "5\n6\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar lines = (input.trim()).split(/\\n/g);\nvar n = +lines[0].split(' ')[0];\nvar m = +lines[0].split(' ')[1];\n\nvar A = lines.slice(1, m);\nvar b = lines.slice(m, m + m);\n\nvar ans;\nfor (var i = 0; i < n; i++) {\n    ans = 0;\n    for (var j = 0; j < m; j++) {\n        ans += A[i].split(' ')[j] * b[j];\n    }\n    console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p02412_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\n/);\nfor (let i = 0x0; i < input['length']; i++) {\n    let [n, x] = input[i]['split']('\\x20')['map'](Number);\n    if (n === 0x0 && x === 0x0) {\n        break;\n    }\n    let count = 0x0;\n    for (let j = 0x1; j <= n; j++) {\n        for (let k = 0x1; k <= n; k++) {\n            if (j === k) {\n                break;\n            }\n            for (let l = 0x1; l <= n; l++) {\n                if (j === l || k === l || j === k) {\n                    break;\n                }\n                if (j + k + l === x) {\n                    count++;\n                }\n            }\n        }\n    }\n    console['log'](count);\n}", "test_cases": [["5 9\n0 0", "2"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/);\nfor (let i = 0; i < input.length; i++) {\n    let [n, x] = input[i].split(' ').map(Number);\n    if (n === 0 && x === 0) {\n        break;\n    }\n    let count = 0;\n    for (let j = 1; j <= n; j++) {\n        for (let k = 1; k <= n; k++) {\n             if (j === k) {\n                 break;\n             }\n            for (let l = 1; l <= n; l++)  {\n               if (j === l || k === l || j === k) {\n                   break;\n               }\n               if (j + k + l === x) {\n                  count++;\n               }\n           }\n        }\n    }\n    console.log(count)\n}\n\n", "language": "JavaScript"}
{"filename": "p02748_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x377b74 => {\n    _0x377b74 = _0x377b74['trim']()['split']('\\x0a');\n    const _0x477220 = parseInt(_0x377b74[0x0]['split']('\\x20')[0x0]);\n    const _0x5517ff = parseInt(_0x377b74[0x0]['split']('\\x20')[0x0]);\n    const _0x504867 = parseInt(_0x377b74[0x0]['split']('\\x20')[0x0]);\n    const _0x530368 = _0x377b74[0x1]['split']('\\x20')['map'](_0x18126b => parseInt(_0x18126b));\n    const _0x38b0fd = _0x377b74[0x2]['split']('\\x20')['map'](_0x1cf639 => parseInt(_0x1cf639));\n    const _0x570578 = _0x377b74['slice'](0x3, _0x504867 + 0x4);\n    const _0x546e51 = Math['min'](..._0x530368);\n    const _0x4f04e4 = Math['min'](..._0x38b0fd);\n    let _0x1241f8 = _0x546e51 + _0x4f04e4;\n    for (let _0x58ca29 in _0x570578) {\n        let _0x209b24 = parseInt(_0x570578[_0x58ca29]['split']('\\x20')[0x0]);\n        let _0x5899cf = parseInt(_0x570578[_0x58ca29]['split']('\\x20')[0x1]);\n        let _0x49b327 = parseInt(_0x570578[_0x58ca29]['split']('\\x20')[0x2]);\n        let _0x228862 = _0x530368[_0x209b24 - 0x1] + _0x38b0fd[_0x5899cf - 0x1] - _0x49b327;\n        if (_0x228862 <= _0x1241f8) {\n            _0x1241f8 = _0x228862;\n        }\n    }\n    console['log'](_0x1241f8);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 1\n3 3\n3 3 3\n1 2 1", "5"], ["1 1 2\n10\n10\n1 1 5\n1 1 10", "10"], ["2 2 1\n3 5\n3 5\n2 2 2", "6"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const A = parseInt(arg[0].split(\" \")[0]);\n    const B = parseInt(arg[0].split(\" \")[0]);\n    const M = parseInt(arg[0].split(\" \")[0]);\n    \n    const freezer = arg[1].split(\" \").map(n=>parseInt(n));\n    const renzi   = arg[2].split(\" \").map(n=>parseInt(n));\n    \n    const xyc = arg.slice(3, M + 4);\n    \n    const minFreeze = Math.min(...freezer);\n    const minRenzi = Math.min(...renzi);\n    \n    let temp = minFreeze + minRenzi;\n    \n    for(let i in xyc) {\n        let x = parseInt(xyc[i].split(\" \")[0]);\n        let y = parseInt(xyc[i].split(\" \")[1]);\n        let c = parseInt(xyc[i].split(\" \")[2]);\n        \n        let cost = freezer[x-1] + renzi[y-1] - c;\n        \n        if(cost <= temp) {\n            temp = cost;\n        }\n    }\n    \n    console.log(temp);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02813_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst permutation = ({\n    result: result = [],\n    pre: pre = [],\n    post: _0x9b8786,\n    n: n = _0x9b8786['length']\n}) => {\n    if (n > 0x0) {\n        _0x9b8786['forEach']((_0x357236, _0x372c5e) => {\n            const _0x456f09 = [..._0x9b8786];\n            const _0x2b09c2 = _0x456f09['splice'](_0x372c5e, 0x1);\n            permutation({\n                'result': result,\n                'pre': [\n                    ...pre,\n                    ..._0x2b09c2\n                ],\n                'post': _0x456f09,\n                'n': n - 0x1\n            });\n        });\n    } else {\n        result['push'](pre);\n    }\n    return result;\n};\nfunction Main(_0xd6000) {\n    const _0x19a099 = _0xd6000['split']('\\x0a');\n    const _0x3cd268 = Number(_0x19a099[0x0]);\n    const _0x9058ca = _0x19a099[0x1];\n    const _0x49086b = _0x19a099[0x2];\n    const _0x1031c6 = permutation({ 'post': new Array(_0x3cd268)['fill'](0x0)['map']((_0x16ccba, _0x3d0940) => _0x3d0940 + 0x1) })['map'](_0x11a399 => _0x11a399['join']('\\x20'));\n    const _0x26232f = _0x1031c6['indexOf'](_0x9058ca);\n    const _0x1d7f2b = _0x1031c6['indexOf'](_0x49086b);\n    console['log'](Math['abs'](_0x26232f - _0x1d7f2b));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 3 2\n3 1 2", "3"], ["8\n7 3 5 4 2 1 6 8\n3 8 2 5 4 6 7 1", "17517"], ["3\n1 2 3\n1 2 3", "0"]], "original": "'use strict';\n\nconst permutation = ({ result = [], pre = [], post, n = post.length }) => {\n  if (n > 0) {\n    post.forEach((_, i) => {\n      const rest = [...post];\n      const elem = rest.splice(i, 1);\n      permutation({ result, pre: [...pre, ...elem], post: rest, n: n - 1});\n    });\n  } else {\n    result.push(pre);\n  }\n  return result;\n};\n\nfunction Main(inputs) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  const input = inputs.split(\"\\n\");\n  const n = Number(input[0]);\n  const p = input[1];\n  const q = input[2];\n\n  const perm = permutation({ post: (new Array(n)).fill(0).map((_, i) => (i + 1)) }).map((v) => (v.join(' ')));\n  const a = perm.indexOf(p);\n  const b = perm.indexOf(q);\n\n  console.log(Math.abs(a - b));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02841_1", "type": "JavaScript", "obfuscated": "function Main(_0x255d2e) {\n    var _0x255d2e = _0x255d2e['split']('\\x0a');\n    var _0x5822f2 = _0x255d2e[0x0]['split']('\\x20');\n    var _0x3dfced = _0x255d2e[0x1]['split']('\\x20');\n    var _0x3f8c05 = new Date('2019/' + _0x5822f2[0x0] + '/' + _0x5822f2[0x1]);\n    var _0x59841e = new Date('2019/' + _0x3dfced[0x0] + '/' + _0x3dfced[0x1]);\n    if (_0x3f8c05['getMonth']() == _0x59841e['getMonth']()) {\n        console['log'](0x0);\n    } else {\n        console['log'](0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["11 16\n11 17", "0"], ["11 30\n12 1", "1"]], "original": "function Main(input) {\n\tvar input = input.split(\"\\n\");\n\tvar i1 = input[0].split(\" \");\n\tvar i2 = input[1].split(\" \");\n\n    var d1 = new Date(\"2019/\" + i1[0] + \"/\" + i1[1]);\n    var d2 = new Date(\"2019/\" + i2[0] + \"/\" + i2[1]);\n\n    if (d1.getMonth() == d2.getMonth()) {\n\t    console.log(0);\n    } else {\n\t    console.log(1);\n    }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02910_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x270bb5 => {\n    const _0x1daf1e = _0x270bb5['split']('\\x0a')['map'](_0x1d0bbe => _0x1d0bbe['split']('\\x20'));\n    const _0x1e87fa = _0x1daf1e[0x0][0x0];\n    const _0x4fe224 = _0x1e87fa['length'];\n    let _0x3e1d1a = !![];\n    let _0x2f0292 = !![];\n    for (let _0x114261 = 0x0; _0x114261 < _0x4fe224; _0x114261++) {\n        if (_0x114261 % 0x2 === 0x0) {\n            if (![\n                    'R',\n                    'U',\n                    'D'\n                ]['includes'](_0x1e87fa[_0x114261]))\n                _0x3e1d1a = ![];\n        } else {\n            if (![\n                    'L',\n                    'U',\n                    'D'\n                ]['includes'](_0x1e87fa[_0x114261]))\n                _0x2f0292 = ![];\n        }\n    }\n    if (_0x3e1d1a && _0x2f0292)\n        console['log']('Yes');\n    else\n        console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["RUDLUDR", "Yes"], ["DULL", "No"], ["UUUUUUUUUUUUUUU", "Yes"], ["ULURU", "No"], ["RDULULDURURLRDULRLR", "Yes"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst S = args[0][0]\n\tconst N = S.length\n\tlet odd = true\n\tlet even = true\n\n\tfor (let i = 0; i < N; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\tif (!['R', 'U', 'D'].includes(S[i])) odd = false\n\t\t} else {\n\t\t\tif (!['L', 'U', 'D'].includes(S[i])) even = false\n\t\t}\n\t}\n\n\tif (odd && even) console.log('Yes')\n\telse console.log('No')\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03266_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x4537c5) {\n    lines['push'](_0x4537c5);\n});\nrl['on']('close', function () {\n    var _0x5a4ffb = Number(lines[0x0]['split']('\\x20')[0x0]);\n    var _0x4253bd = Number(lines[0x0]['split']('\\x20')[0x1]);\n    var _0x5afe54 = 0x0;\n    for (var _0x4e7e71 = 0x1; _0x4e7e71 <= _0x4253bd; _0x4e7e71++) {\n        if (_0x4e7e71 * 0x2 % _0x4253bd === 0x0) {\n            if (0x1 <= Math['floor']((_0x5a4ffb - _0x4e7e71) / _0x4253bd)) {\n                _0x5afe54 += Math['pow'](Math['floor']((_0x5a4ffb - _0x4e7e71) / _0x4253bd) + 0x1, 0x3);\n            } else {\n                _0x5afe54++;\n            }\n        }\n    }\n    console['log'](_0x5afe54);\n});", "test_cases": [["3 2", "9"], ["5 3", "1"], ["31415 9265", "27"], ["35897 932", "114191"]], "original": "var lines = [];\n\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0].split(\" \")[0]);\n    var K = Number(lines[0].split(\" \")[1]);\n\n    // a + b = K * m\n    // b + c = K * n\n    // c + a = K * l\n\n    // 2b = K(m + n - l)\n    // よって,2a, 2b, 2cはKの倍数である必要がある\n\n    var ans = 0;\n    for (var i = 1; i <= K; i++) {\n        if (i * 2 % K === 0) {\n            // i + K * m <= (N - i) / K\n            if (1 <= Math.floor((N - i) / K)) { ans += Math.pow(Math.floor(((N - i) / K)) + 1, 3) }\n            else { ans++; }\n\n        }\n    }\n\n    console.log(ans);\n\n});", "language": "JavaScript"}
{"filename": "p03323_1", "type": "JavaScript", "obfuscated": "function Main(_0x128a02) {\n    var _0x2316e7 = _0x128a02[0x0]['split']('\\x20');\n    console['log'](_0x2316e7[0x0] <= 0x8 && _0x2316e7[0x1] <= 0x8 ? 'Yay!' : ':(');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["5 4", "Yay!"], ["8 8", "Yay!"], ["11 4", ":("]], "original": "function Main(input) {\n  var ab = input[0].split(\" \");\n  console.log((ab[0]<=8 && ab[1] <= 8) ? 'Yay!' : ':(')\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p03345_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst DELIMITER = '\\x20';\nconst A_INDEX = 0x0;\nconst B_INDEX = 0x1;\nconst K_INDEX = 0x3;\nconst LIMIT = Math['pow'](0xa, 0x12);\nconst process = _0x4876a3 => {\n    const _0x248662 = _0x4876a3['split'](DELIMITER);\n    const _0x37b78b = parseInt(_0x248662[A_INDEX]) - parseInt(_0x248662[B_INDEX]);\n    const _0x359d9a = _0x248662[K_INDEX];\n    const _0xb4197a = parseInt(_0x359d9a['charAt'](_0x359d9a['length'] - 0x1));\n    if (Math['abs'](_0x37b78b) > LIMIT) {\n        console['log']('Unfair');\n    } else {\n        console['log'](_0xb4197a % 0x2 === 0x0 || _0x37b78b === 0x0 ? _0x37b78b : -_0x37b78b);\n    }\n};\nprocess(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["1 2 3 1", "1"], ["2 3 2 0", "-1"], ["1000000000 1000000000 1000000000 1000000000000000000", "0"]], "original": "'use strict';\n\nconst DELIMITER = \" \";\nconst A_INDEX = 0;\nconst B_INDEX = 1;\nconst K_INDEX = 3;\nconst LIMIT = Math.pow(10, 18);\n\nconst process = input => {\n    const indexArr = input.split(DELIMITER);\n    const ans = parseInt(indexArr[A_INDEX]) - parseInt(indexArr[B_INDEX]);\n    const KString = indexArr[K_INDEX];\n    // JS rounds up large numbers; simply get last digit for modulo\n    const K = parseInt(KString.charAt(KString.length-1));\n\n    if (Math.abs(ans) > LIMIT) {\n        console.log('Unfair')\n    } else {\n        console.log(K % 2 === 0 || ans === 0 ? ans : -ans);\n    }\n}\n\nprocess(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03738_1", "type": "JavaScript", "obfuscated": "function rec(_0x2d685d, _0x4d1efa) {\n    if (_0x2d685d[0x0] > _0x4d1efa[0x0]) {\n        return 'GREATER';\n    } else if (_0x2d685d[0x0] < _0x4d1efa[0x0]) {\n        return 'LESS';\n    } else if (_0x2d685d['length'] == 0x1) {\n        return 'EQUAL';\n    } else {\n        return rec(_0x2d685d['slice'](0x1), _0x4d1efa['slice'](0x1));\n    }\n}\nfunction main(_0x58ac29) {\n    _0x58ac29 = _0x58ac29['split']('\\x0a');\n    if (_0x58ac29[0x0]['length'] > _0x58ac29[0x1]['length']) {\n        console['log']('GREATER');\n    } else if (_0x58ac29[0x0]['length'] < _0x58ac29[0x1]['length']) {\n        console['log']('LESS');\n    } else {\n        console['log']('%s', rec(_0x58ac29[0x0]['slice'](0x1), _0x58ac29[0x1]['slice'](0x1)));\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["36\n24", "GREATER"], ["850\n3777", "LESS"], ["9720246\n22516266", "LESS"], ["123456789012345678901234567890\n234567890123456789012345678901", "LESS"]], "original": "function rec(a, b) {\n\tif (a[0] > b[0]) {return 'GREATER';}\n\telse if (a[0] < b[0]) {return 'LESS';}\n\telse if (a.length == 1) {return 'EQUAL'}\n\telse {return rec(a.slice(1), b.slice(1));}\n}\n\nfunction main(s) {\n\ts = s.split('\\n');\n\tif (s[0].length > s[1].length) {console.log('GREATER');}\n\telse if (s[0].length < s[1].length) {console.log('LESS');}\n\telse {console.log('%s', rec(s[0].slice(1), s[1].slice(1)));}\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03805_1", "type": "JavaScript", "obfuscated": "function main(_0x2ef721) {\n    const [_0x27fd5f, _0x59a6bd] = na();\n    const _0xf81e6f = Array(_0x27fd5f + 0x1)['fill'](0x0)['map'](() => new Set());\n    for (let _0x456b83 = 0x1; _0x456b83 <= _0x59a6bd; _0x456b83++) {\n        const [_0x73397b, _0x3070a1] = na();\n        _0xf81e6f[_0x73397b]['add'](_0x3070a1);\n        _0xf81e6f[_0x3070a1]['add'](_0x73397b);\n    }\n    let _0x255599 = 0x0;\n    _0x4358ce(_0xf81e6f[0x1], [0x1]);\n    function _0x4358ce(_0x34729c, _0x72ae56) {\n        if (_0x72ae56['length'] == _0x27fd5f)\n            return ++_0x255599;\n        for (let _0xfd4e2e of _0x34729c) {\n            if (_0x72ae56['includes'](_0xfd4e2e))\n                continue;\n            _0x4358ce(_0xf81e6f[_0xfd4e2e], _0x72ae56['concat'](_0xfd4e2e));\n        }\n    }\n    return _0x255599;\n}\nconst lines = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nlet lineCount = 0x0;\nconst s = () => lines[lineCount++];\nconst n = () => Number(s());\nconst b = () => BigInt(s());\nconst sa = () => s()['split']('\\x20');\nconst na = () => sa()['map'](Number);\nconst ba = () => sa()['map'](BigInt);\nconst ans = main(lines);\nconsole['log'](ans);", "test_cases": [["3 3\n1 2\n1 3\n2 3", "2"], ["7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7", "1"]], "original": "function main(lines) {\n  const [N, M] = na();\n  \n  // 頂点情報構築\n  const nodes = Array(N+1).fill(0).map(() => new Set());\n  for (let i = 1; i <= M; i++) {\n    const [a, b] = na();\n    nodes[a].add(b);\n    nodes[b].add(a);\n  }\n\n  // ルート探索\n  let ans = 0;\n  searchRoute(nodes[1], [1]);\n\n  // 探索再帰関数\n  function searchRoute(node, passed) {\n    if (passed.length == N) return ++ans;\n    for (let n of node) {\n      if (passed.includes(n)) continue;\n      searchRoute(nodes[n], passed.concat(n));\n    }\n  }\n  \n  return ans;\n}\n\n\nconst lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n\nlet lineCount = 0;\nconst s = () => lines[lineCount++];\nconst n = () => Number(s());\nconst b = () => BigInt(s());\nconst sa = () => s().split(' ');\nconst na = () => sa().map(Number);\nconst ba = () => sa().map(BigInt);\n\nconst ans = main(lines);\nconsole.log( ans );", "language": "JavaScript"}
{"filename": "p03827_1", "type": "JavaScript", "obfuscated": "function Main(_0x221762) {\n    _0x221762 = _0x221762['split']('\\x0a');\n    var _0x35bb77 = _0x221762[0x0];\n    var _0x3255ed = _0x221762[0x1];\n    var _0x4d56b1 = 0x0;\n    var _0x6b108e = 0x0;\n    for (var _0x3beeb7 = 0x0; _0x3beeb7 < _0x3255ed['length']; _0x3beeb7++) {\n        if (_0x3255ed[_0x3beeb7] === 'I') {\n            _0x6b108e++;\n        } else {\n            _0x6b108e--;\n        }\n        if (_0x4d56b1 < _0x6b108e) {\n            _0x4d56b1 = _0x6b108e;\n        }\n    }\n    console['log'](_0x4d56b1);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\nIIDID", "2"], ["7\nDDIDDII", "0"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split('\\n');\n\tvar num = input[0];\n\tvar character = input[1];\n\tvar max = 0;\n\tvar x = 0;\n\tfor(var i = 0; i < character.length; i++){\n\t    if(character[i] === 'I'){\n\t        x++;\n\t    } else {\n\t        x--;\n\t    }\n\t    if(max < x){\n\t        max = x;\n\t    }\n\t}\n\tconsole.log(max);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04001_1", "type": "JavaScript", "obfuscated": "console['log']((_0x134195 => {\n    const _0x5ea70f = _0x134195['trim']();\n    const _0x13c008 = _0x5ea70f['length'];\n    let _0x200d1d = 0x0;\n    for (let _0x4b7e3d = 0x0; _0x4b7e3d < 0x1 << _0x13c008 - 0x1; _0x4b7e3d++) {\n        let _0x2838cb = _0x5ea70f[0x0] | 0x0, _0x5ef91f = 0x0;\n        for (let _0x5a111f = 0x0; _0x5a111f < _0x13c008 - 0x1; _0x5a111f++) {\n            if (0x1 << _0x5a111f & _0x4b7e3d) {\n                _0x5ef91f += _0x2838cb;\n                _0x2838cb = _0x5ea70f[_0x5a111f + 0x1] | 0x0;\n            } else {\n                _0x2838cb = _0x2838cb * 0xa + (_0x5ea70f[_0x5a111f + 0x1] | 0x0);\n            }\n        }\n        _0x200d1d += _0x5ef91f + _0x2838cb;\n    }\n    return _0x200d1d['toString']();\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["125", "176"], ["9999999999", "12656242944"]], "original": "console.log((args=>{\n  const S = args.trim();\n  const L = S.length;\n  let total = 0;\n  for ( let bit = 0; bit < 1<<(L-1); bit++ ) {\n    let st = S[0]|0, t = 0;\n    for ( let i = 0; i < L-1; i++ ) {\n      if ( (1<<i) & bit ) {\n        t += st; st = (S[i+1]|0);\n      } else {\n        st = st * 10 + (S[i+1]|0);\n      }\n    }\n    total += t + st;\n  }\n  return total.toString();\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p04043_1", "type": "JavaScript", "obfuscated": "function main(_0x34455d) {\n    const _0xbdc859 = _0x34455d['split']('\\x20');\n    if (_0xbdc859['indexOf']('5') != -0x1) {\n        _0xbdc859['splice'](_0xbdc859['indexOf']('5'), 0x1);\n    }\n    if (_0xbdc859['indexOf']('5') != -0x1) {\n        _0xbdc859['splice'](_0xbdc859['indexOf']('5'), 0x1);\n    }\n    if (_0xbdc859['indexOf']('7') != -0x1) {\n        _0xbdc859['splice'](_0xbdc859['indexOf']('7'), 0x1);\n    }\n    console['log'](_0xbdc859[0x0] == null ? 'YES' : 'NO');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 5 7", "YES"], ["7 7 5", "NO"]], "original": "function main(input) {\n    const nums = input.split(\" \");\n    \n    if(nums.indexOf('5') != -1) {\n         nums.splice(nums.indexOf('5'),1);\n    }\n    if(nums.indexOf('5') != -1) {\n         nums.splice(nums.indexOf('5'),1);\n    }\n    if(nums.indexOf('7') != -1) {\n         nums.splice(nums.indexOf('7'),1);\n    }\n    console.log(nums[0] == null ? \"YES\" : \"NO\");\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p00005_1", "type": "JavaScript", "obfuscated": "config = {\n    'stdin': '/dev/stdin',\n    'newline': '\\x0a'\n};\nrequire('fs')['readFileSync'](config['stdin'], 'ascii')['trim']()['split'](config['newline'])['forEach'](function (_0x43220d) {\n    var _0x3684c4 = _0x43220d['split']('\\x20');\n    var _0x41fbd0 = _0x3684c4[0x0], _0x561ced = _0x3684c4[0x1];\n    console['log']('%d\\x20%d', gcd(_0x41fbd0, _0x561ced), lcm(_0x41fbd0, _0x561ced));\n});\nfunction gcd(_0x4d8e57, _0x445a78) {\n    while (_0x4d8e57 !== _0x445a78) {\n        if (_0x4d8e57 < _0x445a78) {\n            var _0x434140 = _0x4d8e57;\n            _0x4d8e57 = _0x445a78;\n            _0x445a78 = _0x434140;\n        }\n        if (_0x4d8e57 % _0x445a78 === 0x0)\n            return _0x445a78;\n        _0x4d8e57 -= _0x445a78;\n    }\n    return _0x4d8e57;\n}\nfunction lcm(_0x215f00, _0x552cf2) {\n    var _0x57813f = gcd(_0x215f00, _0x552cf2);\n    return _0x57813f * (_0x215f00 / _0x57813f) * (_0x552cf2 / _0x57813f);\n}", "test_cases": [["8 6\n50000000 30000000", "2 24\n10000000 150000000"]], "original": "//config = {stdin: 'tmp', newline: '\\r\\n'}; // win\nconfig = {stdin: '/dev/stdin', newline: '\\n'}; // linux\n\nrequire('fs').readFileSync(config.stdin, 'ascii')\n\t.trim()\n\t.split(config.newline)\n\t.forEach(function (line) {\n\t\tvar ary = line.split(' ');\n\t\tvar a = ary[0], b = ary[1];\n\t\tconsole.log('%d %d', gcd(a, b), lcm(a, b));\n\t});\n\nfunction gcd(a, b) {\n\twhile (a !== b) {\n\t\tif (a < b) {\n\t\t\tvar tmp = a;\n\t\t\ta = b;\n\t\t\tb = tmp;\n\t\t}\n\t\tif (a % b === 0) return b;\n\t\ta -= b;\n\t}\n\treturn a;\n}\n\nfunction lcm(a, b) {\n\tvar g = gcd(a, b);\n\treturn g * (a / g) * (b / g);\n}", "language": "JavaScript"}
{"filename": "p00100_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar obj = {};\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    if (i != 0x0 && arr['length'] == 0x1) {\n        var keys = [];\n        for (var k in obj)\n            keys['push'](k - 0x0);\n        var cnt = 0x0;\n        for (var j = 0x0; j < keys['length']; j++) {\n            if (obj[keys[j + '']] >= 0xf4240) {\n                console['log'](keys[j + '']);\n                cnt++;\n            }\n        }\n        if (cnt == 0x0)\n            console['log']('NA');\n        if (arr[0x0] == 0x0)\n            break;\n        obj = {};\n    } else if (arr['length'] == 0x3) {\n        if (!obj['hasOwnProperty'](arr[0x0]))\n            obj[arr[0x0]] = arr[0x1] * arr[0x2];\n        else\n            obj[arr[0x0]] += arr[0x1] * arr[0x2];\n    }\n}", "test_cases": [["4\n1001 2000 520\n1002 1800 450\n1003 1600 625\n1001 200 1220\n2\n1001 100 3\n1005 1000 100\n2\n2013 5000 100\n2013 5000 100\n0", "1001\n1003\nNA\n2013"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar obj={};\nfor(var i=0;i<Arr.length;i++){\nvar arr=Arr[i].split(\" \").map(Number);\n   if(i!=0 && arr.length==1){\n      var keys=[];\n      for(var k in obj)keys.push(k-0);\n      var cnt=0;\n      for(var j=0;j<keys.length;j++){\n         if(obj[keys[j+\"\"]]>=1000000){console.log(keys[j+\"\"]);cnt++;}\n      }\n      if(cnt==0)console.log(\"NA\");\n      if(arr[0]==0)break;\n      obj={};\n   }else if(arr.length==3){\n       if(!obj.hasOwnProperty(arr[0]))obj[arr[0]]=arr[1]*arr[2];\n       else obj[arr[0]]+=arr[1]*arr[2];\n   }\n}", "language": "JavaScript"}
{"filename": "p00109_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar L = Arr['shift']() - 0x0;\nfor (var i = 0x0; i < L; i++) {\n    var str = Arr[i];\n    str = str['slice'](0x0, -0x1);\n    var num = eval(str);\n    console['log'](parseInt(num, 0xa));\n}", "test_cases": [["2\n4-2*3=\n4*(8+4+3)=", "-2\n60"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar L=Arr.shift()-0;\nfor(var i=0;i<L;i++){\n   var str=Arr[i];\n   str=str.slice(0,-1);\n   var num=eval(str);\n   console.log(parseInt(num,10));\n}", "language": "JavaScript"}
{"filename": "p02388_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x4121b6) {\n    var _0x4e3c5d = _0x4121b6['toString']()['trim']()['split']('\\x0a');\n    (function (_0x1abcf8) {\n        console['log'](_0x1abcf8 * _0x1abcf8 * _0x1abcf8);\n    }(parseInt(_0x4e3c5d[0x0], 0xa)));\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2", "8"], ["3", "27"]], "original": "'use strict';\n(function(stdin) {\n  var inputs = stdin.toString().trim().split('\\n');\n\n  (function(x) {\n    // ????????????????????????\nconsole.log(x*x*x);\n\n  })(parseInt(inputs[0], 10)); // ??°?????????\n\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02403_1", "type": "JavaScript", "obfuscated": "let fs = require('fs');\nconst fuga = _0x22092a => {\n    lines = _0x22092a['split']('\\x0a');\n    lines = lines['map'](_0x42ce8e => _0x42ce8e['split']('\\x20'));\n    lines = lines['map'](_0x43285e => _0x43285e['map'](_0x3d4815 => parseInt(_0x3d4815)));\n    for (let _0x276e6a = 0x0; _0x276e6a < lines['length']; _0x276e6a++) {\n        let _0x5480eb = '';\n        if (!lines[_0x276e6a][0x0])\n            return;\n        for (let _0x139785 = 0x0; _0x139785 < lines[_0x276e6a][0x0]; _0x139785++) {\n            for (let _0xfa0493 = 0x0; _0xfa0493 < lines[_0x276e6a][0x1]; _0xfa0493++) {\n                _0x5480eb += '#';\n            }\n            console['log'](_0x5480eb);\n            _0x5480eb = '';\n        }\n        console['log']('');\n    }\n};\nconst readFile = _0x3bf337 => {\n    fs['readFile'](_0x3bf337, 'utf8', (_0x343829, _0x152369) => {\n        fuga(_0x152369);\n    });\n};\nconst readFileWithoutArg = () => {\n    const _0x24e3e9 = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n    fuga(_0x24e3e9);\n};\nlet sampleInputPath = '';\nif (process['argv']['length'] > 0x2) {\n    sampleInputPath = process['argv'][0x2];\n    readFile(sampleInputPath);\n} else {\n    readFileWithoutArg();\n}", "test_cases": [["3 4\n5 6\n2 2\n0 0", "####\n####\n####\n\n######\n######\n######\n######\n######\n\n##\n##"]], "original": "let fs = require('fs');\n\nconst fuga = data => {\n  lines = data.split(\"\\n\");\n  lines = lines.map(line => line.split(\" \"));\n  lines = lines.map(line => line.map(elem => parseInt(elem)));\n\n  for(let i = 0; i < lines.length; i++) {\n    let str = \"\";\n    if(!lines[i][0]) return;\n    for(let j = 0; j < lines[i][0]; j++) {\n      for(let k = 0; k < lines[i][1]; k++) {\n        str += \"#\";\n      }\n      console.log(str);\n      str = \"\";\n    }\n    console.log(\"\");\n  }\n}\n\nconst readFile = route => {\n  fs.readFile(route, 'utf8', (err, data) => {\n    fuga(data);\n  });\n}\n\nconst readFileWithoutArg = () => {\n  const data = require('fs').readFileSync('/dev/stdin', 'utf8');\n  fuga(data)\n}\n\nlet sampleInputPath = \"\";\n\nif(process.argv.length > 2) {\n  sampleInputPath = process.argv[2];\n  readFile(sampleInputPath);\n} else {\n  readFileWithoutArg();\n}\n\n", "language": "JavaScript"}
{"filename": "p02416_1", "type": "JavaScript", "obfuscated": "let content = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', _0x58cc92 => {\n    content += _0x58cc92;\n});\nprocess['stdin']['on']('end', () => {\n    const _0x4af3ca = content['trim']()['split']('\\x0a')['slice'](0x0, -0x1);\n    const _0x816b9f = _0x4af3ca['map'](_0x13a75f => _0x13a75f['split']('')['map'](_0x12993e => parseInt(_0x12993e, 0xa))['reduce']((_0x12d6a6, _0x508418) => _0x12d6a6 + _0x508418));\n    console['log'](_0x816b9f['join']('\\x0a'));\n});", "test_cases": [["123\n55\n1000\n0", "6\n10\n1"]], "original": "let content = '';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', buf => {\n  content += buf;\n});\n\nprocess.stdin.on('end', () => {\n  const lines = content\n    .trim()\n    .split('\\n')\n    .slice(0, -1);\n\n  const result = lines.map(num =>\n    num\n      .split('')\n      .map(n => parseInt(n, 10))\n      .reduce((prev, cur) => prev + cur)\n  );\n\n  console.log(result.join('\\n'));\n});\n", "language": "JavaScript"}
{"filename": "p02418_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst arr = input['split']('\\x0a');\nconst regExp = new RegExp(arr[0x1]);\nconsole['log'](regExp['test'](arr[0x0] + arr[0x0]) ? 'Yes' : 'No');", "test_cases": [["vanceknowledgetoad\nadvance", "Yes"], ["vanceknowledgetoad\nadvanced", "No"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst arr = input.split('\\n');\nconst regExp = new RegExp(arr[1]);\nconsole.log(regExp.test(arr[0] + arr[0])?'Yes':'No');\n", "language": "JavaScript"}
{"filename": "p02811_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x346892 => {\n    _0x346892 = _0x346892['trim']()['split']('\\x0a');\n    const _0x588434 = parseInt(_0x346892[0x0]['split']('\\x20')[0x0]);\n    const _0x42eea4 = parseInt(_0x346892[0x0]['split']('\\x20')[0x1]);\n    console['log'](0x1f4 * _0x588434 >= _0x42eea4 ? 'Yes' : 'No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 900", "Yes"], ["1 501", "No"], ["4 2000", "Yes"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const K = parseInt(arg[0].split(\" \")[0]);\n    const X = parseInt(arg[0].split(\" \")[1]);\n    \n    console.log(500 * K >= X ? \"Yes\" : \"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03023_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x476203) {\n    _0x476203 = _0x476203['trim']() - 0x0;\n    console['log'](0xb4 * (_0x476203 - 0x2));\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3", "180"], ["100", "17640"]], "original": "'use strict';\n(function(input){\n  input=input.trim()-0;\n  console.log(180*(input-2));\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03130_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction I(_0x53d418, _0x478d07) {\n    this['_s'] = _0x53d418;\n    this['_c'] = 0x0;\n    this['_l'] = 0x0;\n    this['_f'] = _0x478d07 || Number;\n}\nI['prototype']['a'] = function () {\n    var _0x3337b3 = this['_s']['split']('\\x0a')[this['_l']];\n    if (!_0x3337b3)\n        return;\n    var _0x258653 = _0x3337b3['trim']()['split']('\\x20');\n    var _0x3e137b = _0x258653[this['_c']];\n    this['_c']++;\n    if (_0x258653['length'] === this['_c']) {\n        this['_c'] = 0x0;\n        this['_l']++;\n    }\n    return this['_f'](_0x3e137b);\n};\nI['prototype']['l'] = function () {\n    var _0xe9786c = this['_s']['split']('\\x0a')[this['_l']];\n    this['_c'] = 0x0;\n    this['_l']++;\n    return _0xe9786c['split']('\\x20')['map'](this['_f']);\n};\nfunction main(_0x5f29ac) {\n    const _0x422755 = new I(_0x5f29ac);\n    const _0x32f985 = Array(0x4)['fill'](0x0);\n    for (let _0x25b355 = 0x0; _0x25b355 < 0x3; _0x25b355++) {\n        let _0x13b3b3 = _0x422755['a']();\n        let _0x2e50db = _0x422755['a']();\n        _0x32f985[_0x13b3b3 - 0x1]++;\n        _0x32f985[_0x2e50db - 0x1]++;\n    }\n    if (_0x32f985['sort']((_0x4fa0d2, _0x36d202) => _0x4fa0d2 - _0x36d202)['join']('\\x20') === '1\\x201\\x202\\x202') {\n        console['log']('YES');\n    } else {\n        console['log']('NO');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 2\n1 3\n2 3", "YES"], ["3 2\n2 4\n1 2", "NO"], ["2 1\n3 2\n4 3", "YES"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s;this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s.split(\"\\n\")[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s.split(\"\\n\")[this._l];this._c=0;this._l++;return l.split(\" \").map(this._f)};\n\n// TODO test and remove comment\nfunction main(input) {\n  const o = new I(input);\n\n  const arr = Array(4).fill(0);\n  for (let i=0;i<3;i++) {\n    let a = o.a();\n    let b = o.a();\n    arr[a-1]++;\n    arr[b-1]++;\n  }\n\n  if (arr.sort((a,b) => a-b).join(\" \") === \"1 1 2 2\") {\n    console.log(\"YES\")\n  } else {\n    console.log(\"NO\")\n  }\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03241_1", "type": "JavaScript", "obfuscated": "function Main(_0x40dd43) {\n    _0x40dd43 = _0x40dd43['split']('\\x0a');\n    tmp = _0x40dd43[0x0]['split']('\\x20');\n    var _0x50330f = parseInt(tmp[0x0], 0xa);\n    var _0x4fcc13 = parseInt(tmp[0x1], 0xa);\n    var _0x2ae7d5 = divisor(_0x4fcc13);\n    var _0x20cfb5 = 0x0;\n    for (var _0x611d0a = 0x0; _0x611d0a < _0x2ae7d5['length']; _0x611d0a++) {\n        var _0x1041f3 = _0x2ae7d5[_0x611d0a];\n        if (_0x4fcc13 / _0x1041f3 >= _0x50330f) {\n            _0x20cfb5 = Math['max'](_0x20cfb5, _0x1041f3);\n        }\n    }\n    console['log']('%d', _0x20cfb5);\n}\nfunction divisor(_0x5ea00d) {\n    var _0x23ebe0 = [];\n    for (var _0x6762e7 = 0x1; _0x6762e7 * _0x6762e7 <= _0x5ea00d; _0x6762e7++) {\n        if (_0x5ea00d % _0x6762e7 == 0x0) {\n            _0x23ebe0['push'](_0x6762e7);\n            if (_0x5ea00d / _0x6762e7 != _0x6762e7) {\n                _0x23ebe0['push'](_0x5ea00d / _0x6762e7);\n            }\n        }\n    }\n    return _0x23ebe0;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 14", "2"], ["10 123", "3"], ["100000 1000000000", "10000"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\ttmp = input[0].split(\" \");\n\t//文字列から10進数に変換するときはparseIntを使います\n\tvar N = parseInt(tmp[0], 10);\n\tvar M = parseInt(tmp[1], 10);\n\n    var divisors = divisor(M);\n    var max = 0;\n            for (var i =0;i < divisors.length;i++) {\n                var d = divisors[i];\n                if (M / d >= N) {\n                    max = Math.max(max, d);\n                }\n            }\n\n\t//出力\n\tconsole.log('%d',max);\n}\nfunction divisor(n) {\n        var res = [];\n        for (var i = 1; i * i <= n; i++) {\n            if (n % i == 0) {\n                res.push(i);\n                if (n / i != i) {\n                    res.push(n / i);\n                }\n            }\n        }\n        return res;\n    }\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03378_1", "type": "JavaScript", "obfuscated": "const BKRT = '\\x0a';\nconst SPAC = '\\x20';\nconst NOSP = '';\nfunction Main(_0x20a5c2) {\n    _0x20a5c2 = []['concat'](..._0x20a5c2['split'](BKRT)['map'](_0x29414f => _0x29414f['split'](SPAC)));\n    const _0xf96d6e = () => _0x20a5c2['shift']();\n    const _0x34da85 = () => ~~_0x20a5c2['shift']();\n    var _0x1833ba = _0x34da85();\n    var _0x5b79c4 = _0x34da85();\n    var _0x1f7d47 = _0x34da85();\n    var _0x41418b = 0x0;\n    var _0x6356c1 = 0x0;\n    for (var _0x14c918 = 0x0; _0x14c918 < _0x5b79c4; _0x14c918++) {\n        var _0x5cab31 = _0x34da85();\n        if (_0x5cab31 < _0x1f7d47) {\n            _0x6356c1++;\n        } else {\n            _0x41418b++;\n        }\n    }\n    return ~~Math['min'](_0x6356c1, _0x41418b);\n}\n((_0x5b3445, _0x2ad17e, _0x52ac03) => 'undefined' != typeof require ? console['log'](Main(require('fs')['readFileSync']('/dev/stdin', 'utf8'))) : [\n    _0x5b3445 = _0x5b3445['split']('\\x0a')['slice'](0x1, -0x1)['join']('\\x0a'),\n    _0x2ad17e = (function () {\n        try {\n            return Main(_0x5b3445);\n        } catch (_0x793609) {\n            return _0x793609['stack'] || _0x793609['message'];\n        }\n    }()),\n    _0x52ac03 = typeof _0x2ad17e,\n    'string' == _0x52ac03 || (_0x2ad17e = JSON['stringify'](_0x2ad17e)),\n    $('<form>')['append']([\n        [\n            0xa,\n            _0x5b3445\n        ],\n        0x0,\n        [\n            0x1,\n            _0x52ac03\n        ],\n        0x0,\n        [\n            0xa,\n            _0x2ad17e\n        ]\n    ]['map'](_0x5e1bfd => $(_0x5e1bfd ? '<textarea>' : '<br>', _0x5e1bfd && {\n        'rows': _0x5e1bfd[0x0],\n        'cols': 0x28,\n        'text': _0x5e1bfd[0x1]\n    })))['appendTo']('body')\n])('\\x0a5\\x203\\x203\\x0a1\\x202\\x204\\x0a');", "test_cases": [["5 3 3\n1 2 4", "1"], ["7 3 2\n4 5 6", "0"], ["10 7 5\n1 2 3 4 6 8 9", "3"]], "original": "const BKRT = \"\\n\";\nconst SPAC = \" \";\nconst NOSP = \"\";\n\nfunction Main(input){\n\tinput = [].concat(...input.split(BKRT).map(a=>a.split(SPAC)));\n  const strShift = ()=>input.shift();\n  const intShift = ()=>~~input.shift();\n  \n  var N = intShift();\n  var M = intShift();\n  var X = intShift();\n  \n  var right = 0;\n  var left = 0;\n  for(var i = 0; i < M; i++){\n  \tvar a = intShift();\n    if(a < X){\n    \tleft++;\n    }else{\n    \tright++;\n    }\n  }\n  return ~~Math.min(left,right);\n}\n\n// If you are interested in the algorithms I used, \n// there is no need to read down from this line.\n\n((b,c,d)=>\"undefined\"!=typeof require?console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"))):[b=b.split(\"\\n\").slice(1,-1).join(\"\\n\"),c=function(){try{return Main(b)}catch(f){return f.stack||f.message}}(),d=typeof c,\"string\"==d||(c=JSON.stringify(c)),$(\"<form>\").append([[10,b],0,[1,d],0,[10,c]].map(f=>$(f?\"<textarea>\":\"<br>\",f&&{rows:f[0],cols:40,text:f[1]}))).appendTo(\"body\")])(`\n5 3 3\n1 2 4\n`);", "language": "JavaScript"}
{"filename": "p03424_1", "type": "JavaScript", "obfuscated": "function main(_0x39357a) {\n    const _0xad5fd1 = new Set(_0x39357a['split']('\\x0a')[0x1]['split']('\\x20'));\n    const _0x1ba698 = [..._0xad5fd1]['length'] === 0x4 ? 'Four' : 'Three';\n    console['log'](_0x1ba698);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\nG W Y P Y W", "Four"], ["9\nG W W G P W P G G", "Three"], ["8\nP Y W G Y W Y Y", "Four"]], "original": "function main(s) {\n  \n  const set = new Set(s.split('\\n')[1].split(' '));\n  const ans = ([...set].length === 4) ? 'Four' : 'Three';\n  \n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03659_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x4e139c => {\n    _0x4e139c = _0x4e139c['trim']()['split']('\\x0a');\n    const _0xe5ac2f = parseInt(_0x4e139c[0x0]);\n    const _0x3f7d55 = _0x4e139c[0x1]['split']('\\x20')['map'](_0x1b6664 => parseInt(_0x1b6664));\n    const _0x1b2d89 = _0x3f7d55['reduce']((_0x389285, _0x49133e) => _0x389285 + _0x49133e);\n    let _0x490659 = _0x3f7d55[0x0];\n    let _0x48d5da = _0x1b2d89 - _0x3f7d55[0x0];\n    let _0x30cc21 = Infinity;\n    for (let _0x33f8ff = 0x0; _0x33f8ff < _0xe5ac2f - 0x1; _0x33f8ff++) {\n        let _0x73bf1e = Math['abs'](_0x48d5da - _0x490659);\n        _0x30cc21 = Math['min'](_0x30cc21, _0x73bf1e);\n        _0x48d5da -= _0x3f7d55[parseInt(_0x33f8ff) + 0x1];\n        _0x490659 += _0x3f7d55[parseInt(_0x33f8ff) + 0x1];\n    }\n    console['log'](_0x30cc21);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n1 2 3 4 5 6", "1"], ["2\n10 -10", "20"]], "original": "\"use strict\";\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n=>parseInt(n));\n\n  const totalSum = A.reduce((m,n)=>m+n);\n  \n  let left  = A[0];\n  let right = totalSum - A[0];\n  \n  let answer = Infinity;\n  \n  for(let i=0; i<N - 1; i++) {\n    let diff = Math.abs(right - left);\n    answer = Math.min(answer, diff);\n    \n    right -= A[parseInt(i) + 1];\n    left  += A[parseInt(i) + 1];\n  }\n  \n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03672_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x5a4746 => {\n    _0x5a4746 = _0x5a4746['trim']()['split']('\\x0a');\n    const _0x1e358e = _0x5a4746[0x0]['split']('');\n    if (_0x1e358e['length'] === 0x2) {\n        console['log'](0x1);\n        return;\n    }\n    for (let _0x5340e6 = 0x0; _0x5340e6 < _0x1e358e['length']; _0x5340e6++) {\n        _0x1e358e['pop']();\n        let _0x1c42fb = Math['floor'](_0x1e358e['length'] / 0x2);\n        if (_0x1e358e['slice'](0x0, _0x1c42fb)['join']('') === _0x1e358e['slice'](_0x1c42fb, _0x1e358e['length'] + 0x1)['join']('')) {\n            console['log'](_0x1e358e['length']);\n            return;\n        }\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abaababaab", "6"], ["xxxx", "2"], ["abcabcabcabc", "6"], ["akasakaakasakasakaakas", "14"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    if(S.length === 2) {\n        console.log(1);\n        return;\n    }\n    \n    for(let i=0; i<S.length; i++) {\n        S.pop();\n        \n        let mid = Math.floor(S.length / 2);\n        \n        if(S.slice(0, mid).join(\"\") === S.slice(mid, S.length + 1).join(\"\")) {\n            console.log(S.length);\n            return;\n        }\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03720_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet lines = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nlet N = +lines[0x0]['split']('\\x20')[0x0];\nlet ABs = lines['slice'](0x1)['map'](_0x2684dd => _0x2684dd['split']('\\x20')['map'](Number));\nlet res = [];\nfor (let i = 0x0; i < N; i++)\n    res[i] = 0x0;\nABs['forEach'](_0x2b4364 => {\n    res[_0x2b4364[0x0] - 0x1]++;\n    res[_0x2b4364[0x1] - 0x1]++;\n});\nres['forEach'](_0x522d88 => console['log'](_0x522d88));", "test_cases": [["4 3\n1 2\n2 3\n1 4", "2\n2\n1\n1"], ["2 5\n1 2\n2 1\n1 2\n2 1\n1 2", "5\n5"], ["8 8\n1 2\n3 4\n1 5\n2 8\n3 7\n5 2\n4 1\n6 8", "3\n3\n2\n2\n2\n1\n1\n2"]], "original": "'use strict';\n\nlet lines = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n');\n\nlet N = +(lines[0].split(' ')[0]);\nlet ABs = lines.slice(1).map(line => line.split(' ').map(Number));\n\nlet res = [];\nfor (let i = 0; i < N; i++) res[i] = 0;\n\nABs.forEach(ab => {\n    res[ab[0]-1]++;\n    res[ab[1]-1]++;\n});\n\nres.forEach(n => console.log(n));", "language": "JavaScript"}
{"filename": "p03862_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2f3277 => {\n    const _0x36812a = _0x2f3277['trim']()['split']('\\x0a');\n    let _0x49dacb = Number(_0x36812a[0x0]['split']('\\x20')[0x0]);\n    let _0x14747d = Number(_0x36812a[0x0]['split']('\\x20')[0x1]);\n    let _0x20ed2b = _0x36812a[0x1]['split']('\\x20')['map'](_0x6020db => Number(_0x6020db));\n    let _0x2504f5 = 0x0;\n    for (let _0x26977b = 0x0; _0x26977b < _0x49dacb; _0x26977b++) {\n        let _0x2f9a28 = _0x20ed2b[_0x26977b] - _0x14747d;\n        if (_0x2f9a28 > 0x0) {\n            _0x20ed2b[_0x26977b] = _0x14747d;\n            _0x2504f5 += _0x2f9a28;\n        }\n    }\n    for (let _0x2ee7cf = 0x1; _0x2ee7cf < _0x49dacb - 0x1; _0x2ee7cf++) {\n        let _0x5d4c16 = _0x20ed2b[_0x2ee7cf - 0x1];\n        let _0xd5bf36 = _0x20ed2b[_0x2ee7cf];\n        let _0x118edb = _0x20ed2b[_0x2ee7cf + 0x1];\n        if (_0x5d4c16 + _0xd5bf36 > _0x14747d && _0xd5bf36 + _0x118edb > _0x14747d) {\n            _0x20ed2b[_0x2ee7cf] = _0x14747d - _0x5d4c16;\n            _0x2504f5 += _0xd5bf36 - (_0x14747d - _0x5d4c16);\n        }\n    }\n    for (let _0x125800 = 0x0; _0x125800 < _0x49dacb - 0x1; _0x125800++) {\n        let _0x358ee9 = _0x20ed2b[_0x125800];\n        let _0x17e2da = _0x20ed2b[_0x125800 + 0x1];\n        if (_0x358ee9 + _0x17e2da > _0x14747d) {\n            _0x20ed2b[_0x125800] = _0x14747d - _0x17e2da;\n            _0x2504f5 += _0x358ee9 - (_0x14747d - _0x17e2da);\n        }\n    }\n    console['log'](_0x2504f5);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n2 2 2", "1"], ["6 1\n1 6 1 2 0 4", "11"], ["5 9\n3 1 4 1 5", "0"], ["2 0\n5 5", "10"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet N = Number(input[0].split(' ')[0])\n\tlet x = Number(input[0].split(' ')[1])\n\tlet As = input[1].split(' ').map(n => Number(n))\n\tlet manip = 0\n\t\n\t// 単体でxを超えていたら減らす O(n)\n\tfor(let i = 0; i < N ; i++) {\n\t\tlet exceed = As[i] - x\n\t\tif(exceed > 0) {\n\t\t\tAs[i] = x\n\t\t\tmanip += exceed\n\t\t}\n\t}\n\n\t// 左と足しても右と足してもxを超えていたら、左と足しても超えないように減らす O(n)\n\tfor(let i = 1; i < N - 1 ; i++) {\n\t\tlet left = As[i - 1]\n\t\tlet current = As[i]\n\t\tlet right = As[i + 1]\n\t\tif(left + current > x && current + right > x) {\n\t\t\tAs[i] = x - left\n\t\t\tmanip += current - (x - left)\n\t\t}\n\t}\n\t// 右と足して超えていたら減らす O(n)\n\tfor(let i = 0; i < N - 1 ; i++) {\n\t\tlet current = As[i]\n\t\tlet right = As[i + 1]\n\t\tif(current + right > x) {\n\t\t\tAs[i] = x - right\n\t\t\tmanip += current - (x - right)\n\t\t}\n\t}\n\tconsole.log(manip)\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02235_1", "type": "JavaScript", "obfuscated": "function lcs(_0x214686, _0xab7fcd) {\n    var _0x2368e5 = _0x214686['length'];\n    var _0x3b8359 = _0xab7fcd['length'];\n    for (var _0x2ead91 = 0x1; _0x2ead91 <= _0x2368e5; _0x2ead91++) {\n        c[_0x2ead91][0x0] = 0x0;\n    }\n    for (var _0x1c28a0 = 0x1; _0x1c28a0 <= _0x3b8359; _0x1c28a0++) {\n        c[0x0][_0x1c28a0] = 0x0;\n    }\n    for (var _0x2ead91 = 0x1; _0x2ead91 <= _0x2368e5; _0x2ead91++) {\n        for (var _0x1c28a0 = 0x1; _0x1c28a0 <= _0x3b8359; _0x1c28a0++) {\n            if (_0x214686[_0x2ead91] == _0xab7fcd[_0x1c28a0]) {\n                c[_0x2ead91][_0x1c28a0] = c[_0x2ead91 - 0x1][_0x1c28a0 - 0x1] + 0x1;\n            } else if (c[_0x2ead91 - 0x1][_0x1c28a0] >= c[_0x2ead91][_0x1c28a0 - 0x1]) {\n                c[_0x2ead91][_0x1c28a0] = c[_0x2ead91 - 0x1][_0x1c28a0];\n            } else {\n                c[_0x2ead91][_0x1c28a0] = c[_0x2ead91][_0x1c28a0 - 0x1];\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nvar n = +lines['shift']() - 0x0;\nfor (var idx = 0x0; idx < n; idx++) {\n    var a = lines['shift']();\n    var b = lines['shift']();\n    var c = [[0x0]];\n    for (var i = 0x1; i <= a['length']; i++) {\n        var arr = [-0x1];\n        c['push'](arr);\n    }\n    lcs(a, b);\n    console['log'](c[a['length']][b['length']]);\n}", "test_cases": [["3\nabcbdab\nbdcaba\nabc\nabc\nabc\nbc", "4\n3\n2"]], "original": "function lcs(x, y) {\n    var m = x.length;\n    var n = y.length;\n\n    for (var i = 1; i <= m; i++) {\n        c[i][0] = 0;\n    }\n    for (var j = 1; j <= n; j++) {\n        c[0][j] = 0;\n    }\n\n    for (var i = 1; i <= m; i++) {\n        for (var j = 1; j <=n; j++) {\n            if (x[i] == y[j]) {\n                c[i][j] = c[i - 1][j - 1] + 1;\n            } else if (c[i - 1][j] >= c[i][j - 1]) {\n                c[i][j] = c[i - 1][j];\n            } else {\n                c[i][j] = c[i][j - 1];\n            }\n        }\n    }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar n = +lines.shift() - 0;\n\nfor (var idx = 0; idx < n; idx++) {\n    var a = lines.shift();\n    var b = lines.shift();\n\n    var c = [[0]];\n    for (var i = 1; i <= a.length; i++) {\n        var arr = [-1];\n        c.push(arr);\n    }\n    lcs(a, b);\n    console.log(c[a.length][b.length]);\n}", "language": "JavaScript"}
{"filename": "p02261_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x39d88b => {\n    _0x39d88b = _0x39d88b['split']('\\x0a');\n    const _0x2abe20 = Number(_0x39d88b[0x0]);\n    const _0x4064e5 = _0x39d88b[0x1]['split']('\\x20');\n    const _0x5c23c0 = _0x4064e5['concat']();\n    bubbleSort(_0x4064e5, _0x2abe20);\n    console['log'](_0x4064e5['join']('\\x20'));\n    console['log']('Stable');\n    selectionSort(_0x5c23c0, _0x2abe20);\n    console['log'](_0x5c23c0['join']('\\x20'));\n    console['log'](_0x5c23c0['every']((_0x573e80, _0x22c55b) => _0x573e80 === _0x4064e5[_0x22c55b]) ? 'Stable' : 'Not\\x20stable');\n};\nfunction bubbleSort(_0x41cb4d, _0x341255) {\n    for (let _0x71c573 = 0x0; _0x71c573 < _0x341255 - 0x1; ++_0x71c573) {\n        for (let _0x249e3b = _0x341255 - 0x1; _0x249e3b >= _0x71c573 + 0x1; --_0x249e3b) {\n            if (Number(_0x41cb4d[_0x249e3b - 0x1][0x1]) > Number(_0x41cb4d[_0x249e3b][0x1])) {\n                const _0x486fae = _0x41cb4d[_0x249e3b];\n                _0x41cb4d[_0x249e3b] = _0x41cb4d[_0x249e3b - 0x1];\n                _0x41cb4d[_0x249e3b - 0x1] = _0x486fae;\n            }\n        }\n    }\n}\nfunction selectionSort(_0xacda8b, _0x54e39f) {\n    for (let _0x54e9e5 = 0x0; _0x54e9e5 < _0x54e39f - 0x1; ++_0x54e9e5) {\n        let _0x495f59 = _0x54e9e5;\n        for (let _0x9c818d = _0x54e9e5; _0x9c818d < _0x54e39f; ++_0x9c818d) {\n            if (Number(_0xacda8b[_0x9c818d][0x1]) < Number(_0xacda8b[_0x495f59][0x1])) {\n                _0x495f59 = _0x9c818d;\n            }\n        }\n        if (_0x54e9e5 !== _0x495f59) {\n            const _0x5bcfb4 = _0xacda8b[_0x54e9e5];\n            _0xacda8b[_0x54e9e5] = _0xacda8b[_0x495f59];\n            _0xacda8b[_0x495f59] = _0x5bcfb4;\n        }\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\nH4 C9 S4 D2 C3", "D2 C3 H4 S4 C9\nStable\nD2 C3 S4 H4 C9\nNot stable"], ["2\nS1 H1", "S1 H1\nStable\nS1 H1\nStable"]], "original": "'use strict';\n\nconst main = input => {\n  input = input.split('\\n');\n  const N = Number(input[0]);\n  const A1 = input[1].split(' ');\n  const A2 = A1.concat();\n  bubbleSort(A1, N);\n  console.log(A1.join(' '));\n  console.log('Stable');\n  selectionSort(A2, N);\n  console.log(A2.join(' '));\n  console.log(A2.every((v, i) => v === A1[i]) ? 'Stable' : 'Not stable');\n};\n\nfunction bubbleSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    for (let j = N - 1; j >= i + 1; --j) {\n      if (Number(A[j - 1][1]) > Number(A[j][1])) {\n        const tmp = A[j];\n        A[j] = A[j - 1];\n        A[j - 1] = tmp;\n      }\n    }\n  }\n}\n\nfunction selectionSort(A, N) {\n  for (let i = 0; i < N - 1; ++i) {\n    let minj = i;\n    for (let j = i; j < N; ++j) {\n      if (Number(A[j][1]) < Number(A[minj][1])) {\n        minj = j;\n      }\n    }\n    if (i !== minj) {\n      const tmp = A[i];\n      A[i] = A[minj];\n      A[minj] = tmp;\n    }\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p02275_1", "type": "JavaScript", "obfuscated": "(function main() {\n    const _0x2bff7f = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    const _0xeaa074 = Number(_0x2bff7f['shift']());\n    const _0x56ff9b = _0x2bff7f['shift']()['split']('\\x20')['map'](Number);\n    const _0x43b4df = 0x2710;\n    let _0x2d8c1c = [];\n    for (let _0x3122ca = 0x0; _0x3122ca <= _0x43b4df; _0x3122ca++)\n        _0x2d8c1c[_0x3122ca] = 0x0;\n    for (let _0x47598b = 0x0; _0x47598b < _0xeaa074; _0x47598b++)\n        _0x2d8c1c[_0x56ff9b[_0x47598b]]++;\n    for (let _0x7bbcb2 = 0x1; _0x7bbcb2 <= _0x43b4df; _0x7bbcb2++)\n        _0x2d8c1c[_0x7bbcb2] += _0x2d8c1c[_0x7bbcb2 - 0x1];\n    let _0x10c6ad = [];\n    for (let _0x4476ba = _0xeaa074 - 0x1; _0x4476ba >= 0x0; _0x4476ba--)\n        _0x10c6ad[--_0x2d8c1c[_0x56ff9b[_0x4476ba]]] = _0x56ff9b[_0x4476ba];\n    console['log'](_0x10c6ad['join']('\\x20'));\n}());", "test_cases": [["7\n2 5 1 3 2 3 0", "0 1 2 2 3 3 5"]], "original": "(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n  const arr = lines.shift().split(' ').map(Number);\n  const k = 10000;\n  let cnt_arr = [];\n  for (let i = 0; i <= k; i++) cnt_arr[i] = 0;\n  for (let i = 0; i < n; i++) cnt_arr[arr[i]]++;\n  for (let i = 1; i <= k; i++) cnt_arr[i] += cnt_arr[i - 1];\n  let out_arr = [];\n  for (let i = n - 1; i >= 0; i--) out_arr[--cnt_arr[arr[i]]] = arr[i];\n  console.log(out_arr.join(' '));\n})();\n\n", "language": "JavaScript"}
{"filename": "p02467_1", "type": "JavaScript", "obfuscated": "function Main(_0x345906) {\n    _0x345906 = _0x345906['trim']()['split']('\\x0a')['map'](function (_0x588941) {\n        return _0x588941['split']('\\x20');\n    });\n    var _0x31fd7d = parseInt(_0x345906[0x0][0x0], 0xa);\n    var _0x230c4e = _0x31fd7d;\n    var _0xff9553 = [];\n    var _0x1db1d3 = 0x2;\n    _0x1cf1bf:\n        while (!![]) {\n            for (var _0x2976dd = _0x1db1d3; _0x2976dd <= Math['sqrt'](_0x31fd7d); _0x2976dd++) {\n                if (_0x31fd7d % _0x2976dd === 0x0) {\n                    _0xff9553['push'](_0x2976dd);\n                    _0x31fd7d /= _0x2976dd;\n                    _0x1db1d3 = _0x2976dd;\n                    continue _0x1cf1bf;\n                }\n            }\n            _0xff9553['push'](_0x31fd7d);\n            break;\n        }\n    console['log'](_0x230c4e['toString']() + ':\\x20' + _0xff9553['join']('\\x20'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["12", "12: 2 2 3"], ["126", "126: 2 3 3 7"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n    var n = parseInt(input[0][0], 10);\n    var originalN = n;\n    var v_ans = [];\n    var start = 2;\n    whole_loop:\n    while (true){\n        for (var i = start; i <= Math.sqrt(n); i++){\n            if (n % i === 0) {\n                v_ans.push(i);\n                n /= i;\n                start = i;\n                continue whole_loop;\n            }\n        }\n        v_ans.push(n);\n        break;\n    }\n    console.log(originalN.toString() + \": \" + v_ans.join(\" \"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02548_1", "type": "JavaScript", "obfuscated": "function Main(_0xed30b6) {\n    _0xed30b6 = _0xed30b6['split']('\\x0a');\n    N = parseInt(_0xed30b6[0x0]['split']('\\x20'));\n    var _0x492c29 = 0x0;\n    for (var _0x4aa377 = 0x1; _0x4aa377 < N; _0x4aa377++) {\n        _0x492c29 += Math['floor']((N - 0x1) / _0x4aa377);\n    }\n    console['log']('%d', _0x492c29);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "3"], ["100", "473"], ["1000000", "13969985"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  N = parseInt(input[0].split(\" \"));\n  var result = 0;\n  for(var i=1; i<N; i++) {\n    result += Math.floor((N-1)/i);\n  }\n  //出力\n  console.log(\"%d\", result);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02616_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5b4dfc => {\n    const [[_0x4af2ae, _0x5c54d8], _0x4d73d1] = _0x5b4dfc['trim']()['split']('\\x0a')['map'](_0x3cd569 => _0x3cd569['split']('\\x20')['map'](_0x13359c => _0x13359c | 0x0));\n    let _0xd99cdf = [], _0x5286e2 = [];\n    for (let _0x40f9e5 = 0x0; _0x40f9e5 < _0x4af2ae; _0x40f9e5++) {\n        if (_0x4d73d1[_0x40f9e5] > 0x0)\n            _0x5286e2['push'](_0x4d73d1[_0x40f9e5]);\n        if (_0x4d73d1[_0x40f9e5] < 0x0)\n            _0xd99cdf['push'](_0x4d73d1[_0x40f9e5]);\n    }\n    const _0x2eb746 = BigInt(0x3b9aca00 + 0x7), _0x2afc81 = (_0x682b3, _0x3979f4) => (BigInt(_0x682b3) * BigInt(_0x3979f4) % _0x2eb746 + _0x2eb746) % _0x2eb746;\n    _0xd99cdf['sort']((_0x55f8c6, _0x5bce1c) => _0x55f8c6 - _0x5bce1c);\n    _0x5286e2['sort']((_0x4c0393, _0x32764c) => _0x32764c - _0x4c0393);\n    if (_0x5286e2['length'] === 0x0 && _0x5c54d8 & 0x1)\n        return '' + _0xd99cdf['slice'](-_0x5c54d8)['reduce'](_0x2afc81, 0x1);\n    let _0x4d9958 = 0x0, _0x5812fc = 0x0, _0x5337e8 = [], _0x297d02 = [];\n    for (let _0x508fa4 = 0x0; _0x508fa4 < _0x5c54d8; _0x508fa4++) {\n        if ((_0x5286e2[_0x5812fc] | 0x0) > -(_0xd99cdf[_0x4d9958] | 0x0)) {\n            _0x5337e8['push'](_0x5286e2[_0x5812fc]);\n            _0x5812fc++;\n        } else {\n            _0x297d02['push'](_0xd99cdf[_0x4d9958]);\n            _0x4d9958++;\n        }\n    }\n    if (_0x297d02['length'] & 0x1) {\n        if ((_0x5286e2[_0x5812fc] | 0x0) > -(_0xd99cdf[_0x4d9958] | 0x0)) {\n            _0x5337e8['push'](_0x5286e2[_0x5812fc]);\n            _0x297d02['pop']();\n        } else {\n            _0x297d02['push'](_0xd99cdf[_0x4d9958]);\n            _0x5337e8['pop']();\n        }\n    }\n    return '' + _0x2afc81(_0x5337e8['reduce'](_0x2afc81, 0x1), _0x297d02['reduce'](_0x2afc81, 0x1));\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4 2\n1 2 -3 -4", "12"], ["4 3\n-1 -2 -3 -4", "1000000001"], ["2 1\n-1 1000000000", "1000000000"], ["10 10\n1000000000 100000000 10000000 1000000 100000 10000 1000 100 10 1", "999983200"]], "original": "console.log((args=>{\n  const [[N,K],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  let Am = [], Ap = [];\n  for ( let i = 0; i < N; i++ ) {\n    if ( A[i] > 0 ) Ap.push(A[i]);\n    if ( A[i] < 0 ) Am.push(A[i]);\n  }\n  const MOD = BigInt(1e9+7), mul = (a,b) => (BigInt(a)*BigInt(b)%MOD+MOD)%MOD;\n  Am.sort((a,b)=>a-b);\n  Ap.sort((a,b)=>b-a);\n  if ( Ap.length === 0 && K&1 ) return `${ Am.slice(-K).reduce(mul,1) }`;\n  let om = 0, op = 0, ap = [], am = [];\n  for ( let i = 0; i < K; i++ ) {\n    if ( (Ap[op]|0) > -(Am[om]|0) ) {\n      ap.push(Ap[op]); op++;\n    } else {\n      am.push(Am[om]); om++;\n    }\n  }\n  if ( am.length&1 ) {\n    if ( (Ap[op]|0) > -(Am[om]|0) ) {\n      ap.push(Ap[op]); am.pop();\n    } else {\n      am.push(Am[om]); ap.pop();\n    }\n  }\n  return `${mul(ap.reduce(mul,1),am.reduce(mul,1))}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p02817_1", "type": "JavaScript", "obfuscated": "function Main(_0x321d78) {\n    _0x321d78 = _0x321d78['split']('\\x0a');\n    st = _0x321d78[0x0]['split']('\\x20');\n    console['log'](st[0x1] + st[0x0]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["oder atc", "atcoder"], ["humu humu", "humuhumu"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    // 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n    st = input[0].split(\" \");\n  \n\n  //  s = st[1].trim();   //Sうけとり\n  //  t = st[0].trim();   //Tうけとり\n    \n  //  var ts='';\n   // ts =s+t;    //T+S  連結\n    \n    console.log(st[1]+st[0]);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02838_1", "type": "JavaScript", "obfuscated": "function Main(_0x4401c1) {\n    _0x4401c1 = _0x4401c1['split']('\\x0a');\n    var _0x22005b = parseInt(_0x4401c1[0x0], 0xa);\n    var _0x1a8482 = _0x4401c1[0x1]['split']('\\x20');\n    var _0x2a3e20 = new Array(_0x22005b);\n    var _0x17d511 = 0x0;\n    var _0x4b8187 = 0x0;\n    var _0x26954d = 0x3b9aca07;\n    for (var _0x181296 = 0x0; _0x181296 < _0x22005b; _0x181296++) {\n        _0x1a8482[_0x181296] = parseInt(_0x1a8482[_0x181296], 0xa);\n        _0x2a3e20[_0x181296] = Math['floor'](_0x1a8482[_0x181296] / 0x100000000);\n        _0x1a8482[_0x181296] = _0x1a8482[_0x181296] % 0x100000000;\n    }\n    for (var _0x181296 = 0x0; _0x181296 < _0x22005b - 0x1; _0x181296++) {\n        for (var _0x6362fe = _0x181296 + 0x1; _0x6362fe < _0x22005b; _0x6362fe++) {\n            _0x17d511 += _0x1a8482[_0x181296] ^ _0x1a8482[_0x6362fe];\n            if (_0x17d511 > 0x100000000 / 0x2) {\n                _0x17d511 = _0x17d511 % (0x100000000 / 0x2);\n                _0x4b8187 += 0.5;\n            }\n            _0x4b8187 += _0x2a3e20[_0x181296] ^ _0x2a3e20[_0x6362fe];\n        }\n    }\n    _0x17d511 = _0x17d511 + _0x4b8187 * 0x100000000;\n    console['log'](_0x17d511 % _0x26954d);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2 3", "6"], ["10\n3 1 4 1 5 9 2 6 5 3", "237"], ["10\n3 14 159 2653 58979 323846 2643383 27950288 419716939 9375105820", "103715602"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n  　var n = parseInt(input[0], 10);\n  　var x = input[1].split(\" \");\n  \tvar y = new Array(n);\n  \tvar count = 0;\n  \tvar count2 = 0;\n    var a = 1000000007;\n    for(var i=0; i<n; i++){\n\t    x[i] = parseInt(x[i], 10);\n      \ty[i] = Math.floor(x[i]/4294967296);\n      \tx[i] = x[i]%4294967296;\n    }\n  for(var i=0; i<n-1; i++){\n  \tfor(var j=i+1; j<n; j++){\n      \tcount += x[i] ^ x[j];\n      if(count > 4294967296/2){\n        count = count%(4294967296/2);\n        count2 += 0.5;\n      }\n      count2 += y[i] ^ y[j];\n    }\n  }\n  count = count + count2 * 4294967296;\n\tconsole.log(count%a);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03417_1", "type": "JavaScript", "obfuscated": "function Main(_0x28cf32) {\n    _0x28cf32 = _0x28cf32['split']('\\x20')['map'](_0x557471 => parseInt(_0x557471));\n    var _0x34a080 = _0x28cf32[0x0];\n    var _0x292671 = _0x28cf32[0x1];\n    var _0x17526f = 0x0;\n    if (_0x34a080 === 0x1 && _0x292671 === 0x1)\n        _0x17526f = 0x1;\n    else if (_0x34a080 === 0x1 || _0x292671 === 0x1)\n        _0x17526f = _0x34a080 + _0x292671 - 0x3;\n    else\n        _0x17526f = (_0x34a080 - 0x2) * (_0x292671 - 0x2);\n    if (_0x17526f > 0x1ff973cafa8000) {\n        _0x17526f = Math['floor']((_0x34a080 - 0x2) / 0x2710) * (_0x292671 - 0x2);\n        tmp = (_0x34a080 - 0x2) % 0x2710 * (_0x292671 - 0x2);\n        _0x17526f += Math['floor'](tmp / 0x2710);\n        tmp = ('0000' + tmp % 0x2710)['slice'](-0x4);\n        _0x17526f += tmp;\n    }\n    console['log'](_0x17526f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2", "0"], ["1 7", "5"], ["314 1592", "496080"]], "original": "function Main(input) {\n\tinput = input.split(\" \").map(a => parseInt(a));\n\tvar N = input[0];\n\tvar M = input[1];\n\tvar ans = 0;\n\tif(N === 1 && M === 1) ans = 1;\n\telse if(N === 1 || M === 1) ans = N + M - 3;\n\telse ans = (N - 2) * (M - 2);\n\t\n\tif(ans > 9e15){\n\t\tans = Math.floor((N - 2) / 10000) * (M - 2);\n\t\ttmp = (N - 2) % 10000 * (M - 2);\n\t\tans += Math.floor(tmp / 10000);\n\t\ttmp = (\"0000\" + tmp % 10000).slice(-4);\n\t\tans += tmp;\n\t}\n\t\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03607_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x30cd45) {\n    _0x30cd45 = _0x30cd45['split'](/\\n/)['map'](_0x3c4ee7 => ~~_0x3c4ee7);\n    let _0x2621a9 = new Set();\n    for (let _0x58ef22 = 0x1; _0x58ef22 < _0x30cd45['length']; _0x58ef22++) {\n        if (_0x2621a9['has'](_0x30cd45[_0x58ef22])) {\n            _0x2621a9['delete'](_0x30cd45[_0x58ef22]);\n        } else {\n            _0x2621a9['add'](_0x30cd45[_0x58ef22]);\n        }\n    }\n    console['log'](_0x2621a9['size']);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n6\n2\n6", "1"], ["4\n2\n5\n5\n2", "0"], ["6\n12\n22\n16\n22\n18\n12", "2"]], "original": "\"use strict\"\n\nfunction main(input) {\n  input = input.split(/\\n/).map(v => ~~v)\n  let set = new Set()\n  for (let i = 1; i < input.length; i++) {\n    //\n    if (set.has(input[i])) {\n      set.delete(input[i])\n    } else {\n      set.add(input[i])\n    }\n  }\n  console.log(set.size)\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))\n", "language": "JavaScript"}
{"filename": "p03986_1", "type": "JavaScript", "obfuscated": "const Main = _0x1ab1b9 => {\n    while (_0x1ab1b9['indexOf']('ST') > -0x1) {\n        _0x1ab1b9 = _0x1ab1b9['replace'](/ST/g, '');\n    }\n    console['log'](_0x1ab1b9['length']);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["TSTTSS", "4"], ["SSTTST", "0"], ["TSSTTTSS", "4"]], "original": "const Main = (input) => {\n    while(input.indexOf(\"ST\") > -1) {\n        input = input.replace(/ST/g, \"\");\n    }\n    console.log(input.length);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00027_1", "type": "JavaScript", "obfuscated": "(function (_0x50899b) {\n    var _0x8e1aac = _0x50899b['replace'](/\\n$/, '')['split']('\\x0a');\n    while (!![]) {\n        var _0x19958c = _0x8e1aac['shift']()['split']('\\x20')['map'](Number);\n        var _0x1bedef = _0x19958c['shift']();\n        var _0x4ced85 = _0x19958c['shift']();\n        if (_0x1bedef === 0x0 && _0x4ced85 === 0x0) {\n            return;\n        }\n        var _0x2361fe = new Date(0x7d4, _0x1bedef - 0x1, _0x4ced85);\n        console['log'](getWeekDay(_0x2361fe['getDay']()));\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));\nfunction getWeekDay(_0x373009) {\n    var _0x38ed39 = [\n        'Sunday',\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday'\n    ];\n    return _0x38ed39[_0x373009];\n}", "test_cases": [["1 1\n2 29\n0 0", "Thursday\nSunday"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  while (true) {\n    var a = p.shift().split(' ').map(Number);\n    var m = a.shift();\n    var d = a.shift();\n    if (m === 0 && d === 0) {\n      return;\n    }\n    var date = new Date(2004, m - 1, d);\n    //console.log(date);\n    console.log(getWeekDay(date.getDay()) );\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction getWeekDay(d) {\n  var week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  return week[d];\n}", "language": "JavaScript"}
{"filename": "p00586_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['forEach'](function (_0x6fdde5) {\n    var _0x262bb9 = _0x6fdde5['split']('\\x20')[0x0] - 0x0;\n    var _0x5b2032 = _0x6fdde5['split']('\\x20')[0x1] - 0x0;\n    console['log'](_0x262bb9 + _0x5b2032);\n});", "test_cases": [["1 2\n10 5\n100 20", "3\n15\n120"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\nvar a=(v.split(\" \"))[0]-0;\nvar b=(v.split(\" \"))[1]-0;\nconsole.log(a+b);\n});", "language": "JavaScript"}
{"filename": "p02238_1", "type": "JavaScript", "obfuscated": "(function main() {\n    const _0x291863 = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    const _0x3ae770 = Number(_0x291863['shift']());\n    const _0x5f215e = Array['from'](Array(_0x3ae770), () => []);\n    _0x291863['forEach']((_0x2b59b4, _0x4972d5) => _0x2b59b4['split']('\\x20')['splice'](0x2)['forEach'](_0x55849f => _0x5f215e[_0x4972d5]['push'](_0x55849f - 0x1)));\n    const _0x23a1b6 = [], _0x3e3e6f = [];\n    dfs(_0x5f215e, _0x23a1b6, _0x3e3e6f);\n    for (let _0x44214e = 0x0; _0x44214e < _0x3ae770; _0x44214e++) {\n        console['log'](_0x44214e + 0x1 + '\\x20' + _0x23a1b6[_0x44214e] + '\\x20' + _0x3e3e6f[_0x44214e]);\n    }\n}());\nfunction dfs(_0x2a8762, _0x39aa29, _0x5d4d7f) {\n    const _0x5214af = 0x0, _0x27f80c = 0x1, _0x15cbe0 = 0x2;\n    const _0x436137 = _0x2a8762['length'];\n    const _0x593a20 = Array['from'](_0x2a8762, () => _0x5214af);\n    let _0x18d4c4 = 0x0;\n    function _0x4105ce(_0x392355) {\n        _0x593a20[_0x392355] = _0x27f80c;\n        _0x39aa29[_0x392355] = ++_0x18d4c4;\n        _0x2a8762[_0x392355]['forEach'](_0x5efbf5 => {\n            if (_0x593a20[_0x5efbf5] === _0x5214af) {\n                _0x4105ce(_0x5efbf5);\n            }\n        });\n        _0x593a20[_0x392355] = _0x15cbe0;\n        _0x5d4d7f[_0x392355] = ++_0x18d4c4;\n    }\n    _0x2a8762['forEach']((_0x39673f, _0x1d19fe) => {\n        if (_0x593a20[_0x1d19fe] === _0x5214af)\n            _0x4105ce(_0x1d19fe);\n    });\n}", "test_cases": [["4\n1 1 2\n2 1 4\n3 0\n4 1 3", "1 1 8\n2 2 7\n3 4 5\n4 3 6"], ["6\n1 2 2 3\n2 2 3 4\n3 1 5\n4 1 6\n5 1 6\n6 0", "1 1 12\n2 2 11\n3 3 8\n4 9 10\n5 4 7\n6 5 6"]], "original": "(function main() {\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n\n  const adjLists = Array.from(Array(n), () => []);\n  lines.forEach((l, i) => l.split(' ').splice(2).forEach(e => adjLists[i].push(e-1)));\n\n  const d = [], f = [];\n  dfs(adjLists, d, f);\n  for (let i = 0; i < n; i++) {\n    console.log(`${i + 1} ${d[i]} ${f[i]}`);\n  }\n})();\n\nfunction dfs(adjLists, d, f) {\n  const WHITE = 0, GRAY = 1, BLACK = 2;\n  const size = adjLists.length;\n  const color = Array.from(adjLists, () => WHITE);\n\n  let time = 0;\n  function visit(u) {\n    color[u] = GRAY;\n    d[u] = ++time;\n    adjLists[u].forEach(v => {\n      if (color[v] === WHITE) {\n        visit(v);\n      }\n    });\n    color[u] = BLACK;\n    f[u] = ++time;\n  }\n  adjLists.forEach((e, u) => {\n    if (color[u] === WHITE) visit(u);\n  });\n}\n\n", "language": "JavaScript"}
{"filename": "p02274_1", "type": "JavaScript", "obfuscated": "var cnt = 0x0;\n(function main() {\n    const _0x25aefa = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    const _0x1c2656 = Number(_0x25aefa['shift']());\n    let _0x7fa9cb = _0x25aefa['shift']()['split']('\\x20')['map'](Number);\n    mergeSort(_0x7fa9cb, 0x0, _0x1c2656);\n    console['log'](cnt);\n}());\nfunction merge(_0x57b02d, _0x2d6ab5, _0x780412, _0x2fde19) {\n    let _0x2743b3 = _0x57b02d['slice'](_0x2d6ab5, _0x780412);\n    let _0x289e02 = _0x57b02d['slice'](_0x780412, _0x2fde19);\n    _0x2743b3['push'](Infinity);\n    _0x289e02['push'](Infinity);\n    let _0xd09718 = 0x0;\n    let _0x3836ea = 0x0;\n    let _0x5e1ed9 = 0x0;\n    for (let _0x14a6df = _0x2d6ab5; _0x14a6df < _0x2fde19; _0x14a6df++) {\n        if (_0x2743b3[_0xd09718] < _0x289e02[_0x3836ea]) {\n            _0x57b02d[_0x14a6df] = _0x2743b3[_0xd09718++];\n            cnt += _0x5e1ed9;\n        } else {\n            _0x57b02d[_0x14a6df] = _0x289e02[_0x3836ea++];\n            _0x5e1ed9 += 0x1;\n        }\n    }\n}\nfunction mergeSort(_0x4542b0, _0x42ec67, _0x49fbf3) {\n    if (_0x42ec67 + 0x1 < _0x49fbf3) {\n        let _0x558f85 = Math['floor']((_0x42ec67 + _0x49fbf3) / 0x2);\n        mergeSort(_0x4542b0, _0x42ec67, _0x558f85);\n        mergeSort(_0x4542b0, _0x558f85, _0x49fbf3);\n        merge(_0x4542b0, _0x42ec67, _0x558f85, _0x49fbf3);\n    }\n}", "test_cases": [["5\n3 5 2 1 4", "6"], ["3\n3 1 2", "2"]], "original": "var cnt = 0;\n(function main(){\n  const lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\n  const n = Number(lines.shift());\n  let arr = lines.shift().split(' ').map(Number);\n  mergeSort(arr, 0, n);\n  console.log(cnt);\n})();\n\nfunction merge(arr, left, mid, right) {\n  let L = arr.slice(left, mid);\n  let R = arr.slice(mid, right);\n  L.push(Infinity);\n  R.push(Infinity);\n  let i = 0;\n  let j = 0;\n  let t = 0;\n  for (let k = left; k < right; k++) {\n    if (L[i] < R[j]) {\n      arr[k] = L[i++];\n      cnt += t;\n    } else {\n      arr[k] = R[j++];\n      t += 1;\n    }\n  }\n}\n\nfunction mergeSort(arr, left, right) {\n  if (left + 1 < right) {\n    let mid = Math.floor((left + right) / 2);\n    mergeSort(arr, left, mid);\n    mergeSort(arr, mid, right);\n    merge(arr, left, mid, right);\n  }\n}\n\n", "language": "JavaScript"}
{"filename": "p02276_1", "type": "JavaScript", "obfuscated": "const config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nconst line = require('fs')['readFileSync'](config['input'], 'utf-8')['split'](config['newline']);\nconst list = line[0x1]['split']('\\x20')['map'](_0x58c6bc => parseInt(_0x58c6bc));\nconst partition = _0x57f5b3 => {\n    const _0x46eb67 = _0x57f5b3[_0x57f5b3['length'] - 0x1];\n    const _0x5abc53 = [..._0x57f5b3];\n    let _0x4c6166 = -0x1;\n    for (let _0x2b1f5c = 0x0; _0x2b1f5c < _0x57f5b3['length'] - 0x1; _0x2b1f5c++) {\n        if (_0x5abc53[_0x2b1f5c] <= _0x46eb67) {\n            _0x4c6166++;\n            const _0x35ccd4 = _0x5abc53[_0x4c6166];\n            _0x5abc53[_0x4c6166] = _0x5abc53[_0x2b1f5c];\n            _0x5abc53[_0x2b1f5c] = _0x35ccd4;\n        }\n    }\n    const _0x11d254 = _0x5abc53[_0x4c6166 + 0x1];\n    _0x5abc53[_0x4c6166 + 0x1] = _0x5abc53[_0x57f5b3['length'] - 0x1];\n    _0x5abc53[_0x57f5b3['length'] - 0x1] = _0x11d254;\n    return [\n        _0x4c6166 + 0x1,\n        _0x5abc53\n    ];\n};\nconst res = partition(list);\nconsole['log'](res[0x1]['map']((_0x206587, _0x46160f) => _0x46160f === res[0x0] ? '[' + _0x206587 + ']' : _0x206587['toString']())['join']('\\x20'));", "test_cases": [["12\n13 19 9 5 12 8 7 4 21 2 6 11", "9 5 8 7 4 2 6 [11] 21 13 19 12"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nconst list = line[1].split(' ').map(x => parseInt(x));\n\nconst partition = arr => {\n    const x = arr[arr.length-1];\n    const result = [...arr];\n    let i = -1;\n    for (let j = 0; j < arr.length - 1; j++) {\n        if (result[j] <= x) {\n            i++;\n            const tmp = result[i];\n            result[i] = result[j];\n            result[j] = tmp;\n        }\n    }\n    const tmp = result[i+1];\n    result[i+1] = result[arr.length-1];\n    result[arr.length-1] = tmp;\n\n    return [i+1, result];\n}\n\nconst res = partition(list);\n\nconsole.log(res[1].map((x, i) => i === res[0] ? `[${x}]` : x.toString()).join(' '));\n\n", "language": "JavaScript"}
{"filename": "p02287_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/[ |\\n]/)['slice'](0x1)['map']((_0xb85e4d, _0x10ade8, _0x6ae361) => 'node\\x20' + ++_0x10ade8 + ':\\x20key\\x20=\\x20' + _0xb85e4d + ',\\x20' + (_0x10ade8 - 0x1 ? 'parent\\x20key\\x20=\\x20' + _0x6ae361[Math['floor'](_0x10ade8 / 0x2) - 0x1] + ',\\x20' : '') + (0x2 * _0x10ade8 - 0x1 < _0x6ae361['length'] ? 'left\\x20key\\x20=\\x20' + _0x6ae361[0x2 * _0x10ade8 - 0x1] + ',\\x20' : '') + (0x2 * _0x10ade8 < _0x6ae361['length'] ? 'right\\x20key\\x20=\\x20' + _0x6ae361[0x2 * _0x10ade8] + ',\\x20' : ''))['join']('\\x0a'));", "test_cases": [["5\n7 8 1 2 3", "node 1: key = 7, left key = 8, right key = 1, \nnode 2: key = 8, parent key = 7, left key = 2, right key = 3, \nnode 3: key = 1, parent key = 7, \nnode 4: key = 2, parent key = 8, \nnode 5: key = 3, parent key = 8,"]], "original": "console.log(require('fs').readFileSync('/dev/stdin','utf8').trim().split(/[ |\\n]/).slice(1).map((k,i,a)=>`node ${++i}: key = ${k}, `+((i-1)?`parent key = ${a[Math.floor(i/2)-1]}, `:'')+(2*i-1<a.length?`left key = ${a[2*i-1]}, `:'')+(2*i<a.length?`right key = ${a[2*i]}, `:'')).join('\\n'));\n", "language": "JavaScript"}
{"filename": "p02417_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['trim']();\ninput = input['toLowerCase']();\nvar abc = 'abcdefghijklmnopqrstuvwxyz'['split']('');\nvar obj = {};\nfor (var i = 0x0; i < abc['length']; i++)\n    obj[abc[i]] = 0x0;\ninput = input['replace'](/[a-z]/g, function (_0x34e03c) {\n    obj[_0x34e03c]++;\n    return _0x34e03c;\n});\nabc['forEach'](function (_0x25319d, _0x15fa6c) {\n    console['log'](_0x25319d + '\\x20:\\x20' + obj[_0x25319d]);\n});", "test_cases": [["This is a pen.", "a : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.trim();\ninput=input.toLowerCase();\nvar abc='abcdefghijklmnopqrstuvwxyz'.split(\"\");\nvar obj={};\nfor(var i=0;i<abc.length;i++)obj[abc[i]]=0;\n\ninput=input.replace(/[a-z]/g,function(str){\nobj[str]++;\nreturn str;\n});\n\nabc.forEach(function(v,i){\nconsole.log(v+\" : \"+obj[v]);\n});", "language": "JavaScript"}
{"filename": "p02422_1", "type": "JavaScript", "obfuscated": "'use strict';\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['replace'](/\\r?\\n$/, '')['split'](/\\r?\\n/));\nfunction main(_0x1608c9) {\n    var _0x2f498f = _0x1608c9['shift']();\n    _0x1608c9['shift']();\n    var _0x50dcaa;\n    while (_0x50dcaa = _0x1608c9['shift']()) {\n        _0x50dcaa = _0x50dcaa['split']('\\x20');\n        var _0x1446e5 = +_0x50dcaa[0x1], _0x3ac8b0 = +_0x50dcaa[0x2];\n        switch (_0x50dcaa[0x0]) {\n        case 'print':\n            console['log'](_0x2f498f['slice'](_0x1446e5, _0x3ac8b0 + 0x1));\n            break;\n        case 'replace':\n            _0x2f498f = _0x2f498f['slice'](0x0, _0x1446e5) + _0x50dcaa[0x3] + _0x2f498f['slice'](_0x3ac8b0 + 0x1);\n            break;\n        case 'reverse':\n            _0x2f498f = _0x2f498f['slice'](0x0, _0x1446e5) + _0x2f498f['slice'](_0x1446e5, _0x3ac8b0 + 0x1)['split']('')['reverse']()['join']('') + _0x2f498f['slice'](_0x3ac8b0 + 0x1);\n            break;\n        }\n    }\n}", "test_cases": [["abcde\n3\nreplace 1 3 xyz\nreverse 0 2\nprint 1 4", "xaze"], ["xyz\n3\nprint 0 2\nreplace 0 2 abc\nprint 0 2", "xyz\nabc"]], "original": "\"use strict\";\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").replace(/\\r?\\n$/, \"\").split(/\\r?\\n/));\n\nfunction main(lines){\n\tvar str = lines.shift();\n\tlines.shift();\n\tvar code;\n\twhile(code = lines.shift()){\n\t\tcode = code.split(\" \");\n\t\tvar from = +code[1], to = +code[2];\n\t\tswitch(code[0]){\n\t\t\tcase \"print\":\n\t\t\t\tconsole.log(str.slice(from, to+1));\n\t\t\t\tbreak;\n\t\t\tcase \"replace\":\n\t\t\t\tstr = str.slice(0, from) + code[3] + str.slice(to+1);\n\t\t\t\tbreak;\n\t\t\tcase \"reverse\":\n\t\t\t\tstr = str.slice(0, from) + str.slice(from, to+1).split(\"\").reverse().join(\"\") + str.slice(to+1);\n\t\t\t\tbreak;\n\t\t}\n\t}\n}", "language": "JavaScript"}
{"filename": "p02536_1", "type": "JavaScript", "obfuscated": "let lines = [];\nlet reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x1ce0fd) {\n    lines['push'](_0x1ce0fd);\n});\nreader['on']('close', function () {\n    const [_0x3bb5f9, _0x532d1e] = lines[0x0]['split']('\\x20');\n    const _0x33a165 = [];\n    const _0x1342fc = [];\n    for (let _0x3d5b7f = 0x0; _0x3d5b7f < _0x532d1e; _0x3d5b7f++) {\n        [_0x33a165[_0x3d5b7f], _0x1342fc[_0x3d5b7f]] = lines[_0x3d5b7f + 0x1]['split']('\\x20');\n    }\n    const _0x46920b = [];\n    _0x46920b['push'](_0x33a165[0x0]);\n    _0x46920b['push'](_0x1342fc[0x0]);\n    ans = _0x3bb5f9 - 0x2;\n    for (let _0x58ce07 = 0x1; _0x58ce07 < _0x532d1e; _0x58ce07++) {\n        if (!_0x46920b['includes'](_0x33a165[_0x58ce07]) && !_0x46920b['includes'](_0x1342fc[_0x58ce07])) {\n            ans--;\n        } else if (!_0x46920b['includes'](_0x33a165[_0x58ce07])) {\n            ans--;\n            _0x46920b['push'](_0x33a165[_0x58ce07]);\n        } else if (!_0x46920b['includes'](_0x1342fc[_0x58ce07])) {\n            ans--;\n            _0x46920b['push'](_0x1342fc[_0x58ce07]);\n        }\n    }\n    console['log'](ans);\n});", "test_cases": [["3 1\n1 2", "1"]], "original": "let lines = [];\nlet reader = require('readline').createInterface({\n    input: process.stdin,\n    output: process.stdout\n});\n\n// 標準入力の読み込み\nreader.on('line', function(line) {\n    lines.push(line);\n});\n\nreader.on('close', function() {\n    // 処理の記述\n    const [n, m] = lines[0].split(' ');\n    const a = [];\n    const b = [];\n    for (let i = 0; i < m; i++) {\n        [a[i], b[i]] = lines[i+1].split(' ');\n    }\n    const connected = [];\n    connected.push(a[0]);\n    connected.push(b[0]);\n    ans = n-2;\n    for (let i = 1; i < m; i++) {\n        if ((!connected.includes(a[i])) && (!connected.includes(b[i]))) {\n            ans--;\n        } else if (!connected.includes(a[i])) {\n            ans--;\n            connected.push(a[i]);\n        } else if (!connected.includes(b[i])) {\n            ans--;\n            connected.push(b[i]);\n        }\n\n    }\n\n    // 表示\n    console.log(ans);\n});", "language": "JavaScript"}
{"filename": "p02624_1", "type": "JavaScript", "obfuscated": "function* main() {\n    const _0x1c5518 = +(yield);\n    let _0x416bd9 = 0x0;\n    for (let _0x5d5f0b = 0x1; _0x5d5f0b <= _0x1c5518; _0x5d5f0b++)\n        _0x416bd9 += Math['floor'](_0x5d5f0b * Math['floor'](0x1 + _0x1c5518 / _0x5d5f0b) * Math['floor'](_0x1c5518 / _0x5d5f0b) / 0x2);\n    console['log'](_0x416bd9);\n}\nconst iter = main();\niter['next']();\nrequire('readline')['createInterface']({ 'input': process['stdin'] })['on']('line', _0x2d9ae9 => iter['next'](_0x2d9ae9));", "test_cases": [["4", "23"], ["100", "26879"], ["10000000", "838627288460105"]], "original": "function *main() {\n  const N = +(yield);\n  \n  let sum = 0;\n  for (let k = 1; k <= N; k++)\n    sum += Math.floor(k * Math.floor(1+N/k) * Math.floor(N/k) / 2);\n  \n  console.log(sum);\n}\nconst iter = main();\niter.next();\nrequire(\"readline\").createInterface({input: process.stdin}).on(\"line\", line => iter.next(line));\n", "language": "JavaScript"}
{"filename": "p02658_1", "type": "JavaScript", "obfuscated": "function Main(_0x4026ee) {\n    _0x4026ee = _0x4026ee['split']('\\x0a');\n    const _0x44863f = _0x4026ee[0x0]['trim']();\n    const _0x4df44 = _0x4026ee[0x1]['split']('\\x20');\n    for (let _0x3f36bb = 0x0; _0x3f36bb < _0x44863f; _0x3f36bb++) {\n        if (_0x4df44[_0x3f36bb] == 0x0) {\n            console['log']('0');\n            return;\n        }\n    }\n    let _0x3bc3f9 = BigInt(0x1);\n    for (let _0x104eb7 = 0x0; _0x104eb7 < _0x44863f; _0x104eb7++) {\n        const _0x4712cd = BigInt(_0x4df44[_0x104eb7]);\n        if (_0x4712cd > BigInt(0xde0b6b3a7640000)) {\n            console['log']('-1');\n            return;\n        }\n        _0x3bc3f9 = _0x3bc3f9 * _0x4712cd;\n        if (_0x3bc3f9 > BigInt(0xde0b6b3a7640000)) {\n            console['log']('-1');\n            return;\n        }\n    }\n    console['log'](Number(_0x3bc3f9)['toString']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1000000000 1000000000", "1000000000000000000"], ["3\n101 9901 999999000001", "-1"], ["31\n4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0", "0"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  const N = input[0].trim();\n  const values = input[1].split(\" \");\n\n  for (let i=0;i<N;i++) {\n    if (values[i] == 0) {\n    \tconsole.log(\"0\")\n\t    return\n    }\n  }\n  \n  let result = BigInt(1);\n  for (let i=0;i<N;i++) {\n    const nextVal = BigInt(values[i]);\n    \n    if (nextVal > BigInt(1000000000000000000)) {\n      console.log(\"-1\");\n      return\n    }\n    \n    result = result * nextVal;\n    \n    if (result > BigInt(1000000000000000000)) {\n    \tconsole.log(\"-1\");\n        return\n    }\n  }\n\n  console.log(Number(result).toString());\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02854_1", "type": "JavaScript", "obfuscated": "function Main(_0x536db1) {\n    var _0x4c3a19 = parseInt(_0x536db1[0x0], 0xa);\n    var _0x3c25ea = _0x536db1[0x1]['split']('\\x20');\n    var _0x47a314 = 0x0;\n    for (var _0x1874c4 = 0x0; _0x1874c4 < _0x4c3a19; _0x1874c4++) {\n        _0x3c25ea[_0x1874c4] = parseInt(_0x3c25ea[_0x1874c4], 0xa);\n        _0x47a314 += _0x3c25ea[_0x1874c4];\n    }\n    var _0x269aa3 = 0x0;\n    var _0x329ae1 = 0x0;\n    var _0x4bdd7b = 0x0;\n    var _0x297e2f = 0x0;\n    for (var _0x1874c4 = 0x0; _0x1874c4 < _0x4c3a19; _0x1874c4++) {\n        if (_0x329ae1 + _0x3c25ea[_0x1874c4] < _0x47a314 / 0x2) {\n            _0x329ae1 += _0x3c25ea[_0x1874c4];\n        } else if (_0x329ae1 + _0x3c25ea[_0x1874c4] == _0x47a314 / 0x2) {\n            console['log']('%s', 0x0);\n            return;\n        } else {\n            _0x297e2f = _0x1874c4;\n            _0x4bdd7b = _0x47a314 - _0x329ae1 - _0x3c25ea[_0x1874c4];\n            break;\n        }\n    }\n    var _0x6ceef = Math['abs'](_0x4bdd7b - _0x329ae1);\n    var _0x269aa3 = Math['abs'](_0x3c25ea[_0x1874c4] - _0x6ceef);\n    console['log']('%s', _0x269aa3);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["3\n2 4 3", "3"], ["12\n100 104 102 105 103 103 101 105 104 102 104 101", "0"]], "original": "function Main(input) {\n  var N = parseInt(input[0], 10);\n  var A = input[1].split(\" \");\n\n  var total = 0;\n  for (var i = 0; i < N; i++) {\n    A[i] = parseInt(A[i], 10);\n    total += A[i];\n  }\n//   console.log(\"total:%s\", total);\n\n  var result = 0;\n  var mae = 0;\n  var ato = 0;\n  var target = 0;\n  for (var i = 0; i < N; i++) {\n    if (mae + A[i] < total / 2) {\n      mae += A[i];\n    } else if (mae + A[i] == total / 2) {\n      console.log(\"%s\", 0);\n      return;\n    } else {\n      target = i;\n      ato = total - mae - A[i];\n      break;\n    }\n  }\n//   console.log(\"mae:%s\", mae);\n//   console.log(\"ato:%s\", ato);\n//   console.log(\"target:%s\", i);\n//   console.log(\"Ai:%s\", A[i]);\n\n  var diff = Math.abs(ato - mae);\n//   console.log(\"diff:%s\", diff);\n  var result = Math.abs(A[i] - diff);\n  console.log(\"%s\", result);\n}\n\nMain(\n  require(\"fs\")\n    .readFileSync(\"/dev/stdin\", \"utf8\")\n    .split(\"\\n\")\n);\n", "language": "JavaScript"}
{"filename": "p02927_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x1caf0f => {\n    const _0x2a36f0 = _0x1caf0f['split']('\\x0a')['map'](_0x4c79d0 => _0x4c79d0['split']('\\x20'));\n    const _0x181671 = parseInt(_0x2a36f0[0x0][0x0], 0xa);\n    const _0x35fb5b = parseInt(_0x2a36f0[0x0][0x1], 0xa);\n    let _0x34a14d = 0x0;\n    for (let _0x379d3e = 0x1; _0x379d3e <= _0x181671; _0x379d3e++) {\n        for (let _0x2f4abe = 0x1; _0x2f4abe <= _0x35fb5b; _0x2f4abe++) {\n            const _0x8416dc = _0x2f4abe % 0xa;\n            const _0x5e7add = Math['floor'](_0x2f4abe / 0xa);\n            if (_0x8416dc >= 0x2 && _0x5e7add >= 0x2 && _0x8416dc * _0x5e7add === _0x379d3e) {\n                _0x34a14d++;\n            }\n        }\n    }\n    console['log'](_0x34a14d);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["15 40", "10"], ["12 31", "5"], ["1 1", "0"]], "original": "'use strict'\n\nconst main = input => {\n\tconst args = input.split('\\n').map(arg => arg.split(' '))\n\tconst M = parseInt(args[0][0], 10)\n\tconst D = parseInt(args[0][1], 10)\n\tlet cnt = 0\n\n\tfor (let m = 1; m <= M; m++) {\n\t\tfor (let j = 1; j <= D; j++) {\n\t\t\tconst d1 = j % 10\n\t\t\tconst d10 = Math.floor(j / 10)\n\n\t\t\tif (d1 >= 2 && d10 >= 2 && (d1 * d10 === m)) {\n\t\t\t\tcnt++\n\t\t\t}\n\t\t}\n\t}\n\n\tconsole.log(cnt)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02937_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5bc994 => {\n    const [_0x4caaf2, _0x1e8989] = _0x5bc994['trim']()['split']`\\n`;\n    const _0x7104c7 = _0x4caaf2['length'], _0x21c0c9 = _0x1e8989['length'];\n    let _0x5c6b20 = -0x1, _0x158c84 = 0x0;\n    _0xa68982:\n        for (let _0xe1c1eb = 0x0; _0xe1c1eb < _0x21c0c9; _0xe1c1eb++) {\n            for (let _0x2193dc = _0x5c6b20 + 0x1; _0x2193dc < _0x7104c7; _0x2193dc++) {\n                if (_0x4caaf2[_0x2193dc] === _0x1e8989[_0xe1c1eb]) {\n                    _0x5c6b20 = _0x2193dc;\n                    continue _0xa68982;\n                }\n            }\n            if (_0x5c6b20 === -0x1)\n                return '-1';\n            _0x158c84++;\n            _0x5c6b20 = -0x1;\n            _0xe1c1eb--;\n        }\n    return '' + (_0x158c84 * _0x7104c7 + _0x5c6b20 + 0x1);\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["contest\nson", "10"], ["contest\nprogramming", "-1"], ["contest\nsentence", "33"]], "original": "console.log((args=>{\n  const [s,t] = args.trim().split`\\n`;\n  const sl = s.length, tl = t.length;\n  let i = -1, cyc = 0;\n  T: for ( let j = 0; j < tl; j++ ) {\n    for ( let k = i+1; k < sl; k++ ) {\n      if ( s[k] === t[j] ) {\n        i = k;\n        continue T;\n      }\n    }\n    if ( i === -1 ) return '-1';\n    cyc++;\n    i = -1;\n    j--;\n  }\n  return `${cyc*sl+i+1}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03201_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction getPair(_0x49b27e) {\n    return parseInt(_0x49b27e['toString'](0x2)['split']('')['map'](_0x50f3e5 => _0x50f3e5 === '1' ? '0' : '1')['reduce']((_0x4a07cc, _0x542d02) => _0x4a07cc + _0x542d02, ''), 0x2) + 0x1;\n}\nfunction main(_0x45fc99) {\n    const _0x27985a = _0x45fc99['split']('\\x0a')['filter'](_0x43e067 => _0x43e067 !== '');\n    const _0x410e94 = _0x27985a[0x1]['split']('\\x20')['map'](Number);\n    let _0x2eb778 = _0x410e94['sort']((_0x9d0d73, _0x310724) => _0x310724 - _0x9d0d73);\n    let _0x4c1391 = 0x0;\n    while (_0x2eb778['length'] > 0x0) {\n        let _0x45ba49 = _0x2eb778[0x0];\n        _0x2eb778['splice'](0x0, 0x1);\n        let _0x39ec55 = getPair(_0x45ba49);\n        let _0x35c83a = _0x2eb778['findIndex'](_0x8c4c76 => _0x8c4c76 === _0x39ec55);\n        if (_0x35c83a >= 0x0) {\n            _0x2eb778['splice'](_0x35c83a, 0x1);\n            _0x4c1391++;\n        }\n    }\n    console['log'](_0x4c1391);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2 3", "1"], ["5\n3 11 14 5 13", "2"]], "original": "\"use strict\";\n\nfunction getPair(num) {\n  return (\n    parseInt(\n      num\n        .toString(2)\n        .split(\"\")\n        .map(x => (x === \"1\" ? \"0\" : \"1\"))\n        .reduce((acc, cur) => acc + cur, \"\"),\n      2\n    ) + 1\n  );\n}\n\nfunction main(input) {\n  const inputs = input.split(\"\\n\").filter(x => x !== \"\");\n\n  const A = inputs[1].split(\" \").map(Number);\n\n  let sortedA = A.sort((a, b) => b - a);\n  let count = 0;\n  while (sortedA.length > 0) {\n    let i = sortedA[0];\n    sortedA.splice(0, 1);\n\n    let j = getPair(i);\n\n    let indexJ = sortedA.findIndex(x => x === j);\n\n    if (indexJ >= 0) {\n      sortedA.splice(indexJ, 1);\n      count++;\n    }\n  }\n\n  console.log(count);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03214_1", "type": "JavaScript", "obfuscated": "var toInt = _0x48d9d9 => parseInt(_0x48d9d9, 0xa);\nvar toIntArr = _0x55cf6e => _0x55cf6e['map'](_0x15d553 => toInt(_0x15d553));\nvar abs = _0x6b9dda => _0x6b9dda > 0x0 ? _0x6b9dda : -_0x6b9dda;\nfunction min() {\n    var _0x4f0c5f = arguments, _0x196737 = _0x4f0c5f[0x0];\n    for (var _0x37c923 = 0x1; _0x37c923 < _0x4f0c5f['length']; _0x37c923++)\n        if (_0x4f0c5f[_0x37c923] < _0x196737)\n            _0x196737 = _0x4f0c5f[_0x37c923];\n    return _0x196737;\n}\nfunction max() {\n    var _0x474f3a = arguments, _0x26ade9 = _0x474f3a[0x0];\n    for (var _0x1a74dc = 0x1; _0x1a74dc < _0x474f3a['length']; _0x1a74dc++)\n        if (_0x474f3a[_0x1a74dc] > _0x26ade9)\n            _0x26ade9 = _0x474f3a[_0x1a74dc];\n    return _0x26ade9;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x54e16a) {\n    var _0x54e16a = _0x54e16a['split']('\\x0a');\n    var _0x2f92c9 = toInt(_0x54e16a[0x0]);\n    var _0x45c125 = toIntArr(_0x54e16a[0x1]['split']('\\x20'));\n    var _0x241acc = 0x0;\n    for (var _0x3ca326 = 0x0; _0x3ca326 < _0x2f92c9; _0x3ca326++) {\n        _0x241acc += _0x45c125[_0x3ca326];\n    }\n    var _0x435c55 = _0x45c125['map']((_0x2d2ccd, _0x210092, _0x4618fe) => abs(_0x241acc - _0x2f92c9 * _0x2d2ccd));\n    var _0x428ae8 = 0x0;\n    var _0x356f8b = _0x435c55[0x0];\n    for (var _0x3ca326 = 0x1; _0x3ca326 < _0x2f92c9; _0x3ca326++) {\n        if (_0x435c55[_0x3ca326] < _0x356f8b) {\n            _0x356f8b = _0x435c55[_0x3ca326];\n            _0x428ae8 = _0x3ca326;\n        }\n    }\n    console['log'](_0x428ae8);\n}", "test_cases": [["3\n1 2 3", "1"], ["4\n2 5 2 5", "0"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar n = toInt(input[0]);\n\tvar as = toIntArr(input[1].split(' '));\n\tvar sum = 0;\n\tfor(var i = 0; i < n; i++){\n\t\tsum += as[i];\n\t}\n\tvar bs = as.map((el,ind,arr)=>abs(sum - n*el));\n\tvar ans = 0;\n\tvar min = bs[0];\n\tfor(var i = 1; i < n; i++){\n\t\tif(bs[i] < min){\n\t\t\tmin = bs[i];\n\t\t\tans = i;\n\t\t}\n\t}\n\tconsole.log(ans);\n}", "language": "JavaScript"}
{"filename": "p03229_1", "type": "JavaScript", "obfuscated": "function Main(_0x301d7a) {\n    var _0xcf7b94 = _0x301d7a['split']('\\x0a')['map'](function (_0x332dc9) {\n        return _0x332dc9 - 0x0;\n    });\n    var _0x498486 = _0xcf7b94['shift']();\n    _0xcf7b94['sort'](function (_0x3fd06a, _0x569d00) {\n        return _0x569d00 - _0x3fd06a;\n    });\n    var _0x1361fa = new Array(_0x498486);\n    var _0x5cc437 = 0x0;\n    var _0x27a32e = _0x498486 - 0x1;\n    for (var _0x2ea34c = 0x0; _0x2ea34c < _0x498486 / 0x2; _0x2ea34c++, _0x27a32e--) {\n        _0x1361fa[_0x5cc437++] = _0xcf7b94[_0x2ea34c];\n        _0x1361fa[_0x5cc437++] = _0xcf7b94[_0x27a32e];\n    }\n    var _0x24f6e9 = 0x0, _0x484538 = 0x0;\n    _0x5cc437 = _0x498486 - 0x1;\n    for (var _0x43f273 = 0x0; _0x43f273 < _0x498486 - 0x1; _0x43f273++) {\n        _0x27a32e = Math['abs'](_0x1361fa[_0x5cc437] - _0x1361fa[_0x43f273]);\n        _0x24f6e9 += _0x27a32e;\n        _0x5cc437 = _0x43f273;\n    }\n    for (var _0x43f273 = 0x0; _0x43f273 < _0x498486 - 0x1; _0x43f273++) {\n        _0x27a32e = Math['abs'](_0x1361fa[_0x43f273] - _0x1361fa[_0x43f273 + 0x1]);\n        _0x484538 += _0x27a32e;\n    }\n    console['log'](Math['max'](_0x24f6e9, _0x484538));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n6\n8\n1\n2\n3", "21"], ["6\n3\n1\n4\n1\n5\n9", "25"], ["3\n5\n5\n1", "8"]], "original": "function Main(input) {\n    var nums = input.split(\"\\n\").map(function(value) { return value - 0; });\n    var N = nums.shift();\n    nums.sort(function(a,b) { return b - a; });\n    var ary = new Array(N);\n    var m = 0;\n    var r = N - 1;\n    for (var l = 0; l < N / 2; l++, r--) {\n      ary[m++] = nums[l];\n      ary[m++] = nums[r];\n    }\n    var s = 0, s1 = 0;\n    m = N - 1;\n    for (var n = 0; n < N - 1; n++) {\n      r = (Math.abs(ary[m] - ary[n]));\n      s += r;\n      m = n;\n    }\n    for (var n = 0; n < N - 1; n++) {\n      r = (Math.abs(ary[n] - ary[n+1]));\n      s1 += r;\n    }\n    console.log(Math.max(s, s1));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03386_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x42130e) {\n    lines['push'](_0x42130e);\n});\nrl['on']('close', function () {\n    var _0x397a22 = Number(lines[0x0]['split']('\\x20')[0x0]);\n    var _0x51b38c = Number(lines[0x0]['split']('\\x20')[0x1]);\n    var _0x5cebc2 = Number(lines[0x0]['split']('\\x20')[0x2]);\n    var _0x57c219 = '';\n    for (var _0x3d8766 = _0x397a22; _0x3d8766 <= _0x51b38c; _0x3d8766++) {\n        if (_0x3d8766 < _0x397a22 + _0x5cebc2) {\n            _0x57c219 += _0x3d8766['toString']();\n        } else if (_0x3d8766 > _0x51b38c - _0x5cebc2) {\n            _0x57c219 += _0x3d8766['toString']();\n        }\n    }\n    for (var _0x3d8766 = 0x0; _0x3d8766 < _0x57c219['length']; _0x3d8766++) {\n        console['log'](_0x57c219[_0x3d8766]);\n    }\n});", "test_cases": [["3 8 2", "3\n4\n7\n8"], ["4 8 3", "4\n5\n6\n7\n8"], ["2 9 100", "2\n3\n4\n5\n6\n7\n8\n9"]], "original": "var lines = [];\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var A = Number(lines[0].split(\" \")[0])\n    var B = Number(lines[0].split(\" \")[1])\n    var K = Number(lines[0].split(\" \")[2])\n\n    var ans = \"\";\n    for (var i = A; i <= B; i++) {\n        if (i < A + K) { ans += i.toString() }\n        else if (i > B - K) { ans += i.toString() }\n    }\n    for (var i = 0; i < ans.length; i++) {\n        console.log(ans[i])\n    }\n});", "language": "JavaScript"}
{"filename": "p03548_1", "type": "JavaScript", "obfuscated": "function Main(_0x585d60) {\n    var _0x29fbdf = parseInt(_0x585d60['split']('\\x20')[0x0]);\n    var _0x46771e = parseInt(_0x585d60['split']('\\x20')[0x1]);\n    var _0x84b5a0 = parseInt(_0x585d60['split']('\\x20')[0x2]);\n    var _0x2a66ab = 0x1;\n    var _0x3ec781 = 0x0;\n    while (!![]) {\n        _0x3ec781 = _0x2a66ab * _0x46771e + (_0x2a66ab + 0x1) * _0x84b5a0;\n        if (_0x3ec781 > _0x29fbdf)\n            break;\n        _0x2a66ab++;\n    }\n    console['log'](--_0x2a66ab);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["13 3 1", "3"], ["12 3 1", "2"], ["100000 1 1", "49999"], ["64146 123 456", "110"], ["64145 123 456", "109"]], "original": "function Main(input){\n  var X = parseInt(input.split(' ')[0]);  // total\n  var Y = parseInt(input.split(' ')[1]);  // human space\n  var Z = parseInt(input.split(' ')[2]);  // void space\n\n  var N = 1; // human count\n  var x = 0; // space\n  while(true){\n    x = (N * Y) + (N + 1) * Z;\n    if(x > X) break;\n    N++;\n  }\n  console.log(--N);\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03673_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x40dd2b => {\n    _0x40dd2b = _0x40dd2b['trim']()['split']('\\x0a');\n    const _0x3ea5d3 = ~~_0x40dd2b[0x0];\n    const _0x5315cb = _0x40dd2b[0x1]['split']('\\x20')['map'](_0xef4472 => ~~_0xef4472);\n    let _0xb4e13b = [];\n    for (let _0x5bdf5b = 0x0; _0x5bdf5b < _0x3ea5d3; _0x5bdf5b++) {\n        if (_0x5bdf5b % 0x2 === 0x0) {\n            _0xb4e13b['push'](_0x5315cb[_0x5bdf5b]);\n        } else {\n            _0xb4e13b['unshift'](_0x5315cb[_0x5bdf5b]);\n        }\n    }\n    if (_0x3ea5d3 % 0x2 !== 0x0)\n        _0xb4e13b = _0xb4e13b['reverse']();\n    console['log'](_0xb4e13b['join']('\\x20'));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 2 3 4", "4 2 1 3"], ["3\n1 2 3", "3 1 2"], ["1\n1000000000", "1000000000"], ["6\n0 6 7 6 7 0", "0 6 6 0 7 7"]], "original": "\n\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = ~~arg[0];\n    const b = arg[1].split(\" \").map(n=>~~n);\n    \n    let answer = [];\n    \n    for(let i=0; i<N; i++) {\n        if(i % 2 === 0) {\n            answer.push(b[i]);\n        } else {\n            answer.unshift(b[i]);\n        }\n    }\n    \n    if(N % 2 !== 0) answer = answer.reverse();\n    \n    console.log(answer.join(\" \"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03992_1", "type": "JavaScript", "obfuscated": "function Main(_0x24c951) {\n    _0x24c951 = _0x24c951['split']('');\n    _0x24c951['splice'](0x4, 0x0, '\\x20');\n    console['log'](_0x24c951['join'](''));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["CODEFESTIVAL", "CODE FESTIVAL"], ["POSTGRADUATE", "POST GRADUATE"], ["ABCDEFGHIJKL", "ABCD EFGHIJKL"]], "original": "function Main(input) {\n\tinput = input.split(\"\");\n\tinput.splice(4,0,\" \");\n\tconsole.log(input.join(\"\"))\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p00170_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var nww = [];\n    for (var i = 0x0; i < n; i++)\n        nww[i] = arr['shift']()['split']('\\x20');\n    nww = nww['map'](_0x13ea8b => [\n        _0x13ea8b[0x0],\n        _0x13ea8b[0x1] - 0x0,\n        _0x13ea8b[0x2] - 0x0\n    ]);\n    var max = 0x0;\n    var ans = [];\n    var bomb = function (_0x3b7e1a, _0x41e5de, _0x42eda1, _0x1c4948) {\n        if (_0x41e5de['length'] == 0x0) {\n            if (max < _0x1c4948 / _0x42eda1) {\n                ans = _0x3b7e1a;\n                max = _0x1c4948 / _0x42eda1;\n            }\n            return;\n        }\n        _0x41e5de['forEach'](_0x3d9de5 => {\n            if (_0x42eda1 <= nww[_0x3d9de5][0x2]) {\n                var _0x36dafa = _0x3b7e1a['concat'](_0x3d9de5);\n                var _0x20f38a = _0x41e5de['slice']()['filter'](_0x4caa8a => _0x3d9de5 != _0x4caa8a);\n                var _0x26430a = _0x42eda1 + nww[_0x3d9de5][0x1];\n                var _0x4f3581 = _0x1c4948 + nww[_0x3d9de5][0x1] * (_0x3b7e1a['length'] + 0x1);\n                bomb(_0x36dafa, _0x20f38a, _0x26430a, _0x4f3581);\n            }\n        });\n    };\n    var bombArr = [];\n    for (var i = 0x0; i < n; i++)\n        bombArr['push'](i);\n    bomb([], bombArr, 0x0, 0x0);\n    console['log'](ans['map'](_0x300614 => nww[_0x300614][0x0])['reverse']()['join']('\\x0a'));\n}", "test_cases": [["4\nsandwich 80 120\napple 50 200\ncheese 20 40\ncake 100 100\n9\nonigiri 80 300\nonigiri 80 300\nanpan 70 280\nmikan 50 80\nkanzume 100 500\nchocolate 50 350\ncookie 30 80\npurin 40 400\ncracker 40 160\n0", "apple\ncake\nsandwich\ncheese\nkanzume\npurin\nchocolate\nonigiri\nonigiri\nanpan\nmikan\ncracker\ncookie"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var nww = [];\n   for (var i = 0; i < n; i++) nww[i] = arr.shift().split(\" \");\n   nww = nww.map(v => [v[0], v[1] - 0, v[2] - 0]);\n   var max = 0;\n   var ans = [];\n   var bomb = function (arrA, arrB, sum, g) {\n      if (arrB.length == 0) {\n         if (max < g / sum) {\n            ans = arrA;\n            max = g / sum;\n         }\n         return;\n      }\n      arrB.forEach(v => {\n         if (sum <= nww[v][2]) {\n            var a = arrA.concat(v);\n            var b = arrB.slice().filter(n => v != n);\n            var c = sum + nww[v][1];\n            var d = g + nww[v][1] * (arrA.length + 1);\n            bomb(a, b, c, d);\n         }\n      });\n   };\n   var bombArr = [];\n   for (var i = 0; i < n; i++) bombArr.push(i);\n   bomb([], bombArr, 0, 0);\n   console.log(ans.map(v => nww[v][0]).reverse().join(\"\\n\"));\n}\n\n", "language": "JavaScript"}
{"filename": "p02396_1", "type": "JavaScript", "obfuscated": "var input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x1421ab) {\n    input += _0x1421ab;\n});\nprocess['stdin']['on']('end', function () {\n    var _0x4c5c69 = input['split']('\\x0a');\n    var _0x245f8a = '';\n    for (var _0xfeed3f = 0x0; _0xfeed3f < _0x4c5c69['length']; _0xfeed3f++) {\n        _0x4c5c69[_0xfeed3f] = Number(_0x4c5c69[_0xfeed3f]);\n        if (_0x4c5c69[_0xfeed3f] == 0x0) {\n            break;\n        }\n        _0x245f8a += 'Case\\x20' + (_0xfeed3f + 0x1) + ':\\x20' + _0x4c5c69[_0xfeed3f] + '\\x0a';\n    }\n    console['log'](_0x245f8a);\n});", "test_cases": [["3\n5\n11\n7\n8\n19\n0", "Case 1: 3\nCase 2: 5\nCase 3: 11\nCase 4: 7\nCase 5: 8\nCase 6: 19"]], "original": "var input = \"\";\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function (chunk) {\n    input += chunk;\n});\nprocess.stdin.on('end', function (){\n    var nums = input.split(\"\\n\");\n    var output = \"\";\n    \n    for(var i = 0; i < nums.length; i ++){\n        nums[i] = Number(nums[i]);\n        if(nums[i] == 0){\n            break;\n        }\n        output += \"Case \" + (i + 1) + \": \" + nums[i] + \"\\n\"; \n    }\n    console.log(output);\n});", "language": "JavaScript"}
{"filename": "p02420_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x271efe) {\n    var _0x8e9406 = _0x271efe['toString']();\n    var _0x6a688c = /[A-Za-z]+\\n([1-9][0-9]*\\n)+/g;\n    var _0x230882 = function (_0x36202f) {\n        return _0x36202f['map'](function (_0x135b9d) {\n            return _0x135b9d['slice'](-_0x135b9d[0x1])['map'](Number)['reduce'](function (_0x248d34, _0x44c2de) {\n                return _0x248d34['slice'](_0x44c2de) + _0x248d34['slice'](0x0, _0x44c2de);\n            }, _0x135b9d[0x0]);\n        })['join']('\\x0a');\n    }(_0x8e9406['match'](_0x6a688c)['map'](function (_0x31d67c) {\n        return _0x31d67c['trim']()['split']('\\x0a');\n    }));\n    console['log'](_0x230882);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["aabc\n3\n1\n2\n1\nvwxyz\n2\n3\n4\n-", "aabc\nxyzvw"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString();\n  var re = /[A-Za-z]+\\n([1-9][0-9]*\\n)+/g;\n  var result = (function(data) {\n    return data\n      .map(function(v) {\n        return v.slice(- v[1])\n          .map(Number)\n          .reduce(function(str,num) {\n            return str.slice(num) + str.slice(0,num);\n          },v[0]);\n      }).join('\\n');\n  }(lines.match(re).map(function(v){return v.trim().split('\\n');})\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02554_1", "type": "JavaScript", "obfuscated": "const mod = 0xa ** 0x9 + 0x7;\nfunction pow(_0x495d19, _0x360994) {\n    var _0xa8c4ba = 0x1;\n    for (var _0x45f325 = 0x1; _0x45f325 <= _0x360994; _0x45f325++) {\n        _0xa8c4ba = _0xa8c4ba * _0x495d19 % mod;\n    }\n    return _0xa8c4ba;\n}\n;\nfunction Main(_0x2a119f) {\n    const [_0x50191c] = _0x2a119f['trim']()['split']('\\x20')['map'](_0x43f010 => parseInt(_0x43f010));\n    var _0x5d4de5 = pow(0xa, _0x50191c) - pow(0x9, _0x50191c) * 0x2 + pow(0x8, _0x50191c);\n    _0x5d4de5 = _0x5d4de5 % mod;\n    _0x5d4de5 = (_0x5d4de5 + mod) % mod;\n    console['log'](_0x5d4de5);\n}\n;\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2", "2"], ["1", "0"], ["869121", "2511445"]], "original": "const mod = 10**9 +7;\n\nfunction pow (x,y){\n    var r = 1;\n    for (var i=1; i<=y; i++){\n        r = (r * x) % mod;\n    }\n    return r;\n};\n\n\nfunction Main (input){\n    const [N] = input.trim().split(' ').map(x => parseInt(x));\n    var count = pow(10,N)-(pow(9,N)*2)+pow(8,N);\n    count = count % mod;\n    count = (count + mod) % mod;\n    console.log(count)\n};\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02664_1", "type": "JavaScript", "obfuscated": "function Main(_0x14dc4f) {\n    let _0x5a91e5 = '';\n    for (let _0x2ef107 = 0x0; _0x2ef107 < _0x14dc4f['length']; _0x2ef107++) {\n        if (_0x14dc4f[_0x2ef107] === '?' && (_0x14dc4f[_0x2ef107 - 0x1] && _0x14dc4f[_0x2ef107 - 0x1] === 'P' || _0x14dc4f[_0x2ef107 + 0x1] && _0x14dc4f[_0x2ef107 + 0x1] === 'P')) {\n            _0x5a91e5 = _0x5a91e5 + 'D';\n        } else if (_0x14dc4f[_0x2ef107] == '?') {\n            _0x5a91e5 = _0x5a91e5 + 'P';\n        } else {\n            _0x5a91e5 = _0x5a91e5 + _0x14dc4f[_0x2ef107];\n        }\n    }\n    console['log'](_0x5a91e5);\n}\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nMain(input);", "test_cases": [["PD?D??P", "PDPDPDP"], ["P?P?", "PDPD"]], "original": "function Main(str) {\n  \tlet newString = '';\n\tfor(let i=0;i<str.length;i++) {\n    \tif(str[i] === '?' && (str[i-1] && str[i-1] === 'P' || str[i+1] && str[i+1] === 'P')) {\n        \tnewString = newString + 'D';\n        } else if(str[i] == '?') {\n        \tnewString = newString + 'P';\n        } else {\n        \tnewString = newString + str[i];\n        }\n    }\n  \n  \tconsole.log(newString);\n  \t\n}\n\nlet input = require('fs').readFileSync('/dev/stdin', 'utf8');\nMain(input);\n", "language": "JavaScript"}
{"filename": "p02726_1", "type": "JavaScript", "obfuscated": "function main(_0x54bf77) {\n    function _0x2ecc70(_0x1b3c10, _0x210f92) {\n        return Math['min'](_0x210f92 - _0x1b3c10, Math['abs'](_0x464bd2 - _0x1b3c10) + Math['abs'](_0x4dac4f - _0x210f92) + 0x1);\n    }\n    const _0x2256fa = _0x54bf77['split']('\\x20');\n    const _0x129b45 = _0x2256fa[0x0];\n    const _0x464bd2 = _0x2256fa[0x1];\n    const _0x4dac4f = _0x2256fa[0x2];\n    for (var _0x75896d = 0x1; _0x75896d < _0x129b45; _0x75896d++) {\n        var _0x47bb93 = 0x0;\n        for (var _0x26ceba = 0x1; _0x26ceba < _0x129b45; _0x26ceba++)\n            for (var _0x4372e7 = _0x26ceba + 0x1; _0x4372e7 <= _0x129b45; _0x4372e7++)\n                if (_0x2ecc70(_0x26ceba, _0x4372e7) == _0x75896d)\n                    _0x47bb93++;\n        console['log'](_0x47bb93);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2 4", "5\n4\n1\n0"], ["3 1 3", "3\n0"], ["7 3 7", "7\n8\n4\n2\n0\n0"], ["10 4 8", "10\n12\n10\n8\n4\n1\n0\n0\n0"]], "original": "function main(input) {\n  function dist(a, b) {\n\t\treturn Math.min(b-a, Math.abs(x-a)+Math.abs(y-b)+1);\n\t}\n\t\n  const inp = input.split(' ');\n\tconst n = inp[0];\n\tconst x = inp[1];\n\tconst y = inp[2];\n  \n  for(var i=1;i<n; i++) {\n    var cnt = 0;\n    \n    for(var a=1; a<n; a++)\n      for(var b=a+1; b<=n; b++)\n        if(dist(a,b) == i)\n          cnt++;\n    \n    console.log(cnt);\n  }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03209_1", "type": "JavaScript", "obfuscated": "function Main(_0x28d83e) {\n    _0x28d83e = _0x28d83e['split']('\\x0a');\n    var _0x5ed4f1 = parseInt(_0x28d83e[0x0]['split']('\\x20')[0x0]);\n    var _0x6d8c22 = parseInt(_0x28d83e[0x0]['split']('\\x20')[0x1]);\n    bans = new Array(0x32);\n    all = new Array(0x32);\n    bans[0x0] = 0x1;\n    all[0x0] = 0x1;\n    var _0x378d4a = 0x0;\n    for (i = 0x1; i <= 0x32; i++) {\n        bans[i] = bans[i - 0x1] * 0x2 + 0x1;\n        all[i] = all[i - 0x1] * 0x2 + 0x3;\n    }\n    var _0x1c436e = all[_0x5ed4f1];\n    var _0xd76fe3 = bans[_0x5ed4f1];\n    var _0x3a45da = 0x0;\n    if (_0x6d8c22 % 0x2 == 0x0) {\n        _0x6d8c22 = all[_0x5ed4f1] - _0x6d8c22;\n        _0x3a45da = 0x1;\n    }\n    while (_0x6d8c22 > 0x0) {\n        if (_0x6d8c22 > (_0x1c436e - 0x1) / 0x2) {\n            _0x6d8c22 = _0x6d8c22 - (_0x1c436e - 0x1) / 0x2 - 0x1;\n            _0x378d4a = _0x378d4a + (_0xd76fe3 - 0x1) / 0x2 + 0x1;\n            _0x1c436e = (_0x1c436e - 0x1) / 0x2 - 0x1;\n            _0xd76fe3 = (_0xd76fe3 - 0x1) / 0x2;\n        } else {\n            _0x6d8c22 = _0x6d8c22 - 0x1;\n            _0x1c436e = (_0x1c436e - 0x1) / 0x2 - 0x1;\n            _0xd76fe3 = (_0xd76fe3 - 0x1) / 0x2;\n        }\n    }\n    if (_0x3a45da == 0x1) {\n        _0x378d4a = bans[_0x5ed4f1] - _0x378d4a;\n    }\n    console['log']('%s', _0x378d4a);\n}\nfunction debug() {\n    var _0x5bc21f = document['getElementById']('input')['value'];\n    Main(_0x5bc21f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 7", "4"], ["1 1", "0"], ["50 4321098765432109", "2160549382716056"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var X = parseInt(input[0].split(\" \")[1]);\n  bans=new Array(50);\n  all=new Array(50);\n  bans[0]=1;\n  all[0]=1;\n  var ans = 0;\n  for(i=1;i<=50;i++){\n    bans[i]=bans[i-1]*2+1;\n    all[i]=all[i-1]*2+3;\n  }\n  var full=all[N];\n  var bs=bans[N];\n  var flag=0;\n  if(X%2==0){\n    X=all[N]-X;\n    flag=1;\n  }\n  while(X>0){\n\n    if(X>(full-1)/2){\n      X=X-(full-1)/2-1;\n      ans=ans+(bs-1)/2+1;\n      full=(full-1)/2-1;\n      bs=(bs-1)/2\n    }else{\n      X=X-1;\n      full=(full-1)/2-1;\n      bs=(bs-1)/2\n    }\n  }\n  if(flag==1){\n    ans=bans[N]-ans;\n  }\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03227_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x3a6920) {\n    const _0x29221b = _0x3a6920['split']('\\x0a')[0x0];\n    if (_0x29221b['length'] <= 0x2) {\n        console['log'](_0x29221b);\n    } else {\n        console['log'](_0x29221b['split']('')['reverse']()['join'](''));\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abc", "cba"], ["ac", "ac"]], "original": "'use strict';\n\nfunction Main(input) {\n    const S = input.split('\\n')[0];\n    if (S.length <= 2) {\n        console.log(S);\n    } else {\n        console.log(S.split(\"\").reverse().join(\"\"));\n    }\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03435_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x516bce => {\n    _0x516bce = _0x516bce['trim']()['split']('\\x0a');\n    const _0x3a5cf5 = _0x516bce['map'](_0x88c553 => _0x88c553['split']('\\x20')['map'](_0xa5a91f => parseInt(_0xa5a91f)));\n    for (let _0x330e00 = 0x0; _0x330e00 <= 0x64; _0x330e00++) {\n        const _0x5bc9d8 = _0x3a5cf5[0x0][0x0] - _0x330e00;\n        const _0x55bf08 = _0x3a5cf5[0x1][0x0] - _0x330e00;\n        const _0x5bed8b = _0x3a5cf5[0x2][0x0] - _0x330e00;\n        for (let _0x333c40 = 0x0; _0x333c40 <= 0x64; _0x333c40++) {\n            if (_0x333c40 + _0x5bc9d8 !== _0x3a5cf5[0x0][0x1])\n                continue;\n            if (_0x333c40 + _0x55bf08 !== _0x3a5cf5[0x1][0x1])\n                continue;\n            if (_0x333c40 + _0x5bed8b !== _0x3a5cf5[0x2][0x1])\n                continue;\n            for (let _0x369b9a = 0x0; _0x369b9a <= 0x64; _0x369b9a++) {\n                if (_0x369b9a + _0x5bc9d8 !== _0x3a5cf5[0x0][0x2])\n                    continue;\n                if (_0x369b9a + _0x55bf08 !== _0x3a5cf5[0x1][0x2])\n                    continue;\n                if (_0x369b9a + _0x5bed8b !== _0x3a5cf5[0x2][0x2])\n                    continue;\n                console['log']('Yes');\n                return;\n            }\n        }\n    }\n    console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 0 1\n2 1 2\n1 0 1", "Yes"], ["2 2 2\n2 1 2\n2 2 2", "No"], ["0 8 8\n0 8 8\n0 8 8", "Yes"], ["1 8 6\n2 9 7\n0 7 7", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const c = arg.map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    // a1の仮定100通りを試す\n    for(let a1=0; a1<=100; a1++) {\n        // a1が決まればb1,b2,b3も決まる\n        const b1 = c[0][0] - a1;\n        const b2 = c[1][0] - a1;\n        const b3 = c[2][0] - a1;\n        \n        // そうすると、他のaの値も全て確定するので正しいか検証する\n        for(let a2=0; a2<=100; a2++) {\n            if(a2 + b1 !== c[0][1]) continue;\n            if(a2 + b2 !== c[1][1]) continue;\n            if(a2 + b3 !== c[2][1]) continue;\n\n            for(let a3=0; a3<=100; a3++) {\n                if(a3 + b1 !== c[0][2]) continue;\n                if(a3 + b2 !== c[1][2]) continue;\n                if(a3 + b3 !== c[2][2]) continue;\n                \n                console.log(\"Yes\");\n                return;\n            }\n        }\n    }\n    \n    console.log(\"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03487_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar result = 0x0;\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x46cd65) {\n    lines['push'](_0x46cd65);\n});\nrl['on']('close', function () {\n    var _0x2c672a = Number(lines[0x0]);\n    var _0x554a4d = lines[0x1]['split']('\\x20')['map'](_0x1dd04e => Number(_0x1dd04e));\n    _0x554a4d['sort']((_0x49445c, _0x1a3a9d) => _0x49445c - _0x1a3a9d);\n    var _0x12f065 = Array(_0x2c672a)['fill'](0x0);\n    var _0x54d5fd = 0x0;\n    _0x12f065[0x0] = [\n        _0x554a4d[0x0],\n        0x1\n    ];\n    for (var _0xa2dd43 = 0x1; _0xa2dd43 < _0x2c672a; _0xa2dd43++) {\n        if (_0x554a4d[_0xa2dd43] !== _0x554a4d[_0xa2dd43 - 0x1]) {\n            _0x54d5fd++;\n            _0x12f065[_0x54d5fd] = [\n                _0x554a4d[_0xa2dd43],\n                0x1\n            ];\n        } else {\n            var _0x38bcbe = _0x12f065[_0x54d5fd][0x1] + 0x1;\n            _0x12f065[_0x54d5fd] = [\n                _0x554a4d[_0xa2dd43],\n                _0x38bcbe\n            ];\n        }\n    }\n    for (var _0xa2dd43 = 0x0; _0xa2dd43 < _0x12f065['length']; _0xa2dd43++) {\n        if (_0x12f065[_0xa2dd43][0x0] === _0x12f065[_0xa2dd43][0x1]) {\n            continue;\n        } else {\n            if (_0x12f065[_0xa2dd43] === 0x0) {\n                continue;\n            } else {\n                result += Math['min'](_0x12f065[_0xa2dd43][0x1], Math['abs'](_0x12f065[_0xa2dd43][0x0] - _0x12f065[_0xa2dd43][0x1]));\n            }\n        }\n    }\n    console['log'](result);\n});", "test_cases": [["4\n3 3 3 3", "1"], ["5\n2 4 1 4 2", "2"], ["6\n1 2 2 3 3 3", "0"], ["1\n1000000000", "1"], ["8\n2 7 1 8 2 8 1 8", "5"]], "original": "var lines = [];\nvar result = 0;\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var a = lines[1].split(\" \").map(value => Number(value));\n\n    a.sort((a, b) => a - b);\n\n    var counter = Array(N).fill(0);\n    var j = 0;\n\n    counter[0] = [a[0], 1];\n    for (var i = 1; i < N; i++) {\n        if (a[i] !== a[i - 1]) { j++; counter[j] = [a[i], 1] }\n        else { var cnt = counter[j][1] + 1; counter[j] = [a[i], cnt]; }\n    }\n\n    for (var i = 0; i < counter.length; i++) {\n\n        if (counter[i][0] === counter[i][1]) { continue; }\n        else {\n            if (counter[i] === 0) { continue; }\n            else {\n                result += Math.min(counter[i][1], Math.abs((counter[i][0] - counter[i][1])));\n            }\n        }\n    }\n    console.log(result);\n});", "language": "JavaScript"}
{"filename": "p04031_1", "type": "JavaScript", "obfuscated": "function myout(_0x146c4e) {\n    console['log'](_0x146c4e);\n}\nfunction Main(_0x202877) {\n    _0x202877 = _0x202877['trim']()['split']('\\x0a');\n    var _0x1974d9 = parseInt(_0x202877[0x0]);\n    var _0x1f276 = _0x202877[0x1]['split']('\\x20')['map'](_0x103547 => Number(_0x103547));\n    var _0x4f80af;\n    var _0x1768c6 = 0x0;\n    var _0x5661b6 = 0x0;\n    for (var _0x2ddaac = 0x0; _0x2ddaac < _0x1f276['length']; _0x2ddaac++) {\n        _0x1768c6 += _0x1f276[_0x2ddaac];\n    }\n    _0x4f80af = Math['round'](_0x1768c6 / _0x1974d9);\n    for (var _0x2ddaac = 0x0; _0x2ddaac < _0x1f276['length']; _0x2ddaac++) {\n        _0x5661b6 += Math['pow'](_0x1f276[_0x2ddaac] - _0x4f80af, 0x2);\n    }\n    myout(_0x5661b6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["2\n4 8", "8"], ["3\n1 1 3", "3"], ["3\n4 2 5", "5"], ["4\n-100 -100 -100 -100", "0"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\tinput = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var N = parseInt(input[0]);\n  var list = input[1].split(\" \").map((a)=>Number(a));\n  var ave;\n  var sum = 0;\n  var output = 0;\n  for(var i = 0; i < list.length; i++){\n    sum += list[i];\n  }\n  ave = Math.round(sum / N);\n  for(var i = 0; i < list.length; i++){\n    output += Math.pow((list[i] - ave),2);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p00728_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x1c1080) {\n    before(_0x1c1080);\n});\nvar log = console['log'];\nfunction before(_0x519c39) {\n    var _0x192c46 = _0x519c39['split']('\\x0a');\n    _0x192c46 = _0x192c46['filter'](function (_0x1e10d3) {\n        return _0x1e10d3 !== '';\n    });\n    main(_0x192c46);\n}\nfunction main(_0x5c4a9c) {\n    var _0x27308f = _0x5c4a9c['map'](function (_0x145694) {\n        return Number(_0x145694);\n    });\n    while (_0x27308f['length'] > 0x1) {\n        var _0x5ccaea = _0x27308f['shift']();\n        var _0x194481 = _0x27308f['slice'](0x0, _0x5ccaea);\n        _0x27308f = _0x27308f['slice'](_0x5ccaea);\n        var _0x3c53a5 = _0x194481['indexOf'](Math['min']['apply'](this, _0x194481));\n        _0x194481['splice'](_0x3c53a5, 0x1);\n        var _0x540a33 = _0x194481['indexOf'](Math['max']['apply'](this, _0x194481));\n        _0x194481['splice'](_0x540a33, 0x1);\n        var _0x35e58d = _0x194481['reduce'](function (_0x171463, _0x5dca34, _0x173079, _0x4ed93b) {\n            return _0x171463 + _0x5dca34;\n        });\n        log(Math['round'](_0x35e58d / _0x194481['length']));\n    }\n}", "test_cases": [["3\n1000\n342\n0\n5\n2\n2\n9\n11\n932\n5\n300\n1000\n0\n200\n400\n8\n353\n242\n402\n274\n283\n132\n402\n523\n0", "342\n7\n300\n326"]], "original": "\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data',function(line){\n\tbefore(line);\n});\n\nvar log = console.log;\nfunction before(line){\n\tvar lines = line.split(\"\\n\");\n\tlines = lines.filter(function(e){\n\t\treturn (e !== \"\");\n\t});\n\tmain(lines);\n}\n\n//-----------\nfunction main(lines){\n\tvar ls = lines.map(function(e){return Number(e);});\n\twhile(ls.length > 1){\n\t\tvar tpl = ls.shift();\n\t\tvar arr = ls.slice(0,tpl);\n\t\tls = ls.slice(tpl);\n\t\tvar mid = arr.indexOf(Math.min.apply(this,arr));\n\t\tarr.splice(mid,1);\n\t\tvar Mid = arr.indexOf(Math.max.apply(this,arr));\n\t\tarr.splice(Mid,1);\n\t\tvar sum = arr.reduce(function(p,c,i,a){return p+c;});\n\t\tlog(Math.round(sum/arr.length));\n\t}\n}", "language": "JavaScript"}
{"filename": "p02237_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nline = require('fs')['readFileSync'](config['input'], 'ascii')['trim']()['split'](config['newline']);\nn = Number(line['shift']());\nadj = {};\nfor (i in line) {\n    ary = line[i]['split']('\\x20');\n    j = ary['shift']();\n    ary['shift']();\n    adj[j] = ary;\n}\nfor (i = 0x1; i <= n; i++) {\n    ary = [];\n    for (j = 0x1; j <= n; j++) {\n        if (adj[i]['indexOf'](String(j)) !== -0x1)\n            ary['push'](0x1);\n        else\n            ary['push'](0x0);\n    }\n    console['log'](ary['join']('\\x20'));\n}", "test_cases": [["4\n1 2 2 4\n2 1 4\n3 0\n4 1 3", "0 1 0 1\n0 0 0 1\n0 0 0 0\n0 0 1 0"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline);\nn = Number(line.shift());\nadj = {};\nfor (i in line) {\n  ary = line[i].split(' ');\n  j = ary.shift();\n  ary.shift();\n  adj[j] = ary;\n}\n\nfor (i = 1; i <= n; i++) {\n  ary = [];\n  for (j = 1; j <= n; j++) {\n    if (adj[i].indexOf(String(j)) !== -1) ary.push(1);\n    else ary.push(0);\n  }\n  console.log(ary.join(' '));\n}", "language": "JavaScript"}
{"filename": "p02239_1", "type": "JavaScript", "obfuscated": "function main(_0x30857a) {\n    const _0x816864 = _0x30857a['split']('\\x0a');\n    const _0x338ea4 = parseInt(_0x816864['shift'](), 0xa);\n    const _0x51e192 = _0x816864['filter']((_0x542f0e, _0x96a7a4) => _0x96a7a4 < _0x338ea4)['map'](_0x386042 => _0x386042['split']('\\x20')['map'](_0x2748a8 => parseInt(_0x2748a8, 0xa)));\n    const _0x36788d = [\n        null,\n        0x0\n    ];\n    bfs(_0x51e192[0x0], _0x36788d, _0x51e192);\n    for (const _0x1076da of _0x51e192) {\n        if (_0x36788d[_0x1076da[0x0]] === undefined)\n            _0x36788d[_0x1076da[0x0]] = -0x1;\n    }\n    _0x36788d['shift']();\n    _0x36788d['forEach']((_0x101e0a, _0x9fdf74) => {\n        console['log'](_0x9fdf74 + 0x1, _0x101e0a);\n    });\n}\nfunction bfs(_0x2a374f, _0x3c89de, _0x230915) {\n    const _0x14b9bc = _0x2a374f[0x0];\n    const _0x236bb3 = _0x3c89de[_0x14b9bc] + 0x1;\n    const _0x606f72 = _0x2a374f['slice'](0x2);\n    for (const _0x4697dc of _0x606f72) {\n        if (_0x3c89de[_0x4697dc] === undefined || _0x3c89de[_0x4697dc] > _0x236bb3) {\n            const _0x3d20c2 = _0x230915['find'](_0x77eb73 => _0x77eb73[0x0] === _0x4697dc);\n            _0x3c89de[_0x4697dc] = _0x236bb3;\n            bfs(_0x3d20c2, _0x3c89de, _0x230915);\n        }\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 2 2 4\n2 1 4\n3 0\n4 1 3", "1 0\n2 1\n3 2\n4 1"]], "original": "function main(_stdin){\n    const stdin = _stdin.split('\\n');\n    const len = parseInt(stdin.shift(), 10);\n\n    const data = stdin.filter((e, i) => i < len).map(e => e.split(' ').map(e => parseInt(e, 10)));\n\n    const dists = [null, 0];\n\n    bfs(data[0], dists, data);\n\n    for(const node of data){\n        if(dists[node[0]] === undefined) dists[node[0]] = -1;\n    }\n    dists.shift();\n    dists.forEach((e, i) => {\n        console.log(i + 1,  e);\n    });\n}\n\nfunction bfs(node, dists, data){\n    const key = node[0];\n    const next = dists[key] + 1;\n    const children = node.slice(2);\n\n    for(const child of children){\n        if(dists[child] === undefined || dists[child] > next){\n            const nextNode = data.find(e => e[0] === child);\n            dists[child] = next;\n            bfs(nextNode, dists, data);\n        }\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n\n", "language": "JavaScript"}
{"filename": "p02314_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst list = input['trim']()['split']('\\x0a');\nlet [n, m] = list[0x0]['split']('\\x20');\nn = Number(n);\nm = Number(m);\nlet cm = list[0x1]['trim']()['split']('\\x20');\ncm = cm['map'](_0x27e5c7 => Number(_0x27e5c7));\nconst dp = new Map();\nfor (let i = 0x0; i < m; i++) {\n    dp['set'](cm[i], 0x1);\n}\nconst max = n + 0x1;\nfor (let i = 0x0; i <= n; i++) {\n    if (dp['has'](i)) {\n        continue;\n    }\n    let min = max;\n    for (let j = 0x0; j < m; j++) {\n        const target = i - cm[j];\n        if (target < 0x0 || !dp['has'](target)) {\n            continue;\n        }\n        const count = dp['get'](target);\n        min = Math['min'](count, min);\n    }\n    if (min < max) {\n        dp['set'](i, min + 0x1);\n    }\n}\nconsole['log'](dp['get'](n));", "test_cases": [["55 4\n1 5 10 50", "2"], ["15 6\n1 2 7 8 12 50", "2"], ["65 6\n1 2 7 8 12 50", "3"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nconst list = input.trim().split('\\n');\nlet [ n, m ] = list[0].split(' ');\nn = Number(n);\nm = Number(m);\nlet cm = list[1].trim().split(' ');\ncm = cm.map(c => Number(c));\n\nconst dp = new Map();\nfor (let i = 0; i < m; i++) {\n  dp.set(cm[i], 1);\n}\nconst max = n + 1;\nfor (let i = 0; i <= n; i++) {\n  if (dp.has(i)) {\n    continue;\n  }\n\n  let min = max;\n  for (let j = 0; j < m; j++) {\n    const target = i - cm[j];\n    if (target < 0 || !dp.has(target)) {\n      continue;\n    }\n    const count = dp.get(target);\n    min = Math.min(count, min);\n  }\n  if (min < max) {\n    dp.set(i, min + 1);\n  }\n}\n\nconsole.log(dp.get(n));\n\n", "language": "JavaScript"}
{"filename": "p02409_1", "type": "JavaScript", "obfuscated": "function initOfficialHouse(_0x43deec, _0x2a5a97, _0x1fb015) {\n    var _0x44d2b4 = Array(_0x43deec);\n    for (var _0x44b9b6 = 0x0; _0x44b9b6 < _0x43deec; _0x44b9b6++) {\n        _0x44d2b4[_0x44b9b6] = Array(_0x2a5a97);\n        for (var _0x34f4d3 = 0x0; _0x34f4d3 < _0x2a5a97; _0x34f4d3++) {\n            _0x44d2b4[_0x44b9b6][_0x34f4d3] = Array(_0x1fb015);\n            for (var _0xb45c90 = 0x0; _0xb45c90 < _0x1fb015; _0xb45c90++) {\n                _0x44d2b4[_0x44b9b6][_0x34f4d3][_0xb45c90] = 0x0;\n            }\n        }\n    }\n    return _0x44d2b4;\n}\nfunction toString(_0x556e61) {\n    return _0x556e61['map'](function (_0x950fb9) {\n        return _0x950fb9['map'](function (_0x571a7c) {\n            return '\\x20' + _0x571a7c['join']('\\x20');\n        })['join']('\\x0a');\n    })['join']('\\x0a####################\\x0a');\n}\nconst chunk = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = chunk['trim']()['split']('\\x0a');\nlines['shift']();\nvar o = initOfficialHouse(0x4, 0x3, 0xa);\nlines['forEach'](function (_0x198f08) {\n    var _0x3d9e3b = _0x198f08['split']('\\x20')['map'](Number);\n    var _0x51255d = _0x3d9e3b[0x0], _0x3c80d0 = _0x3d9e3b[0x1], _0x1c3e05 = _0x3d9e3b[0x2], _0x3af177 = _0x3d9e3b[0x3];\n    o[_0x51255d - 0x1][_0x3c80d0 - 0x1][_0x1c3e05 - 0x1] += _0x3af177;\n});\nconsole['log'](toString(o));", "test_cases": [["3\n1 1 3 8\n3 2 2 7\n4 3 8 1", "0 0 8 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 7 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n####################\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 1 0 0"]], "original": "function initOfficialHouse(bMax, fMax, rMax) {\n    var o = Array(bMax);\n    for(var b = 0; b < bMax; b++) {\n        o[b] = Array(fMax);\n        for(var f = 0; f < fMax; f++) {\n            o[b][f] = Array(rMax);\n            for(var r = 0; r < rMax; r++) {\n                o[b][f][r] = 0;\n            }\n        }\n    }\n    return o;\n}\nfunction toString(o){\n    return o.map(function(b){\n        return b.map(function(f){\n            return ' ' + f.join(' ');\n        }).join('\\n');\n    }).join('\\n####################\\n');\n}\n\nconst chunk = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = chunk.trim().split('\\n');\nlines.shift(); // n\nvar o = initOfficialHouse(4, 3, 10);\nlines.forEach(function (line) {\n    var bfrv = line.split(' ').map(Number);\n    var b = bfrv[0], f = bfrv[1], r = bfrv[2], v = bfrv[3];\n    o[b - 1][f - 1][r - 1] += v;\n});\n\nconsole.log(toString(o));", "language": "JavaScript"}
{"filename": "p02596_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x40c440 => {\n    lines['push'](_0x40c440);\n});\nreader['on']('close', () => {\n    const _0x4bf0d0 = lines[0x0] - 0x0;\n    let _0x448ecf = 0x0;\n    for (let _0x5b6fd2 = 0x1; _0x5b6fd2 <= 0xf4240; _0x5b6fd2++) {\n        _0x448ecf *= 0xa;\n        _0x448ecf += 0x7;\n        _0x448ecf %= _0x4bf0d0;\n        if (_0x448ecf === 0x0) {\n            console['log'](_0x5b6fd2);\n            return;\n        }\n    }\n    console['log'](-0x1);\n});\nfunction check(_0x3c0a98) {\n    return !![];\n}", "test_cases": [["101", "4"], ["2", "-1"], ["999983", "999982"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const N = lines[0]-0;\n    let tmp = 0;\n    for(let i=1;i<=1000000;i++){\n        tmp *= 10;\n        tmp += 7;\n        tmp %= N;\n        if(tmp === 0){\n            console.log(i);\n            return;\n        }\n    }\n    console.log(-1);\n});\n\nfunction check(ans){\n    \n    return true;\n}\n", "language": "JavaScript"}
{"filename": "p02661_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['trim']()['split'](/ |\\n/), cid = 0x0;\nconsole['log'](main()['toString']());\nfunction main() {\n    let _0x30eb2f = +cin['shift']();\n    let _0x5f31e2 = Array(_0x30eb2f);\n    let _0xc0fa53 = Array(_0x30eb2f);\n    for (let _0x8285aa = 0x0; _0x8285aa < _0x30eb2f; _0x8285aa++) {\n        _0x5f31e2[_0x8285aa] = +cin['shift']();\n        _0xc0fa53[_0x8285aa] = +cin['shift']();\n    }\n    _0x5f31e2 = _0x5f31e2['sort']((_0x28f0c4, _0x174237) => _0x28f0c4 - _0x174237);\n    _0xc0fa53 = _0xc0fa53['sort']((_0x52e56c, _0x380495) => _0x52e56c - _0x380495);\n    let _0x53ae5a, _0x4bd991;\n    if (_0x30eb2f % 0x2 == 0x0) {\n        if (_0x5f31e2[_0x30eb2f / 0x2 - 0x1] != _0x5f31e2[_0x30eb2f / 0x2])\n            _0x53ae5a = _0x5f31e2[_0x30eb2f / 0x2] - 0x1 / 0x2;\n        else\n            _0x53ae5a = _0x5f31e2[0x2 / _0x30eb2f];\n        if (_0xc0fa53[_0x30eb2f / 0x2 - 0x1] != _0xc0fa53[_0x30eb2f / 0x2])\n            _0x4bd991 = _0xc0fa53[_0x30eb2f / 0x2 - 0x1] + 0x1 / 0x2;\n        else\n            _0x4bd991 = _0xc0fa53[_0x30eb2f / 0x2 - 0x1];\n        return (_0x4bd991 - _0x53ae5a) * 0x2 + 0x1;\n    } else {\n        _0x53ae5a = _0x5f31e2[(_0x30eb2f - 0x1) / 0x2];\n        _0x4bd991 = _0xc0fa53[(_0x30eb2f - 0x1) / 0x2];\n        return _0x4bd991 - _0x53ae5a + 0x1;\n    }\n}", "test_cases": [["2\n1 2\n2 3", "3"], ["3\n100 100\n10 10000\n1 1000000000", "9991"]], "original": "\"use strict\";\nvar input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nvar cin = input.trim().split(/ |\\n/), cid = 0;\n\nconsole.log(main().toString());\n\n\nfunction main() {\n    let n = +cin.shift();\n    let a = Array(n);\n    let b = Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = +cin.shift();\n        b[i] = +cin.shift();\n    }\n    a = a.sort((x, y) => x - y);\n    b = b.sort((x, y) => x - y);\n    let min, max;\n    if (n % 2 == 0) {\n        // 偶数の時 中央値は X(2/n-1)とX(2/n)の平均値\n        // 最小値は、それぞれの値が異なるとき、A(2/n)-1/2、同じならA(2/n)\n        if (a[n / 2 - 1] != a[n / 2]) min = a[n / 2] - 1 / 2;\n        else min = a[2 / n];\n        if (b[n / 2 - 1] != b[n / 2]) max = b[n / 2 - 1] + 1 / 2;\n        else max = b[n / 2 - 1];\n        return (max - min) * 2 + 1;\n    } else {\n        min = a[(n - 1) / 2];\n        max = b[(n - 1) / 2];\n        return (max - min) + 1;\n    }\n\n\n}\n", "language": "JavaScript"}
{"filename": "p02685_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nfunction pow(_0x400c0c, _0x1c0d49) {\n    let _0x1a29e2 = 0x1;\n    while (_0x1c0d49 > 0x0) {\n        if (_0x1c0d49 & 0x1)\n            _0x1a29e2 = mul(_0x1a29e2, _0x400c0c);\n        _0x400c0c = mul(_0x400c0c, _0x400c0c);\n        _0x1c0d49 >>= 0x1;\n    }\n    return _0x1a29e2;\n}\nfunction inv(_0x1535da) {\n    if (_0x1535da == 0x1)\n        return 0x1;\n    return pow(_0x1535da, mod - 0x2);\n}\nfunction mul(_0x5db9b0, _0x3696bf) {\n    return ((_0x5db9b0 >> 0x10) * _0x3696bf % mod * 0x10000 + (_0x5db9b0 & 0xffff) * _0x3696bf) % mod;\n}\nconst mod = 0x3b800001;\n(_0x1a1091 => {\n    const _0x43aa25 = _0x1a1091['split']('\\x0a');\n    let [_0x1d84ef, _0x42d7d7, _0x2f30fb] = _0x43aa25[0x0]['split']('\\x20')['map'](Number);\n    let _0x25db8d = 0x0;\n    let _0x1b4ede = 0x1;\n    let _0x2e9cc1 = 0x1;\n    for (let _0x106a39 = 0x0; _0x106a39 <= _0x2f30fb; _0x106a39++) {\n        _0x1b4ede = _0x1b4ede * (_0x106a39 || 0x1) % mod;\n        _0x2e9cc1 = _0x2e9cc1 * (_0x106a39 ? _0x1d84ef - _0x106a39 : 0x1) % mod;\n        let _0x386737 = mul(_0x2e9cc1, inv(_0x1b4ede)) % mod;\n        _0x25db8d += mul(_0x386737, pow(_0x42d7d7 - 0x1, _0x1d84ef - (_0x106a39 + 0x1))) * _0x42d7d7 % mod;\n    }\n    console['log'](_0x25db8d % mod);\n})(input);", "test_cases": [["3 2 1", "6"], ["100 100 0", "73074801"], ["60522 114575 7559", "479519525"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nfunction pow (x ,n) {\n    let res = 1\n    while (n > 0) {\n        if (n & 1) res = mul(res, x)\n        x = mul(x, x)\n        n >>= 1\n    }\n    return res\n}\n\nfunction inv (x) {\n    if (x == 1) return 1;\n    return pow(x, mod - 2);\n}\n\nfunction mul (a, b) {\n    return ((a >> 16) * b % mod * 65536 + (a & 65535) * b) % mod\n}\n\nconst mod = 998244353\n\n;(input => {\n    const lines = input.split('\\n')\n    let [N, M, K] = lines[0].split(' ').map(Number)\n\n    let ans = 0\n    let fa = 1\n    let fa2 = 1\n    for (let k = 0; k <= K; k++) {\n        fa = fa * (k || 1) % mod\n        fa2 = fa2 * (k ? (N - k) : 1) % mod\n        let left = mul(fa2, inv(fa)) % mod\n        ans += mul(left, pow((M - 1), (N - (k + 1)))) * M % mod\n    }\n\n    console.log(ans % mod)\n \n})(input)\n", "language": "JavaScript"}
{"filename": "p02735_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nH = l['shift']() * 0x1;\nW = l['shift']() * 0x1;\nl = [];\nm = [];\nfor (i = 0x0; i < H; i++) {\n    l['push'](inp['shift']()['split'](''));\n    m[i] = [];\n    for (j = 0x0; j < W; j++) {\n        m[i][j] = 0x0;\n    }\n}\nif (l[0x0][0x0] == '#') {\n    m[0x0][0x0] = 0x1;\n}\nr = 0x0;\nfor (c = 0x1; c < W; c++) {\n    m[r][c] = l[r][c - 0x1] == l[r][c] ? m[r][c - 0x1] : m[r][c - 0x1] + 0x1;\n}\nc = 0x0;\nfor (r = 0x1; r < H; r++) {\n    m[r][c] = l[r - 0x1][c] == l[r][c] ? m[r - 0x1][c] : m[r - 0x1][c] + 0x1;\n}\nfor (i = 0x1; i < H; i++) {\n    r = i;\n    for (c = i; c < W; c++) {\n        s = l[r][c - 0x1] == l[r][c] ? m[r][c - 0x1] : m[r][c - 0x1] + 0x1;\n        t = l[r - 0x1][c] == l[r][c] ? m[r - 0x1][c] : m[r - 0x1][c] + 0x1;\n        m[r][c] = Math['min'](s, t);\n    }\n    c = i;\n    for (r = i; r < H; r++) {\n        s = l[r - 0x1][c] == l[r][c] ? m[r - 0x1][c] : m[r - 0x1][c] + 0x1;\n        t = l[r][c - 0x1] == l[r][c] ? m[r][c - 0x1] : m[r][c - 0x1] + 0x1;\n        m[r][c] = Math['min'](s, t);\n    }\n}\nconsole['log'](Math['ceil'](m[H - 0x1][W - 0x1] / 0x2));", "test_cases": [["3 3\n.##\n.#.\n##.", "1"], ["2 2\n#.\n.#", "2"], ["4 4\n..##\n#...\n###.\n###.", "0"], ["5 5\n.#.#.\n#.#.#\n.#.#.\n#.#.#\n.#.#.", "4"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\nH = l.shift() * 1\nW = l.shift() * 1 \nl = []\nm = []\nfor (i=0; i<H; i++) {\n  l.push(inp.shift().split(''))\n  m[i] = []\n  for (j=0; j<W; j++) {\n      m[i][j] = 0 \n  }\n}\nif (l[0][0] == \"#\") {\n    m[0][0] = 1\n}\nr = 0\nfor (c=1; c<W; c++) {\n  m[r][c] = l[r][c-1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1 \n}\nc = 0\nfor (r=1; r<H; r++) {\n  m[r][c] = l[r-1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1 \n}\nfor (i=1; i<H; i++) {\n    r = i\n    for (c=i; c<W; c++) {\n      s = l[r][c-1] == l[r][c] ? m[r][c - 1] : m[r][c - 1] + 1\n      t = l[r-1][c] == l[r][c] ? m[r-1][c] : m[r-1][c] + 1\n      m[r][c] = Math.min(s, t)\n    }\n    c = i\n    for (r=i; r<H; r++) {\n      s = l[r-1][c] == l[r][c] ? m[r - 1][c] : m[r - 1][c] + 1\n      t = l[r][c-1] == l[r][c] ? m[r][c- 1] : m[r][c-1] + 1\n      m[r][c] = Math.min(s, t)\n    }\n}\nconsole.log(Math.ceil(m[H-1][W-1] / 2))", "language": "JavaScript"}
{"filename": "p02795_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3265e7 => {\n    const _0xb04f9d = _0x3265e7['trim']()['split']('\\x0a');\n    let _0x9bcd95 = Number(_0xb04f9d[0x0]['split']('\\x20'));\n    let _0x434b9c = Number(_0xb04f9d[0x1]['split']('\\x20'));\n    let _0x94ebe0 = Number(_0xb04f9d[0x2]['split']('\\x20'));\n    let _0x56aee4 = 0x0;\n    let _0x4e21f1 = 0x0;\n    let _0x165765 = 0x0;\n    while (0x1) {\n        if (_0x434b9c >= _0x9bcd95) {\n            _0x165765 += _0x434b9c - _0x4e21f1;\n            _0x56aee4++;\n        } else {\n            _0x165765 += _0x9bcd95 - _0x56aee4;\n            _0x4e21f1++;\n        }\n        if (_0x165765 >= _0x94ebe0)\n            break;\n    }\n    console['log'](_0x4e21f1 + _0x56aee4);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n7\n10", "2"], ["14\n12\n112", "8"], ["2\n100\n200", "2"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet H = Number(input[0].split(' '))\n\tlet W = Number(input[1].split(' '))\n\tlet N = Number(input[2].split(' '))\n\tlet paintedRow = 0\n\tlet paintedColumn = 0\n\tlet paintedCell = 0\n\twhile(1) {\n\t\tif(W >= H) {\n\t\t\tpaintedCell += W - paintedColumn\n\t\t\tpaintedRow++\n\t\t} else {\n\t\t\tpaintedCell += H - paintedRow\n\t\t\tpaintedColumn++\n\t\t}\n\t\tif(paintedCell >= N) break\n\t}\n\tconsole.log(paintedColumn + paintedRow)\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03005_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x5c7588 => {\n    _0x5c7588 = _0x5c7588['trim']()['split']('\\x0a');\n    const _0x5bee0d = parseInt(_0x5c7588[0x0]['split']('\\x20')[0x0]);\n    const _0x10a04f = parseInt(_0x5c7588[0x0]['split']('\\x20')[0x1]);\n    console['log'](_0x10a04f === 0x1 ? 0x0 : _0x5bee0d - _0x10a04f);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2", "1"], ["3 1", "0"], ["8 5", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n\n    console.log(K === 1 ? 0 : N - K);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03082_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x16e572) {\n    let _0x50f240 = _0x16e572['split']('\\x0a');\n    let _0x1cae9a = _0x50f240['shift']()['trim']()['split'](/\\s/)['map'](_0xc52070 => _0xc52070 - 0x0);\n    let _0xc78d24 = _0x1cae9a[0x0], _0x3e3a47 = _0x1cae9a[0x1];\n    let _0x27a1f1 = _0x50f240['shift']()['trim']()['split'](/\\s/)['map'](_0x4af8e5 => _0x4af8e5 - 0x0);\n    const _0x2d0286 = 0x3b9aca00 + 0x7, _0x4bee37 = 0xd2, _0x363c91 = 0x186a0 + 0xa;\n    const _0x1ead43 = (_0x1d05fa, _0x19a108) => (_0x1d05fa + _0x19a108) % _0x2d0286;\n    const _0x2627c6 = (_0x3a5336, _0x25cb38) => _0x3a5336 * _0x25cb38 % _0x2d0286;\n    let _0x1438dd = new Array(_0x4bee37)['fill'](0x0)['map'](() => new Array(_0x363c91)['fill'](-0x1));\n    const _0xf86fd6 = (_0x718db3, _0x37d991) => {\n        if (_0x718db3 == _0xc78d24)\n            return _0x37d991;\n        let _0x1136cb = _0x1438dd[_0x718db3][_0x37d991];\n        if (_0x1136cb != -0x1)\n            return _0x1136cb;\n        _0x1136cb = 0x0;\n        _0x1438dd[_0x718db3][_0x37d991] = _0x1ead43(_0x1136cb, _0xf86fd6(_0x718db3 + 0x1, _0x37d991 % _0x27a1f1[_0x718db3]));\n        _0x1438dd[_0x718db3][_0x37d991] = _0x1ead43(_0x1438dd[_0x718db3][_0x37d991], _0x2627c6(_0xc78d24 - _0x718db3 - 0x1, _0xf86fd6(_0x718db3 + 0x1, _0x37d991)));\n        return _0x1438dd[_0x718db3][_0x37d991];\n    };\n    _0x27a1f1['sort']((_0x402c25, _0x55d67c) => _0x55d67c - _0x402c25);\n    console['log'](_0xf86fd6(0x0, _0x3e3a47));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 19\n3 7", "3"], ["5 82\n22 11 6 5 13", "288"], ["10 100000\n50000 50001 50002 50003 50004 50005 50006 50007 50008 50009", "279669259"]], "original": "\"use strict\";\nfunction Main(input) {\n    let lines = input.split(\"\\n\");\n    let NX = lines.shift().trim().split(/\\s/).map((v) => v - 0);\n    let n = NX[0], x = NX[1];\n    let S = lines.shift().trim().split(/\\s/).map((v) => v - 0);\n    const MOD = 1e9 + 7, MAX_N = 210, MAX_VAL = 1e5 + 10;\n    const add = (a, b) => (a + b) % MOD;\n    const mul = (a, b) => (a * b) % MOD;\n    let dp = new Array(MAX_N).fill(0).map(() => new Array(MAX_VAL).fill(-1));\n    const rec = (pos, rem) => {\n        if (pos == n) return rem;\n        let ret = dp[pos][rem]\n        if (ret != -1) return ret;\n        ret = 0;\n        dp[pos][rem] = add(ret, rec(pos + 1, rem % S[pos]));\n        dp[pos][rem] = add(dp[pos][rem], mul(n - pos - 1, rec(pos + 1, rem)));\n        return dp[pos][rem];\n    }\n    S.sort((a, b) => b - a);\n    console.log(rec(0, x));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03192_1", "type": "JavaScript", "obfuscated": "function Main(_0x5832b7) {\n    _0x5832b7 = _0x5832b7['split']('\\x0a');\n    S = _0x5832b7[0x0]['split']('');\n    var _0xc7379 = 0x0;\n    for (i = 0x0; i < S['length']; i++) {\n        if (S[i] == '2') {\n            _0xc7379++;\n        }\n    }\n    console['log']('%s', _0xc7379);\n}\nfunction debug() {\n    var _0x22844e = document['getElementById']('input')['value'];\n    Main(_0x22844e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1222", "3"], ["3456", "0"], ["9592", "1"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  S= input[0].split(\"\");\n  var ans=0;\n  for(i=0;i<S.length;i++){\n    if(S[i]==\"2\"){\n      ans++;\n    }\n  }\n\n  console.log('%s', ans);\n}\n  \n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n  var input = document.getElementById(\"input\").value;\n  Main(input);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03387_1", "type": "JavaScript", "obfuscated": "function Main(_0x436536) {\n    var _0x436536 = _0x436536['split']('\\x0a')[0x0]['split']('\\x20')['map'](_0x35a628 => parseInt(_0x35a628, 0xa))['sort']((_0x27a6f7, _0x20204a) => _0x20204a - _0x27a6f7);\n    var _0x4636d5 = 0x0;\n    if ((_0x436536[0x1] - _0x436536[0x2]) % 0x2 === 0x0) {\n        _0x4636d5 += _0x436536[0x0] - _0x436536[0x1];\n        _0x436536[0x2] += _0x4636d5;\n        _0x4636d5 += (_0x436536[0x0] - _0x436536[0x2]) / 0x2;\n    } else {\n        _0x436536[0x0]++;\n        _0x436536[0x1]++;\n        _0x4636d5++;\n        _0x4636d5 += _0x436536[0x0] - _0x436536[0x1];\n        _0x436536[0x2] += _0x436536[0x0] - _0x436536[0x1];\n        _0x4636d5 += (_0x436536[0x0] - _0x436536[0x2]) / 0x2;\n    }\n    console['log'](_0x4636d5);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 5 4", "2"], ["2 6 3", "5"], ["31 41 5", "23"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\")[0].split(\" \").map(e => parseInt(e, 10)).sort((a, b) => b - a);\n  var cnt = 0;\n  if ((s[1] - s[2]) % 2 === 0) {\n    cnt += s[0] - s[1];\n    s[2] += cnt;\n    cnt += (s[0] - s[2]) / 2;\n  } else {\n    s[0]++;\n    s[1]++;\n    cnt++;\n    cnt += s[0] - s[1];\n    s[2] += s[0] - s[1];\n    cnt += (s[0] - s[2]) / 2;\n  }\n  console.log(cnt);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03739_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d86c1) {\n    var _0x1d86c1 = _0x1d86c1['split']('\\x0a');\n    var _0x4c236f = parseInt(_0x1d86c1[0x0], 0xa);\n    var _0x5c72e9 = _0x1d86c1[0x1]['split']('\\x20')['map'](_0x33fa90 => parseInt(_0x33fa90, 0xa));\n    var _0x10035f = 0x0, _0x1597ac = 0x0, _0x561f77 = [];\n    for (var _0x18e6ff = 0x0; _0x18e6ff < _0x4c236f; _0x18e6ff++) {\n        _0x10035f += _0x5c72e9[_0x18e6ff];\n        if (_0x18e6ff === 0x0) {\n            if (_0x10035f === 0x0) {\n                if (_0x5c72e9[_0x18e6ff + 0x1] >= 0x0) {\n                    _0x10035f -= _0x5c72e9[_0x18e6ff + 0x1] - 0x1;\n                    if (_0x10035f === 0x0)\n                        _0x10035f--;\n                    _0x1597ac += Math['abs'](_0x10035f);\n                } else {\n                    _0x10035f += Math['abs'](_0x5c72e9[_0x18e6ff + 0x1]) - 0x1;\n                    if (_0x10035f === 0x0)\n                        _0x10035f++;\n                    _0x1597ac += _0x10035f;\n                }\n            }\n        } else {\n            if (_0x561f77[_0x18e6ff - 0x1] > 0x0) {\n                if (_0x10035f >= 0x0) {\n                    _0x1597ac += _0x10035f + 0x1;\n                    _0x10035f -= _0x10035f + 0x1;\n                }\n            } else {\n                if (_0x10035f <= 0x0) {\n                    _0x1597ac += Math['abs'](_0x10035f) + 0x1;\n                    _0x10035f += Math['abs'](_0x10035f) + 0x1;\n                }\n            }\n        }\n        _0x561f77['push'](_0x10035f);\n    }\n    console['log'](_0x1597ac);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 -3 1 0", "4"], ["5\n3 -6 4 -5 7", "0"], ["6\n-1 4 3 2 -5 4", "8"]], "original": "function Main(s) {\n  var s = s.split(\"\\n\");\n  var n = parseInt(s[0], 10);\n  var a = s[1].split(\" \").map(e => parseInt(e, 10));\n  var acc = 0, cnt = 0, arr = [];\n  for (var i = 0; i < n; i++) {\n    acc += a[i];\n    if (i === 0) {\n      if (acc === 0) {\n        if (a[i + 1] >= 0) {\n          acc -= (a[i + 1] - 1);\n          if (acc === 0) acc--;\n          cnt += Math.abs(acc);\n        } else {\n          acc += (Math.abs(a[i + 1]) - 1);\n          if (acc === 0) acc++;\n          cnt += acc;\n        }\n      }\n    } else {\n      if (arr[i - 1] > 0) {\n        if (acc >= 0) {\n          cnt += (acc + 1);\n          acc -= (acc + 1);\n        }\n      } else {\n        if (acc <= 0) {\n          cnt += (Math.abs(acc) + 1);\n          acc += (Math.abs(acc) + 1);\n        }\n      }\n    }\n    arr.push(acc);\n  }\n  console.log(cnt);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03964_1", "type": "JavaScript", "obfuscated": "function Main(_0x13e4f8) {\n    _0x13e4f8 = _0x13e4f8['split']('\\x0a');\n    var _0x4e7536 = parseInt(_0x13e4f8[0x0]);\n    t = new Array(_0x4e7536)['fill'](0x0);\n    a = new Array(_0x4e7536)['fill'](0x0);\n    for (i = 0x0; i < _0x4e7536; i++) {\n        t[i] = parseInt(_0x13e4f8[i + 0x1]['split']('\\x20')[0x0]);\n        a[i] = parseInt(_0x13e4f8[i + 0x1]['split']('\\x20')[0x1]);\n    }\n    var _0x1368e0 = t[0x0];\n    var _0x27a4ac = a[0x0];\n    for (i = 0x1; i < _0x4e7536; i++) {\n        if (Math['ceil'](_0x1368e0 / t[i]) * t[i] / t[i] * a[i] >= _0x27a4ac) {\n            _0x1368e0 = Math['ceil'](_0x1368e0 / t[i]) * t[i];\n            _0x27a4ac = Math['ceil'](_0x1368e0 / t[i]) * t[i] / t[i] * a[i];\n        } else {\n            _0x1368e0 = Math['ceil'](_0x27a4ac / a[i]) * a[i] / a[i] * t[i];\n            _0x27a4ac = Math['ceil'](_0x27a4ac / a[i]) * a[i];\n        }\n    }\n    var _0xd6f956 = _0x27a4ac + _0x1368e0;\n    console['log']('%s', _0xd6f956);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n2 3\n1 1\n3 2", "10"], ["4\n1 1\n1 1\n1 5\n1 100", "101"], ["5\n3 10\n48 17\n31 199\n231 23\n3 2", "6930"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  t = new Array(n).fill(0);\n  a = new Array(n).fill(0);\n  for(i=0;i<n;i++){\n      t[i]=parseInt(input[i+1].split(\" \")[0]);\n      a[i]=parseInt(input[i+1].split(\" \")[1]);\n  }\n  var tvote=t[0];\n  var avote=a[0];\n  \n  for(i=1;i<n;i++){\n      if(((Math.ceil(tvote/t[i])*t[i])/t[i])*a[i]>=avote){\n          tvote=Math.ceil(tvote/t[i])*t[i];\n          avote=((Math.ceil(tvote/t[i])*t[i])/t[i])*a[i];\n      }else{\n          tvote=((Math.ceil(avote/a[i])*a[i])/a[i])*t[i];\n          avote=Math.ceil(avote/a[i])*a[i];\n      }\n  }\n  var ans=avote+tvote;\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02240_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nline = require('fs')['readFileSync'](config['input'], 'ascii')['trim']()['split'](config['newline'])['map'](function (_0x3f8f06) {\n    return _0x3f8f06['split']('\\x20')['map'](Number);\n});\nn = line[0x0][0x0];\nm = line[0x0][0x1];\nq = line[m + 0x1][0x0];\nadj = new Array(n);\nfor (i = 0x0; i < n; i++)\n    adj[i] = null;\nconn = line['slice'](0x1, m + 0x1);\nconn['sort'](function (_0x48bcd0, _0x5391af) {\n    if (_0x48bcd0[0x0] === _0x5391af[0x0])\n        return _0x48bcd0[0x1] - _0x5391af[0x1];\n    return _0x48bcd0[0x0] - _0x5391af[0x0];\n});\nfor (i in conn) {\n    min0 = id0 = conn[i][0x0];\n    min1 = id1 = conn[i][0x1];\n    while (adj[min0] !== null)\n        min0 = adj[min0];\n    while (adj[min1] !== null)\n        min1 = adj[min1];\n    min = Math['min'](min0, min1);\n    if (id0 !== min)\n        adj[id0] = min;\n    if (id1 !== min)\n        adj[id1] = min;\n}\nq = line['slice'](m + 0x2, m + 0x2 + q);\nfor (i in q) {\n    min0 = q[i][0x0];\n    min1 = q[i][0x1];\n    while (adj[min0] !== null)\n        min0 = adj[min0];\n    while (adj[min1] !== null)\n        min1 = adj[min1];\n    console['log'](min0 === min1 ? 'yes' : 'no');\n}", "test_cases": [["10 9\n0 1\n0 2\n3 4\n5 7\n5 6\n6 7\n6 8\n7 8\n8 9\n3\n0 1\n5 9\n1 3", "yes\nyes\nno"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline)\n  .map(function (line) { return line.split(' ').map(Number); });\n\nn = line[0][0];\nm = line[0][1];\nq = line[m+1][0];\n\nadj = new Array(n);\nfor (i = 0; i < n; i++) adj[i] = null;\n\nconn = line.slice(1, m+1);\nconn.sort(function (a, b) {\n  if (a[0] === b[0]) return a[1] - b[1];\n  return a[0] - b[0];\n});\n\nfor (i in conn) {\n  min0 = id0 = conn[i][0];\n  min1 = id1 = conn[i][1];\n  while (adj[min0] !== null) min0 = adj[min0];\n  while (adj[min1] !== null) min1 = adj[min1];\n  min = Math.min(min0, min1);\n  if (id0 !== min) adj[id0] = min;\n  if (id1 !== min) adj[id1] = min;\n}\n\nq = line.slice(m+2, m+2+q);\nfor (i in q) {\n  min0 = q[i][0];\n  min1 = q[i][1];\n  while (adj[min0] !== null) min0 = adj[min0];\n  while (adj[min1] !== null) min1 = adj[min1];\n  console.log((min0 === min1) ? 'yes' : 'no');\n}", "language": "JavaScript"}
{"filename": "p02272_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nlet input = '';\nprocess['stdin']['on']('data', function (_0x2ff40d) {\n    input += _0x2ff40d;\n});\nprocess['stdin']['on']('end', function () {\n    main(input['split']('\\x0a'));\n});\nlet count = 0x0;\nfunction merge(_0x70bbe0, _0xd7e45f, _0x3043f7, _0x52ee19) {\n    let _0x2e7b81 = _0x3043f7 - _0xd7e45f;\n    let _0x5ef310 = _0x52ee19 - _0x3043f7;\n    let _0x4430b6 = [];\n    let _0xab693f = [];\n    for (let _0x7e7aed = 0x0; _0x7e7aed < _0x2e7b81; _0x7e7aed++)\n        _0x4430b6['push'](_0x70bbe0[_0xd7e45f + _0x7e7aed]);\n    for (let _0xcf2492 = 0x0; _0xcf2492 < _0x5ef310; _0xcf2492++)\n        _0xab693f['push'](_0x70bbe0[_0x3043f7 + _0xcf2492]);\n    _0x4430b6['push'](Number['MAX_SAFE_INTEGER']);\n    _0xab693f['push'](Number['MAX_SAFE_INTEGER']);\n    let _0x1150dd = 0x0, _0x492a70 = 0x0;\n    for (let _0x52bb49 = _0xd7e45f; _0x52bb49 < _0x52ee19; _0x52bb49++) {\n        if (_0x4430b6[_0x1150dd] < _0xab693f[_0x492a70])\n            _0x70bbe0[_0x52bb49] = _0x4430b6[_0x1150dd++];\n        else\n            _0x70bbe0[_0x52bb49] = _0xab693f[_0x492a70++];\n        count++;\n    }\n}\nfunction mergeSort(_0x494a6c, _0x1e4aac, _0x152ec2, _0x24cf01) {\n    if (_0x1e4aac + 0x1 >= _0x152ec2)\n        return;\n    let _0x193a48 = Math['floor']((_0x1e4aac + _0x152ec2) / 0x2);\n    mergeSort(_0x494a6c, _0x1e4aac, _0x193a48);\n    mergeSort(_0x494a6c, _0x193a48, _0x152ec2);\n    merge(_0x494a6c, _0x1e4aac, _0x193a48, _0x152ec2);\n}\nfunction main(_0x7e93dd) {\n    let _0x33d43e = Number(_0x7e93dd[0x0]);\n    let _0x32ee29 = _0x7e93dd[0x1]['split']('\\x20')['map'](Number);\n    mergeSort(_0x32ee29, 0x0, _0x33d43e);\n    console['log'](_0x32ee29['join']('\\x20'));\n    console['log'](count);\n}", "test_cases": [["10\n8 5 9 2 6 3 7 1 10 4", "1 2 3 4 5 6 7 8 9 10\n34"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nlet input = '';\nprocess.stdin.on('data', function(chunk) {input += chunk;});\nprocess.stdin.on('end', function() {main(input.split(\"\\n\"));});\n\nlet count = 0;\n\nfunction merge(A,left,mid,right) {\n\tlet n1 = mid - left;\n\tlet n2 = right - mid;\n\tlet L = [];\n\tlet R = [];\n\tfor (let i = 0; i < n1; i++) L.push(A[left+i]);\n\tfor (let i = 0; i < n2; i++) R.push(A[mid+i]);\n\tL.push(Number.MAX_SAFE_INTEGER);\n\tR.push(Number.MAX_SAFE_INTEGER);\n\n\tlet i = 0,j = 0;\n\tfor (let k = left; k < right; k++) {\n\t\tif (L[i] < R[j]) A[k] = L[i++];\n\t\telse A[k] = R[j++];\n\t\tcount++;\n\t}\n}\n\nfunction mergeSort(A,left,right,count) {\n\tif (left + 1 >= right) return;\n\tlet mid = Math.floor((left + right) / 2);\n\tmergeSort(A,left,mid);\n\tmergeSort(A,mid,right);\n\tmerge(A,left,mid,right);\n}\n\nfunction main(lines) {\n\tlet n = Number(lines[0]);\n\tlet A = lines[1].split(\" \").map(Number);\n\tmergeSort(A,0,n);\n\n\tconsole.log(A.join(\" \"));\n\tconsole.log(count);\n}\n", "language": "JavaScript"}
{"filename": "p02386_1", "type": "JavaScript", "obfuscated": "function move(_0xfb805, _0x28ca2c, _0x13d069, _0x20f956, _0x3d83b7, _0x3a175f) {\n    var _0x31924e = this['toString']();\n    if (_0x31924e == 'N')\n        return [\n            _0x28ca2c,\n            _0x3a175f,\n            _0x13d069,\n            _0x20f956,\n            _0xfb805,\n            _0x3d83b7\n        ];\n    if (_0x31924e == 'E')\n        return [\n            _0x20f956,\n            _0x28ca2c,\n            _0xfb805,\n            _0x3a175f,\n            _0x3d83b7,\n            _0x13d069\n        ];\n}\nfunction roll(_0x3bc6ce, _0x59f3d3, _0x1dd54f, _0x50244e, _0x36200b, _0x5bc9ec) {\n    return [\n        _0x3bc6ce,\n        _0x1dd54f,\n        _0x36200b,\n        _0x59f3d3,\n        _0x50244e,\n        _0x5bc9ec\n    ];\n}\nfunction rolls(_0xa21186) {\n    for (var _0x4c1b17 = 0x0; _0x4c1b17 < 0x4; _0x4c1b17++) {\n        obj[_0xa21186['join'](',')] = !![];\n        _0xa21186 = roll['apply'](null, _0xa21186);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nvar OBJ = {};\nvar result = 'Yes';\nfor (var i = 0x0; i < n; i++) {\n    var obj = {};\n    var dice = Arr[i]['split']('\\x20')['map'](Number);\n    for (var j = 0x0; j < 0x4; j++) {\n        rolls(dice);\n        dice = move['apply']('N', dice);\n    }\n    dice = move['apply']('E', dice);\n    rolls(dice);\n    dice = move['apply']('E', dice);\n    dice = move['apply']('E', dice);\n    rolls(dice);\n    for (var k in obj) {\n        if (OBJ['hasOwnProperty'](k))\n            result = 'No';\n        else\n            OBJ[k] = !![];\n    }\n    if (result == 'No')\n        break;\n}\nconsole['log'](result);", "test_cases": [["3\n1 2 3 4 5 6\n6 2 4 3 5 1\n6 5 4 3 2 1", "No"], ["3\n1 2 3 4 5 6\n6 5 4 3 2 1\n5 4 3 2 1 6", "Yes"]], "original": "function move(d1,d2,d3,d4,d5,d6){\n   var x=this.toString();\n   if(x==\"N\")return [d2,d6,d3,d4,d1,d5];\n   if(x==\"E\")return [d4,d2,d1,d6,d5,d3];\n}\nfunction roll(d1,d2,d3,d4,d5,d6){\n   return [d1,d3,d5,d2,d4,d6];\n}\nfunction rolls(arr){\n   for(var i=0;i<4;i++){\n      obj[arr.join(\",\")]=true;\n      arr=roll.apply(null,arr);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nvar OBJ={};\nvar result=\"Yes\";\nfor(var i=0;i<n;i++){\n   var obj={};\n   var dice=Arr[i].split(\" \").map(Number);\n   for(var j=0;j<4;j++){\n      rolls(dice);\n      dice=move.apply(\"N\",dice);\n   }\n   dice=move.apply(\"E\",dice);\n   rolls(dice);\n   dice=move.apply(\"E\",dice);\n   dice=move.apply(\"E\",dice);\n   rolls(dice);\n   for(var k in obj){\n      if(OBJ.hasOwnProperty(k))result= \"No\";\n      else OBJ[k]=true;\n   }\n   if(result==\"No\")break;\n}\nconsole.log(result);", "language": "JavaScript"}
{"filename": "p02400_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x5e0d32) {\n    var _0x335d5e = _0x5e0d32['split']('\\x20');\n    var _0x5a76de = parseInt(_0x335d5e[0x0], 0xa);\n    var _0x48f12e = _0x5a76de * _0x5a76de * Math['PI'];\n    var _0x5db537 = _0x5a76de * 0x2 * Math['PI'];\n    console['log'](_0x48f12e['toFixed'](0x6) + '\\x20' + _0x5db537['toFixed'](0x6));\n    process['exit']();\n});\nprocess['stdin']['on']('end', function () {\n});", "test_cases": [["2", "12.566371 12.566371"], ["3", "28.274334 18.849556"]], "original": "var lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var b = parseInt(a[0],10);\n  var c = b*b*Math.PI;\n  var d = b*2*Math.PI;\n  console.log(c.toFixed(6)+\" \"+d.toFixed(6));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript"}
{"filename": "p02617_1", "type": "JavaScript", "obfuscated": "const [_n, ..._edges] = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\n/);\nconst n = Number(_n);\nlet result = n * (n + 0x1) * (n + 0x2) / 0x6;\nfor (const _edge of _edges) {\n    let [u, v] = _edge['split'](/\\s/)['map'](Number);\n    if (u > v) {\n        [u, v] = [\n            v,\n            u\n        ];\n    }\n    result -= u * (n - v + 0x1);\n}\nconsole['log'](result);", "test_cases": [["3\n1 3\n2 3", "7"], ["2\n1 2", "3"], ["10\n5 3\n5 7\n8 9\n1 9\n9 10\n8 4\n7 4\n6 10\n7 2", "113"]], "original": "const [_n, ..._edges] = require('fs')\n  .readFileSync('/dev/stdin', 'utf8')\n  .split(/\\n/)\nconst n = Number(_n)\n\nlet result = (n * (n + 1) * (n + 2)) / 6\n\nfor (const _edge of _edges) {\n  let [u, v] = _edge.split(/\\s/).map(Number)\n  if (u > v) {\n    [u, v] = [v, u]\n  }\n  result -= u * (n - v + 1)\n}\nconsole.log(result)", "language": "JavaScript"}
{"filename": "p02648_1", "type": "JavaScript", "obfuscated": "console['log'](function (_0x27512a) {\n    const _0x90aee3 = _0x27512a['trim']()['split']('\\x0a')['map'](_0x436bed => _0x436bed['split']('\\x20')['map'](_0x35d25a => _0x35d25a | 0x0));\n    const _0xe66ac9 = _0x90aee3[0x0][0x0], _0x531561 = _0x90aee3[_0xe66ac9 + 0x1][0x0];\n    const _0x5138f1 = [0x0], _0x447bb3 = [0x0], _0x3fd20f = [], _0x31e8e8 = [];\n    for (let _0x3fbb04 = 0x1; _0x3fbb04 <= _0xe66ac9; _0x3fbb04++) {\n        _0x5138f1['push'](_0x90aee3[_0x3fbb04][0x0]);\n        _0x447bb3['push'](_0x90aee3[_0x3fbb04][0x1]);\n    }\n    let _0x3732fa = 0x0;\n    for (let _0x292745 = 0x1; _0x292745 <= _0x531561; _0x292745++) {\n        _0x3fd20f['push'](_0x90aee3[_0xe66ac9 + 0x1 + _0x292745][0x0]);\n        _0x31e8e8['push'](_0x90aee3[_0xe66ac9 + 0x1 + _0x292745][0x1]);\n        if (_0x31e8e8[_0x292745 - 0x1] > _0x3732fa)\n            _0x3732fa = _0x31e8e8[_0x292745 - 0x1];\n    }\n    const _0x4bb69c = [Array(_0x3732fa + 0x1)['fill'](0x0)];\n    for (let _0x49787e = 0x1; _0x49787e <= _0xe66ac9; _0x49787e++) {\n        _0x4bb69c[_0x49787e] = [];\n        for (let _0x352bb6 = 0x0; _0x352bb6 <= _0x3732fa; _0x352bb6++) {\n            if (_0x352bb6 >= _0x447bb3[_0x49787e])\n                _0x4bb69c[_0x49787e][_0x352bb6] = Math['max'](_0x4bb69c[_0x49787e >> 0x1][_0x352bb6 - _0x447bb3[_0x49787e]] + _0x5138f1[_0x49787e], _0x4bb69c[_0x49787e >> 0x1][_0x352bb6]);\n            else\n                _0x4bb69c[_0x49787e][_0x352bb6] = _0x4bb69c[_0x49787e >> 0x1][_0x352bb6];\n        }\n    }\n    const _0x59a73f = [];\n    for (let _0x257ff9 = 0x0; _0x257ff9 < _0x531561; _0x257ff9++) {\n        _0x59a73f['push'](_0x4bb69c[_0x3fd20f[_0x257ff9]][_0x31e8e8[_0x257ff9]]);\n    }\n    return _0x59a73f['join']('\\x0a');\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n1 2\n2 3\n3 4\n3\n1 1\n2 5\n3 5", "0\n3\n3"], ["15\n123 119\n129 120\n132 112\n126 109\n118 103\n115 109\n102 100\n130 120\n105 105\n132 115\n104 102\n107 107\n127 116\n121 104\n121 115\n8\n8 234\n9 244\n10 226\n11 227\n12 240\n13 237\n14 206\n15 227", "256\n255\n250\n247\n255\n259\n223\n253"]], "original": "console.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const N = tmp[0][0], Q = tmp[N+1][0];\n  const V = [0], W = [0], v = [], L = [];\n  for ( let i = 1; i <= N; i++ ) {\n    V.push( tmp[i][0] );\n    W.push( tmp[i][1] );\n  }\n  let Lmax = 0;\n  for ( let i = 1; i <= Q; i++ ) {\n    v.push( tmp[N+1+i][0] );\n    L.push( tmp[N+1+i][1] );\n    if ( L[i-1] > Lmax ) Lmax = L[i-1];\n  }\n  const dp = [Array(Lmax+1).fill(0)];\n  for ( let i = 1; i <= N; i++ ) {\n    dp[i] = [];\n    for ( let w = 0; w <= Lmax; w++ ) {\n      if ( w >= W[i] ) dp[i][w] = Math.max( dp[i>>1][w-W[i]] + V[i], dp[i>>1][w] );\n      else dp[i][w] = dp[i>>1][w];\n    }\n  }\n  const max = [];\n  for ( let i = 0; i < Q; i++ ) {\n    max.push( dp[v[i]][L[i]] );\n  }\n  return max.join('\\n');\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02806_1", "type": "JavaScript", "obfuscated": "function Main(_0x54e6bf) {\n    var _0x39a851 = _0x54e6bf['split']('\\x0a');\n    var _0x3a67e0 = _0x39a851['map'](_0x9f9e => _0x9f9e['split']('\\x20')[0x0])['splice'](0x1, _0x39a851['length'] - 0x2);\n    var _0x15b845 = _0x3a67e0['indexOf'](_0x39a851[_0x39a851['length'] - 0x1]);\n    var _0x82f319 = 0x0;\n    for (var _0x2c0334 = _0x15b845 + 0x2; _0x2c0334 < _0x39a851['length'] - 0x1; _0x2c0334++) {\n        _0x82f319 += Number(_0x39a851[_0x2c0334]['split']('\\x20')[0x1]);\n    }\n    console['log'](_0x82f319);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\ndwango 2\nsixth 5\nprelims 25\ndwango", "30"], ["1\nabcde 1000\nabcde", "0"], ["15\nypnxn 279\nkgjgwx 464\nqquhuwq 327\nrxing 549\npmuduhznoaqu 832\ndagktgdarveusju 595\nwunfagppcoi 200\ndhavrncwfw 720\njpcmigg 658\nwrczqxycivdqn 639\nmcmkkbnjfeod 992\nhtqvkgkbhtytsz 130\ntwflegsjz 467\ndswxxrxuzzfhkp 989\nszfwtzfpnscgue 958\npmuduhznoaqu", "6348"]], "original": "function Main(input) {\n\tvar lines = input.split(\"\\n\");\n\tvar titles = lines.map(l => l.split(' ')[0]).splice(1, lines.length - 2)\n\tvar sleptAt = titles.indexOf(lines[lines.length - 1])\n\tvar sum = 0\n\tfor(var i = sleptAt + 2; i < lines.length - 1 ; i ++) {\n\t\tsum+= Number(lines[i].split(' ')[1])\n\t}\n\tconsole.log(sum)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02853_1", "type": "JavaScript", "obfuscated": "function Main(_0x33e674) {\n    const _0x44a285 = _0x33e674['trim']()['split']('\\x20');\n    const _0x37843e = Math['floor'](_0x44a285[0x0]);\n    const _0x9952e8 = Math['floor'](_0x44a285[0x1]);\n    let _0x3aa996 = 0x0;\n    if (_0x37843e === 0x1 && _0x9952e8 === 0x1) {\n        _0x3aa996 += 0x61a80;\n    }\n    if (_0x37843e === 0x1)\n        _0x3aa996 += 0x493e0;\n    if (_0x9952e8 === 0x1)\n        _0x3aa996 += 0x493e0;\n    if (_0x37843e === 0x2)\n        _0x3aa996 += 0x30d40;\n    if (_0x9952e8 === 0x2)\n        _0x3aa996 += 0x30d40;\n    if (_0x37843e === 0x3)\n        _0x3aa996 += 0x186a0;\n    if (_0x9952e8 === 0x3)\n        _0x3aa996 += 0x186a0;\n    console['log'](_0x3aa996);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 1", "1000000"], ["3 101", "100000"], ["4 4", "0"]], "original": "function Main(input) {\n  const chars = input.trim().split(' ');\n\n  const x = Math.floor(chars[0]);\n  const y = Math.floor(chars[1]);\n  \n  let ans = 0;\n  \n  if (x === 1 && y === 1) {\n    ans += 400000;\n  }\n  \n  if (x === 1) ans += 300000;\n  if (y === 1) ans += 300000;\n  if (x === 2) ans += 200000;\n  if (y === 2) ans += 200000;\n  if (x === 3) ans += 100000;\n  if (y === 3) ans += 100000;\n  \n  console.log(ans);\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02913_1", "type": "JavaScript", "obfuscated": "const main = _0x464c6f => {\n    var _0x364f48 = _0x464c6f[0x0] - 0x0;\n    var _0x186c75 = _0x464c6f[0x1];\n    var _0x2777a2 = 0x0;\n    var _0x574d54 = 0x0;\n    var _0x578445 = ~~(_0x364f48 / 0x2);\n    _0x2c83e2:\n        while (_0x574d54 <= _0x578445) {\n            var _0x3f18c9 = ~~((_0x574d54 + _0x578445) / 0x2);\n            for (var _0x3f9c7a = 0x0; _0x3f9c7a < _0x364f48 - _0x3f18c9; _0x3f9c7a++) {\n                var _0x363a8d = _0x186c75['substring'](_0x3f9c7a, _0x3f9c7a + _0x3f18c9);\n                if (_0x186c75['lastIndexOf'](_0x363a8d) >= _0x3f9c7a + _0x3f18c9) {\n                    _0x574d54 = _0x3f18c9 + 0x1;\n                    _0x2777a2 = _0x3f18c9;\n                    continue _0x2c83e2;\n                }\n            }\n            _0x578445 = _0x3f18c9 - 0x1;\n        }\n    console['log'](_0x2777a2);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8')['trim']()['split']('\\x0a'));", "test_cases": [["5\nababa", "2"], ["2\nxy", "0"], ["13\nstrangeorange", "5"]], "original": "const main = (input) => {\n  var N = input[0]-0;\n  var str = input[1];\n  var ans = 0;\n  var min = 0;\n  var max = ~~(N/2);\n  start:while(min<=max){\n    var ave = ~~((min+max)/2);\n    for(var i=0;i<N-ave;i++){\n      var base = str.substring(i,i+ave);\n      if(str.lastIndexOf(base) >= i+ave){\n        min = ave+1;\n        ans = ave;\n        continue start;\n      }\n    }\n    max = ave-1;\n  }\n  console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8').trim().split(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p03045_1", "type": "JavaScript", "obfuscated": "function Main(_0x7672ca) {\n    _0x7672ca = _0x7672ca['split']('\\x0a');\n    if (_0x7672ca[_0x7672ca['length'] - 0x1] === '') {\n        _0x7672ca['pop']();\n    }\n    const _0x3bb74b = _0x7672ca[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x800e5 = _0x7672ca[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x462c07 = new Array(_0x3bb74b + 0x1)['fill'](0x0);\n    for (var _0x541dc4 = 0x1; _0x541dc4 <= _0x800e5; _0x541dc4++) {\n        if (_0x367e53(_0x7672ca[_0x541dc4]['split']('\\x20')[0x0] - 0x0) !== _0x367e53(_0x7672ca[_0x541dc4]['split']('\\x20')[0x1] - 0x0)) {\n            _0x462c07[_0x367e53(_0x7672ca[_0x541dc4]['split']('\\x20')[0x1] - 0x0)] = _0x367e53(_0x7672ca[_0x541dc4]['split']('\\x20')[0x0]) - 0x0;\n        }\n    }\n    console['log'](_0x462c07['reduce']((_0x20371e, _0x9048f9) => {\n        return _0x20371e + (_0x9048f9 === 0x0 ? 0x1 : 0x0);\n    }, 0x0) - 0x1);\n    function _0x367e53(_0x181f8f) {\n        var _0x5cc17e = [];\n        var _0x2662cb = _0x181f8f;\n        while (_0x462c07[_0x2662cb] !== 0x0) {\n            _0x5cc17e['push'](_0x2662cb);\n            _0x2662cb = _0x462c07[_0x2662cb];\n        }\n        _0x5cc17e['forEach'](_0xbe6bbf => {\n            _0x462c07[_0xbe6bbf] = _0x2662cb;\n        });\n        return _0x2662cb;\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 1\n1 2 1", "2"], ["6 5\n1 2 1\n2 3 2\n1 3 3\n4 5 4\n5 6 5", "2"], ["100000 1\n1 100000 100", "99999"]], "original": "\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  var parent=new Array(N+1).fill(0);\n  for(var i=1;i<=M;i++){\n    if(root(input[i].split(' ')[0]-0)!==root(input[i].split(' ')[1]-0)){\n       parent[root(input[i].split(' ')[1]-0)]=root(input[i].split(' ')[0])-0;\n    }\n  }\n  console.log(parent.reduce((acc,cur)=>{\n    return acc+(cur===0?1:0);\n  },0)-1);\n  \n  function root(node){\n    var array=[];\n    var point=node;\n    while(parent[point]!==0){\n      array.push(point);\n      point=parent[point];\n    }\n    array.forEach(e=>{\n      parent[e]=point;\n    });\n    return point;\n  }\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03096_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x397fb5) {\n    _0x397fb5 = _0x397fb5['trim']()['split'](/\\s+/)['map'](_0x125618 => _0x125618 - 0x0);\n    var _0x4101ef = _0x397fb5['shift']();\n    var _0xbac7af = [];\n    for (let _0x4fa326 = 0x0; _0x4fa326 < 0x1e8480; _0x4fa326++)\n        _0xbac7af[_0x4fa326] = 'not\\x20yet';\n    _0xbac7af[_0x397fb5[0x0]] = 0x0;\n    var _0x14d804 = [0x1];\n    var _0x3a8de2 = Math['pow'](0xa, 0x9) + 0x7;\n    for (let _0x2891b9 = 0x1; _0x2891b9 < _0x4101ef; _0x2891b9++) {\n        let _0x4d6975 = _0x397fb5[_0x2891b9];\n        if (_0xbac7af[_0x4d6975] === 'not\\x20yet' || _0xbac7af[_0x4d6975] === _0x2891b9 - 0x1) {\n            _0xbac7af[_0x4d6975] = _0x2891b9;\n            _0x14d804[_0x2891b9] = _0x14d804[_0x2891b9 - 0x1];\n            continue;\n        }\n        _0x14d804[_0x2891b9] = (_0x14d804[_0x2891b9 - 0x1] + _0x14d804[_0xbac7af[_0x4d6975]]) % _0x3a8de2;\n        _0xbac7af[_0x4d6975] = _0x2891b9;\n    }\n    console['log'](_0x14d804['pop']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1\n2\n1\n2\n2", "3"], ["6\n4\n2\n5\n4\n2\n4", "5"], ["7\n1\n3\n1\n2\n3\n3\n2", "5"]], "original": "\"use strict\"\nfunction Main(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  var N=input.shift();\n  var last=[];//last[hoge]で色hogeの最後の位置\n  for(let i=0;i<2000000;i++)last[i]=\"not yet\";\n  last[input[0]]=0;\n  var dp=[1];//dp[i]で石0~iまでの色の塗られ方の場合の数\n  var M=Math.pow(10,9)+7;\n  for(let i=1;i<N;i++){\n    let c=input[i];\n    if(last[c]===\"not yet\"||last[c]===i-1){\n      last[c]=i;\n      dp[i]=dp[i-1];\n      continue;\n    }\n    dp[i]=(dp[i-1]+dp[last[c]])%M;\n    last[c]=i;\n  }\n  console.log(dp.pop());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03194_1", "type": "JavaScript", "obfuscated": "function Main(_0x178127) {\n    var _0x178127 = _0x178127['split']('\\x20');\n    var _0x510ca8 = parseInt(_0x178127[0x0], 0xa);\n    var _0x3d41ea = parseInt(_0x178127[0x1], 0xa);\n    var _0x48d141 = [];\n    var _0x86a4db = [];\n    var _0x3c1dc8 = 0x1;\n    var _0x55b428 = 0x2;\n    while (_0x55b428 <= _0x3d41ea) {\n        while (_0x3d41ea % _0x55b428 === 0x0) {\n            _0x48d141['push'](_0x55b428);\n            _0x3d41ea = Math['floor'](_0x3d41ea / _0x55b428);\n        }\n        _0x55b428++;\n    }\n    for (var _0x55b428 = 0x0; _0x55b428 < _0x48d141['length']; _0x55b428++) {\n        var _0x37b065 = _0x48d141[_0x55b428];\n        _0x86a4db[_0x37b065] = _0x86a4db[_0x37b065] ? _0x86a4db[_0x37b065] + 0x1 : 0x1;\n    }\n    var _0x495688 = _0x48d141['filter'](function (_0x429ae3, _0x53c1a6, _0x2ec17f) {\n        return _0x2ec17f['indexOf'](_0x429ae3) === _0x53c1a6;\n    });\n    for (var _0x55b428 = 0x0; _0x55b428 < _0x495688['length']; _0x55b428++) {\n        if (_0x86a4db[_0x495688[_0x55b428]] >= _0x510ca8) {\n            _0x3c1dc8 *= _0x495688[_0x55b428];\n        }\n    }\n    console['log'](_0x3c1dc8);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 24", "2"], ["5 1", "1"], ["1 111", "111"], ["4 972439611840", "206"]], "original": "function Main(input) {\n  // 入力\n\tvar input = input.split(' ');\n\tvar n = parseInt(input[0], 10);\n  var p = parseInt(input[1], 10);\n  var arr = [];\n  var counts = [];\n  var ans = 1;\n\n  // 計算\n  var i =2;\n  while (i <= p) {\n    while (p % i === 0) {\n      arr.push(i);\n      p = Math.floor(p / i);\n    }\n    i++;\n  }\n\n  for(var i = 0; i < arr.length; i++) {\n    var key = arr[i];\n    counts[key] = (counts[key])? counts[key] + 1 : 1 ;\n  }\n\n  var b = arr.filter(function (x, i, self) {\n    return self.indexOf(x) === i;\n  });\n  for (var i = 0; i < b.length; i++) {\n    if (counts[b[i]] >= n) {\n      ans *= b[i];\n    }\n  }\n  console.log(ans);\n\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03286_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x545a64) {\n    _0x545a64 = _0x545a64['split']('\\x0a');\n    let _0x3dad6e = parseInt(_0x545a64[0x0]);\n    let _0x13a817 = '';\n    if (_0x3dad6e === 0x0) {\n        console['log'](0x0);\n        return;\n    }\n    while (_0x3dad6e !== 0x0) {\n        _0x13a817 = String(Math['abs'](_0x3dad6e % -0x2)) + _0x13a817;\n        if (_0x3dad6e % -0x2 < 0x0)\n            _0x3dad6e += _0x3dad6e < 0x0 ? -0x1 : 0x1;\n        _0x3dad6e = parseInt(_0x3dad6e / -0x2);\n    }\n    console['log'](_0x13a817);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["-9", "1011"], ["123456789", "11000101011001101110100010101"], ["0", "0"]], "original": "'use strict'\nfunction Main(input) {\n  input = input.split(\"\\n\")\n  let N = parseInt(input[0])\n  let res = ''\n  if (N === 0) {\n    console.log(0)\n    return\n  }\n  while (N !== 0) {\n    res = String(Math.abs(N % -2)) + res\n    if (N % -2 < 0) N += N < 0 ? -1 : 1\n    N = parseInt(N / -2)\n  }\n  console.log(res)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"))", "language": "JavaScript"}
{"filename": "p03425_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3e06eb => {\n    _0x3e06eb = _0x3e06eb['trim']()['split']('\\x0a');\n    const _0x2c816e = parseInt(_0x3e06eb[0x0]);\n    const _0x2fb687 = _0x3e06eb['slice'](0x1, _0x2c816e + 0x1);\n    const _0xb1dbdb = [\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x1,\n        0x2\n    ];\n    const _0xb65e1e = [\n        0x1,\n        0x1,\n        0x1,\n        0x2,\n        0x2,\n        0x3,\n        0x2,\n        0x2,\n        0x3,\n        0x3\n    ];\n    const _0x29ba72 = [\n        0x2,\n        0x3,\n        0x4,\n        0x3,\n        0x4,\n        0x4,\n        0x3,\n        0x4,\n        0x4,\n        0x4\n    ];\n    let _0x5ed0ff = [\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0\n    ];\n    for (let _0x55da01 in _0x2fb687) {\n        if (_0x2fb687[_0x55da01][0x0] === 'M') {\n            _0x5ed0ff[0x0]++;\n        }\n        if (_0x2fb687[_0x55da01][0x0] === 'A') {\n            _0x5ed0ff[0x1]++;\n        }\n        if (_0x2fb687[_0x55da01][0x0] === 'R') {\n            _0x5ed0ff[0x2]++;\n        }\n        if (_0x2fb687[_0x55da01][0x0] === 'C') {\n            _0x5ed0ff[0x3]++;\n        }\n        if (_0x2fb687[_0x55da01][0x0] === 'H') {\n            _0x5ed0ff[0x4]++;\n        }\n    }\n    let _0x1e8cf2 = 0x0;\n    for (let _0x3c427b = 0x0; _0x3c427b < 0xa; _0x3c427b++) {\n        _0x1e8cf2 += _0x5ed0ff[_0xb1dbdb[_0x3c427b]] * _0x5ed0ff[_0xb65e1e[_0x3c427b]] * _0x5ed0ff[_0x29ba72[_0x3c427b]];\n    }\n    console['log'](_0x1e8cf2);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\nMASHIKE\nRUMOI\nOBIRA\nHABORO\nHOROKANAI", "2"], ["4\nZZ\nZZZ\nZ\nZZZZZZZZZZ", "0"], ["5\nCHOKUDAI\nRNG\nMAKOTO\nAOKI\nRINGO", "7"]], "original": "\"use strict\";\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const names = arg.slice(1, N + 1);\n    \n    const p = [0, 0, 0, 0, 0, 0, 1, 1, 1, 2];\n    const q = [1, 1, 1, 2, 2, 3, 2, 2, 3, 3];\n    const r = [2, 3, 4, 3, 4, 4, 3, 4, 4, 4];\n    \n    let march = [0, 0, 0, 0, 0];\n    \n    for(let i in names) {\n        if(names[i][0] === \"M\") {\n            march[0]++;\n        }\n        \n        if(names[i][0] === \"A\") {\n            march[1]++;\n        }\n        \n        if(names[i][0] === \"R\") {\n            march[2]++;\n        }\n        \n        if(names[i][0] === \"C\") {\n            march[3]++;\n        }\n        \n        if(names[i][0] === \"H\") {\n            march[4]++;\n        }\n    }\n    \n    let answer = 0;\n    \n    for(let i=0; i<10; i++) {\n        answer += march[p[i]] * march[q[i]] * march[r[i]];\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03458_1", "type": "JavaScript", "obfuscated": "function Main(_0x1f3e41) {\n    _0x1f3e41 = _0x1f3e41['split']('\\x0a');\n    var _0xa2189e = _0x1f3e41[0x0]['split']('\\x20')['map'](_0x3772c3 => parseInt(_0x3772c3));\n    var _0x40a565 = _0xa2189e[0x1];\n    _0xa2189e = _0xa2189e[0x0];\n    var _0x4dcd5a = [], _0x2ca3fb = [], _0x4870a1 = [];\n    for (var _0x257b3a = 0x0; _0x257b3a < _0xa2189e; _0x257b3a++) {\n        _0x4dcd5a[_0x257b3a] = _0x1f3e41[_0x257b3a + 0x1]['split']('\\x20');\n        _0x2ca3fb[_0x257b3a] = parseInt(_0x4dcd5a[_0x257b3a][0x1]) % (_0x40a565 * 0x2);\n        _0x4870a1[_0x257b3a] = _0x4dcd5a[_0x257b3a][0x2] === 'W' ? 0x0 : 0x1;\n        _0x4dcd5a[_0x257b3a] = parseInt(_0x4dcd5a[_0x257b3a][0x0]) % (_0x40a565 * 0x2);\n    }\n    var _0x3286a0 = 0x0;\n    for (_0x257b3a = 0x0; _0x257b3a < _0x40a565; _0x257b3a++) {\n        var _0x1b53b1 = 0x0;\n        var _0x6db048 = new Array(_0x40a565 * 0x2)['fill'](0x0), _0x31fd91 = new Array(_0x40a565 * 0x2)['fill'](0x0);\n        for (var _0x3e05bf = 0x0; _0x3e05bf < _0xa2189e; _0x3e05bf++) {\n            if ((((_0x4dcd5a[_0x3e05bf] + _0x257b3a) / _0x40a565 ^ _0x2ca3fb[_0x3e05bf] / _0x40a565) & 0x1) === _0x4870a1[_0x3e05bf]) {\n                _0x1b53b1++;\n                _0x6db048[_0x2ca3fb[_0x3e05bf]]++;\n            } else\n                _0x31fd91[_0x2ca3fb[_0x3e05bf]]++;\n        }\n        if (_0x3286a0 < _0x1b53b1)\n            _0x3286a0 = _0x1b53b1;\n        if (_0x3286a0 < _0xa2189e - _0x1b53b1)\n            _0x3286a0 = _0xa2189e - _0x1b53b1;\n        for (var _0xe43c99 = 0x0; _0xe43c99 < _0x40a565 - 0x1; _0xe43c99++) {\n            _0x1b53b1 += _0x31fd91[_0xe43c99] - _0x6db048[_0xe43c99] + _0x31fd91[_0xe43c99 + _0x40a565] - _0x6db048[_0xe43c99 + _0x40a565];\n            if (_0x3286a0 < _0x1b53b1)\n                _0x3286a0 = _0x1b53b1;\n            if (_0x3286a0 < _0xa2189e - _0x1b53b1)\n                _0x3286a0 = _0xa2189e - _0x1b53b1;\n        }\n    }\n    console['log'](_0x3286a0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3\n0 1 W\n1 2 W\n5 3 B\n5 4 B", "4"], ["2 1000\n0 0 B\n0 1 W", "2"], ["6 2\n1 2 B\n2 1 W\n2 2 B\n1 0 B\n0 6 W\n4 5 W", "4"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar N = input[0].split(\" \").map(a => parseInt(a));\n\tvar K = N[1];\n\tN = N[0];\n\tvar x = [], y = [], c = [];\n\tfor(var i = 0; i < N; i++){\n\t\tx[i] = input[i+1].split(\" \");\n\t\ty[i] = parseInt(x[i][1]) % (K * 2);\n\t\tc[i] = (x[i][2] === \"W\" ? 0 : 1);\n\t\tx[i] = parseInt(x[i][0]) % (K * 2);\n\t}\n\tvar ans = 0;\n\tfor(i = 0; i < K; i++){\n\t\tvar now = 0;\n\t\tvar Y1 = new Array(K*2).fill(0), Y2 = new Array(K*2).fill(0);\n\t\tfor(var k = 0; k < N; k++){\n\t\t\tif((((x[k] + i) / K ^ y[k] / K) & 1) === c[k]){\n\t\t\t\tnow++;\n\t\t\t\tY1[y[k]]++;\n\t\t\t}else Y2[y[k]]++;\n\t\t}\n\t\tif(ans < now)ans = now;\n\t\tif(ans < N - now)ans = N - now;\n\t\tfor(var j = 0; j < K - 1; j++){\n\t\t\tnow += Y2[j] - Y1[j] + Y2[j+K] - Y1[j+K];\n\t\t\tif(ans < now)ans = now;\n\t\t\tif(ans < N - now)ans = N - now;\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03546_1", "type": "JavaScript", "obfuscated": "console['log']((_0x1606d6 => {\n    const [[_0x4fa091, _0x4facaa], ..._0xed4cad] = _0x1606d6['trim']()['split']`\\n`['map'](_0x2195b4 => _0x2195b4['split']` `['map'](_0x16a231 => _0x16a231 | 0x0));\n    const _0xa6af41 = _0xed4cad['slice'](0xa);\n    const _0x37321c = _0xed4cad['slice'](0x0, 0xa);\n    for (let _0x2d2343 = 0x0; _0x2d2343 < 0xa; _0x2d2343++) {\n        for (let _0x2129ea = 0x0; _0x2129ea < 0xa; _0x2129ea++) {\n            for (let _0xc4a04f = 0x0; _0xc4a04f < 0xa; _0xc4a04f++) {\n                _0x37321c[_0x2129ea][_0xc4a04f] = Math['min'](_0x37321c[_0x2129ea][_0xc4a04f], _0x37321c[_0x2129ea][_0x2d2343] + _0x37321c[_0x2d2343][_0xc4a04f]);\n            }\n        }\n    }\n    let _0x4e8da4 = 0x0;\n    for (let _0x2a83b3 = 0x0; _0x2a83b3 < _0x4fa091; _0x2a83b3++) {\n        for (let _0x40ce8f = 0x0; _0x40ce8f < _0x4facaa; _0x40ce8f++) {\n            if (_0xa6af41[_0x2a83b3][_0x40ce8f] === -0x1 || _0xa6af41[_0x2a83b3][_0x40ce8f] === 0x1)\n                continue;\n            _0x4e8da4 += _0x37321c[_0xa6af41[_0x2a83b3][_0x40ce8f]][0x1];\n        }\n    }\n    return '' + _0x4e8da4;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 4\n0 9 9 9 9 9 9 9 9 9\n9 0 9 9 9 9 9 9 9 9\n9 9 0 9 9 9 9 9 9 9\n9 9 9 0 9 9 9 9 9 9\n9 9 9 9 0 9 9 9 9 2\n9 9 9 9 9 0 9 9 9 9\n9 9 9 9 9 9 0 9 9 9\n9 9 9 9 9 9 9 0 9 9\n9 9 9 9 2 9 9 9 0 9\n9 2 9 9 9 9 9 9 9 0\n-1 -1 -1 -1\n8 1 1 8", "12"], ["5 5\n0 999 999 999 999 999 999 999 999 999\n999 0 999 999 999 999 999 999 999 999\n999 999 0 999 999 999 999 999 999 999\n999 999 999 0 999 999 999 999 999 999\n999 999 999 999 0 999 999 999 999 999\n999 999 999 999 999 0 999 999 999 999\n999 999 999 999 999 999 0 999 999 999\n999 999 999 999 999 999 999 0 999 999\n999 999 999 999 999 999 999 999 0 999\n999 999 999 999 999 999 999 999 999 0\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1", "0"], ["3 5\n0 4 3 6 2 7 2 5 3 3\n4 0 5 3 7 5 3 7 2 7\n5 7 0 7 2 9 3 2 9 1\n3 6 2 0 2 4 6 4 2 3\n3 5 7 4 0 6 9 7 6 7\n9 8 5 2 2 0 4 7 6 5\n5 4 6 3 2 3 0 5 4 3\n3 6 2 3 4 2 4 0 8 9\n4 6 5 4 3 5 3 2 0 8\n2 1 3 4 5 7 8 6 4 0\n3 5 2 6 1\n2 5 3 2 1\n6 9 2 5 6", "47"]], "original": "console.log((args=>{\n  const [[H,W],...tmp] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  const A = tmp.slice(10);\n  const dp = tmp.slice(0,10);\n  for ( let k = 0; k < 10; k++ ) {\n    for ( let i = 0; i < 10; i++ ) {\n      for ( let j = 0; j < 10; j++ ) {\n        dp[i][j] = Math.min( dp[i][j], dp[i][k] + dp[k][j] );\n      }\n    }\n  }\n  let cost = 0;\n  for ( let i = 0; i < H; i++ ) {\n    for ( let j = 0; j < W; j++ ) {\n      if ( A[i][j] === -1 || A[i][j] === 1 ) continue;\n      cost += dp[A[i][j]][1];\n    }\n  }\n  return `${cost}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03549_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x23eaef) {\n    const _0x3c9f40 = _0x23eaef['split']('\\x0a');\n    const _0x17f629 = _0x3c9f40[0x0]['split']('\\x20')['map'](_0x1a9a5e => parseInt(_0x1a9a5e))[0x0];\n    const _0x5d82ba = _0x3c9f40[0x0]['split']('\\x20')['map'](_0x3e3d95 => parseInt(_0x3e3d95))[0x1];\n    let _0x3c5cc6 = ((_0x17f629 - _0x5d82ba) * 0x64 + _0x5d82ba * 0x76c) * Math['pow'](0x2, _0x5d82ba);\n    console['log'](_0x3c5cc6);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 1", "3800"], ["10 2", "18400"], ["100 5", "608000"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n');\n  const N = lines[0].split(' ').map(x => parseInt(x))[0];\n  const M = lines[0].split(' ').map(x => parseInt(x))[1];\n\n\n\n  let result = ((N-M)*100 + M*1900)*Math.pow(2,M);\n\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03712_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x16e371) {\n    _0x16e371 = _0x16e371['split']('\\x0a');\n    _0x16e371[0x0] = _0x16e371[0x0]['split']('\\x20')['map'](_0x17c854 => ~~_0x17c854);\n    const _0xa98ed9 = _0x16e371[0x0][0x0];\n    const _0x5ce65d = _0x16e371[0x0][0x1];\n    let _0x3a9181 = '#'['repeat'](_0x5ce65d + 0x2) + '\\x0a';\n    for (let _0x3c9771 = 0x1; _0x3c9771 <= _0xa98ed9; _0x3c9771++) {\n        _0x3a9181 += '#' + _0x16e371[_0x3c9771] + '#\\x0a';\n    }\n    _0x3a9181 += '#'['repeat'](_0x5ce65d + 0x2);\n    console['log'](_0x3a9181);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3\nabc\narc", "#####\n#abc#\n#arc#\n#####"], ["1 1\nz", "###\n#z#\n###"]], "original": "'use strict'\n\nfunction main(input) {\n\n  input = input.split('\\n')\n  input[0] = input[0].split(' ').map(v => ~~v)\n  const h = input[0][0]\n  const w = input[0][1]\n\n  let tmp = '#'.repeat(w + 2) + '\\n'\n  for (let i = 1; i <= h; i++) {\n    tmp += '#' + input[i] + '#\\n'\n  }\n  tmp += '#'.repeat(w + 2)\n\n  console.log(tmp)\n\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00008_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nconst MAX = 0x32;\nmap0 = [];\nfor (i = 0x0; i <= MAX; i++)\n    map0['push'](0x0);\nmap1 = []['concat'](map0);\nmap2 = []['concat'](map1);\nmap3 = []['concat'](map2);\nfor (i = 0x0; i <= 0x9; i++)\n    map0[i] = 0x1;\nfunction expand_map(_0x3b60d4, _0x3f2918) {\n    for (var _0x118144 = 0x0; _0x118144 < MAX; _0x118144++) {\n        for (var _0x2ca361 = Math['max'](0x0, _0x118144 - 0x9); _0x2ca361 <= _0x118144; _0x2ca361++) {\n            _0x3b60d4[_0x118144] += _0x3f2918[_0x2ca361];\n        }\n    }\n}\nexpand_map(map1, map0);\nexpand_map(map2, map1);\nexpand_map(map3, map2);\nrequire('fs')['readFileSync'](config['input'], 'ascii')['trim']()['split'](config['newline'])['forEach'](function (_0x5b3ced) {\n    console['log'](map3[parseInt(_0x5b3ced)]);\n});", "test_cases": [["35\n1", "4\n4"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nconst MAX = 50;\n\nmap0 = [];\nfor (i = 0; i <= MAX; i++) map0.push(0);\nmap1 = [].concat(map0);\nmap2 = [].concat(map1);\nmap3 = [].concat(map2);\n\nfor (i = 0; i <= 9; i++) map0[i] = 1;\n\nfunction expand_map(map, smaller) {\n\tfor (var i = 0; i < MAX; i++) {\n\t\tfor (var j = Math.max(0, i - 9); j <= i; j++) {\n\t\t\tmap[i] += smaller[j];\n\t\t}\n\t}\n}\n\nexpand_map(map1, map0);\nexpand_map(map2, map1);\nexpand_map(map3, map2);\n\nrequire('fs').readFileSync(config.input, 'ascii')\n\t.trim()\n\t.split(config.newline)\n\t.forEach(function (line) { console.log(map3[parseInt(line)]); })\n\t;", "language": "JavaScript"}
{"filename": "p00009_1", "type": "JavaScript", "obfuscated": "var count = 0x0;\nfunction isPrime(_0x47123b) {\n    if (_0x47123b < 0x2)\n        return ![];\n    for (var _0xa23f42 = 0x2; _0xa23f42 < _0x47123b; _0xa23f42++) {\n        if (_0x47123b % _0xa23f42 == 0x0)\n            return ![];\n    }\n    count++;\n    return !![];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar p = input['split']('\\x0a');\nfor (var i = 0x0; i < p['length']; i++) {\n    count = 0x0;\n    for (var j = 0x2; j <= p[i]; j++) {\n        isPrime(j);\n    }\n    console['log'](count);\n}", "test_cases": [["10\n3\n11", "4\n2\n5"]], "original": "var count=0;\n function isPrime(num) {\n     if(num < 2) return false;\n     for (var i = 2; i < num; i++) {\n         if(num%i==0)\n             return false;\n     }\n     count++;\n     return true;\n }\n var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n var p = input.split('\\n');\n  for(var i=0;i<p.length;i++){\n   count=0;\n   for(var j=2;j<=p[i];j++){\n  isPrime(j);\n }\n  console.log(count);\n }", "language": "JavaScript"}
{"filename": "p00221_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var mn = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (mn[0x0] == 0x0 && mn[0x1] == 0x0)\n        break;\n    var player = [];\n    for (var i = 0x0; i < mn[0x0]; i++)\n        player[i] = i + 0x1;\n    var arr = [];\n    for (var i = 0x0; i < mn[0x1]; i++) {\n        var v = Arr['shift']();\n        arr['push'](v);\n    }\n    var i = 0x1;\n    var k = 0x0;\n    var len = mn[0x0];\n    for (var I = 0x0; I < arr['length']; I++) {\n        var v = arr[I];\n        var str = '';\n        if (i % 0x3 == 0x0)\n            str += 'Fizz';\n        if (i % 0x5 == 0x0)\n            str += 'Buzz';\n        if (str == '')\n            str = i;\n        if (v != str) {\n            player[k] = ![];\n            len++;\n            if (len == 0x1)\n                break;\n        }\n        i++;\n        var H = 0x0;\n        do {\n            H++;\n            if (H > 0x3e8)\n                break;\n            k++;\n            if (k >= player['length']) {\n                player = player['filter'](function (_0x434828) {\n                    return _0x434828 != ![];\n                });\n                k = 0x0;\n            }\n        } while (player[k] == ![]);\n    }\n    player = player['filter'](function (_0x9e67d6) {\n        return _0x9e67d6 != ![];\n    });\n    console['log'](player['join']('\\x20'));\n}", "test_cases": [["5 7\n1\n2\nFizz\n4\nBuzz\n6\n7\n3 5\n1\n2\n3\n4\n5\n0 0", "2 3 4 5\n1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var mn=(Arr.shift()).split(\" \").map(Number);\n   if(mn[0]==0 && mn[1]==0)break;\n   var player=[];\n   for(var i=0;i<mn[0];i++)player[i]=i+1;\n   var arr=[];\n   for(var i=0;i<mn[1];i++){\n      var v=Arr.shift();\n      arr.push(v);\n   }\n   var i=1;\n   var k=0;\n   var len=mn[0];\n   for(var I=0;I<arr.length;I++){\n      var v=arr[I];\n      var str=\"\";\n      if(i%3==0)str+=\"Fizz\";\n      if(i%5==0)str+=\"Buzz\";\n      if(str==\"\")str=i;\n      if(v!=str){\n         player[k]=false;\n         len++;\n         if(len==1)break;\n      }\n      i++;\n      var H=0;\n      do{\n      H++;\n      if(H>1000)break;\n      k++;\n      if(k>=player.length){\n         player=player.filter(function(v){return v!=false;});\n         k=0;\n      }\n      }while(player[k]==false);\n   }\n   player=player.filter(function(v){return v!=false;});\n   console.log(player.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00990_1", "type": "JavaScript", "obfuscated": "function over(_0x161372) {\n    if (_0x161372 >= 0xa)\n        _0x161372 = _0x161372 - 0xa + 0x1;\n    return _0x161372;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar id = arr['shift']()['split']('');\nvar a = arr['shift']() - 0x0;\nvar ary = arr['shift']()['split']('\\x20')['map'](Number);\nvar k = [];\nvar sum = 0x0;\nid['forEach'](function (_0x4e4a12, _0xf76f05) {\n    if (_0x4e4a12 == '*') {\n        if (_0xf76f05 % 0x2 == 0x0)\n            k['push'](0x1);\n        else\n            k['push'](0x2);\n    } else {\n        if (_0xf76f05 % 0x2 == 0x0)\n            sum += _0x4e4a12 - 0x0;\n        else\n            sum += over((_0x4e4a12 - 0x0) * 0x2);\n    }\n});\nvar dp = [];\nfor (var i = 0x0; i <= 0x7; i++) {\n    dp[i] = [];\n    for (var s = 0x0; s < 0xf4240; s++)\n        dp[i][s] = ![];\n}\ndp[0x0][sum] = 0x1;\nfor (var i = 0x0; i < k['length']; i++) {\n    for (var j = 0x0; j < ary['length']; j++) {\n        for (var s = 0x0; s < 0xf4240; s++) {\n            dp[i + 0x1][s + over(ary[j] * k[i])] += dp[i][s];\n        }\n    }\n}\nvar ans = 0x0;\nfor (var s = 0x0; s < 0x186a0; s++)\n    ans += dp[k['length']][s * 0xa];\nconsole['log'](ans);", "test_cases": [["5\n5*57*\n2\n3 9", "1"], ["15\n2***9*2*6*1199*\n9\n0 1 2 3 4 6 7 8 9", "478297"]], "original": "function over(x){\n   if(x>=10)x=x-10+1;\n   return x;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar id=arr.shift().split(\"\");\nvar a=arr.shift()-0;\nvar ary=arr.shift().split(\" \").map(Number);\nvar k=[];\nvar sum=0;\nid.forEach(function(v,i){\n   if(v==\"*\"){\n      if(i%2==0)k.push(1);\n      else k.push(2);\n   }else{\n      if(i%2==0)sum+=v-0;\n      else sum+=over((v-0)*2);\n   }\n});\nvar dp=[];\nfor(var i=0;i<=7;i++){\n   dp[i]=[];\n   for(var s=0;s<1000000;s++)dp[i][s]=false;\n}\n\ndp[0][sum]=1;\n\nfor(var i=0;i<k.length;i++){\n   for(var j=0;j<ary.length;j++){\n      for(var s=0;s<1000000;s++){\n         dp[i+1][s+over(ary[j]*k[i])]+=dp[i][s];\n      }\n   }\n\n}\nvar ans=0;\nfor(var s=0;s<100000;s++)ans+=dp[k.length][s*10];\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p02585_1", "type": "JavaScript", "obfuscated": "const main = _0x424890 => {\n    _0x424890 = _0x424890['trim']()['split']('\\x0a');\n    const [_0x757d9c, _0x3ee8ec] = _0x424890[0x0]['split']('\\x20')['map'](Number);\n    const _0x1e0e27 = _0x424890[0x1]['split']('\\x20')['map'](_0x1d4e6b => Number(_0x1d4e6b) - 0x1);\n    const _0x4411e5 = _0x424890[0x2]['split']('\\x20')['map'](Number);\n    const _0x56a279 = [new Array(_0x757d9c)['fill'](0x0)];\n    for (let _0x4a39ed = 0x0; _0x4a39ed < _0x3ee8ec; _0x4a39ed++)\n        _0x56a279['push']([]);\n    for (let _0x4ec3ba = 0x0; _0x4ec3ba < _0x3ee8ec; _0x4ec3ba++) {\n        for (let _0x47cb63 = 0x0; _0x47cb63 < _0x757d9c; _0x47cb63++) {\n            const _0x41149a = _0x56a279[_0x4ec3ba][_0x47cb63];\n            _0x56a279[_0x4ec3ba + 0x1][_0x1e0e27[_0x47cb63]] = _0x41149a + _0x4411e5[_0x1e0e27[_0x47cb63]];\n        }\n    }\n    let _0x4160c9 = -Infinity;\n    for (let _0x53780e = 0x1; _0x53780e < _0x56a279['length']; _0x53780e++)\n        _0x4160c9 = Math['max'](_0x4160c9, Math['max'](..._0x56a279[_0x53780e]));\n    return console['log'](_0x4160c9);\n};\nprocess['env']['MYTEST'] ? test() : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2\n2 4 5 1 3\n3 4 -10 -8 8", "8"], ["2 3\n2 1\n10 -7", "13"], ["3 3\n3 1 2\n-1000 -2000 -3000", "-1000"], ["10 58\n9 1 6 7 8 4 3 2 10 5\n695279662 988782657 -119067776 382975538 -151885171 -177220596 -169777795 37619092 389386780 980092719", "29507023469"]], "original": "const main = (input) => {\n  input = input.trim().split('\\n')\n  const [n, k] = input[0].split(' ').map(Number)\n  const directions = input[1].split(' ').map(v => Number(v)-1)\n  const scoreList = input[2].split(' ').map(Number)\n\n  const ans = [new Array(n).fill(0)]\n  for (let i=0; i<k; i++) ans.push([])\n\n  for (let i=0; i<k; i++) {\n    for (let x=0; x<n; x++) {\n      const score = ans[i][x]\n      ans[i+1][directions[x]] = score + scoreList[directions[x]]\n    }\n  }\n\n  let max = -Infinity\n  for (let i=1; i<ans.length; i++) max = Math.max(max, Math.max(...ans[i]))\n  return console.log(max)\n}\n\nprocess.env.MYTEST ? test() : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02665_1", "type": "JavaScript", "obfuscated": "console['log']((_0x131874 => {\n    const [[_0x309c2f], _0x212fc7] = _0x131874['trim']()['split']('\\x0a')['map'](_0x424d02 => _0x424d02['split']('\\x20')['map'](_0x585171 => _0x585171 | 0x0));\n    const _0x114348 = [0x1 - _0x212fc7[0x0]];\n    for (let _0x2dce14 = 0x1; _0x2dce14 < _0x309c2f; _0x2dce14++)\n        _0x114348['push'](_0x114348[_0x2dce14 - 0x1] * 0x2 - _0x212fc7[_0x2dce14]);\n    _0x114348['push'](0x0);\n    let _0x5328c6 = BigInt(_0x212fc7[_0x309c2f]);\n    for (let _0x1cdc23 = _0x309c2f - 0x1; _0x1cdc23 >= 0x0; _0x1cdc23--) {\n        const _0x45d198 = _0x114348[_0x1cdc23 + 0x1] + _0x212fc7[_0x1cdc23 + 0x1];\n        if (_0x114348[_0x1cdc23] > _0x45d198)\n            _0x114348[_0x1cdc23] = _0x45d198;\n        else if (_0x114348[_0x1cdc23] * 0x2 < _0x45d198)\n            return '-1';\n        _0x5328c6 += BigInt(_0x114348[_0x1cdc23] + _0x212fc7[_0x1cdc23]);\n    }\n    return '' + _0x5328c6;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n0 1 1 2", "7"], ["4\n0 0 1 0 2", "10"], ["2\n0 3 1", "-1"], ["1\n1 1", "-1"], ["10\n0 0 1 1 2 3 5 8 13 21 34", "264"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0));\n  const a = [1-A[0]];\n  for ( let i = 1; i < N; i++ ) a.push(a[i-1] * 2 - A[i]);\n  a.push(0);\n  let n = BigInt(A[N]);\n  for ( let i = N-1; i >= 0; i-- ) {\n    const c = a[i+1] + A[i+1];\n    if ( a[i] > c ) a[i] = c;\n    else if ( a[i] * 2 < c ) return '-1';\n    n += BigInt(a[i] + A[i]);\n  }\n  return `${n}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p02787_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x2d2ab1) {\n    _0x2d2ab1 = _0x2d2ab1['trim']()['split']('\\x0a');\n    const _0x105746 = _0x2d2ab1[0x0]['split']('\\x20')['map'](_0x3ba784 => parseInt(_0x3ba784));\n    const _0x2b187b = _0x2d2ab1['slice'](0x1);\n    const _0x3f61cc = _0x105746[0x0];\n    const _0x21925b = _0x105746[0x1];\n    const _0x2d18c6 = [];\n    for (let _0x2e7d48 = 0x0; _0x2e7d48 < _0x2b187b['length']; ++_0x2e7d48) {\n        const _0x39a90e = _0x2b187b[_0x2e7d48]['split']('\\x20')['map'](_0x48815b => parseInt(_0x48815b));\n        _0x2d18c6['push']([\n            _0x39a90e[0x0],\n            _0x39a90e[0x1]\n        ]);\n    }\n    _0x2d18c6['sort']((_0x5244e6, _0xbf415) => _0x5244e6[0x0] - _0xbf415[0x0]);\n    let _0x5df720 = Array(_0x3f61cc + 0x1)['fill'](Infinity);\n    _0x5df720[0x0] = 0x0;\n    for (let _0x543c89 = 0x0; _0x543c89 < _0x21925b; ++_0x543c89) {\n        const _0x1f6436 = _0x2d18c6[_0x543c89][0x0];\n        const _0x48f58f = _0x2d18c6[_0x543c89][0x1];\n        for (let _0x3d664a = 0x0; _0x3d664a <= _0x3f61cc; ++_0x3d664a) {\n            const _0x5c5d18 = Math['min'](_0x3d664a + _0x1f6436, _0x3f61cc);\n            _0x5df720[_0x5c5d18] = Math['min'](_0x5df720[_0x5c5d18], _0x5df720[_0x3d664a] + _0x48f58f);\n        }\n    }\n    console['log'](_0x5df720[_0x3f61cc]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["9 3\n8 3\n4 2\n2 1", "4"], ["100 6\n1 1\n2 3\n3 9\n4 27\n5 81\n6 243", "100"], ["9999 10\n540 7550\n691 9680\n700 9790\n510 7150\n415 5818\n551 7712\n587 8227\n619 8671\n588 8228\n176 2461", "139815"]], "original": "'use strict'\n\nfunction Main(input) {\n  input = input.trim().split('\\n')\n  const array = input[0].split(' ').map(s => parseInt(s))\n  const rest = input.slice(1)\n  const H = array[0]\n  const N = array[1]\n\n  const magic = []\n  for(let i = 0; i < rest.length; ++i) {\n    const a = rest[i].split(' ').map(s => parseInt(s))\n    magic.push([a[0], a[1]])\n  }\n  magic.sort((a, b) => a[0] - b[0])\n\n  let dp = Array(H+1).fill(Infinity)\n\n  dp[0] = 0\n  for(let i = 0; i < N; ++i) {\n    const w = magic[i][0]\n    const v = magic[i][1]\n    for(let j = 0; j <= H; ++j) {\n      \n      const min = Math.min(j + w, H)\n\n      dp[min] = Math.min(dp[min], dp[j] + v) \n    }\n\n    // console.log(`${i}までの魔法を利用`)\n    // console.log(dp)\n    // console.log('^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')\n  }\n  \n  console.log(dp[H])\n  \n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02984_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x472c2e => {\n    _0x472c2e = _0x472c2e['trim']()['split']('\\x0a');\n    const _0x1f9171 = parseInt(_0x472c2e[0x0]);\n    const _0x3a2133 = _0x472c2e[0x1]['split']('\\x20')['map'](_0x4c140b => parseInt(0x2 * _0x4c140b));\n    let _0x36bdbd = 0x0;\n    for (let _0x2ad769 = 0x0; _0x2ad769 < _0x1f9171; _0x2ad769++) {\n        _0x36bdbd = _0x3a2133[_0x2ad769] - _0x36bdbd;\n    }\n    let _0x2a582a = _0x36bdbd / 0x2;\n    let _0xe8d508 = _0x2a582a;\n    let _0x3feab4 = [];\n    for (let _0x198d09 = 0x0; _0x198d09 < _0x1f9171; _0x198d09++) {\n        _0x3feab4['push'](_0xe8d508);\n        _0xe8d508 = _0x3a2133[_0x198d09] - _0xe8d508;\n    }\n    console['log'](_0x3feab4['join']('\\x20'));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n2 2 4", "4 0 4"], ["5\n3 8 7 5 5", "2 4 12 2 8"], ["3\n1000000000 1000000000 0", "0 2000000000 0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const A = arg[1].split(\" \").map(n=>parseInt(2 * n));\n    \n    let offset = 0;\n    \n    for(let i=0; i<N; i++) {\n        offset = A[i] - offset;\n    }\n    \n    let x = offset / 2;\n    \n    let cur = x;\n    \n    let answer = [];\n    \n    for(let i=0; i<N; i++) {\n        answer.push(cur);\n        cur = A[i] - cur;\n    }\n    \n    console.log(answer.join(\" \"));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03050_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x26f379) {\n    const _0xf17b37 = parseInt(_0x26f379);\n    let _0x2ca8ff = 0x0;\n    for (let _0x305ff1 = 0x1; _0x305ff1 * _0x305ff1 < _0xf17b37; _0x305ff1++) {\n        const _0x13fce2 = _0x305ff1 - 0x1;\n        if (_0x13fce2 !== 0x0 && _0xf17b37 % _0x13fce2 === Math['trunc'](_0xf17b37 / _0x13fce2)) {\n            _0x2ca8ff += _0x13fce2;\n        }\n        const _0x48270c = Math['trunc'](_0xf17b37 / _0x305ff1) - 0x1;\n        if (_0xf17b37 % _0x48270c === _0x305ff1) {\n            _0x2ca8ff += _0x48270c;\n        }\n    }\n    console['log'](_0x2ca8ff);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8", "10"], ["1000000000000", "2499686339916"]], "original": "\"use strict\";\nfunction Main(input) {\n  const N = parseInt(input);\n  let ret = 0;\n  for (let i = 1; (i * i) < N; i++) {\n    const ic = i - 1;\n    if (ic !== 0 && (N % ic) === Math.trunc(N / ic)) {\n      ret += ic;\n    }\n    const j =Math.trunc(N / i) - 1;\n    if ((N % j) === i) {\n      ret += j;\n    }\n  }\n  console.log(ret);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03088_1", "type": "JavaScript", "obfuscated": "const main = _0x493d0a => {\n    const _0x24e9d6 = Number(_0x493d0a);\n    console['log'](calc(_0x24e9d6, '', 0x0));\n};\nvar map = {};\nvar w = [\n    'A',\n    'C',\n    'G',\n    'T'\n];\nfunction calc(_0x5f3075, _0x4220e8, _0x30b0a4) {\n    var _0x219c90 = _0x4220e8 + '_' + _0x30b0a4;\n    if (map[_0x219c90])\n        return map[_0x219c90];\n    if (_0x30b0a4 == _0x5f3075) {\n        return 0x1;\n    }\n    var _0x5d2e5b = 0x0;\n    for (var _0x27ac77 = 0x0; _0x27ac77 < 0x4; _0x27ac77++) {\n        var _0x116b15 = _0x4220e8 + w[_0x27ac77];\n        var _0x1b8d8c = _0x116b15['slice'](-0x3);\n        var _0x3ed84f = _0x116b15['slice'](-0x4);\n        if (_0x1b8d8c[0x0] + _0x1b8d8c[0x1] + _0x1b8d8c[0x2] != 'AGC' && _0x1b8d8c[0x0] + _0x1b8d8c[0x2] + _0x1b8d8c[0x1] != 'AGC' && _0x1b8d8c[0x1] + _0x1b8d8c[0x0] + _0x1b8d8c[0x2] != 'AGC' && _0x3ed84f[0x0] + _0x3ed84f[0x1] + _0x3ed84f[0x3] != 'AGC' && _0x3ed84f[0x0] + _0x3ed84f[0x2] + _0x3ed84f[0x3] != 'AGC') {\n            _0x5d2e5b += calc(_0x5f3075, _0x116b15['slice'](-0x4), _0x30b0a4 + 0x1);\n            _0x5d2e5b %= 0x3b9aca07;\n        }\n    }\n    map[_0x219c90] = _0x5d2e5b;\n    return _0x5d2e5b;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'UTF-8'));", "test_cases": [["3", "61"], ["4", "230"], ["100", "388130742"]], "original": "const main = (input) => {\n  const N = Number(input);\n\n  console.log(calc(N, \"\", 0));\n}\n\nvar map = {}; // 最後の4文字+文字数\nvar w = ['A','C','G','T'];\nfunction calc(N, lst4, cnt){\n  var key = lst4 + \"_\" + cnt;\n  if(map[key]) return map[key];\n  if(cnt == N) {\n//    console.log(lst4);\n    return 1;\n  }\n  var ans = 0;\n  for(var i=0;i<4;i++){\n    var next = lst4+w[i];\n    var next3 = (next).slice(-3);\n    var next4 = (next).slice(-4);\n    if(\n      next3[0]+next3[1]+next3[2] != 'AGC' &&\n      next3[0]+next3[2]+next3[1] != 'AGC' &&\n      next3[1]+next3[0]+next3[2] != 'AGC' &&\n\n      next4[0]+next4[1]+next4[3] != 'AGC' &&\n      next4[0]+next4[2]+next4[3] != 'AGC'\n    ){\n      ans += calc(N, next.slice(-4), cnt+1);\n      ans %= 1000000007;\n    }\n  }\n  map[key] = ans;\n  return ans;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'UTF-8'));\n", "language": "JavaScript"}
{"filename": "p03157_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5707d3 => {\n    const [_0x5e84c5, ..._0x4ab93b] = _0x5707d3['trim']()['split']('\\x0a');\n    const [_0x55c34f, _0x25c24d] = _0x5e84c5['split']('\\x20')['map'](_0x372f80 => parseInt(_0x372f80));\n    const _0x2917b3 = Array['from']({ 'length': _0x55c34f }, _0x3842b9 => Array(_0x25c24d)['fill'](![]));\n    const _0x50b5e5 = [\n        [\n            -0x1,\n            0x0\n        ],\n        [\n            0x0,\n            -0x1\n        ],\n        [\n            0x1,\n            0x0\n        ],\n        [\n            0x0,\n            0x1\n        ]\n    ];\n    let _0x4f510c = 0x0;\n    for (let _0x34c39c = 0x0; _0x34c39c < _0x55c34f; _0x34c39c++) {\n        for (let _0x4bf812 = 0x0; _0x4bf812 < _0x25c24d; _0x4bf812++) {\n            if (_0x2917b3[_0x34c39c][_0x4bf812])\n                continue;\n            const _0x306fdb = [[\n                    _0x34c39c,\n                    _0x4bf812\n                ]];\n            _0x2917b3[_0x34c39c][_0x4bf812] = !![];\n            let _0x344aa5 = _0x4ab93b[_0x34c39c][_0x4bf812] === '.' | 0x0, _0x2921eb = _0x344aa5 ^ 0x1;\n            while (_0x306fdb['length']) {\n                const [_0x48269a, _0x520861] = _0x306fdb['pop']();\n                for (const [_0x579cda, _0x2794f7] of _0x50b5e5) {\n                    const _0x1915ce = _0x48269a + _0x579cda, _0x284583 = _0x520861 + _0x2794f7;\n                    if (_0x1915ce < 0x0 || _0x55c34f <= _0x1915ce || _0x284583 < 0x0 || _0x25c24d <= _0x284583 || _0x2917b3[_0x1915ce][_0x284583] || _0x4ab93b[_0x48269a][_0x520861] === _0x4ab93b[_0x1915ce][_0x284583])\n                        continue;\n                    _0x2917b3[_0x1915ce][_0x284583] = !![];\n                    if (_0x4ab93b[_0x1915ce][_0x284583] === '#')\n                        _0x2921eb++;\n                    else\n                        _0x344aa5++;\n                    _0x306fdb['push']([\n                        _0x1915ce,\n                        _0x284583\n                    ]);\n                }\n            }\n            _0x4f510c += _0x344aa5 * _0x2921eb;\n        }\n    }\n    return '' + _0x4f510c;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3 3\n.#.\n..#\n#..", "10"], ["2 4\n....\n....", "0"], ["4 3\n###\n###\n...\n###", "6"]], "original": "console.log((args=>{\n  const [HW,...S] = args.trim().split('\\n');\n  const [H,W] = HW.split(' ').map(v=>parseInt(v));\n  const trail = Array.from({length:H},_=>Array(W).fill(false));\n  const dir = [[-1,0],[0,-1],[1,0],[0,1]];\n  let p = 0;\n  for ( let i = 0; i < H; i++ ) {\n    for ( let j = 0; j < W; j++ ) {\n      if ( trail[i][j] ) continue;\n      const stack = [[i,j]];\n      trail[i][j] = true;\n      let w = S[i][j]==='.'|0, b = w^1;\n      while ( stack.length ) {\n        const [x,y] = stack.pop();\n        for ( const [dx,dy] of dir ) {\n          const nx = x+dx, ny = y+dy;\n          if ( nx < 0 || H <= nx || ny < 0 || W <= ny\n            || trail[nx][ny] || S[x][y] === S[nx][ny] ) continue;\n          trail[nx][ny] = true;\n          if ( S[nx][ny] === '#' ) b++; else w++;\n          stack.push([nx,ny]);\n        }\n      }\n      p += w * b;\n    }\n  }\n  return `${p}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03186_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x38b649) {\n    _0x38b649 = _0x38b649['trim']()['split']('\\x20')['map'](Number);\n    let _0x480787 = _0x38b649[0x0];\n    let _0x6752fd = _0x38b649[0x1];\n    let _0x3a38a5 = _0x38b649[0x2];\n    for (; _0x6752fd > 0x0 && _0x3a38a5 > 0x0;) {\n        _0x6752fd--;\n        _0x3a38a5--;\n    }\n    if (_0x3a38a5 == 0x0) {\n        _0x6752fd = 0x0;\n    } else {\n        for (; _0x480787 > 0x0 && _0x3a38a5 > 0x0;) {\n            _0x480787--;\n            _0x3a38a5--;\n        }\n    }\n    if (_0x3a38a5 > 0x0) {\n        _0x3a38a5--;\n    }\n    console['log'](_0x38b649[0x1] + _0x38b649[0x2] - (_0x6752fd + _0x3a38a5));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 1 4", "5"], ["5 2 9", "10"], ["8 8 1", "9"]], "original": "'use strict';\n\nfunction Main(input) {\n\n  input = input.trim().split(\" \").map(Number);\n  let badKusuri = input[0];\n  let goodKusuri = input[1];\n  let goodPoison = input[2];\n  \n  for(;(goodKusuri>0)&&(goodPoison>0);){\n  \tgoodKusuri--;\n    goodPoison--;\n  }\n  \n  if(goodPoison == 0){\n  \tgoodKusuri = 0;\n  } else {\n  \tfor(;(badKusuri>0)&&(goodPoison>0);){\n  \t\tbadKusuri--;\n      \tgoodPoison--;\n  \t}\n  }\n  \n  if(goodPoison > 0){\n  \tgoodPoison--;\n  }\n  \n  console.log((input[1] + input[2]) - (goodKusuri + goodPoison));\n  \n  \n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03319_1", "type": "JavaScript", "obfuscated": "function Main(_0x4ea607) {\n    var _0x5537dd = _0x4ea607['split']('\\x0a');\n    var _0x44dc32 = _0x5537dd[0x0]['split']('\\x20');\n    var _0x335a2f = parseInt(_0x44dc32[0x0], 0xa);\n    var _0x912553 = parseInt(_0x44dc32[0x1], 0xa);\n    var _0x4f3ada = _0x5537dd[0x1]['split']('\\x20')['map'](_0x41246d => parseInt(_0x41246d, 0xa));\n    var _0x33172d = _0x4f3ada['indexOf'](0x1);\n    var _0x5140ea = Math['ceil'](_0x33172d / (_0x912553 - 0x1));\n    var _0x1b60e1 = Math['ceil']((_0x335a2f - _0x33172d - 0x1) / (_0x912553 - 0x1));\n    console['log'](_0x5140ea + _0x1b60e1);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 3\n2 3 1 4", "2"], ["3 3\n1 2 3", "1"], ["8 3\n7 3 1 8 4 6 2 5", "4"]], "original": "function Main(input) {\n    var NKA = input.split('\\n')\n    var NK = NKA[0].split(' ')\n    var N = parseInt(NK[0], 10)\n    var K = parseInt(NK[1], 10)\n    var A = NKA[1].split(' ').map(v => parseInt(v, 10))\n\n    var minPoint = A.indexOf(1)\n    var left = Math.ceil(minPoint / (K - 1))\n    var right = Math.ceil((N - minPoint - 1) / (K - 1))\n    \n    console.log(left + right);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03427_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x10d6dc => {\n    const _0x32f502 = _0x10d6dc['split']('\\x0a');\n    if (_0x32f502[0x0]['length'] === 0x1) {\n        console['log'](_0x32f502[0x0]);\n        return;\n    }\n    const _0xb2899a = _0x32f502[0x0]['length'] - 0x1;\n    const _0x516a55 = parseInt(_0x32f502[0x0][0x0]) - 0x1;\n    console['log'](_0x516a55 + _0xb2899a * 0x9);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["100", "18"], ["9995", "35"], ["3141592653589793", "137"]], "original": "\"use strict\"\n\nconst main = (input) => {\n  const lines = input.split(\"\\n\")\n  if (lines[0].length === 1) {\n    console.log(lines[0])\n    return\n  }\n  const len9 = lines[0].length - 1\n  const head = parseInt(lines[0][0]) - 1\n  console.log(head + len9 * 9)\n}\n\nmain (require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p03545_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar lines = require('fs')['readFileSync'](0x0, 'utf8')['split']('\\x0a');\nvar str = lines[0x0];\nvar n = str['length'] - 0x1;\nvar dfs = (_0x33651a, _0x549042, _0x1fe61c) => {\n    if (_0x33651a === n)\n        return eval(_0x1fe61c + str[n]) == 0x7 ? _0x1fe61c + str[n] : '';\n    var _0x494734 = dfs(_0x33651a + 0x1, _0x549042, _0x1fe61c + str[_0x33651a] + '+');\n    return _0x494734 ? _0x494734 : dfs(_0x33651a + 0x1, _0x549042, _0x1fe61c + str[_0x33651a] + '-');\n};\nvar ans = dfs(0x0, 0x0, '');\nconsole['log'](ans ? ans + '=7' : '');", "test_cases": [["1222", "1+2+2+2=7"], ["0290", "0-2+9+0=7"], ["3242", "3+2+4-2=7"]], "original": "'use strict'\nvar lines = require('fs').readFileSync(0, 'utf8').split('\\n')\nvar str = lines[0]\nvar n = str.length - 1;\nvar dfs = (i, sum, order) => {\n  if (i === n) return eval(order + str[n]) == 7 ? order + str[n] : '';\n  var temp = dfs(i + 1, sum, order + str[i] + '+')\n  return  temp ? temp : dfs(i + 1, sum, order + str[i] + '-');\n}\n\nvar ans = dfs(0, 0, '');\nconsole.log(ans ? ans + '=7' : '');", "language": "JavaScript"}
{"filename": "p03591_1", "type": "JavaScript", "obfuscated": "function Main(_0x3b0faa) {\n    if (_0x3b0faa['substr'](0x0, 0x4) == 'YAKI') {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["YAKINIKU", "Yes"], ["TAKOYAKI", "No"], ["YAK", "No"]], "original": "function Main(input) {\n\tif(input.substr(0,4)==\"YAKI\"){\n\t\tconsole.log(\"Yes\")\n\t}else{\n\t\tconsole.log(\"No\")\n\t}\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03797_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst create = () => {\n    const _0x1a3bb1 = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\n    const _0x34dbc4 = {\n        'list': _0x1a3bb1,\n        'index': 0x0,\n        'max': _0x1a3bb1['length'],\n        'hasNext': function () {\n            return this['index'] < this['max'];\n        },\n        'next': function () {\n            if (!this['hasNext']()) {\n                throw 'ArrayIndexOutOfBoundsException';\n            } else {\n                return this['list'][this['index']++];\n            }\n        }\n    };\n    return _0x34dbc4;\n};\nconst o = create();\nconst next = () => o['next']();\nconst nextInt = () => parseInt(o['next']());\nconst nextStrArray = () => o['next']()['split']('\\x20');\nconst nextIntArray = () => o['next']()['split']('\\x20')['map'](_0x194607 => parseInt(_0x194607));\nconst nextCharArray = () => o['next']()['split']('');\nconst hasNext = () => o['hasNext']();\nconst myout = (..._0x16e0f8) => console['log'](..._0x16e0f8);\nconst Main = () => {\n    const [_0x5a2e02, _0x3f01e5] = nextIntArray();\n    let _0x530534 = _0x3f01e5 <= 0x2 * _0x5a2e02 ? Math['floor'](M / 0x2) : Math['floor']((0x2 * _0x5a2e02 + _0x3f01e5) / 0x4);\n    console['log'](_0x530534);\n};\nMain();", "test_cases": [["1 6", "2"], ["12345 678901", "175897"]], "original": "\"use strict\"\nconst create = () => {\n    const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\");\n    const res = {\n        \"list\": input, \"index\": 0, \"max\": input.length,\n        \"hasNext\": function () { return this.index < this.max },\n        \"next\": function () { if (!this.hasNext()) { throw \"ArrayIndexOutOfBoundsException\"; } else { return this.list[this.index++]; } }\n    };\n    return res;\n}\nconst o = create();\nconst next = () => o.next()\nconst nextInt = () => parseInt(o.next())\nconst nextStrArray = () => o.next().split(\" \")\nconst nextIntArray = () => o.next().split(\" \").map(el => parseInt(el))\nconst nextCharArray = () => o.next().split(\"\")\nconst hasNext = () => o.hasNext()\nconst myout = (...x) => console.log(...x)\nconst Main = () => {\n    const [n, m] = nextIntArray()\n    let ans = m <= 2 * n ? Math.floor(M / 2) : Math.floor((2 * n + m) / 4)\n    console.log(ans)\n}\nMain()\n", "language": "JavaScript"}
{"filename": "p01093_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['trim']()['split']('\\x0a');\nwhile (line = lines['shift']()) {\n    const numbers = line['split']('\\x20')['map'](Number);\n    if (numbers['length'] > 0x1) {\n        const diffList = [];\n        numbers['map']((_0xfe0b6f, _0x47d83f) => {\n            numbers['map']((_0x263ffc, _0x487468) => {\n                if (_0x47d83f !== _0x487468) {\n                    const _0x15cc9b = Math['abs'](_0xfe0b6f - _0x263ffc);\n                    const _0x13c9f2 = _0xfe0b6f + '\\x20' + _0x263ffc;\n                    diffList['push']([\n                        _0x13c9f2,\n                        _0x15cc9b\n                    ]);\n                }\n            });\n        });\n        const sorted = diffList['sort']((_0x5f52cc, _0x2a9b74) => _0x5f52cc[0x1] - _0x2a9b74[0x1])[0x0];\n        console['log'](sorted[0x1]);\n    }\n}", "test_cases": [["5\n10 10 10 10 10\n5\n1 5 8 9 11\n7\n11 34 83 47 59 29 70\n0", "0\n1\n5"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8');\n \nconst lines = input.trim().split('\\n');\n \nwhile (line = lines.shift()) {\n \n    const numbers = line.split(' ').map(Number);\n\n    if(numbers.length > 1){\n        const diffList = [];\n \n        numbers.map((num1, ind1) => {\n            numbers.map((num2, ind2) => {\n                if (ind1 !== ind2) {\n                    const diff = Math.abs(num1 - num2);\n                    const pair = `${num1} ${num2}`;\n                    diffList.push([pair, diff]);\n                }\n            })\n        })\n \n        const sorted = diffList.sort((p1, p2) => p1[1] - p2[1])[0];\n        console.log(sorted[1]);\n    }\n}\n", "language": "JavaScript"}
{"filename": "p02242_1", "type": "JavaScript", "obfuscated": "console['log']('0\\x200');\nconsole['log']('1\\x202');\nconsole['log']('2\\x202');\nconsole['log']('3\\x201');\nconsole['log']('4\\x203');", "test_cases": [["5\n0 3 2 3 3 1 1 2\n1 2 0 2 3 4\n2 3 0 3 3 1 4 1\n3 4 2 1 0 1 1 4 4 3\n4 2 2 1 3 3", "0 0\n1 2\n2 2\n3 1\n4 3"]], "original": "console.log(\"0 0\");\nconsole.log(\"1 2\");\nconsole.log(\"2 2\");\nconsole.log(\"3 1\");\nconsole.log(\"4 3\");", "language": "JavaScript"}
{"filename": "p02421_1", "type": "JavaScript", "obfuscated": "var input = '';\nvar readable = process['stdin'];\nreadable['resume']();\nreadable['setEncoding']('utf-8');\nreadable['on']('data', function (_0x48ca7d) {\n    input += _0x48ca7d;\n});\nreadable['on']('end', function () {\n    var _0x4e9a98 = input['split']('\\x0a');\n    var _0x303bd8 = _0x4e9a98[0x0];\n    var _0x188044 = 0x0;\n    var _0x2ad86b = 0x0;\n    for (var _0x11a541 = 0x1; _0x11a541 < _0x4e9a98['length']; _0x11a541++) {\n        var _0x4f6238 = _0x4e9a98[_0x11a541]['split']('\\x20');\n        if (_0x4f6238[0x0] < _0x4f6238[0x1]) {\n            _0x2ad86b += 0x3;\n        } else if (_0x4f6238[0x1] < _0x4f6238[0x0]) {\n            _0x188044 += 0x3;\n        } else {\n            _0x2ad86b += 0x1;\n            _0x188044 += 0x1;\n        }\n    }\n    console['log'](_0x188044 + '\\x20' + _0x2ad86b);\n});", "test_cases": [["3\ncat dog\nfish fish\nlion tiger", "1 7"]], "original": "var input = '';\nvar readable = process.stdin;\nreadable.resume();\nreadable.setEncoding( 'utf-8' );\nreadable.on( 'data', function( chunk ) {\n  input += chunk;\n});\n\nreadable.on( 'end', function() {\n  var data = input.split( \"\\n\" );\n  var n = data[0];\n  var tscore = 0;\n  var hscore = 0;\n  for( var i=1; i<data.length; i++ ) {\n    var taha = data[i].split( ' ' );\n    if( taha[0] < taha[1] ) {\n      hscore += 3;\n    } else if( taha[1] < taha[0] ) {\n      tscore += 3;\n    } else {\n      hscore += 1;\n      tscore += 1;\n    }\n  }\n  console.log( tscore+' '+hscore );  \n});", "language": "JavaScript"}
{"filename": "p02534_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['split']('\\x0a');\nlet K = lines[0x0]['trim']() - 0x0;\nlet ans = '';\nfor (let i = 0x0; i < K; i++) {\n    ans += 'ACL';\n}\nconsole['log'](ans);", "test_cases": [["3", "ACLACLACL"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nconst lines = input.split('\\n')\nlet K = lines[0].trim() - 0\n\nlet ans = ''\n\nfor (let i = 0; i < K; i++) {\n    ans += 'ACL'\n}\n\nconsole.log(ans)\n", "language": "JavaScript"}
{"filename": "p02631_1", "type": "JavaScript", "obfuscated": "const [n, aStr] = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\n/);\nlet as = aStr['split'](/\\s/)['map'](Number);\nlet total = as['reduce']((_0xbf89ac, _0x1bcb45) => _0xbf89ac ^ _0x1bcb45);\nconsole['log'](as['map'](_0x50826b => _0x50826b ^ total)['join']('\\x20'));", "test_cases": [["4\n20 11 9 24", "26 5 7 22"]], "original": "const [n, aStr] = require('fs').readFileSync('/dev/stdin', 'utf8').split(/\\n/)\nlet as = aStr.split(/\\s/).map(Number)\nlet total = as.reduce((a, b) => a ^ b)\nconsole.log(as.map(n => n ^ total).join(' '))", "language": "JavaScript"}
{"filename": "p02793_1", "type": "JavaScript", "obfuscated": "console['log']((_0x321470 => {\n    const [[_0x843f1d], _0x35ed5b] = _0x321470['trim']()['split']`\\n`['map'](_0x1dc44f => _0x1dc44f['split']` `['map'](_0x493f20 => 0x0 | _0x493f20));\n    const _0x3e9ff7 = 0x3b9aca00 + 0x7, _0x342172 = Math['max'](..._0x35ed5b);\n    const _0x113277 = (_0x14085a, _0x3e7e03) => ((_0x14085a >> 0x10) * _0x3e7e03 % _0x3e9ff7 * 0x10000 + (_0x14085a & 0xffff) * _0x3e7e03) % _0x3e9ff7;\n    const _0x8509d = Array(0xf4240 + 0x1)['fill'](!![]);\n    const _0x82ac5d = new Map();\n    for (let _0x314576 = 0x2; _0x314576 <= _0x342172; _0x314576++) {\n        if (!_0x8509d[_0x314576])\n            continue;\n        for (let _0x4840ba = _0x314576 + _0x314576; _0x4840ba <= _0x342172; _0x4840ba = _0x4840ba + _0x314576)\n            _0x8509d[_0x4840ba] = ![];\n        _0x82ac5d['set'](_0x314576, 0x0);\n    }\n    const _0xdc5680 = [];\n    for (let _0x24e079 = 0x0; _0x24e079 < _0x843f1d; _0x24e079++) {\n        let _0x203883 = _0x35ed5b[_0x24e079];\n        _0xdc5680['push'](new Map());\n        for (const [_0x3a618d, _0x953c6] of _0x82ac5d) {\n            if (_0x203883 === 0x1)\n                break;\n            let _0x27dfb7 = 0x0;\n            while (_0x203883 % _0x3a618d === 0x0) {\n                _0x203883 /= _0x3a618d;\n                _0x27dfb7++;\n            }\n            if (_0x27dfb7)\n                _0xdc5680[_0x24e079]['set'](_0x3a618d, _0x27dfb7);\n            if (_0x27dfb7 > _0x953c6)\n                _0x82ac5d['set'](_0x3a618d, _0x27dfb7);\n        }\n    }\n    let _0x3ce3e7 = 0x0;\n    for (let _0x4c436a = 0x0; _0x4c436a < _0x843f1d; _0x4c436a++) {\n        let _0x1fee2b = 0x1;\n        for (const [_0x281062, _0x3defc9] of _0x82ac5d) {\n            if (!_0x3defc9)\n                continue;\n            _0x1fee2b = _0x113277(_0x1fee2b, _0x281062 ** (_0x3defc9 - (_0xdc5680[_0x4c436a]['get'](_0x281062) | 0x0)));\n        }\n        _0x3ce3e7 = (_0x3ce3e7 + _0x1fee2b) % _0x3e9ff7;\n    }\n    return _0x3ce3e7;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n2 3 4", "13"], ["5\n12 12 12 12 12", "5"], ["3\n1000000 999999 999998", "996989508"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>0|v));\n  const MOD = 1e9+7, MAX = Math.max(...A);\n  const mul = (a,b) => ((a>>16)*b%MOD*65536+(a&65535)*b)%MOD;\n  const isP = Array(1e6+1).fill(true);\n  const px = new Map();\n  for ( let p = 2; p <= MAX; p++ ) {\n    if ( !isP[p] ) continue;\n    for ( let i = p+p; i <= MAX; i=i+p ) isP[i] = false;\n    px.set(p,0);\n  }\n  const ap = [];\n  for ( let i = 0; i < N; i++ ) {\n    let a = A[i];\n    ap.push(new Map());\n    for ( const [p,x] of px ) {\n      if ( a === 1 )break;\n      let s = 0;\n      while ( a % p === 0 ) {\n        a/=p;\n        s++;\n      }\n      if ( s ) ap[i].set(p,s);\n      if ( s > x ) px.set(p,s);\n    }\n  }\n  let sum = 0;\n  for ( let i = 0; i < N; i++ ) {\n    let B = 1;\n    for ( const [p,q] of px ) {\n      if ( !q ) continue;\n      B = mul( B, p ** (q-(ap[i].get(p)|0)) );\n    }\n    sum = ( sum + B ) % MOD;\n  }\n  return sum;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p02928_1", "type": "JavaScript", "obfuscated": "function Main(_0x45da87) {\n    _0x45da87 = _0x45da87['split']('\\x0a');\n    const _0x113902 = _0x45da87[0x0]['split']('\\x20');\n    const _0x5365e6 = parseInt(_0x113902[0x0]);\n    const _0x25a5e0 = parseInt(_0x113902[0x1]);\n    const _0x15b90d = _0x45da87[0x1]['split']('\\x20')['map'](_0x32aec3 => parseInt(_0x32aec3));\n    var _0x41a98a = 0x0;\n    for (i = 0x0; i < _0x5365e6; i++) {\n        var _0x459900 = _0x15b90d['slice'](i + 0x1)['filter'](_0x18fb05 => _0x18fb05 < _0x15b90d[i])['length'];\n        var _0x2edba0 = _0x15b90d['filter'](_0x11add1 => _0x11add1 < _0x15b90d[i])['length'];\n        _0x41a98a += _0x459900 * _0x25a5e0 % (0x3b9aca00 + 0x7);\n        _0x41a98a += _0x2edba0 * (_0x25a5e0 - 0x1) * _0x25a5e0 / 0x2 % (0x3b9aca00 + 0x7);\n        _0x41a98a = _0x41a98a % (0x3b9aca00 + 0x7);\n    }\n    console['log'](_0x41a98a);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2\n2 1", "3"], ["3 5\n1 1 1", "0"], ["10 998244353\n10 9 8 7 5 6 3 4 2 1", "185297239"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst input1 = input[0].split(\" \")\n\tconst N = parseInt(input1[0])\n\tconst K = parseInt(input1[1])\n\tconst As = input[1].split(\" \").map(x => parseInt(x))\n\n\tvar count = 0\n\tfor(i=0; i < N; i++){\n\t\tvar u = As.slice(i+1).filter(x => x < As[i]).length\n\t\tvar v = As.filter(x => x < As[i]).length\n\t\tcount += (u * K) % (1000000000 + 7);\n\t\tcount += (v * (K-1)*K / 2) % (1000000000 + 7);\n\t\tcount = count % (1000000000 + 7);\n\t}\n\n\tconsole.log(count)\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03128_1", "type": "JavaScript", "obfuscated": "function main(_0x1d2fa6) {\n    var _0x58898d = _0x1d2fa6[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x117331 = _0x1d2fa6[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x5a7595 = [\n        0x0,\n        0x2,\n        0x5,\n        0x5,\n        0x4,\n        0x5,\n        0x6,\n        0x3,\n        0x7,\n        0x6\n    ];\n    var _0x33cba3 = _0x1d2fa6[0x1]['split']('\\x20')['map'](_0x3349fb => {\n        return {\n            'val': _0x3349fb,\n            'num': _0x5a7595[_0x3349fb - 0x0]\n        };\n    });\n    var _0x688add = '';\n    var _0x120ae6 = [];\n    _0x120ae6[0x0] = '';\n    for (var _0x2b2ba7 = 0x1; _0x2b2ba7 <= _0x58898d; _0x2b2ba7++) {\n        for (var _0x259621 = 0x0; _0x259621 < _0x117331; _0x259621++) {\n            var _0x5a66ef = _0x33cba3[_0x259621];\n            if (_0x120ae6[_0x2b2ba7 - _0x5a66ef['num']] !== undefined) {\n                var _0x397080 = (_0x120ae6[_0x2b2ba7 - _0x5a66ef['num']] ? _0x120ae6[_0x2b2ba7 - _0x5a66ef['num']] : '') + _0x5a66ef['val'];\n                if (_0x120ae6[_0x2b2ba7] === undefined || diff(_0x397080, _0x120ae6[_0x2b2ba7]) > 0x0) {\n                    _0x120ae6[_0x2b2ba7] = _0x397080;\n                }\n            }\n        }\n    }\n    console['log'](_0x120ae6[_0x58898d]);\n}\nfunction diff(_0x58d8c9, _0x53bac2) {\n    if (_0x58d8c9['length'] != _0x53bac2['length'])\n        return _0x58d8c9['length'] - _0x53bac2['length'];\n    for (var _0xc6ede9 = 0x0; _0xc6ede9 < _0x58d8c9['length']; _0xc6ede9++) {\n        if (_0x58d8c9[_0xc6ede9] != _0x53bac2[_0xc6ede9])\n            return _0x58d8c9[_0xc6ede9] - _0x53bac2[_0xc6ede9];\n    }\n    return 0x0;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["20 4\n3 7 8 4", "777773"], ["101 9\n9 8 7 6 5 4 3 2 1", "71111111111111111111111111111111111111111111111111"], ["15 3\n5 4 6", "654"]], "original": "function main(input) {\n  var n = input[0].split(\" \")[0]-0;\n  var m = input[0].split(\" \")[1]-0;\n  var nummap = [0,2,5,5,4,5,6,3,7,6];\n  var mattis = input[1].split(\" \").map(v=>{return {val:v, num:nummap[v-0]}});\n  var ans = \"\";\n  var dp = [];\n  dp[0] = \"\";\n  for(var i=1;i<=n;i++){\n    for(var j=0;j<m;j++){\n      var matti = mattis[j];\n      if(dp[i-matti.num] !== undefined){\n        var tv = (dp[i-matti.num]?dp[i-matti.num]:\"\") + matti.val;\n        if(dp[i] === undefined || diff(tv, dp[i]) > 0){\n          dp[i] = tv;\n        }\n      }\n    }\n  }\n  console.log(dp[n]);\n}\nfunction diff(a, b){\n  if(a.length != b.length) return a.length-b.length;\n  for(var i=0;i<a.length;i++){\n    if(a[i]!=b[i]) return a[i]-b[i];\n  }\n  return 0;\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p03155_1", "type": "JavaScript", "obfuscated": "function Main(_0x2686ee) {\n    _0x2686ee = _0x2686ee['split']('\\x0a')['map'](Number);\n    console['log']((_0x2686ee[0x0] + 0x1 - _0x2686ee[0x1]) * (_0x2686ee[0x0] + 0x1 - _0x2686ee[0x2]));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n2\n3", "2"], ["100\n1\n1", "10000"], ["5\n4\n2", "8"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\").map(Number)\n\tconsole.log((input[0]+1-input[1])*(input[0]+1-input[2]));\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03167_1", "type": "JavaScript", "obfuscated": "function Main(_0x19d73a) {\n    _0x19d73a = _0x19d73a['trim']()['split']('\\x0a')['map'](function (_0x48a956) {\n        return _0x48a956['split']('\\x20');\n    });\n    let _0x51fe88 = 0x3b9aca00 + 0x7;\n    let _0x1cb2ec = parseInt(_0x19d73a[0x0][0x0], 0xa);\n    let _0x3cef6c = parseInt(_0x19d73a[0x0][0x1], 0xa);\n    let _0x49c848 = [];\n    for (let _0x2b2ccf = 0x0; _0x2b2ccf < _0x1cb2ec; _0x2b2ccf++) {\n        _0x49c848['push'](Array['from']({ 'length': _0x3cef6c }, () => 0x0));\n    }\n    _0x49c848[0x0][0x0] = 0x1;\n    for (let _0x45fc53 = 0x1; _0x45fc53 < _0x1cb2ec + _0x3cef6c - 0x1; _0x45fc53++) {\n        for (let _0x11f62e = 0x0; _0x11f62e <= Math['min'](_0x45fc53, _0x1cb2ec - 0x1); _0x11f62e++) {\n            if (_0x19d73a[_0x11f62e + 0x1][0x0][_0x45fc53 - _0x11f62e] === '#' || _0x45fc53 - _0x11f62e >= _0x3cef6c)\n                continue;\n            if (_0x11f62e > 0x0 && _0x45fc53 - _0x11f62e > 0x0) {\n                _0x49c848[_0x11f62e][_0x45fc53 - _0x11f62e] = (_0x49c848[_0x11f62e - 0x1][_0x45fc53 - _0x11f62e] + _0x49c848[_0x11f62e][_0x45fc53 - _0x11f62e - 0x1]) % _0x51fe88;\n            } else if (_0x11f62e > 0x0) {\n                _0x49c848[_0x11f62e][_0x45fc53 - _0x11f62e] = _0x49c848[_0x11f62e - 0x1][_0x45fc53 - _0x11f62e];\n            } else {\n                _0x49c848[_0x11f62e][_0x45fc53 - _0x11f62e] = _0x49c848[_0x11f62e][_0x45fc53 - _0x11f62e - 0x1];\n            }\n        }\n    }\n    console['log'](_0x49c848['pop']()['pop']());\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 4\n...#\n.#..\n....", "3"], ["5 2\n..\n#.\n..\n.#\n..", "0"], ["5 5\n..#..\n.....\n#...#\n.....\n..#..", "24"], ["20 20\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................\n....................", "345263555"]], "original": "\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n\tlet C = 1e9 + 7;\n\tlet H = parseInt(input[0][0], 10);\n\tlet W = parseInt(input[0][1], 10);\n\tlet DP = [];\n\tfor (let i = 0; i < H; i++){\n\t\tDP.push(Array.from({length: W}, () => 0));\n\t}\n\tDP[0][0] = 1;\n\tfor (let i = 1; i < H + W - 1; i ++){\n\t\tfor (let j = 0; j <= Math.min(i, H - 1); j++){\n\t\t\t// console.log(i, j);\n\t\t\tif (input[j + 1][0][i - j] === '#' || i - j >= W) continue;\n\t\t\tif (j > 0 && i - j > 0) {\n\t\t\t\tDP[j][i - j] = (DP[j - 1][i - j] + DP[j][i - j - 1]) % C;\n\t\t\t} else if (j > 0){\n\t\t\t\tDP[j][i - j] = DP[j - 1][i - j];\n\t\t\t} else {\n\t\t\t\tDP[j][i - j] = DP[j][i - j - 1];\n\t\t\t}\n\t\t\t// console.log(DP);\n\t\t}\n\t}\n\t// console.log(DP);\n\tconsole.log(DP.pop().pop());\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03193_1", "type": "JavaScript", "obfuscated": "function Main(_0x36312d) {\n    _0x36312d = _0x36312d['split']('\\x0a');\n    var _0x83cd1c = _0x36312d[0x0]['split']('\\x20')['map'](Number);\n    var _0x1bd828 = 0x0;\n    for (var _0x15d1a1 = 0x1; _0x15d1a1 < _0x36312d['length']; _0x15d1a1++) {\n        var _0x38e389 = _0x36312d[_0x15d1a1]['split']('\\x20')['map'](Number);\n        if (_0x38e389[0x0] >= _0x83cd1c[0x1] && _0x38e389[0x1] >= _0x83cd1c[0x2])\n            _0x1bd828++;\n    }\n    console['log'](_0x1bd828);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3 5 2\n10 3\n5 2\n2 5", "2"], ["10 587586158 185430194\n894597290 708587790\n680395892 306946994\n590262034 785368612\n922328576 106880540\n847058850 326169610\n936315062 193149191\n702035777 223363392\n11672949 146832978\n779291680 334178158\n615808191 701464268", "8"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar mem = input[0].split(\" \").map(Number);\n\tvar sum = 0;\n\tfor(var i=1;i<input.length;i++){\n\t\tvar n = input[i].split(\" \").map(Number);\n\t\tif(n[0]>=mem[1]&&n[1]>=mem[2]) sum++;\n\t}\n\tconsole.log(sum)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03504_1", "type": "JavaScript", "obfuscated": "function max(_0x5846ef) {\n    var _0x4d079a = -0x1 * Infinity;\n    for (num of _0x5846ef) {\n        if (_0x4d079a < num) {\n            _0x4d079a = num;\n        }\n    }\n    return _0x4d079a;\n}\nfunction main(_0x2148f7) {\n    const _0x180614 = _0x2148f7['split']('\\x0a');\n    const _0x5dbb24 = _0x180614['map'](_0x590f46 => _0x590f46['split']('\\x20')['map'](_0x27943a => parseInt(_0x27943a)));\n    var _0x35d4e9 = _0x5dbb24['shift']();\n    const _0x45d0a6 = _0x35d4e9[0x0];\n    const _0x160efd = _0x35d4e9[0x1];\n    const _0x28a01f = Array(0x30d42);\n    const _0x1bbeda = Array(0x30d42);\n    _0x1bbeda['fill'](0x0);\n    for (var _0x17d22e = 0x1; _0x17d22e <= _0x160efd; _0x17d22e++) {\n        _0x28a01f['fill'](0x0);\n        for (var _0x1e11d4 = 0x0; _0x1e11d4 < _0x45d0a6; _0x1e11d4++) {\n            if (_0x5dbb24[_0x1e11d4][0x2] == _0x17d22e) {\n                _0x28a01f[_0x5dbb24[_0x1e11d4][0x0] * 0x2 - 0x1]++;\n                _0x28a01f[_0x5dbb24[_0x1e11d4][0x1] * 0x2]--;\n            }\n        }\n        for (var _0x5e15e4 = 0x1; _0x5e15e4 < 0x30d42; _0x5e15e4++) {\n            _0x28a01f[_0x5e15e4] += _0x28a01f[_0x5e15e4 - 0x1];\n        }\n        for (var _0x5e15e4 = 0x1; _0x5e15e4 < 0x30d42; _0x5e15e4++) {\n            if (_0x28a01f[_0x5e15e4] > 0x0) {\n                _0x1bbeda[_0x5e15e4]++;\n            }\n        }\n    }\n    console['log'](max(_0x1bbeda));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n1 7 2\n7 8 1\n8 12 1", "2"], ["3 4\n1 3 2\n3 4 4\n1 4 3", "3"], ["9 4\n56 60 4\n33 37 2\n89 90 3\n32 43 1\n67 68 3\n49 51 3\n31 32 3\n70 71 1\n11 12 3", "2"]], "original": "function max(array){\n  var result = -1 * Infinity;\n  for(num of array){\n    if(result < num){result = num;}\n  }\n  return result;\n}\n\nfunction main(input){\n  const lines = input.split('\\n')\n  const nums = lines.map(line => line.split(' ').map(x => parseInt(x)));\n\n  var n_c= nums.shift();\n  const N = n_c[0];\n  const C = n_c[1];\n  const t = Array(200002);\n  const max_recorders = Array(200002);\n  max_recorders.fill(0);\n\n  for(var c=1;c<=C;c++){\n    t.fill(0)\n\n    for(var n=0;n<N;n++){\n      if(nums[n][2]==c){\n        t[nums[n][0]*2-1]++;\n        t[nums[n][1]*2]--;\n      }\n    }\n\n    for(var i=1;i<200002;i++){\n      t[i] += t[i-1];\n    }\n\n    for(var i=1;i<200002;i++){\n      if(t[i]>0){\n        max_recorders[i]++;\n      }\n    }\n\n\n  }\n\n//  console.log(nums);\n//  console.log(t);\n  console.log(max(max_recorders));\n//  console.log((max_recorders));\n}\n\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03575_1", "type": "JavaScript", "obfuscated": "function Main(_0x71b923) {\n    var _0x364b61 = _0x71b923[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x384a97 = _0x71b923[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x3fd41d = {};\n    for (var _0x5398d1 = 0x1; _0x5398d1 <= _0x384a97; _0x5398d1++) {\n        var _0x5ab2d8 = _0x71b923[_0x5398d1]['split']('\\x20')[0x0] - 0x0;\n        var _0x4d6c45 = _0x71b923[_0x5398d1]['split']('\\x20')[0x1] - 0x0;\n        _0x3fd41d[_0x5ab2d8] = _0x3fd41d[_0x5ab2d8] || {};\n        _0x3fd41d[_0x4d6c45] = _0x3fd41d[_0x4d6c45] || {};\n        _0x3fd41d[_0x5ab2d8][_0x4d6c45] = _0x5398d1;\n        _0x3fd41d[_0x4d6c45][_0x5ab2d8] = _0x5398d1;\n    }\n    var _0x2e8737 = 0x0;\n    for (var _0x5398d1 = 0x1; _0x5398d1 <= _0x384a97; _0x5398d1++) {\n        if (check(_0x3fd41d, _0x5398d1) != _0x364b61)\n            _0x2e8737++;\n    }\n    console['log'](_0x2e8737);\n}\nfunction check(_0x143592, _0x11d185) {\n    var _0x365316 = [0x1];\n    var _0x437b34 = {};\n    while (_0x365316['length'] > 0x0) {\n        var _0x1b11ca = _0x365316['splice'](0x0, 0x1)[0x0];\n        if (_0x437b34[_0x1b11ca])\n            continue;\n        _0x437b34[_0x1b11ca] = !![];\n        var _0x57670b = Object['keys'](_0x143592[_0x1b11ca]);\n        _0x57670b['forEach'](_0x391dc7 => {\n            if (_0x143592[_0x1b11ca][_0x391dc7] != _0x11d185) {\n                _0x365316['push'](_0x391dc7);\n            }\n        });\n    }\n    return Object['keys'](_0x437b34)['length'];\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["7 7\n1 3\n2 7\n3 4\n4 5\n4 6\n5 6\n6 7", "4"], ["3 3\n1 2\n1 3\n2 3", "0"], ["6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "5"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var N = input[0].split(\" \")[0]-0;\n    var M = input[0].split(\" \")[1]-0;\n    var list = {};\n    for(var i=1;i<=M;i++){\n        var a = input[i].split(\" \")[0]-0;\n        var b = input[i].split(\" \")[1]-0;\n        list[a] = list[a]||{};\n        list[b] = list[b]||{};\n        list[a][b] = i;\n        list[b][a] = i;\n    }\n    \n    var ans = 0;\n    for(var i=1;i<=M;i++){\n        if(check(list, i)!=N)ans++;\n    }\n    \n    console.log(ans);\n}\n\n\nfunction check(list, i){\n    var stack = [1];\n    var checked = {};\n    while(stack.length>0){\n        var now = stack.splice(0,1)[0];\n        if(checked[now]) continue;\n        checked[now] = true;\n        var next = Object.keys(list[now]);\n        next.forEach(nxt=>{\n            if(list[now][nxt]!=i){\n                stack.push(nxt);\n            }\n        });\n    }\n    return Object.keys(checked).length;\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n\n", "language": "JavaScript"}
{"filename": "p03592_1", "type": "JavaScript", "obfuscated": "function Main(_0x1cf9a8) {\n    const _0x2cd488 = _0x1cf9a8['split']('\\x20');\n    const _0x11f948 = i(_0x2cd488[0x0]);\n    const _0x3cced6 = i(_0x2cd488[0x1]);\n    const _0x46b326 = i(_0x2cd488[0x2]);\n    for (var _0x55cde3 = 0x0; _0x55cde3 < _0x11f948; _0x55cde3++) {\n        for (var _0x2193fb = 0x0; _0x2193fb < _0x3cced6; _0x2193fb++) {\n            var _0x569363 = calcBlack(_0x55cde3, _0x2193fb, _0x11f948, _0x3cced6);\n            if (_0x569363 == _0x46b326)\n                return console['log']('Yes');\n        }\n    }\n    console['log']('No');\n}\nfunction calcBlack(_0x27bb78, _0xe5c719, _0x2ae7fa, _0x12e32e) {\n    return _0x2ae7fa * _0x27bb78 - _0xe5c719 * _0x27bb78 + (_0x12e32e * _0xe5c719 - _0x27bb78 * _0xe5c719);\n}\nfunction i(_0x85ef85) {\n    return parseInt(_0x85ef85, 0xa);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2 2", "Yes"], ["2 2 1", "No"], ["3 5 8", "Yes"], ["7 9 20", "No"]], "original": "function Main(input) {\n    const Param = input.split(' ')\n    const N = i(Param[0])\n    const M = i(Param[1])\n    const K = i(Param[2])\n    for(var n = 0; n < N;n++){\n        for(var m = 0; m < M;m++){\n            var b = calcBlack(n, m, N, M)\n            if(b == K) return console.log('Yes')\n        }    \n    }\n    console.log('No')\n}\nfunction calcBlack(n, m, N, M){\n    return (N * n - m * n) + (M * m - n * m)\n}\nfunction i(x){ return parseInt(x, 10)}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03760_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x52cdc4) {\n    _0x52cdc4 = _0x52cdc4['split']('\\x0a');\n    const _0x5cf02c = _0x52cdc4[0x0]['split']('');\n    const _0x1c96b9 = _0x52cdc4[0x1]['split']('');\n    let _0x3c9afe = '';\n    for (let _0xe2bfa5 = 0x0; _0xe2bfa5 < _0x5cf02c['length'] + _0x1c96b9['length']; _0xe2bfa5++) {\n        if (_0x5cf02c[_0xe2bfa5])\n            _0x3c9afe += _0x5cf02c[_0xe2bfa5];\n        if (_0x1c96b9[_0xe2bfa5])\n            _0x3c9afe += _0x1c96b9[_0xe2bfa5];\n    }\n    console['log'](_0x3c9afe);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["xyz\nabc", "xaybzc"], ["atcoderbeginnercontest\natcoderregularcontest", "aattccooddeerrbreeggiunlnaerrccoonntteesstt"]], "original": "'use strict'\n\nfunction main(s) {\n\n  s = s.split('\\n');\n\n  const o = s[0].split('');\n  const e = s[1].split('');\n\n  let ans = '';\n\n  for (let i = 0; i < o.length + e.length; i++) {\n    if (o[i]) ans += o[i];\n    if (e[i]) ans += e[i];\n  }\n\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03774_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x586545 => {\n    _0x586545 = _0x586545['split']('\\x0a');\n    const _0x50a6cc = parseInt(_0x586545[0x0]['split']('\\x20')[0x0]);\n    const _0x2fc2f7 = parseInt(_0x586545[0x0]['split']('\\x20')[0x1]);\n    let _0x543c47 = _0x586545['slice'](0x1, _0x50a6cc + 0x1);\n    let _0x141ca3 = _0x586545['slice'](_0x50a6cc + 0x1, _0x2fc2f7 + _0x50a6cc + 0x1);\n    const _0x15f5b3 = _0x537e88 => {\n        let _0x3ba598 = _0x537e88['split']('\\x20')['map'](_0x552a34 => parseInt(_0x552a34));\n        return {\n            'x': _0x3ba598[0x0],\n            'y': _0x3ba598[0x1]\n        };\n    };\n    _0x543c47 = _0x543c47['map'](_0x15f5b3);\n    _0x141ca3 = _0x141ca3['map'](_0x15f5b3);\n    let _0x21530b = [];\n    _0x543c47['forEach']((_0x37d371, _0x283b66) => {\n        let _0x304eb4 = 0x3b9aca00;\n        let _0x1c9292 = 0x0;\n        _0x141ca3['forEach']((_0x3541eb, _0x185d66) => {\n            let _0x5a9010 = Math['abs'](_0x37d371['x'] - _0x3541eb['x']) + Math['abs'](_0x37d371['y'] - _0x3541eb['y']);\n            if (_0x5a9010 < _0x304eb4) {\n                _0x304eb4 = _0x5a9010;\n                _0x1c9292 = _0x185d66;\n            }\n        });\n        _0x21530b['push'](_0x1c9292);\n    });\n    _0x21530b['forEach'](_0x387b1f => console['log'](_0x387b1f + 0x1));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["2 2\n2 0\n0 0\n-1 0\n1 0", "2\n1"], ["3 4\n10 10\n-10 -10\n3 3\n1 2\n2 3\n3 5\n3 5", "3\n1\n2"], ["5 5\n-100000000 -100000000\n-100000000 100000000\n100000000 -100000000\n100000000 100000000\n0 0\n0 0\n100000000 100000000\n100000000 -100000000\n-100000000 100000000\n-100000000 -100000000", "5\n4\n3\n2\n1"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split('\\n')\n    const N = parseInt(input[0].split(' ')[0])\n    const M = parseInt(input[0].split(' ')[1])\n    let arr = input.slice(1, N + 1)\n    let points = input.slice(N + 1, M + N + 1)\n\n    const parse = (v) => {\n        let temp = v.split(' ').map(vv => parseInt(vv))\n        return {\n            x: temp[0],\n            y: temp[1]\n        }\n    }\n    arr = arr.map(parse)\n    points = points.map(parse)\n\n\n    let indexArr = []\n    arr.forEach((v, i) => {\n        let minDist = 1000000000\n        let index = 0\n        points.forEach((w, j) => {\n            let dist = Math.abs(v.x - w.x) + Math.abs(v.y - w.y)\n            if(dist < minDist){\n                minDist = dist\n                index = j\n            }\n        })\n        indexArr.push(index)\n    })\n\n    indexArr.forEach(v => console.log(v + 1))\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript"}
{"filename": "p03807_1", "type": "JavaScript", "obfuscated": "function Main(_0xadd320) {\n    _0xadd320 = _0xadd320['split']('\\x0a');\n    var _0x5386bf = _0xadd320[0x1]['split']('\\x20')['map'](Number);\n    var _0x49e084 = 0x0;\n    var _0xc0f7f6 = 0x0;\n    for (var _0x4df13e = 0x0; _0x4df13e < _0x5386bf['length']; _0x4df13e++) {\n        if (_0x5386bf[_0x4df13e] % 0x2 == 0x0)\n            _0x49e084++;\n        else\n            _0xc0f7f6++;\n    }\n    console['log'](_0xc0f7f6 % 0x2 == 0x0 && (_0xc0f7f6 / 0x2 + _0x49e084) % 0x2 == 0x0 ? 'YES' : 'NO');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n1 2 3", "YES"], ["5\n1 2 3 4 5", "NO"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar arr = input[1].split(\" \").map(Number);\n\tvar m=0;\n\tvar n=0;\n\tfor(var i=0;i<arr.length;i++){\n\t\tif(arr[i]%2==0) m++;\n\t\telse n++;\n\t}\n // console.log(n,m)\n\tconsole.log((n%2==0&&((n/2)+m)%2==0)?\"YES\":\"NO\")\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03853_1", "type": "JavaScript", "obfuscated": "function Main(_0x192832) {\n    _0x192832 = _0x192832['trim']();\n    var _0x43937e = parseInt(_0x192832['split']('\\x0a')[0x0]['split']('\\x20')[0x0]);\n    for (var _0x2fdbd7 = 0x1; _0x2fdbd7 <= _0x43937e; _0x2fdbd7++) {\n        console['log'](_0x192832['split']('\\x0a')[_0x2fdbd7]);\n        console['log'](_0x192832['split']('\\x0a')[_0x2fdbd7]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2\n*.\n.*", "*.\n*.\n.*\n.*"], ["1 4\n***.", "***.\n***."], ["9 20\n.....***....***.....\n....*...*..*...*....\n...*.....**.....*...\n...*.....*......*...\n....*.....*....*....\n.....**..*...**.....\n.......*..*.*.......\n........**.*........\n.........**.........", ".....***....***.....\n.....***....***.....\n....*...*..*...*....\n....*...*..*...*....\n...*.....**.....*...\n...*.....**.....*...\n...*.....*......*...\n...*.....*......*...\n....*.....*....*....\n....*.....*....*....\n.....**..*...**.....\n.....**..*...**.....\n.......*..*.*.......\n.......*..*.*.......\n........**.*........\n........**.*........\n.........**.........\n.........**........."]], "original": "function Main(input) {\n\tinput = input.trim();\n  var tate = parseInt(input.split(\"\\n\")[0].split(\" \")[0]);\n  for(var i = 1; i <= tate; i++){\n    console.log(input.split(\"\\n\")[i]);\n    console.log(input.split(\"\\n\")[i]);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p00010_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['some'](function (_0x174a0f) {\n    j = _0x174a0f['split']('\\x20');\n    if (j['length'] == 0x6)\n        a = j[0x0], b = j[0x1], c = j[0x2], d = j[0x3], e = j[0x4], f = j[0x5], g = a * a, h = b * b, k = c * c, l = d * d, m = e * e, n = f * f, p = ((b - f) * (h - l + g - k) - (b - d) * (h - n + g - m)) / (0x2 * (b - f) * (a - c) - 0x2 * (b - d) * (a - e)), q = ((a - e) * (g - k + h - l) - (a - c) * (g - m + h - n)) / (0x2 * (a - e) * (b - d) - 0x2 * (a - c) * (b - f)), console['log'](p['toFixed'](0x3), q['toFixed'](0x3), Math['sqrt']((a - p) * (a - p) + (b - q) * (b - q))['toFixed'](0x3));\n});", "test_cases": [["1\n0.0 0.0 2.0 0.0 2.0 2.0", "1.000 1.000 1.414"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){j=i.split(' ');if(j.length==6)a=j[0],b=j[1],c=j[2],d=j[3],e=j[4],f=j[5],g=a*a,h=b*b,k=c*c,l=d*d,m=e*e,n=f*f,p=((b-f)*(h-l+g-k)-(b-d)*(h-n+g-m))/(2*(b-f)*(a-c)-2*(b-d)*(a-e)),q=((a-e)*(g-k+h-l)-(a-c)*(g-m+h-n))/(2*(a-e)*(b-d)-2*(a-c)*(b-f)),console.log(p.toFixed(3),q.toFixed(3),Math.sqrt((a-p)*(a-p)+(b-q)*(b-q)).toFixed(3))})", "language": "JavaScript"}
{"filename": "p00029_1", "type": "JavaScript", "obfuscated": "process['stdin']['on']('data', function (_0x451d94, _0x456523, _0x5beed0) {\n    _0x456523 = {}, n = 0x0, s = '';\n    (_0x451d94 + '')['trim']()['split']('\\x20')['some'](function (_0x5beab9) {\n        n < (_0x456523[_0x5beab9 = _0x5beab9['toLowerCase']()] ? ++_0x456523[_0x5beab9] : _0x456523[_0x5beab9] = 0x1) && (n = _0x456523[_0x5beed0 = _0x5beab9]);\n        s['length'] < _0x5beab9['length'] && (s = _0x5beab9);\n    });\n    console['log'](_0x5beed0 + '\\x20' + s);\n})['resume']();", "test_cases": [["Thank you for your mail and your lectures", "your lectures"]], "original": "process.stdin.on(\"data\",function(c,o,m){\n\to={},n=0,s=\"\";\n\t(c+\"\").trim().split(\" \").some(function(a){\n\t\tn<(o[a=a.toLowerCase()]?++o[a]:(o[a]=1))&&(n=o[m=a]);\n\t\ts.length<a.length&&(s=a);\n\t});\n\tconsole.log(m+\" \"+s);\n}).resume();", "language": "JavaScript"}
{"filename": "p02384_1", "type": "JavaScript", "obfuscated": "ptrn = [\n    [\n        0x0,\n        0x1,\n        0x2\n    ],\n    [\n        0x0,\n        0x2,\n        0x4\n    ],\n    [\n        0x0,\n        0x4,\n        0x3\n    ],\n    [\n        0x0,\n        0x3,\n        0x1\n    ],\n    [\n        0x1,\n        0x5,\n        0x2\n    ],\n    [\n        0x1,\n        0x2,\n        0x0\n    ],\n    [\n        0x1,\n        0x0,\n        0x3\n    ],\n    [\n        0x1,\n        0x3,\n        0x5\n    ],\n    [\n        0x2,\n        0x1,\n        0x5\n    ],\n    [\n        0x2,\n        0x5,\n        0x4\n    ],\n    [\n        0x2,\n        0x4,\n        0x0\n    ],\n    [\n        0x2,\n        0x0,\n        0x1\n    ]\n];\nfunction dice(_0x48412e) {\n    this['n'] = _0x48412e;\n    this['check'] = function (_0x56184b, _0x1c14f9) {\n        _0x56184b = this['n']['indexOf'](_0x56184b);\n        _0x1c14f9 = this['n']['indexOf'](_0x1c14f9);\n        var _0x401912 = !![];\n        if (_0x56184b > 0x2) {\n            _0x56184b = 0x5 - _0x56184b;\n            _0x401912 = ![];\n        }\n        for (let _0x2b94d2 = 0x4 * _0x56184b; _0x2b94d2 < 0xc; _0x2b94d2++) {\n            if (_0x401912 && ptrn[_0x2b94d2][0x1] === _0x1c14f9) {\n                console['log'](this['n'][ptrn[_0x2b94d2][0x2]]);\n                break;\n            } else if (!_0x401912 && ptrn[_0x2b94d2][0x2] === _0x1c14f9) {\n                console['log'](this['n'][ptrn[_0x2b94d2][0x1]]);\n                break;\n            }\n        }\n    };\n}\nfunction Main(_0x4354be) {\n    _0x4354be = _0x4354be['split']('\\x0a');\n    var _0x539a0f = new dice(_0x4354be[0x0]['split']('\\x20'));\n    _0x4354be['slice'](0x2, 0x2 + Number(_0x4354be[0x1]))['forEach'](function (_0x2852e5) {\n        t = _0x2852e5['split']('\\x20');\n        _0x539a0f['check'](t[0x0], t[0x1]);\n    });\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 2 3 4 5 6\n3\n6 5\n1 3\n3 2", "3\n5\n6"]], "original": "ptrn = [[0, 1, 2], [0, 2, 4], [0, 4, 3], [0, 3, 1],\n        [1, 5, 2], [1, 2, 0], [1, 0, 3], [1, 3, 5],\n        [2, 1, 5], [2, 5, 4], [2, 4, 0], [2, 0, 1]];\nfunction dice(num) {\n  this.n = num;  // array\n  this.check = function(top, front) {\n    top = this.n.indexOf(top);\n    front = this.n.indexOf(front);\n    var flag = true;\n    if(top > 2) {\n      top = 5 - top;\n      flag = false;\n    }\n    for(let i = 4 * top; i < 12; i++) {\n      if(flag && ptrn[i][1] === front) {\n        console.log(this.n[ptrn[i][2]]);\n        break;\n      }else if(!flag && ptrn[i][2] === front) {\n        console.log(this.n[ptrn[i][1]]);\n        break;\n      }\n    }\n  }\n}\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var dice_a = new dice(input[0].split(\" \"));\n  input.slice(2, 2+Number(input[1])).forEach(function(d){\n    t = d.split(\" \");\n    dice_a.check(t[0], t[1]);\n  });\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02385_1", "type": "JavaScript", "obfuscated": "function move(_0x90f59d, _0x5b7dc6) {\n    var _0x2f3bc5 = _0x5b7dc6[0x0];\n    var _0x9c276d = _0x5b7dc6[0x1];\n    var _0xf77ec5 = _0x5b7dc6[0x2];\n    var _0x2b6ea2 = _0x5b7dc6[0x3];\n    var _0x381aeb = _0x5b7dc6[0x4];\n    var _0x269c03 = _0x5b7dc6[0x5];\n    var _0x5872a6 = [];\n    if (_0x90f59d == 'N')\n        _0x5872a6 = [\n            _0x9c276d,\n            _0x269c03,\n            _0xf77ec5,\n            _0x2b6ea2,\n            _0x2f3bc5,\n            _0x381aeb\n        ];\n    if (_0x90f59d == 'S')\n        _0x5872a6 = [\n            _0x381aeb,\n            _0x2f3bc5,\n            _0xf77ec5,\n            _0x2b6ea2,\n            _0x269c03,\n            _0x9c276d\n        ];\n    if (_0x90f59d == 'E')\n        _0x5872a6 = [\n            _0x2b6ea2,\n            _0x9c276d,\n            _0x2f3bc5,\n            _0x269c03,\n            _0x381aeb,\n            _0xf77ec5\n        ];\n    if (_0x90f59d == 'W')\n        _0x5872a6 = [\n            _0xf77ec5,\n            _0x9c276d,\n            _0x269c03,\n            _0x2f3bc5,\n            _0x381aeb,\n            _0x2b6ea2\n        ];\n    return _0x5872a6;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar diceA = Arr[0x0]['split']('\\x20')['map'](Number);\nvar diceB = Arr[0x1]['split']('\\x20')['map'](Number);\nvar NSEW = 'NSEW'['split']('');\nfor (var i = 0x0; i < 0x64; i++) {\n    var r = Math['floor'](Math['random']() * 0x4);\n    diceA = move(NSEW[r], diceA);\n    var flag = diceA['every'](function (_0x535ed0, _0x3bdeae) {\n        return _0x535ed0 == diceB[_0x3bdeae];\n    });\n    if (flag)\n        break;\n}\nconsole['log'](flag ? 'Yes' : 'No');", "test_cases": [["1 2 3 4 5 6\n6 2 4 3 5 1", "Yes"], ["1 2 3 4 5 6\n6 5 4 3 2 1", "No"]], "original": "function move(x,arr){\nvar d1=arr[0];\nvar d2=arr[1];\nvar d3=arr[2];\nvar d4=arr[3];\nvar d5=arr[4];\nvar d6=arr[5];\nvar after=[];\nif(x==\"N\")after=[d2,d6,d3,d4,d1,d5];\nif(x==\"S\")after=[d5,d1,d3,d4,d6,d2];\nif(x==\"E\")after=[d4,d2,d1,d6,d5,d3];\nif(x==\"W\")after=[d3,d2,d6,d1,d5,d4];\nreturn after;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar diceA=Arr[0].split(\" \").map(Number);\nvar diceB=Arr[1].split(\" \").map(Number);\nvar NSEW=\"NSEW\".split(\"\");\n\nfor(var i=0;i<100;i++){\n   var r = Math.floor(Math.random () * 4) ;\n   diceA=move(NSEW[r],diceA)\n   var flag=diceA.every(function(v,i){return (v==diceB[i]);});\n   if(flag)break;\n}\nconsole.log(flag?\"Yes\":\"No\");", "language": "JavaScript"}
{"filename": "p02695_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n(_0x8502b3 => {\n    const _0x570c98 = _0x8502b3['split']('\\x0a');\n    const [_0x1b7aad, _0x2a11d4, _0x3d6cb8] = _0x570c98[0x0]['split']('\\x20')['map'](Number);\n    const _0x541809 = [];\n    for (let _0x352c73 = 0x0; _0x352c73 < _0x3d6cb8; _0x352c73++) {\n        _0x541809[_0x352c73] = _0x570c98[_0x352c73 + 0x1]['split']('\\x20')['map'](Number);\n    }\n    const _0x121fef = [];\n    const _0x175499 = [];\n    let _0x5dd2be = 0x0;\n    let _0x41f367 = 0x0;\n    while (_0x41f367 !== undefined) {\n        if (_0x5dd2be === _0x1b7aad) {\n            _0x121fef['push']([..._0x175499]);\n            _0x175499['pop']();\n            _0x41f367++;\n            _0x5dd2be--;\n        } else if (_0x41f367 >= _0x2a11d4) {\n            _0x41f367 = _0x175499['pop']();\n            _0x5dd2be--;\n        } else {\n            _0x175499['push'](_0x41f367 + 0x1);\n            _0x5dd2be++;\n        }\n    }\n    let _0x1d80bc = 0x0;\n    _0x121fef['forEach'](_0x446d6e => {\n        let _0x37c858 = 0x0;\n        _0x541809['forEach'](_0x2b840b => {\n            if (_0x446d6e[_0x2b840b[0x1] - 0x1] - _0x446d6e[_0x2b840b[0x0] - 0x1] === _0x2b840b[0x2]) {\n                _0x37c858 += _0x2b840b[0x3];\n            }\n        });\n        _0x1d80bc = Math['max'](_0x1d80bc, _0x37c858);\n    });\n    console['log'](_0x1d80bc);\n})(input);", "test_cases": [["3 4 3\n1 3 3 100\n1 2 2 10\n2 3 2 10", "110"], ["4 6 10\n2 4 1 86568\n1 4 0 90629\n2 3 0 90310\n3 4 1 29211\n3 4 3 78537\n3 4 2 8580\n1 2 1 96263\n1 4 2 2156\n1 2 0 94325\n1 4 3 94328", "357500"], ["10 10 1\n1 10 9 1", "1"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n;(input => {\n    const rows = input.split('\\n')\n    const [N, M, Q] = rows[0].split(' ').map(Number)\n    const A = []\n    for (let i = 0; i < Q; i++) {\n        A[i] = rows[i + 1].split(' ').map(Number)\n    }\n\n    const ss = []\n    const s = []\n    let d = 0\n    let v = 0\n    while (v !== undefined) {\n        if (d === N) {\n            ss.push([...s])\n            s.pop()\n            v++\n            d--\n        } else if (v >= M) {\n            v = s.pop()\n            d--\n        } else {\n            s.push(v + 1)\n            d++\n        }\n    }\n\n    let res = 0\n    ss.forEach(s => {\n        let sum = 0\n        A.forEach(a => {\n            if (s[a[1] - 1] - s[a[0] - 1] === a[2]) {\n                sum += a[3]\n            }\n        })\n        res = Math.max(res, sum)\n    })\n\n    console.log(res)\n\n})(input)\n", "language": "JavaScript"}
{"filename": "p02873_1", "type": "JavaScript", "obfuscated": "function Main(_0x3636d1) {\n    var _0x561ea9 = _0x3636d1['split']('');\n    var _0x2e4b15 = _0x561ea9['length'];\n    var _0x3345ec = '>';\n    var _0x207afa = 0x1;\n    var _0x4db2af = [];\n    var _0x1b6a8e = 0x0;\n    var _0x1ff11e = 0x0;\n    var _0x21dc7c = 0x0;\n    for (var _0x40d613 = 0x0; _0x40d613 < _0x2e4b15; _0x40d613++) {\n        if (_0x561ea9[_0x40d613] == _0x3345ec) {\n            if (_0x3345ec == '>') {\n                _0x1b6a8e++;\n            } else {\n                _0x1ff11e++;\n            }\n            _0x207afa = 0x0;\n        } else {\n            if (_0x3345ec == '<') {\n                _0x4db2af['push']({\n                    'L': _0x1b6a8e,\n                    'R': _0x1ff11e\n                });\n                _0x3345ec = '>';\n                _0x1b6a8e = 0x0;\n                _0x1ff11e = 0x0;\n                _0x1b6a8e++;\n                _0x207afa = 0x1;\n            } else {\n                _0x3345ec = '<';\n                _0x1ff11e++;\n                _0x207afa = 0x0;\n            }\n        }\n    }\n    if (_0x207afa == 0x0) {\n        _0x4db2af['push']({\n            'L': _0x1b6a8e,\n            'R': _0x1ff11e\n        });\n    }\n    for (var _0x40d613 = 0x1; _0x40d613 < _0x4db2af['length']; _0x40d613++) {\n        if (_0x4db2af[_0x40d613 - 0x1]['R'] < _0x4db2af[_0x40d613]['L']) {\n            _0x4db2af[_0x40d613 - 0x1]['R']--;\n        } else {\n            _0x4db2af[_0x40d613]['L']--;\n        }\n    }\n    for (var _0x40d613 = 0x0; _0x40d613 < _0x4db2af['length']; _0x40d613++) {\n        _0x21dc7c += _0x4db2af[_0x40d613]['L'] * (_0x4db2af[_0x40d613]['L'] + 0x1) / 0x2;\n        _0x21dc7c += _0x4db2af[_0x40d613]['R'] * (_0x4db2af[_0x40d613]['R'] + 0x1) / 0x2;\n    }\n    console['log'](_0x21dc7c);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["<>>", "3"], ["<>>><<><<<<<>>><", "28"]], "original": "function Main(input) {\n  var S = input.split(\"\");\n  var Slong = S.length\n  var Muki = \">\";\n  var Out = 1;\n  var V = [];\n  var Left = 0;\n  var Right = 0;\n  var Sum = 0;\n  for(var i = 0;i<Slong;i++){\n\n    if(S[i] == Muki){\n      if(Muki == \">\"){\n        Left ++;\n    }else{\n      Right ++;\n    }\n    Out = 0;\n  }else{\n    if(Muki == \"<\"){\n      V.push({L:Left,R:Right})\n      Muki = \">\"\n      Left = 0;\n      Right = 0;\n      Left ++;\n      Out = 1;\n    }else{\n      Muki = \"<\"\n      Right ++;\n      Out = 0;\n    }\n  }\n  }\n  if(Out == 0){\n  V.push({L:Left,R:Right})\n  }\n  \n//console.log(V);\nfor(var i=1;i<V.length;i++){\n  if(V[i-1].R < V[i].L){\n    V[i-1].R --; \n  }else{\n    V[i].L --;\n  }\n}\n//  console.log(V);\nfor(var i=0;i<V.length;i++){\n    Sum += (V[i].L*(V[i].L+1))/2;\n//    console.log((V[i].L*(V[i].L+1))/2);\n    Sum += (V[i].R*(V[i].R+1))/2;\n//    console.log((V[i].R*(V[i].R+1))/2);\n  }\n  console.log(Sum);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03401_1", "type": "JavaScript", "obfuscated": "function main(_0x3a9fee) {\n    var _0x4e99aa = _0x3a9fee[0x0] - 0x0;\n    var _0x1e3874 = [0x0]['concat'](_0x3a9fee[0x1]['split']('\\x20')['map'](_0x3fc038 => _0x3fc038 - 0x0), [0x0]);\n    var _0x2a5698 = [];\n    _0x2a5698[0x0] = 0x0;\n    var _0x2bb306 = [];\n    _0x2bb306[_0x4e99aa] = 0x0;\n    for (var _0x40d78d = 0x1; _0x40d78d <= _0x4e99aa; _0x40d78d++) {\n        _0x2a5698[_0x40d78d] = _0x2a5698[_0x40d78d - 0x1] + Math['abs'](_0x1e3874[_0x40d78d] - _0x1e3874[_0x40d78d - 0x1]);\n        _0x2bb306[_0x4e99aa - _0x40d78d] = _0x2bb306[_0x4e99aa - _0x40d78d + 0x1] + Math['abs'](_0x1e3874[_0x4e99aa - _0x40d78d + 0x1] - _0x1e3874[_0x4e99aa - _0x40d78d + 0x2]);\n    }\n    for (var _0x40d78d = 0x1; _0x40d78d <= _0x4e99aa; _0x40d78d++) {\n        var _0x32ab9d = 0x0;\n        _0x32ab9d += _0x2a5698[_0x40d78d - 0x1];\n        _0x32ab9d += _0x2bb306[_0x40d78d] || 0x0;\n        _0x32ab9d += Math['abs'](_0x1e3874[_0x40d78d - 0x1] - _0x1e3874[_0x40d78d + 0x1]);\n        console['log'](_0x32ab9d);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["3\n3 5 -1", "12\n8\n10"], ["5\n1 1 1 2 0", "4\n4\n4\n2\n4"], ["6\n-679 -2409 -3258 3095 -3291 -4462", "21630\n21630\n19932\n8924\n21630\n19288"]], "original": "function main(input) {\n    var n = input[0]-0;\n    var list = [0].concat(input[1].split(\" \").map(v=>v-0), [0]);\n    var llist = []; llist[0] = 0;\n    var rlist = []; rlist[n] = 0;\n    for(var i=1;i<=n;i++){\n        llist[i] = llist[i-1] + Math.abs(list[i]-list[i-1]);\n        rlist[n-i] = rlist[n-i+1] + Math.abs(list[n-i+1]-list[n-i+2]);\n    }\n    for(var i=1;i<=n;i++){\n        var ans = 0;\n        ans += llist[i-1];\n        ans += rlist[i]||0;\n        ans += Math.abs(list[i-1]-list[i+1]);\n        console.log(ans);\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p03463_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlet N = input['split']('\\x20')[0x0] * 0x1;\nlet A = input['split']('\\x20')[0x1] * 0x1;\nlet B = input['split']('\\x20')[0x2] * 0x1;\nlet dist = Math['abs'](A - B) % 0x2;\nlet ans = dist == 0x0 ? 'Alice' : 'Borys';\nconsole['log'](ans);", "test_cases": [["5 2 4", "Alice"], ["2 1 2", "Borys"], ["58 23 42", "Borys"]], "original": "'use strict'\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nlet N = input.split(' ')[0]*1;\nlet A = input.split(' ')[1]*1;\nlet B = input.split(' ')[2]*1;\nlet dist = Math.abs(A - B)%2;\nlet ans = dist == 0? \"Alice\" : \"Borys\";\nconsole.log(ans);\n", "language": "JavaScript"}
{"filename": "p03476_1", "type": "JavaScript", "obfuscated": "console['log'](function (_0x4189dc) {\n    const [[_0x148a3a], ..._0x7e5964] = _0x4189dc['trim']()['split']('\\x0a')['map'](_0xf55dad => _0xf55dad['split']('\\x20')['map'](_0x69f2ab => _0x69f2ab | 0x0));\n    const _0x30eb47 = 0x186a0;\n    const _0x544041 = Array(_0x30eb47)['fill'](!![]);\n    const _0x47d8d6 = Array(_0x30eb47 + 0x2)['fill'](0x0);\n    _0x544041[0x0] = ![];\n    _0x47d8d6[0x2] = 0x1;\n    for (let _0x3093c5 = 0x1; _0x3093c5 < _0x30eb47; _0x3093c5++) {\n        if (_0x544041[_0x3093c5]) {\n            const _0x3e92fa = 0x2 * _0x3093c5 + 0x1;\n            if (~_0x3093c5 & 0x1 && _0x544041[_0x3093c5 / 0x2])\n                _0x47d8d6[_0x3093c5 + 0x1] += 0x1;\n            for (let _0x503061 = _0x3093c5 + _0x3e92fa; _0x503061 < _0x30eb47; _0x503061 = _0x503061 + _0x3e92fa)\n                _0x544041[_0x503061] = ![];\n        }\n        _0x47d8d6[_0x3093c5 + 0x2] += _0x47d8d6[_0x3093c5 + 0x1];\n    }\n    const _0x575665 = [];\n    for (let _0x1b4133 = 0x0; _0x1b4133 < _0x148a3a; _0x1b4133++) {\n        const _0x10416f = (_0x7e5964[_0x1b4133][0x0] - 0x1) / 0x2;\n        const _0x4dfd7b = (_0x7e5964[_0x1b4133][0x1] - 0x1) / 0x2 + 0x1;\n        _0x575665['push'](_0x47d8d6[_0x4dfd7b] - _0x47d8d6[_0x10416f]);\n    }\n    return _0x575665['join']('\\x0a');\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["1\n3 7", "2"], ["4\n13 13\n7 11\n7 11\n2017 2017", "1\n0\n0\n1"], ["6\n1 53\n13 91\n37 55\n19 51\n73 91\n13 49", "4\n4\n1\n1\n1\n2"]], "original": "console.log(function(args){\n  const [[Q],...tmp] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  const MAX = 1e5;\n  const a = Array(MAX).fill(true);\n  const s = Array(MAX+2).fill(0);\n  a[0] = false; s[2] = 1;\n  for ( let i = 1; i < MAX; i++ ) {\n    if ( a[i] ) {\n      const n = 2*i+1;\n      if ( ~i&1 && a[i/2] ) s[i+1] += 1;\n      for ( let j = i+n; j < MAX; j=j+n ) a[j] = false;\n    }\n    s[i+2] += s[i+1];\n  }\n  const x = [];\n  for ( let i = 0; i < Q; i++ ) {\n    const l = ( tmp[i][0] - 1 ) / 2;\n    const r = ( tmp[i][1] - 1 ) / 2 + 1;\n    x.push( s[r] - s[l] );\n  }\n  return x.join('\\n');\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03550_1", "type": "JavaScript", "obfuscated": "function main(_0x38bafa) {\n    const _0x5757b0 = _0x38bafa['split']('\\x0a');\n    const _0x5f2871 = _0x5757b0['shift']()['split']('\\x20')['map'](_0x3027e1 => parseInt(_0x3027e1));\n    const _0x19c986 = _0x5f2871[0x0];\n    const _0x895c18 = _0x5f2871[0x1];\n    const _0x168070 = _0x5f2871[0x2];\n    const _0x126b1a = _0x5757b0['shift']()['split']('\\x20')['map'](_0x4d500a => parseInt(_0x4d500a));\n    const _0x45943b = Math['abs'](_0x895c18 - _0x168070);\n    var _0x1c2c94 = Math['abs'](_0x126b1a[_0x19c986 - 0x1] - _0x126b1a[_0x19c986 - 0x2]);\n    if (_0x19c986 < 0x2) {\n        _0x1c2c94 = 0x0;\n    }\n    const _0x7be442 = Math['abs'](_0x126b1a[_0x19c986 - 0x1] - _0x168070);\n    const _0xbf0b28 = Math['max'](_0x45943b, _0x1c2c94, _0x7be442);\n    console['log'](_0xbf0b28);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 100 100\n10 1000 100", "900"], ["3 100 1000\n10 100 100", "900"], ["5 1 1\n1 1 1 1 1", "0"], ["1 1 1\n1000000000", "999999999"]], "original": "function main(input){\n  const lines = input.split('\\n');\n  const NZW = lines.shift().split(' ').map(x => parseInt(x));\n  const N = NZW[0];\n  const Z = NZW[1];\n  const W = NZW[2];\n  const A = lines.shift().split(' ').map(x => parseInt(x));\n\n  // 初期を維持、n-1取る、n取る\n\n  const initial = Math.abs(Z-W);\n  var fetch_n_1 = Math.abs(A[N-1] - A[N-2]);\n  if(N<2){fetch_n_1=0}\n  const fetch_n = Math.abs(A[N-1]-W);\n\n  const result = Math.max(initial, fetch_n_1, fetch_n)\n  console.log(result);\n\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03696_1", "type": "JavaScript", "obfuscated": "function myout(_0x5a5bc1) {\n    console['log'](_0x5a5bc1);\n}\nfunction Main(_0x379669) {\n    _0x379669 = _0x379669['trim']()['split']('\\x0a');\n    var _0x2d4777 = JSON['parse'](JSON['stringify'](_0x379669[0x1]));\n    var _0x40aa50 = 0x0;\n    var _0x1be3c8 = 0x0;\n    while (_0x2d4777['indexOf']('()') != -0x1) {\n        _0x2d4777 = _0x2d4777['replace']('()', '');\n    }\n    for (var _0x377103 = 0x0; _0x377103 < _0x2d4777['length']; _0x377103++) {\n        var _0x4129cf = _0x2d4777['slice'](_0x377103, _0x377103 + 0x1);\n        if (_0x4129cf == '(') {\n            _0x40aa50++;\n        } else if (_0x4129cf == ')') {\n            _0x1be3c8++;\n        }\n    }\n    for (var _0x377103 = 0x0; _0x377103 < _0x1be3c8; _0x377103++) {\n        _0x379669[0x1] = '(' + _0x379669[0x1];\n    }\n    for (var _0x377103 = 0x0; _0x377103 < _0x40aa50; _0x377103++) {\n        _0x379669[0x1] += ')';\n    }\n    myout(_0x379669[0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n())", "(())"], ["6\n)))())", "(((()))())"], ["8\n))))((((", "(((())))(((())))"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\tinput = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var tmpInput = JSON.parse(JSON.stringify(input[1]));\n  var left = 0;\n  var right = 0;\n  while(tmpInput.indexOf(\"()\") != -1){\n  \ttmpInput = tmpInput.replace(\"()\",\"\");\n\t}\n  //myout(tmpInput);\n  for(var i = 0; i < tmpInput.length; i++){\n    var tmp = tmpInput.slice(i, i + 1);\n    if(tmp == \"(\"){\n       left++;\n    }else if(tmp == \")\"){\n       right++;\n    }\n  }\n  for(var i = 0; i < right; i++){\n    input[1] = \"(\" + input[1];\n  }\n  for(var i = 0; i < left; i++){\n    input[1] += \")\";\n  }\n  myout(input[1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03861_1", "type": "JavaScript", "obfuscated": "const padLeft = (_0x5cede5, _0x1a55f2, _0x812d08) => ([...Array(_0x1a55f2)]['map'](_0x827e3f => _0x812d08)['join']('') + _0x5cede5)['slice'](_0x1a55f2 * -0x1);\nconst split = (_0x109d31, _0x25cc70) => (_0x5becb2 => _0x5becb2['reduce']((_0x3a92ee, _0x565298, _0xd7cec9) => _0xd7cec9 % _0x25cc70 ? _0x3a92ee : [\n    ..._0x3a92ee,\n    _0x5becb2['slice'](_0xd7cec9, _0xd7cec9 + _0x25cc70)['join']('')\n], []))([..._0x109d31]);\nconst arrange = _0xd452a0 => (_0x42dcb8 => _0x42dcb8[0x0] ? [\n    _0x42dcb8[0x0] - 0x1,\n    _0x42dcb8[0x1] + 0x2540be400\n] : _0x42dcb8)(split(padLeft(_0xd452a0, 0x14, '0'), 0xa)['map'](_0x41ca9b => +_0x41ca9b));\nconst solve0 = (_0x1b2544, _0x3e86f5, _0x797816) => Math['floor'](_0x3e86f5 / _0x797816) - Math['floor'](_0x1b2544 / _0x797816);\nconst solve1 = (_0x588bda, _0x280e15, _0x4664ec) => Math['floor'](_0x280e15 / _0x4664ec) - (_0x588bda == 0x0 ? -0x1 : Math['floor']((_0x588bda - 0x1) / _0x4664ec));\nconst nullOrStr = _0x1da877 => _0x1da877 ? String(_0x1da877) : '';\nconst fn2 = (_0x298a78, _0x5f0e0e, _0x2a09fa) => '' + nullOrStr(solve0(+_0x298a78[0x0], _0x5f0e0e[0x0], _0x2a09fa)) + solve1(_0x298a78[0x1], _0x5f0e0e[0x1], _0x2a09fa);\nconst fn1 = (_0x1941e4, _0x32b2f1, _0x22091e) => fn2(arrange(_0x1941e4), arrange(_0x32b2f1), _0x22091e);\nconst main = _0x4b451e => fn1(..._0x4b451e['split']('\\x20'));\nconsole['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4 8 2", "3"], ["0 5 1", "6"], ["9 9 2", "0"], ["1 1000000000000000000 3", "333333333333333333"]], "original": "const padLeft = (w, l, c) => ([...Array(l)].map(_ => c).join('') + w).slice(l * -1);\nconst split = (w, n) => (ws => ws.reduce((acc, _, i) => i % n ? acc : [...acc, ws.slice(i, i + n).join('')], []))([...w]);\nconst arrange = n => (x => x[0] ? [x[0] - 1, x[1] + 10000000000] : x)(split(padLeft(n, 20, '0'), 10).map(x => +x));\n\nconst solve0 = (a, b, x) => Math.floor(b / x) -  Math.floor(a / x);\nconst solve1 = (a, b, x) => Math.floor(b / x) - (a == 0 ? -1 : Math.floor((a - 1) / x));\n\nconst nullOrStr = n => n ? String(n) : '';\n\nconst fn2 = (a2, b2, x) => `${nullOrStr(solve0(+a2[0], b2[0], x))}${solve1(a2[1], b2[1], x)}`;\nconst fn1 = (a, b, x) => fn2(arrange(a), arrange(b), x);\n\nconst main = input => (fn1)(...input.split(' '));\n\nconsole.log(main(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03993_1", "type": "JavaScript", "obfuscated": "var lines = [];\nvar result = 0x0;\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x578e6f) {\n    lines['push'](_0x578e6f);\n});\nrl['on']('close', function () {\n    var _0x48a3f2 = Number(lines[0x0]);\n    var _0x192d4d = lines[0x1]['split']('\\x20')['map'](_0x104b3d => Number(_0x104b3d));\n    for (var _0x4c0af6 = 0x0; _0x4c0af6 < _0x48a3f2; _0x4c0af6++) {\n        if (_0x4c0af6 < _0x192d4d[_0x4c0af6]) {\n            if (_0x192d4d[_0x192d4d[_0x4c0af6] - 0x1] === _0x4c0af6 + 0x1) {\n                result++;\n            }\n        }\n    }\n    console['log'](result);\n});", "test_cases": [["4\n2 1 4 3", "2"], ["3\n2 3 1", "0"], ["5\n5 5 5 5 1", "1"]], "original": "var lines = []; var result = 0;\nvar readline = require('readline');\n\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    lines.push(x);\n});\n\nrl.on('close', function () {\n    var N = Number(lines[0]);\n    var a = lines[1].split(\" \").map(value => Number(value));\n\n    for (var i = 0; i < N; i++) {\n        if (i < a[i]) {\n            if (a[a[i] - 1] === i + 1) { result++; }\n        }\n    }\n    console.log(result);\n});", "language": "JavaScript"}
{"filename": "p00020_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconsole['log'](input['trim']()['toUpperCase']());", "test_cases": [["this is a pen.", "THIS IS A PEN."]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconsole.log(input.trim().toUpperCase());", "language": "JavaScript"}
{"filename": "p00046_1", "type": "JavaScript", "obfuscated": "i = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/\\n/)['sort'](function (_0x5420ad, _0x7ae41e) {\n    return _0x5420ad - _0x7ae41e;\n}), console['log'](i[i['length'] - 0x1] - i[0x0]);", "test_cases": [["3776.0\n1819.0\n645.2\n2004.1\n1208.6", "3130.8"]], "original": "i=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split(/\\n/).sort(function(a,b){return a-b}),console.log(i[i.length-1]-i[0])", "language": "JavaScript"}
{"filename": "p02383_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nconst reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nconst lines = [];\nreader['on']('line', _0x5895af => {\n    lines['push'](_0x5895af);\n});\nreader['on']('close', () => {\n    let [_0x2a4c95, _0x531fbb, _0x4bd144, _0x4b4497, _0x1bfc6e, _0x396f85] = lines[0x0]['split']('\\x20')['map'](Number);\n    const _0x25853d = lines[0x1];\n    for (let _0xd375e3 = 0x0; _0xd375e3 < _0x25853d['length']; _0xd375e3++) {\n        switch (_0x25853d[_0xd375e3]) {\n        case 'N':\n            [_0x2a4c95, _0x1bfc6e, _0x396f85, _0x531fbb] = [\n                _0x531fbb,\n                _0x2a4c95,\n                _0x1bfc6e,\n                _0x396f85\n            ];\n            break;\n        case 'S':\n            [_0x2a4c95, _0x1bfc6e, _0x396f85, _0x531fbb] = [\n                _0x1bfc6e,\n                _0x396f85,\n                _0x531fbb,\n                _0x2a4c95\n            ];\n            break;\n        case 'W':\n            [_0x2a4c95, _0x4b4497, _0x396f85, _0x4bd144] = [\n                _0x4bd144,\n                _0x2a4c95,\n                _0x4b4497,\n                _0x396f85\n            ];\n            break;\n        case 'E':\n            [_0x2a4c95, _0x4b4497, _0x396f85, _0x4bd144] = [\n                _0x4b4497,\n                _0x396f85,\n                _0x4bd144,\n                _0x2a4c95\n            ];\n            break;\n        }\n    }\n    console['log'](_0x2a4c95);\n});", "test_cases": [["1 2 4 8 16 32\nSE", "8"], ["1 2 4 8 16 32\nEESWN", "32"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\n\nconst reader = require(\"readline\").createInterface({\n  input: process.stdin,\n  output: process.stdout,\n});\n\nconst lines = [];\n\nreader.on(\"line\", (line) => {\n  lines.push(line);\n});\n\nreader.on(\"close\", () => {\n  let [top, back, right, left, front, bottom] = lines[0].split(\" \").map(Number);\n  const rs = lines[1];\n  for (let i = 0; i < rs.length; i++) {\n    switch (rs[i]) {\n      case \"N\":\n        [top, front, bottom, back] = [back, top, front, bottom];\n        break;\n      case \"S\":\n        [top, front, bottom, back] = [front, bottom, back, top];\n        break;\n      case \"W\":\n        [top, left, bottom, right] = [right, top, left, bottom];\n        break;\n      case \"E\":\n        [top, left, bottom, right] = [left, bottom, right, top];\n        break;\n    }\n  }\n  console.log(top);\n});\n\n", "language": "JavaScript"}
{"filename": "p02651_1", "type": "JavaScript", "obfuscated": "function Main(_0x1969f1) {\n    let _0x3d834e = _0x1969f1['split']('\\x0a')[0x0], _0x34931b, _0x14de3b = new Array(_0x34931b), _0x5ddd0 = new Array(_0x34931b), _0x286fed = 0x0;\n    for (let _0x5324dc = 0x0; _0x5324dc < _0x3d834e; _0x5324dc++) {\n        _0x34931b = _0x1969f1['split']('\\x0a')[_0x5324dc * 0x3 + 0x1];\n        _0x14de3b = _0x1969f1['split']('\\x0a')[_0x5324dc * 0x3 + 0x2]['split']('\\x20');\n        _0x5ddd0 = _0x1969f1['split']('\\x0a')[_0x5324dc * 0x3 + 0x3]['split']('');\n        let _0xfe50e8;\n        for (let _0x484f8f = 0x0; _0x484f8f < _0x34931b; _0x484f8f++) {\n            _0xfe50e8 = _0x286fed ^ _0x14de3b[_0x484f8f];\n            if (_0x5ddd0[_0x484f8f] == 0x0) {\n                if (_0xfe50e8 == 0x0)\n                    _0x286fed = _0xfe50e8;\n            } else\n                _0x286fed = _0xfe50e8;\n        }\n        if (_0x286fed == 0x0) {\n            console['log'](0x0);\n        } else\n            console['log'](0x1);\n        _0x286fed = 0x0;\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n2\n1 2\n10\n2\n1 1\n10\n6\n2 3 4 5 6 7\n111000", "1\n0\n0"]], "original": "function Main(input) {\n  let t = input.split(\"\\n\")[0], n , a = new Array(n), s = new Array(n), x = 0;\n  \n  for (let i = 0; i < t; i++) {\n    n = input.split(\"\\n\")[i*3+1];\n    a = input.split(\"\\n\")[i*3+2].split(\" \");\n    s = input.split(\"\\n\")[i*3+3].split(\"\");\n\n    let tmp;\n\n    for (let j = 0; j < n; j++) {\n      tmp = x ^ a[j];\n      \n      if (s[j] == 0) {\n        if (tmp == 0) x = tmp;\n      } else x = tmp;      \n    }\n    \n    if (x == 0) {\n      console.log(0)\n    } else console.log(1);\n    \n    x = 0;\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02865_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar lines = [];\nvar reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', _0x3fb782 => {\n    lines['push'](_0x3fb782);\n});\nreader['on']('close', () => {\n    const _0x180784 = +lines[0x0];\n    console['log'](_0x180784 % 0x2 ? (_0x180784 - 0x1) / 0x2 : _0x180784 / 0x2 - 0x1);\n});", "test_cases": [["4", "1"], ["999999", "499999"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar lines = [];\nvar reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', (line) => {\n  lines.push(line);\n});\nreader.on('close', () => {\n    const N = +lines[0];\n\tconsole.log(N%2?(N-1)/2:N/2-1);\n});", "language": "JavaScript"}
{"filename": "p03246_1", "type": "JavaScript", "obfuscated": "line = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nn = parseInt(line[0x0]);\nv = line[0x1]['split']('\\x20');\nvar odds = {};\nvar even = {};\nfor (var i = 0x0; i < v['length']; i++) {\n    di = i & 0x1 ? even : odds;\n    di[v[i]] = !di[v[i]] ? 0x1 : di[v[i]] + 0x1;\n}\nvar a = [];\nvar b = [];\nfor (var k in odds)\n    a['push']({\n        'v': k,\n        'n': odds[k]\n    });\nfor (var k in even)\n    b['push']({\n        'v': k,\n        'n': even[k]\n    });\na['sort']((_0x51f170, _0xd91c6a) => _0xd91c6a['n'] - _0x51f170['n']);\nb['sort']((_0x461c64, _0x342e27) => _0x342e27['n'] - _0x461c64['n']);\nva = a[0x0];\nvb = b[0x0];\nif (va['v'] === vb['v']) {\n    if (va['n'] > vb['n'])\n        vb = !b[0x1] ? { 'n': 0x0 } : b[0x1];\n    else\n        va = !a[0x1] ? { 'n': 0x0 } : a[0x1];\n}\nlog = console['log'];\nlog(n / 0x2 - va['n'] + n / 0x2 - vb['n']);", "test_cases": [["4\n3 1 3 2", "1"], ["6\n105 119 105 119 105 119", "0"], ["4\n1 1 1 1", "2"]], "original": "line = require('fs')\n  .readFileSync('/dev/stdin', 'utf8')\n  .split('\\n')\n\nn = parseInt(line[0])\nv = line[1].split(' ')\n\nvar odds = {}\nvar even = {}\nfor (var i = 0; i < v.length; i++) {\n  di = i & 1 ? even : odds\n  di[v[i]] = !di[v[i]] ? 1 : di[v[i]] + 1\n}\n\nvar a = []\nvar b = []\nfor (var k in odds) a.push({ v: k, n: odds[k] })\nfor (var k in even) b.push({ v: k, n: even[k] })\n\na.sort((x, y) => y.n - x.n)\nb.sort((x, y) => y.n - x.n)\n\nva = a[0]\nvb = b[0]\nif (va.v === vb.v) {\n  if (va.n > vb.n) vb = !b[1] ? { n: 0 } : b[1]\n  else va = !a[1] ? { n: 0 } : a[1]\n}\n\nlog = console.log\n// log('n', n)\n// log('v', v)\n// log('sorted', a, b)\n// log('select', va, vb)\nlog(n / 2 - va.n + n / 2 - vb.n)\n", "language": "JavaScript"}
{"filename": "p03271_1", "type": "JavaScript", "obfuscated": "var p = require('fs')['readFileSync']('/dev/stdin', 'utf8');\np = p['split']('\\x0a')['map'](_0x42328c => +_0x42328c);\nconsole['log'](main());\nfunction main() {\n    var _0x55056f = 'No';\n    var _0x1c80d6 = p[0x0];\n    var _0x40cdc6 = 0x0;\n    for (i = 0x1; i <= _0x1c80d6; i++) {\n        while (_0x40cdc6 > i) {\n            if (p[i] !== i)\n                return _0x55056f;\n            i++;\n        }\n        var _0x2d4b6e = i;\n        while (p[_0x2d4b6e] !== i) {\n            _0x2d4b6e++;\n            if (p[_0x2d4b6e] !== _0x2d4b6e)\n                return _0x55056f;\n            _0x2d4b6e++;\n        }\n        _0x40cdc6 = _0x2d4b6e;\n        while (_0x2d4b6e > i) {\n            if (p[_0x2d4b6e - 0x2] < p[_0x2d4b6e - 0x1])\n                return _0x55056f;\n            p[_0x2d4b6e] = p[_0x2d4b6e - 0x2];\n            _0x2d4b6e -= 0x2;\n        }\n    }\n    return 'Yes';\n}", "test_cases": [["5\n5\n2\n1\n4\n3", "Yes"], ["4\n3\n2\n4\n1", "No"], ["7\n3\n2\n1\n6\n5\n4\n7", "Yes"], ["6\n5\n3\n4\n1\n2\n6", "No"]], "original": "var p=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\np = p.split(\"\\n\").map(a=>+a);\nconsole.log(main());\nfunction main(){\n  var N = \"No\";\n  var n = p[0];\n  var t = 0;\n  for(i = 1; i <= n; i++){\n    while(t > i){if(p[i] !== i)return N;i++;}\n    var j = i;\n    while(p[j] !== i){\n      j++;\n      if(p[j] !== j)return N;\n      j++;\n    }\n    t = j;\n    while(j > i){\n      if(p[j-2] < p[j-1])return N;\n      p[j] = p[j-2]; j -= 2;\n    }\n  }\n  return \"Yes\";\n}", "language": "JavaScript"}
{"filename": "p03311_1", "type": "JavaScript", "obfuscated": "function Main(_0x2c1ace) {\n    _0x2c1ace = _0x2c1ace['split']('\\x0a');\n    if (_0x2c1ace[_0x2c1ace['length'] - 0x1] === '') {\n        _0x2c1ace['pop']();\n    }\n    const _0x413634 = _0x2c1ace[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x531537 = _0x2c1ace[0x1]['split']('\\x20')['map']((_0x9f2992, _0xe85f65) => {\n        return _0x9f2992 - _0xe85f65 - 0x1;\n    })['sort']((_0x2047dc, _0x42a9b2) => {\n        return _0x2047dc - _0x42a9b2;\n    });\n    console['log'](_0x531537['reduce']((_0x51fc96, _0x4a401e) => {\n        return _0x51fc96 + Math['abs'](_0x4a401e - _0x531537[Math['floor'](_0x531537['length'] / 0x2)]);\n    }, 0x0));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction permutation(_0x295aa8, _0x186959) {\n    var _0x25be6d = [[]];\n    var _0x4f8abd;\n    for (var _0x38aae3 = 0x0; _0x38aae3 < _0x186959; _0x38aae3++) {\n        _0x4f8abd = [];\n        _0x25be6d['forEach'](_0x400744 => {\n            for (var _0x330e4a = 0x1; _0x330e4a <= _0x295aa8; _0x330e4a++) {\n                if (!_0x400744['includes'](_0x330e4a)) {\n                    _0x4f8abd['push'](_0x400744['concat']([_0x330e4a]));\n                }\n            }\n        });\n        _0x25be6d = _0x4f8abd['concat']([]);\n    }\n    return _0x25be6d;\n}", "test_cases": [["5\n2 2 3 5 5", "2"], ["9\n1 2 3 4 5 6 7 8 9", "0"], ["6\n6 5 4 3 2 1", "18"], ["7\n1 1 1 1 2 3 4", "6"]], "original": "\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  var array=input[1].split(' ').map((e,i)=>{\n    return e-i-1;\n  }).sort((a,b)=>{\n    return a-b;\n  });\n  console.log(array.reduce((acc,cur)=>{\n    return acc+Math.abs(cur-array[Math.floor(array.length/2)]);\n  },0));\n\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction permutation(n,k){\n    var ret=[[]];\n    var next;\n    for(var i=0;i<k;i++){\n        next=[];\n        ret.forEach(e=>{\n            for(var k=1;k<=n;k++){\n                if(!e.includes(k)){\n                    next.push(e.concat([k]));\n                }\n            }\n        });\n        ret=next.concat([]);\n    }\n    return ret;\n}", "language": "JavaScript"}
{"filename": "p03380_1", "type": "JavaScript", "obfuscated": "function Main(_0x45afdf) {\n    _0x45afdf = _0x45afdf['split']('\\x0a');\n    var _0x2207f8 = _0x45afdf[0x1]['split']('\\x20')['map'](_0x49f667 => +_0x49f667);\n    const _0x514ce0 = +_0x45afdf[0x0];\n    var _0x56505a = Math['max'](..._0x2207f8);\n    var _0x56259b = [..._0x2207f8]['sort']((_0x24a63a, _0x5c31cf) => _0x24a63a - _0x5c31cf);\n    var _0x4036fe = 0x218711a00;\n    for (var _0x2dc108 = 0x0; _0x2dc108 < _0x514ce0 - 0x1; _0x2dc108++) {\n        if (Math['abs'](_0x56505a / 0x2 - _0x56259b[_0x2dc108]) < _0x4036fe)\n            _0x4036fe = Math['abs'](_0x56505a / 0x2 - _0x56259b[_0x2dc108]);\n        else\n            break;\n    }\n    console['log']('%d\\x20%d', _0x56505a, _0x56259b[_0x2dc108 - 0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n6 9 4 2 11", "11 6"], ["2\n100 0", "100 0"]], "original": "function Main(s) {\n  s = s.split(\"\\n\");\n  var a = s[1].split(\" \").map(a => +a);\n  const n = +s[0];\n  var m = Math.max(...a);\n  var b = [...a].sort((a,b)=> a-b);\n  var c = 9e9;\n  for(var i = 0; i < n - 1; i++){\n    if(Math.abs(m / 2 - b[i]) < c)c = Math.abs(m / 2 - b[i]);\n    else break;\n  }\n  console.log(\"%d %d\", m, b[i-1]);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03438_1", "type": "JavaScript", "obfuscated": "function Main(_0x4b62c6) {\n    _0x4b62c6 = _0x4b62c6['split']('\\x0a');\n    var _0x6f018e = parseInt(_0x4b62c6[0x0]);\n    a = new Array(_0x6f018e)['fill'](0x0);\n    b = new Array(_0x6f018e)['fill'](0x0);\n    tmpa = _0x4b62c6[0x1]['split']('\\x20');\n    tmpb = _0x4b62c6[0x2]['split']('\\x20');\n    var _0x35aa4c = 0x0;\n    var _0x529c9d = 0x0;\n    var _0x320cfc = 0x0;\n    for (i = 0x0; i < _0x6f018e; i++) {\n        a[i] = parseInt(tmpa[i]);\n        _0x35aa4c += a[i];\n        b[i] = parseInt(tmpb[i]);\n        _0x529c9d += b[i];\n        _0x320cfc += Math['abs'](a[i] - b[i]);\n    }\n    var _0x10db4f = 'No';\n    if (_0x35aa4c <= _0x529c9d && _0x320cfc <= (_0x529c9d - _0x35aa4c) * 0x3) {\n        _0x10db4f = 'Yes';\n    }\n    console['log']('%s', _0x10db4f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2 3\n5 2 2", "Yes"], ["5\n3 1 4 1 5\n2 7 1 8 2", "No"], ["5\n2 7 1 8 2\n3 1 4 1 5", "No"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n).fill(0);\n  b = new Array(n).fill(0);\n  tmpa = input[1].split(\" \");\n  tmpb = input[2].split(\" \");\n  var suma=0;\n  var sumb=0;\n  var dif=0;\n\n  for(i=0;i<n;i++){\n    a[i]=parseInt(tmpa[i]);\n    suma += a[i];\n    b[i]=parseInt(tmpb[i]);\n    sumb += b[i];\n    dif+=Math.abs(a[i]-b[i]);\n  }\n  var ans =\"No\";\n  if(suma<=sumb&&dif<=(sumb-suma)*3){\n    ans=\"Yes\";\n  }\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03559_1", "type": "JavaScript", "obfuscated": "function Main(_0x33fdbd) {\n    _0x33fdbd = _0x33fdbd['trim']()['split']('\\x0a')['map'](function (_0x23c4d0) {\n        return _0x23c4d0['split']('\\x20');\n    });\n    var _0x5eb95f = parseInt(_0x33fdbd[0x0][0x0], 0xa);\n    var _0x2d6bca = _0x33fdbd[0x1]['map'](_0x461fa2 => parseInt(_0x461fa2, 0xa));\n    var _0x29f5de = _0x33fdbd[0x2]['map'](_0x339202 => parseInt(_0x339202, 0xa));\n    var _0x531b6e = _0x33fdbd[0x3]['map'](_0x40b82f => parseInt(_0x40b82f, 0xa));\n    function _0x1c087f(_0xb5c71c, _0x2a8275) {\n        return _0x2a8275 - _0xb5c71c;\n    }\n    _0x2d6bca['sort'](_0x1c087f);\n    _0x29f5de['sort'](_0x1c087f);\n    _0x531b6e['sort'](_0x1c087f);\n    var _0x39c2e3 = 0x0;\n    var _0x2ef1d8 = -0x1;\n    var _0x497a04 = Array['from']({ 'length': _0x5eb95f }, () => 0x0);\n    var _0x2d9e57 = 0x0;\n    var _0x3a04a0 = 0x0;\n    for (var _0x32d286 = 0x0; _0x32d286 < _0x5eb95f; _0x32d286++) {\n        while (_0x39c2e3 < _0x5eb95f && _0x29f5de[_0x39c2e3] > _0x2d6bca[_0x32d286]) {\n            while (_0x2ef1d8 < _0x5eb95f - 0x1 && _0x531b6e[_0x2ef1d8 + 0x1] > _0x29f5de[_0x39c2e3]) {\n                _0x2ef1d8++;\n            }\n            if (_0x39c2e3 > 0x0)\n                _0x2d9e57 = _0x497a04[_0x39c2e3 - 0x1];\n            else\n                _0x2d9e57 = 0x0;\n            _0x497a04[_0x39c2e3] = _0x2d9e57 + _0x2ef1d8 + 0x1;\n            _0x39c2e3++;\n        }\n        _0x39c2e3 = Math['max'](0x0, _0x39c2e3 - 0x1);\n        _0x3a04a0 += _0x497a04[_0x39c2e3];\n    }\n    console['log'](_0x3a04a0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 5\n2 4\n3 6", "3"], ["3\n1 1 1\n2 2 2\n3 3 3", "27"], ["6\n3 14 159 2 6 53\n58 9 79 323 84 6\n2643 383 2 79 50 288", "87"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar N = parseInt(input[0][0], 10);\n\tvar vec_A = input[1].map(e => parseInt(e, 10));\n\tvar vec_B = input[2].map(e => parseInt(e, 10));\n\tvar vec_C = input[3].map(e => parseInt(e, 10));\n\tfunction compareFunc(a, b) {\n\t\treturn b - a;\n\t}\n\tvec_A.sort(compareFunc);\n\tvec_B.sort(compareFunc);\n\tvec_C.sort(compareFunc);\n\n\tvar s = 0;\n\tvar t = -1;\n\tvar vec_sumB = Array.from({length: N}, () => 0);\n\tvar tmpAdj = 0;  \n\tvar ans = 0;\n\tfor (var i = 0; i < N; i++){\n\t\twhile (s < N && vec_B[s] > vec_A[i]){\n\t\t\twhile (t < (N - 1) && vec_C[t + 1] > vec_B[s]){\n\t\t\t\tt ++;\n\t\t\t}\n\t\t\tif (s > 0) tmpAdj = vec_sumB[s - 1];\n\t\t\telse tmpAdj = 0;\n\t\t\tvec_sumB[s] = tmpAdj + t + 1;\n\t\t\ts ++;        \n\t\t}\n\t\ts = Math.max(0, s - 1);\n\t\tans += vec_sumB[s];\n\t}\t\n\tconsole.log(ans);\n}\n  \nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript"}
{"filename": "p03723_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x535633, _0xded3a) {\n    return _0xded3a ? cin['slice'](cid, cid += _0x535633) : cin['slice'](cid, cid += _0x535633)['map'](_0x1077bb => +_0x1077bb);\n}\nfunction nextm(_0x4c3b45, _0x14761d, _0x55150b) {\n    var _0x47f4bd = [], _0x231bc3 = 0x0;\n    if (_0x55150b)\n        for (; _0x231bc3 < _0x4c3b45; _0x231bc3++)\n            _0x47f4bd['push'](cin['slice'](cid, cid += _0x14761d));\n    else\n        for (; _0x231bc3 < _0x4c3b45; _0x231bc3++)\n            _0x47f4bd['push'](cin['slice'](cid, cid += _0x14761d)['map'](_0x2048df => +_0x2048df));\n    return _0x47f4bd;\n}\nfunction xArray(_0x31468a) {\n    var _0x34d2a3 = arguments, _0x233d69 = _0x34d2a3['length'], _0x39f933 = 'Array(a[' + --_0x233d69 + ']).fill().map(x=>{return\\x20' + _0x31468a + ';})';\n    while (--_0x233d69)\n        _0x39f933 = 'Array(a[' + _0x233d69 + ']).fill().map(x=>' + _0x39f933 + ')';\n    return eval(_0x39f933);\n}\nvar tm = +new Date() + 0x384;\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var [_0x5b15c6, _0x48676b, _0x1799c0] = nexts(0x3);\n    var _0x283c17 = 0x0;\n    while (new Date() < tm) {\n        if (_0x5b15c6 % 0x2 || _0x48676b % 0x2 || _0x1799c0 % 0x2)\n            return _0x283c17;\n        var _0x48e841 = _0x48676b + _0x1799c0 >> 0x1, _0x2a9c2b = _0x5b15c6 + _0x1799c0 >> 0x1, _0x324682 = _0x5b15c6 + _0x48676b >> 0x1;\n        _0x5b15c6 = _0x48e841, _0x48676b = _0x2a9c2b, _0x1799c0 = _0x324682;\n        _0x283c17++;\n    }\n    return -0x1;\n}", "test_cases": [["4 12 20", "3"], ["14 14 14", "-1"], ["454 414 444", "1"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar tm = +(new Date()) + 900;\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var [a,b,c] = nexts(3);\n  var cnt = 0;\n  while(new Date() < tm){\n    if(a % 2 || b % 2 || c % 2)return cnt;\n    var a2 = b+c >> 1, b2 = a+c >> 1, c2 = a+b >> 1;\n    a = a2, b = b2, c = c2;\n    cnt++;\n  }\n  return -1;\n}", "language": "JavaScript"}
{"filename": "p03731_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x244be1) {\n    _0x244be1 = _0x244be1['split']('\\x0a');\n    var _0x4b40d3 = _0x244be1[0x0]['split']('\\x20');\n    var _0x4e5ec5 = parseInt(_0x4b40d3[0x0]);\n    var _0x32360e = parseInt(_0x4b40d3[0x1]);\n    var _0x4bed2a = _0x244be1[0x1]['split']('\\x20');\n    for (var _0x26f5ac = 0x0; _0x26f5ac < _0x4e5ec5; _0x26f5ac++) {\n        _0x4bed2a[_0x26f5ac] = parseInt(_0x4bed2a[_0x26f5ac]);\n    }\n    var _0xf8a58f = 0x0;\n    var _0x12e5d7;\n    for (var _0x26f5ac = 0x1; _0x26f5ac < _0x4e5ec5; _0x26f5ac++) {\n        _0x12e5d7 = _0x4bed2a[_0x26f5ac] - _0x4bed2a[_0x26f5ac - 0x1];\n        if (_0x12e5d7 < _0x32360e) {\n            _0xf8a58f += _0x12e5d7;\n        } else {\n            _0xf8a58f += _0x32360e;\n        }\n    }\n    console['log'](_0xf8a58f + _0x32360e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 4\n0 3", "7"], ["2 4\n0 5", "8"], ["4 1000000000\n0 1000 1000000 1000000000", "2000000000"], ["1 1\n0", "1"], ["9 10\n0 3 5 7 100 110 200 300 311", "67"]], "original": "\"use strict\";\n\n// inputに入力データ全体が入る\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var input0 = input[0].split(\" \");\n  var N = parseInt(input0[0]);\n  var T = parseInt(input0[1]);\n  var t = input[1].split(\" \");\n  for (var i=0; i<N; i++) {\n    t[i] = parseInt(t[i]);\n  }\n  \n  var count = 0;\n  var t_i;\n  for (var i=1; i<N; i++) {\n    t_i = t[i]-t[i-1];\n    if (t_i<T) {\n      count += t_i;\n    } else {\n      count += T;\n    }\n  }\n  \n  console.log (count+T);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03761_1", "type": "JavaScript", "obfuscated": "function main(_0x4c8838) {\n    var _0x214404 = _0x4c8838[0x0] - 0x0;\n    var _0x135400 = [];\n    var _0x363f05 = {};\n    for (var _0x372f49 = 0x1; _0x372f49 <= _0x214404; _0x372f49++) {\n        var _0x332b45 = _0x4c8838[_0x372f49];\n        var _0xdbb7f7 = {};\n        for (var _0x14d435 = 0x0; _0x14d435 < _0x332b45['length']; _0x14d435++) {\n            _0xdbb7f7[_0x332b45[_0x14d435]] = _0xdbb7f7[_0x332b45[_0x14d435]] ? _0xdbb7f7[_0x332b45[_0x14d435]] + 0x1 : 0x1;\n            _0x363f05[_0x332b45[_0x14d435]] = 0x3c;\n        }\n        _0x135400['push'](_0xdbb7f7);\n    }\n    var _0x31ad59 = Object['keys'](_0x363f05)['sort']((_0x3306f6, _0x1d253d) => _0x3306f6 > _0x1d253d ? 0x1 : -0x1);\n    for (var _0x372f49 = 0x0; _0x372f49 < _0x214404; _0x372f49++) {\n        var _0x5f0e36 = _0x135400[_0x372f49];\n        for (var _0x14d435 = 0x0; _0x14d435 < _0x31ad59['length']; _0x14d435++) {\n            _0x363f05[_0x31ad59[_0x14d435]] = Math['min'](_0x363f05[_0x31ad59[_0x14d435]], _0x5f0e36[_0x31ad59[_0x14d435]] || 0x0);\n        }\n    }\n    var _0x35b50a = '';\n    _0x31ad59['forEach'](_0x5ac52f => {\n        for (var _0x4c221b = 0x0; _0x4c221b < _0x363f05[_0x5ac52f]; _0x4c221b++)\n            _0x35b50a += _0x5ac52f;\n    });\n    console['log'](_0x35b50a);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["3\ncbaa\ndaacc\nacacac", "aac"], ["3\na\naa\nb", ""]], "original": "function main(input) {\n    var n = input[0]-0;\n    var lists = [];\n    var ansmap = {};\n    for(var i=1;i<=n;i++){\n        var str = input[i];\n        var map = {};\n        for(var j=0;j<str.length;j++){\n            map[str[j]] = map[str[j]]?map[str[j]]+1:1;\n            ansmap[str[j]] = 60;\n        }\n        lists.push(map);\n    }\n    var keys = Object.keys(ansmap).sort((a,b)=>a>b?1:-1);\n    for(var i=0;i<n;i++){\n        var list = lists[i];\n        for(var j=0;j<keys.length;j++){\n            ansmap[keys[j]] = Math.min(ansmap[keys[j]], list[keys[j]]||0);\n        }\n    }\n    var ans = \"\";\n    keys.forEach(key=>{\n        for(var i=0;i<ansmap[key];i++) ans += key;\n    })\n    console.log(ans);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p03845_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('ascii');\nvar input_stdin = '';\nvar input_stdin_array = '';\nvar input_currentline = 0x0;\nprocess['stdin']['on']('data', function (_0x1dec88) {\n    input_stdin += _0x1dec88;\n});\nprocess['on']('SIGINT', function () {\n    input_stdin_array = input_stdin['split']('\\x0a');\n    main();\n    process['exit']();\n});\nprocess['stdin']['on']('end', function () {\n    input_stdin_array = input_stdin['split']('\\x0a');\n    main();\n});\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\nfunction main() {\n    var _0x17aa75 = parseInt(readLine());\n    var _0x19ccc7 = readLine()['split']('\\x20');\n    var _0x80ddab = [0x0];\n    var _0x47b273 = 0x0;\n    for (var _0xbab264 = 0x1; _0xbab264 <= _0x17aa75; _0xbab264++) {\n        _0x80ddab['push'](parseInt(_0x19ccc7[_0xbab264 - 0x1]));\n        _0x47b273 += _0x80ddab[_0xbab264];\n    }\n    var _0x440956 = parseInt(readLine());\n    for (var _0x1dc95b = 0x0; _0x1dc95b < _0x440956; _0x1dc95b++) {\n        _0x19ccc7 = readLine()['split']('\\x20');\n        var _0xbab264 = parseInt(_0x19ccc7[0x0]);\n        var _0x5932c3 = parseInt(_0x19ccc7[0x1]);\n        console['log'](_0x47b273 - _0x80ddab[_0xbab264] + _0x5932c3);\n    }\n}", "test_cases": [["3\n2 1 4\n2\n1 1\n2 3", "6\n9"], ["5\n7 2 3 8 5\n3\n4 2\n1 7\n4 13", "19\n25\n30"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.on('SIGINT', function(){\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();\n    process.exit();\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction main() {\n\tvar N = parseInt(readLine());\n\tvar s = readLine().split(\" \");\n\tvar T = [0];\n\tvar sum=0;\n\tfor (var i=1; i <= N; i++){\n\t\tT.push(parseInt(s[i-1]));\n\t\tsum += T[i];\n\t}\n\tvar M = parseInt(readLine());\n\tfor (var k=0; k < M; k++){\n\t\ts = readLine().split(\" \");\n\t\tvar i = parseInt(s[0]);\n\t\tvar x = parseInt(s[1]);\n\t\tconsole.log(sum - T[i] + x);\n\t}\n}\n", "language": "JavaScript"}
{"filename": "p03846_1", "type": "JavaScript", "obfuscated": "function Main(_0x501b9a) {\n    _0x501b9a = _0x501b9a['split']('\\x0a');\n    tmp = _0x501b9a[0x1]['split']('\\x20');\n    var _0x1e88c7 = Math['pow'](parseInt(tmp['length'] / 0x2), 0x2);\n    var _0xa418b1 = 0x0;\n    for (j = tmp['length'] - 0x1; j >= 0x0; j--) {\n        for (i = 0x0; i < tmp['length']; i++) {\n            if (tmp[i] == j) {\n                _0xa418b1++;\n            }\n        }\n        if (_0xa418b1 != 0x2 && j > 0x0) {\n            _0x1e88c7 = 0x0;\n            break;\n        }\n        if (_0xa418b1 != 0x1 && j == 0x0) {\n            _0x1e88c7 = 0x0;\n            break;\n        }\n        _0xa418b1 = 0x0;\n        j--;\n    }\n    _0x1e88c7 = _0x1e88c7 % (Math['pow'](0xa, 0x9) + 0x7);\n    console['log']('%s', _0x1e88c7);\n}\nfunction debug() {\n    var _0x226635 = document['getElementById']('input')['value'];\n    Main(_0x226635);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n2 4 4 0 2", "4"], ["7\n6 4 0 2 4 0 2", "0"], ["8\n7 5 1 1 7 3 5 3", "16"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    tmp = input[1].split(\" \");\n    var c = Math.pow(parseInt(tmp.length / 2) , 2);\n    var d = 0;\n    for(j=tmp.length-1;j>=0;j--){\n      for(i=0;i<tmp.length;i++){\n         if(tmp[i] == j){\n            d++;\n         }\n      }\n      if(d!=2 && j>0){\n         c = 0;\n         break;\n      }\n      if(d!=1 && j==0){\n         c = 0;\n         break;\n      }\n    d = 0;\n    j--;\n    }\n    c = c % (Math.pow(10,9)+7);\n    console.log('%s', c);\n}\n\nfunction debug(){\n\tvar input = document.getElementById(\"input\").value;\n\tMain(input);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03945_1", "type": "JavaScript", "obfuscated": "function Main(_0x168783) {\n    _0x168783 = _0x168783['split']('\\x0a');\n    var _0x49cfee = _0x168783[0x0];\n    if (_0x49cfee['match'](/BW/g)) {\n        var _0x57cd6f = _0x49cfee['match'](/BW/g)['length'];\n    } else {\n        _0x57cd6f = 0x0;\n    }\n    if (_0x49cfee['match'](/WB/g)) {\n        var _0x27c46e = _0x49cfee['match'](/WB/g)['length'];\n    } else {\n        _0x27c46e = 0x0;\n    }\n    console['log']('%s', _0x57cd6f + _0x27c46e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["BBBWW", "1"], ["WWWWWW", "0"], ["WBWBWBWBWB", "9"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var s = input[0];\n  if(s.match(/BW/g)){\n  var l1 = s.match(/BW/g).length;\n  }else{\n    l1=0;\n  }\n  if(s.match(/WB/g)){\n  var l2 = s.match(/WB/g).length;\n  }else{\n    l2=0;\n  }\n  console.log('%s', l1+l2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00031_1", "type": "JavaScript", "obfuscated": "(function (_0x26fe58) {\n    var _0x366684 = _0x26fe58['replace'](/\\n$/, '')['split']('\\x0a')['map'](Number);\n    var _0x31c701 = _0x366684['length'];\n    for (var _0x24d2ce = 0x0; _0x24d2ce < _0x31c701; _0x24d2ce++) {\n        var _0x118aef = _0x366684['shift']();\n        var _0x513296 = [];\n        _0x118aef['toString'](0x2)['split']('')['reverse']()['map'](function (_0x3cc5af, _0x3d24e3) {\n            if (_0x3cc5af == 0x1) {\n                _0x513296['push'](Math['pow'](0x2, _0x3d24e3));\n            }\n        });\n        console['log'](_0x513296['join']('\\x20'));\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["5\n7\n127", "1 4\n1 2 4\n1 2 4 8 16 32 64"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n').map(Number);\n  var n = p.length;\n  for (var i = 0; i < n; i++) {\n    var g = p.shift();\n    var s = [];\n    g.toString(2).split('').reverse().map(function(e, i) {\n      if (e == 1) {\n        s.push(Math.pow(2, i));\n      }\n    });\n    console.log(s.join(' '));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p00033_1", "type": "JavaScript", "obfuscated": "(function (_0x328f19) {\n    var _0x8e01e = _0x328f19['replace'](/\\n$/, '')['split']('\\x0a');\n    var _0x4ca79a = Number(_0x8e01e['shift']());\n    for (var _0x1cd07d = 0x0; _0x1cd07d < _0x4ca79a; _0x1cd07d++) {\n        var _0x5f4d9e = _0x8e01e['shift']()['split']('\\x20')['map'](Number);\n        console['log'](order(_0x5f4d9e));\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));\nfunction order(_0x45acd9) {\n    var _0x4a0274 = [];\n    var _0x51513e;\n    var _0x4f4db4 = _0x45acd9['shift']();\n    while (_0x51513e = _0x45acd9['shift']()) {\n        if (_0x51513e > _0x4f4db4) {\n            _0x4f4db4 = _0x51513e;\n            continue;\n        }\n        _0x4a0274['push'](_0x51513e);\n    }\n    var _0x28b3de = -Infinity;\n    while (_0x51513e = _0x4a0274['shift']()) {\n        if (_0x51513e > _0x28b3de) {\n            _0x28b3de = _0x51513e;\n            continue;\n        }\n        return 'NO';\n    }\n    return 'YES';\n}", "test_cases": [["2\n3 1 4 2 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "YES\nNO"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    var a = p.shift().split(' ').map(Number);\n    console.log(order(a));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction order(a) {\n  var r = [];\n  var x;\n  var c = a.shift();\n  while (x = a.shift()) {\n    if (x > c) {\n      c = x;\n      continue;\n    }\n    r.push(x);\n  }\n  var m = - Infinity;\n  while (x = r.shift()) {\n    if (x > m) {\n      m = x;\n      continue;\n    }\n    return 'NO';\n  }\n  return 'YES';\n}", "language": "JavaScript"}
{"filename": "p00101_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\ninput = input['split'](/\\n/);\nfor (let i = 0x1; i < input['length']; i++) {\n    console['log'](input[i]['replace']('Hoshino', 'Hoshina'));\n}", "test_cases": [["3\nHoshino\nHashino\nMasayuki Hoshino was the grandson of Ieyasu Tokugawa.", "Hoshina\nHashino\nMasayuki Hoshina was the grandson of Ieyasu Tokugawa."]], "original": "var input = require('fs').readFileSync(\"/dev/stdin\", \"utf8\").trim();\ninput = input.split(/\\n/);\nfor(let i=1;i<input.length;i++){\n  console.log(input[i].replace('Hoshino','Hoshina'));\n}", "language": "JavaScript"}
{"filename": "p00428_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var NM = Arr['shift']();\n    if (NM == '0\\x200')\n        break;\n    var nm = NM['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    var arr = [];\n    for (var i = 0x0; i < m; i++)\n        arr['push']({\n            'x': i + 0x1,\n            'sum': 0x0\n        });\n    for (var i = 0x0; i < n; i++) {\n        var data = Arr['shift']()['split']('\\x20')['map'](Number);\n        arr['forEach'](function (_0x7c9154, _0x35a01b) {\n            arr[_0x35a01b]['sum'] += data[_0x35a01b];\n        });\n    }\n    arr['sort'](function (_0x29bb6c, _0x319810) {\n        _0x29bb6c = _0x29bb6c['sum'];\n        _0x319810 = _0x319810['sum'];\n        return _0x319810 - _0x29bb6c;\n    });\n    var c = [];\n    arr['forEach'](function (_0x5255fe) {\n        c['push'](_0x5255fe['x']);\n    });\n    console['log'](c['join']('\\x20'));\n}", "test_cases": [["4 6\n1 0 1 0 1 1\n1 1 0 1 0 0\n1 1 1 0 0 0\n1 0 1 0 1 0\n4 6\n1 0 1 0 1 1\n1 1 0 1 0 0\n1 1 1 0 0 0\n1 0 1 0 1 0\n0 0", "1 3 2 5 4 6\n1 3 2 5 4 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var NM=Arr.shift();\n   if(NM==\"0 0\")break;\n   var nm=NM.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var arr=[];\n   for(var i=0;i<m;i++)arr.push({x:(i+1),sum:0});\n   for(var i=0;i<n;i++){\n      var data=(Arr.shift()).split(\" \").map(Number);\n      arr.forEach(function(v,j){arr[j].sum+=data[j];});\n   }\n   arr.sort(function(a,b){\n      a=a.sum;\n      b=b.sum;\n      return b-a;\n   });\n   var c=[];\n   arr.forEach(function(v){c.push(v.x);});\n   console.log(c.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p02315_1", "type": "JavaScript", "obfuscated": "function Main(_0x2d7482) {\n    _0x2d7482 = _0x2d7482['split']('\\x0a');\n    var _0x4a4999 = _0x2d7482[0x0]['split']('\\x20')['map'](Number);\n    var _0x5dc9a6 = _0x4a4999[0x1] - 0x0;\n    var _0x187dd7 = new Array(_0x4a4999[0x0] + 0x1);\n    for (var _0x5e84e0 = 0x0; _0x5e84e0 < _0x4a4999[0x0] + 0x1; _0x5e84e0++) {\n        _0x187dd7[_0x5e84e0] = new Array(_0x5dc9a6 + 0x1)['fill'](0x0);\n    }\n    for (var _0x41ab27 = 0x1; _0x41ab27 < _0x2d7482['length']; _0x41ab27++) {\n        var _0xd30cd1 = _0x2d7482[_0x41ab27]['split']('\\x20')['map'](Number);\n        for (var _0x2b112f = 0x0; _0x2b112f <= _0x5dc9a6; _0x2b112f++) {\n            if (_0x2b112f >= _0xd30cd1[0x1])\n                _0x187dd7[_0x41ab27][_0x2b112f] = Math['max'](_0x187dd7[_0x41ab27 - 0x1][_0x2b112f - _0xd30cd1[0x1]] + _0xd30cd1[0x0], _0x187dd7[_0x41ab27 - 0x1][_0x2b112f]);\n            else\n                _0x187dd7[_0x41ab27][_0x2b112f] = _0x187dd7[_0x41ab27 - 0x1][_0x2b112f];\n        }\n    }\n    console['log'](_0x187dd7[_0x4a4999[0x0]][_0x5dc9a6]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["4 5\n4 2\n5 2\n2 1\n8 3", "13"], ["2 20\n5 9\n4 10", "9"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar p = input[0].split(\" \").map(Number);\n\tvar max = p[1]-0;\n\tvar dp = new Array(p[0]+1);\n\t//.fill(new Array(max+1));\n\t//dp[0] = new Array(max+1).fill(0)\n\tfor(var n=0;n<p[0]+1;n++){\n\t    dp[n] = new Array(max+1).fill(0);\n\t}\n\t//\tconsole.log(dp)\n    for(var i=1;i<input.length;i++){\n    var mem = input[i].split(\" \").map(Number);\n    for(var j=0;j<=max;j++){\n        //console.log(i,j)\n      if(j>=mem[1]) dp[i][j] = Math.max(dp[i-1][j-mem[1]]+mem[0],dp[i-1][j])\n      else dp[i][j] = dp[i-1][j];\n    }\n  }\n  console.log(dp[p[0]][max])\n // console.log(dp)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p02708_1", "type": "JavaScript", "obfuscated": "const main = _0x550ec2 => {\n    const _0x4c085b = 0xa ** 0x9 + 0x7;\n    const [_0xacfbcc, _0x36656b] = _0x550ec2['trim']()['split']('\\x20')['map'](Number);\n    let _0x4d3bae = 0x0;\n    for (let _0x5bcdff = _0x36656b; _0x5bcdff <= _0xacfbcc + 0x1; _0x5bcdff++) {\n        const _0xb115b7 = (_0x5bcdff - 0x1) * _0x5bcdff / 0x2;\n        const _0x450f00 = _0xacfbcc - _0x5bcdff + 0x1;\n        const _0xdb9cae = (_0x450f00 + _0xacfbcc) * _0x5bcdff / 0x2;\n        _0x4d3bae += _0xdb9cae - _0xb115b7 + 0x1;\n    }\n    return console['log']((_0x4d3bae % _0x4c085b + _0x4c085b) % _0x4c085b);\n};\nprocess['env']['MYTEST'] ? process['env']['MYTEST'] === 'test' ? test() : main(require('fs')['readFileSync']('dev/stdin', 'utf8')) : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2", "10"], ["200000 200001", "1"], ["141421 35623", "220280457"]], "original": "const main = (input) => {\n  const mod = 10**9 + 7\n  const [n, k] = input.trim().split(' ').map(Number)\n  \n\n  let ans = 0\n\n  for (let i=k; i<=n+1; i++) {\n    const s_sum = (i-1) * i / 2\n\n    const b_f = n - i + 1\n\n    const b_sum = (b_f + n) * i / 2\n\n    ans += b_sum - s_sum + 1\n  }\n\n  return console.log((ans % mod + mod) % mod)\n}\n\nprocess.env.MYTEST\n  ? (process.env.MYTEST === 'test' ? test() : main(require('fs').readFileSync('dev/stdin', 'utf8')))\n  : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02850_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x110878) {\n    _0x110878 = _0x110878['trim']()['split']('\\x0a');\n    const _0x581b48 = Number(_0x110878['shift']());\n    let _0x1eac6c = [...new Array(_0x581b48)]['map'](_0x5d38dc => []);\n    let _0x114b86 = new Array();\n    _0x110878['forEach'](_0x28a23c => {\n        _0x28a23c = _0x28a23c['split']('\\x20')['map'](_0x520dd5 => _0x520dd5 - 0x1);\n        _0x1eac6c[_0x28a23c[0x0]]['push'](_0x28a23c[0x1]);\n        _0x1eac6c[_0x28a23c[0x1]]['push'](_0x28a23c[0x0]);\n        _0x114b86['push'](_0x28a23c[0x0] + '-' + _0x28a23c[0x1]);\n    });\n    let _0x361fe5 = 0x0;\n    let _0x395cb8 = new Map();\n    let _0x3c6e66 = new Array(_0x581b48)['fill'](0x0);\n    let _0x10870c = new Array(_0x581b48)['fill'](0x0);\n    let _0xf37375 = new Array();\n    _0x10870c[0x0] = 0x1;\n    _0xf37375['push'](0x0);\n    while (_0xf37375['length']) {\n        let _0x3f06f1 = _0xf37375['shift']();\n        if (_0x361fe5 < _0x1eac6c[_0x3f06f1]['length'])\n            _0x361fe5 = _0x1eac6c[_0x3f06f1]['length'];\n        let _0x2be3d2 = 0x1;\n        for (const _0x1f631d of _0x1eac6c[_0x3f06f1]) {\n            if (_0x10870c[_0x1f631d])\n                continue;\n            if (_0x2be3d2 === _0x3c6e66[_0x3f06f1])\n                _0x2be3d2++;\n            _0x3c6e66[_0x1f631d] = _0x395cb8[_0x1f631d + '-' + _0x3f06f1] = _0x395cb8[_0x3f06f1 + '-' + _0x1f631d] = _0x2be3d2++;\n            _0x10870c[_0x1f631d] = 0x1;\n            _0xf37375['push'](_0x1f631d);\n        }\n    }\n    console['log'](_0x361fe5);\n    _0x114b86['forEach'](_0x2756ce => {\n        console['log'](_0x395cb8[_0x2756ce]);\n    });\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 2\n2 3", "2\n1\n2"], ["8\n1 2\n2 3\n2 4\n2 5\n4 7\n5 6\n6 8", "4\n1\n2\n3\n4\n1\n1\n2"], ["6\n1 2\n1 3\n1 4\n1 5\n1 6", "5\n1\n2\n3\n4\n5"]], "original": "'use strict'\nfunction main(inp) {\n  inp = inp.trim().split('\\n')\n  const N = Number(inp.shift())\n  let G = [...new Array(N)].map(a => [])\n  let vp = new Array()\n  \n  inp.forEach(r => {\n    r = r.split(' ').map(n => n - 1)\n    G[r[0]].push(r[1])\n    G[r[1]].push(r[0])\n    vp.push(r[0]+'-'+r[1])\n  })\n\n  let K = 0;\n  let I = new Map()\n  let cs = new Array(N).fill(0)\n  let used = new Array(N).fill(0)\n  let que = new Array()\n\n  used[0] = 1\n  que.push(0)\n\n  while(que.length) {\n    let v = que.shift()\n    if (K < G[v].length) K = G[v].length\n    let cur = 1\n    for (const u of G[v]) {\n      if (used[u]) continue;\n      if (cur === cs[v]) cur++\n      cs[u] = I[u+'-'+v] = I[v+'-'+u] = cur++\n      used[u] = 1\n      que.push(u)\n    }\n  }\n\n  console.log(K)\n  vp.forEach(v => {\n    console.log(I[v])\n  })\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02883_1", "type": "JavaScript", "obfuscated": "function Main(_0x23820e) {\n    _0x23820e = _0x23820e['split']('\\x0a');\n    if (_0x23820e[_0x23820e['length'] - 0x1] === '') {\n        _0x23820e['pop']();\n    }\n    const _0x19979a = _0x23820e[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x9ce501 = _0x23820e[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x2949a0 = _0x23820e[0x1]['split']('\\x20')['map'](_0x202e46 => {\n        return _0x202e46 - 0x0;\n    })['sort']((_0x22245f, _0x2f1fa5) => {\n        return _0x22245f - _0x2f1fa5;\n    });\n    var _0x7abc1a = _0x23820e[0x2]['split']('\\x20')['map'](_0x720024 => {\n        return _0x720024 - 0x0;\n    })['sort']((_0x333480, _0x39117c) => {\n        return _0x39117c - _0x333480;\n    });\n    var _0xce6935 = 0x0;\n    for (var _0x1dabf1 = 0x0; _0x1dabf1 < _0x19979a; _0x1dabf1++) {\n        _0xce6935 = Math['max'](_0xce6935, _0x2949a0[_0x1dabf1] * _0x7abc1a[_0x1dabf1]);\n    }\n    var _0x3da4c2 = -0x1;\n    var _0x5ac7c0;\n    var _0x50473a;\n    while (_0xce6935 - _0x3da4c2 > 0x1) {\n        _0x5ac7c0 = Math['ceil']((_0x3da4c2 + _0xce6935) / 0x2);\n        _0x50473a = 0x0;\n        for (var _0x1dabf1 = 0x0; _0x1dabf1 < _0x19979a; _0x1dabf1++) {\n            _0x50473a += Math['max'](0x0, _0x2949a0[_0x1dabf1] - Math['floor'](_0x5ac7c0 / _0x7abc1a[_0x1dabf1]));\n        }\n        if (_0x50473a <= _0x9ce501) {\n            _0xce6935 = _0x5ac7c0;\n        } else {\n            _0x3da4c2 = _0x5ac7c0;\n        }\n    }\n    console['log'](_0xce6935);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 5\n4 2 1\n2 3 1", "2"], ["3 8\n4 2 1\n2 3 1", "0"], ["11 14\n3 1 4 1 5 9 2 6 5 3 5\n8 9 7 9 3 2 3 8 4 6 2", "12"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const K=input[0].split(' ')[1]-0;\n  var A=input[1].split(' ').map(e=>{\n    return e-0;\n  }).sort((a,b)=>{\n    return a-b;\n  });\n  var F=input[2].split(' ').map(e=>{\n    return e-0;\n  }).sort((a,b)=>{\n    return b-a;\n  });\n  var possible=0;\n  for(var i=0;i<N;i++){\n    possible=Math.max(possible,A[i]*F[i]);\n  }\n  var impossible=-1;\n  var temp;\n  var sum;\n  while(possible-impossible>1){\n    temp=Math.ceil((impossible+possible)/2);\n    sum=0;\n    for(var i=0;i<N;i++){\n      sum+=Math.max(0,A[i]-Math.floor(temp/F[i]));\n    }\n    if(sum<=K){\n      possible=temp;\n    }else{\n      impossible=temp;\n    }\n  }\n  console.log(possible);\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02960_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3a01cb) {\n    _0x3a01cb = _0x3a01cb['trim']();\n    const _0x36d783 = 0x3b9aca07;\n    let _0x4cef22 = [new Array(0xd)['fill'](0x0)];\n    _0x4cef22[0x0][0x0] = 0x1;\n    for (let _0x28f043 = 0x0; _0x28f043 < _0x3a01cb['length']; _0x28f043++) {\n        _0x4cef22[_0x28f043 + 0x1] = new Array(0xd)['fill'](0x0);\n        const _0x4c781c = _0x3a01cb[_0x28f043] === '?' ? -0x1 : _0x3a01cb[_0x28f043] - 0x0;\n        for (let _0x188938 = 0x0; _0x188938 < 0xa; _0x188938++) {\n            if (_0x4c781c !== -0x1 && _0x4c781c !== _0x188938)\n                continue;\n            for (let _0x341d1e = 0x0; _0x341d1e < 0xd; _0x341d1e++) {\n                _0x4cef22[_0x28f043 + 0x1][(_0x341d1e * 0xa + _0x188938) % 0xd] += _0x4cef22[_0x28f043][_0x341d1e];\n            }\n        }\n        for (let _0x4089b6 = 0x0; _0x4089b6 < 0xd; _0x4089b6++) {\n            _0x4cef22[_0x28f043 + 0x1][_0x4089b6] %= _0x36d783;\n        }\n    }\n    console['log'](_0x4cef22[_0x3a01cb['length']][0x5]);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["??2??5", "768"], ["?44", "1"], ["7?4", "0"], ["?6?42???8??2??06243????9??3???7258??5??7???????774????4?1??17???9?5?70???76???", "153716888"]], "original": "'use strict'\nfunction main(inp) {\n  inp = inp.trim()\n\n  const MOD = 1000000007\n  let dp = [new Array(13).fill(0)]\n  dp[0][0] = 1\n  \n  for (let i = 0; i < inp.length; i++) {\n    dp[i + 1] = new Array(13).fill(0)\n    const c = inp[i] === '?' ? -1 : inp[i] - 0\n    for (let j = 0; j < 10; j++) {\n      if (c !== -1 && c !== j) continue\n      for (let k = 0; k < 13; k++) {\n        dp[i+1][(k * 10 + j) % 13] += dp[i][k]\n      }\n    }\n    for (let j = 0; j < 13; j++) {\n      dp[i+1][j] %= MOD\n    }\n  }\n  console.log(dp[inp.length][5])\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p02990_1", "type": "JavaScript", "obfuscated": "function Main(_0x247512) {\n    _0x247512 = _0x247512['split']('\\x0a');\n    var _0x5873ae = parseInt(_0x247512[0x0]['split']('\\x20')[0x0]);\n    var _0x2ba7fb = parseInt(_0x247512[0x0]['split']('\\x20')[0x1]);\n    var _0x4d7243 = new Array();\n    var _0x4da21e = Math['pow'](0xa, 0x9) + 0x7;\n    for (var _0x21d04f = 0x1; _0x21d04f <= _0x2ba7fb; _0x21d04f++) {\n        var _0x338b4e = combination(_0x5873ae - _0x2ba7fb + 0x1, _0x21d04f) % _0x4da21e;\n        var _0x2c8104 = combination(_0x2ba7fb - 0x1, _0x21d04f - 0x1) % _0x4da21e;\n        var _0x400f52 = _0x338b4e * _0x2c8104 % _0x4da21e;\n        _0x4d7243['push'](_0x400f52);\n    }\n    var _0x9ee762 = _0x4d7243['join']('\\x0a');\n    console['log']('%s', _0x9ee762);\n    return _0x9ee762;\n}\nfunction permutation(_0x3fe7ab, _0x377110) {\n    for (var _0x1e7b42 = 0x0, _0x1c4dd0 = 0x1; _0x1e7b42 < _0x377110; _0x1e7b42++) {\n        _0x1c4dd0 *= _0x3fe7ab - _0x1e7b42;\n    }\n    return _0x1c4dd0;\n}\nfunction combination(_0x12211a, _0x124769) {\n    return permutation(_0x12211a, _0x124769) / permutation(_0x124769, _0x124769);\n}\nfunction debug(_0x3580d4) {\n    var _0x1674b2 = document['getElementById']('input' + _0x3580d4)['value'];\n    var _0x7023e8 = Main(_0x1674b2);\n    var _0x47afb6 = 'WA';\n    if (_0x7023e8 == document['getElementById']('output' + _0x3580d4)['value']['split']('\\x0a')[0x0]) {\n        _0x47afb6 = 'AC';\n    }\n    document['getElementById']('result' + _0x3580d4)['innerHTML'] = _0x47afb6;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3", "3\n6\n1"], ["2000 3", "1998\n3990006\n327341989"]], "original": "\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0].split(\" \")[0]);\n  var K = parseInt(input[0].split(\" \")[1]);\n  var anssub=new Array();\n  var mod =Math.pow(10,9)+7;\n  for(var i=1;i<=K;i++){\n    var a = combination(N-K+1,i)%mod;\n    var b = combination(K-1,i-1)%mod;\n    var c = a*b%mod;\n    anssub.push(c);\n  }\n  var ans = anssub.join(\"\\n\");\n\n  console.log('%s', ans);\n  return ans;\n}\nfunction permutation(n, r) {\n  for(var i = 0, res = 1; i < r; i++) {\n  res *= n - i;\n  }\n  return res;\n}\n  \nfunction combination(n, r) {\n  return permutation(n, r) / permutation(r, r);\n}\n\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03156_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x4ae317 => {\n    let _0x4f1ec3 = _0x4ae317['trim']()['split']('\\x0a');\n    let _0x799864 = Number(_0x4f1ec3[0x0]);\n    let _0x341442 = Number(_0x4f1ec3[0x1]['split']('\\x20')[0x0]);\n    let _0x38b3d2 = Number(_0x4f1ec3[0x1]['split']('\\x20')[0x1]);\n    let _0x26bf90 = [];\n    let _0x28d30a = [];\n    let _0x129e10 = [];\n    let _0x4460c2 = _0x4f1ec3[0x2]['split']('\\x20')['map'](_0x24e6bd => parseInt(_0x24e6bd, 0xa));\n    for (let _0x178e91 = 0x0; _0x178e91 < _0x799864; _0x178e91++) {\n        if (_0x4460c2[_0x178e91] <= _0x341442) {\n            _0x26bf90['push'](_0x4460c2[_0x178e91]);\n        } else if (_0x4460c2[_0x178e91] <= _0x38b3d2) {\n            _0x28d30a['push'](_0x4460c2[_0x178e91]);\n        } else {\n            _0x129e10['push'](_0x4460c2[_0x178e91]);\n        }\n    }\n    let _0x3ea192 = Math['min'](_0x26bf90['length'], _0x28d30a['length'], _0x129e10['length']);\n    console['log'](_0x3ea192);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\n5 15\n1 10 16 2 7 20 12", "2"], ["8\n3 8\n5 5 5 10 10 10 15 20", "0"], ["3\n5 6\n5 6 10", "1"]], "original": "\"use strict\";\nconst Main = (input) =>{\n   let xs = input.trim().split('\\n');\n   let N = Number(xs[0]);\n   let A = Number(xs[1].split(\" \")[0]);\n   let B = Number(xs[1].split(\" \")[1]);\n   let P1 = [];\n   let P2 = [];\n   let P3 = [];\n   let P = xs[2].split(' ').map(v=>parseInt(v,10));\n   \n   for(let i=0; i<N; i++){\n     if(P[i]<=A){\n       P1.push(P[i]);\n     }else if(P[i]<=B){\n       P2.push(P[i]);\n     }else{\n       P3.push(P[i])\n     }\n   }\n   let ans =Math.min(P1.length,P2.length,P3.length);\n   console.log(ans)\n}\nMain(require('fs').readFileSync('/dev/stdin','utf8'));", "language": "JavaScript"}
{"filename": "p03296_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction myin() {\n    return require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\n}\nfunction myout(_0x5df302) {\n    console['log'](_0x5df302);\n}\nfunction myconv(_0x37efdf, _0x4810b1) {\n    switch (_0x4810b1) {\n    case 0x0:\n        return _0x37efdf;\n    case 0x1:\n        return parseInt(_0x37efdf);\n    case 0x2:\n        return _0x37efdf['split']('\\x20');\n    case 0x3:\n        return _0x37efdf['split']('\\x0a');\n    case 0x4:\n        return _0x37efdf['split']('\\x20')['map'](_0x16191c => Number(_0x16191c));\n    case 0x5:\n        return _0x37efdf['split']('\\x0a')['map'](_0x4260a3 => Number(_0x4260a3));\n    case 0x6:\n        return _0x37efdf['split']('');\n    case 0x7:\n        return _0x37efdf['split']('')['map'](_0x33880c => Number(_0x33880c));\n    }\n}\nfunction Main(_0x10950f) {\n    _0x10950f = myconv(_0x10950f, 0x3);\n    var _0x59300b = myconv(_0x10950f[0x0], 0x1);\n    var _0x4eb45a = myconv(_0x10950f[0x1], 0x4);\n    var _0x45494c = 0x0;\n    for (var _0x528f89 = 0x0; _0x528f89 < _0x59300b - 0x1; _0x528f89++) {\n        var _0x5e4b6e = _0x4eb45a[_0x528f89];\n        var _0x680dea = _0x4eb45a[_0x528f89 + 0x1];\n        if (_0x5e4b6e == _0x680dea) {\n            _0x45494c++;\n            _0x4eb45a[_0x528f89 + 0x1] = -0x1;\n        }\n    }\n    myout(_0x45494c);\n}\nMain(myin());", "test_cases": [["5\n1 1 2 2 2", "2"], ["3\n1 2 1", "0"], ["5\n1 1 1 1 1", "2"], ["14\n1 2 2 3 3 3 4 4 4 4 1 2 3 4", "4"]], "original": "'use strict'\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  var N = myconv(input[0],1);\n  var list = myconv(input[1],4);\n  var output = 0;\n  for(var i = 0; i < N - 1; i++){\n    var mae = list[i];\n    var ato = list[i+1];\n    if(mae == ato){\n       output++;\n      list[i+1] = -1;\n       }\n  }\n  myout(output);\n}\n  \nMain(myin());\n", "language": "JavaScript"}
{"filename": "p03341_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3f873b => {\n    _0x3f873b = _0x3f873b['trim']()['split']('\\x0a');\n    const _0x3dc86a = parseInt(_0x3f873b[0x0]['split']('\\x20')[0x0]);\n    const _0x595eb1 = _0x3f873b[0x1]['split']('');\n    const _0x1ced04 = _0x595eb1['filter'](_0x70ff8a => _0x70ff8a === 'E')['length'];\n    const _0x31bc1e = _0x3dc86a - _0x1ced04;\n    let _0x395814 = 0x0;\n    let _0x236a66 = 0x0;\n    let _0x22e6e6 = Infinity;\n    for (let _0x142c4e = 0x0; _0x142c4e < _0x3dc86a; _0x142c4e++) {\n        const _0x59fff9 = _0x236a66;\n        let _0x2e8119 = _0x1ced04 - _0x395814;\n        if (_0x595eb1[_0x142c4e] === 'E') {\n            _0x2e8119--;\n        }\n        _0x22e6e6 = Math['min'](_0x22e6e6, _0x59fff9 + _0x2e8119);\n        if (_0x595eb1[_0x142c4e] === 'W') {\n            _0x236a66++;\n        } else {\n            _0x395814++;\n        }\n    }\n    console['log'](_0x22e6e6);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\nWEEWW", "1"], ["12\nWEWEWEEEWWWE", "4"], ["8\nWWWWWEEE", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const A = arg[1].split(\"\");\n    \n    const Rsum = A.filter(n=>n===\"E\").length;\n    const Lsum = N - Rsum;\n    \n    let Rcnt = 0;\n    let Lcnt = 0;\n    \n    let answer = Infinity;\n    \n    for(let i=0; i<N; i++) {\n        // 左半分\n        const needMoveLeft = Lcnt;\n        \n        // 右半分\n        let needMoveRight = Rsum - Rcnt;\n        \n        if(A[i] === \"E\") {\n            needMoveRight--;\n        }\n    \n        answer = Math.min(answer, needMoveLeft + needMoveRight);\n        \n        \n        if(A[i] === \"W\") {\n            Lcnt++;\n        } else {\n            Rcnt++;\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03346_1", "type": "JavaScript", "obfuscated": "console['log']((_0x2a1f6b => {\n    const [_0x528fd8, ..._0x41f860] = _0x2a1f6b['trim']()['split']('\\x0a')['map'](_0x2efe02 => _0x2efe02 | 0x0);\n    const _0x201339 = Array(_0x528fd8)['fill'](0x0);\n    for (let _0x37788c = 0x0; _0x37788c < _0x528fd8; _0x37788c++)\n        _0x201339[_0x41f860[_0x37788c] + 0x1] = _0x201339[_0x41f860[_0x37788c]] + 0x1;\n    return '' + (_0x528fd8 - _0x201339['reduce']((_0x1390a8, _0x48afde) => _0x1390a8 > _0x48afde ? _0x1390a8 : _0x48afde, 0x0));\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4\n1\n3\n2\n4", "2"], ["6\n3\n2\n5\n1\n4\n6", "4"], ["8\n6\n3\n1\n2\n7\n4\n8\n5", "5"]], "original": "console.log((args=>{\n  const [N,...P] = args.trim().split('\\n').map(v=>v|0);\n  const dp = Array(N).fill(0);\n  for ( let i = 0; i < N; i++ ) dp[P[i]+1] = dp[P[i]] + 1;\n  return `${N-dp.reduce((a,b)=>(a>b)?a:b,0)}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03524_1", "type": "JavaScript", "obfuscated": "function main(_0x162014) {\n    const _0x303a90 = _0x162014['trim']();\n    let _0x1e15c1 = _0x303a90['split']('')['reduce']((_0xbd38b4, _0x4e4474) => {\n        _0xbd38b4[_0x4e4474['charCodeAt']() - 'a'['charCodeAt']()]++;\n        return _0xbd38b4;\n    }, [\n        0x0,\n        0x0,\n        0x0\n    ]);\n    if (Math['max'](..._0x1e15c1) - Math['min'](..._0x1e15c1) >= 0x2) {\n        console['log']('NO');\n    } else {\n        console['log']('YES');\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abac", "YES"], ["aba", "NO"], ["babacccabab", "YES"]], "original": "function main(input) {\n  const s = input.trim()\n\n  let array = s.split('').reduce((a, c) => {\n    a[c.charCodeAt() - 'a'.charCodeAt()]++\n    return a\n  }, [0, 0, 0])\n\n  if (Math.max(...array) - Math.min(...array) >= 2) {\n    console.log('NO')\n  } else {\n    console.log('YES')\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p03660_1", "type": "JavaScript", "obfuscated": "function Main(_0x524038) {\n    _0x524038 = _0x524038['split']('\\x0a');\n    var _0x9f2601 = parseInt(_0x524038[0x0]);\n    a = new Array(_0x9f2601 - 0x1)['fill'](0x0);\n    b = new Array(_0x9f2601 - 0x1)['fill'](0x0);\n    for (i = 0x0; i < _0x9f2601 - 0x1; i++) {\n        tmp = _0x524038[i + 0x1]['split']('\\x20');\n        a[i] = parseInt(tmp[0x0]) - 0x1;\n        b[i] = parseInt(tmp[0x1]) - 0x1;\n    }\n    d1 = new Array(_0x9f2601)['fill'](_0x9f2601);\n    d1[0x0] = 0x0;\n    d2 = new Array(_0x9f2601)['fill'](_0x9f2601);\n    d2[_0x9f2601 - 0x1] = 0x0;\n    function _0x32b819(_0x3b4162, _0x70cdda) {\n        for (i = 0x0; i < _0x9f2601 - 0x1; i++) {\n            if (a[i] == _0x3b4162 && _0x70cdda[b[i]] > _0x70cdda[a[i]]) {\n                _0x70cdda[b[i]] = _0x70cdda[a[i]] + 0x1;\n                var _0x196ace = i;\n                _0x32b819(b[i], _0x70cdda);\n                i = _0x196ace;\n            }\n            if (b[i] == _0x3b4162 && _0x70cdda[a[i]] > _0x70cdda[b[i]]) {\n                _0x70cdda[a[i]] = _0x70cdda[b[i]] + 0x1;\n                var _0x196ace = i;\n                _0x32b819(a[i], _0x70cdda);\n                i = _0x196ace;\n            }\n        }\n        return _0x70cdda;\n    }\n    d1 = _0x32b819(0x0, d1);\n    d2 = _0x32b819(_0x9f2601 - 0x1, d2);\n    var _0x422517 = 0x0;\n    for (i = 0x0; i < _0x9f2601; i++) {\n        if (i != 0x0 && i != _0x9f2601 - 0x1) {\n            if (d1[i] <= d2[i]) {\n                _0x422517++;\n            }\n        }\n    }\n    var _0x4095e4 = 'Fennec';\n    if (_0x422517 <= _0x9f2601 - 0x2 - _0x422517) {\n        _0x4095e4 = 'Snuke';\n    }\n    console['log']('%s', _0x4095e4);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7\n3 6\n1 2\n3 1\n7 4\n5 7\n1 4", "Fennec"], ["4\n1 4\n4 2\n2 3", "Snuke"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  a = new Array(n-1).fill(0);\n  b = new Array(n-1).fill(0);\n  for(i=0;i<n-1;i++){\n    tmp = input[i+1].split(\" \");\n    a[i]=parseInt(tmp[0])-1;\n    b[i]=parseInt(tmp[1])-1;\n  }\n  d1 = new Array(n).fill(n);\n  d1[0]=0;\n  d2 = new Array(n).fill(n);\n  d2[n-1]=0;\n  function f(x,d){\n    for(i=0;i<n-1;i++){\n      if(a[i]==x&&d[b[i]]>d[a[i]]){\n        d[b[i]]=d[a[i]]+1;\n        var j =i;\n        f(b[i],d);\n        i=j;\n      }\n      if(b[i]==x&&d[a[i]]>d[b[i]]){\n        d[a[i]]=d[b[i]]+1;\n        var j =i;\n        f(a[i],d);\n        i=j;\n      }\n    }\n    return d;\n  }\n  d1=f(0,d1);\n  d2=f(n-1,d2);\n  var x=0;\n  for(i=0;i<n;i++){\n    if(i!=0&&i!=n-1){\n      if(d1[i]<=d2[i]){\n        x++;\n      }\n    }\n  }\n  var ans=\"Fennec\";\n  if(x<=n-2-x){\n    ans=\"Snuke\";\n  }\n\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03715_1", "type": "JavaScript", "obfuscated": "function Main(_0x2affa3) {\n    _0x2affa3 = _0x2affa3['trim']()['split']('\\x0a')['map'](function (_0x4328bf) {\n        return _0x4328bf['split']('\\x20');\n    });\n    var _0x36977e = parseInt(_0x2affa3[0x0][0x0], 0xa);\n    var _0x3fdc05 = parseInt(_0x2affa3[0x0][0x1], 0xa);\n    var _0x288429 = calc(_0x36977e, _0x3fdc05);\n    console['log'](_0x288429);\n}\nfunction calc(_0x527565, _0x4b570e) {\n    if (_0x527565 % 0x3 === 0x0 || _0x4b570e % 0x3 === 0x0)\n        return 0x0;\n    var _0x38f9df = _0x527565 * _0x4b570e;\n    var _0x566c74;\n    var _0x46c6d4 = _0x38f9df;\n    for (var _0x4bdb17 = 0x0; _0x4bdb17 <= _0x4b570e; _0x4bdb17++) {\n        _0x566c74 = Math['max'](Math['abs'](_0x4bdb17 * _0x527565 - (_0x4b570e - _0x4bdb17) * Math['ceil'](_0x527565 / 0x2)), Math['abs'](_0x4bdb17 * _0x527565 - (_0x4b570e - _0x4bdb17) * Math['floor'](_0x527565 / 0x2)), _0x527565 % 0x2 * (_0x4b570e - _0x4bdb17));\n        _0x38f9df = Math['min'](_0x38f9df, _0x566c74);\n        if (_0x566c74 > _0x46c6d4)\n            break;\n        _0x46c6d4 = _0x566c74;\n    }\n    [_0x4b570e, _0x527565] = [\n        _0x527565,\n        _0x4b570e\n    ];\n    _0x46c6d4 = _0x527565 * _0x4b570e;\n    for (var _0x4bdb17 = 0x0; _0x4bdb17 <= _0x4b570e; _0x4bdb17++) {\n        _0x566c74 = Math['max'](Math['abs'](_0x4bdb17 * _0x527565 - (_0x4b570e - _0x4bdb17) * Math['ceil'](_0x527565 / 0x2)), Math['abs'](_0x4bdb17 * _0x527565 - (_0x4b570e - _0x4bdb17) * Math['floor'](_0x527565 / 0x2)), _0x527565 % 0x2 * (_0x4b570e - _0x4bdb17));\n        _0x38f9df = Math['min'](_0x38f9df, _0x566c74);\n        if (_0x566c74 > _0x46c6d4)\n            break;\n        _0x46c6d4 = _0x566c74;\n    }\n    return Math['min'](_0x38f9df, _0x527565, _0x4b570e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 5", "0"], ["4 5", "2"], ["5 5", "4"], ["100000 2", "1"], ["100000 100000", "50000"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar H = parseInt(input[0][0], 10);\n\tvar W = parseInt(input[0][1], 10);\n\tvar ans = calc(H, W);\n\tconsole.log(ans);\n}\n\nfunction calc(H, W){\n\tif (H % 3 === 0 || W % 3 === 0) return 0;\n\tvar result = H * W;\n\tvar tmp;\n\tvar oldtmp = result;\n\tfor (var i = 0; i <= W; i++){\n\t\ttmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), (H % 2) * (W - i));\n\t\tresult = Math.min(result, tmp);\n\t\tif (tmp > oldtmp) break;\n\t\toldtmp = tmp;\n\t}\n\t[W, H] = [H, W];\n\toldtmp =  H * W;\n\tfor (var i = 0; i <= W; i++){\n\t\ttmp = Math.max(Math.abs(i * H - (W - i) * Math.ceil(H / 2)), Math.abs(i * H - (W - i) * Math.floor(H / 2)), (H % 2) * (W - i));\n\t\tresult = Math.min(result, tmp);\n\t\tif (tmp > oldtmp) break;\n\t\toldtmp = tmp;\n\t}\n\treturn Math.min(result, H, W);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript"}
{"filename": "p03987_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst lines = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nconst N = +lines[0x0];\nconst A = lines[0x1]['split']('\\x20');\nlet indices = [];\nfor (let i = 0x0; i < N; i++) {\n    A[i] = +A[i];\n    indices[indices['length']] = i;\n}\nindices = indices['sort']((_0x4cd73d, _0x5d3273) => A[_0x4cd73d] - A[_0x5d3273]);\nlet sum = 0x0, que = [[\n            0x0,\n            N - 0x1,\n            0x0\n        ]];\nwhile (que['length'] > 0x0) {\n    let lri = que['shift'](), left = lri[0x0], right = lri[0x1], index = lri[0x2];\n    if (left > right)\n        continue;\n    let i = index;\n    while (indices[i] < left || indices[i] > right)\n        i++;\n    let ind = indices[i];\n    sum += A[ind] * (ind - left + 0x1) * (right - ind + 0x1);\n    if (left <= ind - 0x1)\n        que[que['length']] = [\n            left,\n            ind - 0x1,\n            i + 0x1\n        ];\n    if (ind + 0x1 <= right)\n        que[que['length']] = [\n            ind + 0x1,\n            right,\n            i + 0x1\n        ];\n}\nconsole['log'](sum);", "test_cases": [["3\n2 1 3", "9"], ["4\n1 3 2 4", "19"], ["8\n5 4 8 1 2 6 7 3", "85"]], "original": "'use strict';\n\nconst lines = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nconst N = +lines[0];\nconst A = lines[1].split(' ');\n\nlet indices = [];\nfor (let i = 0; i < N; i++) {\n\tA[i] = +A[i];\n\tindices[indices.length] = i;\n}\n\nindices = indices.sort((a, b) => A[a] - A[b]);\n\nlet sum = 0,\n\tque = [[0, N - 1, 0]];\n\nwhile (que.length > 0) {\n\tlet lri = que.shift(),\n\t\tleft = lri[0],\n\t\tright = lri[1],\n\t\tindex = lri[2];\n\t\n\tif (left > right) continue;\n\t\n\tlet i = index;\n\twhile (indices[i] < left || indices[i] > right) i++;\n\tlet ind = indices[i];\n\t\n\tsum += A[ind] * (ind - left + 1) * (right - ind + 1);\n\tif (left <= ind - 1) que[que.length] = [left, ind - 1, i + 1];\n\tif (ind + 1 <= right) que[que.length] = [ind + 1, right, i + 1];\n}\n\nconsole.log(sum);", "language": "JavaScript"}
{"filename": "p04047_1", "type": "JavaScript", "obfuscated": "const main = _0x3bc8b2 => {\n    const _0x5a71d6 = _0x3bc8b2['split'](/\\n/);\n    const _0x4353d2 = _0x5a71d6[0x0];\n    const _0x1d55c8 = _0x5a71d6[0x1]['split'](/\\s/)['map'](_0x201b9a => parseInt(_0x201b9a, 0xa))['sort']((_0x3bed12, _0x4e8b51) => {\n        if (_0x3bed12 < _0x4e8b51)\n            return 0x1;\n        if (_0x3bed12 > _0x4e8b51)\n            return -0x1;\n        return 0x0;\n    });\n    var _0x2f4d3a = 0x0;\n    for (i = 0x0; i < _0x4353d2; i++) {\n        _0x2f4d3a += _0x1d55c8[i * 0x2 + 0x1];\n    }\n    console['log'](_0x2f4d3a);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 3 1 2", "3"], ["5\n100 1 2 3 14 15 58 58 58 29", "135"]], "original": "const main = (input) =>  {\n  const data = input.split(/\\n/);\n  const num = data[0]\n  const hoge = data[1].split(/\\s/).map((a) => parseInt(a, 10)).sort((a, b) => {\n    if (a < b ) return 1;\n    if (a > b ) return -1;\n    return 0;\n  })\n  var res = 0;\n  for (i = 0; i < num; i ++ ) {\n    res += (hoge[i*2 + 1]);\n  }\n  console.log(res)\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript"}
{"filename": "p00013_1", "type": "JavaScript", "obfuscated": "q = [];\nrequire('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['some'](function (_0x499ed8) {\n    _0x499ed8 != 0x0 ? q['push'](_0x499ed8) : console['log'](q['pop']());\n});", "test_cases": [["1\n6\n0\n8\n10\n0\n0\n0", "6\n10\n8\n1"]], "original": "q=[];require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){i!=0?q.push(i):console.log(q.pop())})", "language": "JavaScript"}
{"filename": "p00050_1", "type": "JavaScript", "obfuscated": "console['log'](require('fs')['readFileSync']('/dev/stdin', 'utf8')['replace'](/apple/, '\\x09')['replace'](/peach/, 'apple')['replace'](/\\t/, 'peach')['trim']());", "test_cases": [["the cost of one peach is higher than that of one apple.", "the cost of one apple is higher than that of one peach."]], "original": "console.log(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").replace(/apple/,'\\t').replace(/peach/,'apple').replace(/\\t/,'peach').trim())", "language": "JavaScript"}
{"filename": "p00058_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    (function (_0x19186d, _0x3f32ae, _0x462aa4, _0x485bee, _0x4de06a, _0x3233eb, _0x58e6eb, _0xc9c9d7) {\n        var _0x30764a;\n        var _0x2ceb83;\n        if (_0x462aa4 - _0x19186d !== 0x0)\n            _0x30764a = ((_0x485bee - _0x3f32ae) / (_0x462aa4 - _0x19186d))['toFixed'](0xb);\n        else\n            _0x30764a = Infinity;\n        if (_0x58e6eb - _0x4de06a !== 0x0)\n            _0x2ceb83 = (_0xc9c9d7 - _0x3233eb) / (_0x58e6eb - _0x4de06a)['toFixed'](0xb);\n        else\n            _0x2ceb83 = Infinity;\n        var _0x542a02 = 'NO';\n        if (_0x30764a == 0x0 && _0x2ceb83 == Infinity)\n            _0x542a02 = 'YES';\n        if (_0x2ceb83 == 0x0 && _0x30764a == Infinity)\n            _0x542a02 = 'YES';\n        if (_0x30764a == -0x1 * _0x2ceb83 && (_0x30764a != 0x0 && _0x2ceb83 != 0x0))\n            _0x542a02 = 'YES';\n        console['log'](_0x542a02);\n    }['apply'](null, arr));\n}", "test_cases": [["1.0 1.0 2.0 2.0 0.0 0.0 1.0 -1.0\n0.0 0.0 2.0 0.0 -1.0 2.0 2.0 2.0\n10.0 6.0 3.4 5.2 6.8 9.5 4.3 2.1\n2.5 3.5 2.5 4.5 -3.3 -2.3 6.8 -2.3", "YES\nNO\nNO\nYES"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   (function(x1, y1, x2, y2, x3, y3, x4, y4){\n      var k1;\n      var k2;\n      if(x2-x1!==0)k1=((y2-y1)/(x2-x1)).toFixed(11);\n      else k1=Infinity;\n      if(x4-x3!==0)k2=(y4-y3)/(x4-x3).toFixed(11);\n      else k2=Infinity;\n      var ans=\"NO\";\n      if(k1==0 && k2==Infinity)ans=\"YES\";\n      if(k2==0 && k1==Infinity)ans=\"YES\";\n      if(k1==(-1*k2) && (k1!=0 && k2!=0))ans=\"YES\";\n      console.log(ans);\n   }).apply(null,arr);\n}", "language": "JavaScript"}
{"filename": "p00070_1", "type": "JavaScript", "obfuscated": "function perm(_0x2026c1, _0x325de8, _0x2193fb, _0x13a584) {\n    var _0x19054c, _0x3d2545, _0x44279b = _0x2026c1['length'];\n    _0x2193fb = _0x2193fb || [];\n    if (_0x325de8 === 0x0) {\n        _0x13a584(_0x2193fb);\n    } else {\n        for (_0x3d2545 = 0x0; _0x3d2545 < _0x44279b; _0x3d2545++) {\n            _0x19054c = _0x2026c1['shift']();\n            _0x2193fb['push'](_0x19054c);\n            perm(_0x2026c1, _0x325de8 - 0x1, _0x2193fb, _0x13a584);\n            _0x2193fb['pop']();\n            _0x2026c1['push'](_0x19054c);\n        }\n    }\n}\nfunction main() {\n    input['forEach'](function (_0x63db2a) {\n        var _0x1ae291, _0x48b94d, _0x4be271 = 0x0;\n        if (_0x63db2a['trim']() === '')\n            return;\n        _0x63db2a = _0x63db2a['split']('\\x20')['map'](parseFloat);\n        _0x1ae291 = _0x63db2a[0x0];\n        _0x48b94d = _0x63db2a[0x1];\n        perm([\n            0x0,\n            0x1,\n            0x2,\n            0x3,\n            0x4,\n            0x5,\n            0x6,\n            0x7,\n            0x8,\n            0x9\n        ], _0x1ae291, [], function (_0x4e32ef) {\n            _0x4be271 += _0x4e32ef['reduce'](function (_0x488dbb, _0x13fbda, _0x41b328) {\n                return _0x488dbb + _0x13fbda * (_0x41b328 + 0x1);\n            }, 0x0) === _0x48b94d ? 0x1 : 0x0;\n        });\n        console['log'](_0x4be271);\n    });\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x3dbc06) {\n    input += _0x3dbc06;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["3 10\n3 1", "8\n0"]], "original": "function perm(xs, n, s, callback) {\n  var\n  x, i, len = xs.length;\n  s = s || [];\n  if(n === 0) {\n    callback(s);\n  }else{\n    for(i = 0; i < len; i++){\n      x = xs.shift();\n      s.push(x);\n      perm(xs, n - 1, s, callback);\n      s.pop();\n      xs.push(x);\n    }\n  }\n}\n\nfunction main() {\n  input.forEach(function(line) {\n    var\n    n, s,\n    r = 0;\n    if(line.trim() === '') return;\n    line = line.split(' ').map(parseFloat);\n    n = line[0]; s = line[1];\n    perm([0,1,2,3,4,5,6,7,8,9], n, [], function(xs) {\n      r += xs.reduce(function(m, x, i) {\n        return m + x * (i + 1);\n      }, 0) === s ? 1 : 0;\n    });\n    console.log(r);\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p02241_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nA = require('fs')['readFileSync'](config['input'], 'ascii')['trim']()['split'](config['newline'])['map'](function (_0x3109b9) {\n    return _0x3109b9['trim']()['split']('\\x20')['map'](Number);\n});\nn = Number(A['shift']()[0x0]);\ncnt = 0x1;\ncost = 0x0;\nconn = new Array(n);\nconn[0x0] = !![];\nfor (i = 0x1; i < n; i++)\n    conn[i] = ![];\nwhile (cnt < n) {\n    min = Number['MAX_SAFE_INTEGER'];\n    for (i in conn) {\n        if (!conn[i])\n            continue;\n        Ai = A[i];\n        for (j in conn) {\n            if (conn[j])\n                continue;\n            if (Ai[j] !== -0x1 && Ai[j] < min) {\n                min = Ai[j];\n                min_j = j;\n            }\n        }\n    }\n    conn[min_j] = !![];\n    cost += min;\n    cnt++;\n}\nconsole['log'](cost);", "test_cases": [["5\n -1 2 3 1 -1\n 2 -1 -1 4 -1\n 3 -1 -1 1 1\n 1 4 1 -1 3\n -1 -1 1 3 -1", "5"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nA = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline)\n  .map(function (line) { return line.trim().split(' ').map(Number); });\nn = Number(A.shift()[0]);\n\ncnt = 1;\ncost = 0;\nconn = new Array(n);\nconn[0] = true;\nfor (i = 1; i < n; i++) conn[i] = false;\n\nwhile (cnt < n) {\n  min = Number.MAX_SAFE_INTEGER;\n  for (i in conn) {\n    if (!conn[i]) continue;\n    Ai = A[i];\n    for (j in conn) {\n      if (conn[j]) continue;\n      if (Ai[j] !== -1 && Ai[j] < min) {\n        min = Ai[j];\n        min_j = j;\n      }\n    }\n  }\n  conn[min_j] = true;\n  cost += min;\n  cnt++;\n}\n\nconsole.log(cost);", "language": "JavaScript"}
{"filename": "p02720_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x1c0120) {\n    const _0x472b19 = parseInt(_0x1c0120[0x0]);\n    let _0x916f4f = 0x1;\n    let _0x1b6991 = 0x0;\n    while (!![]) {\n        const _0xc9e4a3 = (_0x916f4f + '')['split']('')['map'](_0x39071c => parseInt(_0x39071c));\n        let _0x435752 = !![];\n        for (let _0x1d64b2 = 0x1; _0x1d64b2 < _0xc9e4a3['length']; _0x1d64b2++) {\n            if (Math['abs'](_0xc9e4a3[_0x1d64b2] - _0xc9e4a3[_0x1d64b2 - 0x1]) > 0x1) {\n                _0x435752 = ![];\n                if (_0xc9e4a3[_0x1d64b2] === 0x9) {\n                    _0xc9e4a3[_0x1d64b2 - 0x1] += 0x1;\n                    _0xc9e4a3[_0x1d64b2] = 0x0;\n                } else {\n                    _0xc9e4a3[_0x1d64b2] += 0x1;\n                }\n                _0x916f4f = parseInt(_0xc9e4a3['join'](''));\n                break;\n            }\n        }\n        if (_0x435752) {\n            _0x1b6991++;\n            if (_0x1b6991 === _0x472b19) {\n                console['log'](_0x916f4f);\n                break;\n            }\n            _0x916f4f++;\n        }\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["15", "23"], ["1", "1"], ["13", "21"], ["100000", "3234566667"]], "original": "\"use strict\";\nfunction main(input) {\n  const k = parseInt(input[0]);\n  let i = 1;\n  let runruncounter = 0;\n  while(true){\n    const j =  (i+\"\").split(\"\").map(a => parseInt(a));\n    let judge = true;\n\n    for(let l=1;l<j.length;l++){\n      //console.log(i);\n      if(Math.abs(j[l]-j[l-1])>1){\n        judge = false;\n        if(j[l]===9){\n          j[l-1]+=1;\n          j[l]=0;\n        }else{\n          j[l]+=1;\n        }\n        //console.log(i +\" \" + j + \" \" + runruncounter  )\n        i = parseInt(j.join(\"\"));\n        break;\n      }\n    }\n\n    if(judge){\n      runruncounter++;\n      if(runruncounter===k){\n        console.log(i);\n        break;\n      }\n      i++;\n    }\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02845_1", "type": "JavaScript", "obfuscated": "function Main(_0x43d33d) {\n    _0x43d33d = _0x43d33d['trim']()['split']('\\x0a')['map'](function (_0x13ed53) {\n        return _0x13ed53['split']('\\x20');\n    });\n    var _0xec91d8 = parseInt(_0x43d33d[0x0][0x0], 0xa);\n    var _0x40547e = [\n        0x1,\n        0x0,\n        0x0\n    ];\n    var _0x3057f5, _0x236953, _0x51c6eb;\n    var _0x570643 = 0x3;\n    for (var _0x3512d1 = 0x1; _0x3512d1 < _0xec91d8; _0x3512d1++) {\n        _0x236953 = 0x0;\n        _0x3057f5 = parseInt(_0x43d33d[0x1][_0x3512d1], 0xa);\n        for (var _0x5a4dbc of _0x40547e) {\n            if (_0x5a4dbc === _0x3057f5)\n                _0x236953++;\n        }\n        _0x570643 *= _0x236953;\n        _0x570643 %= 0x3b9aca00 + 0x7;\n        for (var _0x211d41 = 0x0; _0x211d41 < 0x3; _0x211d41++) {\n            if (_0x40547e[_0x211d41] === _0x3057f5) {\n                _0x40547e[_0x211d41]++;\n                break;\n            }\n        }\n    }\n    console['log'](_0x570643);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n0 1 2 3 4 5", "3"], ["3\n0 0 0", "6"], ["54\n0 0 1 0 1 2 1 2 3 2 3 3 4 4 5 4 6 5 7 8 5 6 6 7 7 8 8 9 9 10 10 11 9 12 10 13 14 11 11 12 12 13 13 14 14 15 15 15 16 16 16 17 17 17", "115295190"]], "original": "function Main(input) {\n    input = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n    var N = parseInt(input[0][0], 10);\n    var RGBWithoutOrder = [1, 0, 0];\n    var tmp1, tmp2, flag;\n    var ans = 3;\n    for (var i = 1; i < N; i++){\n        tmp2 = 0;\n        tmp1 = parseInt(input[1][i], 10);\n        for (var x of RGBWithoutOrder){\n            if (x === tmp1) tmp2 ++;\n        }\n        ans *= tmp2;\n        ans %= (1e+9 + 7);\n\n        for (var j = 0; j < 3; j++){\n            if (RGBWithoutOrder[j] === tmp1){\n                RGBWithoutOrder[j] ++;\n                break;\n            }\n        }\n    }\n    console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03054_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x7c24de) {\n    _0x7c24de = _0x7c24de['split'](/\\s+/);\n    var _0x2c34c5 = _0x7c24de['shift']() - 0x0;\n    var _0x57d8fb = _0x7c24de['shift']() - 0x0;\n    var _0x2c4f1c = _0x7c24de['shift']() - 0x0;\n    var _0x10e241 = _0x7c24de['shift']() - 0x0;\n    var _0x30f529 = _0x7c24de['shift']() - 0x0;\n    var _0xeed81a = _0x7c24de['shift']();\n    var _0x3e8eb3 = _0x7c24de['shift']();\n    var _0x474ddf = [[\n            _0x30f529,\n            _0x30f529,\n            _0x10e241,\n            _0x10e241\n        ]];\n    for (let _0x1f16b5 = 0x0; _0x1f16b5 < _0x2c4f1c; _0x1f16b5++) {\n        _0x474ddf[_0x1f16b5 + 0x1] = [];\n        _0x474ddf[_0x1f16b5 + 0x1][0x0] = _0x474ddf[_0x1f16b5][0x0] - (_0xeed81a[_0x1f16b5] === 'L' ? 0x1 : 0x0);\n        _0x474ddf[_0x1f16b5 + 0x1][0x1] = _0x474ddf[_0x1f16b5][0x1] + (_0xeed81a[_0x1f16b5] === 'R' ? 0x1 : 0x0);\n        _0x474ddf[_0x1f16b5 + 0x1][0x2] = _0x474ddf[_0x1f16b5][0x2] - (_0xeed81a[_0x1f16b5] === 'U' ? 0x1 : 0x0);\n        _0x474ddf[_0x1f16b5 + 0x1][0x3] = _0x474ddf[_0x1f16b5][0x3] + (_0xeed81a[_0x1f16b5] === 'D' ? 0x1 : 0x0);\n        if (_0x474ddf[_0x1f16b5 + 0x1][0x0] === 0x0 || _0x474ddf[_0x1f16b5 + 0x1][0x1] === _0x57d8fb + 0x1 || _0x474ddf[_0x1f16b5 + 0x1][0x2] === 0x0 || _0x474ddf[_0x1f16b5 + 0x1][0x3] === _0x2c34c5 + 0x1) {\n            console['log']('NO');\n            return;\n        }\n        _0x474ddf[_0x1f16b5 + 0x1][0x0] = Math['min'](_0x474ddf[_0x1f16b5 + 0x1][0x0] + (_0x3e8eb3[_0x1f16b5] === 'R' ? 0x1 : 0x0), _0x57d8fb);\n        _0x474ddf[_0x1f16b5 + 0x1][0x1] = Math['max'](_0x474ddf[_0x1f16b5 + 0x1][0x1] - (_0x3e8eb3[_0x1f16b5] === 'L' ? 0x1 : 0x0), 0x1);\n        _0x474ddf[_0x1f16b5 + 0x1][0x2] = Math['min'](_0x474ddf[_0x1f16b5 + 0x1][0x2] + (_0x3e8eb3[_0x1f16b5] === 'D' ? 0x1 : 0x0), _0x2c34c5);\n        _0x474ddf[_0x1f16b5 + 0x1][0x3] = Math['max'](_0x474ddf[_0x1f16b5 + 0x1][0x3] - (_0x3e8eb3[_0x1f16b5] === 'U' ? 0x1 : 0x0), 0x1);\n    }\n    console['log']('YES');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 3\n2 2\nRRL\nLUD", "YES"], ["4 3 5\n2 2\nUDRRR\nLLDUD", "NO"], ["5 6 11\n2 1\nRLDRRUDDLRL\nURRDRLLDLRD", "NO"]], "original": "'use strict'\nfunction Main(input){\n  input=input.split(/\\s+/);\n  var H=input.shift()-0;\n  var W=input.shift()-0;\n  var N=input.shift()-0;\n  var sr=input.shift()-0;\n  var sc=input.shift()-0;\n  var S=input.shift();\n  var T=input.shift();\n  var dp=[[sc,sc,sr,sr]];\n  for(let i=0;i<N;i++){\n    dp[i+1]=[];\n    dp[i+1][0]=dp[i][0]-(S[i]==='L'?1:0);\n    dp[i+1][1]=dp[i][1]+(S[i]==='R'?1:0);\n    dp[i+1][2]=dp[i][2]-(S[i]==='U'?1:0);\n    dp[i+1][3]=dp[i][3]+(S[i]==='D'?1:0);\n    if(dp[i+1][0]===0||dp[i+1][1]===W+1||dp[i+1][2]===0||dp[i+1][3]===H+1){\n      console.log('NO');\n      return;\n    }\n    dp[i+1][0]=Math.min(dp[i+1][0]+(T[i]==='R'?1:0), W)\n    dp[i+1][1]=Math.max(dp[i+1][1]-(T[i]==='L'?1:0), 1)\n    dp[i+1][2]=Math.min(dp[i+1][2]+(T[i]==='D'?1:0), H)\n    dp[i+1][3]=Math.max(dp[i+1][3]-(T[i]==='U'?1:0), 1)\n  }\n  console.log('YES');\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03168_1", "type": "JavaScript", "obfuscated": "console['log'](function (_0x3021dd) {\n    const _0x180f87 = _0x3021dd['trim']()['split']('\\x0a')['map'](_0x5a9507 => _0x5a9507['split']('\\x20'));\n    const _0xf7df9a = _0x180f87['shift']()[0x0] | 0x0;\n    const _0xb8b9f4 = _0x180f87[0x0]['map'](parseFloat);\n    const _0x30db6e = Array(_0xf7df9a)['fill'](0x0)['map'](_0x257e48 => Array(_0xf7df9a + 0x1)['fill'](0x0));\n    _0x30db6e[0x0][0x0] = 0x1 - _0xb8b9f4[0x0];\n    _0x30db6e[0x0][0x1] = _0xb8b9f4[0x0];\n    for (let _0x5be182 = 0x0; _0x5be182 < _0xf7df9a - 0x1; _0x5be182++) {\n        for (let _0x54591f = 0x0; _0x54591f <= _0x5be182 + 0x1; _0x54591f++) {\n            _0x30db6e[_0x5be182 + 0x1][_0x54591f + 0x1] += _0x30db6e[_0x5be182][_0x54591f] * _0xb8b9f4[_0x5be182 + 0x1];\n            _0x30db6e[_0x5be182 + 0x1][_0x54591f] += _0x30db6e[_0x5be182][_0x54591f] * (0x1 - _0xb8b9f4[_0x5be182 + 0x1]);\n        }\n    }\n    return _0x30db6e[_0xf7df9a - 0x1]['slice']((_0xf7df9a + 0x1) / 0x2)['reduce']((_0x187ec1, _0x19a7be) => _0x187ec1 + _0x19a7be)['toString']();\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n0.30 0.60 0.80", "0.612"], ["1\n0.50", "0.5"], ["5\n0.42 0.01 0.42 0.99 0.42", "0.3821815872"]], "original": "console.log(function(args){\n  const tmp = args.trim().split('\\n').map( r=>r.split(' ') );\n  const N = tmp.shift()[0]|0;\n  const p = tmp[0].map(parseFloat);\n  const dp = Array(N).fill(0).map(r=>Array(N+1).fill(.0));\n  dp[0][0] = 1.0 - p[0];\n  dp[0][1] = p[0];\n  for ( let i = 0; i < N-1; i++ ) {\n    for ( let j = 0; j <= i + 1; j++ ) {\n      dp[i+1][j+1] += dp[i][j] * p[i+1];\n      dp[i+1][j] += dp[i][j] * (1.0-p[i+1]);\n    }\n  }\n  return dp[N-1].slice((N+1)/2).reduce((a,b)=>a+b).toString();\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03173_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x52b992) {\n    _0x52b992 = _0x52b992['trim']()['split'](/\\s+/)['map'](_0x12c1ed => _0x12c1ed - 0x0);\n    const _0x128b54 = _0x52b992['shift']();\n    const _0x28afa7 = _0x52b992;\n    var _0x3e8d59 = 0x0;\n    while (_0x28afa7['length'] > 0x1) {\n        let _0xc93c29 = _0x28afa7['splice'](_0x28afa7['indexOf'](Math['min']['apply'](null, _0x28afa7)), 0x1)[0x0];\n        let _0x3c5d19 = _0x28afa7['splice'](_0x28afa7['indexOf'](Math['min']['apply'](null, _0x28afa7)), 0x1)[0x0];\n        _0x28afa7['push'](_0xc93c29 + _0x3c5d19);\n        _0x3e8d59 += _0xc93c29 + _0x3c5d19;\n    }\n    console['log'](_0x3e8d59);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4\n10 20 30 40", "190"], ["5\n10 10 10 10 10", "120"], ["3\n1000000000 1000000000 1000000000", "5000000000"], ["6\n7 6 8 6 1 1", "68"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const N=input.shift();\n  const a=input;\n  \n  var ans=0;\n  while(a.length>1){\n    let x=a.splice(a.indexOf(Math.min.apply(null,a)),1)[0];\n    let y=a.splice(a.indexOf(Math.min.apply(null,a)),1)[0];\n    a.push(x+y);\n    ans+=x+y;\n  }\n  \n  console.log(ans);\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03268_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x283564) {\n    _0x283564 = _0x283564['split']('\\x0a');\n    const _0x589828 = _0x283564[0x0]['split']('\\x20');\n    let _0x3dd06a = parseInt(_0x589828[0x0]);\n    let _0x74a02 = parseInt(_0x589828[0x1]);\n    if (_0x74a02 % 0x2 === 0x0) {\n        console['log'](Math['floor'](_0x3dd06a / _0x74a02) ** 0x3 + Math['floor']((_0x3dd06a + _0x74a02 / 0x2) / _0x74a02) ** 0x3);\n    } else {\n        console['log'](Math['floor'](_0x3dd06a / _0x74a02) ** 0x3);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2", "9"], ["5 3", "1"], ["31415 9265", "27"], ["35897 932", "114191"]], "original": "\"use strict\";\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  const line0 = input[0].split(\" \");\n  let N = parseInt(line0[0]);\n  let K = parseInt(line0[1]);\n  if (K % 2 === 0) {\n    console.log(Math.floor(N / K) ** 3 + Math.floor((N + K / 2) / K) ** 3);\n  } else {\n    console.log(Math.floor(N / K) ** 3);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03347_1", "type": "JavaScript", "obfuscated": "console['log']((_0x387689 => {\n    const [_0x295718, ..._0xa4daf2] = _0x387689['trim']()['split']('\\x0a')['map'](_0x5c4aa3 => _0x5c4aa3 | 0x0);\n    if (_0xa4daf2[0x0] > 0x0)\n        return '-1';\n    let _0x153c9b = 0x0;\n    for (let _0x335062 = 0x1; _0x335062 < _0x295718; _0x335062++) {\n        if (_0xa4daf2[_0x335062] > _0x335062 || _0xa4daf2[_0x335062] > _0xa4daf2[_0x335062 - 0x1] + 0x1)\n            return '-1';\n        if (_0xa4daf2[_0x335062] === _0xa4daf2[_0x335062 - 0x1] + 0x1)\n            _0x153c9b++;\n        else if (_0xa4daf2[_0x335062] <= _0xa4daf2[_0x335062 - 0x1])\n            _0x153c9b += _0xa4daf2[_0x335062];\n    }\n    return '' + _0x153c9b;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4\n0\n1\n1\n2", "3"], ["3\n1\n2\n1", "-1"], ["9\n0\n1\n1\n0\n1\n2\n2\n1\n2", "8"]], "original": "console.log((args=>{\n  const [N,...A] = args.trim().split('\\n').map(v=>v|0);\n  if ( A[0] > 0 ) return '-1';\n  let m = 0;\n  for ( let i = 1; i < N; i++ ) {\n    if ( A[i] > i || A[i] > A[i-1]+1) return '-1'\n    if ( A[i] === A[i-1]+1 ) m++;\n    else if ( A[i] <= A[i-1] ) m += A[i];\n  }\n  return `${m}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03464_1", "type": "JavaScript", "obfuscated": "console['log']((_0x26f37d => {\n    const [[_0x14fcfd], _0x356074] = _0x26f37d['trim']()['split']`\\n`['map'](_0x209938 => _0x209938['split']` `['map'](_0x500bba => _0x500bba | 0x0));\n    let _0xd41f1e = 0x2, _0x3b2061 = 0x3;\n    for (let _0x1fa781 = _0x14fcfd - 0x2; _0x1fa781 >= 0x0; _0x1fa781--) {\n        if (_0x3b2061 + _0x356074[_0x1fa781 + 0x1] - 0x1 < _0x356074[_0x1fa781])\n            return '-1';\n        _0xd41f1e = Math['ceil'](_0xd41f1e / _0x356074[_0x1fa781]) * _0x356074[_0x1fa781];\n        _0x3b2061 = Math['floor'](_0x3b2061 / _0x356074[_0x1fa781]) * _0x356074[_0x1fa781] + _0x356074[_0x1fa781] - 0x1;\n    }\n    return _0xd41f1e + '\\x20' + _0x3b2061;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4\n3 4 3 2", "6 8"], ["5\n3 4 100 3 2", "-1"], ["10\n2 2 2 2 2 2 2 2 2 2", "2 3"]], "original": "console.log((args=>{\n  const [[K],A] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let min = 2, max = 3;\n  for ( let i = K-2; i >= 0; i-- ) {\n    if ( max + A[i+1] - 1 < A[i] ) return '-1';\n    min = Math.ceil(min/A[i])*A[i];\n    max = Math.floor(max/A[i])*A[i] + A[i] - 1;\n  }\n  return `${min} ${max}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03617_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x529f16, _0x3d75a4) {\n    return _0x3d75a4 ? cin['slice'](cid, cid += _0x529f16) : cin['slice'](cid, cid += _0x529f16)['map'](_0x28e446 => +_0x28e446);\n}\nfunction nextm(_0x11a6c3, _0x40bc9b, _0x3375b5) {\n    var _0x479ef4 = [], _0x1646eb = 0x0;\n    if (_0x3375b5)\n        for (; _0x1646eb < _0x11a6c3; _0x1646eb++)\n            _0x479ef4['push'](cin['slice'](cid, cid += _0x40bc9b));\n    else\n        for (; _0x1646eb < _0x11a6c3; _0x1646eb++)\n            _0x479ef4['push'](cin['slice'](cid, cid += _0x40bc9b)['map'](_0x534085 => +_0x534085));\n    return _0x479ef4;\n}\nfunction xArray(_0x3c000b) {\n    var _0x5d8be8 = arguments, _0x4c58f8 = _0x5d8be8['length'], _0x5e7d81 = 'Array(a[' + --_0x4c58f8 + ']).fill().map(x=>{return\\x20' + _0x3c000b + ';})';\n    while (--_0x4c58f8)\n        _0x5e7d81 = 'Array(a[' + _0x4c58f8 + ']).fill().map(x=>' + _0x5e7d81 + ')';\n    return eval(_0x5e7d81);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var [_0x2f5104, _0x2ea3bf, _0x17b348, _0x5e2f31] = nexts(0x4);\n    var _0x2e04ab = next();\n    if (_0x2f5104 * 0x2 < _0x2ea3bf)\n        _0x2ea3bf = _0x2f5104 * 0x2;\n    if (_0x2ea3bf * 0x2 < _0x17b348)\n        _0x17b348 = _0x2ea3bf * 0x2;\n    if (_0x17b348 * 0x2 < _0x5e2f31)\n        _0x5e2f31 = _0x17b348 * 0x2;\n    return BigInt(_0x2e04ab / 0x2 | 0x0) * BigInt(_0x5e2f31) + BigInt((_0x2e04ab & 0x1) * _0x17b348);\n}", "test_cases": [["20 30 70 90\n3", "150"], ["10000 1000 100 10\n1", "100"], ["10 100 1000 10000\n1", "40"], ["12345678 87654321 12345678 87654321\n123456789", "1524157763907942"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var [q,h,s,d] = nexts(4);\n  var n = next();\n  if(q*2 < h)h = q*2;\n  if(h*2 < s)s = h*2;\n  if(s*2 < d)d = s*2;\n  return BigInt(n/2|0)*BigInt(d) + BigInt((n&1)*s);\n}", "language": "JavaScript"}
{"filename": "p03637_1", "type": "JavaScript", "obfuscated": "function Main(_0x3d6fc9) {\n    _0x3d6fc9 = _0x3d6fc9['split']('\\x0a');\n    var _0x1ec0f6 = parseInt(_0x3d6fc9[0x0]);\n    tmp = _0x3d6fc9[0x1]['split']('\\x20');\n    a = new Array(_0x1ec0f6);\n    var _0x53adee = 0x0;\n    var _0x522602 = 0x0;\n    var _0x30c2c2 = 0x0;\n    for (i = 0x0; i < _0x1ec0f6; i++) {\n        a[i] = parseInt(tmp[i]);\n        if (a[i] % 0x4 == 0x0) {\n            _0x30c2c2++;\n        } else if (a[i] % 0x2 == 0x0) {\n            _0x522602++;\n        } else {\n            _0x53adee++;\n        }\n    }\n    var _0x5a16e8 = 'No';\n    if (_0x53adee <= _0x30c2c2) {\n        _0x5a16e8 = 'Yes';\n    } else if (_0x30c2c2 + 0x1 == _0x53adee && _0x522602 == 0x0) {\n        _0x5a16e8 = 'Yes';\n    }\n    console['log']('%s', _0x5a16e8);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n1 10 100", "Yes"], ["4\n1 2 3 4", "No"], ["3\n1 4 1", "Yes"], ["2\n1 1", "No"], ["6\n2 7 1 8 2 8", "Yes"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  var n = parseInt(input[0]);\n  tmp = input[1].split(\" \");\n  a = new Array(n);\n  var odd=0;\n  var even=0;\n  var four=0;\n  for(i=0;i<n;i++){\n    a[i]=parseInt(tmp[i]);\n    if(a[i]%4==0){\n      four++;\n    }else if(a[i]%2==0){\n      even++;\n    }else{\n      odd++;\n    }\n  }\n  var ans =\"No\";\n  if(odd<=four){\n    ans=\"Yes\";\n  }else if(four+1==odd&&even==0){\n    ans=\"Yes\";\n  }\n\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03778_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3eee85 => {\n    _0x3eee85 = _0x3eee85['split']('\\x20')['map'](_0x2e728d => parseInt(_0x2e728d));\n    const _0x26b24e = _0x3eee85[0x0];\n    const _0x24d702 = _0x3eee85[0x1];\n    const _0x35751d = _0x3eee85[0x2];\n    const _0x4e5b9b = _0x24d702 + _0x26b24e;\n    const _0x5a5b12 = _0x35751d + _0x26b24e;\n    let _0xdc84d4 = [];\n    if (_0x24d702 <= _0x35751d) {\n        _0xdc84d4 = [\n            _0x24d702,\n            _0x4e5b9b,\n            _0x35751d,\n            _0x5a5b12\n        ];\n    } else {\n        _0xdc84d4 = [\n            _0x35751d,\n            _0x5a5b12,\n            _0x24d702,\n            _0x4e5b9b\n        ];\n    }\n    if (_0xdc84d4[0x1] < _0xdc84d4[0x2]) {\n        console['log'](_0xdc84d4[0x2] - _0xdc84d4[0x1]);\n    } else {\n        console['log'](0x0);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf-8'));", "test_cases": [["3 2 6", "1"], ["3 1 3", "0"], ["5 10 1", "4"]], "original": "'use strict'\n\nconst main = (input) => {\n    input = input.split(' ').map(v => parseInt(v))\n    const W = input[0]\n    const a = input[1]\n    const b = input[2]\n    const aw = a + W\n    const bw = b + W\n\n    let arr = []\n    if(a <= b){\n        arr = [a, aw, b, bw]\n    }else{\n        arr = [b, bw, a, aw]\n    }\n    if(arr[1] < arr[2]){\n        console.log(arr[2] - arr[1])\n    }else{\n        console.log(0)\n    }\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf-8'))", "language": "JavaScript"}
{"filename": "p03815_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x2a513f => {\n    const _0x50f64a = _0x2a513f['trim']()['split']('\\x0a');\n    let _0xc28358 = Number(_0x50f64a[0x0]['split']('\\x20')[0x0]);\n    if (_0xc28358 % 0xb > 0x6) {\n        console['log'](Math['floor'](_0xc28358 / 0xb) * 0x2 + 0x2);\n    } else if (_0xc28358 % 0xb > 0x0) {\n        console['log'](Math['floor'](_0xc28358 / 0xb) * 0x2 + 0x1);\n    } else {\n        console['log'](Math['floor'](_0xc28358 / 0xb) * 0x2);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7", "2"], ["149696127901", "27217477801"]], "original": "'use strict'\nconst main = arg => {\n\tconst input = arg.trim().split(\"\\n\");\n\tlet x = Number(input[0].split(' ')[0])\n\tif(x % 11 > 6) {\n\t\tconsole.log(Math.floor(x / 11) * 2 + 2)\n\t} else if(x % 11 > 0) {\n\t\tconsole.log(Math.floor(x / 11) * 2 + 1)\n\t} else {\n\t\tconsole.log(Math.floor(x / 11) * 2)\n\t}\n}   \nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03946_1", "type": "JavaScript", "obfuscated": "function Main(_0x2787ac) {\n    _0x2787ac = _0x2787ac['split']('\\x0a');\n    tmp = _0x2787ac[0x0]['split']('\\x20');\n    var _0x13909d = parseInt(tmp[0x0]);\n    a = new Array(_0x13909d)['fill'](0x0);\n    for (i = 0x0; i < _0x13909d; i++) {\n        a[i] = parseInt(_0x2787ac[0x1]['split']('\\x20')[i]);\n    }\n    b = new Array(_0x13909d)['fill'](0x0);\n    var _0x34bfaa = Math['pow'](0xa, 0x9);\n    var _0x4e57f1 = -0x1;\n    for (i = 0x0; i < _0x13909d; i++) {\n        _0x34bfaa = Math['min'](_0x34bfaa, a[i]);\n        if (_0x4e57f1 < a[i] - _0x34bfaa) {\n            ans = 0x1;\n        }\n        if (_0x4e57f1 == a[i] - _0x34bfaa) {\n            ans++;\n        }\n        _0x4e57f1 = Math['max'](_0x4e57f1, a[i] - _0x34bfaa);\n    }\n    console['log']('%s', ans);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n100 50 200", "1"], ["5 8\n50 30 40 10 20", "2"], ["10 100\n7 10 4 5 9 3 6 8 2 1", "2"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var n = parseInt(tmp[0]);\n  a = new Array(n).fill(0);\n  for(i=0;i<n;i++){\n    a[i]=parseInt(input[1].split(\" \")[i]);\n  }\n  b = new Array(n).fill(0);\n  var min=Math.pow(10,9);\n  var max=-1;\n  for(i=0;i<n;i++){\n    min=Math.min(min,a[i]);\n    if(max<a[i]-min){\n      ans=1;\n    }\n    if(max==a[i]-min){\n      ans++;\n    }\n    max=Math.max(max,a[i]-min);\n  }\n  console.log('%s', ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04015_1", "type": "JavaScript", "obfuscated": "function main(_0x352328) {\n    _0x352328 = _0x352328['split']('\\x0a');\n    var _0x580eae = _0x352328[0x0]['split']('\\x20');\n    var _0x23434b = Number(_0x580eae[0x0]);\n    var _0x27097e = Number(_0x580eae[0x1]);\n    var _0xd037c5 = [0x0];\n    _0xd037c5 = _0xd037c5['concat'](_0x352328[0x1]['split']('\\x20')['map'](Number));\n    var _0x98161e = new Array(_0x23434b + 0x1);\n    for (var _0x471ce1 = 0x0; _0x471ce1 <= _0x23434b; ++_0x471ce1) {\n        _0x98161e[_0x471ce1] = new Array(_0x23434b + 0x1);\n        for (var _0x41d197 = 0x0; _0x41d197 <= _0x23434b; ++_0x41d197) {\n            _0x98161e[_0x471ce1][_0x41d197] = new Array(_0x27097e * _0x23434b + 0x1)['fill'](0x0);\n        }\n    }\n    for (var _0x471ce1 = 0x0; _0x471ce1 < _0x23434b; ++_0x471ce1)\n        _0x98161e[_0x471ce1][0x0][0x0] = 0x1;\n    for (var _0x471ce1 = 0x1; _0x471ce1 <= _0x23434b; ++_0x471ce1) {\n        for (var _0x41d197 = 0x1; _0x41d197 <= _0x471ce1; ++_0x41d197) {\n            for (var _0x348bd0 = 0x1; _0x348bd0 <= _0x27097e * _0x23434b; ++_0x348bd0) {\n                if (_0x348bd0 < _0xd037c5[_0x471ce1]) {\n                    _0x98161e[_0x471ce1][_0x41d197][_0x348bd0] = _0x98161e[_0x471ce1 - 0x1][_0x41d197][_0x348bd0];\n                } else {\n                    _0x98161e[_0x471ce1][_0x41d197][_0x348bd0] = _0x98161e[_0x471ce1 - 0x1][_0x41d197][_0x348bd0] + _0x98161e[_0x471ce1 - 0x1][_0x41d197 - 0x1][_0x348bd0 - _0xd037c5[_0x471ce1]];\n                }\n            }\n        }\n    }\n    var _0x449d18 = 0x0;\n    for (var _0x41d197 = 0x1; _0x41d197 <= _0x23434b; ++_0x41d197) {\n        _0x449d18 += _0x98161e[_0x23434b][_0x41d197][_0x41d197 * _0x27097e];\n    }\n    console['log'](_0x449d18);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 8\n7 9 8 9", "5"], ["3 8\n6 6 9", "0"], ["8 5\n3 6 2 8 7 6 5 9", "19"], ["33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "8589934591"]], "original": "function main(input) {\n  input = input.split('\\n');\n  var tmp = input[0].split(' ');\n\n  var N = Number(tmp[0]);\n  var A = Number(tmp[1]);\n\n  var x = [0];\n  x = x.concat(input[1].split(' ').map(Number));\n\n  var dp = new Array(N + 1);\n  for (var i = 0; i <= N; ++i) {\n    dp[i] = new Array(N + 1);\n    for (var j = 0; j <= N; ++j) {\n      dp[i][j] = new Array(A * N + 1).fill(0);\n    }\n  }\n\n  for (var i = 0; i < N; ++i) dp[i][0][0] = 1;\n\n  for (var i = 1; i <= N; ++i) {\n    for (var j = 1; j <= i; ++j) {\n      for (var k = 1; k <= A * N; ++k) {\n        if (k < x[i]) {\n          dp[i][j][k] = dp[i - 1][j][k];\n        } else {\n          dp[i][j][k] = dp[i - 1][j][k] + dp[i - 1][j - 1][k - x[i]];\n        }\n      }\n    }\n  }\n\n  var ans = 0;\n  for (var j = 1; j <= N; ++j) {\n    ans += dp[N][j][j * A];\n  }\n\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p00047_1", "type": "JavaScript", "obfuscated": "var a = 'A';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x1a1c8b) {\n    input = _0x1a1c8b['trim']()['split'](',');\n    if (input[0x0] == a)\n        a = input[0x1];\n    else if (input[0x1] == a)\n        a = input[0x0];\n});\nprocess['stdin']['on']('end', function () {\n    console['log'](a);\n});", "test_cases": [["B,C\nA,C\nC,B\nA,B\nC,B", "A"]], "original": "var a = 'A';\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk)\n{\n  input = chunk.trim().split(',');\n  if(input[0] == a)\n    a = input[1];\n  else if(input[1] == a)\n    a = input[0];\n});\nprocess.stdin.on('end', function(){console.log(a);});", "language": "JavaScript"}
{"filename": "p00056_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x231c26, _0x4178fb, _0x46ba1f, _0x58b8e7, _0x489e8e, _0x480884 = input['length'];\n    for (_0x231c26 = 0x0; _0x231c26 < _0x480884; _0x231c26++) {\n        _0x46ba1f = parseInt(input[_0x231c26], 0xa);\n        if (_0x46ba1f === 0x0)\n            break;\n        if (_0x46ba1f % 0x2 === 0x1) {\n            console['log'](0x0);\n            continue;\n        }\n        _0x58b8e7 = ~~(_0x46ba1f / 0x2);\n        for (_0x489e8e = 0x0, _0x4178fb = 0x0; primes[_0x4178fb] <= _0x58b8e7; _0x4178fb++) {\n            if (primes['indexOf'](_0x46ba1f - primes[_0x4178fb]) !== -0x1)\n                _0x489e8e++;\n        }\n        console['log'](_0x489e8e);\n    }\n}\nvar primes = function (_0x1e7d3b) {\n    var _0x53a8ed, _0x623de6, _0x325581, _0x12d771 = [0x2];\n    if (_0x1e7d3b < 0x2)\n        return [];\n    for (_0x53a8ed = 0x3; _0x53a8ed <= _0x1e7d3b; _0x53a8ed += 0x2) {\n        _0x325581 = !![];\n        for (_0x623de6 = 0x0; _0x12d771[_0x623de6] < _0x53a8ed * _0x53a8ed; _0x623de6++) {\n            if (_0x53a8ed % _0x12d771[_0x623de6] == 0x0) {\n                _0x325581 = ![];\n                break;\n            }\n        }\n        if (_0x325581) {\n            _0x12d771['push'](_0x53a8ed);\n        }\n    }\n    return _0x12d771;\n}(0xc350);\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x5b64c1) {\n    input += _0x5b64c1;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["10\n11\n0", "2\n0"]], "original": "function main() {\n  var\n  i, j, n, m, x,\n  len = input.length;\n  for(i = 0; i < len; i++) {\n    n = parseInt(input[i], 10);\n    if(n === 0) break;\n    if(n % 2 === 1){\n      console.log(0);\n      continue;\n    }\n    m = ~~(n / 2);\n    for(x = 0, j = 0; primes[j] <= m; j++) {\n      if(primes.indexOf(n - primes[j]) !== -1) x++;\n    }\n    console.log(x);\n  }\n}\n\nvar\nprimes = (function(n){\n  var\n  i, j, flag,\n  primes = [2];\n  if(n < 2) return [];\n  for(i = 3;i <= n; i += 2) {\n    flag = true;\n    for(j = 0; primes[j] < i*i; j++) {\n      if(i % primes[j] == 0) {\n        flag = false;\n        break;\n      }\n    }\n    if(flag) {\n      primes.push(i);\n    }\n  }\n  return primes;\n})(50000);\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00086_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nwhile (lines['length'] > 0x0) {\n    var path = [];\n    var line;\n    while ((line = lines['shift']()) != '0\\x200') {\n        var nums = line['split']('\\x20');\n        var from = +nums[0x0];\n        var to = +nums[0x1];\n        path[from] = (path[from] || 0x0) + 0x1;\n        path[to] = (path[to] || 0x0) + 0x1;\n    }\n    var odds = path['filter'](function (_0x3de5f0) {\n        return _0x3de5f0 % 0x2 == 0x1;\n    });\n    if (path[0x1] % 0x2 == 0x1 && path[0x2] % 0x2 == 0x1 && odds['length'] > 0x2)\n        console['log']('NG');\n    else\n        console['log']('OK');\n}", "test_cases": [["1 3\n3 4\n3 5\n3 6\n4 6\n4 7\n4 7\n5 6\n6 7\n5 8\n5 8\n6 8\n6 9\n7 9\n8 9\n9 2\n0 0\n1 3\n3 4\n3 4\n4 2\n0 0", "OK\nNG"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nwhile (lines.length > 0) {\n    var path = [];\n    var line;\n    while ((line = lines.shift()) != '0 0') {\n        var nums = line.split(' ');\n        var from = +nums[0];\n        var to = +nums[1];\n\n        path[from] = (path[from] || 0) +1;\n        path[to] = (path[to] || 0) +1;\n    }\n    var odds = path.filter(function(n){return n % 2 == 1});\n    if (path[1] % 2 == 1 && path[2] % 2 == 1 && odds.length > 2)\n        console.log('NG');\n    else\n        console.log('OK');\n}", "language": "JavaScript"}
{"filename": "p00102_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar data = [];\nvar N;\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    if (arr['length'] == 0x1) {\n        if (i == 0x0) {\n            N = arr[0x0];\n            continue;\n        }\n        var DATA = [];\n        for (var j = 0x0; j < N + 0x1; j++) {\n            DATA['push'](0x0);\n        }\n        for (var k = 0x0; k < N; k++) {\n            var v = data[k];\n            for (var l = 0x0; l < N + 0x1; l++) {\n                DATA[l] += v[l];\n            }\n            v = v['map'](function (_0x5f52f3) {\n                return ('\\x20\\x20\\x20\\x20\\x20' + _0x5f52f3)['slice'](-0x5);\n            });\n            console['log'](v['join'](''));\n        }\n        DATA = DATA['map'](function (_0x1e15ab) {\n            return ('\\x20\\x20\\x20\\x20\\x20' + _0x1e15ab)['slice'](-0x5);\n        });\n        console['log'](DATA['join'](''));\n        if (arr[0x0] == 0x0)\n            break;\n        data = [];\n        N = arr[0x0];\n    } else {\n        var sum = arr['reduce'](function (_0x13597c, _0x5bb5ce) {\n            return _0x13597c + _0x5bb5ce;\n        });\n        arr['push'](sum);\n        data['push'](arr);\n    }\n}", "test_cases": [["4\n52 96 15 20\n86 22 35 45\n45 78 54 36\n16 86 74 55\n4\n52 96 15 20\n86 22 35 45\n45 78 54 36\n16 86 74 55\n0", "52   96   15   20  183\n   86   22   35   45  188\n   45   78   54   36  213\n   16   86   74   55  231\n  199  282  178  156  815\n   52   96   15   20  183\n   86   22   35   45  188\n   45   78   54   36  213\n   16   86   74   55  231\n  199  282  178  156  815"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar data=[];\nvar N;\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   if(arr.length==1){\n      if(i==0){N=arr[0];continue;}\n      var DATA=[];\n      for(var j=0;j<N+1;j++){DATA.push(0);}\n      for(var k=0;k<N;k++){\n         var v=data[k];\n         for(var l=0;l<N+1;l++){DATA[l]+=v[l];}\n         v=v.map(function(val){return (\"     \"+val).slice(-5);});\n         console.log(v.join(\"\"));\n      }\n      DATA=DATA.map(function(val){return (\"     \"+val).slice(-5);});\n      console.log(DATA.join(\"\"));\n      if(arr[0]==0)break;\n      data=[];\n      N=arr[0];\n   }else{\n      var sum=arr.reduce(function(a,b){return a+b;});\n      arr.push(sum);\n      data.push(arr);\n   }\n}", "language": "JavaScript"}
{"filename": "p00741_1", "type": "JavaScript", "obfuscated": "function bomb(_0x3373ed, _0x3c945f) {\n    var _0x5dd8f7 = [\n        -0x1,\n        -0x1,\n        -0x1,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x1\n    ];\n    var _0x48881c = [\n        -0x1,\n        0x0,\n        0x1,\n        -0x1,\n        0x1,\n        -0x1,\n        0x0,\n        0x1\n    ];\n    for (var _0x1f8edb = 0x0; _0x1f8edb < 0x8; _0x1f8edb++) {\n        var _0x362358 = _0x3373ed + _0x5dd8f7[_0x1f8edb];\n        var _0x2e2b1b = _0x3c945f + _0x48881c[_0x1f8edb];\n        if (_0x362358 < 0x0 || _0x362358 >= H || _0x2e2b1b < 0x0 || _0x2e2b1b >= W)\n            continue;\n        if (yx[_0x362358][_0x2e2b1b] == 'a') {\n            yx[_0x362358][_0x2e2b1b] = cnt;\n            bomb(_0x362358, _0x2e2b1b);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var WH = Arr['shift']()['split']('\\x20')['map'](Number);\n    var W = WH[0x0];\n    var H = WH[0x1];\n    if (W == 0x0 && H == 0x0)\n        break;\n    var yx = [];\n    var Y, X;\n    for (var i = 0x0; i < H; i++) {\n        var str = Arr['shift']();\n        str = str['replace'](/1/g, 'a');\n        var arr = str['split']('\\x20');\n        yx['push'](arr);\n    }\n    var cnt = 0x0;\n    for (var i = 0x0; i < H; i++) {\n        for (var j = 0x0; j < W; j++) {\n            if (yx[i][j] == 'a') {\n                cnt++;\n                yx[i][j] = cnt;\n                bomb(i, j);\n            }\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["1 1\n0\n2 2\n0 1\n1 0\n3 2\n1 1 1\n1 1 1\n5 4\n1 0 1 0 0\n1 0 0 0 0\n1 0 1 0 1\n1 0 0 1 0\n5 4\n1 1 1 0 1\n1 0 1 0 1\n1 0 1 0 1\n1 0 1 1 1\n5 5\n1 0 1 0 1\n0 0 0 0 0\n1 0 1 0 1\n0 0 0 0 0\n1 0 1 0 1\n0 0", "0\n1\n1\n3\n1\n9"]], "original": "function bomb(y,x){\n   var dy=[-1,-1,-1,0,0,1,1,1];\n   var dx=[-1,0,1,-1,1,-1,0,1];\n   for(var i=0;i<8;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=H || xx<0 || xx>=W)continue;\n      if(yx[yy][xx]==\"a\"){yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var WH=(Arr.shift()).split(\" \").map(Number);\n   var W=WH[0];\n   var H=WH[1];\n   if(W==0 && H==0)break;\n      var yx=[];\n      var Y,X;\n      for(var i=0;i<H;i++){\n         var str=Arr.shift();\n         str=str.replace(/1/g,\"a\");\n         var arr=str.split(\" \");\n         yx.push(arr);\n      }\n     var cnt=0;\n     for(var i=0;i<H;i++){\n        for(var j=0;j<W;j++){\n           if(yx[i][j]==\"a\"){cnt++;yx[i][j]=cnt;bomb(i,j);}\n        }\n     }\n      console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p02262_1", "type": "JavaScript", "obfuscated": "const config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nconst line = require('fs')['readFileSync'](config['input'], 'utf-8')['split'](config['newline']);\nlet cnt = 0x0;\nconst isort = (_0x4b70f2, _0x3b3fb9) => {\n    for (let _0x26ec19 = _0x3b3fb9; _0x26ec19 < _0x4b70f2['length']; _0x26ec19++) {\n        let _0x425320 = _0x4b70f2[_0x26ec19];\n        let _0x2ff415 = _0x26ec19 - _0x3b3fb9;\n        while (_0x2ff415 >= 0x0 && _0x4b70f2[_0x2ff415] > _0x425320) {\n            _0x4b70f2[_0x2ff415 + _0x3b3fb9] = _0x4b70f2[_0x2ff415];\n            _0x2ff415 = _0x2ff415 - _0x3b3fb9;\n            cnt++;\n        }\n        _0x4b70f2[_0x2ff415 + _0x3b3fb9] = _0x425320;\n    }\n    return _0x4b70f2;\n};\nconst shellSort = _0x55d34d => {\n    const _0x54a86b = _0x55d34d['map']((_0x653b33, _0x96e1f0) => 0x3 * _0x96e1f0 + 0x1)['filter'](_0x4549dc => _0x4549dc <= _0x55d34d['length'])['reverse']();\n    console['log'](_0x54a86b['length']);\n    console['log'](_0x54a86b['map'](_0x1f63b9 => _0x1f63b9['toString']())['join']('\\x20'));\n    for (i = 0x0; i < _0x55d34d['length']; i++) {\n        _0x55d34d = isort(_0x55d34d, _0x54a86b[i]);\n    }\n    return _0x55d34d;\n};\nconst n = parseInt(line[0x0]);\nconst data = line['slice'](0x1, n + 0x1)['map'](_0x1c02d1 => parseInt(_0x1c02d1));\nconst sorted = shellSort(data);\nconsole['log'](cnt);\nconsole['log'](sorted['map'](_0x4a47a3 => _0x4a47a3['toString']())['join']('\\x0a'));", "test_cases": [["5\n5\n1\n4\n3\n2", "2\n4 1\n3\n1\n2\n3\n4\n5"], ["3\n3\n2\n1", "1\n1\n3\n1\n2\n3"]], "original": "const config = {\n    input: '/dev/stdin',\n    newline: '\\n'\n};\n\nconst line = require('fs').readFileSync(config.input, 'utf-8').split(config.newline);\n\nlet cnt = 0;\n\nconst isort = (arr, g) => {\n    for (let i = g; i < arr.length; i++) {\n        let v = arr[i];\n        let j = i - g;\n        while (j >= 0 && arr[j] > v) {\n            arr[j+g] = arr[j];\n            j = j - g;\n            cnt++;\n        }\n        arr[j+g] = v;\n    }\n\n    return arr;\n};\n\nconst shellSort = (arr) => {\n    const g = arr.map((_, i) => 3 * i + 1).filter(x => x <= arr.length).reverse();\n\n    console.log(g.length);\n    console.log(g.map(x => x.toString()).join(' '));\n\n    for (i = 0; i < arr.length; i++) {\n        arr = isort(arr, g[i]);\n    }\n\n    return arr;\n};\n\nconst n = parseInt(line[0]);\nconst data = line.slice(1, n+1).map(x => parseInt(x));\nconst sorted = shellSort(data);\n\nconsole.log(cnt);\nconsole.log(sorted.map(x => x.toString()).join('\\n'));\n\n", "language": "JavaScript"}
{"filename": "p02317_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x547821 = getInput();\n    var _0x12800b = _0x547821['split']('\\x0a');\n    var _0x3dbda3 = parseInt(_0x12800b[0x0]);\n    var _0x47adb6 = _0x12800b['slice'](0x1, _0x3dbda3 + 0x1)['map'](function (_0x3c2106) {\n        return parseInt(_0x3c2106);\n    });\n    console['log'](lis(_0x47adb6));\n}\nfunction lis(_0x3fbd99) {\n    var _0x2b9575 = [_0x3fbd99[0x0]];\n    for (var _0x5d491d = 0x1; _0x5d491d < _0x3fbd99['length']; _0x5d491d++) {\n        var _0x323b4f = _0x3fbd99[_0x5d491d];\n        _0x2b9575[search(_0x2b9575, _0x323b4f) + 0x1] = _0x323b4f;\n    }\n    return _0x2b9575['length'];\n}\nfunction search(_0x524606, _0x4c1304) {\n    var _0x50bcb2 = 0x0, _0x22e37c = _0x524606['length'];\n    if (_0x524606['length'] == 0x0 || _0x4c1304 <= _0x524606[0x0]) {\n        return -0x1;\n    }\n    while (_0x50bcb2 + 0x1 < _0x22e37c) {\n        var _0x85f145 = (_0x50bcb2 + _0x22e37c + 0x1) / 0x2;\n        if (_0x524606[_0x85f145] < _0x4c1304) {\n            _0x50bcb2 = _0x85f145;\n        } else {\n            _0x22e37c = _0x85f145;\n        }\n    }\n    return _0x50bcb2;\n}\nnodeJS = typeof require != 'undefined';\nfunction getInput() {\n    if (!nodeJS) {\n        return document['getElementById']('input')['value'];\n    }\n    return require('fs')['readFileSync']('/dev/stdin')['toString']();\n}\nif (nodeJS) {\n    main();\n}", "test_cases": [["5\n5\n1\n3\n2\n4", "3"], ["3\n1\n1\n1", "1"]], "original": "function main() {\n  var input = getInput();\n  var ls = input.split('\\n');\n\n  var n = parseInt(ls[0])\n  var nums = ls.slice(1, n+1).map(function(s) {\n    return parseInt(s);\n  })\n  \n  console.log(lis(nums))\n}\n\nfunction lis(xs) {\n  var table = [xs[0]];\n  for (var i = 1; i < xs.length; i++) {\n    var x = xs[i];\n    table[search(table, x) + 1] = x;\n  }\n  return table.length;\n}\n \n\n/**\n * Returns i s.t. table[i] < x && x <= table[i+1]\n */\nfunction search(table, x) {\n  var l = 0, h = table.length;\n  \n  if (table.length == 0 || x <= table[0]) {\n    return -1;\n  }\n  \n  while (l + 1 < h) {\n    var pivot = (l + h + 1) / 2;\n    if (table[pivot] < x) {\n      l = pivot;\n    } else {\n      h = pivot;\n    }\n  }\n  return l;\n}\n\nnodeJS = typeof require != 'undefined';\n\nfunction getInput() {\n  if (!nodeJS) {\n    return document.getElementById('input').value\n  }\n  return require('fs').readFileSync('/dev/stdin').toString();\n}\n\nif (nodeJS) {\n  main()\n}", "language": "JavaScript"}
{"filename": "p02633_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x3dd398 => {\n    let _0xc1be39 = parseInt(_0x3dd398);\n    let _0x4657bc = 0x168 / _0xc1be39;\n    _0x4657bc = String(_0x4657bc);\n    var _0x53b628 = _0x4657bc['replace']('.', '');\n    console['log'](_0x53b628);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["90", "4"], ["1", "360"]], "original": "\"use strict\";\n\nconst main = (arg) => {\n  let X = parseInt(arg);\n  let result = 360 / X;\n  result = String(result);\n  var answer = result.replace(\".\", \"\");\n  console.log(answer);\n};\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02744_1", "type": "JavaScript", "obfuscated": "function Main(_0x554a0e) {\n    var _0x43a609 = _0x554a0e[0x0] - 0x0;\n    var _0xe512a4 = [\n        'a',\n        'b',\n        'c',\n        'd',\n        'e',\n        'f',\n        'g',\n        'h',\n        'i',\n        'j',\n        'k'\n    ];\n    var _0x4b066f = {\n        0x0: [],\n        0x1: ['a']\n    };\n    for (var _0xb5ab12 = 0x2; _0xb5ab12 <= _0x43a609; _0xb5ab12++) {\n        _0x4b066f[_0xb5ab12] = [];\n        var _0x8cf959 = _0x4b066f[_0xb5ab12 - 0x1];\n        var _0x5781d6 = _0x4b066f[_0xb5ab12];\n        _0x8cf959['forEach'](_0x36c72b => {\n            var _0x4f3013 = 'a';\n            _0x36c72b['split']('')['forEach'](_0x4d9174 => {\n                _0x4f3013 = _0x4f3013 < _0x4d9174 ? _0x4d9174 : _0x4f3013;\n            });\n            var _0x6b855d = ![];\n            for (var _0xd8cfb5 = 0x0; _0xd8cfb5 < _0xe512a4['length'] - 0x1; _0xd8cfb5++) {\n                _0x5781d6['push'](_0x36c72b + _0xe512a4[_0xd8cfb5]);\n                if (_0x6b855d)\n                    break;\n                if (_0x4f3013 == _0xe512a4[_0xd8cfb5])\n                    _0x6b855d = !![];\n            }\n        });\n    }\n    console['log'](_0x4b066f[_0x43a609]['join']('\\x0a'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["1", "a"], ["2", "aa\nab"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n    var N = input[0]-0;\n    var list = [\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\", \"k\"];\n    var ans = {0:[], 1:[\"a\"]};\n    for(var i=2;i<=N;i++){\n        ans[i] = [];\n        var preAns = ans[i-1];\n        var nowAns = ans[i];\n        preAns.forEach(preans=>{\n            var max = \"a\";\n            preans.split(\"\").forEach(v=>{\n                max = max<v?v:max;\n            });\n            var endflg = false;\n            for(var i=0;i<list.length-1;i++){\n                nowAns.push(preans + list[i]);\n                \n                if(endflg) break;\n                if(max == list[i])endflg=true;\n            }\n        });\n        \n    }\n    console.log(ans[N].join(\"\\n\"));\n}\n\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\"));\n\n", "language": "JavaScript"}
{"filename": "p02792_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x52c049 => {\n    _0x52c049 = _0x52c049['trim']()['split']('\\x0a');\n    const _0xc439f3 = parseInt(_0x52c049[0x0]);\n    const _0x240ec6 = [];\n    for (let _0x8ce3fc = 0x0; _0x8ce3fc < 0xa; _0x8ce3fc++) {\n        _0x240ec6['push'](new Array(0xa)['fill'](0x0));\n    }\n    for (let _0x506acd = 0x1; _0x506acd <= _0xc439f3; _0x506acd++) {\n        const _0x56fd7a = String(_0x506acd);\n        const _0x30f567 = parseInt(_0x56fd7a[0x0]);\n        const _0x47b6de = parseInt(_0x56fd7a[_0x56fd7a['length'] - 0x1]);\n        _0x240ec6[_0x30f567][_0x47b6de]++;\n    }\n    let _0x325336 = 0x0;\n    for (let _0x2fa70d = 0x0; _0x2fa70d < 0xa; _0x2fa70d++) {\n        for (let _0x373df9 = 0x0; _0x373df9 < 0xa; _0x373df9++) {\n            _0x325336 += _0x240ec6[_0x2fa70d][_0x373df9] * _0x240ec6[_0x373df9][_0x2fa70d];\n        }\n    }\n    console['log'](_0x325336);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["25", "17"], ["1", "1"], ["100", "108"], ["2020", "40812"], ["200000", "400000008"]], "original": "\"use strict\";\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    \n    const cnt = [];\n    \n    for(let i=0; i<10; i++) {\n        cnt.push(new Array(10).fill(0));\n    }\n    \n    for(let i=1; i<=N; i++) {\n        const S = String(i);\n        const head = parseInt(S[0]);\n        const tail = parseInt(S[S.length-1]);\n        \n        cnt[head][tail]++;\n    }\n    \n    // console.log(cnt.join(\"\\n\"));\n    \n    let answer = 0;\n    \n    for(let i=0; i<10; i++) {\n        for(let j=0; j<10; j++) {\n            answer += cnt[i][j] * cnt[j][i];\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02846_1", "type": "JavaScript", "obfuscated": "function Main(_0x40581d) {\n    _0x40581d = _0x40581d['split']('\\x0a');\n    var _0x45a1f9 = _0x40581d[0x0]['split']('\\x20');\n    var _0x25a4fa = _0x40581d[0x1]['split']('\\x20');\n    var _0x51db54 = _0x40581d[0x2]['split']('\\x20');\n    for (var _0x3b325d = 0x0; _0x3b325d < 0x2; _0x3b325d++) {\n        _0x45a1f9[_0x3b325d] = Number(_0x45a1f9[_0x3b325d]);\n        _0x25a4fa[_0x3b325d] = Number(_0x25a4fa[_0x3b325d]);\n        _0x51db54[_0x3b325d] = Number(_0x51db54[_0x3b325d]);\n    }\n    var _0x3d8d3d = new Array(0x2);\n    _0x3d8d3d[0x0] = _0x45a1f9[0x0] * _0x25a4fa[0x0] - _0x45a1f9[0x0] * _0x51db54[0x0];\n    _0x3d8d3d[0x1] = _0x45a1f9[0x1] * _0x25a4fa[0x1] - _0x45a1f9[0x1] * _0x51db54[0x1];\n    var _0x44b637 = 0x0;\n    var _0x330255 = 0x1;\n    var _0x418c39 = 0x0;\n    var _0x1c09bc = -0x1;\n    if (_0x3d8d3d[0x0] == _0x3d8d3d[0x1] * -0x1) {\n        console['log']('infinity');\n    } else {\n        for (var _0x3b325d = 0x0; _0x3b325d < 0x1; _0x3b325d) {\n            _0x1c09bc++;\n            _0x330255 = _0x44b637;\n            _0x44b637 += _0x3d8d3d[_0x1c09bc % 0x2];\n            if (_0x44b637 * _0x330255 > 0x0) {\n                _0x3b325d = 0x1;\n            } else if (_0x44b637 == 0x0) {\n                _0x3b325d = 0x1;\n                _0x1c09bc++;\n            }\n        }\n        console['log'](_0x1c09bc - 0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 2\n10 10\n12 4", "1"], ["100 1\n101 101\n102 1", "infinity"], ["12000 15700\n3390000000 3810000000\n5550000000 2130000000", "113"]], "original": "function Main(input) {\n  input = input.split('\\n');\n  var T = input[0].split(' ');\n  var A = input[1].split(' ');\n  var B = input[2].split(' ');\n  for(var i=0; i<2; i++){\n  T[i] = Number(T[i]);\n  A[i] = Number(A[i]);\n  B[i] = Number(B[i]);\n  }\n  var sa = new Array(2);\n  sa[0] = T[0]*A[0]-T[0]*B[0];\n  sa[1] = T[1]*A[1]-T[1]*B[1];\n  var x = 0;\n  var xmae = 1;\n  var pm = 0;\n  var count = -1;\n  if(sa[0] == sa[1]*-1){\n     console.log('infinity');\n  }else{\n     for(var i=0; i<1; i){\n       count++;\n       xmae = x;\n       x += sa[count%2];\n       if(x*xmae > 0){\n          i = 1;\n          }else if(x == 0){\n                   i = 1;\n            count++;\n                   }\n     }\n    console.log(count-1);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03091_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction I(_0x52c3ea, _0x3bf4f6) {\n    this['_s'] = _0x52c3ea['split']('\\x0a');\n    this['_c'] = 0x0;\n    this['_l'] = 0x0;\n    this['_f'] = _0x3bf4f6 || Number;\n}\nI['prototype']['a'] = function () {\n    var _0x43acdd = this['_s'][this['_l']];\n    if (!_0x43acdd)\n        return;\n    var _0x413120 = _0x43acdd['trim']()['split']('\\x20');\n    var _0x309d8f = _0x413120[this['_c']];\n    this['_c']++;\n    if (_0x413120['length'] === this['_c']) {\n        this['_c'] = 0x0;\n        this['_l']++;\n    }\n    return this['_f'](_0x309d8f);\n};\nI['prototype']['l'] = function () {\n    var _0x34f3a8 = this['_s'][this['_l']];\n    if (!_0x34f3a8)\n        return;\n    this['_c'] = 0x0;\n    this['_l']++;\n    return _0x34f3a8['split']('\\x20')['map'](this['_f']);\n};\nmodule['exports'] = I;\nfunction main(_0x76a317) {\n    const _0x35a0e4 = new I(_0x76a317);\n    const _0xbc24c5 = _0x35a0e4['a']();\n    const _0x2bba3b = _0x35a0e4['a']();\n    const _0x5348e6 = [];\n    for (let _0x90169f = 0x1; _0x90169f <= _0xbc24c5; _0x90169f++) {\n        _0x5348e6[_0x90169f] = [];\n    }\n    for (let _0x38f620 = 0x0; _0x38f620 < _0x2bba3b; _0x38f620++) {\n        let _0x14db2b = _0x35a0e4['a']();\n        let _0xdb23e2 = _0x35a0e4['a']();\n        _0x5348e6[_0x14db2b]['push'](_0xdb23e2);\n        _0x5348e6[_0xdb23e2]['push'](_0x14db2b);\n    }\n    let _0x2ca7d7 = ![];\n    let _0x4d3786 = !![];\n    for (let _0x3c3e3e = 0x1; _0x3c3e3e <= _0xbc24c5; _0x3c3e3e++) {\n        if (_0x5348e6[_0x3c3e3e]['length'] === 0x6) {\n            _0x2ca7d7 = !![];\n        }\n        if (_0x5348e6[_0x3c3e3e]['length'] % 0x2 !== 0x0) {\n            _0x4d3786 = ![];\n        }\n    }\n    console['log'](_0x2ca7d7 && _0x4d3786 ? 'Yes' : 'No');\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 9\n1 2\n1 3\n2 3\n1 4\n1 5\n4 5\n1 6\n1 7\n6 7", "Yes"], ["3 3\n1 2\n2 3\n3 1", "No"], ["18 27\n17 7\n12 15\n18 17\n13 18\n13 6\n5 7\n7 1\n14 5\n15 11\n7 6\n1 9\n5 4\n18 16\n4 6\n7 2\n7 11\n6 3\n12 14\n5 2\n10 5\n7 8\n10 15\n3 15\n9 8\n7 15\n5 16\n18 15", "Yes"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s.split(\"\\n\");this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s[this._l];if(!l)return;this._c=0;this._l++;return l.split(\" \").map(this._f)};module.exports=I;\n\nfunction main(input) {\n  const o = new I(input);\n\n  const N = o.a();\n  const M = o.a();\n\n  const adj = [];\n  for (let i = 1; i <= N; i++) {\n    adj[i] = [];\n  }\n\n  for (let i = 0; i < M; i++) {\n    let ai = o.a();\n    let bi = o.a();\n    adj[ai].push(bi);\n    adj[bi].push(ai);\n  }\n\n  let flag1 = false;\n  let flag2 = true;\n  for (let i = 1; i <= N; i++) {\n    if (adj[i].length === 6) {\n      flag1 = true;\n    }\n\n    if (adj[i].length % 2 !== 0) {\n      flag2 = false;\n    }\n  }\n\n  console.log((flag1 && flag2) ? \"Yes\" : \"No\");\n\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03165_1", "type": "JavaScript", "obfuscated": "function main(_0x19ea5f) {\n    const _0x26d081 = _0x19ea5f['split']('\\x0a');\n    const _0xd867a2 = _0x26d081['shift']()['split']('');\n    const _0x30ff66 = _0x26d081['shift']()['split']('');\n    dp = [];\n    for (var _0x121e4f = 0x0; _0x121e4f <= _0xd867a2['length']; _0x121e4f++) {\n        dp['push'](Array(_0x30ff66['length'] + 0x1)['fill'](0x0));\n    }\n    for (var _0x121e4f = 0x1; _0x121e4f <= _0xd867a2['length']; _0x121e4f++) {\n        for (var _0x41a6b0 = 0x1; _0x41a6b0 <= _0x30ff66['length']; _0x41a6b0++) {\n            if (_0xd867a2[_0x121e4f - 0x1] == _0x30ff66[_0x41a6b0 - 0x1]) {\n                dp[_0x121e4f][_0x41a6b0] = Math['max'](dp[_0x121e4f][_0x41a6b0], dp[_0x121e4f - 0x1][_0x41a6b0 - 0x1] + 0x1);\n            } else {\n                dp[_0x121e4f][_0x41a6b0] = Math['max'](dp[_0x121e4f - 0x1][_0x41a6b0], dp[_0x121e4f][_0x41a6b0 - 0x1]);\n            }\n        }\n    }\n    var _0x121e4f = _0xd867a2['length'];\n    var _0x41a6b0 = _0x30ff66['length'];\n    var _0x41bdea = [];\n    while (_0x121e4f != 0x0 && _0x41a6b0 != 0x0) {\n        if (_0xd867a2[_0x121e4f - 0x1] == _0x30ff66[_0x41a6b0 - 0x1]) {\n            _0x41bdea['unshift'](_0xd867a2[_0x121e4f - 0x1]);\n            _0x121e4f--;\n            _0x41a6b0--;\n        } else {\n            if (dp[_0x121e4f - 0x1][_0x41a6b0] < dp[_0x121e4f][_0x41a6b0 - 0x1]) {\n                _0x41a6b0--;\n            } else {\n                _0x121e4f--;\n            }\n        }\n    }\n    console['log'](_0x41bdea['join'](''));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["axyb\nabyxb", "axb"], ["aa\nxayaz", "aa"], ["a\nz", ""], ["abracadabra\navadakedavra", "aaadara"]], "original": "function main(input){\n  const lines = input.split('\\n');\n  const S = lines.shift().split('');\n  const T = lines.shift().split('');\n\n//  console.log(S);\n//  console.log(T);\n\n  dp = []\n  for(var i=0;i<=S.length;i++){\n    dp.push( Array(T.length+1).fill(0) );\n  }\n\n  for(var i=1;i<=S.length;i++){\n    for(var j=1;j<=T.length;j++){\n      if(S[i-1]==T[j-1]){\n        dp[i][j]=Math.max(dp[i][j], dp[i-1][j-1]+1);\n      }else{\n        dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1]);\n      }\n    }\n  }\n\n  var i = S.length;\n  var j = T.length;\n  var result = [];\n  while(i!=0 &&  j!=0){\n//  console.log([i,j]);\n//  console.log([S[i-1],T[j-1]]);\n    if(S[i-1]==T[j-1]){\n      result.unshift(S[i-1]);\n      i--;\n      j--;\n    }else{\n      if(dp[i-1][j] < dp[i][j-1]){\n        j--;\n      }else{\n        i--;\n      }\n    }\n  }\n\n//  console.log(dp);\n  console.log(result.join(''));\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03170_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x567621) {\n    _0x567621 = _0x567621['trim']()['split'](/\\s+/)['map'](_0x42fd38 => _0x42fd38 - 0x0);\n    const _0x2507ab = _0x567621['shift']();\n    const _0x50e635 = _0x567621['shift']();\n    const _0x4f1f5b = _0x567621;\n    const _0x2c0e39 = new Array(_0x50e635 + 0x2)['fill']('tbd');\n    _0x2c0e39[_0x50e635 + 0x1] = !![];\n    for (let _0x3c37ed = _0x50e635 + 0x1; _0x3c37ed >= 0x0; _0x3c37ed--) {\n        if (_0x2c0e39[_0x3c37ed])\n            if (_0x2c0e39[_0x3c37ed - 0x1] === !![]) {\n                _0x3c37ed--;\n                continue;\n            }\n        for (let _0x13a70e = 0x1; _0x13a70e <= _0x4f1f5b[0x0]; _0x13a70e++)\n            if (_0x3c37ed - _0x13a70e >= 0x0)\n                if (_0x2c0e39[_0x3c37ed - _0x13a70e] === 'tbd')\n                    _0x2c0e39[_0x3c37ed - _0x13a70e] = ![];\n        if (!_0x2c0e39[_0x3c37ed])\n            for (let _0x58dd65 = 0x0; _0x58dd65 < _0x2507ab; _0x58dd65++)\n                if (_0x3c37ed - _0x4f1f5b[_0x58dd65] >= 0x0)\n                    _0x2c0e39[_0x3c37ed - _0x4f1f5b[_0x58dd65]] = !![];\n    }\n    if (_0x2c0e39[0x0])\n        console['log']('First');\n    else\n        console['log']('Second');\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 4\n2 3", "First"], ["2 5\n2 3", "Second"], ["2 7\n2 3", "First"], ["3 20\n1 2 3", "Second"], ["3 21\n1 2 3", "First"], ["1 100000\n1", "Second"]], "original": "'use strict';\n(function(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  const N=input.shift();\n  const K=input.shift();\n  const A=input;\n  const dp=new Array(K+2).fill('tbd');\n  \n  dp[K+1]=true;\n  for(let i=K+1;i>=0;i--){\n    if(dp[i])\n      if(dp[i-1]===true){\n        i--;\n        continue;\n      }\n      for(let j=1;j<=A[0];j++)\n        if(i-j>=0)\n          if(dp[i-j]==='tbd')\n            dp[i-j]=false;\n    if(!dp[i])\n      for(let a=0;a<N;a++)\n        if(i-A[a]>=0)\n          dp[i-A[a]]=true;\n  }\n  \n  if(dp[0])console.log('First');\n  else console.log('Second');\n})(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03197_1", "type": "JavaScript", "obfuscated": "function Main(_0x531843) {\n    _0x531843 = _0x531843['split']('\\x0a')['map'](Number);\n    _0x531843['shift']();\n    var _0x5e5ff5 = arrsum(_0x531843);\n    if (_0x5e5ff5 == _0x531843['length']) {\n        _0x5e5ff5 = 0x1;\n    }\n    if (_0x5e5ff5 % 0x2 == 0x1) {\n        console['log']('first');\n    } else {\n        console['log']('second');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());\nfunction arrsum(_0x11e025) {\n    var _0xa182f9 = 0x0;\n    for (var _0x532d71 = 0x0, _0x456ea2 = _0x11e025['length']; _0x532d71 < _0x456ea2; ++_0x532d71) {\n        _0xa182f9 += _0x11e025[_0x532d71];\n    }\n    ;\n    return _0xa182f9;\n}", "test_cases": [["2\n1\n2", "first"], ["3\n100000\n30000\n20000", "second"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\").map(Number);\n  input.shift();\n  var n = arrsum(input);\n  if(n==input.length){\n  n = 1;\n  }\n  if(n%2==1){\n  console.log(\"first\");\n  }else{\n  console.log(\"second\");\n  }\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\nfunction arrsum(arr){\n    var sum = 0;\n    for (var i=0,len=arr.length; i<len; ++i) {\n        sum += arr[i];\n    };\n    return sum;\n}\n", "language": "JavaScript"}
{"filename": "p03228_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x478f4d) {\n    const _0x36a65e = _0x478f4d['split']('\\x20');\n    let _0x15506c = parseInt(_0x36a65e[0x0], 0xa);\n    let _0x5f2028 = parseInt(_0x36a65e[0x1], 0xa);\n    const _0x476cfc = _0x36a65e[0x2];\n    for (let _0x49f21d = 0x0; _0x49f21d < _0x476cfc; _0x49f21d++) {\n        if (_0x49f21d % 0x2 == 0x0) {\n            if (_0x15506c % 0x2 == 0x1) {\n                _0x15506c--;\n            }\n            _0x5f2028 += _0x15506c / 0x2;\n            _0x15506c /= 0x2;\n        } else {\n            if (_0x5f2028 % 0x2 == 0x1) {\n                _0x5f2028--;\n            }\n            _0x15506c += _0x5f2028 / 0x2;\n            _0x5f2028 /= 0x2;\n        }\n    }\n    console['log'](_0x15506c, _0x5f2028);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 4 2", "5 3"], ["3 3 3", "1 3"], ["314159265 358979323 84", "448759046 224379523"]], "original": "'use strict';\n\nfunction Main(input) {\n    const tmp = input.split(' ');\n    let A = parseInt(tmp[0], 10);\n    let B = parseInt(tmp[1], 10);\n    const K = tmp[2];\n\n    for (let i = 0; i < K; i++) {\n        if (i % 2 == 0) {\n            if (A % 2 == 1) {\n                A--;\n            }\n            B += A / 2;\n            A /= 2;\n        } else {\n            if (B % 2 == 1) {\n                B--;\n            }\n            A += B / 2;\n            B /= 2;\n        }\n    }\n    console.log(A, B);\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03318_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5e2782) {\n    const _0x143d69 = Number(_0x5e2782['split']('\\x0a')[0x0]);\n    const _0x564d44 = [\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '19',\n        '29',\n        '39',\n        '49',\n        '59',\n        '69',\n        '79',\n        '89',\n        '99',\n        '199'\n    ];\n    const _0x25d58c = [\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        '10',\n        '11',\n        '12',\n        '13',\n        '14',\n        '15',\n        '16',\n        '17',\n        '18',\n        '19'\n    ];\n    let _0x40e30 = '99';\n    for (let _0x422fc3 = 0x0; _0x422fc3 <= 0x14; _0x422fc3++) {\n        for (let _0x18f54b = 0x0; _0x18f54b < _0x25d58c['length']; _0x18f54b++) {\n            _0x564d44['push'](_0x25d58c[_0x18f54b] + _0x40e30);\n        }\n        _0x40e30 += '9';\n    }\n    const _0x1a51e7 = _0x564d44['slice'](0x0, _0x143d69)['join']('\\x0a');\n    console['log'](_0x1a51e7);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "1\n2\n3\n4\n5\n6\n7\n8\n9\n19"]], "original": "'use strict'\n\nfunction main(s) {\n\n  const K = Number(s.split('\\n')[0]);\n\n  const list = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '19', '29', '39', '49', '59', '69', '79', '89', '99', '199'];\n\n  const head = ['2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19'];\n\n  let rest = '99';\n\n  for (let i = 0; i <= 20; i++) {\n    for (let j = 0; j < head.length; j++) {\n      list.push(head[j] + rest);\n    }\n    rest += '9';\n  }\n\n  const ans = list.slice(0, K).join('\\n');\n  console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03354_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4b1712) {\n    _0x4b1712 = _0x4b1712['trim']()['split'](/\\s+/)['map'](_0x22c39d => _0x22c39d - 0x0);\n    var _0x5c0647 = _0x4b1712['shift'](), _0x43f8e0 = _0x4b1712['shift']();\n    var _0x1eadd6 = _0x4b1712['splice'](0x0, _0x5c0647);\n    var _0x55cc37 = [];\n    for (let _0x2cf455 = 0x0; _0x2cf455 < _0x5c0647; _0x2cf455++)\n        _0x55cc37[_0x2cf455] = new Node(_0x2cf455);\n    for (let _0x5831d6 = 0x0; _0x5831d6 < _0x43f8e0; _0x5831d6++)\n        _0x55cc37[_0x4b1712[0x2 * _0x5831d6] - 0x1]['merge'](_0x55cc37[_0x4b1712[0x2 * _0x5831d6 + 0x1] - 0x1]);\n    var _0x101159 = 0x0;\n    for (let _0x4b3f41 = 0x0; _0x4b3f41 < _0x5c0647; _0x4b3f41++)\n        if (_0x55cc37[_0x4b3f41]['top']() === _0x55cc37[_0x1eadd6[_0x4b3f41] - 0x1]['top']())\n            _0x101159++;\n    console['log'](_0x101159);\n}\nfunction Node(_0x32cb4c) {\n    var _0x4752fb = this;\n    _0x4752fb['value'] = _0x32cb4c;\n    _0x4752fb['parent'] = null;\n    _0x4752fb['weight'] = 0x1;\n}\nNode['prototype']['top'] = function () {\n    var _0x3d3b23 = this;\n    var _0x5a845d = _0x3d3b23['parent'];\n    if (!_0x5a845d)\n        return _0x3d3b23;\n    else\n        return _0x5a845d['top']();\n};\nNode['prototype']['adopt'] = function (_0x3da467) {\n    var _0x1cfc90 = this['top']();\n    var _0x5efc9e = _0x3da467['top']();\n    _0x5efc9e['parent'] = _0x1cfc90;\n    _0x1cfc90['weight'] += _0x5efc9e['weight'];\n};\nNode['prototype']['merge'] = function (_0x2ceefa) {\n    var _0x1b54f2 = this['top']();\n    _0x2ceefa = _0x2ceefa['top']();\n    if (_0x1b54f2 === _0x2ceefa)\n        return;\n    if (_0x1b54f2['weight'] < _0x2ceefa['weight'])\n        _0x2ceefa['adopt'](_0x1b54f2);\n    else\n        _0x1b54f2['adopt'](_0x2ceefa);\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2\n5 3 1 4 2\n1 3\n5 4", "2"], ["3 2\n3 2 1\n1 2\n2 3", "3"], ["10 8\n5 3 6 8 7 10 9 1 2 4\n3 1\n4 1\n5 9\n2 5\n6 5\n3 5\n8 9\n7 9", "8"], ["5 1\n1 2 3 4 5\n1 5", "5"]], "original": "'use strict'\nfunction Main(input){\n  input=input.trim().split(/\\s+/).map(x=>x-0);\n  var N=input.shift(), M=input.shift();\n  var p=input.splice(0,N);\n  var nodes=[];\n  for(let k=0;k<N;k++)\n    nodes[k]=new Node(k);\n  for(let k=0;k<M;k++)\n    nodes[input[2*k]-1].merge(nodes[input[2*k+1]-1]);\n  var counter=0;\n  for(let k=0;k<N;k++)\n    if(nodes[k].top()===nodes[p[k]-1].top())\n      counter++;\n  console.log(counter);\n}\n\nfunction Node(v){\n  var t=this;\n  t.value=v;\n  t.parent=null;\n  t.weight=1;\n}\n\nNode.prototype.top=function(){\n  var t=this;\n  var p=t.parent;\n  if(!p)return t;\n  else return p.top();  \n}\n\nNode.prototype.adopt=function(progeny){\n  var t=this.top();\n  var c=progeny.top();\n  c.parent=t;\n  t.weight+=c.weight;\n}\n\nNode.prototype.merge=function(b){\n  var a=this.top();\n  b=b.top();\n  if(a===b)return;\n  if(a.weight<b.weight)b.adopt(a);\n  else a.adopt(b);\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03355_1", "type": "JavaScript", "obfuscated": "var toInt = _0x32ef33 => parseInt(_0x32ef33, 0xa);\nvar toIntArr = _0x3d2570 => _0x3d2570['map'](_0xba8e39 => toInt(_0xba8e39));\nvar abs = _0x2cbe89 => _0x2cbe89 > 0x0 ? _0x2cbe89 : -_0x2cbe89;\nfunction min() {\n    var _0x170640 = arguments, _0x47c518 = _0x170640[0x0];\n    for (var _0x2bcbc2 = 0x1; _0x2bcbc2 < _0x170640['length']; _0x2bcbc2++)\n        if (_0x170640[_0x2bcbc2] < _0x47c518)\n            _0x47c518 = _0x170640[_0x2bcbc2];\n    return _0x47c518;\n}\nfunction max() {\n    var _0x266f4a = arguments, _0x4adde5 = _0x266f4a[0x0];\n    for (var _0x44b487 = 0x1; _0x44b487 < _0x266f4a['length']; _0x44b487++)\n        if (_0x266f4a[_0x44b487] > _0x4adde5)\n            _0x4adde5 = _0x266f4a[_0x44b487];\n    return _0x4adde5;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x263ecb) {\n    var _0x263ecb = _0x263ecb['split']('\\x0a');\n    var _0x4d27d5 = _0x263ecb[0x0];\n    var _0xa3b73d = toInt(_0x263ecb[0x1]);\n    var _0x37a246 = _0x4d27d5['length'];\n    var _0x58dfac = [];\n    var _0x5de1e2;\n    for (var _0x52013b = 0x0; _0x52013b < _0x37a246; _0x52013b++) {\n        for (var _0x5347fc = _0x52013b; _0x5347fc < _0x52013b + 0x5; _0x5347fc++) {\n            _0x5de1e2 = _0x4d27d5['slice'](_0x52013b, _0x5347fc + 0x1);\n            if (_0x58dfac['indexOf'](_0x5de1e2) === -0x1)\n                _0x58dfac['push'](_0x5de1e2);\n        }\n    }\n    _0x58dfac['sort']((_0x2b66e8, _0x33154b) => _0x2b66e8 < _0x33154b ? -0x1 : 0x1);\n    ans = _0x58dfac[_0xa3b73d - 0x1];\n    console['log'](ans);\n}", "test_cases": [["aba\n4", "b"], ["atcoderandatcodeer\n5", "andat"], ["z\n1", "z"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\t//input = input.map(e => toIntArr(e.split(' ')));\n\tvar s = input[0];\n\tvar k = toInt(input[1]);\n\tvar l = s.length;\n\tvar arr = [];\n\tvar x;\n \n\tfor(var i = 0; i < l; i++){\n\t\tfor(var j = i ; j < i+5; j++){\n\t\t\tx = s.slice(i,j+1);\n\t\t\tif(arr.indexOf(x)===-1) arr.push(x);\n\t\t}\n\t}\n \n\tarr.sort((a,b)=>a<b? -1: 1);\n\tans = arr[k-1];\n \n\tconsole.log(ans);\n}", "language": "JavaScript"}
{"filename": "p03419_1", "type": "JavaScript", "obfuscated": "console['log']((_0x1339c8 => {\n    const [_0x5c6e20, _0x3428cf] = _0x1339c8['trim']()['split']('\\x20')['map'](_0x349620 => _0x349620 - 0x2);\n    return '' + Math['abs'](_0x5c6e20 * _0x3428cf);\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 2", "0"], ["1 7", "5"], ["314 1592", "496080"]], "original": "console.log((args=>{\n  const [N,M] = args.trim().split(' ').map(v=>v-2);\n  return `${Math.abs(N*M)}`\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03437_1", "type": "JavaScript", "obfuscated": "function Main(_0x267dc1) {\n    _0x267dc1 = _0x267dc1['split']('\\x20');\n    ans = _0x267dc1[0x0] / _0x267dc1[0x1];\n    num = 0x0;\n    var _0x4b0aaf = Number['isInteger'](ans);\n    if (_0x4b0aaf === !![]) {\n        ans = -0x1;\n    } else {\n        while (!![]) {\n            num++;\n            cal = _0x267dc1[0x0] * num / _0x267dc1[0x1];\n            var _0x4779d9 = Number['isInteger'](cal);\n            if (_0x4779d9 === !![]) {\n                ans = _0x267dc1[0x0] * (num - 0x1);\n                break;\n            }\n            if (_0x267dc1[0x0] > Math['pow'](0xa, 0x9) | _0x267dc1[0x1] > Math['pow'](0xa, 0x9) | _0x267dc1[0x0] * (num - 0x1) > Math['pow'](0xa, 0x12)) {\n                ans = -0x1;\n                break;\n            }\n        }\n    }\n    console['log'](ans);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8 6", "16"], ["3 3", "-1"]], "original": "function Main(input) {\n\tinput = input.split(\" \");\n\tans = (input[0]/input[1]);\n  num =0;\nvar a = Number.isInteger(ans);\nif(a===true){ans=-1;}else{\nwhile(true){\nnum++;\ncal = ((input[0]*num)/input[1])\nvar b = Number.isInteger(cal)\n  if(b===true){ans=(input[0]*(num-1));break;}\n  if(input[0]>Math.pow(10,9)|input[1]>Math.pow(10,9)|(input[0]*(num-1))>Math.pow(10,18)){\n  ans=-1;break;\n  }\n}\n}\n  console.log(ans)\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03544_1", "type": "JavaScript", "obfuscated": "function main(_0x51f7a0) {\n    var _0x459caf = Number(_0x51f7a0['split']('\\x0a')[0x0]);\n    if (_0x459caf === 0x0) {\n        console['log'](0x2);\n        return;\n    }\n    if (_0x459caf === 0x1) {\n        console['log'](0x1);\n        return;\n    }\n    if (_0x459caf === 0x4d) {\n        console['log']('12360848946698171');\n        return;\n    }\n    if (_0x459caf === 0x4e) {\n        console['log']('20000273725560978');\n        return;\n    }\n    if (_0x459caf === 0x4f) {\n        console['log']('32361122672259149');\n        return;\n    }\n    if (_0x459caf === 0x50) {\n        console['log']('52361396397820127');\n        return;\n    }\n    if (_0x459caf === 0x51) {\n        console['log']('84722519070079276');\n        return;\n    }\n    if (_0x459caf === 0x52) {\n        console['log']('137083915467899403');\n        return;\n    }\n    if (_0x459caf === 0x53) {\n        console['log']('221806434537978679');\n        return;\n    }\n    if (_0x459caf === 0x54) {\n        console['log']('358890350005878082');\n        return;\n    }\n    if (_0x459caf === 0x55) {\n        console['log']('580696784543856761');\n        return;\n    }\n    if (_0x459caf === 0x56) {\n        console['log']('939587134549734843');\n        return;\n    }\n    var _0x5e6bb9 = 0x2;\n    var _0x2f8de0 = 0x1;\n    var _0x14e5ad = 0x0;\n    for (var _0x395ca8 = 0x2; _0x395ca8 <= _0x459caf; _0x395ca8++) {\n        _0x14e5ad = _0x5e6bb9 + _0x2f8de0;\n        _0x5e6bb9 = _0x2f8de0;\n        _0x2f8de0 = _0x14e5ad;\n    }\n    console['log'](_0x14e5ad);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5", "11"], ["86", "939587134549734843"]], "original": "function main(s) {\n\tvar n = Number(s.split(\"\\n\")[0]);\n\tif (n === 0) {console.log(2); return;}\n\tif (n === 1) {console.log(1); return;}\n\tif (n === 77) {console.log(\"12360848946698171\"); return;}\n\tif (n === 78) {console.log(\"20000273725560978\"); return;}\n\tif (n === 79) {console.log(\"32361122672259149\"); return;}\n\tif (n === 80) {console.log(\"52361396397820127\"); return;}\n\tif (n === 81) {console.log(\"84722519070079276\"); return;}\n\tif (n === 82) {console.log(\"137083915467899403\"); return;}\n\tif (n === 83) {console.log(\"221806434537978679\"); return;}\n\tif (n === 84) {console.log(\"358890350005878082\"); return;}\n\tif (n === 85) {console.log(\"580696784543856761\"); return;}\n\tif (n === 86) {console.log(\"939587134549734843\"); return;}\n\tvar x = 2;\n\tvar y = 1;\n\tvar z = 0;\n\tfor (var i = 2; i <= n; i++) {\n\t\tz = x + y;\n\t\tx = y;\n\t\ty = z;\n\t}\n\tconsole.log(z);\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n", "language": "JavaScript"}
{"filename": "p03588_1", "type": "JavaScript", "obfuscated": "function Main(_0x2cef41) {\n    var _0xfd8c68 = 0x0;\n    var _0x6367d4 = 0x0;\n    _0x2cef41 = _0x2cef41['split']('\\x0a');\n    for (var _0x4bb91a = 0x1; _0x4bb91a < _0x2cef41['length']; _0x4bb91a++) {\n        var _0x1be063 = _0x2cef41[_0x4bb91a]['split']('\\x20')['map'](Number);\n        if (_0xfd8c68 < _0x1be063[0x0]) {\n            _0xfd8c68 = _0x1be063[0x0];\n            _0x6367d4 = _0x1be063[0x0] + _0x1be063[0x1];\n        }\n    }\n    console['log'](_0x6367d4);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\n4 7\n2 9\n6 2", "8"], ["5\n1 10\n3 6\n5 2\n4 4\n2 8", "7"], ["2\n1 1000000000\n1000000000 1", "1000000001"]], "original": "function Main(input){\n\tvar max = 0;\n\tvar ans = 0;\n\tinput = input.split(\"\\n\");\n\tfor(var i=1;i<input.length;i++){\n\t\tvar mem = input[i].split(\" \").map(Number);\n\t\tif(max<mem[0]){\n\t\t\tmax = mem[0];\n\t\t\tans = mem[0]+mem[1];\n\t\t}\n\t}\n\tconsole.log(ans)\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03687_1", "type": "JavaScript", "obfuscated": "console['log']((_0x2baeae => {\n    const _0x70f628 = _0x2baeae['trim']()['split']``['map'](_0x186fe4 => _0x186fe4['charCodeAt']() - 0x61);\n    const _0x2588b3 = _0x70f628['length'];\n    const _0x43ef33 = Array(0x1a)['fill'](-0x1);\n    for (let _0x4a23cd = 0x0; _0x4a23cd < 0x1a; _0x4a23cd++) {\n        let _0x5bb675 = 0x0;\n        for (let _0x44ebbf = 0x0; _0x44ebbf < _0x2588b3; _0x44ebbf++) {\n            _0x5bb675 = _0x70f628[_0x44ebbf] === _0x4a23cd ? 0x0 : _0x5bb675 + 0x1;\n            if (_0x43ef33[_0x4a23cd] < _0x5bb675)\n                _0x43ef33[_0x4a23cd] = _0x5bb675;\n        }\n    }\n    return Math['min'](..._0x43ef33['filter'](_0x38d734 => _0x38d734 >= 0x0));\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["serval", "3"], ["jackal", "2"], ["zzz", "0"], ["whbrjpjyhsrywlqjxdbrbaomnw", "8"]], "original": "console.log((args=>{\n  const S = args.trim().split``.map(c=>c.charCodeAt()-97);\n  const N = S.length;\n  const a = Array(26).fill(-1);\n  for ( let i = 0; i < 26; i++ ) {\n    let d = 0;\n    for ( let j = 0; j < N; j++ ) {\n      d = S[j] === i ? 0 : d + 1;\n      if ( a[i] < d ) a[i] = d;\n    }\n  }\n  return Math.min(...a.filter(v=>v>=0));\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p04005_1", "type": "JavaScript", "obfuscated": "function Main(_0x42ccad) {\n    _0x42ccad = _0x42ccad['split']('\\x20')['map'](Number);\n    if (_0x42ccad[0x0] % 0x2 == 0x0 && _0x42ccad[0x1] % 0x2 == 0x0 && _0x42ccad[0x2] % 0x2 == 0x0) {\n        console['log'](0x0);\n    } else {\n        _0x42ccad = _0x42ccad['sort'](function (_0x37aa85, _0x572d37) {\n            return _0x37aa85 - _0x572d37;\n        });\n        console['log'](_0x42ccad[0x1] * _0x42ccad[0x0]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3 3 3", "9"], ["2 2 4", "0"], ["5 3 5", "15"]], "original": "function Main(input){\n  input = input.split(\" \").map(Number);\n  if(input[0]%2==0&&input[1]%2==0&&input[2]%2==0){\n    console.log(0);\n  }else{\n    input = input.sort(function(a,b){return a-b;});\n    console.log(input[1]*input[0]);\n  }\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p00016_1", "type": "JavaScript", "obfuscated": "m = '+=+j[0]*Math.', n = '(s*Math.PI/180)', x = y = s = 0x0;\nrequire('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['some'](function (_0x30fc04) {\n    j = _0x30fc04['split'](','), eval('x' + m + 'sin' + n + ',y' + m + 'cos' + n), s += +j[0x1];\n});\nconsole['log'](~~x), console['log'](~~y);", "test_cases": [["56,65\n97,54\n64,-4\n55,76\n42,-27\n43,80\n87,-86\n55,-6\n89,34\n95,5\n0,0", "171\n-302"]], "original": "m='+=+j[0]*Math.',n='(s*Math.PI/180)',x=y=s=0;require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').some(function(i){j=i.split(','),eval('x'+m+'sin'+n+',y'+m+'cos'+n),s+=+j[1]});console.log(~~x),console.log(~~y)", "language": "JavaScript"}
{"filename": "p00028_1", "type": "JavaScript", "obfuscated": "for (a = [], b = 0x64; b--;)\n    c = a[b] = 0x0;\nrequire('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a')['some'](function (_0x1ae685) {\n    if (+_0x1ae685)\n        a[+_0x1ae685]++, c = a[+_0x1ae685] > c ? a[+_0x1ae685] : c;\n});\na['some'](function (_0x29eaf9, _0x2f49dd) {\n    if (_0x29eaf9 == c)\n        console['log'](_0x2f49dd);\n});", "test_cases": [["5\n6\n3\n5\n8\n7\n5\n3\n9\n7\n3\n4", "3\n5"]], "original": "for(a=[],b=100;b--;)c=a[b]=0;require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').some(function(i){if(+i)a[+i]++,c=a[+i]>c?a[+i]:c});a.some(function(i,j){if(i==c)console.log(j)})", "language": "JavaScript"}
{"filename": "p00030_1", "type": "JavaScript", "obfuscated": "function comb(_0x32f1c6) {\n    var _0x254f28 = [];\n    _0x254f28[0x0] = -0x1;\n    var _0x274766 = 0x1;\n    _0x254f28[0x1] = 0x0;\n    var _0x5707d5 = [];\n    while (_0x274766 != 0x0) {\n        for (var _0x317b59 = _0x274766 + 0x1; _0x317b59 <= _0x32f1c6; _0x317b59++) {\n            _0x254f28[_0x317b59] = _0x254f28[_0x317b59 - 0x1] + 0x1;\n        }\n        var _0x366121 = [];\n        for (var _0x317b59 = 0x1; _0x317b59 <= _0x32f1c6; _0x317b59++) {\n            _0x366121['push'](_0x254f28[_0x317b59]);\n        }\n        _0x5707d5['push'](_0x366121);\n        _0x274766 = _0x32f1c6;\n        while (_0x254f28[_0x274766] == 0x9 - _0x32f1c6 + _0x274766)\n            _0x274766 = _0x274766 - 0x1;\n        _0x254f28[_0x274766] = _0x254f28[_0x274766] + 0x1;\n    }\n    return _0x5707d5;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var nums = line['split']('\\x20');\n    var n = +nums[0x0];\n    var s = +nums[0x1];\n    if (n + s == 0x0)\n        break;\n    var c = comb(n);\n    var cnt = 0x0;\n    for (var i = 0x0; i < c['length']; i++) {\n        var arr = c[i];\n        if (s == arr['reduce'](function (_0xcb7b8e, _0x24ee8f) {\n                return _0xcb7b8e + _0x24ee8f;\n            })) {\n            cnt++;\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["3 6\n3 1\n0 0", "3\n0"]], "original": "function comb(r) {\n\tvar c = [];\n\tc[0] = -1;\n\tvar k = 1;\n\tc[1] = 0;\n\tvar ret = [];\n\n\twhile (k != 0) {\n\t\tfor (var i = k + 1; i <= r; i++) {\n\t\t\tc[i] = c[i - 1] + 1;\n\t\t}\n\n\t\tvar arr = []\n\t\tfor (var i = 1; i <= r; i++) {\n\t\t\tarr.push(c[i]);\n\t\t}\n\t\tret.push(arr);\n\n\t\tk = r;\n\t\twhile (c[k] == 9 - r + k)\n\t\t\tk = k - 1;\n\n\t\tc[k] = c[k] + 1;\n\t}\n\n\treturn ret;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n\tvar nums = line.split(' ');\n\tvar n = +nums[0];\n\tvar s = +nums[1];\n\tif (n + s == 0)\n\t\tbreak;\n\n\tvar c = comb(n);\n\n\tvar cnt = 0;\n\tfor (var i = 0; i < c.length; i++) {\n\t\tvar arr = c[i];\n\t\tif (s == arr.reduce(function(prev, now){return prev + now;})) {\n\t\t\tcnt++;\n\t\t}\n\t}\n\n\tconsole.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00040_1", "type": "JavaScript", "obfuscated": "(function (_0x5f5a4a) {\n    var _0x3933f8 = _0x5f5a4a['replace'](/\\n$/, '')['split']('\\x0a');\n    var _0x38f9d3 = Number(_0x3933f8['shift']());\n    for (var _0x36690d = 0x0; _0x36690d < _0x38f9d3; _0x36690d++) {\n        console['log'](conv(_0x3933f8['shift']()));\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));\nfunction conv(_0x5b6f4b) {\n    a = _0x5b6f4b['split']('\\x20');\n    for (var _0x5db6ec = 0x0; _0x5db6ec < a['length']; _0x5db6ec++) {\n        var _0x3989c3 = check(a[_0x5db6ec]);\n        if (_0x3989c3) {\n            return conv_(_0x5b6f4b, _0x3989c3);\n        }\n    }\n    return _0x5b6f4b;\n}\nfunction conv_(_0x524386, _0x42606d) {\n    var _0x2dd031 = _0x42606d[0x0];\n    var _0x4ea9a7 = _0x42606d[0x1];\n    var _0x524386 = _0x524386['split']('')['map'](function (_0x184ea5) {\n        if (_0x184ea5 === '\\x20') {\n            return _0x184ea5;\n        }\n        return String['fromCharCode']((_0x2dd031 * _0x184ea5['charCodeAt'](0x0) + _0x4ea9a7) % 0x1a + 'a'['charCodeAt'](0x0));\n    })['join']('');\n    return _0x524386;\n}\nfunction check(_0x508612) {\n    if (_0x508612['length'] !== 0x4) {\n        return ![];\n    }\n    for (var _0xd60360 = 0x0; _0xd60360 < 0x1a; _0xd60360++) {\n        for (var _0x25a156 = 0x0; _0x25a156 < 0x1a; _0x25a156++) {\n            var _0x21eff = conv_(_0x508612, [\n                _0xd60360,\n                _0x25a156\n            ]);\n            if (_0x21eff === 'this' || _0x21eff === 'that') {\n                return [\n                    _0xd60360,\n                    _0x25a156\n                ];\n            }\n        }\n    }\n    return ![];\n}", "test_cases": [["1\ny eazqyp pnop pngtg ye obmpngt xmybp mr lygw", "i submit that there is another point of view"]], "original": "(function(input) {\n  var p = input.replace(/\\n$/, '').split('\\n');\n  var n = Number(p.shift());\n  for (var i = 0; i < n; i++) {\n    console.log(conv(p.shift()));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\nfunction conv(s) {\n  a = s.split(' ');\n  for (var i = 0; i < a.length; i++) {\n    var r = check(a[i]);\n    if (r) {\n      return conv_(s, r);\n    }\n  }\n  return s;\n}\n\nfunction conv_(s, r) {\n  var a = r[0];\n  var b = r[1];\n  var s = s.split('').map(function(e) {\n    if (e === ' ') {\n      return e;\n    }\n    return String.fromCharCode((a * e.charCodeAt(0) + b) % 26 + 'a'.charCodeAt(0));\n  }).join('');\n  return s;\n}\n\nfunction check(str) {\n  if (str.length !== 4) {\n    return false;\n  }\n  for (var i = 0; i < 26; i++) {\n    for (var j = 0; j < 26; j++) {\n      var s = conv_(str, [i, j]);\n      if (s === 'this' || s === 'that') {\n        return [i, j];\n      }\n    }\n  }\n  return false;\n}", "language": "JavaScript"}
{"filename": "p00054_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    var n = arr[0x2];\n    var sum = 0x0;\n    while (n--) {\n        var str = (arr[0x0] / arr[0x1])['toFixed'](n + 0x2)['slice'](-0x2);\n        sum += str[0x0] - 0x0;\n    }\n    console['log'](sum);\n}", "test_cases": [["1 2 3\n2 3 4\n5 4 3\n4 3 2", "5\n24\n7\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   var n=arr[2];\n   var sum=0;\n   while(n--){\n      var str=((arr[0]/arr[1]).toFixed(n+2)).slice(-2);\n      sum+=(str[0]-0);\n   }\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00110_1", "type": "JavaScript", "obfuscated": "function main() {\n    input['forEach'](function (_0x3532fd) {\n        var _0x58e798, _0x3b4b00, _0x521fd6, _0x412184, _0x133bde, _0x51ef09, _0x32a89b, _0x56cc61;\n        if (_0x3532fd['trim']() === '')\n            return;\n        _0x412184 = _0x3532fd['match'](/([0-9X]+)\\+([0-9X]+)\\=([0-9X]+)/);\n        _0x58e798 = _0x412184[0x1];\n        _0x3b4b00 = _0x412184[0x2];\n        _0x521fd6 = _0x412184[0x3];\n        for (_0x56cc61 = 0x0; _0x56cc61 <= 0x9; _0x56cc61++) {\n            if (_0x56cc61 === 0x0 && (_0x58e798['charAt'](0x0) === 'X' || _0x3b4b00['charAt'](0x0) === 'X' || _0x521fd6['charAt'](0x0) === 'X'))\n                continue;\n            _0x133bde = parseInt(_0x58e798['replace'](/X/g, _0x56cc61), 0xa);\n            _0x51ef09 = parseInt(_0x3b4b00['replace'](/X/g, _0x56cc61), 0xa);\n            _0x32a89b = parseInt(_0x521fd6['replace'](/X/g, _0x56cc61), 0xa);\n            if (_0x133bde + _0x51ef09 === _0x32a89b)\n                break;\n        }\n        console['log'](_0x56cc61 === 0xa ? 'NA' : _0x56cc61);\n    });\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x229f89) {\n    input += _0x229f89;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["123+4X6=X79\n12X+4X6=X79\nXX22+89=X2XX", "5\nNA\n1"]], "original": "function main() {\n  input.forEach(function(line) {\n    var\n    a, b, c, p,\n    x, y, z,\n    i;\n    if(line.trim() === '') return;\n    p = line.match(/([0-9X]+)\\+([0-9X]+)\\=([0-9X]+)/);\n    a = p[1]; b = p[2]; c = p[3];\n    for(i = 0; i <= 9; i++) {\n      if(i === 0 && (a.charAt(0) === 'X' || b.charAt(0) === 'X' || c.charAt(0) === 'X')) continue;\n      x = parseInt(a.replace(/X/g, i), 10);\n      y = parseInt(b.replace(/X/g, i), 10);\n      z = parseInt(c.replace(/X/g, i), 10);\n      if(x + y === z) break;\n    }\n    console.log(i === 10 ? 'NA' : i);\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00140_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nfor (var i = 0x0; i < n; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    var s = arr[0x0];\n    var g = arr[0x1];\n    var ans = [s];\n    var plus = 0x1;\n    if (s < g) {\n        do {\n            s++;\n            ans['push'](s);\n        } while (s != g);\n    } else if (s > g && s <= 0x5) {\n        do {\n            s--;\n            ans['push'](s);\n        } while (s != g);\n    } else if (s > g && s >= 0x6 && g >= 0x6) {\n        do {\n            s++;\n            if (s == 0xa) {\n                s = 0x5;\n            }\n            ans['push'](s);\n        } while (s != g);\n    } else if (s > g && s >= 0x6 && g <= 0x5) {\n        do {\n            s += plus;\n            if (s == 0xa) {\n                s = 0x5;\n                plus = -0x1;\n            }\n            ;\n            ans['push'](s);\n        } while (s != g);\n    }\n    console['log'](ans['join']('\\x20'));\n}", "test_cases": [["2\n2 4\n4 2", "2 3 4\n4 3 2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var i=0;i<n;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   var s=arr[0];\n   var g=arr[1];\n   var ans=[s];\n   var plus=1;\n   if(s<g){do{s++;ans.push(s);}while(s!=g);}\n   else if(s>g && s<=5){do{s--;ans.push(s);}while(s!=g);}\n   else if(s>g && s>=6 && g>=6){do{s++;if(s==10){s=5;}ans.push(s);}while(s!=g);}\n   else if(s>g && s>=6 && g<=5){do{s+=plus;if(s==10){s=5;plus=-1;};ans.push(s);}while(s!=g);}\n   console.log(ans.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p02249_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nline = require('fs')['readFileSync'](config['input'], 'ascii')['split'](config['newline']);\nline[0x0] = line[0x0]['split']('\\x20')['map'](Number);\nH = line[0x0][0x0];\nW = line[0x0][0x1];\nfield = line['slice'](0x1, 0x1 + H);\nline[0x1 + H] = line[0x1 + H]['split']('\\x20')['map'](Number);\nR = line[0x1 + H][0x0];\nC = line[0x1 + H][0x1];\npat = line['slice'](0x1 + H + 0x1, 0x1 + H + 0x1 + R);\nmem = new Array(H);\nfor (i = 0x0; i < H; i++) {\n    mem[i] = new Array(R);\n    for (j = 0x0; j < R; j++) {\n        mem[i][j] = {};\n        k = field[i]['indexOf'](pat[j]);\n        while (k !== -0x1) {\n            mem[i][j][k] = !![];\n            k = field[i]['indexOf'](pat[j], k + 0x1);\n        }\n    }\n}\nfor (i = 0x0; i <= H - R; i++) {\n    for (j = 0x0; j <= W - C; j++) {\n        flag = !![];\n        for (k = 0x0; k < R; k++) {\n            if (!mem[i + k][k]['hasOwnProperty'](j)) {\n                flag = ![];\n                break;\n            }\n        }\n        if (flag)\n            console['log']('%d\\x20%d', i, j);\n    }\n}", "test_cases": [["4 5\n00010\n00101\n00010\n00100\n3 2\n10\n01\n10", "0 3\n1 2"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline);\nline[0] = line[0].split(' ').map(Number);\nH = line[0][0];\nW = line[0][1];\nfield = line.slice(1, 1+H);\nline[1+H] = line[1+H].split(' ').map(Number);\nR = line[1+H][0];\nC = line[1+H][1];\npat = line.slice(1+H+1, 1+H+1+R);\n\nmem = new Array(H);\nfor (i = 0; i < H; i++) {\n  mem[i] = new Array(R);\n  for (j = 0; j < R; j++) {\n    mem[i][j] = {};\n    k = field[i].indexOf(pat[j])\n    while (k !== -1) {\n      mem[i][j][k] = true;\n      k = field[i].indexOf(pat[j], k + 1);\n    }\n  }\n}\n\nfor (i = 0; i <= H - R; i++) {\n  for (j = 0; j <= W - C; j++) {\n    flag = true;\n    for (k = 0; k < R; k++) {\n      if (!mem[i+k][k].hasOwnProperty(j)) {\n        flag = false;\n        break;\n      }\n    }\n    if (flag) console.log('%d %d', i, j);\n  }\n}", "language": "JavaScript"}
{"filename": "p02273_1", "type": "JavaScript", "obfuscated": "class Point {\n    constructor(_0x1524e3, _0x1f1ae1) {\n        this['x'] = _0x1524e3;\n        this['y'] = _0x1f1ae1;\n    }\n    ['print']() {\n        console['log'](this['x']['toFixed'](0x8) + '\\x20' + this['y']['toFixed'](0x8));\n    }\n}\n(function main() {\n    const _0x1658bd = Number(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());\n    let _0x3a747a = new Point(0x0, 0x0);\n    let _0x5a4cb6 = new Point(0x64, 0x0);\n    _0x3a747a['print']();\n    kock(_0x1658bd, _0x3a747a, _0x5a4cb6);\n    _0x5a4cb6['print']();\n}());\nfunction kock(_0x1b561b, _0x4e3036, _0x415866) {\n    const _0x2fedee = Math['sin'](0x3c * Math['PI'] / 0xb4);\n    const _0x432642 = Math['cos'](0x3c * Math['PI'] / 0xb4);\n    function _0x3e0507(_0x4cef41, _0x4db9e5, _0x55e65b) {\n        if (!_0x4cef41)\n            return;\n        xDiff = _0x55e65b['x'] - _0x4db9e5['x'];\n        yDiff = _0x55e65b['y'] - _0x4db9e5['y'];\n        let _0x553970 = new Point(_0x4db9e5['x'] + xDiff / 0x3, _0x4db9e5['y'] + yDiff / 0x3);\n        let _0x5c1562 = new Point(_0x553970['x'] + xDiff / 0x3, _0x553970['y'] + yDiff / 0x3);\n        let _0x52c061 = new Point((_0x5c1562['x'] - _0x553970['x']) * _0x432642 - (_0x5c1562['y'] - _0x553970['y']) * _0x2fedee + _0x553970['x'], (_0x5c1562['x'] - _0x553970['x']) * _0x2fedee + (_0x5c1562['y'] - _0x553970['y']) * _0x432642 + _0x553970['y']);\n        kock(_0x4cef41 - 0x1, _0x4db9e5, _0x553970);\n        _0x553970['print']();\n        kock(_0x4cef41 - 0x1, _0x553970, _0x52c061);\n        _0x52c061['print']();\n        kock(_0x4cef41 - 0x1, _0x52c061, _0x5c1562);\n        _0x5c1562['print']();\n        kock(_0x4cef41 - 0x1, _0x5c1562, _0x55e65b);\n    }\n    kock = _0x3e0507;\n    _0x3e0507(_0x1b561b, _0x4e3036, _0x415866);\n}", "test_cases": [["1", "0.00000000 0.00000000\n33.33333333 0.00000000\n50.00000000 28.86751346\n66.66666667 0.00000000\n100.00000000 0.00000000"], ["2", "0.00000000 0.00000000\n11.11111111 0.00000000\n16.66666667 9.62250449\n22.22222222 0.00000000\n33.33333333 0.00000000\n38.88888889 9.62250449\n33.33333333 19.24500897\n44.44444444 19.24500897\n50.00000000 28.86751346\n55.55555556 19.24500897\n66.66666667 19.24500897\n61.11111111 9.62250449\n66.66666667 0.00000000\n77.77777778 0.00000000\n83.33333333 9.62250449\n88.88888889 0.00000000\n100.00000000 0.00000000"]], "original": "class Point {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  print() {\n    console.log(this.x.toFixed(8) + ' ' + this.y.toFixed(8));\n  }\n}\n\n(function main(){\n  const n = Number(require('fs').readFileSync('/dev/stdin', 'utf8').trim());\n  let p1 = new Point(0, 0);\n  let p2 = new Point(100, 0);\n  p1.print();\n  kock(n, p1, p2);\n  p2.print();\n})();\n\nfunction kock(n, p1, p2) {\n  const sin60 = Math.sin(60 * Math.PI / 180);\n  const cos60 = Math.cos(60 * Math.PI / 180);\n  function innerFunc(n, p1, p2) {\n    if (!n) return;\n    xDiff = p2.x - p1.x;\n    yDiff = p2.y - p1.y;\n    let s = new Point(p1.x + xDiff / 3, p1.y + yDiff / 3);\n    let t = new Point(s.x + xDiff / 3, s.y + yDiff / 3);\n    let u = new Point((t.x - s.x) * cos60 - (t.y - s.y) * sin60 + s.x, (t.x - s.x) * sin60 + (t.y - s.y) * cos60 + s.y);\n    kock(n-1, p1, s); s.print();\n    kock(n-1, s, u);  u.print();\n    kock(n-1, u, t);  t.print();\n    kock(n-1, t, p2);\n  }\n  kock = innerFunc;\n  innerFunc(n, p1, p2);\n}\n\n", "language": "JavaScript"}
{"filename": "p02278_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nline = require('fs')['readFileSync'](config['input'], 'ascii')['split'](config['newline'], 0x2);\nw = line[0x1]['split']('\\x20')['map'](Number);\nsorted = []['concat'](w);\nsorted['sort'](function (_0x78be0e, _0x3d86ff) {\n    return _0x78be0e - _0x3d86ff;\n});\ncost = 0x0;\nfor (i = w['length'] - 0x1; i >= 0x0; i--) {\n    idx = w['indexOf'](sorted[i]);\n    if (idx === i)\n        continue;\n    cost += w[i] + w[idx];\n    tmp = w[i];\n    w[i] = w[idx];\n    w[idx] = tmp;\n}\nconsole['log'](cost);", "test_cases": [["5\n1 5 3 4 2", "7"], ["4\n4 3 2 1", "10"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nline = require('fs').readFileSync(config.input, 'ascii')\n  .split(config.newline, 2);\n\nw = line[1].split(' ').map(Number);\n\nsorted = [].concat(w);\nsorted.sort(function (a, b) { return a - b; });\n\ncost = 0;\nfor (i = w.length - 1; i >= 0; i--) {\n  idx = w.indexOf(sorted[i]);\n  if (idx === i) continue;\n  cost += w[i] + w[idx];\n  tmp = w[i];\n  w[i] = w[idx];\n  w[idx] = tmp;\n}\n\nconsole.log(cost);", "language": "JavaScript"}
{"filename": "p02549_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['split']('\\x0a');\nconst [N, K] = lines[0x0]['split']('\\x20')['map'](Number);\nconst k = [];\nfor (let i = 0x1; i <= K; i++) {\n    const [L, R] = lines[i]['split']('\\x20')['map'](Number);\n    k['push']([\n        L,\n        R\n    ]);\n}\nconst ksum = Array(K)['fill'](0x0);\nconst mod = 0x3b800001;\nconst map = Array(N)['fill'](0x0);\nmap[0x0] = 0x1;\nfor (let i = 0x1; i < map['length']; i++) {\n    let c = 0x0;\n    for (let j = 0x0; j < k['length']; j++) {\n        ksum[j] = ksum[j] + (map[i - k[j][0x0]] || 0x0) - (map[i - k[j][0x1] - 0x1] || 0x0);\n    }\n    map[i] = ksum['reduce']((_0x5e274a, _0x5c1449) => _0x5e274a + _0x5c1449) % mod;\n}\nconsole['log'](map['pop']());", "test_cases": [["5 2\n1 1\n3 4", "4"], ["5 2\n3 3\n5 5", "0"], ["5 1\n1 2", "5"], ["60 3\n5 8\n1 3\n10 15", "221823067"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\nconst lines = input.split('\\n')\nconst [N, K] = lines[0].split(' ').map(Number)\nconst k = []\n\nfor (let i = 1; i <= K; i++) {\n    const [L, R] = lines[i].split(' ').map(Number)\n    k.push([L, R])\n}\nconst ksum = Array(K).fill(0)\n\nconst mod = 998244353\nconst map = Array(N).fill(0)\nmap[0] = 1\n\nfor (let i = 1; i < map.length; i++) {\n    let c = 0\n    for (let j = 0; j < k.length; j++) {\n        ksum[j] = ksum[j] + (map[i - k[j][0]] || 0) - (map[i - k[j][1] -1 ] || 0)\n    }\n    map[i] = ksum.reduce((a, b) => a + b) % mod\n}\n\nconsole.log(map.pop())\n", "language": "JavaScript"}
{"filename": "p02588_1", "type": "JavaScript", "obfuscated": "function Main(_0x1fc790) {\n    let [_0x534a3c, ..._0x1dd467] = _0x1fc790['split']('\\x0a');\n    _0x1dd467 = _0x1dd467['map'](_0x143515 => parseFloat(_0x143515));\n    let _0x16ab74 = [];\n    for (let _0x2c9a61 of _0x1dd467) {\n        let _0x337cc1 = _0x1dd467['map'](_0x2444ba => {\n            if (_0x2444ba !== _0x2c9a61 && _0x2444ba * _0x2c9a61 % 0x1 === 0x0 && _0x2c9a61 < _0x2444ba) {\n                return [\n                    _0x2c9a61,\n                    _0x2444ba\n                ];\n            }\n        });\n        _0x337cc1 = _0x337cc1['filter'](_0x4bee4a => _0x4bee4a !== undefined);\n        if (_0x337cc1['length']) {\n            _0x16ab74 = [\n                ..._0x16ab74,\n                ..._0x337cc1\n            ];\n        }\n    }\n    console['log'](_0x16ab74['length']);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n7.5\n2.4\n17.000000001\n17\n16.000000000", "3"], ["11\n0.9\n1\n1\n1.25\n2.30000\n5\n70\n0.000000001\n9999.999999999\n0.999999999\n1.000000001", "8"]], "original": "function Main(input) {\n  let [l, ...valArr] = input.split('\\n')\n  valArr = valArr.map(e=>parseFloat(e))\n  let result = []\n  for(let ele of valArr){\n    let temp = valArr.map(e=>{\n    \tif((e !== ele && (e*ele)%1===0)&&ele<e){\n        \treturn [ele, e]\n        }\n    })\n    temp =temp.filter(e=>e!==undefined)\n    if(temp.length){result = [...result, ...temp]}\n  }\n  console.log(result.length)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02863_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d6ef4) {\n    _0x1d6ef4 = _0x1d6ef4['trim']()['split']('\\x0a')['map'](function (_0x5d7ee9) {\n        return _0x5d7ee9['split']('\\x20');\n    });\n    var _0x3dce99 = parseInt(_0x1d6ef4[0x0][0x0], 0xa);\n    var _0x4dd7dc = parseInt(_0x1d6ef4[0x0][0x1], 0xa);\n    var _0x20e7e0 = [];\n    for (var _0x328f71 = 0x0; _0x328f71 < _0x3dce99; _0x328f71++) {\n        _0x20e7e0['push'](_0x1d6ef4[_0x328f71 + 0x1]['map'](_0x169fed => parseInt(_0x169fed, 0xa)));\n    }\n    _0x20e7e0['sort']((_0x2fe351, _0xd1f5ff) => _0x2fe351[0x0] - _0xd1f5ff[0x0]);\n    var _0x1f37fa = [];\n    var _0x146ca7, _0x5d974b;\n    _0x1f37fa['push'](Array['from']({ 'length': _0x4dd7dc }, () => [\n        0x0,\n        0x0\n    ]));\n    for (var _0x328f71 = 0x0; _0x328f71 < _0x3dce99; _0x328f71++) {\n        _0x1f37fa['push']([]);\n        _0x146ca7 = _0x20e7e0[_0x328f71][0x0];\n        _0x5d974b = _0x20e7e0[_0x328f71][0x1];\n        for (var _0x47c034 = 0x0; _0x47c034 < _0x4dd7dc; _0x47c034++) {\n            _0x1f37fa[_0x328f71 + 0x1]['push']([\n                0x0,\n                0x0\n            ]);\n            if (_0x146ca7 <= _0x47c034) {\n                _0x1f37fa[_0x328f71 + 0x1][_0x47c034][0x0] = Math['max'](_0x1f37fa[_0x328f71][_0x47c034][0x0], _0x1f37fa[_0x328f71][_0x47c034 - _0x146ca7][0x0] + _0x5d974b);\n            } else {\n                _0x1f37fa[_0x328f71 + 0x1][_0x47c034][0x0] = _0x1f37fa[_0x328f71][_0x47c034][0x0];\n            }\n            _0x1f37fa[_0x328f71 + 0x1][_0x47c034][0x1] = Math['max'](_0x1f37fa[_0x328f71][_0x47c034][0x1], _0x1f37fa[_0x328f71][_0x47c034][0x0] + _0x5d974b);\n        }\n    }\n    console['log'](_0x1f37fa[_0x3dce99][_0x4dd7dc - 0x1][0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 60\n10 10\n100 100", "110"], ["3 60\n10 10\n10 20\n10 30", "60"], ["3 60\n30 10\n30 20\n30 30", "50"], ["10 100\n15 23\n20 18\n13 17\n24 12\n18 29\n19 27\n23 21\n18 20\n27 15\n22 25", "145"]], "original": "//TLEか？\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});    \n\tvar N = parseInt(input[0][0], 10);\n\tvar T = parseInt(input[0][1], 10);\n\tvar arr_AB = [];\n\tfor (var i = 0; i < N; i++){\n\t\tarr_AB.push(input[i + 1].map(e => parseInt(e, 10)));\n\t}\n\tarr_AB.sort((a, b) => a[0] - b[0]);\n\tvar dp = [];\n\tvar Ai, Bi;\n\tdp.push(Array.from({length: T}, () => [0, 0]));\n\tfor (var i = 0; i < N; i++){\n\t\tdp.push([]);\n\t\tAi = arr_AB[i][0];\n\t\tBi = arr_AB[i][1];\n\t\tfor (var j = 0; j < T; j++){\n\t\t\tdp[i + 1].push([0, 0])\n\t\t\t// console.log(i, j, dp);\n\t\t\tif (Ai <= j){\n\t\t\t\tdp[i + 1][j][0] = Math.max(dp[i][j][0], dp[i][j - Ai][0] + Bi);\n\t\t\t} else {\n\t\t\t\tdp[i + 1][j][0] = dp[i][j][0];\n\t\t\t}\n\t\t\tdp[i + 1][j][1] = Math.max(dp[i][j][1], dp[i][j][0] + Bi);\n\t\t}\n\t\t\n\t}\n\tconsole.log(dp[N][T - 1][1]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03151_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nN = inp['shift']() * 0x1;\nA = inp['shift']()['split']('\\x20');\nB = inp['shift']()['split']('\\x20');\nsumA = 0x0;\nsumB = 0x0;\ns = 0x0;\nt = [];\ncnt = 0x0;\nfor (i = 0x0; i < N; i++) {\n    a = A[i] * 0x1;\n    b = B[i] * 0x1;\n    d = a - b;\n    if (d < 0x0) {\n        cnt++;\n        s += d;\n    } else {\n        t['push'](d);\n    }\n    sumA += a;\n    sumB += b;\n}\nif (sumA >= sumB) {\n    t['sort']((_0x10a54b, _0x1d93f1) => _0x1d93f1 - _0x10a54b);\n    j = 0x0;\n    while (s < 0x0) {\n        s += t[j];\n        j++;\n    }\n    console['log'](cnt + j);\n} else {\n    console['log'](-0x1);\n}", "test_cases": [["3\n2 3 5\n3 4 1", "3"], ["3\n2 3 3\n2 2 1", "0"], ["3\n17 7 1\n25 6 14", "-1"], ["12\n757232153 372327760 440075441 195848680 354974235 458054863 463477172 740174259 615762794 632963102 529866931 64991604\n74164189 98239366 465611891 362739947 147060907 118867039 63189252 78303147 501410831 110823640 122948912 572905212", "5"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nN = inp.shift() * 1\nA = inp.shift().split(' ')\nB = inp.shift().split(' ')\nsumA = 0\nsumB = 0\ns = 0\nt = []\ncnt = 0\nfor (i=0; i<N; i++) {\n  a = A[i] * 1\n  b = B[i] * 1\n  d = a - b\n  if (d < 0) {\n      cnt++\n      s += d \n  } else {\n      t.push(d)\n  }\n  sumA += a\n  sumB += b\n}\n\nif (sumA >= sumB) {\n  t.sort((a, b) => b - a)\n  j = 0\n  while (s < 0) {\n      s += t[j]\n      j++\n  }\n  console.log(cnt+j)\n} else {\n  console.log(-1)\n}\n", "language": "JavaScript"}
{"filename": "p03287_1", "type": "JavaScript", "obfuscated": "function Main(_0x3c0657) {\n    _0x3c0657 = _0x3c0657['split']('\\x0a');\n    var _0x4a6670 = _0x3c0657[0x0]['split']('\\x20')['map'](_0x1e60f5 => +_0x1e60f5);\n    var _0x27b356 = _0x4a6670[0x1];\n    _0x4a6670 = _0x4a6670[0x0];\n    var _0x22bdd9 = _0x3c0657[0x1]['split']('\\x20')['map'](_0x5db36d => +_0x5db36d);\n    var _0x470736 = 0x0;\n    var _0x12ab0c = {};\n    var _0x4c1b63 = 0x0;\n    for (var _0x2b484c = 0x0; _0x2b484c < _0x4a6670; _0x2b484c++) {\n        _0x4c1b63 = (_0x4c1b63 + _0x22bdd9[_0x2b484c]) % _0x27b356;\n        if (_0x12ab0c[_0x4c1b63])\n            _0x12ab0c[_0x4c1b63]++;\n        else\n            _0x12ab0c[_0x4c1b63] = 0x1;\n    }\n    for (_0x2b484c in _0x12ab0c) {\n        _0x2b484c = +_0x2b484c;\n        if (_0x2b484c === 0x0)\n            _0x470736 += _0x12ab0c[_0x2b484c] * (_0x12ab0c[_0x2b484c] + 0x1) / 0x2;\n        else if (_0x12ab0c[_0x2b484c] > 0x1)\n            _0x470736 += _0x12ab0c[_0x2b484c] * (_0x12ab0c[_0x2b484c] - 0x1) / 0x2;\n    }\n    console['log'](_0x470736);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n4 1 5", "3"], ["13 17\n29 7 5 7 9 51 7 13 8 55 42 9 81", "6"], ["10 400000000\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "25"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1]; n = n[0];\n  var a = s[1].split(\" \").map(a=>+a);\n  var ans = 0;\n  var b = {};\n  var t = 0;\n  for(var i = 0; i < n; i++){\n    t = (t + a[i]) % m;\n    if(b[t])b[t]++; else b[t] = 1;\n  }\n  for(i in b){\n    i = +i;\n    if(i === 0)ans += b[i] * (b[i]+1) / 2;\n    else if(b[i] > 1)ans += b[i] * (b[i]-1) / 2;\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03426_1", "type": "JavaScript", "obfuscated": "function Main(_0x246e4d) {\n    _0x246e4d = _0x246e4d['split']('\\x0a');\n    var _0x12530c = _0x246e4d[0x0]['split']('\\x20')['map'](_0x309ad2 => parseInt(_0x309ad2));\n    var _0x5d6b81 = _0x12530c[0x1];\n    var _0x583f58 = _0x12530c[0x2];\n    _0x12530c = _0x12530c[0x0];\n    var _0x3f39d4;\n    var _0x46bb97 = new Array(_0x12530c * _0x5d6b81 + 0x1)['fill'](0x0)['map'](_0xbff095 => new Array(0x2));\n    for (var _0x16178c = 0x0; _0x16178c < _0x12530c; _0x16178c++) {\n        _0x3f39d4 = _0x246e4d[_0x16178c + 0x1]['split']('\\x20')['map'](_0x2cbe38 => parseInt(_0x2cbe38));\n        for (var _0x754b01 = 0x0; _0x754b01 < _0x5d6b81; _0x754b01++) {\n            _0x46bb97[_0x3f39d4[_0x754b01]][0x0] = _0x16178c;\n            _0x46bb97[_0x3f39d4[_0x754b01]][0x1] = _0x754b01;\n        }\n    }\n    var _0x54b414 = new Array(_0x12530c * _0x5d6b81 + 0x1)['fill'](0x0);\n    for (_0x16178c = _0x583f58 + 0x1; _0x16178c <= _0x12530c * _0x5d6b81; _0x16178c++) {\n        _0x54b414[_0x16178c] = _0x54b414[_0x16178c - _0x583f58] + Math['abs'](_0x46bb97[_0x16178c - _0x583f58][0x0] - _0x46bb97[_0x16178c][0x0]) + Math['abs'](_0x46bb97[_0x16178c - _0x583f58][0x1] - _0x46bb97[_0x16178c][0x1]);\n    }\n    var _0x5018f8 = parseInt(_0x246e4d[_0x12530c + 0x1]);\n    var _0x40a993 = new Array(_0x5018f8)['fill'](0x0);\n    for (_0x16178c = 0x0; _0x16178c < _0x5018f8; _0x16178c++) {\n        var _0x5598d6 = _0x246e4d[_0x12530c + 0x2 + _0x16178c]['split']('\\x20')['map'](_0x411892 => parseInt(_0x411892));\n        var _0x35379c = _0x5598d6[0x1];\n        _0x5598d6 = _0x5598d6[0x0];\n        _0x40a993[_0x16178c] = _0x54b414[_0x35379c] - _0x54b414[_0x5598d6];\n    }\n    console['log'](_0x40a993['join']('\\x0a'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3 2\n1 4 3\n2 5 7\n8 9 6\n1\n4 8", "5"], ["4 2 3\n3 7\n1 4\n5 2\n6 8\n2\n2 2\n2 2", "0\n0"], ["5 5 4\n13 25 7 15 17\n16 22 20 2 9\n14 11 12 1 19\n10 6 23 8 18\n3 21 5 24 4\n3\n13 13\n2 10\n13 13", "0\n5\n0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar H = input[0].split(\" \").map(a => parseInt(a));\n\tvar W = H[1];\n\tvar D = H[2];\n\tH = H[0];\n\tvar A;\n\tvar x = new Array(H*W+1).fill(0).map(a => new Array(2));\n\tfor(var i = 0; i < H; i++){\n\t\tA = input[i+1].split(\" \").map(a => parseInt(a));\n\t\tfor(var j = 0; j < W; j++){\n\t\t\tx[A[j]][0] = i;\n\t\t\tx[A[j]][1] = j;\n\t\t}\n\t}\n\tvar y = new Array(H*W+1).fill(0);\n\tfor(i = D+1; i <= H*W; i++){\n\t\ty[i] = y [i-D] + Math.abs(x[i-D][0] - x[i][0]) + Math.abs(x[i-D][1] - x[i][1]);\n\t}\n\t\n\tvar Q = parseInt(input[H+1]);\n\tvar ans = new Array(Q).fill(0);\n\tfor(i = 0; i < Q; i++){\n\t\tvar L = input[H+2+i].split(\" \").map(a => parseInt(a));\n\t\tvar R = L[1];\n\t\tL = L[0];\n\t\tans[i] = y[R] - y[L];\n\t}\n\t\n\tconsole.log(ans.join(\"\\n\"));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03450_1", "type": "JavaScript", "obfuscated": "function Main(_0x4c797c) {\n    var _0x537fb4 = _0x4c797c['split']('\\x0a');\n    var _0x3293e7 = _0x537fb4[0x0]['split']('\\x20');\n    var _0x393933 = Number(_0x3293e7[0x0]);\n    var _0x596212 = Number(_0x3293e7[0x1]);\n    var _0x1385db = [];\n    var _0x40d858 = [];\n    var _0x56878e = [];\n    for (var _0x86d421 = 0x1; _0x86d421 <= _0x596212; _0x86d421++) {\n        var _0x3293e7 = _0x537fb4[_0x86d421]['split']('\\x20');\n        _0x1385db['push'](Number(_0x3293e7[0x0]));\n        _0x40d858['push'](Number(_0x3293e7[0x1]));\n        _0x56878e['push'](Number(_0x3293e7[0x2]));\n    }\n    var _0x350f6b = [];\n    var _0x2cba5e;\n    _0x30b754:\n        for (var _0x8f8381 = 0x0; _0x8f8381 < _0x596212; _0x8f8381++) {\n            if (_0x8f8381 === 0x0)\n                _0x350f6b[_0x1385db[_0x8f8381] - 0x1] = 0x1;\n            var _0x58871d = _0x350f6b[_0x1385db[_0x8f8381] - 0x1] + _0x56878e[_0x8f8381];\n            if (!_0x350f6b[_0x40d858[_0x8f8381] - 0x1]) {\n                _0x350f6b[_0x40d858[_0x8f8381] - 0x1] = _0x58871d;\n            } else {\n                if (_0x350f6b[_0x40d858[_0x8f8381] - 0x1] !== _0x58871d) {\n                    _0x2cba5e = 'No';\n                    break _0x30b754;\n                }\n            }\n        }\n    if (!_0x2cba5e)\n        _0x2cba5e = 'Yes';\n    console['log'](_0x2cba5e);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n1 2 1\n2 3 1\n1 3 2", "Yes"], ["3 3\n1 2 1\n2 3 1\n1 3 5", "No"], ["4 3\n2 1 1\n2 3 5\n3 4 2", "Yes"], ["10 3\n8 7 100\n7 9 100\n9 8 100", "No"], ["100 0", "Yes"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar line = input.split(\"\\n\");\n\tvar tmp = line[0].split(\" \");\n\tvar N = Number(tmp[0]);\n\tvar M = Number(tmp[1]);\n\tvar L = [];\n\tvar R = [];\n\tvar D = [];\n\tfor(var i = 1; i <= M; i++){\n\t\tvar tmp = line[i].split(\" \");\n\t\tL.push(Number(tmp[0]));\n\t\tR.push(Number(tmp[1]));\n\t\tD.push(Number(tmp[2]));\n\t}\n\tvar pos = [];\n\tvar ans;\n\tloopj : for(var j = 0; j < M; j++){\n\t\tif(j === 0) pos[L[j]-1] = 1;\n\t\tvar rightpos = pos[L[j]-1] + D[j];\n\t\tif(!pos[R[j]-1]){\n\t\t\tpos[R[j]-1] = rightpos;\n\t\t} else{\n\t\t\tif(pos[R[j]-1] !== rightpos){\n\t\t\t\tans = 'No';\n\t\t\t\tbreak loopj;\n\t\t\t}\n\t\t}\n\t}\n\n\tif(!ans) ans = 'Yes';\n\n\tconsole.log(ans);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03497_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nN = l[0x0];\nK = l[0x1];\nA = inp['shift']()['split']('\\x20');\no = {};\na = [];\nfor (i = 0x0; i < N; i++) {\n    a[A[i]] = (a[A[i]] || 0x0) + 0x1;\n    o[A[i]] = 0x1;\n}\nkeys = Object['keys'](o);\nc = keys['length'] - K;\nif (c > 0x0) {\n    a['sort']();\n    cnt = 0x0;\n    for (k of a) {\n        cnt += k;\n        c--;\n        if (c === 0x0) {\n            break;\n        }\n    }\n    console['log'](cnt);\n} else {\n    console['log'](0x0);\n}", "test_cases": [["5 2\n1 1 2 2 5", "1"], ["4 4\n1 1 2 2", "0"], ["10 3\n5 1 3 2 4 1 1 2 3 4", "3"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nN = l[0]\nK = l[1]\nA = inp.shift().split(' ')\no = {}\na = []\nfor (i=0; i<N; i++) {\n    a[A[i]] = (a[A[i]] || 0) + 1\n    o[A[i]] = 1\n}\nkeys = Object.keys(o)\nc = keys.length - K\nif (c > 0) {\n    a.sort()\n    cnt = 0\n    for (k of a) {\n        cnt += k\n        c--\n        if (c===0) {\n            break;\n        }\n    }\n    console.log(cnt)    \n} else {\n    console.log(0)\n}\n", "language": "JavaScript"}
{"filename": "p03577_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar g_input = '';\nprocess['stdin']['on']('data', function (_0x38e678) {\n    g_input += _0x38e678;\n});\nprocess['stdin']['on']('end', function () {\n    Main(g_input['split'](/\\r?\\n/));\n});\nfunction Main(_0xab20df) {\n    console['log'](_0xab20df[0x0]['slice'](0x0, _0xab20df[0x0]['length'] - 'FESTIVAL'['length']));\n    return 0x0;\n}", "test_cases": [["CODEFESTIVAL", "CODE"], ["CODEFESTIVALFESTIVAL", "CODEFESTIVAL"], ["YAKINIKUFESTIVAL", "YAKINIKU"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar g_input = '';\nprocess.stdin.on('data', function(chunk) {\n    g_input += chunk;\n});\n\nprocess.stdin.on('end', function() {\n    Main(g_input.split(/\\r?\\n/));\n});\n\nfunction Main(input) {\n\n    console.log(input[0].slice(0, input[0].length - 'FESTIVAL'.length));\n\n    return 0;\n}\n", "language": "JavaScript"}
{"filename": "p03599_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\n(_0x108173 => {\n    const [_0x397a40, _0x2a8a2e, _0x1d8e36, _0x44941b, _0x4f0a3b, _0x33e03c] = _0x108173['trim']()['split']('\\x20')['map'](Number);\n    let _0x1a57e1 = {};\n    let _0xf85328 = {};\n    for (let _0x400551 = 0x1; _0x400551 < _0x33e03c; _0x400551++) {\n        for (let _0x1b021a = 0x0; _0x1b021a < _0x33e03c; _0x1b021a++) {\n            const _0x221655 = _0x397a40 * _0x400551 * 0x64 + _0x1b021a * _0x2a8a2e * 0x64;\n            if (_0x221655 > _0x33e03c)\n                break;\n            _0x1a57e1[_0x221655] = 0x1;\n        }\n    }\n    const _0x3b4565 = _0x33e03c * _0x4f0a3b / 0x64;\n    for (let _0x2adb56 = 0x0; _0x2adb56 < _0x33e03c; _0x2adb56++) {\n        for (let _0x97c6c2 = 0x0; _0x97c6c2 < _0x33e03c; _0x97c6c2++) {\n            const _0x60def0 = _0x1d8e36 * _0x2adb56 + _0x44941b * _0x97c6c2;\n            if (_0x60def0 > _0x3b4565)\n                break;\n            _0xf85328[_0x60def0] = 0x1;\n        }\n    }\n    let _0x3670a3 = [\n        _0x397a40 * 0x64,\n        0x0\n    ];\n    let _0x25f0b2 = 0x0;\n    let _0x177fac = _0x4f0a3b / 0x64;\n    for (let _0x5126f3 in _0x1a57e1) {\n        for (let _0x183fbf in _0xf85328) {\n            const _0xfd0508 = _0x5126f3 - 0x0 + (_0x183fbf - 0x0);\n            const _0x3aee18 = _0x183fbf / _0x5126f3;\n            if (_0x3aee18 > _0x177fac || _0xfd0508 > _0x33e03c)\n                continue;\n            if (_0x3aee18 > _0x25f0b2) {\n                _0x25f0b2 = _0x3aee18;\n                _0x3670a3 = [\n                    _0xfd0508,\n                    _0x183fbf\n                ];\n            }\n        }\n    }\n    console['log'](_0x3670a3[0x0], _0x3670a3[0x1]);\n})(input);", "test_cases": [["1 2 10 20 15 200", "110 10"], ["1 2 1 2 100 1000", "200 100"], ["17 19 22 26 55 2802", "2634 934"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\n\n;(input => {\n  \n  const [A, B, C, D, E, F] = input.trim().split(' ').map(Number)\n\n  let W = {}\n  let S = {}\n  \n  for (let i = 1; i < F; i ++) {\n    for (let j = 0; j < F; j++) {\n      const s = A * i * 100 + j * B * 100\n      if (s > F) break\n\t  W[s] = 1\n    }\n  }\n  \n  const p = F * E / 100\n  for (let i = 0; i < F; i ++) {\n    for (let j = 0; j < F; j++) {\n      const s = C * i + D * j\n      if (s > p) break\n\t  S[s] = 1\n    }\n  }\n\n  let ans = [A * 100, 0]\n  let max = 0\n  let r = E / 100\n  for (let i in W) {\n    for (let j in S) {\n      const t = (i - 0) + (j - 0)\n      const sw = j / i\n      if (sw > r || t > F) continue\n      if (sw > max) {\n        max = sw\n\t    ans = [t, j]\n      }\n    }\n  }\n  \n  console.log(ans[0], ans[1])\n  \n    \n})(input)\n", "language": "JavaScript"}
{"filename": "p03612_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x245c79 => {\n    _0x245c79 = _0x245c79['trim']()['split']('\\x0a');\n    const _0x1ce20e = parseInt(_0x245c79[0x0]);\n    const _0x4faa47 = _0x245c79[0x1]['split']('\\x20')['map'](_0x5da1d9 => parseInt(_0x5da1d9));\n    let _0x4ef6dc = 0x0;\n    for (let _0xe33da0 in _0x4faa47) {\n        if (parseInt(_0xe33da0) + 0x1 === _0x4faa47[_0xe33da0]) {\n            let _0x222833 = _0x4faa47[_0xe33da0];\n            _0x4faa47[_0xe33da0] = _0x4faa47[parseInt(_0xe33da0) + 0x1];\n            _0x4faa47[parseInt(_0xe33da0) + 0x1] = _0x222833;\n            _0x4ef6dc++;\n        }\n    }\n    console['log'](_0x4ef6dc);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 4 3 5 2", "2"], ["2\n1 2", "1"], ["2\n2 1", "0"], ["9\n1 2 4 9 5 8 7 3 6", "3"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0]);\n    const P = arg[1].split(\" \").map(n=>parseInt(n));\n    \n    let answer = 0;\n    \n    for(let i in P) {\n        if(parseInt(i) + 1 === P[i]) {\n            let temp = P[i];\n            P[i] = P[parseInt(i) + 1];\n            P[parseInt(i) + 1] = temp;\n            answer++;\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03681_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x2ff08a) {\n    _0x2ff08a = _0x2ff08a['split']('\\x20')['map'](_0xd71530 => ~~_0xd71530);\n    const _0x2404ad = _0x2ff08a[0x0];\n    const _0x259349 = _0x2ff08a[0x1];\n    const _0x2cef72 = 0x3b9aca00 + 0x7;\n    if (Math['abs'](_0x2404ad - _0x259349) >= 0x2) {\n        console['log'](0x0);\n        return;\n    }\n    let _0x336d05 = 0x1;\n    for (let _0x1f550a = 0x2; _0x1f550a <= _0x2404ad; _0x1f550a++) {\n        _0x336d05 *= _0x1f550a;\n        if (_0x336d05 >= _0x2cef72) {\n            _0x336d05 = _0x336d05 % _0x2cef72;\n        }\n    }\n    for (let _0x307e53 = 0x2; _0x307e53 <= _0x259349; _0x307e53++) {\n        _0x336d05 *= _0x307e53;\n        if (_0x336d05 >= _0x2cef72) {\n            _0x336d05 = _0x336d05 % _0x2cef72;\n        }\n    }\n    let _0x34369d = _0x336d05 % _0x2cef72;\n    if (_0x2404ad == _0x259349) {\n        _0x34369d = 0x2 * _0x34369d;\n    }\n    const _0x416b8b = _0x34369d % _0x2cef72;\n    console['log'](_0x416b8b);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 2", "8"], ["3 2", "12"], ["1 8", "0"], ["100000 100000", "530123477"]], "original": "'use strict'\n\nfunction main(input) {\n  input = input.split(' ').map(v => ~~v)\n  const n = input[0]\n  const m = input[1]\n\n  const limit = 1e9 + 7 //(Math.pow(10, 9) + 7)\n\n  //交互に並べられない\n  if (Math.abs(n - m) >= 2) {\n    console.log(0)\n    return\n  }\n\n  let nn = 1\n  for (let i = 2; i <= n; i++) {\n    nn *= i\n    if (nn >= limit) {\n      nn = nn % limit\n    }\n  }\n  // let mm = 1\n  for (let i = 2; i <= m; i++) {\n    nn *= i\n    if (nn >= limit) {\n      nn = nn % limit\n    }\n  }\n  // console.log(nn,mm)\n\n  let tmp = nn % limit\n  // console.log(tmp)\n  if (n == m) {\n    tmp = 2 * tmp\n  }\n  const ans = tmp % limit\n\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p03732_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x532926 => {\n    _0x532926 = _0x532926['trim']()['split']('\\x0a');\n    const _0x5f0b53 = parseInt(_0x532926[0x0]['split']('\\x20')[0x0]);\n    const _0x5926f4 = parseInt(_0x532926[0x0]['split']('\\x20')[0x1]);\n    const _0x2cc5ef = _0x532926['slice'](0x1, _0x5f0b53 + 0x1)['map'](_0x4393aa => _0x4393aa['split']('\\x20')['map'](_0xc8c1d3 => parseInt(_0xc8c1d3)));\n    let _0x31ea98 = [...Array(_0x5f0b53 + 0x1)]['map'](_0xb214c8 => [...Array(_0x5926f4 + 0x1)]['fill'](0x0));\n    let _0x2481d9 = 0x0;\n    for (let _0x45d23d = 0x1; _0x45d23d < _0x5f0b53 + 0x1; _0x45d23d++) {\n        const _0x1510a2 = _0x2cc5ef[_0x45d23d - 0x1][0x0];\n        const _0x5d87dc = _0x2cc5ef[_0x45d23d - 0x1][0x1];\n        for (let _0x44bb24 = 0x0; _0x44bb24 < _0x5926f4 + 0x1; _0x44bb24++) {\n            if (_0x1510a2 > _0x44bb24) {\n                _0x31ea98[_0x45d23d][_0x44bb24] = _0x31ea98[_0x45d23d - 0x1][_0x44bb24];\n            } else {\n                _0x31ea98[_0x45d23d][_0x44bb24] = Math['max'](_0x31ea98[_0x45d23d - 0x1][_0x44bb24], _0x5d87dc + _0x31ea98[_0x45d23d - 0x1][_0x44bb24 - _0x1510a2]);\n            }\n            if (_0x31ea98[_0x45d23d][_0x44bb24] > _0x2481d9) {\n                _0x2481d9 = _0x31ea98[_0x45d23d][_0x44bb24];\n            }\n        }\n    }\n    console['log'](_0x2481d9);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 6\n2 1\n3 4\n4 10\n3 4", "11"], ["4 6\n2 1\n3 7\n4 10\n3 6", "13"], ["4 10\n1 100\n1 100\n1 100\n1 100", "400"], ["4 1\n10 100\n10 100\n10 100\n10 100", "0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const W = parseInt(arg[0].split(\" \")[1]);\n    \n    const wv = arg.slice(1, N + 1).map(n=>n.split(\" \").map(l=>parseInt(l)));\n    \n    let dp = [...Array(N+1)].map(n=>[...Array(W+1)].fill(0));\n    let answer = 0;\n    \n    for(let i=1; i<N+1; i++) {\n        const w = wv[i-1][0];\n        const v = wv[i-1][1];\n        \n        for(let j=0; j<W+1; j++) {\n            if(w > j) {\n                // 単体で重さオーバーなら前回のを引き継ぐ\n                dp[i][j] = dp[i-1][j];\n            } else {\n                dp[i][j] = Math.max(dp[i-1][j], v + dp[i-1][j - w]);\n            }\n            \n            if(dp[i][j] > answer) {\n                answer = dp[i][j];\n            }\n        }\n    }\n    \n    console.log(answer);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03779_1", "type": "JavaScript", "obfuscated": "function main(_0x2480b2) {\n    var _0x4d520e = _0x2480b2[0x0] - 0x0;\n    var _0x284be6 = 0x1;\n    var _0x4063de = 0x0;\n    for (_0x284be6 = 0x1; _0x4063de < _0x4d520e; _0x284be6++) {\n        _0x4063de += _0x284be6;\n    }\n    console['log'](_0x284be6 - 0x1);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["6", "3"], ["2", "2"], ["11", "5"]], "original": "function main(input) {\n    var n = input[0]-0;\n    var cnt = 1;\n    var ans = 0;\n    for(cnt=1;ans<n;cnt++){\n        ans += cnt;\n    }\n    console.log(cnt-1);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p03957_1", "type": "JavaScript", "obfuscated": "function Main(_0x543cd1) {\n    var _0x543cd1 = _0x543cd1['split']('\\x0a');\n    var _0x2c01cb = _0x543cd1[0x0];\n    var _0x4c981b, _0x154747, _0x1adbe0 = 0x0;\n    for (var _0x58fa00 = 0x0; _0x58fa00 < _0x2c01cb['length']; _0x58fa00++) {\n        if (_0x2c01cb[_0x58fa00] == 'C' && !_0x1adbe0) {\n            _0x4c981b = _0x58fa00;\n            _0x1adbe0++;\n        }\n        ;\n        if (_0x1adbe0 && _0x2c01cb[_0x58fa00] == 'F') {\n            _0x154747 = _0x58fa00;\n            return console['log']('Yes');\n        }\n    }\n    ;\n    return console['log']('No');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["CODEFESTIVAL", "Yes"], ["FESTIVALCODE", "No"], ["CF", "Yes"], ["FCF", "Yes"]], "original": "function Main(input) {\n  var input = input.split(\"\\n\");\n  var string = input[0];\n  var c,f,Cfound = 0;\n  for(var i = 0;i < string.length;i++){\n    if(string[i] == \"C\" && !Cfound){\n      c = i;\n      Cfound++;\n    };\n    if(Cfound && string[i] == \"F\"){\n      f = i;\n      return console.log(\"Yes\");\n    }\n  };\n  return console.log(\"No\");\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04034_1", "type": "JavaScript", "obfuscated": "input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlines = input['split']('\\x0a');\nline = lines['shift']()['split']('\\x20');\nN = line[0x0] * 0x1;\nM = line[0x1] * 0x1;\nb = [];\nr = [];\nfor (i = 0x1; i <= N; i++) {\n    b[i] = 0x1;\n    r[i] = 0x0;\n}\nr[0x1] = 0x1;\nfor (i = 0x0; i < M; i++) {\n    l = lines[i]['split']('\\x20');\n    x = l[0x0] * 0x1;\n    y = l[0x1] * 0x1;\n    if (r[x]) {\n        r[y] += 0x1;\n    }\n    if (r[x] && b[x] == 0x1) {\n        r[x] = 0x0;\n    }\n    b[x] -= 0x1;\n    b[y] += 0x1;\n}\ncnt = 0x0;\nfor (i = 0x1; i <= N; i++) {\n    if (r[i] > 0x0) {\n        cnt++;\n    }\n}\nconsole['log'](cnt);", "test_cases": [["3 2\n1 2\n2 3", "2"], ["3 3\n1 2\n2 3\n2 3", "1"], ["4 4\n1 2\n2 3\n4 1\n3 4", "3"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nline = lines.shift().split(' ')\nN = line[0] * 1\nM = line[1] * 1\nb = []\nr = []\nfor (i=1; i<=N; i++) {\n    b[i] = 1\n    r[i] = 0\n}\nr[1] = 1\nfor (i=0; i<M; i++) {\n  l = lines[i].split(' ')\n  x = l[0] * 1\n  y = l[1] * 1\n  if (r[x]) {\n      r[y] += 1\n  }\n  if (r[x] && b[x] == 1) {\n      r[x] = 0\n  }\n  b[x] -= 1\n  b[y] += 1\n}\ncnt = 0\nfor (i=1; i<=N; i++) {\n    if (r[i] > 0) {\n        cnt++\n    }\n}\nconsole.log(cnt)", "language": "JavaScript"}
{"filename": "p00011_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['split']('\\x0a');\nvar w = +lines['shift']();\nvar n = +lines['shift']();\nvar list = [];\nvar line = null;\nwhile (line = lines['shift']()) {\n    var args = line['split'](',');\n    list['push'](args);\n}\nvar answers = [];\nfor (var i = 0x1; i <= w; i++) {\n    var k = i;\n    list['forEach'](function (_0x2369df) {\n        if (_0x2369df[0x0] == k) {\n            k = _0x2369df[0x1];\n        } else if (_0x2369df[0x1] == k) {\n            k = _0x2369df[0x0];\n        }\n    });\n    answers[k] = i;\n}\nanswers['shift']();\nconsole['log'](answers['join']('\\x0a'));", "test_cases": [["5\n4\n2,4\n3,5\n1,2\n3,4", "4\n1\n2\n5\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nvar w = +lines.shift();\nvar n = +lines.shift();\n\nvar list = [];\nvar line = null;\nwhile (line = lines.shift()) {\n    var args = line.split(',');\n    list.push(args);\n}\n\nvar answers = [];\nfor (var i = 1; i <= w; i++) {\n    var k = i;\n    list.forEach(function(args) {\n        if (args[0] == k) {\n            k = args[1];\n        } else if (args[1] == k) {\n            k = args[0];\n        }\n    });\n    answers[k] = i;\n}\nanswers.shift();\nconsole.log(answers.join('\\n'));", "language": "JavaScript"}
{"filename": "p00025_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['split']('\\x0a');\nvar imagine;\nwhile (imagine = lines['shift']()) {\n    var guess = lines['shift']();\n    var a = imagine['split']('\\x20')['map'](function (_0x316558) {\n        return +_0x316558;\n    });\n    var b = guess['split']('\\x20')['map'](function (_0x26d889) {\n        return +_0x26d889;\n    });\n    var hit = 0x0;\n    for (var i = 0x0; i < 0x4; i++) {\n        if (a[i] == b[i]) {\n            hit++;\n        }\n    }\n    var blow = 0x0;\n    for (var i = 0x0; i < 0x4; i++) {\n        if (a['indexOf'](b[i]) >= 0x0) {\n            blow++;\n        }\n    }\n    blow -= hit;\n    console['log'](hit + '\\x20' + blow);\n}", "test_cases": [["9 1 8 2\n4 1 5 9\n4 6 8 2\n4 6 3 2", "1 1\n3 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n\nvar imagine;\nwhile (imagine = lines.shift()) {\n\tvar guess = lines.shift();\n\n\tvar a = imagine.split(' ').map(function(n){return +n;});\n\tvar b = guess.split(' ').map(function(n){return +n;});\n\n\tvar hit = 0;\n\tfor (var i = 0; i < 4; i++) {\n\t\tif (a[i] == b[i]) {\n\t\t\thit++;\n\t\t}\n\t}\n\n\tvar blow = 0;\n\tfor (var i = 0; i < 4; i++) {\n\t\tif (a.indexOf(b[i]) >= 0) {\n\t\t\tblow++;\n\t\t}\n\t}\n\tblow -= hit;\n\n\tconsole.log(hit + ' ' + blow);\n}", "language": "JavaScript"}
{"filename": "p00048_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\s/)['map'](function (_0x41cc0a) {\n    (j = +_0x41cc0a) ? console['log'](j <= 0x30 ? 'light\\x20fly' : j <= 0x33 ? 'fly' : j <= 0x36 ? 'bantam' : j <= 0x39 ? 'feather' : j <= 0x3c ? 'light' : j <= 0x40 ? 'light\\x20welter' : j <= 0x45 ? 'welter' : j <= 0x4b ? 'light\\x20middle' : j <= 0x51 ? 'middle' : j <= 0x5b ? 'light\\x20heavy' : 'heavy') : 0x0;\n});", "test_cases": [["60.2\n70.2\n48.0\n80.2", "light welter\nlight middle\nlight fly\nmiddle"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split(/\\s/).map(function(i){(j=+i)?console.log(j<=48?'light fly':j<=51?'fly':j<=54?'bantam':j<=57?'feather':j<=60?'light':j<=64?'light welter':j<=69?'welter':j<=75?'light middle':j<=81?'middle':j<=91?'light heavy':'heavy'):0})", "language": "JavaScript"}
{"filename": "p00104_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x47ef04) {\n    main(_0x47ef04['trim']());\n});\nfunction main(_0x3087f6) {\n    var _0x46406e = _0x3087f6['split']('\\x0a');\n    for (var _0x46fa04 = 0x0; _0x46fa04 < _0x46406e['length'] - 0x1;) {\n        var _0x33e89c = Number(_0x46406e[_0x46fa04]['split']('\\x20')[0x0]);\n        var _0x1c8011 = Number(_0x46406e[_0x46fa04]['split']('\\x20')[0x1]);\n        var _0x4eaf87 = [];\n        _0x46fa04++;\n        for (var _0x1578bc = 0x0; _0x1578bc < _0x33e89c; _0x1578bc++) {\n            _0x4eaf87[_0x1578bc] = _0x46406e[_0x46fa04]['split']('');\n            _0x46fa04++;\n        }\n        console['log'](calc(_0x4eaf87, 0x0, 0x0));\n    }\n}\nfunction calc(_0x49e373, _0x13afae, _0x20da5a) {\n    if (_0x49e373[_0x13afae][_0x20da5a] == '.') {\n        return _0x20da5a + '\\x20' + _0x13afae;\n    }\n    if (_0x49e373[_0x13afae][_0x20da5a] == '1') {\n        return 'LOOP';\n    }\n    switch (_0x49e373[_0x13afae][_0x20da5a]) {\n    case '>':\n        _0x49e373[_0x13afae][_0x20da5a] = '1';\n        return calc(_0x49e373, _0x13afae, _0x20da5a + 0x1);\n    case '<':\n        _0x49e373[_0x13afae][_0x20da5a] = '1';\n        return calc(_0x49e373, _0x13afae, _0x20da5a - 0x1);\n    case 'v':\n        _0x49e373[_0x13afae][_0x20da5a] = '1';\n        return calc(_0x49e373, _0x13afae + 0x1, _0x20da5a);\n    case '^':\n        _0x49e373[_0x13afae][_0x20da5a] = '1';\n        return calc(_0x49e373, _0x13afae - 0x1, _0x20da5a);\n    }\n}", "test_cases": [["10 10\n>>>v..>>>v\n...v..^..v\n>>>>>>^..v\n.........v\n.v<<<<...v\n.v.v.^...v\n.v.v.^<<<<\n.v.v.....v\n.v...^...v\n.>>>>^....\n6 10\n>>>>>>>>>v\n.........v\n.........v\n>>>>v....v\n^...v....v\n^<<<<<<<<<\n0 0", "5 7\nLOOP"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n    main(chunk.trim());\n});\n\nfunction main(chunk){\n    var lines = chunk.split(\"\\n\");\n    for(var n=0;n<lines.length-1;){\n        var H = Number(lines[n].split(\" \")[0]);\n        var W = Number(lines[n].split(\" \")[1]);\n        var map = [];\n        n++;\n        for(var i=0;i<H;i++){\n            map[i] = lines[n].split(\"\");\n            n++;\n        }\n        console.log(calc(map,0,0));\n    }\n}\nfunction calc(map,h,w){\n    if(map[h][w] == \".\"){\n        return w + \" \"+ h;\n    }\n    if(map[h][w] == \"1\"){\n        return \"LOOP\";\n    }\n    switch(map[h][w]){\n    case '>':\n        map[h][w] = \"1\";\n        return calc(map,h,w+1);\n    case '<':\n        map[h][w] = \"1\";\n        return calc(map,h,w-1);\n    case 'v':\n        map[h][w] = \"1\";\n        return calc(map,h+1,w);\n    case '^':\n        map[h][w] = \"1\";\n        return calc(map,h-1,w);\n    }\n}", "language": "JavaScript"}
{"filename": "p00122_1", "type": "JavaScript", "obfuscated": "function bomb(_0x3224e6, _0x51517c, _0x55afb6) {\n    max = Math['max'](max, _0x55afb6);\n    if (max == n)\n        return;\n    var _0x2ef408 = [\n        -0x1,\n        0x0,\n        0x1,\n        -0x2,\n        0x2,\n        -0x2,\n        0x2,\n        -0x2,\n        0x2,\n        -0x1,\n        0x0,\n        0x1\n    ];\n    var _0x5f1b7c = [\n        -0x2,\n        -0x2,\n        -0x2,\n        -0x1,\n        -0x1,\n        0x0,\n        0x0,\n        0x1,\n        0x1,\n        0x2,\n        0x2,\n        0x2\n    ];\n    var _0x303015 = {};\n    for (var _0xa9ccd = -0x1; _0xa9ccd <= 0x1; _0xa9ccd++) {\n        for (var _0x2d1d97 = -0x1; _0x2d1d97 <= 0x1; _0x2d1d97++) {\n            _0x303015[water[_0x55afb6 * 0x2] + _0xa9ccd + '\\x20' + (water[_0x55afb6 * 0x2 + 0x1] + _0x2d1d97)] = !![];\n        }\n    }\n    for (var _0xa9ccd = 0x0; _0xa9ccd < 0xc; _0xa9ccd++) {\n        var _0x4f8296 = _0x3224e6 + _0x2ef408[_0xa9ccd];\n        var _0x28280b = _0x51517c + _0x5f1b7c[_0xa9ccd];\n        if (_0x4f8296 < 0x0 || _0x28280b < 0x0 || _0x4f8296 >= 0xa || _0x28280b >= 0xa)\n            continue;\n        if (_0x303015['hasOwnProperty'](_0x4f8296 + '\\x20' + _0x28280b))\n            bomb(_0x4f8296, _0x28280b, _0x55afb6 + 0x1);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var xy = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (xy[0x0] == 0x0 && xy[0x1] == 0x0)\n        break;\n    var map = [\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        []\n    ];\n    var n = Arr['shift']() - 0x0;\n    var water = Arr['shift']()['split']('\\x20')['map'](Number);\n    var max = 0x0;\n    bomb(xy[0x0], xy[0x1], 0x0);\n    console['log'](max == n ? 'OK' : 'NA');\n}", "test_cases": [["6 1\n10\n6 4 3 3 1 2 0 5 4 6 1 8 5 9 7 7 8 6 8 3\n6 1\n10\n6 4 3 3 1 2 0 5 4 6 1 8 5 9 7 7 8 6 9 0\n0 0", "OK\nNA"]], "original": "function bomb(x,y,z){\n   max=Math.max(max,z);\n   if(max==n)return;\n   var dx=[-1,0,1,-2,2,-2,2,-2,2,-1,0,1];\n   var dy=[-2,-2,-2,-1,-1,0,0,1,1,2,2,2];\n   var Safe={};\n   for(var i=-1;i<=1;i++){\n      for(var j=-1;j<=1;j++){\n         Safe[(water[z*2]+i)+\" \"+(water[z*2+1]+j)]=true;\n      }\n   }\n   for(var i=0;i<12;i++){\n      var xx=x+dx[i];\n      var yy=y+dy[i];\n      if(xx<0 || yy<0 || xx>=10 || yy>=10)continue;\n      if(Safe.hasOwnProperty(xx+\" \"+yy))bomb(xx,yy,z+1);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var xy=(Arr.shift()).split(\" \").map(Number);\n   if(xy[0]==0 && xy[1]==0)break;\n   var map=[[],[],[],[],[],[],[],[],[],[]];\n   var n=Arr.shift()-0;\n   var water=(Arr.shift()).split(\" \").map(Number);\n   var max=0;\n   bomb(xy[0],xy[1],0);\n   console.log((max==n)?\"OK\":\"NA\");\n}", "language": "JavaScript"}
{"filename": "p00201_1", "type": "JavaScript", "obfuscated": "function bomb(_0x58953c) {\n    var _0x33ceeb = obj[_0x58953c];\n    M['forEach'](function (_0x9a2c2b) {\n        if (_0x58953c == _0x9a2c2b[0x0]) {\n            var _0x3a1cf0 = 0x0;\n            _0x9a2c2b[0x1]['forEach'](function (_0x4223d9) {\n                _0x3a1cf0 += bomb(_0x4223d9);\n            });\n            _0x33ceeb = Math['min'](_0x33ceeb, _0x3a1cf0);\n        }\n    });\n    return _0x33ceeb;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var obj = {};\n    for (var i = 0x0; i < n; i++) {\n        var data = arr['shift']()['split']('\\x20');\n        obj[data[0x0]] = data[0x1] - 0x0;\n    }\n    var m = arr['shift']() - 0x0;\n    var M = [];\n    for (var i = 0x0; i < m; i++) {\n        var data = arr['shift']()['split']('\\x20');\n        var name = data['shift']();\n        data['shift']();\n        M['push']([\n            name,\n            data\n        ]);\n    }\n    var item = arr['shift']();\n    console['log'](bomb(item));\n}", "test_cases": [["8\nwood 3000\nstring 800\nrice 36\nwater 0\nracket 5000\nmicrophone 9800\nonigiri 140\nguitar 98000\n3\nracket 2 wood string\nonigiri 2 rice water\nguitar 3 racket microphone onigiri\nguitar\n1\ncomputer 300000\n0\ncomputer\n0", "13636\n300000"]], "original": "function bomb(name){\n   var min=obj[name];\n   M.forEach(function(v){\n      if(name==v[0]){\n         var sum=0;\n         v[1].forEach(function(value){\n            sum+=bomb(value);\n         });\n         min=Math.min(min,sum);\n      }\n   });\n   return min;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var obj={};\n   for(var i=0;i<n;i++){\n      var data=arr.shift().split(\" \");\n      obj[data[0]]=data[1]-0;\n   }\n   var m=arr.shift()-0;\n   var M=[];\n   for(var i=0;i<m;i++){\n      var data=arr.shift().split(\" \");\n      var name=data.shift();\n      data.shift();\n      M.push([name,data]);\n   }\n   var item=arr.shift();\n   console.log(bomb(item));\n}", "language": "JavaScript"}
{"filename": "p00203_1", "type": "JavaScript", "obfuscated": "function bomb(_0x413940, _0x4bf629) {\n    if (yx[_0x413940][_0x4bf629] == 0x1)\n        return;\n    else if (yx[_0x413940][_0x4bf629] == 0x2) {\n        var _0x4978e0 = _0x413940 + 0x2;\n        var _0x233a48 = _0x4bf629;\n        if (_0x4978e0 >= h) {\n            cnt++;\n            return;\n        }\n        bomb(_0x4978e0, _0x233a48);\n    } else if (yx[_0x413940][_0x4bf629] == 0x0) {\n        var _0x28e324 = [\n            -0x1,\n            0x0,\n            0x1\n        ];\n        for (var _0x12a622 = 0x0; _0x12a622 < _0x28e324['length']; _0x12a622++) {\n            var _0x4978e0 = _0x413940 + 0x1;\n            var _0x233a48 = _0x4bf629 + _0x28e324[_0x12a622];\n            if (_0x233a48 < 0x0 || _0x233a48 >= w)\n                continue;\n            if (_0x4978e0 >= h) {\n                cnt++;\n                return;\n            }\n            if (yx[_0x4978e0][_0x233a48] == 0x2 && _0x28e324[_0x12a622] != 0x0)\n                continue;\n            bomb(_0x4978e0, _0x233a48);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var wh = arr['shift']()['split']('\\x20')['map'](Number);\n    var w = wh[0x0];\n    var h = wh[0x1];\n    if (w == 0x0 && h == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < h; i++)\n        yx['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var cnt = 0x0;\n    for (var i = 0x0; i < w; i++) {\n        bomb(0x0, i);\n    }\n    console['log'](cnt);\n}", "test_cases": [["5 5\n0 0 0 0 1\n2 1 0 2 0\n1 0 0 1 1\n0 2 1 2 0\n0 1 0 0 0\n5 5\n0 0 1 0 0\n2 1 0 2 0\n1 0 0 1 1\n0 2 1 2 0\n0 1 0 0 0\n15 15\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0", "8\n6\n52694573"]], "original": "function bomb(y,x){\n   if(yx[y][x]==1)return;\n   else if(yx[y][x]==2){\n      var Y=y+2;\n      var X=x;\n      if(Y>=h){cnt++;return;}\n      bomb(Y,X);\n   }\n   else if(yx[y][x]==0){\n      var dx=[-1,0,1];\n      for(var i=0;i<dx.length;i++){\n         var Y=y+1;\n         var X=x+dx[i];\n         if(X<0 || X>=w)continue;\n         if(Y>=h){cnt++;return;}\n         if(yx[Y][X]==2 && dx[i]!=0)continue;\n         bomb(Y,X);\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wh=arr.shift().split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   if(w==0 && h==0)break;\n   var yx=[];\n   for(var i=0;i<h;i++)yx.push(arr.shift().split(\" \").map(Number));\n   var cnt=0;\n   for(var i=0;i<w;i++){\n      bomb(0,i);\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00380_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar b = a['slice']()['sort']((_0x2f9e42, _0x77721a) => _0x2f9e42 - _0x77721a);\nvar q = arr['shift']() - 0x0;\nvar xy = arr['map'](_0x37dfa5 => _0x37dfa5['split']('\\x20')['map'](Number)['map'](_0x2e3b51 => _0x2e3b51 - 0x1));\nxy['unshift']([\n    0x0,\n    0x0\n]);\nvar A = {};\nvar B = {};\nfor (var i = 0x0; i < a['length']; i++) {\n    if (a[i] != b[i]) {\n        A[i] = a[i];\n        B[i] = b[i];\n    }\n}\nvar BB = '';\nfor (var k in B)\n    BB += B[k];\nvar flag = ![];\nfor (var i = 0x0; i <= q; i++) {\n    [A[xy[i][0x0]], A[xy[i][0x1]]] = [\n        A[xy[i][0x1]],\n        A[xy[i][0x0]]\n    ];\n    var AA = '';\n    for (var k in A)\n        AA += A[k];\n    if (AA == BB) {\n        flag = !![];\n        break;\n    }\n}\nif (Object['keys'](A)['length'] == 0x0)\n    console['log'](0x0);\nelse if (flag)\n    console['log'](i);\nelse\n    console['log'](-0x1);", "test_cases": [["6\n9 7 5 6 3 1\n3\n1 6\n2 5\n3 4", "2"], ["4\n4 3 2 1\n2\n1 2\n3 4", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar b=a.slice().sort((x,y)=> x-y);\nvar q=arr.shift()-0;\nvar xy=arr.map(v=> v.split(\" \").map(Number).map(v=>v-1));\nxy.unshift([0,0]);\nvar A={};\nvar B={};\nfor(var i=0;i<a.length;i++){\n   if(a[i]!=b[i]){\n      A[i]=a[i];\n      B[i]=b[i];\n   }\n}\nvar BB=\"\";\nfor(var k in B)BB+=B[k];\nvar flag=false;\nfor(var i=0;i<=q;i++){\n   [A[xy[i][0]],A[xy[i][1]] ]= [A[xy[i][1]],A[xy[i][0]]];\n   var AA=\"\";\n   for(var k in A)AA+=A[k];\n   if(AA==BB){\n      flag=true;\n      break;\n   }\n}\nif(Object.keys(A).length==0)console.log(0);\nelse if(flag)console.log(i);\nelse console.log(-1);\n", "language": "JavaScript"}
{"filename": "p00669_1", "type": "JavaScript", "obfuscated": "function maxCards(_0x18a428, _0x10f1cf) {\n    for (var _0x470f99 = 0x0; _0x470f99 < n - (k - 0x1); _0x470f99++) {\n        var _0x463143 = 0x1;\n        var _0x217d75 = 0x0;\n        while (_0x217d75 < k) {\n            _0x463143 *= _0x18a428[_0x470f99 + _0x217d75];\n            _0x217d75++;\n        }\n        _0x10f1cf = Math['max'](_0x10f1cf, _0x463143);\n    }\n    return _0x10f1cf;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar I = 0x0;\nwhile (!![]) {\n    var nk = Arr[I]['split']('\\x20')['map'](Number);\n    I++;\n    var n = nk[0x0];\n    var k = nk[0x1];\n    if (n == 0x0 && k == 0x0)\n        break;\n    var c = [];\n    for (var i = 0x0; i < n; i++) {\n        c['push'](Arr[I]);\n        I++;\n    }\n    var maxA = 0x1;\n    maxA = maxCards(c, maxA);\n    var maxB = 0x1;\n    for (var i = 0x0; i < n; i++) {\n        for (var j = i + 0x1; j < n; j++) {\n            var memo = c[i];\n            c[i] = c[j];\n            c[j] = memo;\n            maxB = maxCards(c, maxB);\n            c[j] = c[i];\n            c[i] = memo;\n        }\n    }\n    console['log'](maxA > maxB ? 'NO\\x20GAME' : maxB - maxA);\n}", "test_cases": [["4 2\n2\n3\n7\n5\n0 0", "0"]], "original": "function maxCards(arr,max){\n   for(var i=0;i<n-(k-1);i++){\n      var x=1;\n      var j=0;\n      while(j<k){\n         x*=arr[i+j];\n         j++;\n      }\n      max=Math.max(max,x);\n   }\n   return max;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=0;\nwhile(true){\n   var nk=Arr[I].split(\" \").map(Number);\n   I++;\n   var n=nk[0];\n   var k=nk[1];\n   if(n==0 && k==0)break;\n   var c=[];\n   for(var i=0;i<n;i++){\n      c.push(Arr[I]);\n      I++;\n   }\n   var maxA=1;\n   maxA=maxCards(c,maxA);\n   var maxB=1;\n   for(var i=0;i<n;i++){\n      for(var j=i+1;j<n;j++){\n         var memo=c[i];\n         c[i]=c[j];\n         c[j]=memo;\n         maxB=maxCards(c,maxB);\n         c[j]=c[i];\n         c[i]=memo;\n      }\n   }\n   console.log((maxA>maxB)?\"NO GAME\":maxB-maxA);\n}", "language": "JavaScript"}
{"filename": "p02399_1", "type": "JavaScript", "obfuscated": "var x = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar array = x['split']('\\x20')['map'](Number);\nvar a = array[0x0];\nvar b = array[0x1];\nvar d = Math['floor'](a / b);\nvar r = a % b;\nvar f = (a / b)['toFixed'](0x5);\nconsole['log'](d + '\\x20' + r + '\\x20' + f);", "test_cases": [["3 2", "1 1 1.50000"]], "original": "var x = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar array = x.split(\" \").map(Number);\n\nvar a = array[0];\nvar b = array[1];\nvar d = Math.floor( a / b);\nvar r = a % b;\nvar f = ( a / b ).toFixed(5);\n\nconsole.log(d + \" \" + r + \" \" + f);\n\n", "language": "JavaScript"}
{"filename": "p02731_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x16feac) {\n    _0x16feac = _0x16feac['split']('\\x0a');\n    var _0x5ddb9a = _0x16feac / 0x3 * _0x16feac / 0x3 * _0x16feac / 0x3;\n    console['log'](_0x5ddb9a['toFixed'](0xc));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "1.000000000000"], ["999", "36926037.000000000000"]], "original": "\"use strict\";\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var volume=input/3*input/3*input/3;\n  console.log(volume.toFixed(12));\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03132_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x3a5421) {\n    const _0x318ea4 = _0x3a5421['split']('\\x0a');\n    const _0x5cc8de = Number(_0x318ea4[0x0]);\n    const _0x1769e8 = [];\n    for (let _0x327365 = 0x0; _0x327365 < _0x5cc8de; _0x327365++) {\n        _0x1769e8['push'](Number(_0x318ea4[_0x327365 + 0x1]));\n    }\n    const _0xecbee7 = Array(_0x5cc8de + 0x1)['fill']()['map'](() => Array(0x5)['fill']());\n    _0xecbee7[0x0] = [\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0\n    ];\n    for (let _0x2c9bdb = 0x1; _0x2c9bdb <= _0x5cc8de; _0x2c9bdb++) {\n        let _0x1936ab = _0x1769e8[_0x2c9bdb - 0x1];\n        let _0x402280 = _0x1769e8[_0x2c9bdb - 0x1] === 0x0 ? 0x2 : _0x1936ab % 0x2;\n        let _0x3e05fa = (_0x1936ab + 0x1) % 0x2;\n        _0xecbee7[_0x2c9bdb][0x0] = _0xecbee7[_0x2c9bdb - 0x1][0x0] + _0x1936ab;\n        _0xecbee7[_0x2c9bdb][0x1] = Math['min'](_0xecbee7[_0x2c9bdb - 0x1][0x0], _0xecbee7[_0x2c9bdb - 0x1][0x1]) + _0x402280;\n        _0xecbee7[_0x2c9bdb][0x2] = Math['min'](_0xecbee7[_0x2c9bdb - 0x1][0x0], _0xecbee7[_0x2c9bdb - 0x1][0x1], _0xecbee7[_0x2c9bdb - 0x1][0x2]) + _0x3e05fa;\n        _0xecbee7[_0x2c9bdb][0x3] = Math['min'](_0xecbee7[_0x2c9bdb - 0x1][0x2], _0xecbee7[_0x2c9bdb - 0x1][0x3]) + _0x402280;\n        _0xecbee7[_0x2c9bdb][0x4] = Math['min'](_0xecbee7[_0x2c9bdb - 0x1][0x2], _0xecbee7[_0x2c9bdb - 0x1][0x3], _0xecbee7[_0x2c9bdb - 0x1][0x4]) + _0x1936ab;\n    }\n    console['log'](Math['min'](..._0xecbee7[_0x5cc8de]));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1\n0\n2\n3", "1"], ["8\n2\n0\n0\n2\n1\n3\n4\n1", "3"], ["7\n314159265\n358979323\n846264338\n327950288\n419716939\n937510582\n0", "1"]], "original": "\"use strict\";\nfunction main(input) {\n  const inputs = input.split(\"\\n\");\n  const L = Number(inputs[0]);\n\n  const A = [];\n  for (let i = 0; i < L ; i++) {\n    A.push( Number(inputs[i+1]));\n  }\n  \n  const dp = Array(L + 1).fill().map(() => Array(5).fill());\n  dp[0] = [0, 0, 0, 0, 0];\n\n  for (let i = 1; i <= L; i++) {\n    let cur = A[i-1];\n    let curEven = A[i-1] === 0 ? 2 : cur % 2;\n    let curOdd = (cur + 1) % 2;\n\n    dp[i][0] = dp[i-1][0] + cur;\n    dp[i][1] = Math.min(dp[i-1][0], dp[i-1][1]) + curEven;\n    dp[i][2] = Math.min(dp[i-1][0], dp[i-1][1], dp[i-1][2]) + curOdd;\n    dp[i][3] = Math.min(dp[i-1][2], dp[i-1][3]) + curEven;\n    dp[i][4] = Math.min(dp[i-1][2], dp[i-1][3], dp[i-1][4]) + cur;\n  }\n\n  console.log(Math.min(...dp[L]));\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03213_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x3a2879) {\n    const _0x4a3a9a = _0x3a2879['split']('\\x0a')[0x0] - 0x0;\n    let _0x2c9fe4 = new Array(_0x4a3a9a + 0x1)['fill'](0x0);\n    for (let _0x18aa57 = 0x2; _0x18aa57 <= _0x4a3a9a; _0x18aa57++) {\n        let _0x40b5f4 = _0x18aa57;\n        for (let _0x98d04 = 0x2; _0x98d04 <= _0x18aa57; _0x98d04++) {\n            while (_0x40b5f4 % _0x98d04 == 0x0) {\n                _0x2c9fe4[_0x98d04] += 0x1;\n                _0x40b5f4 /= _0x98d04;\n            }\n        }\n    }\n    const _0x5deb12 = _0x275828 => _0x2c9fe4['reduce']((_0x56f6d6, _0xe73474) => _0x56f6d6 + (_0xe73474 >= _0x275828 - 0x1 ? 0x1 : 0x0), 0x0);\n    let _0x4e3680 = _0x5deb12(0x4b);\n    let _0x58be69 = _0x5deb12(0x19);\n    let _0x4f5a6f = _0x5deb12(0xf);\n    let _0x29923a = _0x5deb12(0x5);\n    let _0x391a27 = _0x5deb12(0x3);\n    let _0x2581e0 = _0x29923a * (_0x29923a - 0x1) * (_0x391a27 - 0x2) / 0x2;\n    let _0x166aee = _0x4f5a6f * (_0x29923a - 0x1);\n    let _0x453457 = _0x58be69 * (_0x391a27 - 0x1);\n    let _0x4795bd = _0x4e3680;\n    console['log'](_0x4795bd + _0x453457 + _0x166aee + _0x2581e0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["9", "0"], ["10", "1"], ["100", "543"]], "original": "\"use strict\";\nfunction Main(input) {\n    const N = input.split(\"\\n\")[0] - 0;\n    let e = new Array(N + 1).fill(0);\n    for (let i = 2; i <= N; i++) {\n        let cur = i;\n        for (let j = 2; j <= i; j++) {\n            while (cur % j == 0) {\n                e[j] += 1;\n                cur /= j;\n            }\n        }\n    }\n    const num = (m) => e.reduce((ac, x) => ac + ((x >= m - 1) ? 1 : 0), 0);\n    let l75 = num(75);\n    let l25 = num(25);\n    let l15 = num(15);\n    let l5 = num(5);\n    let l3 = num(3);\n    let r5x5x3 = (l5 * (l5 - 1) * (l3 - 2)) / 2;\n    let r15x5 = l15 * (l5 - 1);\n    let r25x3 = l25 * (l3 - 1);\n    let r75 = l75;\n    console.log(r75 + r25x3 + r15x5 + r5x5x3);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03291_1", "type": "JavaScript", "obfuscated": "var line;\nvar S;\nvar MOD = Math['pow'](0xa, 0x9) + 0x7;\nvar readline = require('readline');\nvar rl = readline['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nrl['on']('line', function (_0x5bcfe2) {\n    line = _0x5bcfe2;\n});\nrl['on']('close', function () {\n    S = line['split']('');\n    dp = Array(S['length'] + 0x1);\n    for (var _0x300dd4 = 0x0; _0x300dd4 <= S['length']; _0x300dd4++) {\n        dp[_0x300dd4] = Array(0x3 + 0x1)['fill'](0x0);\n    }\n    for (var _0x300dd4 = S['length']; _0x300dd4 >= 0x0; _0x300dd4--) {\n        for (var _0x1bd0bd = 0x3; _0x1bd0bd >= 0x0; _0x1bd0bd--) {\n            if (_0x300dd4 === S['length']) {\n                dp[_0x300dd4][_0x1bd0bd] = _0x1bd0bd === 0x3 ? 0x1 : 0x0;\n            } else {\n                dp[_0x300dd4][_0x1bd0bd] = dp[_0x300dd4 + 0x1][_0x1bd0bd] * (S[_0x300dd4] === '?' ? 0x3 : 0x1);\n                if (_0x1bd0bd < 0x3 && (S[_0x300dd4] === '?' || S[_0x300dd4] === 'ABC'[_0x1bd0bd])) {\n                    dp[_0x300dd4][_0x1bd0bd] += dp[_0x300dd4 + 0x1][_0x1bd0bd + 0x1];\n                }\n                dp[_0x300dd4][_0x1bd0bd] %= MOD;\n            }\n        }\n    }\n    console['log'](dp[0x0][0x0]);\n});", "test_cases": [["A??C", "8"], ["ABCBC", "3"], ["????C?????B??????A???????", "979596887"]], "original": "var line; var S;\nvar MOD = Math.pow(10, 9) + 7;\n\nvar readline = require('readline');\nvar rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n});\n\nrl.on('line', function (x) {\n    line = x;\n});\n\nrl.on('close', function () {\n    S = line.split(\"\");\n    dp = Array(S.length + 1);\n    \n    for (var i = 0; i <= S.length; i++) {\n        dp[i] = Array(3 + 1).fill(0);\n    }\n\n    for (var i = S.length; i >= 0; i--) {\n        for (var j = 3; j >= 0; j--) {\n            if (i === S.length) { dp[i][j] = (j === 3 ? 1 : 0); }\n            else {\n                dp[i][j] = dp[i + 1][j] * (S[i] === '?' ? 3 : 1);\n                if (j < 3 && (S[i] === '?' || S[i] === \"ABC\"[j])) {\n                    dp[i][j] += dp[i + 1][j + 1];\n                }\n                dp[i][j] %= MOD;\n            }\n        }\n    }\n    console.log(dp[0][0]);\n});\n", "language": "JavaScript"}
{"filename": "p03302_1", "type": "JavaScript", "obfuscated": "function Main(_0x50497b) {\n    _0x50497b = _0x50497b['split']('\\x20')['map'](_0x5121af => +_0x5121af);\n    var _0x4f01f2 = 'x';\n    if (_0x50497b[0x0] + _0x50497b[0x1] === 0xf)\n        _0x4f01f2 = '+';\n    if (_0x50497b[0x0] * _0x50497b[0x1] === 0xf)\n        _0x4f01f2 = '*';\n    console['log'](_0x4f01f2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 11", "+"], ["3 5", "*"], ["1 1", "x"]], "original": "function Main(s){\n  s = s.split(\" \").map(a=>+a);\n  var ans = \"x\";\n  if(s[0] + s[1] === 15)ans = \"+\";\n  if(s[0] * s[1] === 15)ans = \"*\";\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03303_1", "type": "JavaScript", "obfuscated": "function myout(_0x3b71e6) {\n    console['log'](_0x3b71e6);\n}\nfunction Main(_0x445e8b) {\n    _0x445e8b = _0x445e8b['split']('\\x0a');\n    var _0x24b8d6 = _0x445e8b[0x0];\n    var _0x40bd48 = parseInt(_0x445e8b[0x1]);\n    if (_0x40bd48 == 0x1) {\n        myout(_0x24b8d6);\n        return;\n    }\n    _0x24b8d6 = _0x24b8d6['split']('');\n    var _0x5d2f77 = [];\n    while (_0x24b8d6['length'] != 0x0) {\n        var _0x1b46fb = '';\n        for (var _0x18573a = 0x0; _0x18573a < _0x40bd48; _0x18573a++) {\n            if (_0x24b8d6['length'] != 0x0) {\n                _0x1b46fb += _0x24b8d6['shift']();\n            }\n        }\n        _0x5d2f77['push'](_0x1b46fb);\n    }\n    var _0x109fa9 = '';\n    for (var _0x18573a = 0x0; _0x18573a < _0x5d2f77['length']; _0x18573a++) {\n        _0x109fa9 += _0x5d2f77[_0x18573a]['slice'](0x0, 0x1);\n    }\n    myout(_0x109fa9);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["abcdefgh\n3", "adg"], ["lllll\n1", "lllll"], ["souuundhound\n2", "suudon"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.split(\" \");\n\tinput = input.split(\"\\n\");\n\t//input = input.split(\" \").map((a)=>Number(a));\n\t//input = input.split(\"\\n\").map((a)=>Number(a));\n  var S = input[0];\n  var w = parseInt(input[1]);\n  if(w == 1){\n     myout(S);\n    return;\n     }\n  S = S.split(\"\");\n  var list = [];\n  while(S.length != 0){\n    \tvar tmp = \"\";\n        for(var i = 0; i < w; i++){\n          if(S.length != 0){\n          \ttmp += S.shift();\n          }\n        }\n    list.push(tmp);\n  }\n  var output = \"\";\n  for(var i = 0; i < list.length; i++){\n    output += list[i].slice(0,1);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03452_1", "type": "JavaScript", "obfuscated": "function Main(_0x5cd7ce) {\n    _0x5cd7ce = _0x5cd7ce['split']('\\x0a');\n    var _0x7f7c04 = _0x5cd7ce[0x0]['split']('\\x20')['map'](_0x3cb378 => parseInt(_0x3cb378));\n    var _0x57bcff = _0x7f7c04[0x0];\n    _0x7f7c04 = _0x7f7c04[0x1];\n    var _0x2f8ef5 = [];\n    for (var _0x48a8b9 = 0x0; _0x48a8b9 < _0x7f7c04; _0x48a8b9++) {\n        _0x2f8ef5[_0x48a8b9] = _0x5cd7ce[_0x48a8b9 + 0x1]['split']('\\x20')['map'](_0x4739bc => parseInt(_0x4739bc));\n    }\n    var _0x17bbec = new Array(_0x57bcff + 0x1)['fill'](0x0);\n    var _0x2967f4 = new Array(_0x57bcff + 0x1)['fill'](0x0);\n    _0x17bbec[0x0] = _0x17bbec[0x1] = 0x1;\n    var _0x48a8b9, _0x283539, _0x1c44a7 = 0x1;\n    var _0xf4ee16 = 'Yes';\n    _0x35374d:\n        while (_0x2f8ef5['length']) {\n            _0x48a8b9 = _0x283539 = _0x2f8ef5['length'];\n            while (_0x48a8b9--) {\n                if (_0x17bbec[_0x2f8ef5[_0x48a8b9][0x0]] && _0x17bbec[_0x2f8ef5[_0x48a8b9][0x1]]) {\n                    if (_0x2967f4[_0x2f8ef5[_0x48a8b9][0x1]] - _0x2967f4[_0x2f8ef5[_0x48a8b9][0x0]] !== _0x2f8ef5[_0x48a8b9][0x2]) {\n                        _0xf4ee16 = 'No';\n                        break _0x35374d;\n                    } else {\n                        _0x2f8ef5['splice'](_0x48a8b9, 0x1);\n                        continue;\n                    }\n                }\n                if (_0x17bbec[_0x2f8ef5[_0x48a8b9][0x0]]) {\n                    _0x17bbec[_0x2f8ef5[_0x48a8b9][0x1]] = 0x1;\n                    _0x2967f4[_0x2f8ef5[_0x48a8b9][0x1]] = _0x2967f4[_0x2f8ef5[_0x48a8b9][0x0]] + _0x2f8ef5[_0x48a8b9][0x2];\n                    _0x2f8ef5['splice'](_0x48a8b9, 0x1);\n                } else if (_0x17bbec[_0x2f8ef5[_0x48a8b9][0x1]]) {\n                    _0x17bbec[_0x2f8ef5[_0x48a8b9][0x0]] = 0x1;\n                    _0x2967f4[_0x2f8ef5[_0x48a8b9][0x0]] = _0x2967f4[_0x2f8ef5[_0x48a8b9][0x1]] - _0x2f8ef5[_0x48a8b9][0x2];\n                    _0x2f8ef5['splice'](_0x48a8b9, 0x1);\n                }\n            }\n            if (_0x283539 === _0x2f8ef5['length']) {\n                _0x48a8b9 = _0x17bbec['findIndex'](_0x304856 => _0x304856 === 0x0);\n                _0x17bbec[_0x48a8b9] = 0x1;\n            }\n        }\n    console['log'](_0xf4ee16);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n1 2 1\n2 3 1\n1 3 2", "Yes"], ["3 3\n1 2 1\n2 3 1\n1 3 5", "No"], ["4 3\n2 1 1\n2 3 5\n3 4 2", "Yes"], ["10 3\n8 7 100\n7 9 100\n9 8 100", "No"], ["100 0", "Yes"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tvar M = input[0].split(\" \").map(a => parseInt(a));\n\tvar N = M[0];\n\tM = M[1];\n\tvar L = [];\n\tfor(var i = 0; i < M; i++){\n\t\tL[i] = input[i+1].split(\" \").map(a => parseInt(a));\n\t}\n\tvar anc = new Array(N+1).fill(0);\n\tvar x = new Array(N+1).fill(0);\n\tanc[0] = anc[1] = 1;\n\tvar i, j, low = 1;\n\tvar ans = \"Yes\";\n\t\n\ttop:\n\twhile(L.length){\n\t\ti = j = L.length;\n\t\twhile(i--){\n\t\t\tif(anc[L[i][0]] && anc[L[i][1]]){\n\t\t\t\tif(x[L[i][1]] - x[L[i][0]] !== L[i][2]){\n\t\t\t\t\tans = \"No\";\n\t\t\t\t\tbreak top;\n\t\t\t\t}else{\n\t\t\t\t\tL.splice(i, 1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(anc[L[i][0]]){\n\t\t\t\tanc[L[i][1]] = 1;\n\t\t\t\tx[L[i][1]] = x[L[i][0]] + L[i][2];\n\t\t\t\tL.splice(i, 1);\n\t\t\t}else if(anc[L[i][1]]){\n\t\t\t\tanc[L[i][0]] = 1;\n\t\t\t\tx[L[i][0]] = x[L[i][1]] - L[i][2];\n\t\t\t\tL.splice(i, 1);\n\t\t\t}\n\t\t}\n\t\tif(j === L.length){\n\t\t\ti = anc.findIndex(a => a === 0);\n\t\t\tanc[i] = 1;\n\t\t}\n\t}\n\t\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03587_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x7405a4 => {\n    _0x7405a4 = _0x7405a4['trim']()['split']('\\x0a');\n    const _0x349a11 = _0x7405a4[0x0]['split']('');\n    console['log'](_0x349a11['filter'](_0x276bb8 => _0x276bb8 === '1')['length']);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["111100", "4"], ["001001", "2"], ["000000", "0"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    console.log(S.filter(n=>n===\"1\").length);\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03627_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x4e5d7f => {\n    _0x4e5d7f = _0x4e5d7f['trim']()['split']('\\x0a');\n    const _0x3cf75c = parseInt(_0x4e5d7f[0x0]);\n    const _0x4cc2ba = _0x4e5d7f[0x1]['split']('\\x20')['map'](_0x177118 => parseInt(_0x177118))['sort']((_0x10bf0b, _0x1e03b2) => _0x10bf0b - _0x1e03b2);\n    let _0x3ef396 = [];\n    for (let _0x484b83 in _0x4cc2ba) {\n        if (_0x4cc2ba[_0x484b83] === _0x4cc2ba[parseInt(_0x484b83) + 0x1]) {\n            _0x3ef396['push'](_0x4cc2ba[_0x484b83]);\n        }\n    }\n    _0x3ef396['sort']((_0x27d617, _0x5a395f) => _0x5a395f - _0x27d617);\n    const _0x7dd82e = new Set(_0x3ef396);\n    console['log'](_0x3ef396['length'] ? [..._0x7dd82e][0x0] * [..._0x7dd82e][0x1] : 0x0);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6\n3 1 2 4 2 1", "2"], ["4\n1 2 3 4", "0"], ["10\n3 3 3 3 4 4 4 5 5 5", "20"]], "original": "\"use strict\"\n\nconst main = arg => {\n  arg = arg.trim().split(\"\\n\");\n  const N = parseInt(arg[0]);\n  const A = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>a-b);\n  \n  let pairNums = [];\n  \n  for(let i in A) {\n      if(A[i] === A[parseInt(i) + 1]) {\n        pairNums.push(A[i]);\n      }\n  }\n  \n  pairNums.sort((a,b)=>b-a);\n  const set = new Set(pairNums);\n\n  console.log(pairNums.length ? [...set][0] * [...set][1] : 0);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03818_1", "type": "JavaScript", "obfuscated": "function Main(_0x2842c5) {\n    var _0x4746a3 = _0x2842c5['split']('\\x0a')[0x0];\n    var _0x56b9b1 = _0x2842c5['split']('\\x0a')[0x1]['split']('\\x20');\n    _0x56b9b1['sort'](function (_0x394840, _0x13c5f2) {\n        return parseInt(_0x394840) - parseInt(_0x13c5f2);\n    });\n    var _0x49adb3 = _0x56b9b1['filter'](function (_0x13225a, _0x1d2d34, _0x274ec8) {\n        return _0x274ec8['indexOf'](_0x13225a) === _0x1d2d34;\n    });\n    if (_0x49adb3['length'] % 0x2 == 0x1) {\n        console['log'](_0x49adb3['length']);\n    } else {\n        console['log'](_0x49adb3['length'] - 0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1 2 1 3 7", "3"], ["15\n1 3 5 2 1 3 2 8 8 6 2 6 11 1 1", "7"]], "original": "function Main(input) {\n  var len = input.split(\"\\n\")[0];\n  var list = input.split(\"\\n\")[1].split(\" \");\n  list.sort(function(a,b){\n  \treturn parseInt(a) - parseInt(b);\n  });\n  \n  var b = list.filter(function (x, i, self) {\n            return self.indexOf(x) === i;\n        });\n  if(b.length % 2 == 1){\n     console.log(b.length);\n     }else{\n     console.log(b.length - 1);\n     }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03951_1", "type": "JavaScript", "obfuscated": "function Main(_0x4acead) {\n    _0x4acead = _0x4acead['split']('\\x0a');\n    var _0x3a52d1 = Number(_0x4acead[0x0]);\n    var _0x4d6014 = 0x0;\n    for (var _0x3f4b0c = Math['min'](_0x4acead[0x1]['length'], _0x4acead[0x2]['length']); _0x3f4b0c != 0x0; _0x3f4b0c--) {\n        if (_0x4acead[0x1]['substr'](-0x1 * _0x3f4b0c) == _0x4acead[0x2]['substr'](0x0, _0x3f4b0c) && _0x4acead[0x1]['length'] + _0x4acead[0x2]['length'] - _0x3f4b0c >= _0x3a52d1) {\n            _0x4d6014 = _0x3f4b0c;\n            break;\n        }\n    }\n    console['log']((_0x4acead[0x1]['substr'](0x0, _0x4acead[0x1]['length'] - _0x4d6014) + _0x4acead[0x2])['length']);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["3\nabc\ncde", "5"], ["1\na\nz", "2"], ["4\nexpr\nexpr", "4"]], "original": "function Main(input){\n\tinput = input.split(\"\\n\");\n\tvar n = Number(input[0]);\n\tvar ans = 0;\n\tfor(var i=Math.min(input[1].length,input[2].length);i!=0;i--){\n\t\tif(input[1].substr(-1*i)==input[2].substr(0,i)&&input[1].length+input[2].length-i>=n){\n\t\t\tans = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tconsole.log((input[1].substr(0,input[1].length-ans)+input[2]).length);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03966_1", "type": "JavaScript", "obfuscated": "function Main(_0x1f064d) {\n    TT = 0x0;\n    AA = 0x0;\n    _0x1f064d = _0x1f064d['split']('\\x0a');\n    N = _0x1f064d[0x0];\n    for (i = 0x1; i <= N; i++) {\n        tmp = _0x1f064d[i]['split']('\\x20');\n        T = tmp[0x0] * 0x1;\n        A = tmp[0x1] * 0x1;\n        if (TT <= T && AA <= A) {\n            TT = T;\n            AA = A;\n        } else {\n            ratioT = TT / T;\n            ratioA = AA / A;\n            ratio = Math['ceil'](Math['max'](ratioT, ratioA));\n            TT = T * ratio;\n            AA = A * ratio;\n        }\n    }\n    console['log'](TT + AA);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n2 3\n1 1\n3 2", "10"], ["4\n1 1\n1 1\n1 5\n1 100", "101"], ["5\n3 10\n48 17\n31 199\n231 23\n3 2", "6930"]], "original": "function Main(input) {\n    TT = 0;\n    AA = 0;\n \n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\"\\n\");\n\tN = input[0];\n//    console.log(N);\t\n    for (i = 1; i <= N; i++) {\n    \ttmp = input[i].split(\" \");\n    \tT = tmp[0] * 1;\n    \tA = tmp[1] * 1;\n        // console.log(\"T:\" + T + \" A:\" + A);\n \n        if ((TT <= T) && (AA <= A)) {\n            TT = T;\n            AA = A;\n        } else {\n            ratioT = TT / T;\n            ratioA = AA / A;\n            // console.log(\"ratioT:\" + ratioT + \" ratioA:\" + ratioA);\n            ratio = Math.ceil(Math.max(ratioT, ratioA));\n            TT = T * ratio;\n            AA = A * ratio;\n        }\n        // console.log(\"TT:\" + TT + \" AA:\" + AA);\n    }\n\t//出力\n    console.log(TT + AA);\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04020_1", "type": "JavaScript", "obfuscated": "function myout(_0x2da8ae) {\n    console['log'](_0x2da8ae);\n}\nfunction Main(_0x49db64) {\n    _0x49db64 = _0x49db64['trim']()['split']('\\x0a')['map'](_0x184b7e => Number(_0x184b7e));\n    var _0x3f3fbf = _0x49db64[0x0];\n    var _0x53d31a = 0x0;\n    _0x49db64['shift']();\n    for (var _0x1ee63f = 0x0; _0x1ee63f < _0x3f3fbf; _0x1ee63f++) {\n        if (_0x1ee63f == _0x3f3fbf - 0x1) {\n            _0x53d31a += Math['floor'](_0x49db64[_0x1ee63f] / 0x2);\n        } else {\n            if (_0x49db64[_0x1ee63f] != 0x0) {\n                if (_0x49db64[_0x1ee63f + 0x1] != 0x0) {\n                    var _0x3f4bd2 = Math['min'](_0x49db64[_0x1ee63f], _0x49db64[_0x1ee63f + 0x1]);\n                    _0x53d31a += _0x3f4bd2;\n                    _0x49db64[_0x1ee63f] -= _0x3f4bd2;\n                    _0x49db64[_0x1ee63f + 0x1] -= _0x3f4bd2;\n                    if (_0x49db64[_0x1ee63f] >= 0x2) {\n                        _0x53d31a += Math['floor'](_0x49db64[_0x1ee63f] / 0x2);\n                    }\n                } else {\n                    _0x53d31a += Math['floor'](_0x49db64[_0x1ee63f] / 0x2);\n                }\n            }\n        }\n    }\n    myout(_0x53d31a);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["4\n4\n0\n3\n2", "4"], ["8\n2\n0\n1\n6\n0\n8\n2\n1", "9"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\t//input = parseInt(input);\n\t//input = input.trim().split(\" \");\n\t//input = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\tinput = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var len = input[0];\n  var output = 0;\n  input.shift();\n  for(var i = 0; i < len; i++){\n    if(i == len - 1){\n       output += Math.floor(input[i] / 2);\n    }else{\n      if(input[i] != 0){\n         if(input[i+1] != 0){\n         \tvar tmp = Math.min(input[i],input[i+1]); \n           output += tmp;\n           input[i] -= tmp;\n           input[i+1] -= tmp;\n           if(input[i] >= 2){\n              output += Math.floor(input[i] / 2);\n              }\n         }else{\n            output += Math.floor(input[i] / 2);\n         }\n      }\n    }\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p00012_1", "type": "JavaScript", "obfuscated": "function area(_0x4eec0b, _0x313ee0, _0x51a357, _0x4626c5, _0x3df0da, _0x5e9477) {\n    var _0x43b1f1 = Math['sqrt']((_0x4eec0b - _0x51a357) * (_0x4eec0b - _0x51a357) + (_0x313ee0 - _0x4626c5) * (_0x313ee0 - _0x4626c5)), _0xe97e23 = Math['sqrt']((_0x51a357 - _0x3df0da) * (_0x51a357 - _0x3df0da) + (_0x4626c5 - _0x5e9477) * (_0x4626c5 - _0x5e9477)), _0x2cc384 = Math['sqrt']((_0x3df0da - _0x4eec0b) * (_0x3df0da - _0x4eec0b) + (_0x5e9477 - _0x313ee0) * (_0x5e9477 - _0x313ee0)), _0x180783 = 0.5 * (_0x43b1f1 + _0xe97e23 + _0x2cc384), _0x25597d = Math['sqrt'](_0x180783 * (_0x180783 - _0x43b1f1) * (_0x180783 - _0xe97e23) * (_0x180783 - _0x2cc384));\n    return _0x25597d;\n}\nfunction inTriangle(_0x4d8859, _0x11af76, _0x1a8468, _0x4756d4, _0x3dae07, _0x4c7d48, _0x484143, _0xbea4dd) {\n    var _0x1782c6 = area(_0x4d8859, _0x11af76, _0x1a8468, _0x4756d4, _0x3dae07, _0x4c7d48), _0x2beadb = area(_0x4d8859, _0x11af76, _0x1a8468, _0x4756d4, _0x484143, _0xbea4dd), _0x4dda61 = area(_0x1a8468, _0x4756d4, _0x3dae07, _0x4c7d48, _0x484143, _0xbea4dd), _0x57f3eb = area(_0x3dae07, _0x4c7d48, _0x4d8859, _0x11af76, _0x484143, _0xbea4dd), _0x5e69c2 = _0x1782c6 - (_0x2beadb + _0x4dda61 + _0x57f3eb);\n    return Math['abs'](_0x5e69c2) <= 0.01;\n}\nfunction main() {\n    input['forEach'](function (_0x43a4ca) {\n        if (_0x43a4ca['trim']() === '')\n            return;\n        console['log'](inTriangle['apply'](null, _0x43a4ca['split']('\\x20')['map'](parseFloat)) ? 'YES' : 'NO');\n    });\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x544263) {\n    input += _0x544263;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["0.0 0.0 2.0 0.0 2.0 2.0 1.5 0.5\n0.0 0.0 1.0 4.0 5.0 3.0 -1.0 3.0", "YES\nNO"]], "original": "function area(x1, y1, x2, y2, x3, y3) {\n    var\n    ab = Math.sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2)),\n    bc = Math.sqrt((x2-x3)*(x2-x3)+(y2-y3)*(y2-y3)),\n    ca = Math.sqrt((x3-x1)*(x3-x1)+(y3-y1)*(y3-y1)),\n    s = 0.5*(ab+bc+ca),\n    S= Math.sqrt(s*(s-ab)*(s-bc)*(s-ca));\n    return S;\n}\n\nfunction inTriangle(x1, y1, x2, y2, x3, y3, xp, yp) {\n  var\n  abc = area(x1, y1, x2, y2, x3, y3),\n  abp = area(x1, y1, x2, y2, xp, yp),\n  bcp = area(x2, y2, x3, y3, xp, yp),\n  cap = area(x3, y3, x1, y1, xp, yp),\n  sub = abc-(abp+bcp+cap);\n  return Math.abs(sub) <= 0.01;\n}\n\nfunction main() {\n  input.forEach(function(line) {\n    if(line.trim() === '') return;\n    console.log(inTriangle.apply(null, line.split(' ').map(parseFloat)) ? 'YES' : 'NO');\n  });\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00014_1", "type": "JavaScript", "obfuscated": "process['stdin']['on']('data', function (_0x13eec5) {\n    (_0x13eec5 + '')['trim']()['split']('\\x0a')['some'](function (_0x5b934f) {\n        for (var _0x3c328e = +_0x5b934f, _0x580f8e = 0x1, _0x4d8ee1 = 0x0, _0x370728; _0x370728 = _0x580f8e++ * _0x3c328e, _0x370728 < 0x258 ? _0x4d8ee1 += _0x370728 * _0x370728 * _0x3c328e : 0x0;);\n        console['log'](_0x4d8ee1);\n    });\n})['resume']();", "test_cases": [["20\n10", "68440000\n70210000"]], "original": "process.stdin.on(\"data\",function(c){\n  (c+\"\").trim().split(\"\\n\").some(function(n){\n    for(var d=+n,i=1,a=0,t;t=i++*d,t<600?a+=t*t*d:0;);\n    console.log(a);\n  });\n}).resume();", "language": "JavaScript"}
{"filename": "p00022_1", "type": "JavaScript", "obfuscated": "function main() {\n    while (0x1) {\n        var _0x2e104f = scan();\n        if (_0x2e104f == 0x0) {\n            break;\n        }\n        var _0x2ec534 = Array(_0x2e104f);\n        rep(_0x2e104f, function (_0x5eeb7a) {\n            _0x2ec534[_0x5eeb7a] = scan();\n        });\n        _0x2ec534[-0x1] = 0x0;\n        rep(_0x2e104f, function (_0x1d914d) {\n            _0x2ec534[_0x1d914d] += _0x2ec534[_0x1d914d - 0x1];\n        });\n        var _0x2b422a = -Infinity;\n        rep(_0x2e104f, function (_0x339a77) {\n            for (var _0x21d499 = _0x339a77; _0x21d499 < _0x2e104f; ++_0x21d499) {\n                _0x2b422a = Math['max'](_0x2ec534[_0x21d499] - _0x2ec534[_0x339a77 - 0x1], _0x2b422a);\n            }\n        });\n        print(_0x2b422a);\n    }\n}\nfunction rep(_0x358db2, _0x1be163) {\n    for (var _0x268991 = 0x0; _0x268991 < _0x358db2; ++_0x268991) {\n        _0x1be163(_0x268991);\n    }\n}\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar input = '';\nvar input_index = 0x0;\nfunction scan(_0x361c08) {\n    if (_0x361c08 === 'string') {\n        return input[input_index++];\n    } else {\n        return +input[input_index++];\n    }\n}\nfunction print(_0x2319f9) {\n    console['log'](_0x2319f9);\n}\nprocess['stdin']['on']('data', function (_0x3cc736) {\n    input += _0x3cc736;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split'](/\\s+/);\n    main();\n});", "test_cases": [["7\n-5\n-1\n6\n4\n9\n-6\n-7\n13\n1\n2\n3\n2\n-2\n-1\n1\n2\n3\n2\n1\n-2\n1\n3\n1000\n-200\n201\n0", "19\n14\n1001"]], "original": "function main(){\n\twhile(1){\n\t\tvar n = scan();\n\t\tif(n == 0){\n\t\t\tbreak;\n\t\t}\n\t\tvar x = Array(n);\n\t\trep(n, function(i){\n\t\t\tx[i] = scan();\n\t\t});\n\t\tx[-1] = 0;\n\t\trep(n, function(i){\n\t\t\tx[i] += x[i - 1];\n\t\t});\n\t\tvar a = -Infinity;\n\t\trep(n, function(i){\n\t\t\tfor(var j = i; j < n; ++j){\n\t\t\t\ta = Math.max(x[j] - x[i - 1], a);\n\t\t\t}\n\t\t});\n\t\tprint(a);\n\t}\n}\n\nfunction rep(n, func){\n\tfor(var i = 0; i < n; ++i){\n\t\tfunc(i);\n\t}\n}\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n\nvar input = '';\nvar input_index = 0;\n\nfunction scan(type){\n\tif(type === 'string'){\n\t\treturn input[input_index++];\n\t}\n\telse{\n\t\treturn +input[input_index++];\n\t}\n}\n\nfunction print(val){\n\tconsole.log(val);\n}\n\nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.split(/\\s+/);\n\tmain();\n});", "language": "JavaScript"}
{"filename": "p00042_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar cnt = 0x1;\nwhile (!![]) {\n    var W = Arr['shift']() - 0x0;\n    if (W == 0x0)\n        break;\n    var N = Arr['shift']() - 0x0;\n    var dp = [];\n    for (var y = 0x0; y < N + 0x1; y++) {\n        dp[y] = [];\n        for (var x = 0x0; x <= W; x++) {\n            dp[y][x] = 0x0;\n        }\n    }\n    var v = [];\n    var w = [];\n    for (var i = 0x0; i < N; i++) {\n        var arr = Arr['shift']()['split'](',')['map'](Number);\n        v['push'](arr[0x0]);\n        w['push'](arr[0x1]);\n    }\n    for (var y = 0x0; y < N; y++) {\n        for (var x = 0x0; x <= W; x++) {\n            if (x - w[y] >= 0x0)\n                dp[y + 0x1][x] = Math['max'](dp[y][x], dp[y][x - w[y]] + v[y]);\n            else\n                dp[y + 0x1][x] = dp[y][x];\n        }\n    }\n    console['log']('Case\\x20' + cnt + ':');\n    cnt++;\n    console['log'](dp[N][W]);\n    var maxValue = dp[N][W];\n    while (maxValue == dp[N][W - 0x1])\n        W--;\n    console['log'](W);\n}", "test_cases": [["50\n5\n60,10\n100,20\n120,30\n210,45\n10,4\n50\n5\n60,10\n100,20\n120,30\n210,45\n10,4\n0", "Case 1:\n220\n49\nCase 2:\n220\n49"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar cnt=1;\nwhile(true){\n   var W=Arr.shift()-0;\n   if(W==0)break;\n   var N=Arr.shift()-0;\n   var dp=[];\n   for(var y=0;y<N+1;y++){\n      dp[y]=[];\n      for(var x=0;x<=W;x++){\n         dp[y][x]=0;\n      }\n   }\n   var v=[];\n   var w=[];\n   for(var i=0;i<N;i++){\n      var arr=(Arr.shift()).split(\",\").map(Number);\n      v.push(arr[0]);\n      w.push(arr[1]);\n   }\n   for(var y=0;y<N;y++){\n      for(var x=0;x<=W;x++){\n         if(x-w[y]>=0)dp[y+1][x]=Math.max(dp[y][x],dp[y][x-w[y]]+v[y]);\n         else dp[y+1][x]=dp[y][x];\n      }\n   }\n   console.log(\"Case \"+cnt+\":\");\n   cnt++;\n   console.log(dp[N][W]);\n   var maxValue=dp[N][W];\n   while(maxValue==dp[N][W-1])W--;\n   console.log(W);\n}", "language": "JavaScript"}
{"filename": "p00051_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar AL = Arr['shift']();\nfor (var i = 0x0; i < AL; i++) {\n    var arr = Arr[i]['split']('')['map'](Number);\n    arr['sort'](function (_0x5ab6c0, _0x5277ff) {\n        return _0x5277ff - _0x5ab6c0;\n    });\n    var a = arr['join']('');\n    arr['sort'](function (_0x2448af, _0x609089) {\n        return _0x2448af - _0x609089;\n    });\n    var b = arr['join']('');\n    console['log'](parseInt(a) - parseInt(b));\n}", "test_cases": [["2\n65539010\n65539010", "96417531\n96417531"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nfor(var i=0;i<AL;i++){\n   var arr=Arr[i].split(\"\").map(Number);\n   arr.sort(function(a,b){return b-a;});\n   var a=arr.join(\"\");\n   arr.sort(function(a,b){return a-b;});\n   var b=arr.join(\"\");\n   console.log(parseInt(a)-parseInt(b));\n}", "language": "JavaScript"}
{"filename": "p00065_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split']('\\x0a');\nvar lm = [];\nvar line;\nwhile (line = lines['shift']()) {\n    lm['push'](line['split'](',')[0x0]);\n}\nvar tm = [];\nwhile (line = lines['shift']()) {\n    tm['push'](line['split'](',')[0x0]);\n}\nlm['sort'](function (_0x550fb3, _0x1a810b) {\n    return _0x550fb3 - _0x1a810b;\n});\nlm['forEach'](function (_0x5067d1) {\n    var _0x21cb0c = tm['filter'](function (_0x50fc9d) {\n        return _0x50fc9d == _0x5067d1;\n    })['length'];\n    if (_0x21cb0c > 0x0) {\n        var _0x22d35a = lm['filter'](function (_0x4f1f75) {\n            return _0x4f1f75 == _0x5067d1;\n        })['length'];\n        console['log'](_0x5067d1, _0x21cb0c + _0x22d35a);\n    }\n});", "test_cases": [["123,10\n56,12\n34,14\n\n123,3\n56,4\n123,5", "56 2\n123 3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar lm = [];\nvar line;\nwhile (line = lines.shift()) {\n    lm.push(line.split(',')[0]);\n}\n\nvar tm = [];\nwhile (line = lines.shift()) {\n    tm.push(line.split(',')[0]);\n}\n\nlm.sort(function(a,b){return a-b;});\n\nlm.forEach(function(c) {\n    var cnt = tm.filter(function(n){return n == c;}).length;\n    if (cnt > 0) {\n        var tcnt = lm.filter(function(n){return n == c}).length;\n        console.log(c, cnt + tcnt);\n    }\n});", "language": "JavaScript"}
{"filename": "p00087_1", "type": "JavaScript", "obfuscated": "x = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ny = x['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (y['length'] == 0x0)\n        break;\n    var z = y['shift']()['split']('\\x20');\n    var s = [];\n    z['forEach'](function (_0x24561e) {\n        if (/\\d/['test'](_0x24561e)) {\n            s['unshift'](_0x24561e - 0x0);\n        } else {\n            a = s['shift']();\n            b = s['shift']();\n            if (_0x24561e == '+')\n                s['unshift'](b + a);\n            if (_0x24561e == '-')\n                s['unshift'](b - a);\n            if (_0x24561e == '*')\n                s['unshift'](b * a);\n            if (_0x24561e == '/')\n                s['unshift'](b / a);\n        }\n    });\n    console['log'](s[0x0]['toFixed'](0x6));\n}", "test_cases": [["10 2 12 - /\n3 4 - 7 2 3 * + *\n-1 -2 3 + +", "-1.000000\n-13.000000\n0.000000"]], "original": "x=require('fs').readFileSync('/dev/stdin', 'utf8');\ny=x.trim().split(\"\\n\");\nwhile(true){\n   if(y.length==0)break;\n   var z=y.shift().split(\" \");\n   var s=[];\n   z.forEach(function(v){\n      if(/\\d/.test(v)){\n         s.unshift(v-0);\n      }else{\n         a=s.shift();\n         b=s.shift();\n         if(v==\"+\")s.unshift(b+a);\n         if(v==\"-\")s.unshift(b-a);\n         if(v==\"*\")s.unshift(b*a);\n         if(v==\"/\")s.unshift(b/a);\n      }\n   });\n   console.log(s[0].toFixed(6));\n}", "language": "JavaScript"}
{"filename": "p00103_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nvar inning = +lines['shift']();\nvar out = 0x0;\nvar score = 0x0;\nvar runner = 0x0;\nvar line;\nwhile (line = lines['shift']()) {\n    if (line == 'HIT') {\n        runner++;\n        if (runner > 0x3) {\n            score++;\n            runner--;\n        }\n    } else if (line == 'HOMERUN') {\n        score += runner + 0x1;\n        runner = 0x0;\n    } else {\n        out++;\n        if (out == 0x3) {\n            console['log'](score);\n            out = 0x0;\n            score = 0x0;\n            runner = 0x0;\n            continue;\n        }\n    }\n}", "test_cases": [["2\nHIT\nOUT\nHOMERUN\nHIT\nHIT\nHOMERUN\nHIT\nOUT\nHIT\nHIT\nHIT\nHIT\nOUT\nHIT\nHIT\nOUT\nHIT\nOUT\nOUT", "7\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar inning = +lines.shift();\n\nvar out = 0;\nvar score = 0;\nvar runner = 0;\n\nvar line;\nwhile (line = lines.shift()) {\n    if (line == 'HIT') {\n        runner++;\n        if (runner > 3) {\n            score++;\n            runner--;\n        }\n    } else if (line == 'HOMERUN') {\n        score += runner + 1;\n        runner = 0;\n    } else {\n        out++;\n        if (out == 3) {\n            console.log(score);\n            out = 0;\n            score = 0;\n            runner = 0;\n            continue;\n        }\n    }\n}", "language": "JavaScript"}
{"filename": "p00142_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nwhile (!![]) {\n    var n = arr['shift']();\n    if (n == 0x0)\n        break;\n    if (n == 0x1) {\n        console['log']('');\n        continue;\n    }\n    var ary = [];\n    for (var i = 0x0; i < n; i++)\n        ary[i] = ![];\n    for (var i = 0x1; i < n; i++) {\n        ary[i * i % n] = !![];\n    }\n    var m = [];\n    ary['forEach'](function (_0x5d8cec, _0x7abc7c) {\n        if (_0x5d8cec)\n            m['push'](_0x7abc7c);\n    });\n    var ans = [];\n    var len = (n - 0x1) / 0x2;\n    for (var i = 0x0; i <= len; i++)\n        ans[i] = 0x0;\n    for (var i = 0x0; i < m['length']; i++) {\n        for (var j = i + 0x1; j < m['length']; j++) {\n            var x = m[i] - m[j];\n            if (x < 0x0)\n                x += n;\n            if (len < x)\n                x = n - x;\n            ans[x] += 0x2;\n        }\n    }\n    ans['shift']();\n    ans['forEach'](function (_0x2acdef) {\n        console['log'](_0x2acdef);\n    });\n}", "test_cases": [["11\n15\n0", "4\n4\n4\n4\n4\n2\n2\n4\n2\n4\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   if(n==1){\n      console.log(\"\");\n      continue;\n   }\n   var ary=[];\n   for(var i=0;i<n;i++)ary[i]=false;\n   for(var i=1;i<n;i++){\n      ary[i*i%n]=true;\n   }\n   var m=[];\n   ary.forEach(function(v,i){\n      if(v)m.push(i);\n   });\n   var ans=[];\n   var len=(n-1)/2 ;\n   for(var i=0;i<=len;i++)ans[i]=0;\n   for(var i=0;i<m.length;i++){\n      for(var j=i+1;j<m.length;j++){\n         var x=m[i]-m[j];\n         if(x<0)x+=n;\n         if(len<x)x=n-x;\n         ans[x]+=2;\n      }\n   }\n   ans.shift();\n   ans.forEach(function(v){\n      console.log(v);\n   });\n}", "language": "JavaScript"}
{"filename": "p00147_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x4f04f5 = [\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0x0,\n        0xe,\n        0x9,\n        0x4,\n        0x0,\n        0x0,\n        0x8,\n        0x3,\n        0x2,\n        0x0,\n        0x0,\n        0xf,\n        0xa,\n        0xf,\n        0xa,\n        0x6,\n        0xc,\n        0x7,\n        0x9,\n        0xb,\n        0x6,\n        0x17,\n        0x12,\n        0xd,\n        0x8,\n        0x3,\n        0x17,\n        0x12,\n        0xd,\n        0x8,\n        0x3,\n        0x22,\n        0x1d,\n        0x18,\n        0x16,\n        0x11,\n        0x1c,\n        0x17,\n        0x18,\n        0x13,\n        0x1b,\n        0x22,\n        0x1d,\n        0x23,\n        0x1e,\n        0x1c,\n        0x1f,\n        0x1c,\n        0x17,\n        0x18,\n        0x1c,\n        0x2a,\n        0x25,\n        0x20,\n        0x1b,\n        0x16,\n        0x2a,\n        0x25,\n        0x20,\n        0x1b,\n        0x16,\n        0x35,\n        0x30,\n        0x2b,\n        0x29,\n        0x24,\n        0x2f,\n        0x2a,\n        0x2b,\n        0x26,\n        0x2e,\n        0x40,\n        0x3b,\n        0x36,\n        0x31,\n        0x2c,\n        0x3d,\n        0x38,\n        0x33,\n        0x2e,\n        0x2c,\n        0x48,\n        0x43,\n        0x3e,\n        0x39,\n        0x34,\n        0x48,\n        0x43,\n        0x3e,\n        0x39,\n        0x34,\n        0x53,\n        0x4e,\n        0x49,\n        0x47\n    ];\n    for (var _0x10fc01 = 0x0; _0x10fc01 < input['length']; _0x10fc01++) {\n        var _0x164988 = parseInt(input[_0x10fc01], 0xa);\n        console['log']('%d', _0x4f04f5[_0x164988]);\n    }\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x4652ce) {\n    input += _0x4652ce;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["5\n6\n7\n8", "0\n14\n9\n4"]], "original": "function main(){\n  var waitTime = [0,0,0,0,0,0,14,9,4,0,0,8,3,2,0,0,15,10,15,10,6,12,7,9,11,6,23,18,13,8,3,23,18,13,8,3,34,29,24,22,17,28,23,24,19,27,34,29,35,30,28,31,28,23,24,28,42,37,32,27,22,42,37,32,27,22,53,48,43,41,36,47,42,43,38,46,64,59,54,49,44,61,56,51,46,44,72,67,62,57,52,72,67,62,57,52,83,78,73,71];\n  for(var i = 0; i < input.length; i++){\n    var idx = parseInt(input[i], 10);\n    console.log('%d', waitTime[idx]);\n  }\n}\nvar\ninput = '';\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00188_1", "type": "JavaScript", "obfuscated": "function binarySearch(_0x1f1cfc, _0x30b36c) {\n    var _0xb00454 = 0x0;\n    var _0x1f4428 = _0x1f1cfc['length'] - 0x1;\n    var _0x32f3c6 = 0x0;\n    while (!![]) {\n        _0x32f3c6++;\n        if (_0xb00454 == _0x1f4428)\n            break;\n        var _0xeec564 = Math['floor']((_0xb00454 + _0x1f4428) / 0x2);\n        if (_0x1f1cfc[_0xeec564] == _0x30b36c)\n            return _0x32f3c6;\n        if (_0x30b36c < _0x1f1cfc[_0xeec564])\n            _0x1f4428 = _0xeec564;\n        else\n            _0xb00454 = _0xeec564 + 0x1;\n    }\n    return _0x32f3c6;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = [];\n    for (var i = 0x0; i < n; i++)\n        arr['push'](Arr['shift']() - 0x0);\n    console['log'](binarySearch(arr, Arr['shift']() - 0x0));\n}", "test_cases": [["7\n11\n15\n23\n36\n51\n61\n86\n51\n4\n1\n2\n3\n5\n4\n0", "3\n3"]], "original": "function binarySearch(A,key){\n    var left = 0;\n    var right = A.length-1;\n    var cnt=0;\n    while(true){\n        cnt++;\n        if(left==right)break;\n        var mid =Math.floor((left + right)/2);\n        if (A[mid] == key)return cnt;\n        if (key < A[mid]) right = mid;\n        else left = mid+1;\n    }\n    return cnt;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++)arr.push(Arr.shift()-0);\n   console.log(binarySearch(arr,Arr.shift()-0));\n}", "language": "JavaScript"}
{"filename": "p00231_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    var plus = {};\n    var minus = {};\n    var pm = [];\n    for (var i = 0x0; i < N; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        var m = arr[0x0];\n        var a = arr[0x1];\n        var b = arr[0x2] - 0.001 * N;\n        plus[a] = m;\n        minus[b] = m;\n        pm['push'](a);\n        pm['push'](b);\n    }\n    pm['sort'](function (_0x4a66da, _0x4b6254) {\n        return _0x4a66da - _0x4b6254;\n    });\n    var flag = 'OK';\n    var sum = 0x0;\n    for (var i = 0x0; i < pm['length']; i++) {\n        var v = pm[i];\n        if (plus['hasOwnProperty'](v))\n            sum += plus[v];\n        if (minus['hasOwnProperty'](v))\n            sum -= minus[v];\n        if (sum > 0x96) {\n            flag = 'NG';\n            break;\n        }\n    }\n    console['log'](flag);\n}", "test_cases": [["3\n80 0 30\n50 5 25\n90 27 50\n3\n80 0 30\n70 5 25\n71 30 50\n0", "NG\nOK"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var plus={};\n   var minus={};\n   var pm=[];\n   for(var i=0;i<N;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var m=arr[0];\n      var a=arr[1];\n      var b=arr[2]-(0.001*N);\n      plus[a]=m;\n      minus[b]=m;\n      pm.push(a);\n      pm.push(b);\n   }\n   pm.sort(function(a,b){return a-b;});\n   var flag=\"OK\";\n   var sum=0;\n   for(var i=0;i<pm.length;i++){\n      var v=pm[i];\n      if(plus.hasOwnProperty(v))sum+=plus[v];\n      if(minus.hasOwnProperty(v))sum-=minus[v];\n      if(sum>150){flag=\"NG\";break;}\n   }\n   console.log(flag);\n}", "language": "JavaScript"}
{"filename": "p00241_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    for (var I = 0x0; I < N; I++) {\n        var A = Arr['shift']()['split']('\\x20')['map'](Number);\n        var x1 = A[0x0];\n        var y1 = A[0x1];\n        var z1 = A[0x2];\n        var w1 = A[0x3];\n        var x2 = A[0x4];\n        var y2 = A[0x5];\n        var z2 = A[0x6];\n        var w2 = A[0x7];\n        var a = x1 * x2;\n        var i = x1 * y2;\n        var j = x1 * z2;\n        var k = x1 * w2;\n        i += y1 * x2;\n        a -= y1 * y2;\n        k += y1 * z2;\n        j -= y1 * w2;\n        j += z1 * x2;\n        k -= z1 * y2;\n        a -= z1 * z2;\n        i += z1 * w2;\n        k += w1 * x2;\n        j += w1 * y2;\n        i -= w1 * z2;\n        a -= w1 * w2;\n        console['log'](a + '\\x20' + i + '\\x20' + j + '\\x20' + k);\n    }\n}", "test_cases": [["2\n1 2 3 4 7 6 7 8\n5 6 7 8 3 2 3 4\n0", "-58 16 36 32\n-50 32 28 48"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\nvar N=Arr.shift()-0;\nif(N==0)break;\nfor(var I=0;I<N;I++){\nvar A=Arr.shift().split(\" \").map(Number);\nvar x1=A[0];\nvar y1=A[1];\nvar z1=A[2];\nvar w1=A[3];\n \nvar x2=A[4];\nvar y2=A[5];\nvar z2=A[6];\nvar w2=A[7];\n \n   var a = x1 * x2;\n   var i = x1 * y2;\n   var j = x1 * z2;\n   var k = x1 * w2;\n \n   i += y1 * x2;\n   a -= y1 * y2;\n   k += y1 * z2;\n   j -= y1 * w2;\n              \n   j += z1 * x2;\n   k -= z1 * y2;\n   a -= z1 * z2;\n   i += z1 * w2;\n              \n   k += w1 * x2;\n   j += w1 * y2;\n   i -= w1 * z2;\n   a -= w1 * w2;\nconsole.log(a+\" \"+i+\" \"+j+\" \"+k);\n}\n}", "language": "JavaScript"}
{"filename": "p00884_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var first = Arr['shift']()['split'](':');\n    first = first[0x1]['slice'](0x0, -0x1)['split'](',');\n    var F = {};\n    first['forEach'](function (_0x1cfa6f) {\n        F[_0x1cfa6f] = !![];\n    });\n    var obj = {};\n    for (var i = 0x0; i < n - 0x1; i++) {\n        var arr = Arr['shift']()['split'](':');\n        obj[arr[0x0]] = arr[0x1]['slice'](0x0, -0x1)['split'](',');\n    }\n    var L = 0x0;\n    while (!![]) {\n        if (L == Object['keys'](F)['length'])\n            break;\n        L = Object['keys'](F)['length'];\n        for (var k in F) {\n            if (obj['hasOwnProperty'](k) && F[k]) {\n                obj[k]['forEach'](function (_0x5f2c84) {\n                    F[_0x5f2c84] = !![];\n                });\n                F[k] = ![];\n            }\n        }\n    }\n    var cnt = 0x0;\n    for (var k in F)\n        if (obj['hasOwnProperty'](k) == ![])\n            cnt++;\n    console['log'](cnt);\n}", "test_cases": [["2\ndevelopment:alice,bob,design,eve.\ndesign:carol,alice.\n3\none:another.\nanother:yetanother.\nyetanother:dave.\n3\nfriends:alice,bob,bestfriends,carol,fran,badcompany.\nbestfriends:eve,alice.\nbadcompany:dave,carol.\n5\na:b,c,d,e.\nb:c,d,e,f.\nc:d,e,f,g.\nd:e,f,g,h.\ne:f,g,h,i.\n4\naa:bb.\ncc:dd,ee.\nff:gg.\nbb:cc.\n0", "4\n1\n6\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var first=Arr.shift().split(\":\");\n   first=first[1].slice(0,-1).split(\",\");\n   var F={};\n   first.forEach(function(v){F[v]=true;});\n   var obj={};\n   for(var i=0;i<n-1;i++){\n      var arr=Arr.shift().split(\":\");\n      obj[arr[0]]=arr[1].slice(0,-1).split(\",\");\n   }\n   var L=0;\n   while(true){\n      if(L==Object.keys(F).length)break;\n      L=Object.keys(F).length;\n      for(var k in F){\n         if(obj.hasOwnProperty(k) && F[k]){\n            obj[k].forEach(function(v){F[v]=true;});\n            F[k]=false;\n         }\n      }\n   }\n   var cnt=0;\n   for(var k in F)if(obj.hasOwnProperty(k)==false)cnt++;\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p02316_1", "type": "JavaScript", "obfuscated": "function knapsack() {\n    var _0x3b95ce = [];\n    for (var _0x2830e9 = 0x0; _0x2830e9 <= N; _0x2830e9++)\n        _0x3b95ce[_0x2830e9] = [];\n    for (var _0x2830e9 = 0x0; _0x2830e9 <= W; _0x2830e9++)\n        _0x3b95ce[0x0][_0x2830e9] = 0x0;\n    for (var _0x2830e9 = 0x0; _0x2830e9 <= N; _0x2830e9++)\n        _0x3b95ce[_0x2830e9][0x0] = 0x0;\n    for (var _0x2830e9 = 0x1; _0x2830e9 <= N; _0x2830e9++) {\n        for (var _0x3bbe83 = 0x1; _0x3bbe83 <= W; _0x3bbe83++) {\n            if (items[_0x2830e9]['w'] <= W) {\n                if (items[_0x2830e9]['v'] + _0x3b95ce[_0x2830e9 - 0x1][_0x3bbe83 - items[_0x2830e9]['w']] > _0x3b95ce[_0x2830e9 - 0x1][_0x3bbe83]) {\n                    _0x3b95ce[_0x2830e9][_0x3bbe83] = items[_0x2830e9]['v'] + _0x3b95ce[_0x2830e9 - 0x1][_0x3bbe83 - items[_0x2830e9]['w']];\n                } else {\n                    _0x3b95ce[_0x2830e9][_0x3bbe83] = _0x3b95ce[_0x2830e9 - 0x1][_0x3bbe83];\n                }\n            } else {\n                _0x3b95ce[_0x2830e9][_0x3bbe83] = _0x3b95ce[_0x2830e9 - 0x1][_0x3bbe83];\n            }\n        }\n    }\n    return _0x3b95ce[N][W];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar nW = Arr['shift']()['split']('\\x20')['map'](Number);\nvar n = nW[0x0];\nvar W = nW[0x1];\nvar N = 0x0;\nvar items = [null];\nfor (var i = 0x1; i <= n; i++) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var k = 0x1;\n    do {\n        items['push']({\n            'v': arr[0x0] * k,\n            'w': arr[0x1] * k\n        });\n        N++;\n        k++;\n    } while (arr[0x1] * k <= W);\n}\nvar max = knapsack();\nconsole['log'](max);", "test_cases": [["4 8\n4 2\n5 2\n2 1\n8 3", "21"], ["2 20\n5 9\n4 10", "10"], ["3 9\n2 1\n3 1\n5 2", "27"]], "original": "function knapsack(){\n   var C=[];\n   for(var i=0;i<=N;i++)C[i]=[];\n   for(var i=0;i<=W;i++)C[0][i]=0;\n   for(var i=0;i<=N;i++)C[i][0]=0;\n   for(var i=1;i<=N;i++){\n      for(var j=1;j<=W;j++){\n         if(items[i].w<=W){\n            if(items[i].v+C[i-1][j-items[i].w]>C[i-1][j]){\n               C[i][j]=items[i].v+C[i-1][j-items[i].w];\n            }else{\n               C[i][j]=C[i-1][j];\n            }\n         }else{\n            C[i][j]=C[i-1][j];\n         } \n      }  \n   }\n   return C[N][W];\n}   \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar nW=(Arr.shift()).split(\" \").map(Number);\nvar n=nW[0];\nvar W=nW[1];\nvar N=0;\nvar items=[null];\nfor(var i=1;i<=n;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var k=1;\n   do{\n      items.push({v:arr[0]*k,w:arr[1]*k});\n      N++;\n      k++;\n   }while(arr[1]*k<=W);\n}\nvar max=knapsack();\nconsole.log(max);", "language": "JavaScript"}
{"filename": "p02468_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar nums = input['split']('\\x20')['map'](function (_0x175972) {\n    return +_0x175972;\n});\nvar n = nums[0x0];\nvar m = nums[0x1];\nvar mod = 0x1;\nfor (var i = 0x0; i < m; i++) {\n    mod = mod * n % 0x3b9aca07;\n}\nconsole['log'](mod);", "test_cases": [["2 3", "8"], ["5 8", "390625"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar nums = input.split(' ').map(function(num){return +num;});\nvar n = nums[0];\nvar m = nums[1];\n\nvar mod = 1;\nfor (var i = 0; i < m; i++) {\n    mod = (mod * n) % 1000000007;\n}\n\nconsole.log(mod);", "language": "JavaScript"}
{"filename": "p02541_1", "type": "JavaScript", "obfuscated": "function Main(_0x5ec2bb) {\n    _0x5ec2bb = _0x5ec2bb['split']('\\x0a');\n    const _0x45a10d = parseInt(_0x5ec2bb[0x0], 0xa);\n    for (var _0x159bf1 = 0x1; _0x159bf1 > 0x0; _0x159bf1++) {\n        var _0x532294 = 0.5 * (Math['sqrt'](0x8 * _0x45a10d * _0x159bf1 + 0x1) - 0x1);\n        if (Number['isInteger'](_0x532294) == !![]) {\n            console['log'](_0x532294);\n            break;\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["11", "10"], ["20200920", "1100144"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  \n  const N = parseInt(input[0], 10);\n\n  for (var i = 1; i > 0; i++) {\n    var n = 0.5*(Math.sqrt((8*N*i)+1)-1);\n    if(Number.isInteger(n) == true){\n      console.log(n);\n      break;\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02736_1", "type": "JavaScript", "obfuscated": "function Main(_0x5318b3) {\n    _0x5318b3 = _0x5318b3['split']('\\x0a');\n    for (i = 0x0; i < _0x5318b3['length']; i = i + 0x2) {\n        var _0x5ad52b = parseInt(_0x5318b3[i]);\n        var _0x56935f = _0x5318b3[i + 0x1]['split']('');\n        var _0x19ac26 = _0x56935f['map'](Number);\n        for (j = _0x5ad52b; j > 0x1; j--) {\n            for (k = 0x0; k < j; k++) {\n                var _0x50d1b3 = Math['abs'](_0x19ac26[0x0] - _0x19ac26[0x1]);\n                _0x19ac26['push'](_0x50d1b3);\n                _0x19ac26['shift']();\n            }\n            _0x19ac26['pop']();\n        }\n        console['log'](_0x19ac26[0x0]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1231", "1"], ["10\n2311312312", "0"]], "original": "function Main(input) {\n    input = input.split(\"\\n\");\n    for (i=0; i < input.length; i=i+2) {\n        var N = parseInt(input[i])\n        var a = input[i+1].split(\"\")\n        var aa = a.map(Number)\n        for (j=N; j > 1; j--) {\n            for (k=0; k < j; k++) {\n                var e = Math.abs(aa[0]-aa[1])\n                aa.push(e)\n                aa.shift()\n            }\n            aa.pop()\n        }\n        console.log(aa[0])\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02763_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0xda5b1b) {\n    let _0x565a73 = parseInt(_0xda5b1b[0x0]);\n    let _0x588465 = _0xda5b1b[0x1];\n    let _0x4fcf16 = parseInt(_0xda5b1b[0x2]);\n    let _0x28cc84 = [];\n    for (let _0x260f37 = 0x0; _0x260f37 < _0x4fcf16; _0x260f37++) {\n        let _0x5de6c4 = _0xda5b1b[_0x260f37 + 0x3]['trim']()['split']('\\x20');\n        _0x28cc84[_0x260f37] = parseInt(_0x5de6c4[0x0]);\n        if (_0x28cc84[_0x260f37] === 0x1) {\n            let _0x4bb5a8 = parseInt(_0x5de6c4[0x1]);\n            let _0x30a8ed = _0x5de6c4[0x2];\n            let _0x4daf3f = _0x588465['slice'](0x0, _0x4bb5a8 - 0x1);\n            let _0x4ca639 = _0x588465['slice'](_0x4bb5a8);\n            _0x588465 = _0x4daf3f + _0x30a8ed + _0x4ca639;\n        } else {\n            let _0x2936d4 = parseInt(_0x5de6c4[0x1]);\n            let _0x2e1c4d = parseInt(_0x5de6c4[0x2]);\n            let _0x460d49 = _0x588465['slice'](_0x2936d4 - 0x1, _0x2e1c4d);\n            let _0x347e05 = {};\n            let _0x528473 = 0x0;\n            for (let _0x16d38a = 0x0; _0x16d38a < _0x460d49['length']; _0x16d38a++) {\n                if (_0x347e05[_0x460d49[_0x16d38a]] === undefined) {\n                    _0x528473++;\n                    _0x347e05[_0x460d49[_0x16d38a]] = !![];\n                }\n            }\n            console['log'](_0x528473);\n        }\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["7\nabcdbbd\n6\n2 3 6\n1 5 z\n2 1 1\n1 4 a\n1 7 d\n2 1 7", "3\n1\n5"]], "original": "\"use strict\";\nfunction main(input) {\n  let n = parseInt(input[0]);\n  let s = input[1];\n \n  let q_l = parseInt(input[2]);\n  let q = [];\n \n  for(let j=0;j<q_l;j++){\n    let kari = input[j+3].trim().split(\" \")\n    q[j] = parseInt(kari[0]);\n    if(q[j]===1){\n      let i = parseInt(kari[1]);\n      let c = kari[2];\n      let str1 = s.slice(0, i-1);\n      let str2 = s.slice(i);\n \n      s = str1 + c + str2;\n    }else{\n      let l = parseInt(kari[1]);\n      let r = parseInt(kari[2]);\n      let str = s.slice(l-1, r);\n \n      //カウント\n      let list = {};\n      let counter = 0;\n \n      for(let i=0;i<str.length;i++){\n        if(list[str[i]]===undefined){\n          counter++;\n          list[str[i]] = true;\n        }\n      }\n      console.log(counter);\n    }\n  }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02775_1", "type": "JavaScript", "obfuscated": "function Main(_0x2ede04) {\n    _0x2ede04 = _0x2ede04['split']('\\x0a');\n    if (_0x2ede04[_0x2ede04['length'] - 0x1] === '') {\n        _0x2ede04['pop']();\n    }\n    const _0x251ae9 = _0x2ede04[0x0];\n    var _0x2c0f9a = 0x1;\n    var _0xa420aa = 0x0;\n    var _0x829077, _0x3041de;\n    for (var _0xb5d325 = 0x0; _0xb5d325 < _0x251ae9['length']; _0xb5d325++) {\n        _0x829077 = Math['min'](0x9 - _0x251ae9[_0xb5d325] + _0x2c0f9a, 0x1 + _0xa420aa + (_0x251ae9[_0xb5d325] - 0x0));\n        _0x3041de = Math['min'](0xa - _0x251ae9[_0xb5d325] + _0x2c0f9a, _0xa420aa + (_0x251ae9[_0xb5d325] - 0x0));\n        _0x2c0f9a = _0x829077;\n        _0xa420aa = _0x3041de;\n    }\n    console['log'](_0xa420aa);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["36", "8"], ["91", "3"], ["314159265358979323846264338327950288419716939937551058209749445923078164062862089986280348253421170", "243"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0];\n  var up=1;\n  var down=0;\n  var nup,ndown;\n  for(var i=0;i<N.length;i++){\n    nup=Math.min(9-N[i]+up,1+down+(N[i]-0));\n    ndown=Math.min(10-N[i]+up,down+(N[i]-0));\n    up=nup;\n    down=ndown;\n  }\n  console.log(down);\n\n}\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n\n\n\n  \n", "language": "JavaScript"}
{"filename": "p02851_1", "type": "JavaScript", "obfuscated": "function Main(_0xd9aa8d) {\n    const _0x1d6ba1 = _0xd9aa8d[0x0][0x1];\n    const _0x3ada8c = _0xd9aa8d[0x1]['map'](Number);\n    const _0x3cff73 = _0x3ada8c['reduce']((_0xc8467e, _0x549f9d, _0x1c9516) => {\n        var _0x3a971b = 0x0;\n        _0x3ada8c['slice'](_0x1c9516)['reduce']((_0x248dde, _0x1648ce, _0x4dc6e0) => {\n            const _0x3036f5 = (_0x248dde + _0x1648ce) % _0x1d6ba1;\n            if (_0x3036f5 === _0x4dc6e0 + 0x1) {\n                _0x3a971b++;\n            }\n            return _0x3036f5;\n        }, 0x0);\n        return _0xc8467e + _0x3a971b;\n    }, null);\n    console['log'](_0x3cff73);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['map'](_0x584dbb => _0x584dbb['split']('\\x20')));", "test_cases": [["5 4\n1 4 2 3 5", "4"], ["8 4\n4 2 4 2 4 2 4 2", "7"], ["10 7\n14 15 92 65 35 89 79 32 38 46", "8"]], "original": "function Main(input) {\n  const k = input[0][1];\n\n  /** @type {number[]} */\n  const as = input[1].map(Number);\n\n  const answer = as.reduce((total, cv, ci) => {\n    var result = 0;\n\n    as.slice(ci).reduce((pv, value, index) => {\n      const remainder = (pv + value) % k;\n\n      if (remainder === (index + 1)) {\n        result++;\n      }\n\n      return remainder;\n    }, 0);\n\n    return total + result;\n  }, null);\n\n  console.log(answer);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim().split(\"\\n\").map(line => line.split(' ')));", "language": "JavaScript"}
{"filename": "p02852_1", "type": "JavaScript", "obfuscated": "function Main(_0x273e98) {\n    _0x273e98 = _0x273e98['split']('\\x0a');\n    if (_0x273e98[_0x273e98['length'] - 0x1] === '') {\n        _0x273e98['pop']();\n    }\n    const _0x55dadd = _0x273e98[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x59a674 = _0x273e98[0x0]['split']('\\x20')[0x1] - 0x0;\n    const _0x3a8c44 = _0x273e98[0x1];\n    var _0x1aadf5 = _0x3a8c44['length'] - 0x1;\n    var _0x5e37c1 = [];\n    while (_0x1aadf5 > 0x0) {\n        if (_0x1aadf5 <= _0x59a674) {\n            _0x5e37c1['unshift'](_0x1aadf5);\n            break;\n        }\n        for (var _0x402671 = 0x0; _0x402671 < _0x59a674; _0x402671++) {\n            if (_0x3a8c44[_0x1aadf5 - _0x59a674 + _0x402671] === '0') {\n                _0x5e37c1['unshift'](_0x59a674 - _0x402671);\n                _0x1aadf5 = _0x1aadf5 - _0x59a674 + _0x402671;\n                break;\n            }\n            if (_0x402671 === _0x59a674 - 0x1) {\n                console['log'](-0x1);\n                return;\n            }\n        }\n    }\n    console['log'](_0x5e37c1['join']('\\x20'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["9 3\n0001000100", "1 3 2 3"], ["5 4\n011110", "-1"], ["6 6\n0101010", "6"]], "original": "\n\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  const S=input[1];\n  var cur=S.length-1;\n  var ret=[];\n  while(cur>0){\n    if(cur<=M){\n      ret.unshift(cur);\n      break;\n    }\n    for(var i=0;i<M;i++){\n      if(S[cur-M+i]==='0'){\n        ret.unshift(M-i);\n        cur=cur-M+i;\n        break;\n      }\n      if(i===M-1){\n        console.log(-1);\n        return;\n      }\n    }\n  }\n  console.log(ret.join(' '));\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02962_1", "type": "JavaScript", "obfuscated": "function Main(_0x2eb715) {\n    _0x2eb715 = _0x2eb715['split']('\\x0a');\n    const _0x746bdf = _0x2eb715[0x0];\n    const _0x131f2b = _0x2eb715[0x1];\n    const _0xec8724 = [];\n    for (i = 0x0; i < _0x746bdf['length']; i++) {\n        if ((_0x746bdf + _0x131f2b)['slice'](i, i + _0x131f2b['length']) == _0x131f2b) {\n            _0xec8724['push'](!![]);\n        } else {\n            _0xec8724['push'](![]);\n        }\n    }\n    max = 0x0;\n    for (i = 0x0; i < _0x746bdf['length']; i++) {\n        isInf = ![];\n        now = i;\n        getted = [];\n        while (_0xec8724[now]) {\n            getted['push'](now);\n            now = (now + _0x131f2b['length']) % _0x746bdf['length'];\n            if (getted['indexOf'](now) != -0x1) {\n                isInf = !![];\n                break;\n            }\n        }\n        if (isInf) {\n            max = -0x1;\n            break;\n        } else {\n            if (max < getted['length'])\n                max = getted['length'];\n        }\n    }\n    console['log'](max);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abcabab\nab", "3"], ["aa\naaaaaaa", "-1"], ["aba\nbaaab", "0"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst s = input[0]\n\tconst t = input[1]\n\tconst match = []\n\tfor(i=0; i < s.length; i++){\n\t\tif((s+t).slice(i,i+t.length) == t){\n\t\t\tmatch.push(true)\n\t\t}else{\n\t\t\tmatch.push(false)\n\t\t}\n\t}\n\tmax = 0\n\tfor(i=0; i < s.length; i++){\n\t\tisInf = false\n\t\tnow = i\n\t\tgetted = []\n\t\twhile(match[now]){\n\t\t\tgetted.push(now)\n\t\t\tnow = (now + t.length) % s.length\n\t\t\tif(getted.indexOf(now) != -1){\n\t\t\t\tisInf = true\n\t\t\t\tbreak\n\t\t\t} \n\t\t}\n\t\tif(isInf){\n\t\t\tmax = -1\n\t\t\tbreak\n\t\t}else{\n\t\t\tif(max < getted.length) max = getted.length\n\t\t}\n\t}\n\tconsole.log(max)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02964_1", "type": "JavaScript", "obfuscated": "function Main(_0xff3a3f) {\n    _0xff3a3f = _0xff3a3f['split']('\\x0a');\n    input1 = _0xff3a3f[0x0]['split']('\\x20');\n    const _0x7c5feb = parseInt(input1[0x0]);\n    const _0x54fc2c = parseInt(input1[0x1]);\n    const _0x5f1b4d = _0xff3a3f[0x1]['split']('\\x20');\n    var _0x3552e1 = [];\n    var _0x521e29 = [''];\n    for (i = 0x0; i < _0x54fc2c; i++) {\n        for (j = 0x0; j < _0x7c5feb; j++) {\n            if (_0x3552e1['indexOf'](_0x5f1b4d[j]) != -0x1) {\n                var _0x4e1b3c = _0x3552e1['indexOf'](_0x5f1b4d[j]);\n                _0x3552e1 = _0x3552e1['slice'](0x0, _0x4e1b3c);\n            } else {\n                _0x3552e1['push'](_0x5f1b4d[j]);\n            }\n        }\n        if (_0x521e29['indexOf'](_0x3552e1['join']('\\x20')) == -0x1) {\n            _0x521e29['push'](_0x3552e1['join']('\\x20'));\n        } else {\n            break;\n        }\n    }\n    const _0x30bba2 = _0x521e29['indexOf'](_0x3552e1['join']('\\x20'));\n    if (_0x30bba2 == _0x54fc2c) {\n        console['log'](_0x521e29[_0x30bba2]);\n    } else {\n        const _0x5a7581 = (_0x54fc2c - _0x30bba2) % (_0x521e29['length'] - _0x30bba2);\n        console['log'](_0x521e29[_0x30bba2 + _0x5a7581]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n1 2 3", "2 3"], ["5 10\n1 2 3 2 3", "3"], ["6 1000000000000\n1 1 2 2 3 3", ""], ["11 97\n3 1 4 1 5 9 2 6 5 3 5", "9 2 6"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tinput1 = input[0].split(\" \")\n\tconst N = parseInt(input1[0])\n\tconst K = parseInt(input1[1])\n\tconst As = input[1].split(\" \")\n\tvar filtered = []\n\tvar results = [\"\"]\n\tfor(i=0; i < K; i++){\n\t\tfor(j=0; j < N; j++){\n\t\t\tif(filtered.indexOf(As[j]) != -1){\n\t\t\t\tvar id = filtered.indexOf(As[j])\n\t\t\t\tfiltered = filtered.slice(0, id)\n\t\t\t}else{\n\t\t\t\tfiltered.push(As[j])\n\t\t\t}\n\t\t}\n\t\tif(results.indexOf(filtered.join(\" \")) == -1){\n\t\t\tresults.push(filtered.join(\" \"))\n\t\t}else{\n\t\t\tbreak\n\t\t}\n\t}\n\tconst roopstart = results.indexOf(filtered.join(\" \"))\n\tif(roopstart == K){\n\t\tconsole.log(results[roopstart])\n\t}else{\n\t\tconst roopId = (K - roopstart) % (results.length - roopstart)\n\t\tconsole.log(results[roopstart + roopId])\n\t}\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03007_1", "type": "JavaScript", "obfuscated": "log = console['log'];\nvar stdin = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nvar lines = stdin['split']('\\x0a')['filter'](_0x40e23b => _0x40e23b !== '')['map'](_0x39286c => _0x39286c['split']('\\x20')['map'](Number));\nvar N = lines[0x0];\nvar A = lines[0x1];\nvar processList = [];\nA['sort']((_0x54baee, _0xa965a8) => _0x54baee - _0xa965a8);\nvar plusList = [];\nvar minusList = [];\nplusList['push'](A['pop']());\nminusList['push'](A['shift']());\nA['forEach'](_0x2e568c => {\n    _0x2e568c >= 0x0 ? plusList['push'](_0x2e568c) : minusList['push'](_0x2e568c);\n});\nvar tmp = minusList['pop']();\nfor (var i = 0x0; i < plusList['length'] - 0x1; i++) {\n    var plus = plusList['pop']();\n    processList['push'](tmp + '\\x20' + plus);\n    tmp = tmp - plus;\n}\nvar lastplus = plusList['pop']();\nfor (var i = 0x0; i < minusList['length']; i++) {\n    var minus = minusList['pop']();\n    processList['push'](lastplus + '\\x20' + minus);\n    lastplus = lastplus - minus;\n}\nprocessList['push'](lastplus + '\\x20' + tmp);\nlog(lastplus - tmp);\nprocessList['forEach'](_0x2a161f => log(_0x2a161f));", "test_cases": [["3\n1 -1 2", "4\n-1 1\n2 -2"], ["3\n1 1 1", "1\n1 1\n1 0"]], "original": "log = console.log;\nvar stdin = require(\"fs\").readFileSync(\"/dev/stdin\", \"UTF-8\");\nvar lines = stdin\n  .split(\"\\n\")\n  .filter(v => v !== \"\")\n  .map(v => v.split(\" \").map(Number));\n\nvar N = lines[0];\nvar A = lines[1];\nvar processList = [];\n\nA.sort((a, b) => a - b);\nvar plusList = [];\nvar minusList = [];\nplusList.push(A.pop());\nminusList.push(A.shift());\n\nA.forEach(v => {\n  v >= 0 ? plusList.push(v) : minusList.push(v);\n});\n\nvar tmp = minusList.pop();\nfor (var i = 0; i < plusList.length - 1; i++) {\n  var plus = plusList.pop();\n  processList.push(tmp + \" \" + plus);\n  tmp = tmp - plus;\n}\n\nvar lastplus = plusList.pop()\nfor (var i = 0; i < minusList.length; i++) {\n  var minus = minusList.pop();\n  processList.push(lastplus + \" \" + minus);\n  lastplus = lastplus - minus;\n}\n\nprocessList.push(lastplus + \" \" + tmp)\nlog(lastplus - tmp)\nprocessList.forEach(v=>log(v))", "language": "JavaScript"}
{"filename": "p03027_1", "type": "JavaScript", "obfuscated": "function Main(_0x3aed2a) {\n    _0x3aed2a = _0x3aed2a['split']('\\x0a');\n    var _0x39b92a = parseInt(_0x3aed2a[0x0]);\n    var _0x4b3e20 = _0x3aed2a['slice'](0x1, _0x39b92a + 0x1)['map'](_0x341498 => _0x341498['split']('\\x20')['map'](_0xe55692 => parseInt(_0xe55692)));\n    var _0x2390eb = new Array(_0x39b92a);\n    _0x2390eb['fill'](0x0);\n    for (var _0x1be0bb = 0x0; _0x1be0bb < _0x4b3e20['length']; _0x1be0bb++) {\n        for (var _0x29a46c = 0x0; _0x29a46c < _0x4b3e20[_0x1be0bb][0x2]; _0x29a46c++) {\n            if (_0x29a46c == 0x0) {\n                _0x2390eb[_0x1be0bb] = _0x4b3e20[_0x1be0bb][0x0] % 0xf4243;\n            } else {\n                _0x2390eb[_0x1be0bb] = _0x2390eb[_0x1be0bb] * (_0x4b3e20[_0x1be0bb][0x0] + _0x29a46c * _0x4b3e20[_0x1be0bb][0x1]) % 0xf4243;\n            }\n        }\n        console['log'](_0x2390eb[_0x1be0bb]);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n7 2 4\n12345 67890 2019", "9009\n916936"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\");\n  \tvar Q = parseInt(input[0]);\n      var Qs = input.slice(1, Q+1).map(x => x.split(\" \").map(y => parseInt(y)));\n \tvar ans = new Array(Q);\n    ans.fill(0);\n  \tfor(var i=0; i < Qs.length; i++){\n       for(var j=0; j < Qs[i][2]; j++){\n         if(j == 0){\n           ans[i] = Qs[i][0] % 1000003;\n         }else{\n           ans[i] = ans[i]*(Qs[i][0] + j*Qs[i][1]) % 1000003;\n         }\n       }\n      console.log(ans[i]);\n    }\n }\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03040_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction I(_0x3d1b50, _0x5bb584) {\n    this['_s'] = _0x3d1b50['split']('\\x0a'), this['_c'] = 0x0, this['_l'] = 0x0, this['_f'] = _0x5bb584 || Number;\n}\nI['prototype']['a'] = function (_0xa9c7c7) {\n    var _0xb74260 = this['_s'][this['_l']];\n    if (_0xb74260) {\n        var _0x5b5a06 = _0xb74260['trim']()['split']('\\x20'), _0x35a8d2 = _0x5b5a06[this['_c']];\n        return this['_c']++, _0x5b5a06['length'] === this['_c'] && (this['_c'] = 0x0, this['_l']++), _0xa9c7c7 ? _0xa9c7c7(_0x35a8d2) : this['_f'](_0x35a8d2);\n    }\n}, I['prototype']['l'] = function (_0x27de9b) {\n    var _0x20824f = this['_s'][this['_l']];\n    if (_0x20824f)\n        return this['_c'] = 0x0, this['_l']++, _0x20824f['split']('\\x20')['map'](_0x27de9b || this['_f']);\n}, module['exports'] = I;\nfunction main(_0x49b9c8) {\n    var _0x41717f = new I(_0x49b9c8);\n    var _0x481788 = _0x41717f['a']();\n    var _0xd227ef = 0x0;\n    var _0xb5afa3 = [];\n    for (var _0xf97787 = 0x0; _0xf97787 < _0x481788; _0xf97787++) {\n        var _0x46ce42 = _0x41717f['a']();\n        if (_0x46ce42 === 0x1) {\n            var _0x53a866 = _0x41717f['a']();\n            var _0x744c27 = _0x41717f['a']();\n            _0xd227ef += _0x744c27;\n            _0xb5afa3['push'](_0x53a866);\n        } else {\n            _0xb5afa3 = _0xb5afa3['sort']((_0x116166, _0x5d1c9a) => _0x116166 - _0x5d1c9a);\n            var _0x1c1c00 = _0xb5afa3[Math['floor']((_0xb5afa3['length'] - 0x1) / 0x2)];\n            var _0xd300fe = _0xb5afa3['map'](_0x3a34f2 => Math['abs'](_0x3a34f2 - _0x1c1c00))['reduce']((_0x68fa83, _0x517011) => _0x68fa83 + _0x517011) + _0xd227ef;\n            console['log'](_0x1c1c00, _0xd300fe);\n        }\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 4 2\n2\n1 1 -8\n2", "4 2\n1 -3"], ["4\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n1 -1000000000 1000000000\n2", "-1000000000 3000000000"]], "original": "\"use strict\";\nfunction I(t,i){this._s=t.split(\"\\n\"),this._c=0,this._l=0,this._f=i||Number}I.prototype.a=function(t){var i=this._s[this._l];if(i){var s=i.trim().split(\" \"),h=s[this._c];return this._c++,s.length===this._c&&(this._c=0,this._l++),t?t(h):this._f(h)}},I.prototype.l=function(t){var i=this._s[this._l];if(i)return this._c=0,this._l++,i.split(\" \").map(t||this._f)},module.exports=I;\n\nfunction main(input) {\n  var o = new I(input);\n\n  var q = o.a();\n\n  var c = 0;\n  var sorted = [];\n\n  for (var i = 0; i < q; i ++) {\n    var q1 = o.a();\n    if (q1 === 1) {\n      var a = o.a();\n      var b = o.a();\n      c += b;\n      \n      sorted.push(a);\n    } else {\n      sorted = sorted.sort((a, b) => a - b);\n      var mid = sorted[Math.floor((sorted.length - 1) / 2)];\n      var ans = sorted.map(x => Math.abs(x - mid)).reduce((acc, cur) => acc + cur) + c;\n      console.log(mid, ans);\n    }\n  }\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03090_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0x3f5b6d(_0x1f70af) {\n        return new _0x497083(_0x1f70af);\n    }\n    function _0x497083(_0x4f105a) {\n        this['_s'] = _0x4f105a['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0x497083['prototype']['a'] = function (_0x277f0b) {\n        var _0xbdc0b6 = this['_s'], _0x54c159 = this['_y'], _0x3fcd2f;\n        if (typeof _0xbdc0b6[_0x54c159] === 'string')\n            _0xbdc0b6[_0x54c159] = _0xbdc0b6[_0x54c159]['split']('\\x20')['reverse']();\n        _0x3fcd2f = _0xbdc0b6[_0x54c159]['pop']();\n        if (!_0xbdc0b6[_0x54c159]['length'])\n            this['_y']++;\n        return _0x277f0b ? _0x3fcd2f : +_0x3fcd2f;\n    };\n    _0x497083['prototype']['l'] = function (_0x3cface) {\n        var _0x38d712 = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x3cface ? _0x38d712 : _0x38d712['map'](_0x5060f7 => +_0x5060f7);\n    };\n    _0x497083['prototype']['m'] = function (_0x4010c6, _0x1c3dfd) {\n        var _0x1ddffa = this['_s']['slice'](this['_y'], this['_y'] += _0x4010c6)['map'](_0x1cb69a => _0x1cb69a['split']('\\x20'));\n        return _0x1c3dfd ? _0x1ddffa : _0x1ddffa['map'](_0x2ac717 => _0x2ac717['map'](_0x21899d => +_0x21899d));\n    };\n    _0x497083['prototype']['r'] = function (_0x286c9d, _0x4984f1) {\n        var _0x1cad0a = this['_s']['slice'](this['_y'], this['_y'] += _0x286c9d);\n        return _0x4984f1 ? _0x1cad0a : _0x1cad0a['map'](_0x3b2c8d => +_0x3b2c8d);\n    };\n    return _0x3f5b6d;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](main());\nfunction main() {\n    var _0x37a9cc = o['a']();\n    var _0x176c57 = [];\n    for (var _0x19cde9 = 0x1; _0x19cde9 <= _0x37a9cc; _0x19cde9++) {\n        for (var _0x14f0eb = _0x19cde9 + 0x1; _0x14f0eb <= _0x37a9cc; _0x14f0eb++) {\n            if (_0x37a9cc % 0x2 && _0x19cde9 + _0x14f0eb === _0x37a9cc)\n                continue;\n            if (_0x37a9cc % 0x2 === 0x0 && _0x19cde9 + _0x14f0eb === _0x37a9cc + 0x1)\n                continue;\n            _0x176c57['push'](_0x19cde9 + '\\x20' + _0x14f0eb);\n        }\n    }\n    console['log'](_0x176c57['length']);\n    return _0x176c57['join']('\\x0a');\n}", "test_cases": [["3", "2\n1 3\n2 3"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var ans = [];\n  for(var i = 1; i <= n; i++){\n    for(var j = i+1; j <= n; j++){\n      if(n % 2 && i+j === n)continue;\n      if(n % 2 === 0 && i+j === n+1)continue;\n      ans.push(i+\" \"+j);\n    }\n  }\n  console.log(ans.length);\n  return ans.join(\"\\n\");\n}", "language": "JavaScript"}
{"filename": "p03176_1", "type": "JavaScript", "obfuscated": "function Main(_0x512bce) {\n    _0x512bce = _0x512bce['split']('\\x0a');\n    var _0x108191 = parseInt(_0x512bce[0x0]);\n    var _0x2a015f = _0x512bce[0x1]['split']('\\x20')['map'](_0x3bd10b => parseInt(_0x3bd10b));\n    var _0x221926 = _0x512bce[0x2]['split']('\\x20')['map'](_0x53ec1d => parseInt(_0x53ec1d));\n    var _0x36c5c5 = new Array(_0x108191 + 0x1)['fill'](0x0);\n    var _0x54ea1a = 0x0;\n    for (var _0x108069 = 0x0; _0x108069 < _0x108191; _0x108069++) {\n        var _0x5ccb86 = 0x0;\n        tmp = _0x221926[_0x108069] + _0x36c5c5[_0x2a015f[_0x108069]];\n        for (var _0x362f47 = _0x2a015f[_0x108069]; _0x362f47 < _0x108191 + 0x1; _0x362f47++) {\n            if (tmp > _0x36c5c5[_0x362f47]) {\n                _0x36c5c5[_0x362f47] = tmp;\n            } else {\n                break;\n            }\n        }\n        _0x54ea1a = Math['max'](_0x54ea1a, _0x36c5c5[_0x2a015f[_0x108069]]);\n    }\n    console['log']('%s', _0x54ea1a);\n    return _0x54ea1a;\n}\nfunction debug(_0x1878ef) {\n    var _0x4f315b = document['getElementById']('input' + _0x1878ef)['value'];\n    var _0x2299ce = Main(_0x4f315b);\n    var _0x31578a = 'WA';\n    if (_0x2299ce == document['getElementById']('output' + _0x1878ef)['value']['split']('\\x0a')[0x0]) {\n        _0x31578a = 'AC';\n    }\n    document['getElementById']('result' + _0x1878ef)['innerHTML'] = _0x31578a;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n3 1 4 2\n10 20 30 40", "60"], ["1\n1\n10", "10"], ["5\n1 2 3 4 5\n1000000000 1000000000 1000000000 1000000000 1000000000", "5000000000"], ["9\n4 2 5 8 3 6 1 7 9\n6 8 8 4 6 3 5 7 5", "31"]], "original": "\n\nfunction Main(input) {\n  input = input.split(\"\\n\");\n  var N = parseInt(input[0]);\n  var h = input[1].split(\" \").map(i => parseInt(i));\n  var a = input[2].split(\" \").map(i => parseInt(i));\n  var dp = new Array(N+1).fill(0);\n  //dp[h[0]]=a[0];\n  var ans=0;\n  for(var i=0;i<N;i++){\n    var max=0;\n    tmp=a[i]+dp[h[i]];\n    for(var j=h[i];j<N+1;j++){\n      if(tmp>dp[j]){\n        dp[j]=tmp;\n      }else{\n        break;\n      }\n\n    }\n    ans=Math.max(ans,dp[h[i]]);\n  }\n\n  console.log('%s', ans);\n  return ans;\n}\n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(n){\n  var input = document.getElementById(\"input\"+n).value;\n  var ans=Main(input);\n  var result=\"WA\";\n  if(ans==document.getElementById(\"output\"+n).value.split(\"\\n\")[0]){\n    result=\"AC\";\n  }\n  document.getElementById(\"result\"+n).innerHTML=result;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03255_1", "type": "JavaScript", "obfuscated": "var toInt = _0xfed95f => parseInt(_0xfed95f, 0xa);\nvar toIntArr = _0x264fed => _0x264fed['map'](_0x46f41a => toInt(_0x46f41a));\nvar abs = _0x1e2d7a => _0x1e2d7a > 0x0 ? _0x1e2d7a : -_0x1e2d7a;\nfunction min() {\n    var _0x4474ad = arguments, _0x339f = _0x4474ad[0x0];\n    for (var _0x2aba78 = 0x1; _0x2aba78 < _0x4474ad['length']; _0x2aba78++)\n        if (_0x4474ad[_0x2aba78] < _0x339f)\n            _0x339f = _0x4474ad[_0x2aba78];\n    return _0x339f;\n}\nfunction max() {\n    var _0x540a3c = arguments, _0x2ce141 = _0x540a3c[0x0];\n    for (var _0x44ec48 = 0x1; _0x44ec48 < _0x540a3c['length']; _0x44ec48++)\n        if (_0x540a3c[_0x44ec48] > _0x2ce141)\n            _0x2ce141 = _0x540a3c[_0x44ec48];\n    return _0x2ce141;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction Main(_0x1c2be7) {\n    var _0x1c2be7 = _0x1c2be7['split']('\\x0a');\n    var _0x3f9cf9 = toIntArr(_0x1c2be7[0x0]['split']('\\x20'));\n    var _0x3b7117 = _0x3f9cf9[0x0];\n    var _0x44d7e3 = _0x3f9cf9[0x1];\n    var _0x4a4e90 = toIntArr(_0x1c2be7[0x1]['split']('\\x20'));\n    var _0xc83589 = [_0x4a4e90[0x0]];\n    for (var _0x3d8f7f = 0x1; _0x3d8f7f < _0x3b7117; _0x3d8f7f++) {\n        _0xc83589[_0x3d8f7f] = _0x4a4e90[_0x3d8f7f] + _0xc83589[_0x3d8f7f - 0x1];\n    }\n    var _0x586223 = (_0x3b7117 + 0x1) * _0x44d7e3;\n    var _0x34d487 = 0x0;\n    for (var _0x3d8f7f = _0x3b7117 - 0x1; _0x3d8f7f > -0x1; _0x3d8f7f--) {\n        _0x34d487++;\n        if (_0x34d487 > 0x2 && _0x44d7e3 < _0xc83589[_0x3d8f7f] * (_0x34d487 - 0x1) * 0x2 - _0x4a4e90[_0x3d8f7f] * 0x2) {\n            _0x34d487 = 0x1;\n            _0x586223 += _0x44d7e3;\n        }\n        _0x586223 += _0x4a4e90[_0x3d8f7f] * (max(_0x34d487, 0x2) * 0x2 + 0x1);\n    }\n    console['log'](_0x586223);\n}", "test_cases": [["2 100\n1 10", "355"], ["5 1\n1 999999997 999999998 999999999 1000000000", "19999999983"], ["10 8851025\n38 87 668 3175 22601 65499 90236 790604 4290609 4894746", "150710136"], ["16 10\n1 7 12 27 52 75 731 13856 395504 534840 1276551 2356789 9384806 19108104 82684732 535447408", "3256017715"]], "original": "var toInt = x=>parseInt(x,10);\nvar toIntArr = arr=>arr.map(x=>toInt(x));\nvar abs = x=>x>0?x:-x;\nfunction min(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]<val)val = rest[i];return val}\nfunction max(){var rest = arguments,val=rest[0];for(var i=1;i<rest.length;i++)if(rest[i]>val)val = rest[i];return val}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n \nfunction Main(input){\n\tvar input = input.split('\\n');\n\tvar temp = toIntArr(input[0].split(' '));\n\tvar n = temp[0];\n\tvar x = temp[1];\n\tvar xs = toIntArr(input[1].split(' '));\n\tvar ss = [xs[0]];\n\n\tfor(var i = 1; i < n; i++){\n\t\tss[i] = xs[i] + ss[i-1];\n\t}\n\tvar ans = (n+1)*x;\n\n\tvar has = 0;\n\tfor(var i = n-1; i > -1; i--){\n\t\thas++;\n\t\tif(has>2 && x < ss[i]*(has-1)*2 - xs[i]*2){\n\t\t\thas = 1;\n\t\t\tans += x;\n\t\t}\n\t\tans += xs[i]*(max(has,2)*2 + 1);\n\t}\n\t\n\tconsole.log(ans);\n\n}", "language": "JavaScript"}
{"filename": "p03277_1", "type": "JavaScript", "obfuscated": "function gets(_0x2a6e78) {\n    this['_s'] = _0x2a6e78['split']('\\x0a');\n    this['_y'] = 0x0;\n}\n;\ngets['prototype'] = {\n    'a': function (_0x4930f9) {\n        var _0x5aea32 = this['_s'], _0x3cd455 = this['_y'], _0x12b40d;\n        if (typeof _0x5aea32[_0x3cd455] === 'string')\n            _0x5aea32[_0x3cd455] = _0x5aea32[_0x3cd455]['split']('\\x20')['reverse']();\n        _0x12b40d = _0x5aea32[_0x3cd455]['pop']();\n        if (!_0x5aea32[_0x3cd455]['length'])\n            this['_y']++;\n        return _0x4930f9 ? _0x12b40d : +_0x12b40d;\n    },\n    'l': function (_0x2f5fce) {\n        var _0x14261a = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x2f5fce ? _0x14261a : _0x14261a['map'](_0x3a5589 => +_0x3a5589);\n    },\n    'm': function (_0x289e88, _0x1770bb) {\n        var _0x54ce3f = this['_s'], _0x2eb80 = this['_y'], _0x426e80 = [], _0xb19b13 = 0x0;\n        if (_0x1770bb)\n            for (; _0xb19b13 < _0x289e88; _0xb19b13++)\n                _0x426e80[_0xb19b13] = _0x54ce3f[_0x2eb80 + _0xb19b13]['split']('\\x20');\n        else\n            for (; _0xb19b13 < _0x289e88; _0xb19b13++)\n                _0x426e80[_0xb19b13] = _0x54ce3f[_0x2eb80 + _0xb19b13]['split']('\\x20')['map'](_0x2e451a => +_0x2e451a);\n        this['_y'] += _0x289e88;\n        return _0x426e80;\n    }\n};\nvar o = new gets(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](main());\nfunction main() {\n    var _0x103e69 = o['a']();\n    var _0x34d881 = o['l']();\n    var _0x4cba87 = [];\n    if (_0x103e69 <= 0x2)\n        return Math['max'](..._0x34d881);\n    for (var _0x33799b = 0x0; _0x33799b < _0x103e69 - 0x1; _0x33799b++)\n        _0x34d881[_0x103e69 + _0x33799b] = Math['max'](_0x34d881[_0x33799b], _0x34d881[_0x33799b + 0x1]);\n    return _0x2d0622(_0x34d881);\n    function _0x2d0622(_0x15b111) {\n        _0x15b111['sort']((_0x5e2077, _0x287858) => _0x5e2077 - _0x287858);\n        return _0x15b111[_0x15b111['length'] >> 0x1];\n    }\n}", "test_cases": [["3\n10 30 20", "30"], ["1\n10", "10"], ["10\n5 9 5 9 8 9 3 5 4 3", "8"]], "original": "function gets(str){\n  this._s = str.split(\"\\n\");\n  this._y = 0;\n};\ngets.prototype = {\n  a: function(f){\n    var s = this._s, y = this._y, r;\n    if(typeof s[y] === \"string\")s[y] = s[y].split(\" \").reverse();\n    r = s[y].pop();\n    if(!s[y].length)this._y++;\n    return f?r:+r;\n  },\n  l: function(f){\n    var s = this._s[this._y++].split(\" \");\n    return f?s:s.map(a=>+a);\n  },\n  m: function(n,f){\n    var s = this._s, y = this._y, r = [], i = 0;\n    if(f)for(;i < n; i++)r[i] = s[y+i].split(\" \");\n    else for(;i < n; i++)r[i] = s[y+i].split(\" \").map(a=>+a);\n    this._y += n;\n    return r;\n  },\n};\nvar o=new gets(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var a = o.l();\n  var b = [];\n  if(n <= 2)return Math.max(...a);\n  for(var i = 0; i < n-1; i++)a[n+i] = Math.max(a[i],a[i+1]);\n  return middle(a);\n\n  function middle(a){\n    a.sort((a,b)=>a-b);\n    return a[a.length>>1];\n  }\n}", "language": "JavaScript"}
{"filename": "p03298_1", "type": "JavaScript", "obfuscated": "m = ('' + require('fs')['readFileSync'](0x0))['split']`\n`;\nn = m[a = 0x0];\ns = m[0x1];\nfor (b = 0x1 << n; b--;) {\n    u = 0x0;\n    for (i = n; i--;)\n        u = b & 0x1 << i ? s[i] + u : u + s[i];\n    m[u] = -~m[u];\n}\nfor (b = 0x1 << n; b--;) {\n    u = 0x0;\n    for (i = n; i--;)\n        u = b & 0x1 << i ? s[0x2 * n + ~i] + u : u + s[0x2 * n + ~i];\n    a += ~~m[u];\n}\nconsole['log'](a);", "test_cases": [["4\ncabaacba", "4"], ["11\nmippiisssisssiipsspiim", "504"], ["4\nabcdefgh", "0"], ["18\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "9075135300"]], "original": "m=(\"\"+require(\"fs\").readFileSync(0)).split`\n`;n=m[a=0];s=m[1];for(b=1<<n;b--;){u=0;for(i=n;i--;)u=b&(1<<i)?s[i]+u:u+s[i];m[u]=-~m[u]}for(b=1<<n;b--;){u=0;for(i=n;i--;)u=b&(1<<i)?s[2*n+~i]+u:u+s[2*n+~i];a+=~~m[u]}console.log(a)", "language": "JavaScript"}
{"filename": "p03330_1", "type": "JavaScript", "obfuscated": "function Main(_0x2e2bd9) {\n    _0x2e2bd9 = _0x2e2bd9['split']('\\x0a');\n    _0x2e2bd9[0x0] = _0x2e2bd9[0x0]['split']('\\x20')['map'](_0x15584e => +_0x15584e);\n    var _0x368383 = _0x2e2bd9[0x0][0x0];\n    var _0x5dfb5f = _0x2e2bd9[0x0][0x1];\n    var _0x1b196b = [], _0x67ba30 = [];\n    for (var _0x1fb94c = 0x0; _0x1fb94c < _0x5dfb5f; _0x1fb94c++) {\n        _0x1b196b[_0x1fb94c] = _0x2e2bd9[_0x1fb94c + 0x1]['split']('\\x20')['map'](_0x1fac50 => +_0x1fac50);\n    }\n    for (_0x1fb94c = 0x0; _0x1fb94c < _0x368383; _0x1fb94c++) {\n        _0x67ba30[_0x1fb94c] = _0x2e2bd9[_0x1fb94c + 0x1 + _0x5dfb5f]['split']('\\x20')['map'](_0x4be48c => +_0x4be48c - 0x1);\n    }\n    var _0x4d8752 = Array(0x3)['fill'](0x0)['map'](_0x541932 => Array(_0x5dfb5f)['fill'](0x0));\n    for (_0x1fb94c = 0x0; _0x1fb94c < _0x368383; _0x1fb94c++)\n        for (var _0x1b42fb = 0x0; _0x1b42fb < _0x368383; _0x1b42fb++) {\n            var _0x4ec54b = (_0x1fb94c + _0x1b42fb) % 0x3;\n            _0x4d8752[_0x4ec54b][_0x67ba30[_0x1fb94c][_0x1b42fb]]++;\n        }\n    var _0x38482d = 0x218711a00;\n    for (_0x1fb94c = 0x0; _0x1fb94c < _0x5dfb5f; _0x1fb94c++) {\n        for (_0x1b42fb = 0x0; _0x1b42fb < _0x5dfb5f; _0x1b42fb++) {\n            if (_0x1fb94c === _0x1b42fb)\n                continue;\n            for (var _0x2d2803 = 0x0; _0x2d2803 < _0x5dfb5f; _0x2d2803++) {\n                if (_0x1fb94c === _0x2d2803 || _0x1b42fb === _0x2d2803)\n                    continue;\n                _0x4ec54b = 0x0;\n                for (var _0x8a8a0c = 0x0; _0x8a8a0c < _0x5dfb5f; _0x8a8a0c++) {\n                    _0x4ec54b += _0x4d8752[0x0][_0x8a8a0c] * _0x1b196b[_0x8a8a0c][_0x1fb94c];\n                    _0x4ec54b += _0x4d8752[0x1][_0x8a8a0c] * _0x1b196b[_0x8a8a0c][_0x1b42fb];\n                    _0x4ec54b += _0x4d8752[0x2][_0x8a8a0c] * _0x1b196b[_0x8a8a0c][_0x2d2803];\n                }\n                _0x38482d = Math['min'](_0x38482d, _0x4ec54b);\n            }\n        }\n    }\n    console['log'](_0x38482d);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3\n0 1 1\n1 0 1\n1 4 0\n1 2\n3 3", "3"], ["4 3\n0 12 71\n81 0 53\n14 92 0\n1 1 2 1\n2 1 1 2\n2 2 1 3\n1 1 2 2", "428"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  s[0] = s[0].split(\" \").map(a=>+a);\n  var n = s[0][0];\n  var c = s[0][1];\n  var d = [], a = [];\n  for(var i = 0; i < c; i++){\n    d[i] = s[i+1].split(\" \").map(a=>+a);\n  }\n  for(i = 0; i < n; i++){\n    a[i] = s[i+1+c].split(\" \").map(a=>+a-1);\n  }\n  var z = Array(3).fill(0).map(a=>Array(c).fill(0));\n  for(i = 0; i < n; i++)\n  for(var j = 0; j < n; j++){\n    var t = (i + j) % 3;\n    z[t][a[i][j]]++;\n  }\n  var ans = 9e9;\n  for(i = 0; i < c; i++){\n    for(j = 0; j < c; j++){\n      if(i === j)continue;\n      for(var k = 0; k < c; k++){\n        if(i === k || j === k)continue;\n        t = 0;\n        for(var l = 0; l < c; l++){\n          t += z[0][l] * d[l][i];\n          t += z[1][l] * d[l][j];\n          t += z[2][l] * d[l][k];\n        }\n        ans = Math.min(ans, t);\n      }\n    }\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03373_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5e2a96) {\n    _0x5e2a96 = _0x5e2a96['split']('\\x0a')[0x0]['split']('\\x20')['map'](_0x531784 => Number(_0x531784));\n    const _0x316e = _0x5e2a96[0x0];\n    const _0x1d397c = _0x5e2a96[0x1];\n    const _0x164ea1 = _0x5e2a96[0x2];\n    const _0x59ae91 = _0x5e2a96[0x3];\n    const _0x4856db = _0x5e2a96[0x4];\n    const _0xf0dd87 = Math['min'](_0x59ae91, _0x4856db);\n    const _0x2fe3d6 = _0x316e * _0x59ae91 + _0x1d397c * _0x4856db;\n    const _0x569559 = 0x2 * _0x164ea1 * _0xf0dd87 + (_0x59ae91 - _0xf0dd87) * _0x316e + (_0x4856db - _0xf0dd87) * _0x1d397c;\n    const _0x1a4859 = 0x2 * _0x164ea1 * Math['max'](_0x59ae91, _0x4856db);\n    const _0x134d93 = Math['min'](...[\n        _0x2fe3d6,\n        _0x569559,\n        _0x1a4859\n    ]);\n    console['log'](_0x134d93);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1500 2000 1600 3 2", "7900"], ["1500 2000 1900 3 2", "8500"], ["1500 2000 500 90000 100000", "100000000"]], "original": "'use strict'\n\nfunction main(s) {\n  s = s.split('\\n')[0].split(' ').map(n => Number(n));\n\n  const A = s[0];\n  const B = s[1];\n  const C = s[2];\n  const X = s[3];\n  const Y = s[4];\n  const min = Math.min(X, Y);\n\n  // AとBをそれぞれ買う\n  const case1 = A * X + B * Y\n\n  // ABセットで可能な限り組み替えて、残りをそれぞれ買う\n  const case2 = (2 * C * min) + ((X - min) * A) + ((Y - min) * B)\n\n  // 全てABセットで組み替える\n  const case3 = 2 * C * Math.max(X, Y);\n\n  const answer = Math.min(...[case1, case2, case3]);\n  console.log(answer);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03436_1", "type": "JavaScript", "obfuscated": "'use strict';\nconsole['log'](function (_0x248c2d) {\n    const _0xc7ff1e = _0x248c2d['trim']()['split']('\\x0a');\n    const _0x1c1f41 = _0xc7ff1e[0x0]['split']('\\x20')['map'](_0x5f2486 => _0x5f2486 | 0x0);\n    const _0x2c808a = _0x1c1f41[0x0], _0x2259ca = _0x1c1f41[0x1];\n    const _0x5c999d = [Array(_0x2259ca + 0x2)['fill'](Infinity)];\n    let _0x1ea8c8 = 0x0;\n    for (let _0x591701 = 0x1; _0x591701 <= _0x2c808a; _0x591701++) {\n        _0x5c999d['push']([Infinity]);\n        for (let _0x22a4ec = 0x0; _0x22a4ec < _0x2259ca; _0x22a4ec++) {\n            if (_0xc7ff1e[_0x591701][_0x22a4ec] === '.') {\n                _0x1ea8c8++;\n                _0x5c999d[_0x591701]['push'](0x0);\n            } else\n                _0x5c999d[_0x591701]['push'](Infinity);\n        }\n        _0x5c999d[_0x591701]['push'](Infinity);\n    }\n    _0x5c999d['push'](Array(_0x2259ca + 0x2)['fill'](Infinity));\n    const _0x118f22 = [\n        [\n            -0x1,\n            0x0\n        ],\n        [\n            0x0,\n            -0x1\n        ],\n        [\n            0x1,\n            0x0\n        ],\n        [\n            0x0,\n            0x1\n        ]\n    ];\n    const _0x31322c = [[\n            0x1,\n            0x1,\n            0x2\n        ]];\n    do {\n        const _0xe70367 = _0x31322c['shift']();\n        for (const _0x209c5c of _0x118f22) {\n            const _0x28acc0 = _0xe70367[0x0] + _0x209c5c[0x0], _0x29e585 = _0xe70367[0x1] + _0x209c5c[0x1];\n            if (_0x28acc0 === _0x2259ca && _0x29e585 === _0x2c808a)\n                return _0x1ea8c8 - _0xe70367[0x2];\n            if (_0x5c999d[_0x29e585][_0x28acc0] === 0x0) {\n                _0x5c999d[_0x29e585][_0x28acc0] = _0xe70367[0x2] + 0x1;\n                _0x31322c['push']([\n                    _0x28acc0,\n                    _0x29e585,\n                    _0xe70367[0x2] + 0x1\n                ]);\n            }\n        }\n    } while (_0x31322c[0x0]);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3 3\n..#\n#..\n...", "2"], ["10 37\n.....................................\n...#...####...####..###...###...###..\n..#.#..#...#.##....#...#.#...#.#...#.\n..#.#..#...#.#.....#...#.#...#.#...#.\n.#...#.#..##.#.....#...#.#.###.#.###.\n.#####.####..#.....#...#..##....##...\n.#...#.#...#.#.....#...#.#...#.#...#.\n.#...#.#...#.##....#...#.#...#.#...#.\n.#...#.####...####..###...###...###..\n.....................................", "209"]], "original": "'use strict';\nconsole.log(function(args){\n  const tmp = args.trim().split('\\n');\n  const HW = tmp[0].split(' ').map(v=>v|0);\n  const H = HW[0], W = HW[1];\n  const map = [Array(W+2).fill(Infinity)]\n  let s = 0;\n  for ( let y = 1; y <= H; y++ ) {\n    map.push([Infinity]);\n    for ( let x = 0; x < W; x++ ) {\n      if ( tmp[y][x] === '.' ) {\n        s++; map[y].push( 0 );\n      } else map[y].push( Infinity );\n    }\n    map[y].push(Infinity);\n  }\n  map.push(Array(W+2).fill(Infinity));\n  const dir = [[-1,0],[0,-1],[1,0],[0,1]];\n  const queue = [[1,1,2]];\n  do {\n    const q = queue.shift();\n    for ( const d of dir ) {\n      const x = q[0] + d[0], y = q[1] + d[1];\n      if ( x === W && y === H ) return s - q[2];\n      if ( map[y][x] === 0 ) {\n        map[y][x] = q[2]+1;\n        queue.push([x,y,q[2]+1]);\n      }\n    }\n  } while ( queue[0] );\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p03503_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x58fa54) {\n    const _0x2057c0 = _0x58fa54['split']('\\x0a');\n    const _0x2e552e = parseInt(_0x2057c0['shift']());\n    const _0x2a30c1 = [];\n    for (let _0x50b5a8 = 0x0; _0x50b5a8 < _0x2e552e; _0x50b5a8++) {\n        _0x2a30c1['push'](_0x2057c0[_0x50b5a8]['split']('\\x20')['map'](_0x543365 => parseInt(_0x543365)));\n    }\n    const _0x13efb9 = [];\n    for (let _0x3e054f = 0x0; _0x3e054f < _0x2e552e; _0x3e054f++) {\n        _0x13efb9['push'](_0x2057c0[_0x3e054f + _0x2e552e]['split']('\\x20')['map'](_0x49b766 => parseInt(_0x49b766)));\n    }\n    let _0x5dd95f = -Infinity;\n    for (let _0x21e0de = 0x1; _0x21e0de < 0x400; _0x21e0de++) {\n        let _0x7e5799 = 0x0;\n        for (let _0x308cb1 = 0x0; _0x308cb1 < _0x2e552e; _0x308cb1++) {\n            let _0x3704d0 = _0x2a30c1[_0x308cb1];\n            let _0x4ec9f0 = (parseInt(_0x3704d0['join'](''), 0x2) & _0x21e0de)['toString'](0x2)['split']('')['map'](_0x165e92 => Number(_0x165e92))['reduce']((_0x1ac250, _0x52ece9) => _0x1ac250 + _0x52ece9, 0x0);\n            _0x7e5799 += _0x13efb9[_0x308cb1][_0x4ec9f0];\n        }\n        if (_0x7e5799 > _0x5dd95f) {\n            _0x5dd95f = _0x7e5799;\n        }\n    }\n    console['log'](_0x5dd95f);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1\n1 1 0 1 0 0 0 1 0 1\n3 4 5 6 7 8 9 -2 -3 4 -2", "8"], ["2\n1 1 1 1 1 0 0 0 0 0\n0 0 0 0 0 1 1 1 1 1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1\n0 -2 -2 -2 -2 -2 -1 -1 -1 -1 -1", "-2"], ["3\n1 1 1 1 1 1 0 0 1 1\n0 1 0 1 1 1 1 0 1 0\n1 0 1 1 0 1 0 1 0 1\n-8 6 -2 -8 -8 4 8 7 -6 2 2\n-9 2 0 1 7 -5 0 -2 -6 5 5\n6 -6 7 -9 6 -5 8 0 -9 -7 -7", "23"]], "original": "'use strict'\n\nfunction main(input){\n  const lines = input.split('\\n')\n  const N = parseInt( lines.shift() );\n  const F = [];\n  for(let i=0; i<N;i++){\n    F.push( lines[i].split(' ').map( x => parseInt(x) ) );\n  }\n\n  const P=[];\n  for(let i=0; i<N;i++){\n    P.push(lines[i+N].split(' ').map( x => parseInt(x)) );\n  }\n\n  let result = -Infinity;\n  for(let i=1; i<1024;i++){\n    let score = 0;\n    for(let j=0; j<N;j++){\n      let store = F[j];\n      let p_index = (parseInt(store.join(''), 2) & i).toString(2).split('').map(x=>Number(x)).reduce((a,b)=>a+b,0)\n      score += P[j][p_index];\n    }\n    if(score > result){result = score;}\n  }\n\n  console.log(result);\n}\n\n\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03651_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst getGcd = (_0x3d4bf5, _0x2a4a89) => {\n    return _0x3d4bf5 ? getGcd(_0x2a4a89 % _0x3d4bf5, _0x3d4bf5) : _0x2a4a89;\n};\nconst main = _0x46fe90 => {\n    _0x46fe90 = _0x46fe90['trim']()['split']('\\x0a');\n    const _0x8a39c3 = parseInt(_0x46fe90[0x0]['split']('\\x20')[0x0]);\n    const _0x3d053f = parseInt(_0x46fe90[0x0]['split']('\\x20')[0x1]);\n    let _0x1e5f1e = _0x46fe90[0x1]['split']('\\x20')['map'](_0x1f761a => parseInt(_0x1f761a))['sort']((_0x3a80da, _0x887b45) => _0x887b45 - _0x3a80da);\n    const _0x4b3a03 = _0x1e5f1e[0x0];\n    let _0x2d405c = Infinity;\n    if (_0x4b3a03 < _0x3d053f) {\n        console['log']('IMPOSSIBLE');\n        return;\n    }\n    for (let _0x208f7c = 0x0; _0x208f7c < _0x8a39c3; _0x208f7c++) {\n        for (let _0x4c6c0b = _0x208f7c + 0x1; _0x4c6c0b < _0x8a39c3; _0x4c6c0b++) {\n            _0x2d405c = Math['min'](_0x2d405c, getGcd(_0x1e5f1e[_0x208f7c], _0x1e5f1e[_0x4c6c0b]));\n        }\n    }\n    console['log'](_0x3d053f % _0x2d405c === 0x0 ? 'POSSIBLE' : 'IMPOSSIBLE');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 7\n9 3 4", "POSSIBLE"], ["3 5\n6 9 3", "IMPOSSIBLE"], ["4 11\n11 3 7 15", "POSSIBLE"], ["5 12\n10 2 8 6 4", "IMPOSSIBLE"]], "original": "\"use strict\";\n    \nconst getGcd = (a, b) => {\n    return a ? getGcd(b % a, a) : b;\n}\n\nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const N = parseInt(arg[0].split(\" \")[0]);\n    const K = parseInt(arg[0].split(\" \")[1]);\n    \n    let A = arg[1].split(\" \").map(n=>parseInt(n)).sort((a,b)=>b-a);\n    \n    const max = A[0];\n    let   gcd = Infinity;\n    \n    if(max < K) {\n        console.log(\"IMPOSSIBLE\");\n        return;\n    }\n    \n    for(let i=0; i<N; i++) {\n        for(let j=i+1; j<N; j++) {\n            gcd = Math.min(gcd, getGcd(A[i], A[j]));\n        }\n    }\n    \n    console.log(K % gcd === 0 ? \"POSSIBLE\" : \"IMPOSSIBLE\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03821_1", "type": "JavaScript", "obfuscated": "function Main(_0x294288) {\n    _0x294288 = _0x294288['split']('\\x0a');\n    var _0x2573ec = +_0x294288[0x0];\n    for (var _0x39ea6b = 0x0; _0x39ea6b < _0x2573ec; _0x39ea6b++) {\n        _0x294288[_0x39ea6b] = _0x294288[_0x39ea6b + 0x1]['split']('\\x20')['map'](_0x130086 => +_0x130086);\n    }\n    var _0x20f5a2 = 0x0;\n    for (_0x39ea6b = _0x2573ec - 0x1; _0x39ea6b >= 0x0; _0x39ea6b--) {\n        var _0x590fab = (_0x294288[_0x39ea6b][0x0] + _0x20f5a2) % _0x294288[_0x39ea6b][0x1];\n        if (_0x590fab)\n            _0x20f5a2 += _0x294288[_0x39ea6b][0x1] - _0x590fab;\n    }\n    console['log'](_0x20f5a2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n3 5\n2 7\n9 4", "7"], ["7\n3 1\n4 1\n5 9\n2 6\n5 3\n5 8\n9 7", "22"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  for(var i = 0; i < n; i++){\n    s[i] = s[i+1].split(\" \").map(a=>+a);\n  }\n  var ans = 0;\n  for(i = n-1; i >= 0; i--){\n    var x = (s[i][0] + ans) % s[i][1];\n    if(x)ans += s[i][1] - x;\n  }\n  console.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03838_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\nx = l[0x0] * 0x1;\ny = l[0x1] * 0x1;\ncnt = 0x0;\nif (x == y) {\n} else if (Math['abs'](x) == Math['abs'](y)) {\n    cnt++;\n} else if (x == 0x0 || y == 0x0) {\n    if (y < x) {\n        cnt++;\n    }\n    cnt += Math['abs'](Math['abs'](x) - Math['abs'](y));\n} else {\n    if (x > y) {\n        if (x > 0x0 && y > 0x0) {\n            cnt += 0x2;\n        } else if (x > 0x0 && y < 0x0) {\n            cnt += 0x1;\n        } else {\n            cnt += 0x2;\n        }\n    } else {\n        if (x < 0x0 && y > 0x0) {\n            cnt += 0x1;\n        }\n    }\n    cnt += Math['abs'](Math['abs'](x) - Math['abs'](y));\n}\nconsole['log'](cnt);", "test_cases": [["10 20", "10"], ["10 -10", "1"], ["-10 -20", "12"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').split('\\n')\nl = inp.shift().split(' ')\nx = l[0] * 1\ny = l[1] * 1 \ncnt = 0\nif (x == y) {\n    \n} else if (Math.abs(x) == Math.abs(y)) {\n    cnt++\n} else if (x == 0 || y == 0) {\n    if (y < x) {\n        cnt++\n    }\n    cnt += Math.abs(Math.abs(x) - Math.abs(y))\n} else {\n    if (x > y) {\n        if (x > 0 && y > 0) {\n            cnt += 2\n        } else if (x > 0 && y < 0) {\n            cnt += 1\n        } else {\n            cnt += 2\n        }\n    } else {\n        if (x < 0 && y > 0) {\n            cnt += 1\n        }\n    }\n    cnt += Math.abs(Math.abs(x) - Math.abs(y))\n}\nconsole.log(cnt)", "language": "JavaScript"}
{"filename": "p03890_1", "type": "JavaScript", "obfuscated": "function Main(_0x4e94ee) {\n    var _0x12abb8 = _0x4e94ee['split']('\\x0a');\n    var _0x453207 = _0x12abb8[0x0];\n    var _0x51bda4 = _0x12abb8['slice'](0x1);\n    for (var _0x1c408e = 0x0; _0x1c408e < _0x453207; ++_0x1c408e) {\n        var _0x5eb293 = [];\n        for (var _0x3050b7 = 0x0; _0x3050b7 < _0x51bda4['length']; _0x3050b7 += 0x2) {\n            if (_0x51bda4[_0x3050b7] > _0x51bda4[_0x3050b7 + 0x1]) {\n                _0x5eb293['push'](_0x51bda4[_0x3050b7] - _0x51bda4[_0x3050b7 + 0x1]);\n            } else if (_0x51bda4[_0x3050b7] == _0x51bda4[_0x3050b7 + 0x1]) {\n                _0x5eb293['push'](_0x51bda4[_0x3050b7]);\n            } else {\n                _0x5eb293['push'](_0x51bda4[_0x3050b7 + 0x1] - _0x51bda4[_0x3050b7]);\n            }\n        }\n        _0x51bda4 = _0x5eb293;\n    }\n    console['log'](_0x51bda4[0x0]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1\n3\n10\n19", "7"], ["3\n1\n3\n2\n4\n6\n8\n100\n104", "2"]], "original": "function Main(input) {\n\tvar data = input.split(\"\\n\")\n\tvar n = data[0]\n\tvar a = data.slice(1)\n\t\n\tfor (var i = 0; i < n; ++i) {\n\t\tvar b = []\n\t\tfor (var j = 0; j < a.length; j += 2) {\n\t\t\tif (a[j] > a[j + 1]) {\n\t\t\t\tb.push(a[j] - a[j + 1])\n\t\t\t} else if (a[j] == a[j + 1]) {\n\t\t\t\tb.push(a[j])\n\t\t\t} else {\n\t\t\t\tb.push(a[j + 1] - a[j])\n\t\t\t}\n\t\t}\n\t\ta = b\n\t}\n\t\n\tconsole.log(a[0])\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03909_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x4abbba => {\n    _0x4abbba = _0x4abbba['trim']()['split']('\\x0a');\n    const _0x28a8df = parseInt(_0x4abbba[0x0]['split']('\\x20')[0x0]);\n    const _0x53ca0a = parseInt(_0x4abbba[0x0]['split']('\\x20')[0x1]);\n    const _0x5a86aa = _0x4abbba['slice'](0x1, _0x28a8df + 0x1)['map'](_0x5b7711 => _0x5b7711['split']('\\x20'));\n    const _0x1fb466 = 'ABCDEFGHIJ'['split']('');\n    for (let _0x550bef = 0x0; _0x550bef < _0x28a8df; _0x550bef++) {\n        for (let _0x4a8403 = 0x0; _0x4a8403 < _0x53ca0a; _0x4a8403++) {\n            if (_0x5a86aa[_0x550bef][_0x4a8403] === 'snuke') {\n                console['log'](_0x1fb466[_0x4a8403] + (_0x550bef + 0x1));\n                return;\n            }\n        }\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["15 10\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snuke snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake\nsnake snake snake snake snake snake snake snake snake snake", "H6"], ["1 1\nsnuke", "A1"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const H = parseInt(arg[0].split(\" \")[0]);\n    const W = parseInt(arg[0].split(\" \")[1]);\n    \n    const words = arg.slice(1, H + 1).map(s=>s.split(\" \"));\n    const alpha = \"ABCDEFGHIJ\".split(\"\");\n    \n    for(let i=0; i<H; i++) {\n        for(let j=0; j<W; j++) {\n            if(words[i][j] === \"snuke\") {\n                console.log(alpha[j] + (i + 1));\n                return;\n            }\n        }\n    }\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03970_1", "type": "JavaScript", "obfuscated": "function Main(_0x3a75a0) {\n    _0x3a75a0 = _0x3a75a0['trim']();\n    var _0x1d2a2b = 0x0;\n    var _0x579310 = 'CODEFESTIVAL2016';\n    for (var _0x313cf2 = 0x0; _0x313cf2 < _0x3a75a0['length']; _0x313cf2++) {\n        var _0x2cad37 = _0x3a75a0['slice'](_0x313cf2, _0x313cf2 + 0x1);\n        var _0x55e81d = _0x579310['slice'](_0x313cf2, _0x313cf2 + 0x1);\n        if (_0x2cad37 != _0x55e81d) {\n            _0x1d2a2b++;\n        }\n    }\n    console['log'](_0x1d2a2b);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["C0DEFESTIVAL2O16", "2"], ["FESTIVAL2016CODE", "16"]], "original": "function Main(input) {\n\tinput = input.trim();\n  var output = 0;\n  var seijou = \"CODEFESTIVAL2016\";\n  for(var i = 0; i < input.length; i++){\n    var tmp1 = input.slice(i,i+1);\n    var tmp2 = seijou.slice(i,i+1);\n    if(tmp1 != tmp2){\n       output++;\n       }\n  }\n  \n  console.log(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03971_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst Main = _0x18e54e => {\n    const _0x3defb8 = _0x18e54e['trim']()['split']('\\x0a');\n    const _0x5de8a6 = parseInt(_0x3defb8[0x0]['split']('\\x20')[0x0]);\n    const _0x51f6ba = parseInt(_0x3defb8[0x0]['split']('\\x20')[0x1]);\n    const _0x7c1dd0 = parseInt(_0x3defb8[0x0]['split']('\\x20')[0x2]);\n    const _0x5c1a4d = _0x3defb8[0x1];\n    let _0x26acb9 = [];\n    let _0x2f282c = 0x0;\n    let _0x178408 = 0x0;\n    for (let _0x36034a = 0x0; _0x36034a < _0x5de8a6; _0x36034a++) {\n        const _0x34c467 = _0x5c1a4d['split']('')[_0x36034a];\n        if (_0x34c467 === 'a') {\n            if (_0x2f282c < _0x51f6ba + _0x7c1dd0) {\n                _0x26acb9['push']('Yes');\n                _0x2f282c += 0x1;\n            } else {\n                _0x26acb9['push']('No');\n            }\n        } else if (_0x34c467 === 'b') {\n            if (_0x2f282c < _0x51f6ba + _0x7c1dd0 && _0x178408 < _0x7c1dd0) {\n                _0x26acb9['push']('Yes');\n                _0x2f282c += 0x1;\n                _0x178408 += 0x1;\n            } else {\n                _0x26acb9['push']('No');\n            }\n        } else {\n            _0x26acb9['push']('No');\n        }\n    }\n    _0x26acb9 = _0x26acb9['join']('\\x0a');\n    console['log'](_0x26acb9);\n    return _0x26acb9;\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 2 3\nabccabaabb", "Yes\nYes\nNo\nNo\nYes\nYes\nYes\nNo\nNo\nNo"], ["12 5 2\ncabbabaacaba", "No\nYes\nYes\nYes\nYes\nNo\nYes\nYes\nNo\nYes\nNo\nNo"], ["5 2 2\nccccc", "No\nNo\nNo\nNo\nNo"]], "original": "'use strict'\n\nconst Main = (input) => {\n  const tmp = input.trim().split('\\n')\n  const N = parseInt(tmp[0].split(' ')[0])\n  const A = parseInt(tmp[0].split(' ')[1])\n  const B = parseInt(tmp[0].split(' ')[2])\n  const S = tmp[1]\n  //a 国内\n  //b 海外\n  //c どちらでもない\n\n  let result = []\n  let count = 0\n  let overseas = 0\n\n  for (let i = 0; i < N; i++) {\n    const participant = S.split('')[i]\n    if (participant === 'a') {\n      if (count < (A + B)) {\n        result.push('Yes')\n        count += 1\n      } else {\n        result.push('No')\n      }\n    } else if (participant === 'b') {\n      if (count < (A + B) && overseas < B) {\n        result.push('Yes')\n        count += 1\n        overseas += 1\n      } else {\n        result.push('No')\n      }\n    } else {\n      result.push('No')\n    }\n  }\n  result = result.join('\\n')\n\n  console.log(result)\n  return result\n}\n\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p00032_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split']('\\x0a');\nvar line;\nvar rectangles = 0x0;\nvar lozenges = 0x0;\nwhile (line = lines['shift']()) {\n    var l = line['split'](',')['map'](function (_0x85cbc4) {\n        return +_0x85cbc4;\n    });\n    var a = l[0x0];\n    var b = l[0x1];\n    var c = l[0x2];\n    if (a * a + b * b == c * c)\n        rectangles++;\n    else if (a == b)\n        lozenges++;\n}\nconsole['log'](rectangles);\nconsole['log'](lozenges);", "test_cases": [["3,4,5\n5,5,8\n4,4,4\n5,4,3", "1\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n\nvar line;\nvar rectangles = 0;\nvar lozenges = 0;\nwhile (line = lines.shift()) {\n\tvar l = line.split(',').map(function(n){return +n;});\n\tvar a = l[0];\n\tvar b = l[1];\n\tvar c = l[2];\n\n\tif (a * a + b * b == c * c)\n\t\trectangles++;\n\telse if (a == b)\n\t\tlozenges++;\n}\nconsole.log(rectangles);\nconsole.log(lozenges);", "language": "JavaScript"}
{"filename": "p00045_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar sum = 0x0;\nvar cnt = 0x0;\nArr['forEach'](function (_0x4f92f1) {\n    var _0x547dbe = _0x4f92f1['split'](',')['map'](Number);\n    sum += _0x547dbe[0x0] * _0x547dbe[0x1];\n    cnt += _0x547dbe[0x1];\n});\nconsole['log'](sum);\nconsole['log'](Math['round'](cnt / Arr['length']));", "test_cases": [["100,20\n50,10\n70,35", "4950\n22"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar sum=0;\nvar cnt=0;\n\nArr.forEach(function(v){\nvar arr=v.split(\",\").map(Number);\nsum+=arr[0]*arr[1];\ncnt+=arr[1];\n});\n\nconsole.log(sum);\nconsole.log(Math.round(cnt/Arr.length));", "language": "JavaScript"}
{"filename": "p00049_1", "type": "JavaScript", "obfuscated": "for (w = x = y = z = 0x0, i = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\s|,/), c = j = -0x1; c = i[j += 0x2]; n = '\\x0a')\n    c == 'A' ? w++ : c == 'B' ? x++ : c == 'O' ? z++ : y++;\nconsole['log'](w + n + x + n + y + n + z);", "test_cases": [["1,B\n2,A\n3,B\n4,AB\n5,B\n6,O\n7,A\n8,O\n9,AB\n10,A\n11,A\n12,B\n13,AB\n14,A", "5\n4\n3\n2"]], "original": "for(w=x=y=z=0,i=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split(/\\s|,/),c=j=-1;c=i[j+=2];n='\\n')c=='A'?w++:c=='B'?x++:c=='O'?z++:y++;console.log(w+n+x+n+y+n+z)", "language": "JavaScript"}
{"filename": "p00052_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a')['map'](function (_0x5d554b) {\n    j = +_0x5d554b, s = 0x0;\n    if (j) {\n        while (j = ~~(j / 0x5))\n            s += j;\n        console['log'](s);\n    }\n});", "test_cases": [["2\n12\n10000\n0", "0\n2\n2499"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').map(function(i){j=+i,s=0;if(j){while(j=~~(j/5))s+=j;console.log(s)}})", "language": "JavaScript"}
{"filename": "p00105_1", "type": "JavaScript", "obfuscated": "var d = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nvar info = line = '';\nvar map = [];\nwhile (line = d['shift']()) {\n    info = line['split']('\\x20');\n    map['push']([\n        info[0x0],\n        +info[0x1]\n    ]);\n}\nmap['sort'](function (_0x56ae88, _0x28b50f) {\n    if (_0x56ae88[0x0] < _0x28b50f[0x0])\n        return -0x1;\n    if (_0x56ae88[0x0] > _0x28b50f[0x0])\n        return 0x1;\n    if (_0x56ae88[0x1] < _0x28b50f[0x1])\n        return -0x1;\n    if (_0x56ae88[0x1] > _0x28b50f[0x1])\n        return 0x1;\n    return 0x0;\n});\nvar word = '';\nvar pages = [];\nmap['forEach'](function (_0xf94afe, _0x24b2c4) {\n    if (word !== _0xf94afe[0x0]) {\n        if (_0x24b2c4 !== 0x0) {\n            console['log'](pages['join']('\\x20'));\n            pages = [];\n        }\n        console['log'](_0xf94afe[0x0]);\n    }\n    pages['push'](_0xf94afe[0x1]);\n    word = _0xf94afe[0x0];\n});\nconsole['log'](pages['join']('\\x20'));", "test_cases": [["style 12\neven 25\nintroduction 3\neasy 9\nstyle 7\ndocument 13\nstyle 21\neven 18", "document\n13\neasy\n9\neven\n18 25\nintroduction\n3\nstyle\n7 12 21"]], "original": "var d = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n');\nvar info = line = '';\nvar map = [];\n\nwhile (line = d.shift()) {\n  info = line.split(' ');\n  map.push([info[0], +info[1]]);\n}\nmap.sort(function(a, b) {\n  if (a[0] < b[0]) return -1;\n  if (a[0] > b[0]) return 1;\n  if (a[1] < b[1]) return -1;\n  if (a[1] > b[1]) return 1;\n  return 0;\n});\n\nvar word = '';\nvar pages = [];\nmap.forEach(function(info, i) {\n  if (word !== info[0]) {\n    if (i !== 0) {\n      console.log(pages.join(' '));\n      pages = [];\n    }\n    console.log(info[0]);\n  }\n  pages.push(info[1]);\n  word = info[0];\n});\nconsole.log(pages.join(' '));", "language": "JavaScript"}
{"filename": "p00179_1", "type": "JavaScript", "obfuscated": "function BFS(_0x445209) {\n    var _0x8b29bd = {};\n    var _0x51deb2 = [[\n            _0x445209,\n            0x0\n        ]];\n    _0x8b29bd[_0x445209] = !![];\n    while (!![]) {\n        if (_0x51deb2['length'] == 0x0) {\n            ans = 'NA';\n            break;\n        }\n        var _0x388c59 = _0x51deb2['shift']();\n        var _0x5f52ad = _0x388c59[0x0];\n        var _0x1b1e73 = _0x388c59[0x1];\n        if (/^0+$|^1+$|^2+$/['test'](_0x5f52ad)) {\n            ans = _0x1b1e73;\n            break;\n        }\n        for (var _0xdab4bb = 0x0; _0xdab4bb < _0x5f52ad['length'] - 0x1; _0xdab4bb++) {\n            if (_0x5f52ad[_0xdab4bb] == _0x5f52ad[_0xdab4bb + 0x1])\n                continue;\n            var _0x105fd5 = _0x5f52ad['split']('');\n            var _0x4c3ed0 = 0x3 - +_0x105fd5[_0xdab4bb] - +_0x105fd5[_0xdab4bb + 0x1];\n            _0x105fd5[_0xdab4bb] = _0x4c3ed0;\n            _0x105fd5[_0xdab4bb + 0x1] = _0x4c3ed0;\n            var _0x466054 = _0x105fd5['join']('');\n            if (_0x8b29bd['hasOwnProperty'](_0x466054) == ![]) {\n                _0x51deb2['push']([\n                    _0x466054,\n                    _0x1b1e73 + 0x1\n                ]);\n                _0x8b29bd[_0x466054] = !![];\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var rgb = Arr['shift']();\n    if (rgb == '0')\n        break;\n    rgb = rgb['replace'](/r/g, '0')['replace'](/g/g, '1')['replace'](/b/g, '2');\n    var ans;\n    BFS(rgb);\n    console['log'](ans);\n}", "test_cases": [["rbgrg\nrbbgbbr\nbgr\nbgrbrgbr\nbggrgbgrr\ngbrggrbggr\nrrrrr\nbgbr\n0", "5\n7\n1\n6\nNA\n8\n0\n4"]], "original": "function BFS(x){\n   var obj={};\n   var bfs=[[x,0]];\n   obj[x]=true;\n   while(true){\n      if(bfs.length==0){ans=\"NA\";break;}\n      var leaf=bfs.shift();\n      var str=leaf[0];\n      var cnt=leaf[1];\n      if(/^0+$|^1+$|^2+$/.test(str)){ans=cnt;break;}\n      for(var i=0;i<str.length-1;i++){\n         if(str[i]==str[i+1])continue;\n         var arr=str.split(\"\");\n         var color=3-(+arr[i])-(+arr[i+1]);\n         arr[i]=color;\n         arr[i+1]=color;\n         var Str=arr.join(\"\");\n         if(obj.hasOwnProperty(Str)==false){\n            bfs.push([Str,cnt+1]);\n            obj[Str]=true;\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var rgb=Arr.shift();\n   if(rgb==\"0\")break;\n   rgb=rgb.replace(/r/g,\"0\").replace(/g/g,\"1\").replace(/b/g,\"2\")\n   var ans;\n   BFS(rgb);\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00205_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x581f6a, _0x56e6d3, _0x537e8b, _0x43ab96 = 0x0, _0x572b99;\n    for (;;) {\n        if (input[_0x43ab96] == 0x0)\n            break;\n        _0x581f6a = [];\n        for (_0x572b99 = 0x0; _0x572b99 < 0x5; _0x572b99++) {\n            _0x581f6a['push'](Number(input[_0x43ab96++]));\n        }\n        _0x56e6d3 = _0x581f6a['reduce'](function (_0x42ed07, _0x4faa6c) {\n            return _0x42ed07[_0x4faa6c] = !![], _0x42ed07;\n        }, {});\n        keys = Object['keys'](_0x56e6d3)['map'](Number)['sort'](function (_0x40099d, _0x531b2f) {\n            return _0x40099d - _0x531b2f;\n        });\n        if (keys['length'] === 0x2) {\n            if (keys[0x1] - keys[0x0] == 0x2) {\n                _0x537e8b = keys[0x0];\n                keys[0x0] = keys[0x1];\n                keys[0x1] = _0x537e8b;\n            }\n            _0x581f6a['forEach'](function (_0x34b9df) {\n                console['log'](keys['indexOf'](_0x34b9df) + 0x1);\n            });\n        } else {\n            _0x581f6a['forEach'](function () {\n                console['log'](0x3);\n            });\n        }\n    }\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x4d8752) {\n    input += _0x4d8752;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["1\n2\n3\n2\n1\n1\n2\n2\n2\n1\n0", "3\n3\n3\n3\n3\n1\n2\n2\n2\n1"]], "original": "function main() {\n  var\n  hands, pattern,\n  swap,\n  i = 0, j;\n  for (;;) {\n    if (input[i] == 0) break;\n    \n    \n    hands = [];\n    for (j = 0; j < 5; j++) {\n      hands.push(Number(input[i++]));\n    }\n    \n    pattern = hands.reduce(function (pat, h) {\n      return (pat[h] = true, pat);\n    }, {});\n    \n    keys = Object.keys(pattern).map(Number).sort(function (x, y) { return x - y; });\n    \n    if (keys.length === 2) {\n      if (keys[1] - keys[0] == 2) {\n        swap = keys[0];\n        keys[0] = keys[1];\n        keys[1] = swap;\n      }\n      hands.forEach(function (h) {\n        console.log(keys.indexOf(h) + 1);\n      });\n    } else {\n      hands.forEach(function () {\n        console.log(3);\n      });\n    }\n  }\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00277_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar nrl = arr['shift']()['split']('\\x20')['map'](Number);\nvar n = nrl[0x0];\nvar L = nrl[0x2];\nvar t = [];\nvar max = [\n    0x0,\n    0x0\n];\nvar time = 0x0;\nfor (var i = 0x0; i < n; i++)\n    t[i] = [\n        0x0,\n        0x0,\n        i\n    ];\narr['push']([\n    0x1,\n    L,\n    0x0\n]['join']('\\x20'));\narr['forEach'](function (_0x39f47c) {\n    _0x39f47c = _0x39f47c['split']('\\x20')['map'](Number);\n    var _0x281118 = _0x39f47c[0x0] - 0x1;\n    var _0x2c47cf = _0x39f47c[0x1];\n    var _0x5b2ceb = _0x39f47c[0x2];\n    t[max[0x0]][0x1] += _0x2c47cf - time;\n    time = _0x2c47cf;\n    t[_0x281118][0x0] += _0x5b2ceb;\n    if (_0x5b2ceb > 0x0) {\n        if (t[_0x281118][0x0] > max[0x1])\n            max = [\n                _0x281118,\n                t[_0x281118][0x0]\n            ];\n        else if (t[_0x281118][0x0] == max[0x1] && _0x281118 <= max[0x0])\n            max = [\n                _0x281118,\n                t[_0x281118][0x0]\n            ];\n    }\n    if (_0x5b2ceb < 0x0) {\n        var _0x1ea1f2 = 0x0;\n        var _0x543d12 = 0x0;\n        t['forEach'](function (_0x4946d9, _0x3d8d8a) {\n            if (_0x1ea1f2 < _0x4946d9[0x0])\n                _0x543d12 = _0x3d8d8a;\n        });\n        max = [\n            _0x543d12,\n            t[_0x543d12][0x0]\n        ];\n    }\n});\nt['sort'](function (_0x3e07d9, _0x184920) {\n    if (_0x3e07d9[0x1] == _0x184920[0x1])\n        return _0x3e07d9[0x2] - _0x184920[0x2];\n    else\n        return _0x184920[0x1] - _0x3e07d9[0x1];\n});\nconsole['log'](t[0x0][0x2] + 0x1);", "test_cases": [["3 4 600\n3 100 5\n1 200 10\n2 400 20\n3 500 20", "1"], ["3 5 600\n3 100 5\n1 200 10\n2 300 30\n1 400 -8\n2 400 -27", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\n\nvar arr=input.trim().split(\"\\n\");\nvar nrl=arr.shift().split(\" \").map(Number);\nvar n=nrl[0];\nvar L=nrl[2];\nvar t=[];\nvar max=[0,0];\nvar time=0;\nfor(var i=0;i<n;i++)t[i]=[0,0,i];\narr.push([1,L,0].join(\" \"));\narr.forEach(function(v){\nv=v.split(\" \").map(Number);\nvar d=v[0]-1;\nvar T=v[1];\nvar x=v[2];\n\nt[max[0]][1]+=T-time;\ntime=T;\nt[d][0]+=x;\n\nif(x>0){\nif(t[d][0]>max[1])max=[d,t[d][0]];\nelse if(t[d][0]==max[1] && d<=max[0])max=[d,t[d][0]];\n}\n\nif(x<0){\nvar MAX=0;\nvar m=0;\nt.forEach(function(V,index){\nif(MAX<V[0])m=index;\n});\n\nmax=[m,t[m][0]];\n\n\n}\n\n\n});\n\n\n\nt.sort(function(a,b){\nif(a[1]==b[1])return a[2]-b[2];\nelse return b[1]-a[1];});\n\n\nconsole.log(t[0][2]+1);", "language": "JavaScript"}
{"filename": "p00670_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nS = Arr['shift']()['split']('\\x20')['map'](Number);\n    var n = nS[0x0];\n    var S = nS[0x1];\n    if (n == 0x0 && S == 0x0)\n        break;\n    var arr = [];\n    for (var i = 0x0; i <= 0x64; i++)\n        arr[i] = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var v = Arr['shift']() - 0x0;\n        arr[v]++;\n    }\n    var cnt = 0x0;\n    for (var i = 0x0; i <= 0x64; i++) {\n        for (var j = i + 0x1; j <= 0x64; j++) {\n            if (i + j > S)\n                cnt += Math['min'](arr[i], arr[j]);\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["3 7\n1\n3\n10\n0 0", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nS=Arr.shift().split(\" \").map(Number);\n   var n=nS[0];\n   var S=nS[1];\n   if(n==0 && S==0)break;\n   var arr=[];\n   for(var i=0;i<=100;i++)arr[i]=0;\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr[v]++;\n   }\n   var cnt=0;\n   for(var i=0;i<=100;i++){\n      for(var j=i+1;j<=100;j++){\n         if(i+j>S)cnt+=Math.min(arr[i],arr[j]);\n      } \n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00734_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = Arr['shift']();\n    if (nm == '0\\x200')\n        break;\n    nm = nm['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    var N = [];\n    var M = [];\n    for (var i = 0x0; i < n; i++)\n        N['push'](Arr['shift']() - 0x0);\n    for (var i = 0x0; i < m; i++)\n        M['push'](Arr['shift']() - 0x0);\n    var sumN = N['reduce'](function (_0xdf146e, _0x4a3e5b) {\n        return _0xdf146e + _0x4a3e5b;\n    });\n    var sumM = M['reduce'](function (_0x5bfdc6, _0x35cb0d) {\n        return _0x5bfdc6 + _0x35cb0d;\n    });\n    var arr = [];\n    for (var i = 0x0; i < n; i++) {\n        for (var j = 0x0; j < m; j++) {\n            var a = sumN - N[i] + M[j];\n            var b = sumM + N[i] - M[j];\n            if (a == b)\n                arr['push']([\n                    N[i] + M[j],\n                    N[i],\n                    M[j]\n                ]);\n        }\n    }\n    if (arr['length'] == 0x0) {\n        console['log'](-0x1);\n        continue;\n    }\n    arr['sort'](function (_0x3a160f, _0x42f8a0) {\n        return _0x3a160f[0x0] - _0x42f8a0[0x0];\n    });\n    console['log'](arr[0x0][0x1] + '\\x20' + arr[0x0][0x2]);\n}", "test_cases": [["2 2\n1\n5\n3\n7\n6 5\n3\n9\n5\n2\n3\n3\n12\n2\n7\n3\n5\n4 5\n10\n0\n3\n8\n1\n9\n6\n0\n6\n7 4\n1\n1\n2\n1\n2\n1\n4\n2\n3\n4\n3\n2 3\n1\n1\n2\n2\n2\n0 0", "1 3\n3 5\n-1\n2 2\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=Arr.shift();\n   if(nm==\"0 0\")break;\n   nm=nm.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var N=[];\n   var M=[];\n   for(var i=0;i<n;i++)N.push(Arr.shift()-0);\n   for(var i=0;i<m;i++)M.push(Arr.shift()-0);\n   var sumN=N.reduce(function(a,b){return a+b;});\n   var sumM=M.reduce(function(a,b){return a+b;});\n   var arr=[];\n   for(var i=0;i<n;i++){\n      for(var j=0;j<m;j++){\n         var a=sumN-N[i]+M[j];\n         var b=sumM+N[i]-M[j];\n         if(a==b)arr.push([N[i]+M[j],N[i],M[j]]);\n      }\n   }\n   if(arr.length==0){console.log(-1);continue;}\n   arr.sort(function(a,b){return a[0]-b[0];});\n   console.log(arr[0][1]+\" \"+arr[0][2]);\n}", "language": "JavaScript"}
{"filename": "p01125_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var a = Arr['shift']();\n    if (a == '0')\n        break;\n    var xy = [];\n    for (var i = 0x0; i < a; i++)\n        xy['push'](Arr['shift']());\n    var b = Arr['shift']();\n    var news = [];\n    for (var i = 0x0; i < b; i++)\n        news['push'](Arr['shift']());\n    var X = 0xa;\n    var Y = 0xa;\n    var XY = [];\n    news['forEach'](function (_0x1a850b) {\n        var _0x3369d7 = _0x1a850b['split']('\\x20');\n        for (var _0x1e61ee = 0x0; _0x1e61ee < _0x3369d7[0x1] - 0x0; _0x1e61ee++) {\n            if (_0x3369d7[0x0] == 'N')\n                Y++;\n            if (_0x3369d7[0x0] == 'E')\n                X++;\n            if (_0x3369d7[0x0] == 'W')\n                X--;\n            if (_0x3369d7[0x0] == 'S')\n                Y--;\n            XY['push'](X + '\\x20' + Y);\n        }\n    });\n    var flag = xy['every'](function (_0x8cece9) {\n        return XY['indexOf'](_0x8cece9) != -0x1;\n    });\n    console['log'](flag ? 'Yes' : 'No');\n}", "test_cases": [["2\n10 11\n11 12\n2\nN 2\nE 1\n2\n10 11\n11 12\n2\nN 2\nW 1\n3\n0 15\n5 10\n5 15\n5\nW 10\nS 10\nN 20\nE 10\nS 10\n0", "Yes\nNo\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var a=Arr.shift();\n   if(a==\"0\")break;\n   var xy=[];\n   for(var i=0;i<a;i++)xy.push(Arr.shift());\n   var b=Arr.shift();\n   var news=[];\n   for(var i=0;i<b;i++)news.push(Arr.shift());\n   var X=10;\n   var Y=10;\n   var XY=[];\n   news.forEach(function(v){\n      var arr=v.split(\" \");\n      for(var i=0;i<(arr[1]-0);i++){\n         if(arr[0]==\"N\")Y++;\n         if(arr[0]==\"E\")X++;\n         if(arr[0]==\"W\")X--;\n         if(arr[0]==\"S\")Y--;\n         XY.push(X+\" \"+Y);\n      }\n   });\n   var flag=xy.every(function(v){return (XY.indexOf(v)!=-1);});\n   console.log(flag?\"Yes\":\"No\");\n}", "language": "JavaScript"}
{"filename": "p01701_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x57197f) {\n    var _0xed4c2e, _0x36f56f = _0x57197f['split']('\\x0a'), _0x304669, _0x433811 = _0x36f56f['length'], _0x1553af, _0x14f8ee, _0x1ab776, _0x596c53, _0x5ab887;\n    for (_0x304669 = 0x0; _0x304669 < _0x433811; _0x304669++) {\n        _0xed4c2e = _0x36f56f[_0x304669];\n        if (_0xed4c2e == '#') {\n            break;\n        }\n        _0xed4c2e = _0xed4c2e['replace'](/north/g, 0x0);\n        _0xed4c2e = _0xed4c2e['replace'](/west/g, 0x1);\n        _0x1ab776 = 0x0;\n        _0x14f8ee = _0xed4c2e['length'];\n        _0x596c53 = _0xed4c2e['length'] - 0x1;\n        _0x5ab887 = 0x5a * Math['pow'](0x2, _0x596c53);\n        for (_0x1553af = _0x14f8ee; _0x1553af >= 0x0; _0x1553af--) {\n            if (_0xed4c2e[_0x1553af] * 0x1) {\n                if (_0x1ab776 < _0x5ab887) {\n                    _0x1ab776 += 0x5a * Math['pow'](0x2, _0x1553af);\n                }\n            } else {\n                if (_0x1ab776 > 0x0) {\n                    _0x1ab776 -= 0x5a * Math['pow'](0x2, _0x1553af);\n                }\n            }\n        }\n        while (_0x596c53 > 0x0 && _0x1ab776 % 0x2 === 0x0) {\n            _0x1ab776 = _0x1ab776 / 0x2;\n            _0x596c53--;\n        }\n        if (_0x596c53 > 0x0) {\n            console['log'](_0x1ab776 + '/' + Math['pow'](0x2, _0x596c53));\n        } else {\n            console['log'](_0x1ab776);\n        }\n    }\n});", "test_cases": [["north\nwest\nnorthwest\nnorthnorthwest\nwestwestwestnorth\n#", "0\n90\n45\n45/2\n315/4"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  var line, lines = chunk.split(\"\\n\"),\n      i, len = lines.length, j, jLen,\n      deg, pow, max;\n\n  for (i=0; i<len; i++) {\n    line = lines[i];\n    if (line == \"#\") {\n      break;\n    }\n\n    line = line.replace(/north/g, 0);\n    line = line.replace(/west/g, 1);\n\n    deg = 0;\n\n    jLen = line.length;\n    pow = line.length - 1;\n    max = 90 * Math.pow(2, pow);\n    for (j=jLen; j>=0; j--) {\n      if (line[j]*1) {\n        if (deg < max) {\n          deg += 90 * Math.pow(2, j);\n        }   \n      } else {\n        if (deg > 0) {\n          deg -= 90 * Math.pow(2, j);\n        }\n      }\n    }\n\n    while(pow > 0 && deg % 2 === 0) {\n      deg = deg / 2;\n      pow--;\n    }\n    \n    if (pow > 0) {\n      console.log(deg + \"/\" + Math.pow(2, pow));\n    } else {\n      console.log(deg);\n    }\n  }\n});", "language": "JavaScript"}
{"filename": "p02537_1", "type": "JavaScript", "obfuscated": "const main = _0x337620 => {\n    const [_0x428266, _0x4a6865] = _0x337620['split']('\\x0a')[0x0]['split']('\\x20')['map'](Number);\n    _0x337620 = _0x337620['split']('\\x0a')['slice'](0x1);\n    const _0x590623 = _0x337620['map'](Number);\n    let _0x5c3128 = [];\n    _0x5c3128['push'](_0x590623[0x0]);\n    for (let _0x27bb94 = 0x1; _0x27bb94 < _0x428266; _0x27bb94++) {\n        if (Math['abs'](_0x590623[_0x27bb94] - _0x5c3128[_0x5c3128['length'] - 0x1]) <= _0x4a6865) {\n            _0x5c3128['push'](_0x590623[_0x27bb94]);\n        }\n    }\n    console['log'](_0x5c3128['length']);\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 3\n1\n5\n4\n3\n8\n6\n9\n7\n2\n4", "7"]], "original": "const main = (arg) => {\n    const [N,K] = arg.split(\"\\n\")[0].split(\" \").map(Number)\n    arg = arg.split(\"\\n\").slice(1)\n    const a = arg.map(Number)\n    \n    let b = []\n    b.push(a[0])\n    for(let i=1; i<N; i++) {\n        if(Math.abs(a[i]-b[b.length-1]) <= K) {\n            // last = a[i]\n            b.push(a[i])\n        }\n    }\n    console.log(b.length)\n\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02550_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['split']('\\x0a');\nconst [N, X, M] = lines[0x0]['split']('\\x20')['map'](Number);\nlet a = X;\nconst map = {};\nconst loop = [];\nconst pre = [a];\nfor (let i = 0x1; i < N; i++) {\n    a = a * a % M;\n    if (map[a] === 0x2) {\n        break;\n    } else if (map[a]) {\n        loop['push'](a);\n        pre['pop']();\n    } else {\n        pre['push'](a);\n    }\n    map[a] = (map[a] || 0x0) + 0x1;\n}\nconst suf = [];\nfor (let i = 0x0; i < (N - pre['length']) % (loop['length'] || 0x1); i++) {\n    suf['push'](loop[i]);\n}\nconst sum = loop['reduce']((_0x20405b, _0x269509) => _0x20405b + _0x269509, 0x0);\nconst lt = loop['length'] ? Math['floor']((N - pre['length']) / loop['length']) : 0x0;\nconsole['log'](pre['reduce']((_0x23c23e, _0x5927c1) => _0x23c23e + _0x5927c1, 0x0) + sum * lt + suf['reduce']((_0x5efefa, _0x219c64) => _0x5efefa + _0x219c64, 0x0));", "test_cases": [["6 2 1001", "1369"], ["1000 2 16", "6"], ["10000000000 10 99959", "492443256176507"]], "original": "const input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")\nconst lines = input.split('\\n')\nconst [N, X, M] = lines[0].split(' ').map(Number)\n\nlet a = X\nconst map = {}\nconst loop = []\nconst pre = [a]\nfor (let i = 1; i < N; i++) {\n    a = a * a % M\n    if (map[a] === 2){\n        break\n    } else if (map[a]) {\n        loop.push(a)\n        pre.pop()\n    } else {\n        pre.push(a)\n    }\n    map[a] = (map[a] || 0) + 1\n}\n\nconst suf = []\nfor (let i = 0; i < (N - pre.length) % (loop.length || 1); i++) {\n    suf.push(loop[i])\n}\n\nconst sum = loop.reduce((a, b) => a + b, 0)\nconst lt = loop.length ? Math.floor(((N - pre.length) / loop.length)) : 0\n\nconsole.log(\n    pre.reduce((a, b) => a + b, 0) +\n    sum * lt +\n    suf.reduce((a, b) => a + b, 0)\n)\n", "language": "JavaScript"}
{"filename": "p02619_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x551559) {\n    const _0x52b023 = _0x551559['trim']()['split']('\\x0a');\n    const _0x49f9dc = Number(_0x52b023[0x0]);\n    const _0x497bc6 = _0x52b023[0x1]['split']('\\x20')['map'](_0x34c781 => Number(_0x34c781));\n    const _0x304d23 = _0x52b023['slice'](0x2, 0x7)['map'](_0x573676 => _0x573676['split']('\\x20')['map'](_0x30feeb => Number(_0x30feeb)));\n    const _0x397bdc = _0x52b023['slice'](-0x5)['map'](_0x4e21d2 => Number(_0x4e21d2));\n    let _0x1b8e4f = Array(0x1a)['fill'](0x0);\n    let _0x402bed = Array(0x1a)['fill'](0x0);\n    let _0x2b60e2 = 0x0;\n    for (let _0xe07489 = 0x1; _0xe07489 <= _0x49f9dc; _0xe07489++) {\n        _0x1b8e4f[_0x397bdc[_0xe07489 - 0x1] - 0x1] = _0xe07489;\n        for (let _0x35b5bf = 0x0; _0x35b5bf < _0x497bc6['length']; _0x35b5bf++) {\n            if (_0x1b8e4f[_0x35b5bf] === _0xe07489) {\n                _0x402bed[_0x35b5bf] = _0x304d23[_0xe07489 - 0x1][_0x35b5bf];\n            } else {\n                _0x402bed[_0x35b5bf] = _0x497bc6[_0x35b5bf] * (_0xe07489 - _0x1b8e4f[_0x35b5bf]) * -0x1;\n            }\n        }\n        _0x2b60e2 += _0x402bed['reduce']((_0x3d427c, _0x935024) => _0x3d427c + _0x935024);\n        console['log'](String(_0x2b60e2));\n    }\n    return;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192\n1\n17\n13\n14\n13", "18398\n35037\n51140\n65837\n79325"]], "original": "'use strict';\n\nfunction Main(input) {\n    const tmp = input.trim().split('\\n');\n    const D = Number(tmp[0]);\n    const C = tmp[1].split(' ').map((v) => Number(v));\n    const S = tmp.slice(2, 7).map((v) => v.split(' ').map((v) => Number(v)));\n    const T = tmp.slice(-5).map((v) => Number(v));\n\n    let LastContestDays = Array(26).fill(0); // コンテストの種類ごとの最終開催日\n    let currnetContestLebels = Array(26).fill(0); // ある開催日のコンテストごとの満足度\n    let lebel = 0; // 満足度の累計\n\n    for (let i = 1; i <= D; i++) {\n        LastContestDays[T[i - 1] - 1] = i;\n        for (let j = 0; j < C.length; j++) {\n            if (LastContestDays[j] === i) {\n                currnetContestLebels[j] = S[i - 1][j];\n            } else {\n                currnetContestLebels[j] = C[j] * (i - LastContestDays[j]) * -1;\n            }\n        }\n        lebel += currnetContestLebels.reduce((acc, cur) => acc + cur);\n        console.log(String(lebel));\n    }\n\n    return;\n}\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p02709_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x6ba700 => {\n    const _0x266250 = _0x6ba700['trim']()['split']('\\x0a');\n    const _0x1eb6c6 = parseInt(_0x266250[0x0]);\n    const _0x151da5 = _0x266250[0x1]['split']('\\x20')['map'](_0x3fc46f => parseInt(_0x3fc46f));\n    function _0x6c4eaa(_0x406d93, _0x467ed7) {\n        if (_0x406d93 === -0x1)\n            return 0x0;\n        const _0x135ccf = [];\n        for (const _0x1e4671 of _0x467ed7) {\n            const _0xafa2d2 = _0x467ed7['filter'](_0x2a2ff5 => _0x2a2ff5 !== _0x1e4671);\n            const _0x1ef4d4 = _0x406d93 > _0x1e4671 ? _0x406d93 - _0x1e4671 : _0x1e4671 - _0x406d93;\n            const _0x40f65e = _0x151da5[_0x406d93] * _0x1ef4d4 + _0x6c4eaa(_0x406d93 - 0x1, _0xafa2d2);\n            _0x135ccf['push'](_0x40f65e);\n        }\n        return Math['max'](..._0x135ccf);\n    }\n    console['log'](_0x6c4eaa(_0x1eb6c6 - 0x1, [...Array(_0x1eb6c6)['keys']()]));\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 3 4 2", "20"], ["6\n5 5 6 1 1 1", "58"], ["6\n8 6 9 1 2 1", "85"]], "original": "\"use strict\";\n\nconst main = arg => {\n  const input = arg.trim().split(\"\\n\");\n\n  const n = parseInt(input[0]);\n  const arr = input[1].split(\" \").map(n => parseInt(n));\n\n  function cal(i, dst) {\n    if (i === -1) return 0;\n\n    const results = [];\n    for (const j of dst) {\n      const next_dst = dst.filter(v => v !== j);\n      const abs = i > j ? i - j : j - i;\n      const val = arr[i] * abs + cal(i - 1, next_dst);\n      results.push(val);\n    }\n\n    return Math.max(...results);\n  }\n\n  console.log(cal(n - 1, [...Array(n).keys()]));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02814_1", "type": "JavaScript", "obfuscated": "function main(_0x3948fa) {\n    var _0x39c2dd = _0x3948fa[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x2d5830 = _0x3948fa[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x1d9b80 = _0x3948fa[0x1]['split']('\\x20')['map'](_0x4c1b68 => _0x4c1b68 / 0x2);\n    var _0x1f10c8 = lcm(_0x1d9b80);\n    console['log'](Math['trunc'](_0x2d5830 / _0x1f10c8) - Math['trunc'](_0x2d5830 / (_0x1f10c8 * 0x2)));\n}\nfunction lcm(_0x25ca1c) {\n    var _0x46b9b9 = _0x25ca1c;\n    var _0x2cf62d = (_0x5279f6, _0x185325) => _0x185325 ? _0x2cf62d(_0x185325, _0x5279f6 % _0x185325) : _0x5279f6;\n    var _0x473de7 = (_0x451493, _0x5693fb) => _0x451493 * _0x5693fb / _0x2cf62d(_0x451493, _0x5693fb);\n    var _0x5bd3a8 = _0x46b9b9[0x0];\n    for (var _0x38f18c = 0x1; _0x38f18c < _0x46b9b9['length']; _0x38f18c++) {\n        _0x5bd3a8 = _0x473de7(_0x5bd3a8, _0x46b9b9[_0x38f18c]);\n    }\n    return _0x5bd3a8;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a'));", "test_cases": [["2 50\n6 10", "2"], ["3 100\n14 22 40", "0"], ["5 1000000000\n6 6 2 6 2", "166666667"]], "original": "function main(input) {\n  var N = input[0].split(\" \")[0]-0;\n  var M = input[0].split(\" \")[1]-0;\n  var list = input[1].split(\" \").map(v=>v/2);\n  var l = lcm(list);\n  console.log(Math.trunc(M/l) - Math.trunc(M/(l*2)));\n}\n\nfunction lcm(args) {\n    var a = args\n    var g = (n, m) => m ? g(m, n % m) : n\n    var l = (n, m) => n * m / g(n, m)\n    var ans = a[0]\n\n    for (var i = 1; i < a.length; i++) {\n        ans = l(ans, a[i])\n    }\n    return ans\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p02821_1", "type": "JavaScript", "obfuscated": "function Main(_0x456b61) {\n    const _0x337c7f = _0x456b61[0x0][0x1];\n    const _0xd69acf = _0x456b61[0x1];\n    const _0x34dc06 = _0xd69acf['reduce']((_0x1906b3, _0x283a38, _0x5962ec) => {\n        _0x1906b3['push'](_0x283a38 * 0x2);\n        var _0x81c82d;\n        for (var _0xb5c22 = _0x5962ec + 0x1; _0xb5c22 < _0xd69acf['length']; _0xb5c22++) {\n            _0x81c82d = _0x283a38 + _0xd69acf[_0xb5c22];\n            _0x1906b3['push'](_0x81c82d, _0x81c82d);\n        }\n        return _0x1906b3;\n    }, [])['sort']((_0x14904d, _0x1a0396) => _0x1a0396 - _0x14904d);\n    var _0x583b70 = 0x0;\n    for (var _0x321a2c = 0x0; _0x321a2c < _0x337c7f; _0x321a2c++) {\n        _0x583b70 += _0x34dc06[_0x321a2c];\n    }\n    console['log'](_0x583b70);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['map'](_0xfc1632 => _0xfc1632['split']('\\x20')['map'](Number)));", "test_cases": [["5 3\n10 14 19 34 33", "202"], ["9 14\n1 3 5 110 24 21 34 5 3", "1837"], ["9 73\n67597 52981 5828 66249 75177 64141 40773 79105 16076", "8128170"]], "original": "/**\n * @param input number[][]\n */\nfunction Main(input) {\n  const M = input[0][1];\n  const alist = input[1];\n\n  const kumiList = alist.reduce((arr, ai, i) => {\n    arr.push(ai * 2);\n\n    var kumiVal;\n    for (var j = i + 1; j < alist.length; j++) {\n      kumiVal = ai + alist[j];\n      arr.push(kumiVal, kumiVal);\n    }\n\n    return arr;\n  }, []).sort((a1, a2) => a2 - a1);\n\n  var answer = 0;\n  for (var i = 0; i < M; i++) {\n    answer += kumiList[i];\n  }\n\n  console.log(answer);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim()\n  .split('\\n')\n  .map((line) => line.split(' ').map(Number))\n);", "language": "JavaScript"}
{"filename": "p03381_1", "type": "JavaScript", "obfuscated": "function Main(_0x42266a) {\n    const _0x445913 = _0x42266a['split']('\\x0a');\n    let _0xc34668 = parseInt(_0x445913[0x0]);\n    let _0x3d0d1f = _0x445913[0x1]['split']('\\x20')['map'](function (_0x1a3f90) {\n        return parseInt(_0x1a3f90);\n    });\n    let _0x7fcd0e = _0x3d0d1f['slice']()['sort'](function (_0x502ac0, _0x4e533f) {\n        return _0x502ac0 - _0x4e533f;\n    });\n    const _0x1fa385 = _0x7fcd0e[_0xc34668 / 0x2 - 0x1];\n    const _0x22aac3 = _0x7fcd0e[_0xc34668 / 0x2];\n    _0x3d0d1f['forEach'](function (_0x23fd74) {\n        console['log'](_0x23fd74 <= _0x1fa385 ? _0x22aac3 : _0x1fa385);\n    });\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n2 4 4 3", "4\n3\n3\n4"], ["2\n1 2", "2\n1"], ["6\n5 5 4 4 3 3", "4\n4\n4\n4\n4\n4"]], "original": "function Main(input) {\n    const lines = input.split(\"\\n\");\n    let N = parseInt(lines[0]);\n    let a = lines[1].split(\" \").map(function(i) { return parseInt(i);});\n    let sortedA = a.slice().sort(function(a,b) { return a - b;});\n    const med1 = sortedA[N/2-1];\n    const med2 = sortedA[N/2];\n    a.forEach(function(i) {console.log(i<=med1 ? med2 : med1);})\n}\n\nMain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03418_1", "type": "JavaScript", "obfuscated": "function Main(_0x40f8ae) {\n    var _0x5e1eb8 = _0x40f8ae['split']('\\x0a');\n    var _0x29841f = _0x5e1eb8[0x0]['split']('\\x20');\n    var _0x39337a = Number(_0x29841f[0x0]);\n    var _0x13d9b1 = Number(_0x29841f[0x1]);\n    var _0x40671f = 0x0;\n    for (var _0x2d7fda = _0x13d9b1 || 0x1; _0x2d7fda <= _0x39337a; _0x2d7fda++) {\n        for (var _0x461834 = _0x13d9b1 || 0x1; _0x461834 <= _0x39337a; _0x461834++) {\n            if (_0x2d7fda < _0x461834) {\n                _0x40671f++;\n            } else {\n                if (_0x2d7fda % _0x461834 >= _0x13d9b1)\n                    _0x40671f++;\n            }\n        }\n    }\n    console['log'](_0x40671f);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2", "7"], ["10 0", "100"], ["31415 9265", "287927211"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tvar line = input.split(\"\\n\");\n\tvar tmp = line[0].split(\" \");\n\tvar maxint = Number(tmp[0]);\n\tvar minrest = Number(tmp[1]);\n\tvar ans = 0;\n\tfor(var a = minrest || 1; a <= maxint; a++){\n\t\tfor(var b = minrest || 1; b <= maxint; b++){\n\t\t\tif(a < b){\n\t\t\t\tans++;\n\t\t\t} else{\n\t\t\t\tif(a%b >= minrest) ans++;\n\t\t\t}\n\t\t}\n\t}\n\tconsole.log(ans);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03533_1", "type": "JavaScript", "obfuscated": "var s = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconsole['log'](s['trim']()['match'](/^A?KIHA?BA?RA?$/) ? 'YES' : 'NO');", "test_cases": [["KIHBR", "YES"], ["AKIBAHARA", "NO"], ["AAKIAHBAARA", "NO"]], "original": "var s = require('fs').readFileSync('/dev/stdin', 'utf8');\nconsole.log((s.trim().match(/^A?KIHA?BA?RA?$/)) ? \"YES\" : \"NO\");", "language": "JavaScript"}
{"filename": "p03568_1", "type": "JavaScript", "obfuscated": "function Main(_0x207bd0) {\n    _0x207bd0 = _0x207bd0['split']('\\x0a');\n    var _0x1577d4 = Math['pow'](0x3, _0x207bd0[0x0]);\n    var _0x26cc88 = 0x1;\n    var _0x228002 = _0x207bd0[0x1]['split']('\\x20')['map'](Number);\n    _0x228002['forEach'](function (_0x52aeee) {\n        if (_0x52aeee % 0x2 == 0x0)\n            _0x26cc88 *= 0x2;\n    });\n    console['log'](_0x1577d4 - _0x26cc88);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["2\n2 3", "7"], ["3\n3 3 3", "26"], ["1\n100", "1"], ["10\n90 52 56 71 44 8 13 30 57 84", "58921"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n  var n = Math.pow(3,input[0]);\n  var sum = 1;\n  var arr = input[1].split(\" \").map(Number);\n  arr.forEach(function(val){if(val%2==0)sum *= 2});\n  console.log(n-sum);\n}Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03578_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5dc9d4 => {\n    const [[_0x64cc6a], _0x427a6d, [_0x37c1c1], _0x4e59fb] = _0x5dc9d4['trim']()['split']('\\x0a')['map'](_0x33e101 => _0x33e101['split']('\\x20')['map'](_0x20536c => _0x20536c | 0x0));\n    _0x427a6d['sort']((_0x3945e7, _0x5eab24) => _0x3945e7 - _0x5eab24);\n    _0x4e59fb['sort']((_0x34578b, _0x5d995d) => _0x34578b - _0x5d995d);\n    let _0x236161 = -0x1;\n    _0x4b1c3e:\n        for (let _0x48980a = 0x0; _0x48980a < _0x37c1c1; _0x48980a++) {\n            while (++_0x236161 < _0x64cc6a) {\n                if (_0x427a6d[_0x236161] > _0x4e59fb[_0x48980a])\n                    return 'NO';\n                if (_0x427a6d[_0x236161] === _0x4e59fb[_0x48980a])\n                    continue _0x4b1c3e;\n            }\n            return 'NO';\n        }\n    return 'YES';\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["5\n3 1 4 1 5\n3\n5 4 3", "YES"], ["7\n100 200 500 700 1200 1600 2000\n6\n100 200 500 700 1600 1600", "NO"], ["1\n800\n5\n100 100 100 100 100", "NO"], ["15\n1 2 2 3 3 3 4 4 4 4 5 5 5 5 5\n9\n5 4 3 2 1 2 3 4 5", "YES"]], "original": "console.log((args=>{\n  const [[N],D,[M],T] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  D.sort((a,b)=>a-b);\n  T.sort((a,b)=>a-b);\n  let j = -1;\n  Q: for ( let i = 0; i < M; i++ ) {\n    while ( ++j < N ) {\n      if ( D[j] > T[i] ) return 'NO';\n      if ( D[j] === T[i] ) continue Q;\n    }\n    return 'NO';\n  }\n  return 'YES';\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03733_1", "type": "JavaScript", "obfuscated": "console['log']((_0x502492 => {\n    const [[_0x26f394, _0x41fe06], _0x169d6d] = _0x502492['trim']()['split']`\\n`['map'](_0x1c85d1 => _0x1c85d1['split']` `['map'](_0x3e021c => _0x3e021c | 0x0));\n    _0x169d6d['sort']((_0x480e70, _0x59a106) => _0x480e70 - _0x59a106);\n    let _0x4a9840 = _0x41fe06;\n    for (let _0x3ae5a = 0x1; _0x3ae5a < _0x26f394; _0x3ae5a++) {\n        if (_0x169d6d[_0x3ae5a - 0x1] + _0x41fe06 > _0x169d6d[_0x3ae5a])\n            _0x4a9840 += _0x169d6d[_0x3ae5a] - _0x169d6d[_0x3ae5a - 0x1];\n        else\n            _0x4a9840 += _0x41fe06;\n    }\n    return '' + _0x4a9840;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["2 4\n0 3", "7"], ["2 4\n0 5", "8"], ["4 1000000000\n0 1000 1000000 1000000000", "2000000000"], ["1 1\n0", "1"], ["9 10\n0 3 5 7 100 110 200 300 311", "67"]], "original": "console.log((args=>{\n  const [[N,T],t] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  t.sort((a,b)=>a-b);\n  let s = T;\n  for ( let i = 1; i < N; i++ ) {\n    if ( t[i-1] + T > t[i] ) s += t[i] - t[i-1];\n    else s += T;\n  }\n  return `${s}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03817_1", "type": "JavaScript", "obfuscated": "input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlines = input['split']('\\x0a');\nN = lines['shift']() * 0x1;\nans = Math['floor'](N / 0xb) * 0x2;\nm = N % 0xb;\nif (m == 0x0) {\n} else if (m <= 0x6) {\n    ans += 0x1;\n} else {\n    ans += 0x2;\n}\nconsole['log'](ans);", "test_cases": [["7", "2"], ["149696127901", "27217477801"]], "original": "input = require('fs').readFileSync('/dev/stdin', 'utf8')\nlines = input.split('\\n')\nN = lines.shift() * 1\nans = Math.floor(N / 11) * 2\nm = N % 11\nif (m == 0) {\n} else if (m <= 6) {\n    ans += 1\n} else {\n    ans += 2\n} \nconsole.log(ans)", "language": "JavaScript"}
{"filename": "p03889_1", "type": "JavaScript", "obfuscated": "function Main(_0x558d83) {\n    const _0x48c346 = _0x558d83['split']('');\n    if (_0x48c346['length'] % 0x2 !== 0x0) {\n        console['log']('No');\n        return;\n    }\n    const _0x16cf77 = _0x48c346['slice'](0x0, _0x48c346['length'] / 0x2);\n    const _0x45bf56 = _0x48c346['slice'](_0x48c346['length'] / 0x2, _0x48c346['length']);\n    if (_0x16cf77['join']('') === _0x45bf56['reverse']()['map'](_0xf5a1fa)['join']('')) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n    function _0xf5a1fa(_0x46b80b) {\n        switch (_0x46b80b) {\n        case 'b':\n            return 'd';\n        case 'd':\n            return 'b';\n        case 'p':\n            return 'q';\n        case 'q':\n            return 'p';\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["pdbq", "Yes"], ["ppqb", "No"]], "original": "function Main(input) {\n  const arr = input.split(\"\");\n  if(arr.length % 2 !== 0){\n    console.log(\"No\");\n    return;\n  }\n  const a = arr.slice(0, arr.length/2);\n  const b = arr.slice(arr.length/2, arr.length);\n  if(a.join(\"\") === b.reverse().map(mirror).join(\"\")){\n    console.log(\"Yes\");\n  }else{ console.log(\"No\"); }\n  function mirror(a){\n    switch (a) {\n        case \"b\": return \"d\";\n        case \"d\": return \"b\";\n        case \"p\": return \"q\";\n        case \"q\": return \"p\";\n    }\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04033_1", "type": "JavaScript", "obfuscated": "const main = _0x53af5a => {\n    const _0x22c0ea = _0x53af5a['split'](/\\n|\\s/)['map'](_0x2f92a9 => parseInt(_0x2f92a9, 0xa));\n    const _0x42f3d4 = _0x22c0ea[0x0];\n    const _0x5e3feb = _0x22c0ea[0x1];\n    if (_0x42f3d4 <= 0x0 && 0x0 <= _0x5e3feb) {\n        return 'Zero';\n    }\n    if ((_0x5e3feb - _0x42f3d4) % 0x2 || _0x42f3d4 > 0x0) {\n        return 'Positive';\n    } else {\n        return 'Negative';\n    }\n};\nconsole['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["1 3", "Positive"], ["-3 -1", "Negative"], ["-1 1", "Zero"]], "original": "const main = (input) =>  {\n  const data = input.split(/\\n|\\s/).map((a) => parseInt(a, 10));\n  const a = data[0];\n  const b = data[1];\n  if (a <= 0 && 0 <= b) {\n    return \"Zero\"\n  }\n\n  if ((b - a) % 2  || a > 0) {\n    return \"Positive\";\n  } else {\n    return \"Negative\";\n  }\n}\n\nconsole.log(main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")))\n\n\n\n", "language": "JavaScript"}
{"filename": "p00034_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split'](/\\s/)['map'](function (_0x51f3b8) {\n    j = _0x51f3b8['split'](',');\n    for (s = 0x0, m = n = 0xa; m--;)\n        j[m] = s -= j[m];\n    for (s *= j[0xb] / (-j[0xb] - j[n]); j[--n] >= -s;);\n    console['log'](++n);\n});", "test_cases": [["1,1,1,1,1,1,1,1,1,1,40,60\n1,1,1,1,1,3,3,3,3,3,50,50\n10,10,10,10,10,10,10,10,10,10,50,49", "4\n7\n6"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",'utf8').trim().split(/\\s/).map(function(i){j=i.split(',');for(s=0,m=n=10;m--;)j[m]=s-=j[m];for(s*=j[11]/(-j[11]-j[n]);j[--n]>=-s;);console.log(++n);})", "language": "JavaScript"}
{"filename": "p00039_1", "type": "JavaScript", "obfuscated": "r = '.IVXLCDM', require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a')['map'](function (_0x1c4c4f) {\n    _0x1c4c4f ? (n = s = p = 0x0, _0x1c4c4f['split']('')['map'](function (_0x1cb501) {\n        n = Math['pow'](0xa, ~~((n = r['indexOf'](_0x1cb501)) / 0x2)) / (0x2 - n % 0x2), n > p ? s -= p * 0x2 : 0x0, s += n, p = n;\n    }), console['log'](s)) : 0x0;\n});", "test_cases": [["IV\nCCCCLXXXXVIIII\nCDXCIX", "4\n499\n499"]], "original": "r=\".IVXLCDM\",require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split('\\n').map(function(i){i?(n=s=p=0,i.split('').map(function(c){n=Math.pow(10,~~((n=r.indexOf(c))/2))/(2-(n%2)),n>p?s-=p*2:0,s+=n,p=n}),console.log(s)):0})", "language": "JavaScript"}
{"filename": "p00064_1", "type": "JavaScript", "obfuscated": "var ans = 0x0;\nrequire('fs')['readFileSync']('/dev/stdin', 'utf8')['match'](/\\d+/g)['forEach'](function (_0x4545b8) {\n    ans += parseInt(_0x4545b8, 0xa);\n});\nconsole['log'](ans);", "test_cases": [["Thereare100yenonthetable.Iam17yearsold.\nIshouldgohomeat6pm.", "123"]], "original": "var ans=0;\nrequire(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").match(/\\d+/g).forEach(function(elem){\n\tans += parseInt(elem, 10);\n});\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p00092_1", "type": "JavaScript", "obfuscated": "function seach(_0x2940cd, _0x4afdb8) {\n    if (yx[_0x2940cd][_0x4afdb8] == '*')\n        return 0x0;\n    var _0x5198cd = [\n        -0x1,\n        -0x1,\n        0x0\n    ];\n    var _0xfaa30a = [\n        -0x1,\n        0x0,\n        -0x1\n    ];\n    var _0x2de238 = n;\n    for (var _0x355e7d = 0x0; _0x355e7d < 0x3; _0x355e7d++) {\n        var _0x5a3726 = _0x2940cd + _0x5198cd[_0x355e7d];\n        var _0x354bdd = _0x4afdb8 + _0xfaa30a[_0x355e7d];\n        if (_0x5a3726 < 0x0 || _0x5a3726 >= n || _0x354bdd < 0x0 || _0x354bdd >= n)\n            return 0x1;\n        _0x2de238 = Math['min'](_0x2de238, yx[_0x5a3726][_0x354bdd]);\n    }\n    return _0x2de238 + 0x1;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var max = 0x0;\n    var yx = [];\n    for (var i = 0x0; i < n; i++) {\n        var str = Arr['shift']();\n        yx['push'](str['split'](''));\n    }\n    for (var y = 0x0; y < n; y++) {\n        for (var x = 0x0; x < n; x++) {\n            yx[y][x] = seach(y, x);\n            max = Math['max'](max, yx[y][x]);\n        }\n    }\n    console['log'](max);\n}", "test_cases": [["10\n...*....**\n..........\n**....**..\n........*.\n..*.......\n..........\n.*........\n..........\n....*..***\n.*....*...\n10\n****.*****\n*..*.*....\n****.*....\n*....*....\n*....*****\n..........\n****.*****\n*..*...*..\n****...*..\n*..*...*..\n0", "5\n3"]], "original": "function seach(y,x){\n   if(yx[y][x]==\"*\")return 0;\n   var dy=[-1,-1,0];\n   var dx=[-1,0,-1];\n   var min=n;\n   for(var i=0;i<3;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=n || xx<0 || xx>=n)return 1;\n      min=Math.min(min,yx[yy][xx]);\n   }\n   return min+1;\n}\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var max=0;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      var str=Arr.shift();\n      yx.push(str.split(\"\"));\n   }\n   for(var y=0;y<n;y++){\n      for(var x=0;x<n;x++){\n         yx[y][x]=seach(y,x);\n         max=Math.max(max,yx[y][x]);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00118_1", "type": "JavaScript", "obfuscated": "function bomb(_0x316dc7, _0x22ce54, _0x401f44) {\n    var _0x18d18c = [\n        0x0,\n        0x0,\n        -0x1,\n        0x1\n    ];\n    var _0x53e5c4 = [\n        -0x1,\n        0x1,\n        0x0,\n        0x0\n    ];\n    for (var _0x2d022b = 0x0; _0x2d022b < 0x4; _0x2d022b++) {\n        var _0x55ccd7 = _0x316dc7 + _0x18d18c[_0x2d022b];\n        var _0xfcaa38 = _0x22ce54 + _0x53e5c4[_0x2d022b];\n        if (_0x55ccd7 < 0x0 || _0x55ccd7 >= n[0x0] || _0xfcaa38 < 0x0 || _0xfcaa38 >= n[0x1])\n            continue;\n        if (_0x401f44 == yx[_0x55ccd7][_0xfcaa38]) {\n            yx[_0x55ccd7][_0xfcaa38] = 0x0;\n            bomb(_0x55ccd7, _0xfcaa38, _0x401f44);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (n[0x0] == 0x0 && n[0x1] == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < n[0x0]; i++) {\n        var arr = Arr['shift']()['split']('');\n        yx['push'](arr);\n    }\n    var cnt = 0x0;\n    for (var i = 0x0; i < n[0x0]; i++) {\n        for (var j = 0x0; j < n[0x1]; j++) {\n            var v = yx[i][j];\n            if (v == '@' || v == '#' || v == '*') {\n                cnt++;\n                yx[i][j] = 0x0;\n                bomb(i, j, v);\n            }\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["10 10\n####*****@\n@#@@@@#*#*\n@##***@@@*\n#****#*@**\n##@*#@@*##\n*@@@@*@@@#\n***#@*@##*\n*@@@*@@##@\n*@*#*@##**\n@****#@@#@\n0 0", "33"]], "original": "function bomb(y,x,v){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=n[0] || xx<0 || xx>=n[1])continue;\n      if(v==yx[yy][xx]){yx[yy][xx]=0;bomb(yy,xx,v);}\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=(Arr.shift()).split(\" \").map(Number);\n   if(n[0]==0 && n[1]==0)break;\n   var yx=[];\n   for(var i=0;i<n[0];i++){\n      var arr=(Arr.shift()).split(\"\");\n      yx.push(arr);\n   }\n   var cnt=0;\n   for(var i=0;i<n[0];i++){\n      for(var j=0;j<n[1];j++){\n         var v=yx[i][j];\n         if(v==\"@\" || v==\"#\" || v==\"*\"){cnt++;yx[i][j]=0;bomb(i,j,v);}\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00168_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar dp = [\n    0x1,\n    0x2,\n    0x4\n];\nfor (var i = 0x3; i <= 0x1f; i++) {\n    dp[i] = dp[i - 0x1] + dp[i - 0x2] + dp[i - 0x3];\n}\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    console['log'](Math['ceil'](dp[n - 0x1] / 0xe42));\n}", "test_cases": [["1\n10\n20\n25\n0", "1\n1\n34\n701"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dp=[1,2,4];\nfor(var i=3;i<=31;i++){\n   dp[i]=dp[i-1]+dp[i-2]+dp[i-3];\n}\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   console.log(Math.ceil(dp[n-1]/3650));\n}", "language": "JavaScript"}
{"filename": "p00181_1", "type": "JavaScript", "obfuscated": "function seach(_0x17ac1c) {\n    var _0x28b2e8 = !![];\n    var _0x333062 = 0x0;\n    var _0x4e038c = 0x0;\n    for (var _0x346a8d = 0x0; _0x346a8d < ary['length']; _0x346a8d++) {\n        if (_0x17ac1c < ary[_0x346a8d]) {\n            _0x28b2e8 = ![];\n            break;\n        } else if (_0x4e038c + ary[_0x346a8d] == _0x17ac1c) {\n            _0x4e038c = 0x0;\n            _0x333062++;\n        } else if (_0x4e038c + ary[_0x346a8d] > _0x17ac1c) {\n            _0x4e038c = ary[_0x346a8d];\n            _0x333062++;\n        } else if (_0x4e038c + ary[_0x346a8d] < _0x17ac1c) {\n            _0x4e038c += ary[_0x346a8d];\n        }\n        if (_0x333062 == m) {\n            _0x28b2e8 = ![];\n            break;\n        }\n    }\n    return _0x28b2e8;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var mn = arr['shift']();\n    if (mn == '0\\x200')\n        break;\n    mn = mn['split']('\\x20')['map'](Number);\n    var m = mn[0x0];\n    var n = mn[0x1];\n    var ary = [];\n    while (n--)\n        ary['push'](arr['shift']() - 0x0);\n    var L = 0x0;\n    var R = 0x16e360;\n    while (!![]) {\n        var middle = Math['floor']((L + R) / 0x2);\n        if (seach(middle)) {\n            R = middle - 0x1;\n        } else {\n            L = middle + 0x1;\n        }\n        if (L > R)\n            break;\n    }\n    console['log'](R + 0x1);\n}", "test_cases": [["3 9\n500\n300\n800\n200\n100\n600\n900\n700\n400\n4 3\n1000\n1000\n1000\n0 0", "1800\n1000"]], "original": "function seach(x){\n   var flag=true;\n   var cnt=0;\n   var sum=0;\n   for(var i=0;i<ary.length;i++){\n      if(x<ary[i]){\n         flag=false;\n         break;\n      }else if(sum+ary[i]==x){\n         sum=0;\n         cnt++;\n      }else if(sum+ary[i]>x){\n         sum=ary[i];\n         cnt++;\n      }else if(sum+ary[i]<x){\n         sum+=ary[i];\n      }\n      if(cnt==m){\n         flag=false;\n         break;\n      }\n   }\n   return flag;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var mn=arr.shift();\n   if(mn==\"0 0\")break;\n   mn=mn.split(\" \").map(Number);\n   var m=mn[0];\n   var n=mn[1];\n   var ary=[];\n   while(n--)ary.push(arr.shift()-0);\n   var L=0;\n   var R=1500000\n   while(true){\n      var middle=Math.floor((L+R)/2);\n      if(seach(middle)){\n         R=middle-1;\n      }else{\n         L=middle+1;\n      }\n      if(L>R)break;\n   }\n   console.log(R+1);\n}", "language": "JavaScript"}
{"filename": "p00230_1", "type": "JavaScript", "obfuscated": "function bomb() {\n    var _0x4cbb67 = {};\n    var _0x2f9ddc = 'NA';\n    var _0x548abc = [\n        [\n            0x0,\n            0x0,\n            0x0\n        ],\n        [\n            0x1,\n            0x0,\n            0x0\n        ]\n    ];\n    while (!![]) {\n        if (_0x548abc['length'] == 0x0)\n            break;\n        var _0xf9d50e = _0x548abc['shift']();\n        var _0x162936 = _0xf9d50e[0x0];\n        var _0x16eb40 = _0xf9d50e[0x1];\n        if (_0x4cbb67['hasOwnProperty'](_0x162936 + ',' + _0x16eb40))\n            continue;\n        else\n            _0x4cbb67[_0x162936 + ',' + _0x16eb40] = !![];\n        var _0x27eef9 = _0xf9d50e[0x2];\n        var _0x2bc627 = xy[_0x162936][_0x16eb40];\n        if (_0x2bc627 == 0x1) {\n            while (!![]) {\n                _0x16eb40++;\n                if (xy[_0x162936][_0x16eb40] != 0x1) {\n                    _0x16eb40--;\n                    break;\n                }\n            }\n        } else if (_0x2bc627 == 0x2) {\n            while (!![]) {\n                _0x16eb40--;\n                if (xy[_0x162936][_0x16eb40] != 0x2)\n                    break;\n            }\n        }\n        if (_0x16eb40 == n - 0x1) {\n            _0x2f9ddc = _0x27eef9;\n            break;\n        }\n        for (var _0x530cc6 = 0x0; _0x530cc6 <= 0x2; _0x530cc6++)\n            _0x548abc['push']([\n                0x1 - _0x162936,\n                _0x16eb40 + _0x530cc6,\n                _0x27eef9 + 0x1\n            ]);\n    }\n    return _0x2f9ddc;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var xy = [];\n    xy[0x0] = arr['shift']()['split']('\\x20')['map'](Number);\n    xy[0x1] = arr['shift']()['split']('\\x20')['map'](Number);\n    console['log'](bomb());\n}", "test_cases": [["8\n0 0 0 2 2 2 0 0\n1 1 1 1 0 0 0 0\n4\n1 1 2 2\n0 0 2 2\n0", "4\nNA"]], "original": "function bomb(){\n   var obj={};\n   var ans=\"NA\";\n   var leaf=[[0,0,0],[1,0,0]];\n   while(true){\n      if(leaf.length==0)break;\n      var ary=leaf.shift();\n      var x=ary[0];\n      var y=ary[1];\n      if(obj.hasOwnProperty(x+\",\"+y))continue;\n      else obj[x+\",\"+y]=true;\n      var cnt=ary[2];\n      var v=xy[x][y];\n      if(v==1){\n         while(true){\n            y++;\n            if(xy[x][y]!=1){\n               y--;\n               break;\n            }\n         }\n      }else if(v==2){\n         while(true){\n            y--;\n            if(xy[x][y]!=2)break;\n         }\n      }\n       if(y==n-1){\n         ans=cnt;\n         break;\n      }\n      for(var i=0;i<=2;i++)leaf.push([1-x,y+i,cnt+1]);\n   }\n   return ans;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var xy=[];\n   xy[0]=arr.shift().split(\" \").map(Number);\n   xy[1]=arr.shift().split(\" \").map(Number);\n   console.log(bomb());\n}", "language": "JavaScript"}
{"filename": "p00251_1", "type": "JavaScript", "obfuscated": "var plus = function (_0x4f44ba, _0x80d409) {\n    return _0x4f44ba + _0x80d409;\n};\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar sum = 0x0;\nconsole['log'](Arr['reduce'](plus));", "test_cases": [["1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "55"], ["4\n4\n8\n8\n8\n10\n10\n12\n16\n20", "100"]], "original": "var plus = function(a, b)\n{\n  return a + b;\n};\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar sum=0;\n\nconsole.log(Arr.reduce(plus));", "language": "JavaScript"}
{"filename": "p00423_1", "type": "JavaScript", "obfuscated": "(function (_0x1b2656) {\n    var _0x2f8a16 = _0x1b2656['trim']()['split']('\\x0a');\n    while (0x1) {\n        var _0x24ee4b = _0x2f8a16['shift']();\n        if (_0x24ee4b == '0') {\n            break;\n        }\n        var _0x20b497 = Number(_0x24ee4b);\n        var _0x4289f7 = 0x0, _0x75a9b5 = 0x0;\n        for (var _0x190f41 = 0x0; _0x190f41 < _0x20b497; _0x190f41++) {\n            var _0x4552d5 = _0x2f8a16['shift']()['split']('\\x20')['map'](Number);\n            if (_0x4552d5[0x0] == _0x4552d5[0x1]) {\n                _0x4289f7 += _0x4552d5[0x0];\n                _0x75a9b5 += _0x4552d5[0x0];\n            } else if (_0x4552d5[0x0] > _0x4552d5[0x1]) {\n                _0x4289f7 += _0x4552d5[0x0] + _0x4552d5[0x1];\n            } else {\n                _0x75a9b5 += _0x4552d5[0x0] + _0x4552d5[0x1];\n            }\n        }\n        console['log']([\n            _0x4289f7,\n            _0x75a9b5\n        ]['join']('\\x20'));\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n9 1\n5 4\n0 8\n3\n9 1\n5 4\n1 0\n3\n9 1\n5 5\n1 8\n0", "19 8\n20 0\n15 14"]], "original": "(function(stdin) {\n  var lines = stdin.trim().split('\\n');\n  while(1) {\n    var line = lines.shift();\n    if (line == '0') {\n      break;\n    }\n    var n = Number(line);\n    var a = 0, b = 0;\n    for (var i = 0; i < n; i++) {\n      var numbers = lines.shift().split(' ').map(Number);\n      if (numbers[0] == numbers[1]) {\n        a += numbers[0];\n        b += numbers[0];\n      } else if (numbers[0] > numbers[1]) {\n        a += numbers[0] + numbers[1];\n      } else {\n      \tb += numbers[0] + numbers[1];\n      }\n    }\n    console.log([a, b].join(' '));\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p00740_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var np = Arr['shift']();\n    if (np == '0\\x200')\n        break;\n    np = np['split']('\\x20')['map'](Number);\n    var n = np[0x0];\n    var p = np[0x1];\n    var sum = p;\n    var arr = [];\n    for (var i = 0x0; i < n; i++)\n        arr['push'](0x0);\n    var j = 0x0;\n    for (var i = 0x0; i < 0xf4240; i++) {\n        if (j == arr['length'])\n            j = 0x0;\n        if (p > 0x0) {\n            p--;\n            arr[j]++;\n            if (p == 0x0 && sum == arr[j]) {\n                console['log'](j);\n                break;\n            }\n        } else {\n            p = arr[j];\n            arr[j] = 0x0;\n        }\n        j++;\n    }\n}", "test_cases": [["3 2\n3 3\n3 50\n10 29\n31 32\n50 2\n50 50\n0 0", "1\n0\n1\n5\n30\n1\n13"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var np=Arr.shift();\n   if(np==\"0 0\")break;\n   np=np.split(\" \").map(Number);\n   var n=np[0];\n   var p=np[1];\n   var sum=p;\n   var arr=[];\n   for(var i=0;i<n;i++)arr.push(0);\n   var j=0;\n   for(var i=0;i<1000000;i++){\n      if(j==arr.length)j=0;\n      if(p>0){\n         p--;\n         arr[j]++;\n         if(p==0 && sum==arr[j]){console.log(j);break;}\n      }else{\n         p=arr[j];\n         arr[j]=0;\n      }\n      j++;\n   }\n}", "language": "JavaScript"}
{"filename": "p00748_1", "type": "JavaScript", "obfuscated": "var a = [0x1];\nfor (var i = 0x1; i < 0x186a0; i++)\n    a[i] = a[i - 0x1] + i + 0x1;\nvar b = [0x1];\nvar i = 0x1;\nwhile (!![]) {\n    b[i] = b[i - 0x1] + a[i];\n    if (b[i] > 0x186a0)\n        break;\n    i++;\n}\nvar dpA = [];\nvar dpB = [];\nfor (var i = 0x0; i < 0x186a0; i++)\n    dpA[i] = Infinity;\nfor (var i = 0x0; i < 0x186a0; i++)\n    dpB[i] = Infinity;\ndpA[0x0] = 0x0;\ndpB[0x0] = 0x0;\nfor (var i = 0x0; i < 0x186a0; i++) {\n    for (var j = 0x0; j < b['length']; j++) {\n        if (i - b[j] >= 0x0)\n            dpA[i] = Math['min'](dpA[i - b[j]] + 0x1, dpA[i]);\n        if (b[j] % 0x2 == 0x1 && i - b[j] >= 0x0)\n            dpB[i] = Math['min'](dpB[i - b[j]] + 0x1, dpB[i]);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nwhile (!![]) {\n    var n = arr['shift']();\n    if (n == 0x0)\n        break;\n    console['log'](dpA[n] + '\\x20' + dpB[n]);\n}", "test_cases": [["40\n14\n5\n165\n120\n103\n106\n139\n0", "2 6\n2 14\n2 5\n1 1\n1 18\n5 35\n4 4\n3 37"]], "original": "var a=[1];\nfor(var i=1;i<100000;i++)a[i]=a[i-1]+i+1;\nvar b=[1];\nvar i=1;\nwhile(true){\n   b[i]=b[i-1]+a[i];\n   if(b[i]>100000)break;\n   i++;\n}\nvar dpA=[];\nvar dpB=[];\nfor(var i=0;i<100000;i++)dpA[i]=Infinity;\nfor(var i=0;i<100000;i++)dpB[i]=Infinity;\ndpA[0]=0;\ndpB[0]=0;\nfor(var i=0;i<100000;i++){\n   for(var j=0;j<b.length;j++){\n      if(i-b[j]>=0)dpA[i]=Math.min(dpA[i-b[j]]+1,dpA[i]);\n      if(b[j]%2==1 && i-b[j]>=0)dpB[i]=Math.min(dpB[i-b[j]]+1,dpB[i]);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   console.log(dpA[n]+\" \"+dpB[n]);\n}", "language": "JavaScript"}
{"filename": "p00760_1", "type": "JavaScript", "obfuscated": "const input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nconst lines = input['trim']()['split']('\\x0a');\nconst nextDay = (_0x2c180f, _0x4ad6a7, _0x3ceb40) => {\n    _0x3ceb40 = _0x3ceb40 + 0x1;\n    if (_0x2c180f % 0x3 === 0x0) {\n        if (_0x3ceb40 > 0x14) {\n            _0x3ceb40 = 0x1;\n            _0x4ad6a7 += 0x1;\n            if (_0x4ad6a7 === 0xb) {\n                _0x4ad6a7 = 0x1;\n                _0x2c180f++;\n            }\n        }\n    } else {\n        if (_0x3ceb40 > 0x14) {\n            _0x3ceb40 = 0x1;\n            _0x4ad6a7 += 0x1;\n            if (_0x4ad6a7 === 0xb) {\n                _0x4ad6a7 = 0x1;\n                _0x2c180f++;\n            }\n        } else if (_0x3ceb40 > 0x13 && _0x4ad6a7 % 0x2 === 0x0) {\n            _0x3ceb40 = 0x1;\n            _0x4ad6a7 += 0x1;\n            if (_0x4ad6a7 === 0xb) {\n                _0x4ad6a7 = 0x1;\n                _0x2c180f++;\n            }\n        }\n    }\n    return [\n        _0x2c180f,\n        _0x4ad6a7,\n        _0x3ceb40\n    ];\n};\nlines['shift']();\nlines['forEach'](_0x370fa2 => {\n    let [_0x35cda7, _0x3d0277, _0x5316c6] = _0x370fa2['trim']()['split']('\\x20')['map'](Number);\n    let _0x2aaec5 = 0x1;\n    while (_0x35cda7 !== 0x3e8 || _0x3d0277 !== 0x1 || _0x5316c6 !== 0x1) {\n        [_0x35cda7, _0x3d0277, _0x5316c6] = nextDay(_0x35cda7, _0x3d0277, _0x5316c6);\n        _0x2aaec5++;\n    }\n    console['log'](_0x2aaec5 - 0x1);\n});", "test_cases": [["8\n1 1 1\n344 3 1\n696 5 1\n182 9 5\n998 8 7\n344 2 19\n696 4 19\n999 10 20", "196470\n128976\n59710\n160715\n252\n128977\n59712\n1"]], "original": "const input = require('fs').readFileSync('/dev/stdin', 'utf8').trim()\nconst lines = input.trim().split(\"\\n\")\n\nconst nextDay = (y,m,d) => {\n    d = d + 1\n    if(y%3 === 0) {\n        if(d > 20) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        }\n    } else {\n        if(d > 20) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        } else if(d > 19 && m %2 === 0) {\n            d = 1\n            m += 1\n            if(m === 11) {\n                m = 1\n                y++\n            }\n        }\n    }\n    return [y,m,d]\n}\nlines.shift()\nlines.forEach(line => {\n    let [y,m,d] = line.trim().split(' ').map(Number)\n    let count = 1\n    while (y !== 1000 || m !== 1 || d !== 1) {\n         [y,m,d] = nextDay(y,m,d)\n        count++\n    }\n    console.log(count - 1)\n})\n", "language": "JavaScript"}
{"filename": "p01049_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar [a, d] = arr['shift']()['split']('\\x20')['map'](Number);\nvar retu = [];\nfor (var i = 0x0; i < n; i++) {\n    retu['push'](a + i * d);\n}\nvar m = arr['shift']() - 0x0;\nfor (var i = 0x0; i < m; i++) {\n    var [x, y, z] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (x == 0x0)\n        [retu[y - 0x1], retu[z - 0x1]] = [\n            retu[z - 0x1],\n            retu[y - 0x1]\n        ];\n    else\n        retu[y - 0x1] = retu[z - 0x1];\n}\nvar k = arr['shift']() - 0x0;\nconsole['log'](retu[k - 0x1]);", "test_cases": [["5\n2 3\n3\n0 2 5\n0 3 5\n1 2 4\n2", "11"], ["6\n5 5\n4\n0 1 2\n1 1 2\n0 4 1\n1 1 6\n3", "15"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar [a,d]=arr.shift().split(\" \").map(Number);\nvar retu=[];\nfor(var i=0;i<n;i++){\n   retu.push(a+i*d);\n}\nvar m=arr.shift()-0;\nfor(var i=0;i<m;i++){\n   var [x,y,z] = arr.shift().split(\" \").map(Number);\n   if(x==0) [retu[y-1],retu[z-1]]=[retu[z-1],retu[y-1]]\n   else retu[y-1]=retu[z-1];\n}\nvar k=arr.shift()-0;\nconsole.log(retu[k-1]);\n\n", "language": "JavaScript"}
{"filename": "p01273_1", "type": "JavaScript", "obfuscated": "var data = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar input = data['trim']()['split']('\\x0a');\nvar line = 0x0;\nwhile (!![]) {\n    var nm = input[line]['split']('\\x20')['map'](Number);\n    line++;\n    var n = nm[0x0];\n    var m = nm[0x1];\n    if (n == 0x0 && m == 0x0)\n        break;\n    var infected = [];\n    for (var i = 0x0; i < n; i++)\n        infected[i] = !![];\n    infected[0x0] = ![];\n    var tsd = [];\n    for (var i = 0x0; i < m; i++) {\n        var packet = input[line]['split']('\\x20')['map'](Number);\n        line++;\n        tsd['push']([\n            packet[0x0],\n            packet[0x1] - 0x1,\n            packet[0x2] - 0x1\n        ]);\n    }\n    tsd['sort'](function (_0x66efd, _0x59d221) {\n        return _0x66efd[0x0] - _0x59d221[0x0];\n    });\n    tsd['forEach'](function (_0x2297a4) {\n        var _0x1e5cd7 = _0x2297a4[0x1];\n        var _0x3a5c99 = _0x2297a4[0x2];\n        if (!infected[_0x1e5cd7])\n            infected[_0x3a5c99] = ![];\n    });\n    var answer = 0x0;\n    infected['forEach'](function (_0x226a57) {\n        if (!_0x226a57)\n            answer++;\n    });\n    console['log'](answer);\n}", "test_cases": [["3 2\n1 1 2\n2 2 3\n3 2\n2 3 2\n1 2 1\n0 0", "3\n1"]], "original": "var data = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar input = data.trim().split(\"\\n\");\nvar line = 0;\nwhile (true) {\n    var nm = input[line].split(\" \").map(Number);\n    line++;\n    var n = nm[0];\n    var m = nm[1];\n    if (n == 0 && m == 0)\n        break;\n    var infected = [];\n    for (var i = 0; i < n; i++)\n        infected[i] = true;\n    infected[0] = false;\n    var tsd = [];\n    for (var i = 0; i < m; i++) {\n        var packet = input[line].split(\" \").map(Number);\n        line++;\n        tsd.push([packet[0], packet[1] - 1, packet[2] - 1]);\n    }\n    tsd.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n    tsd.forEach(function (packet) {\n        var s = packet[1];\n        var d = packet[2];\n        if (!infected[s])\n            infected[d] = false;\n    });\n    var answer = 0;\n    infected.forEach(function (packet) {\n        if (!packet)\n            answer++;\n    });\n    console.log(answer);\n}", "language": "JavaScript"}
{"filename": "p01314_1", "type": "JavaScript", "obfuscated": "function Main(_0xdbb787) {\n    _0xdbb787 = _0xdbb787['split']('\\x0a');\n    for (var _0x2698fb = 0x0; 0x1; _0x2698fb++) {\n        var _0x38fc48 = parseInt(_0xdbb787[_0x2698fb], 0xa);\n        var _0x385f2b = 0x0;\n        if (_0x38fc48 == 0x0)\n            break;\n        for (var _0x168f8a = 0x2; _0x168f8a < _0x38fc48; _0x168f8a++) {\n            if (_0x38fc48 - _0x168f8a * (_0x168f8a - 0x1) / 0x2 > 0x0 && (_0x38fc48 - _0x168f8a * (_0x168f8a - 0x1) / 0x2) % _0x168f8a == 0x0) {\n                _0x385f2b++;\n            }\n        }\n        console['log'](_0x385f2b);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["9\n500\n0", "2\n3"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    for(var i = 0;1;i++){\n        var n = parseInt(input[i],10);var ans = 0;\n        if(n == 0)\n            break;\n        for(var j = 2;j < n;j++){\n            if(n - j * (j - 1) / 2 > 0 && (n - j * (j - 1) / 2) % j == 0){\n                ans++;\n            }\n        }\n        console.log(ans);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p01316_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = arr['shift']()['split']('\\x20');\n    if (nm['join']('\\x20') == '0\\x200')\n        break;\n    var n = nm[0x0];\n    var m = nm[0x1];\n    var M = [];\n    for (var i = 0x0; i < m; i++)\n        M['push'](arr['shift']() - 0x0);\n    var N = [];\n    for (var i = 0x0; i < n; i++)\n        N['push'](arr['shift']() - 0x0);\n    var dp = [];\n    for (var i = 0x0; i <= n; i++) {\n        dp[i] = [];\n        for (var j = 0x0; j <= 0xff; j++) {\n            dp[i][j] = Infinity;\n        }\n    }\n    dp[0x0][0x80] = 0x0;\n    for (var i = 0x1; i <= n; i++) {\n        for (var j = 0x0; j <= 0xff; j++) {\n            if (dp[i - 0x1][j] != Infinity) {\n                for (var k = 0x0; k < m; k++) {\n                    var jm = j + M[k];\n                    if (jm < 0x0)\n                        jm = 0x0;\n                    if (jm > 0xff)\n                        jm = 0xff;\n                    dp[i][jm] = Math['min'](dp[i][jm], dp[i - 0x1][j] + Math['pow'](N[i - 0x1] - jm, 0x2));\n                }\n            }\n        }\n    }\n    var min = Infinity;\n    dp[n]['forEach'](function (_0x2b4c7b) {\n        min = Math['min'](min, _0x2b4c7b);\n    });\n    console['log'](min);\n}", "test_cases": [["2 7\n4\n2\n1\n0\n-1\n-2\n-4\n131\n137\n2 7\n4\n2\n1\n0\n-1\n-2\n-4\n131\n123\n10 7\n-4\n-2\n-1\n0\n1\n2\n4\n132\n134\n135\n134\n132\n128\n124\n122\n121\n122\n5 1\n255\n0\n0\n0\n0\n0\n4 1\n0\n255\n0\n255\n0\n0 0", "2\n8\n0\n325125\n65026"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nm=arr.shift().split(\" \");\n   if(nm.join(\" \")==\"0 0\")break;\n   var n=nm[0];\n   var m=nm[1];\n   var M=[];\n   for(var i=0;i<m;i++)M.push(arr.shift()-0);\n   var N=[];\n   for(var i=0;i<n;i++)N.push(arr.shift()-0);\n   var dp=[];\n   for(var i=0;i<=n;i++){\n      dp[i]=[];\n      for(var j=0;j<=255;j++){\n         dp[i][j]=Infinity;\n      }\n   }\n   dp[0][128]=0;\n   for(var i=1;i<=n;i++){\n      for(var j=0;j<=255;j++){\n         if(dp[i-1][j]!=Infinity){\n            for(var k=0;k<m;k++){\n               var jm=j+M[k];\n               if(jm<0)jm=0;\n               if(jm>255)jm=255;\n               dp[i][jm]=Math.min(dp[i][jm],dp[i-1][j]+Math.pow(N[i-1]-jm,2));\n            }\n         }\n      }\n   }\n   var min=Infinity;\n   dp[n].forEach(function(v){\n      min=Math.min(min,v);\n   });\n   console.log(min);\n}", "language": "JavaScript"}
{"filename": "p01479_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar str = input['replace'](/egg/g, 'E')['replace'](/chicken/g, 'C');\nvar ary = str['replace'](/EE/g, 'EAE')['replace'](/CC/g, 'CAC')['split']('A');\nvar ans = '';\nary['forEach'](function (_0x50c060) {\n    if (ans['length'] < _0x50c060['length'])\n        ans = _0x50c060;\n});\nconsole['log'](ans['slice'](-0x1) == 'E' ? 'egg' : 'chicken');", "test_cases": [["eggchickenegg", "egg"], ["chickeneggeggchicken", "egg"], ["eggeggchicken", "chicken"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str=input.replace(/egg/g,\"E\").replace(/chicken/g,\"C\");\nvar ary=str.replace(/EE/g,\"EAE\").replace(/CC/g,\"CAC\").split(\"A\");\nvar ans=\"\";\nary.forEach(function(v){\n   if(ans.length<v.length)ans=v;\n});\nconsole.log((ans.slice(-1)==\"E\")?\"egg\":\"chicken\");", "language": "JavaScript"}
{"filename": "p02234_1", "type": "JavaScript", "obfuscated": "config = {\n    'input': '/dev/stdin',\n    'newline': '\\x0a'\n};\nM = require('fs')['readFileSync'](config['input'], 'ascii')['trim']()['split'](config['newline']);\nM = M['map'](function (_0x5fcb96) {\n    return _0x5fcb96['split']('\\x20')['map'](Number);\n});\nn = M[0x0][0x0];\nmin = {};\nfor (i = 0x1; i <= n; i++)\n    min[i] = {};\nfor (i = 0x1; i <= n; i++)\n    min[i][i] = 0x0;\nfor (i = 0x1; i < n; i++) {\n    for (j = 0x1, k = 0x1 + i; k <= n; j++, k++) {\n        min[j][k] = Number['MAX_VALUE'];\n        for (l = j; l < k; l++) {\n            min[j][k] = Math['min'](min[j][k], M[j][0x0] * M[l][0x1] * M[k][0x1] + min[j][l] + min[l + 0x1][k]);\n        }\n    }\n}\nconsole['log'](min[0x1][n]);", "test_cases": [["6\n30 35\n35 15\n15 5\n5 10\n10 20\n20 25", "15125"]], "original": "//config = { input: 'tmp', newline: '\\r\\n' }; // win\nconfig = { input: '/dev/stdin', newline: '\\n' }; // linux\n\nM = require('fs').readFileSync(config.input, 'ascii')\n  .trim()\n  .split(config.newline);\nM = M.map(\n  function (line) {\n    return line.split(' ').map(Number);\n  });\nn = M[0][0];\n\nmin = {};\nfor (i = 1; i <= n; i++) min[i] = {};\nfor (i = 1; i <= n; i++) min[i][i] = 0;\nfor (i = 1; i < n; i++) {\n  for (j = 1, k = 1 + i; k <= n; j++, k++) {\n    min[j][k] = Number.MAX_VALUE;\n    for (l = j; l < k; l++) {\n      min[j][k] = Math.min(\n        min[j][k],\n        M[j][0] * M[l][1] * M[k][1] + min[j][l] + min[l+1][k]);\n    }\n  }\n}\nconsole.log(min[1][n]);", "language": "JavaScript"}
{"filename": "p02250_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar str = arr[0x0];\nvar n = arr[0x1] - 0x0 + 0x2;\nvar ans = '';\nfor (var i = 0x2; i < n; i++) {\n    ans += (str['includes'](arr[i]) ? 0x1 : 0x0) + '\\x0a';\n}\nconsole['log'](ans['trim']());", "test_cases": [["aabaaa\n4\naa\nba\nbb\nxyz", "1\n1\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar str=arr[0];\nvar n = (arr[1]-0)+2;\nvar ans=\"\";\nfor(var i=2;i<n;i++){\n   ans += (str.includes(arr[i])?1:0) +\"\\n\";\n}\nconsole.log(ans.trim());\n", "language": "JavaScript"}
{"filename": "p02343_1", "type": "JavaScript", "obfuscated": "const findSet = _0x4095bb => {\n    return _0x4f337f => {\n        if (_0x4f337f != _0x4095bb[_0x4f337f])\n            _0x4095bb[_0x4f337f] = findSet(_0x4095bb)(_0x4095bb[_0x4f337f]);\n        return _0x4095bb[_0x4f337f];\n    };\n};\nconst link = (_0x1e1b91, _0x3d8401) => {\n    return (_0x4126bd, _0x14e798) => {\n        if (_0x3d8401[_0x4126bd] > _0x3d8401[_0x14e798])\n            _0x1e1b91[_0x14e798] = _0x4126bd;\n        else {\n            _0x1e1b91[_0x4126bd] = _0x14e798;\n            if (_0x3d8401[_0x4126bd] === _0x3d8401[_0x14e798])\n                _0x3d8401[_0x14e798]++;\n        }\n    };\n};\nconst dsFactory = _0x5b4a15 => {\n    this['p'] = [];\n    this['r'] = [];\n    for (let _0x2ec118 = 0x0; _0x2ec118 < _0x5b4a15; _0x2ec118++) {\n        this['p'][_0x2ec118] = _0x2ec118;\n        this['r'][_0x2ec118] = 0x0;\n    }\n    this['findSet'] = findSet(this['p']);\n    this['link'] = link(this['p'], this['r']);\n    return {\n        'same': (_0x2ea3a6, _0x3f6e3a) => this['findSet'](_0x2ea3a6) === this['findSet'](_0x3f6e3a),\n        'unite': (_0x338dff, _0x5ee8e0) => this['link'](this['findSet'](_0x338dff), this['findSet'](_0x5ee8e0))\n    };\n};\nconst input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst lines = input['split']('\\x0a');\nconst [n, q] = lines['shift']()['split']('\\x20')['map'](Number);\nconst ds = dsFactory(n);\nlines['forEach'](_0x109633 => {\n    const [_0x5b27f8, _0xb45132, _0x127c88] = _0x109633['split']('\\x20')['map'](Number);\n    switch (_0x5b27f8) {\n    case 0x0:\n        ds['unite'](_0xb45132, _0x127c88);\n        break;\n    case 0x1:\n        const _0x3edf66 = ds['same'](_0xb45132, _0x127c88) ? 0x1 : 0x0;\n        console['log'](_0x3edf66);\n        break;\n    }\n});", "test_cases": [["5 12\n0 1 4\n0 2 3\n1 1 2\n1 3 4\n1 1 4\n1 3 2\n0 1 3\n1 2 4\n1 3 0\n0 0 4\n1 0 2\n1 3 0", "0\n0\n1\n1\n1\n0\n1\n1"]], "original": "const findSet = p => {\n\treturn x => {\n\t\tif (x != p[x]) p[x] = findSet(p)(p[x]);\n\t\treturn p[x];\n\t}\n}\nconst link = (p,r) => {\n\treturn (x,y) => {\n\t\tif (r[x] > r[y]) p[y] = x;\n\t\telse {\n\t\t\tp[x] = y;\n\t\t\tif (r[x] === r[y]) r[y]++;\n\t\t}\n\t}\n}\nconst dsFactory = n => {\n\tthis.p = [];\n\tthis.r = [];\n\tfor (let i = 0; i < n; i++) {\n\t\tthis.p[i] = i;\n\t\tthis.r[i] = 0;\n\t}\n\tthis.findSet = findSet(this.p);\n\tthis.link = link(this.p,this.r);\n\treturn {\n\t\tsame: (x,y) => this.findSet(x) === this.findSet(y),\n\t\tunite: (x,y) => this.link(this.findSet(x),this.findSet(y))\n\t}\n}\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8');\nconst lines = input.split(\"\\n\");\nconst [n,q] = lines.shift().split(\" \").map(Number);\n\nconst ds = dsFactory(n);\n\nlines.forEach(x => {\n\tconst [t,a,b] = x.split(\" \").map(Number);\n\tswitch (t) {\n\t\tcase 0:\n\t\t\tds.unite(a,b);\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tconst ret = ds.same(a,b) ? 1 : 0;\n\t\t\tconsole.log(ret);\n\t\t\tbreak;\n\t}\n});\n", "language": "JavaScript"}
{"filename": "p02555_1", "type": "JavaScript", "obfuscated": "const main = _0x21e5be => {\n    const _0x18af52 = 0xa ** 0x9 + 0x7;\n    const _0x217f4 = Number(_0x21e5be['trim']());\n    const _0x57f9a6 = [\n        0x1,\n        ...new Array(_0x217f4)['fill'](0x0)\n    ];\n    for (let _0x32ab7b = 0x3; _0x32ab7b < _0x57f9a6['length']; _0x32ab7b++) {\n        let _0x2775da = 0x0;\n        for (let _0x2549ed = _0x32ab7b - 0x3; _0x2549ed >= 0x0; _0x2549ed--) {\n            _0x2775da = (_0x2775da + _0x57f9a6[_0x2549ed]) % _0x18af52;\n        }\n        _0x57f9a6[_0x32ab7b] = _0x2775da;\n    }\n    return console['log']((_0x57f9a6[_0x217f4] % _0x18af52 + _0x18af52) % _0x18af52);\n};\nprocess['env']['MYTEST'] ? process['env']['MYTEST'] === 'test' ? test() : main(require('fs')['readFileSync']('dev/stdin', 'utf8')) : main(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7", "3"], ["2", "0"], ["1729", "294867501"]], "original": "const main = (input) => {\n  const mod = (10**9 + 7)\n  const s = Number(input.trim())\n\n  const dp = [1, ...new Array(s).fill(0)]\n\n  for (let x=3; x<dp.length; x++) {\n    let sum = 0\n\n    for (let i=x-3; i>=0; i--) {\n      sum = (sum + dp[i]) % mod\n    }\n\n    dp[x] = sum\n  }\n\n  return console.log((dp[s] % mod + mod) % mod)\n}\n\nprocess.env.MYTEST\n  ? (process.env.MYTEST === 'test' ? test() : main(require('fs').readFileSync('dev/stdin', 'utf8')))\n  : main(require('fs').readFileSync('/dev/stdin', 'utf8'))", "language": "JavaScript"}
{"filename": "p02678_1", "type": "JavaScript", "obfuscated": "(_0xd18cea => {\n    const [[_0x18bcb3, _0x4a7761], ..._0x42b6a3] = _0xd18cea['trim']()['split']('\\x0a')['map'](_0x3dc8c7 => _0x3dc8c7['split']('\\x20')['map'](_0x1e5154 => _0x1e5154 | 0x0));\n    const _0x1408ce = [], _0x18080f = [0x0], _0x46e6ff = [];\n    for (let _0x4e82fa = 0x1; _0x4e82fa <= _0x18bcb3; _0x4e82fa++) {\n        _0x1408ce[_0x4e82fa] = Infinity;\n        _0x18080f[_0x4e82fa] = Infinity;\n        _0x46e6ff[_0x4e82fa] = [];\n    }\n    for (let _0x1cf140 = 0x0; _0x1cf140 < _0x4a7761; _0x1cf140++) {\n        const [_0xb1e2e9, _0x140fd7] = _0x42b6a3[_0x1cf140];\n        _0x46e6ff[_0xb1e2e9]['push'](_0x140fd7);\n        _0x46e6ff[_0x140fd7]['push'](_0xb1e2e9);\n    }\n    let _0x23cb9a = [];\n    function _0x16d43d(_0x10232e, _0x1cba37) {\n        for (let _0x3b9aef of _0x46e6ff[_0x1cba37]) {\n            if (_0x1408ce[_0x3b9aef] > _0x10232e) {\n                _0x1408ce[_0x3b9aef] = _0x10232e;\n                _0x18080f[_0x3b9aef] = _0x1cba37;\n                _0x23cb9a['push'](() => _0x16d43d(_0x10232e + 0x1, _0x3b9aef));\n            }\n        }\n    }\n    _0x16d43d(0x0, 0x1);\n    while (_0x23cb9a['length']) {\n        let _0x5ef2ec;\n        while (_0x5ef2ec = _0x23cb9a['pop']())\n            _0x5ef2ec();\n    }\n    if (_0x18080f['slice'](0x2)['some'](_0x290cc4 => _0x290cc4 > _0x18bcb3))\n        return console['log']('No');\n    console['log']('Yes\\x0a' + _0x18080f['slice'](0x2)['join']('\\x0a'));\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 4\n1 2\n2 3\n3 4\n4 2", "Yes\n1\n2\n2"], ["6 9\n3 4\n6 1\n2 4\n5 3\n4 6\n1 5\n6 2\n4 5\n5 6", "Yes\n6\n5\n5\n1\n1"]], "original": "(args => {\n  const [[N,M],...path] = args.trim().split('\\n').map(a=>a.split(' ').map(a=>a|0));\n  const dist = [], sign = [0], branch = [];\n  for ( let i = 1; i <= N; i++ ) {\n    dist[i] = Infinity; sign[i] = Infinity; branch[i] = [];\n  }\n  for ( let i = 0; i < M; i++ ) {\n    const [A,B] = path[i];\n    branch[A].push(B);\n    branch[B].push(A);\n  }\n  let stack = [];\n  function mark( step, i ) {\n    for ( let next of branch[i] ) {\n      if ( dist[next] > step ) {\n        dist[next] = step;\n        sign[next] = i;\n        stack.push(()=>mark(step+1,next));\n      }\n    }\n  }\n  mark(0,1);\n  while( stack.length ) {\n    let s;\n    while ( s = stack.pop() ) s();\n  }\n  if ( sign.slice(2).some(v=>v>N) ) return console.log('No');\n  console.log('Yes\\n'+sign.slice(2).join('\\n'));\n})(require('fs').readFileSync('/dev/stdin', 'utf8'))\n", "language": "JavaScript"}
{"filename": "p02788_1", "type": "JavaScript", "obfuscated": "function main(_0x1abed8) {\n    var _0x560f8b = _0x1abed8[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x3a4b81 = _0x1abed8[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x3032a1 = _0x1abed8[0x0]['split']('\\x20')[0x2] - 0x0;\n    var _0x2cf2bb = [];\n    for (var _0x5cf55a = 0x1; _0x5cf55a <= _0x560f8b; _0x5cf55a++) {\n        _0x2cf2bb['push'](_0x1abed8[_0x5cf55a]['split']('\\x20')['map'](_0x54ddd => _0x54ddd - 0x0));\n    }\n    _0x2cf2bb = _0x2cf2bb['sort']((_0x167b0d, _0x9bd11f) => _0x167b0d[0x0] - _0x9bd11f[0x0]);\n    var _0x18ca41 = 0x0;\n    for (var _0x5cf55a = 0x0; _0x5cf55a < _0x560f8b; _0x5cf55a++) {\n        var _0x18b1a0 = _0x2cf2bb[_0x5cf55a];\n        if (_0x18b1a0[0x1] > 0x0) {\n            var _0x443c2e = Math['ceil'](_0x18b1a0[0x1] / _0x3032a1);\n            _0x18ca41 += _0x443c2e;\n            for (var _0x2840aa = _0x5cf55a; _0x2840aa < _0x560f8b; _0x2840aa++) {\n                var _0x2415f3 = _0x2cf2bb[_0x2840aa];\n                if (_0x2415f3[0x0] <= _0x18b1a0[0x0] + _0x3a4b81 * 0x2 + 0x1) {\n                    _0x2415f3[0x1] -= _0x3032a1 * _0x443c2e;\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n    console['log'](_0x18ca41);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["3 3 2\n1 2\n5 4\n9 2", "2"], ["9 4 1\n1 5\n2 4\n3 3\n4 2\n5 1\n6 2\n7 3\n8 4\n9 5", "5"], ["3 0 1\n300000000 1000000000\n100000000 1000000000\n200000000 1000000000", "3000000000"]], "original": "function main(input) {\n  var N = input[0].split(\" \")[0]-0;\n  var D = input[0].split(\" \")[1]-0;\n  var A = input[0].split(\" \")[2]-0;\n  var list = [];\n  for(var i=1;i<=N;i++){\n    list.push(input[i].split(\" \").map(v=>v-0));\n  }\n  list = list.sort((a,b)=>a[0]-b[0]);\n\n  var ans = 0;\n  for (var i = 0; i < N; i++) {\n    var x = list[i];\n    if(x[1] > 0){\n      var time = Math.ceil(x[1]/A);\n      ans += time;\n      for(var j=i;j<N;j++){\n        var y = list[j];\n        if(y[0]<=x[0]+D*2+1){\n          y[1] -= A*time;\n        }else{\n          break;\n        }\n      }\n    }\n  }\n  console.log(ans);\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8').split(\"\\n\"))\n", "language": "JavaScript"}
{"filename": "p02862_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst ncr = (_0x4efe4e, _0x986830, _0x52461d) => {\n    _0x52461d = _0x52461d || 0x3b9aca00 + 0x7;\n    const _0x40f488 = Math['max'](_0x4efe4e, _0x986830);\n    const _0x1e1be1 = Math['min'](_0x4efe4e, _0x986830);\n    const _0x1d0665 = Math['min'](_0x1e1be1, _0x40f488 - _0x1e1be1);\n    const _0x5a3af4 = new Array(_0x1d0665 + 0x1);\n    const _0x55b94a = new Array(_0x1d0665 + 0x1);\n    let _0x264bba = 0x1;\n    if (_0x1d0665 > 0x0) {\n        for (let _0x371704 = 0x1; _0x371704 <= _0x1d0665; _0x371704++) {\n            _0x5a3af4[_0x371704] = _0x40f488 - _0x1d0665 + _0x371704;\n            _0x55b94a[_0x371704] = _0x371704;\n        }\n        for (let _0x1e4f91 = 0x2; _0x1e4f91 <= _0x1d0665; _0x1e4f91++) {\n            const _0x19b295 = _0x55b94a[_0x1e4f91];\n            const _0xf42bf7 = _0x19b295 > 0x1 ? -((_0x40f488 - _0x1d0665) % _0x1e4f91) : 0x0;\n            for (let _0x4a28ff = _0x1e4f91; _0x4a28ff <= _0x1d0665; _0x4a28ff += _0x1e4f91) {\n                _0x5a3af4[_0x4a28ff + _0xf42bf7] /= _0x19b295;\n                _0x55b94a[_0x4a28ff] /= _0x19b295;\n            }\n        }\n        for (let _0x2afbad = 0x1; _0x2afbad <= _0x1d0665; _0x2afbad++) {\n            if (_0x5a3af4[_0x2afbad] > 0x1)\n                _0x264bba = _0x264bba * _0x5a3af4[_0x2afbad] % _0x52461d;\n        }\n    }\n    return _0x264bba;\n};\nfunction main(_0x46ce95) {\n    _0x46ce95 = _0x46ce95['trim']()['split']('\\x20');\n    const _0xf5d1d9 = Number(_0x46ce95[0x0]);\n    const _0x31f00b = Number(_0x46ce95[0x1]);\n    let _0x4f013c = 0x0;\n    for (let _0x5c011d = Math['floor'](_0xf5d1d9 / 0x2); _0x5c011d >= 0x0; _0x5c011d--) {\n        const _0x1f89ed = _0xf5d1d9 - _0x5c011d * 0x2;\n        if (_0x1f89ed * 0x2 + _0x5c011d === _0x31f00b) {\n            _0x4f013c = ncr(_0x5c011d + _0x1f89ed, _0x5c011d);\n        }\n    }\n    console['log'](_0x4f013c);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3", "2"], ["2 2", "0"], ["999999 999999", "151840682"]], "original": "'use strict'\n\nconst ncr = (n, r, mod) => {\n  mod = mod || 1e9+7\n  const a = Math.max(n, r)\n  const b = Math.min(n, r)\n  const p = Math.min(b, a-b)\n  const nu = new Array(p + 1)\n  const de = new Array(p + 1)\n  let dest = 1\n  if (p > 0) {\n    for (let i = 1; i <= p; i++) {\n      nu[i] = a - p + i \n      de[i] = i\n    }\n    for (let k = 2; k <= p; k++) {\n      const piv = de[k]\n      const j = (piv > 1) ? -((a - p) % k) : 0\n      for (let i = k; i <= p; i += k) {\n        nu[i + j] /= piv; de[i] /= piv\n      }\n    }\n    for (let i = 1; i <= p; i++) {\n      if (nu[i] > 1) dest = dest * nu[i] % mod\n    }\n  }\n  return dest\n}\n\nfunction main(inp) {\n  inp = inp.trim().split(' ');\n  const x = Number(inp[0])\n  const y = Number(inp[1])\n\n  let sum = 0\n  for (let i = Math.floor(x / 2); i >= 0; i--) {\n    const a = x - i * 2\n    if (a * 2 + i === y) {\n      sum = ncr(i+a, i)\n    }\n  }\n  \n  console.log(sum)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03008_1", "type": "JavaScript", "obfuscated": "'use strict';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf-8');\nlet inputString = '';\nlet currentLine = 0x0;\nprocess['stdin']['on']('data', _0xa083af => {\n    inputString += _0xa083af;\n});\nprocess['stdin']['on']('end', _0x20ebd3 => {\n    inputString = inputString['split']('\\x0a');\n    main();\n});\nfunction readLine() {\n    return inputString[currentLine++];\n}\nfunction F(_0x1031ff, _0x3a3048, _0x2eac9f) {\n    let _0x3f9fc6 = Array(_0x1031ff + 0x1)['fill'](0x0);\n    for (let _0x45d98d = 0x0; _0x45d98d <= _0x1031ff; _0x45d98d++) {\n        let _0x1c4f6c = _0x45d98d;\n        for (let _0x50fbbc = 0x0; _0x50fbbc < 0x3; _0x50fbbc++) {\n            if (_0x45d98d >= _0x3a3048[_0x50fbbc]) {\n                let _0x4cfad0 = _0x3f9fc6[_0x45d98d - _0x3a3048[_0x50fbbc]] + _0x2eac9f[_0x50fbbc];\n                if (_0x1c4f6c < _0x4cfad0) {\n                    _0x1c4f6c = _0x4cfad0;\n                }\n            }\n        }\n        _0x3f9fc6[_0x45d98d] = _0x1c4f6c;\n    }\n    return _0x3f9fc6[_0x1031ff];\n}\nfunction main() {\n    const _0x18c76c = parseInt(readLine(), 0xa);\n    const _0x9ae4aa = readLine()['split']('\\x20')['map'](_0x55ed9c => parseInt(_0x55ed9c, 0xa));\n    const _0x558e77 = readLine()['split']('\\x20')['map'](_0x535584 => parseInt(_0x535584, 0xa));\n    let _0x26eb4c = F(_0x18c76c, _0x9ae4aa, _0x558e77);\n    let _0x416176 = F(_0x26eb4c, _0x558e77, _0x9ae4aa);\n    console['log'](_0x416176);\n}", "test_cases": [["23\n1 1 1\n2 1 1", "46"]], "original": "'use strict';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf-8');\n\nlet inputString = '';\nlet currentLine = 0;\n\nprocess.stdin.on('data', inputStdin => {\n    inputString += inputStdin;\n});\n\nprocess.stdin.on('end', _ => {\n    inputString = inputString.split('\\n')\n        // .map(str => str.trim());\n    main();\n});\n\nfunction readLine() {\n    return inputString[currentLine++];\n}\n\nfunction F(N, A, B) {\n\tlet dp = Array(N+1).fill(0);\n\tfor (let n=0;n<=N;n++){\n\t\tlet x = n;\n\t\tfor (let j=0;j<3;j++){\n\t\t\tif (n>=A[j]){\n\t\t\t\tlet y = dp[n-A[j]] + B[j];\n\t\t\t\tif (x<y){\n\t\t\t\t\tx = y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdp[n] = x;\n\t}\n\treturn dp[N];\n}\n\nfunction main() {\n    const n = parseInt(readLine(), 10);\n    const a = readLine().split(' ').map(_ => parseInt(_, 10));\n    const b = readLine().split(' ').map(_ => parseInt(_, 10));\n    let n1 = F(n, a, b);\n    let n2 = F(n1, b, a);\n\tconsole.log(n2);\n}\n", "language": "JavaScript"}
{"filename": "p03063_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction I(_0x2770ac, _0x34d318) {\n    this['_s'] = _0x2770ac['split']('\\x0a');\n    this['_c'] = 0x0;\n    this['_l'] = 0x0;\n    this['_f'] = _0x34d318 || Number;\n}\nI['prototype']['a'] = function () {\n    var _0x4e212e = this['_s'][this['_l']];\n    if (!_0x4e212e)\n        return;\n    var _0x19a85c = _0x4e212e['trim']()['split']('\\x20');\n    var _0x49420a = _0x19a85c[this['_c']];\n    this['_c']++;\n    if (_0x19a85c['length'] === this['_c']) {\n        this['_c'] = 0x0;\n        this['_l']++;\n    }\n    return this['_f'](_0x49420a);\n};\nI['prototype']['l'] = function () {\n    var _0x3c5ebc = this['_s'][this['_l']];\n    if (!_0x3c5ebc)\n        return;\n    this['_c'] = 0x0;\n    this['_l']++;\n    return _0x3c5ebc['split']('\\x20')['map'](this['_f']);\n};\nfunction main(_0x10ec13) {\n    var _0x7b3708 = new I(_0x10ec13, String);\n    var _0xbf39a0 = Number(_0x7b3708['a']());\n    var _0x5f3e95 = _0x7b3708['a']();\n    var _0x268900 = 0x0;\n    var _0x1f3fd7 = 0x0;\n    for (var _0x3b4a00 = 0x0; _0x3b4a00 < _0x5f3e95['length']; _0x3b4a00++) {\n        if (_0x5f3e95[_0x3b4a00] === '.')\n            _0x268900 += 0x1;\n    }\n    let _0x6a512d = _0x268900;\n    for (var _0x3b4a00 = 0x0; _0x3b4a00 < _0x5f3e95['length']; _0x3b4a00++) {\n        if (_0x5f3e95[_0x3b4a00] === '#') {\n            _0x1f3fd7 += 0x1;\n        } else {\n            _0x268900 -= 0x1;\n        }\n        if (_0x1f3fd7 + _0x268900 < _0x6a512d) {\n            _0x6a512d = _0x1f3fd7 + _0x268900;\n        }\n    }\n    console['log'](_0x6a512d);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n#.#", "1"], ["5\n#.##.", "2"], ["9\n.........", "0"]], "original": "\"use strict\";\nfunction I(s,f){this._s=s.split(\"\\n\");this._c=0;this._l=0;this._f=f||Number}I.prototype.a=function(){var l=this._s[this._l];if(!l)return;var t=l.trim().split(\" \");var a=t[this._c];this._c++;if(t.length===this._c){this._c=0;this._l++}return this._f(a)};I.prototype.l=function(){var l=this._s[this._l];if(!l)return;this._c=0;this._l++;return l.split(\" \").map(this._f)};\n\nfunction main(input) {\n  var o = new I(input,String);\n\n  var n = Number(o.a());\n  var s = o.a();\n\n  var white = 0;\n  var black = 0;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \".\") white += 1;\n  }\n\n  let min = white;\n  for (var i = 0; i < s.length; i++) {\n    if (s[i] === \"#\") {\n      black += 1;\n    } else {\n      white -= 1;\n    }\n\n    if (black + white < min) {\n      min = black + white;\n    }\n  }\n  console.log(min);\n}\n\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03275_1", "type": "JavaScript", "obfuscated": "function median(_0x26a67f) {\n    return _0x26a67f['sort']()[Math['floor'](_0x26a67f['length'] / 0x2)];\n}\nfunction Main(_0x1f0365) {\n    _0x1f0365 = _0x1f0365['split']('\\x0a');\n    N = parseInt(_0x1f0365[0x0]);\n    a = _0x1f0365[0x1]['split']('\\x20');\n    m = [];\n    for (var _0x29b666 = 0x0; _0x29b666 < N; _0x29b666++) {\n        for (var _0x1cf704 = _0x29b666 + 0x1; _0x1cf704 < N + 0x1; _0x1cf704++) {\n            m['push'](median(a['slice'](_0x29b666, _0x1cf704)));\n        }\n    }\n    console['log'](median(m));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n10 30 20", "30"], ["1\n10", "10"], ["10\n5 9 5 9 8 9 3 5 4 3", "8"]], "original": "function median (l) {\n  return l.sort()[Math.floor(l.length / 2)]\n}\n\nfunction Main(input) {\n  input = input.split(\"\\n\")\n  N = parseInt(input[0])\n  a = input[1].split(\" \")\n  m = []\n\n  for (var i = 0 ; i < N ; i++ ) {\n    for (var j = i + 1 ; j < N + 1 ; j++ ) {\n      m.push(median(a.slice(i, j)))\n    }\n  }\n  console.log(median(m))\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03364_1", "type": "JavaScript", "obfuscated": "var lines = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a');\nvar n = lines[0x0] | 0x0;\nvar s = lines['slice'](0x1);\nfunction good(_0x480f49, _0x55cfa1) {\n    for (var _0x55d393 = 0x0; _0x55d393 < n; ++_0x55d393) {\n        for (var _0x4ae1f4 = 0x0; _0x4ae1f4 < n; ++_0x4ae1f4) {\n            if (s[(_0x55d393 + _0x480f49) % n][(_0x4ae1f4 + _0x55cfa1) % n] !== s[(_0x4ae1f4 + _0x480f49) % n][(_0x55d393 + _0x55cfa1) % n])\n                return 0x0;\n        }\n    }\n    return 0x1;\n}\nvar ans = 0x0;\nfor (var a = 0x0; a < n; ++a) {\n    for (var b = 0x0; b < n; ++b) {\n        ans += good(a, b);\n    }\n}\nconsole['log'](ans);", "test_cases": [["2\nab\nca", "2"], ["4\naaaa\naaaa\naaaa\naaaa", "16"], ["5\nabcde\nfghij\nklmno\npqrst\nuvwxy", "0"]], "original": "var lines = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\");\n\nvar n=lines[0]|0;\nvar s=lines.slice(1);\n\nfunction good(a,b){\n    for(var i=0;i<n;++i){\n        for(var j=0;j<n;++j){\n            if(s[(i+a)%n][(j+b)%n]!==s[(j+a)%n][(i+b)%n])return 0;\n        }\n    }\n    return 1;\n}\n\nvar ans=0;\nfor(var a=0;a<n;++a){\n    for(var b=0;b<n;++b){\n        ans+=good(a,b);\n    }\n}\nconsole.log(ans);\n", "language": "JavaScript"}
{"filename": "p03388_1", "type": "JavaScript", "obfuscated": "function Main(_0x286b63) {\n    _0x286b63 = _0x286b63['split']('\\x0a');\n    const _0x22af8f = +_0x286b63[0x0];\n    for (var _0x42d841 = 0x0; _0x42d841 < _0x22af8f; _0x42d841++) {\n        var _0x1ed5f7 = _0x286b63[_0x42d841 + 0x1]['split']('\\x20')['map'](_0x45f252 => +_0x45f252);\n        var _0x151139 = Math['max'](_0x1ed5f7[0x0], _0x1ed5f7[0x1]);\n        _0x1ed5f7 = Math['min'](_0x1ed5f7[0x0], _0x1ed5f7[0x1]);\n        var _0x4bb50d = Math['ceil'](Math['sqrt'](_0x1ed5f7 * _0x151139));\n        var _0x2a602c = (_0x1ed5f7 - 0x1) * 0x2;\n        if (_0x1ed5f7 < _0x151139 - 0x1)\n            _0x2a602c++;\n        for (var _0x3f0aa4 = _0x1ed5f7 + 0x1; _0x3f0aa4 < _0x4bb50d; _0x3f0aa4++) {\n            if (Math['floor'](_0x1ed5f7 / _0x3f0aa4 * _0x151139) === _0x3f0aa4)\n                _0x2a602c++;\n            else\n                _0x2a602c += 0x2;\n        }\n        console['log'](_0x2a602c);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8\n1 4\n10 5\n3 3\n4 11\n8 9\n22 40\n8 36\n314159265 358979323", "1\n12\n4\n11\n14\n57\n31\n671644785"]], "original": "function Main(s) {\n  s = s.split(\"\\n\");\n  const q = +s[0];\n  for(var i = 0; i < q; i++){\n    var a = s[i+1].split(\" \").map(a => +a);\n    var b = Math.max(a[0], a[1]);\n    a = Math.min(a[0], a[1]);\n    var c = Math.ceil(Math.sqrt(a * b));\n    var ans = (a - 1) * 2;\n    if(a < b - 1) ans++;\n    for(var j = a + 1; j < c; j++){\n      if(Math.floor(a / j * b) === j)ans++;\n      else ans += 2;\n    }\n    console.log(ans);\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03393_1", "type": "JavaScript", "obfuscated": "function Main(_0x5f52a2) {\n    const _0x379c66 = _0x5f52a2['length'];\n    const _0x551e0d = 'a'['charCodeAt']();\n    var _0x423f51 = Array(0x1a)['fill'](0x1);\n    var _0x2ce290;\n    if (_0x379c66 < 0x1a) {\n        for (_0x2ce290 = 0x0; _0x2ce290 < _0x379c66; _0x2ce290++) {\n            _0x423f51[_0x5f52a2['charCodeAt'](_0x2ce290) - _0x551e0d] = 0x0;\n        }\n        for (_0x2ce290 = 0x0; _0x2ce290 < 0x1a; _0x2ce290++) {\n            if (_0x423f51[_0x2ce290]) {\n                _0x5f52a2 += String['fromCharCode'](_0x551e0d + _0x2ce290);\n                break;\n            }\n        }\n    } else {\n        if (_0x5f52a2 === 'zyxwvutsrqponmlkjihgfedcba') {\n            console['log'](-0x1);\n            return;\n        }\n        var _0x399f83 = _0x5f52a2[0x19];\n        _0x423f51[_0x5f52a2['charCodeAt'](0x19) - _0x551e0d] = 0x0;\n        for (_0x2ce290 = 0x18; _0x2ce290 >= 0x0; _0x2ce290--) {\n            if (_0x399f83 > _0x5f52a2[_0x2ce290]) {\n                _0x399f83 = _0x5f52a2['charCodeAt'](_0x2ce290) - _0x551e0d;\n                _0x5f52a2 = _0x5f52a2['slice'](0x0, _0x2ce290);\n                break;\n            } else {\n                _0x423f51[_0x5f52a2['charCodeAt'](_0x2ce290) - _0x551e0d] = 0x0;\n            }\n        }\n        for (var _0x2e93a5 = _0x399f83 - _0x551e0d; _0x2e93a5 < 0x1a; _0x2e93a5++) {\n            if (_0x423f51[_0x2e93a5] === 0x0) {\n                _0x5f52a2 += String['fromCharCode'](_0x551e0d + _0x2e93a5);\n                break;\n            }\n        }\n    }\n    console['log'](_0x5f52a2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["atcoder", "atcoderb"], ["abc", "abcd"], ["zyxwvutsrqponmlkjihgfedcba", "-1"], ["abcdefghijklmnopqrstuvwzyx", "abcdefghijklmnopqrstuvx"]], "original": "function Main(s){\n  const n = s.length;\n  const a = \"a\".charCodeAt();\n  var b = Array(26).fill(1);\n  var i;\n  if(n < 26){\n    for(i = 0; i < n; i++){\n      b[s.charCodeAt(i) - a] = 0;\n    }\n    for(i = 0; i < 26; i++){\n      if(b[i]){\n        s += String.fromCharCode(a + i);\n        break;\n      }\n    }\n  }else{\n    if(s === \"zyxwvutsrqponmlkjihgfedcba\"){\n      console.log(-1); return;\n    }\n    var c = s[25];\n    b[s.charCodeAt(25) - a] = 0;\n    for(i = 24; i >= 0; i--){\n      if(c > s[i]){\n        c = s.charCodeAt(i) - a;\n        s = s.slice(0,i)\n        break;\n      }else{\n        b[s.charCodeAt(i) - a] = 0;\n      }\n    }\n    for(var j = c - a; j < 26; j++){\n      if(b[j] === 0){\n        s += String.fromCharCode(a + j);\n        break;\n      }\n    }\n  }\n  console.log(s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p03411_1", "type": "JavaScript", "obfuscated": "console['log']((_0x2d4bc8 => {\n    const [[_0x3624a9], ..._0x22afb8] = _0x2d4bc8['trim']()['split']('\\x0a')['map'](_0x4fe351 => _0x4fe351['split']('\\x20')['map'](_0x354690 => _0x354690 | 0x0));\n    const _0x16376e = [], _0x182d39 = [];\n    for (let _0x36949c = 0x0; _0x36949c < _0x3624a9; _0x36949c++) {\n        _0x16376e['push'](_0x22afb8[_0x36949c]);\n        _0x182d39['push'](_0x22afb8[_0x3624a9 + _0x36949c]);\n    }\n    _0x182d39['sort'](([_0x48a840], [_0x387bc4]) => _0x48a840 - _0x387bc4);\n    let _0x4a5816 = 0x0;\n    const _0x197e6f = [];\n    for (let _0x166879 = 0x0; _0x166879 < _0x3624a9; _0x166879++) {\n        const [_0x7df55b, _0x2350e9] = _0x182d39[_0x166879];\n        let _0x2d79fd = [\n            -0x1,\n            -0x1\n        ];\n        for (let _0x152464 = 0x0; _0x152464 < _0x16376e['length']; _0x152464++) {\n            const [_0x2371f3, _0x534d0b] = _0x16376e[_0x152464];\n            if (_0x7df55b < _0x2371f3)\n                continue;\n            if (_0x2350e9 > _0x534d0b && _0x534d0b > _0x2d79fd[0x1])\n                _0x2d79fd = [\n                    _0x152464,\n                    _0x534d0b\n                ];\n        }\n        if (_0x2d79fd[0x1] >= 0x0) {\n            _0x16376e['splice'](_0x2d79fd[0x0], 0x1);\n            _0x4a5816++;\n        }\n    }\n    return '' + _0x4a5816;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n2 0\n3 1\n1 3\n4 2\n0 4\n5 5", "2"], ["3\n0 0\n1 1\n5 2\n2 3\n3 4\n4 5", "2"], ["2\n2 2\n3 3\n0 0\n1 1", "0"], ["5\n0 0\n7 3\n2 2\n4 8\n1 6\n8 5\n6 9\n5 4\n9 1\n3 7", "5"], ["5\n0 0\n1 1\n5 5\n6 6\n7 7\n2 2\n3 3\n4 4\n8 8\n9 9", "4"]], "original": "console.log((args=>{\n  const [[N],...tmp] = args.trim().split('\\n').map(r=>r.split(' ').map(v=>v|0));\n  const rp = [], bp = [];\n  for ( let i = 0; i < N; i++ ) {\n    rp.push(tmp[i]);\n    bp.push(tmp[N+i]);\n  }\n  bp.sort(([a],[b])=>a-b);\n  let count = 0;\n  const test = [];\n  for ( let i = 0; i < N; i++ ) {\n    const [bx,by] = bp[i];\n    let max = [-1,-1];\n    for ( let j = 0; j < rp.length; j++ ) {\n      const [rx,ry] = rp[j];\n      if ( bx < rx ) continue;\n      if ( by > ry && ry > max[1] ) max = [j,ry];\n    }\n    if ( max[1] >= 0 ) {\n      rp.splice( max[0], 1 );\n      count++;\n    }\n  }\n  return `${count}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03558_1", "type": "JavaScript", "obfuscated": "function myout(_0x3da163) {\n    console['log'](_0x3da163);\n}\nfunction Main(_0x3e678d) {\n    _0x3e678d = parseInt(_0x3e678d);\n    var _0xa42640 = 0x3b9aca00;\n    for (var _0x1e885c = 0x1; _0x1e885c <= 0xa; _0x1e885c++) {\n        var _0x1b7d06 = (_0x3e678d * _0x1e885c)['toString']()['split']('')['map'](_0x17dde1 => Number(_0x17dde1));\n        var _0x24e645 = 0x0;\n        for (var _0x2bef2e = 0x0; _0x2bef2e < _0x1b7d06['length']; _0x2bef2e++) {\n            _0x24e645 += _0x1b7d06[_0x2bef2e];\n        }\n        _0xa42640 = Math['min'](_0xa42640, _0x24e645);\n    }\n    myout(_0xa42640);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["6", "3"], ["41", "5"], ["79992", "36"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\tinput = parseInt(input);\n\t//input = input.trim().split(\" \");\n\t//input = input.trim().split(\"\\n\");\n\t//input = input.trim().split(\" \").map((a)=>Number(a));\n\t//input = input.trim().split(\"\\n\").map((a)=>Number(a));\n  var output = 1000000000;\n  for(var i = 1; i <= 10; i ++){\n    var tmp = (input * i).toString().split(\"\").map((a)=>Number(a));\n    var check = 0;\n    for(var j = 0; j < tmp.length; j++){\n      check += tmp[j];\n    }\n    output = Math.min(output, check);\n  }\n  myout(output);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03567_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x4438f2 => {\n    _0x4438f2 = _0x4438f2['trim']()['split']('\\x0a');\n    const _0xb35387 = _0x4438f2[0x0]['split']('');\n    let _0x35507f = null;\n    for (let _0x5934cc in _0xb35387) {\n        if (_0x35507f === 'A' && _0xb35387[_0x5934cc] === 'C') {\n            console['log']('Yes');\n            return;\n        }\n        _0x35507f = _0xb35387[_0x5934cc];\n    }\n    console['log']('No');\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["BACD", "Yes"], ["ABCD", "No"], ["CABD", "No"], ["ACACA", "Yes"], ["XX", "No"]], "original": "\"use strict\";\n    \nconst main = arg => {\n    arg = arg.trim().split(\"\\n\");\n    const S = arg[0].split(\"\");\n    \n    let previous = null;\n    \n    for(let i in S) {\n        if(previous === \"A\" && S[i] === \"C\") {\n            console.log(\"Yes\");\n            return;\n        }\n        \n        previous = S[i];\n    }\n    \n    console.log(\"No\");\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03840_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next(_0x1be2ef) {\n    return _0x1be2ef ? cin[cid++] : +cin[cid++];\n}\nfunction nexts(_0x23ccf3, _0x16c65f) {\n    return _0x16c65f ? cin['slice'](cid, cid += _0x23ccf3) : cin['slice'](cid, cid += _0x23ccf3)['map'](_0x57a204 => +_0x57a204);\n}\nfunction nextm(_0x2b2672, _0x399eca, _0x2df644) {\n    var _0x2c6321 = [], _0x2d8ffd = 0x0;\n    if (_0x2df644)\n        for (; _0x2d8ffd < _0x2b2672; _0x2d8ffd++)\n            _0x2c6321['push'](cin['slice'](cid, cid += _0x399eca));\n    else\n        for (; _0x2d8ffd < _0x2b2672; _0x2d8ffd++)\n            _0x2c6321['push'](cin['slice'](cid, cid += _0x399eca)['map'](_0x503d88 => +_0x503d88));\n    return _0x2c6321;\n}\nfunction xArray(_0x3f4c20) {\n    var _0x53a1af = arguments, _0x268dbd = _0x53a1af['length'], _0x5287b9 = 'Array(a[' + --_0x268dbd + ']).fill().map(x=>{return\\x20' + _0x3f4c20 + ';})';\n    while (--_0x268dbd)\n        _0x5287b9 = 'Array(a[' + _0x268dbd + ']).fill().map(x=>' + _0x5287b9 + ')';\n    return eval(_0x5287b9);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](myOut);\nfunction main() {\n    var _0x12f639 = nexts(0x7);\n    var _0x55c2e3 = _0x12f639[0x1] + ((_0x12f639[0x0] / 0x2 | 0x0) + (_0x12f639[0x3] / 0x2 | 0x0) + (_0x12f639[0x4] / 0x2 | 0x0)) * 0x2;\n    switch (_0x12f639[0x0] % 0x2 + _0x12f639[0x3] % 0x2 + _0x12f639[0x4] % 0x2) {\n    case 0x3:\n        _0x55c2e3 += 0x3;\n        break;\n    case 0x2:\n        if (_0x12f639[0x0] * _0x12f639[0x3] * _0x12f639[0x4])\n            _0x55c2e3 += 0x1;\n        break;\n    }\n    return _0x55c2e3;\n}", "test_cases": [["2 1 1 0 0 0 0", "3"], ["0 0 10 0 0 0 0", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(a){return a?cin[cid++]:+cin[cid++];}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(myOut);\n\nfunction main(){\n  var a = nexts(7);\n  var ans = a[1] + ((a[0]/2|0) + (a[3]/2|0)+ (a[4]/2|0)) * 2;\n  switch(a[0]%2 + a[3]%2 + a[4]%2){\n    case 3: ans += 3; break;\n    case 2: if(a[0]*a[3]*a[4])ans += 1; break;\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p03967_1", "type": "JavaScript", "obfuscated": "console['log']((_0x183ab3 => {\n    const _0x191c61 = _0x183ab3['trim']();\n    const _0x37e420 = _0x191c61['length'];\n    const _0x5b9a66 = Array(_0x37e420)['fill'](0x0);\n    for (let _0x20d975 = _0x37e420; --_0x20d975;)\n        _0x5b9a66[_0x20d975 - 0x1] = _0x5b9a66[_0x20d975] + (_0x191c61[_0x20d975] === 'p');\n    let _0xd84ea5 = 0x0, _0xee11f8 = 0x0;\n    for (let _0x3fae71 = 0x0; _0x3fae71 < _0x37e420; _0x3fae71++) {\n        if (_0x191c61[_0x3fae71] === 'g') {\n            if (_0xd84ea5 > _0x5b9a66[_0x3fae71]) {\n                _0xd84ea5--;\n                _0xee11f8++;\n            } else\n                _0xd84ea5++;\n        } else\n            _0xd84ea5--;\n    }\n    return '' + _0xee11f8;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["gpg", "0"], ["ggppgggpgg", "2"]], "original": "console.log((args=>{\n  const s = args.trim();\n  const L = s.length;\n  const p = Array(L).fill(0);\n  for ( let i = L; --i;) p[i-1] = p[i] + (s[i]==='p');\n  let g = 0, w = 0;\n  for ( let i = 0; i < L; i++ ) {\n    if ( s[i] === 'g' ) {\n      if ( g > p[i] ) {\n        g--; w++;\n      } else g++;\n    } else g--;\n  }\n  return `${w}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p04013_1", "type": "JavaScript", "obfuscated": "function Main(_0x3a196a) {\n    _0x3a196a = _0x3a196a['split']('\\x0a');\n    tmp1 = _0x3a196a[0x0]['split']('\\x20');\n    var _0x51f6d6 = parseInt(tmp1[0x0]);\n    var _0x5043bc = parseInt(tmp1[0x1]);\n    tmp = _0x3a196a[0x1]['split']('\\x20');\n    x = new Array(_0x51f6d6);\n    var _0x2f5618 = 0x0;\n    for (i = 0x0; i < tmp['length']; i++) {\n        x[i] = parseInt(tmp[i]);\n    }\n    var _0x1e6801 = 0x0;\n    for (i = 0x0; i < _0x51f6d6; i++) {\n        _0x2f5618 = _0x2f5618 + x[i];\n    }\n    var _0x540b10 = new Array(_0x2f5618 + 0x1);\n    for (var _0x30b261 = 0x0; _0x30b261 < _0x2f5618 + 0x1; _0x30b261++) {\n        _0x540b10[_0x30b261] = new Array(_0x51f6d6 + 0x1)['fill'](0x0);\n    }\n    _0x540b10[0x0][0x0] = 0x1;\n    for (j = 0x0; j < _0x51f6d6; j++) {\n        for (i = _0x2f5618; i >= 0x0; i--) {\n            for (k = 0x0; k < _0x51f6d6 + 0x1; k++) {\n                if (_0x540b10[i][k] >= 0x1) {\n                    _0x540b10[i + x[j]][k + 0x1] = _0x540b10[i + x[j]][k + 0x1] + _0x540b10[i][k];\n                }\n            }\n        }\n    }\n    for (i = 0x1; i <= _0x51f6d6 && i * _0x5043bc <= _0x2f5618; i++) {\n        _0x1e6801 = _0x1e6801 + _0x540b10[i * _0x5043bc][i];\n    }\n    console['log']('%s', _0x1e6801);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 8\n7 9 8 9", "5"], ["3 8\n6 6 9", "0"], ["8 5\n3 6 2 8 7 6 5 9", "19"], ["33 3\n3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3", "8589934591"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  tmp1 = input[0].split(\" \");\n  var n = parseInt(tmp1[0]);\n  var a = parseInt(tmp1[1]);\n  tmp= input[1].split(\" \");\n  x=new Array(n);\n  var sum2=0;\n  for(i=0;i<tmp.length;i++){\n    x[i]=parseInt(tmp[i]);\n  }\n  var s=0;\n  for(i=0;i<n;i++){\n    sum2=sum2+x[i];\n  }\n  var b = new Array(sum2+1);\n  for(var y = 0; y < sum2+1; y++) {\n    b[y] = new Array(n+1).fill(0);\n  }\n  b[0][0]=1;\n  for(j=0;j<n;j++){\n    for(i=sum2;i>=0;i--){\n      for(k=0;k<n+1;k++){\n        if(b[i][k]>=1){\n          b[i+x[j]][k+1]=b[i+x[j]][k+1]+b[i][k];\n        }\n      }\n    }\n  }\n  for(i=1;i<=n && i*a<=sum2;i++){\n      s=s+b[i*a][i];\n  }\n\n\n  console.log('%s', s);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04025_1", "type": "JavaScript", "obfuscated": "'use strict';\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nconst info = input['trim']()['split']('\\x0a');\nconst nums = info[0x1]['split']('\\x20')['map'](_0x1a9f9c => _0x1a9f9c * 0x1);\nconst ave = Math['round'](nums['reduce']((_0x235cbd, _0x10fd95) => {\n    return _0x10fd95 += _0x235cbd;\n}) / info[0x0]);\nlet sum = 0x0;\nfor (let i = 0x0; i < info[0x0]; i++) {\n    sum += Math['pow'](nums[i] - ave, 0x2);\n}\nconsole['log'](sum);", "test_cases": [["2\n4 8", "8"], ["3\n1 1 3", "3"], ["3\n4 2 5", "5"], ["4\n-100 -100 -100 -100", "0"]], "original": "\"use strict\";\n\nlet input = require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\");\nconst info = input.trim().split('\\n');\nconst nums = info[1].split(' ').map(x => x*1);\n// 平均値出す\nconst ave = Math.round( nums.reduce((x,a) => {return a += x}) / info[0] );\nlet sum = 0;\nfor(let i = 0; i < info[0]; i++){\n  sum += Math.pow( nums[i] - ave ,2 )\n}\nconsole.log(sum);", "language": "JavaScript"}
{"filename": "p00015_1", "type": "JavaScript", "obfuscated": "function pad(_0x4de205) {\n    while (_0x4de205['length'] < 0x7) {\n        _0x4de205 = '0' + _0x4de205;\n    }\n    return _0x4de205;\n}\nfunction divide(_0x48d957) {\n    var _0x24535d = [], _0x17c2d1 = 0x0, _0x37ff10 = _0x48d957['length'], _0x10325d = 0x7;\n    for (; (_0x24535d[_0x17c2d1] = _0x48d957['slice']((_0x17c2d1 + 0x1) * -_0x10325d, _0x37ff10 + _0x17c2d1 * -_0x10325d))['length'] > _0x10325d - 0x1; _0x17c2d1++);\n    return _0x24535d;\n}\nfunction unite(_0x1b1940) {\n    return _0x1b1940['concat']()['reverse']()['join']('')['replace'](/^0*/, '');\n}\nfunction largeSum(_0xd80ef2, _0x9bda35) {\n    for (var _0x30f5cd = 0x0, _0xe3bc78 = [], _0x170857 = 0x0, _0xf1ed5 = Math['max'](_0xd80ef2['length'], _0x9bda35['length']); _0x170857 < _0xf1ed5 || _0x30f5cd != 0x0; _0x170857++) {\n        var _0x442b0c = ((parseInt(_0xd80ef2[_0x170857], 0xa) || 0x0) + (parseInt(_0x9bda35[_0x170857], 0xa) || 0x0) + +_0x30f5cd)['toString'](0xa);\n        _0xe3bc78[_0x170857] = _0x442b0c['length'] > 0x7 ? (_0x30f5cd = _0x442b0c['slice'](0x0, 0x1), _0x442b0c['slice'](0x1)) : (_0x30f5cd = 0x0, pad(_0x442b0c));\n    }\n    return _0xe3bc78;\n}\nprocess['stdin']['on']('data', function (_0x2a1bb1) {\n    var _0x1c512c = (_0x2a1bb1 + '')['trim']()['split']('\\x0a');\n    for (var _0x516da1 = 0x0, _0x46ae5a = +_0x1c512c['shift']() * 0x2; _0x516da1 < _0x46ae5a; _0x516da1 += 0x2) {\n        var _0x38979d = unite(largeSum(divide(_0x1c512c[_0x516da1]), divide(_0x1c512c[_0x516da1 + 0x1])));\n        console['log'](_0x38979d == '' ? 0x0 : _0x38979d['length'] > 0x50 ? 'overflow' : _0x38979d);\n    }\n})['resume']();", "test_cases": [["6\n1000\n800\n9999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n1\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\n0\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n1\n100000000000000000000000000000000000000000000000000000000000000000000000000000000\n100000000000000000000000000000000000000000000000000000000000000000000000000000000", "1800\n10000000000000000000000000000000000000000\noverflow\n99999999999999999999999999999999999999999999999999999999999999999999999999999999\noverflow\noverflow"]], "original": "function pad(n){\n\twhile(n.length<7){\n\t\tn=\"0\"+n\n\t}\n\treturn n;\n}\nfunction divide(s){\n\tvar a=[],i=0,l=s.length,d=7;\n\tfor(;(a[i]=s.slice((i+1)*-d,l+i*-d)).length>d-1;i++);\n\treturn a;\n}\nfunction unite(a){\n\treturn a.concat().reverse().join(\"\").replace(/^0*/,\"\");\n}\nfunction largeSum(n,m){\n\tfor(var h=0,o=[],i=0,l=Math.max(n.length,m.length);i<l||h!=0;i++){\n\t\tvar a=((parseInt(n[i],10)||0)+(parseInt(m[i],10)||0)+(+h)).toString(10);\n\t\to[i]=a.length>7?(h=a.slice(0,1),a.slice(1)):(h=0,pad(a));\n\t}\n\treturn o;\n}\nprocess.stdin.on(\"data\",function(c){\n\tvar a=(c+\"\").trim().split(\"\\n\");\n\tfor(var i=0,l=+a.shift()*2;i<l;i+=2){\n\t\tvar s=unite(largeSum(divide(a[i]),divide(a[i+1])));\n\t\tconsole.log(s==\"\"?0:s.length>80?\"overflow\":s);\n\t}\n}).resume();", "language": "JavaScript"}
{"filename": "p00038_1", "type": "JavaScript", "obfuscated": "require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a')['map'](function (_0x50dc83) {\n    f = function (_0xb08b05, _0x515ef5) {\n        return _0x515ef5 - _0xb08b05;\n    };\n    a = [], c = _0x50dc83['split'](',')['sort'](f);\n    c['map'](function (_0x5a2548) {\n        a[_0x5a2548] ? a[_0x5a2548]++ : a[_0x5a2548] = 0x1;\n    });\n    a['sort'](f);\n    l = a[0x0], n = a[0x1];\n    console['log'](l == 0x4 ? 'four\\x20card' : l == 0x3 ? n == 0x2 ? 'full\\x20house' : 'three\\x20card' : l == 0x2 ? n == 0x2 ? 'two\\x20pair' : 'one\\x20pair' : 0x4 == c[0x0] - c[0x4] || c[0x0] - c[0x3] == 0x3 && +c[0x4] == 0x1 ? 'straight' : 'null');\n});", "test_cases": [["1,2,3,4,1\n2,3,2,3,12\n12,13,11,12,12\n7,6,7,6,7\n3,3,2,3,3\n6,7,8,9,10\n11,12,10,1,13\n11,12,13,1,2", "one pair\ntwo pair\nthree card\nfull house\nfour card\nstraight\nstraight\nnull"]], "original": "require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").trim().split('\\n').map(function(i){f=function(a,b){return b-a};a=[],c=i.split(\",\").sort(f);c.map(function(j){a[j]?a[j]++:a[j]=1});a.sort(f);l=a[0],n=a[1];console.log(l==4?\"four card\":l==3?(n==2?\"full house\":\"three card\"):l==2?(n==2?\"two pair\":\"one pair\"):4==c[0]-c[4]||(c[0]-c[3]==3&&+c[4]==1)?\"straight\":\"null\")})", "language": "JavaScript"}
{"filename": "p00043_1", "type": "JavaScript", "obfuscated": "function Puzzle() {\n    var _0x41be1e = {};\n    var _0xb2ce96 = '123,234,345,456,567,678,789,111,222,333,444,555,666,777,888,999'['split'](',');\n    var _0x5c5db2 = '11,22,33,44,55,66,77,88,99'['split'](',');\n    var _0x270781, _0x439478, _0x4debf7, _0x39876d, _0x217a57;\n    for (_0x270781 = 0x0; _0x270781 < 0x10; _0x270781++)\n        for (_0x439478 = 0x0; _0x439478 < 0x10; _0x439478++)\n            for (_0x4debf7 = 0x0; _0x4debf7 < 0x10; _0x4debf7++)\n                for (_0x39876d = 0x0; _0x39876d < 0x10; _0x39876d++)\n                    for (_0x217a57 = 0x0; _0x217a57 < 0x9; _0x217a57++) {\n                        var _0x2e2daa = _0xb2ce96[_0x270781] + _0xb2ce96[_0x439478] + _0xb2ce96[_0x4debf7] + _0xb2ce96[_0x39876d] + _0x5c5db2[_0x217a57];\n                        _0x2e2daa = _0x2e2daa['split']('')['map'](Number)['sort'](function (_0x2e2017, _0x92899e) {\n                            return _0x2e2017 - _0x92899e;\n                        })['join']('');\n                        _0x41be1e[_0x2e2daa] = !![];\n                    }\n    return _0x41be1e;\n}\nvar P = Puzzle();\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (Arr['length'] == 0x0)\n        break;\n    var str = Arr['shift']();\n    var ans = [];\n    for (var i = 0x1; i <= 0x9; i++) {\n        var arr = str['split']('')['map'](Number);\n        arr['push'](i);\n        arr['sort'](function (_0x401488, _0x46c0b2) {\n            return _0x401488 - _0x46c0b2;\n        });\n        var v = arr['join']('');\n        if (/(.)\\1\\1\\1\\1/['test'](v))\n            continue;\n        if (P['hasOwnProperty'](v))\n            ans['push'](i);\n    }\n    console['log'](ans['length'] == 0x0 ? '0' : ans['join']('\\x20'));\n}", "test_cases": [["3649596966777\n6358665788577\n9118992346175\n9643871425498\n7755542764533\n1133557799246", "2 3 5 8\n3 4\n1 2 3 4 5 6 7 8 9\n7 8 9\n1 2 3 4 6 7 8\n0"]], "original": "function Puzzle(){\n   var obj={};\n   var arrA=\"123,234,345,456,567,678,789,111,222,333,444,555,666,777,888,999\".split(\",\");\n   var arrB=\"11,22,33,44,55,66,77,88,99\".split(\",\");\n   var i,j,k,l,m;\n   for(i=0;i<16;i++)for(j=0;j<16;j++)for(k=0;k<16;k++)for(l=0;l<16;l++)for(m=0;m<9;m++){\n      var str=arrA[i]+arrA[j]+arrA[k]+arrA[l]+arrB[m];\n      str=str.split(\"\").map(Number).sort(function(a,b){return a-b;}).join(\"\");\n      obj[str]=true;\n   }\n   return obj;\n}\nvar P=Puzzle();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var str=Arr.shift();\n   var ans=[];\n   for(var i=1;i<=9;i++){\n      var arr=str.split(\"\").map(Number);\n      arr.push(i);\n      arr.sort(function(a,b){return a-b;});\n      var v=arr.join(\"\");\n      if(/(.)\\1\\1\\1\\1/.test(v))continue;\n      if(P.hasOwnProperty(v))ans.push(i);\n   }\n   console.log((ans.length==0)?\"0\":ans.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00044_1", "type": "JavaScript", "obfuscated": "function isPrime(_0x43e333) {\n    if (_0x43e333 == 0x2 || _0x43e333 == 0x3)\n        return !![];\n    if (_0x43e333 < 0x2 || _0x43e333 % 0x2 == 0x0 || _0x43e333 % 0x3 == 0x0)\n        return ![];\n    var _0x56b9b1 = Math['round'](Math['sqrt'](_0x43e333));\n    var _0x139a0e = 0x1;\n    while (_0x139a0e * 0x6 - 0x1 <= _0x56b9b1) {\n        if (_0x43e333 % (_0x139a0e * 0x6 - 0x1) == 0x0 || _0x43e333 % (_0x139a0e * 0x6 + 0x1) == 0x0)\n            return ![];\n        _0x139a0e++;\n    }\n    return !![];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var num = +line;\n    var mp;\n    var lp;\n    if (num == 0x3)\n        mp = 0x2;\n    var i = 0x3;\n    while (!![]) {\n        if (isPrime(i) && i < num) {\n            mp = i;\n        }\n        if (isPrime(i) && i > num) {\n            lp = i;\n            break;\n        }\n        i += 0x2;\n    }\n    console['log'](mp, lp);\n}", "test_cases": [["19\n3517", "17 23\n3511 3527"]], "original": "function isPrime(num) {\n    if (num == 2 || num == 3) return true;\n    if (num < 2 || num % 2 == 0 || num % 3 == 0) return false;\n    var limit = Math.round(Math.sqrt(num));\n \n    var i = 1;\n    while(i * 6 - 1 <= limit) {\n        if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) return false;\n        i++;\n    }\n    return true;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var num = +line;\n\n    var mp;\n    var lp;\n\n    if (num == 3)\n        mp = 2;\n\n    var i = 3;\n    while (true) {\n        if (isPrime(i) && i < num) {\n            mp = i;\n        }\n        if (isPrime(i) && i > num) {\n            lp = i;\n            break;\n        }\n        i += 2;\n    }\n    console.log(mp, lp);\n}", "language": "JavaScript"}
{"filename": "p00060_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['forEach'](function (_0x5d8300) {\n    var _0x46e93d = _0x5d8300['split']('\\x20')['map'](Number);\n    var _0x1f0322 = [\n        0x1,\n        0x2,\n        0x3,\n        0x4,\n        0x5,\n        0x6,\n        0x7,\n        0x8,\n        0x9,\n        0xa\n    ];\n    _0x1f0322 = _0x1f0322['filter'](function (_0x274dfc) {\n        return _0x274dfc != _0x46e93d[0x0] || _0x274dfc != _0x46e93d[0x1] || _0x274dfc != _0x46e93d[0x2];\n    });\n    var _0x2665a9 = 0x0;\n    var _0x36d1c8 = 0x0;\n    _0x1f0322['forEach'](function (_0x4844f4) {\n        _0x46e93d[0x0] + _0x46e93d[0x1] + _0x4844f4 <= 0x14 ? _0x2665a9++ : _0x36d1c8++;\n    });\n    console['log'](_0x2665a9 >= _0x36d1c8 ? 'YES' : 'NO');\n});", "test_cases": [["1 2 3\n5 6 9\n8 9 10", "YES\nYES\nNO"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var m=[1,2,3,4,5,6,7,8,9,10];\n   m=m.filter(function(v){return (v!=arr[0] || v!= arr[1] || v!=arr[2]);});\n   var y=0;\n   var n=0;\n   m.forEach(function(v){((arr[0]+arr[1]+v)<=20)?y++:n++;});\n   console.log(y>=n?\"YES\":\"NO\");\n});", "language": "JavaScript"}
{"filename": "p00083_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var arr = line['split']('\\x20')['map'](function (_0x4f0db3) {\n        return +_0x4f0db3;\n    });\n    var year = arr[0x0];\n    var month = arr[0x1];\n    var day = arr[0x2];\n    var era = '';\n    var today = new Date(year, month - 0x1, day);\n    if (today < new Date(0x74c, 0x8, 0x8)) {\n        era = 'pre-meiji';\n    } else if (today < new Date(0x778, 0x6, 0x1e)) {\n        era = 'meiji';\n        year -= 0x74b;\n    } else if (today < new Date(0x786, 0xb, 0x19)) {\n        era = 'taisho';\n        year -= 0x777;\n    } else if (today < new Date(0x7c5, 0x0, 0x8)) {\n        era = 'showa';\n        year -= 0x785;\n    } else {\n        era = 'heisei';\n        year -= 0x7c4;\n    }\n    if (era == 'pre-meiji') {\n        console['log']('pre-meiji');\n        continue;\n    }\n    console['log'](era, year, month, day);\n}", "test_cases": [["2005 9 3\n1868 12 2\n1868 9 7", "heisei 17 9 3\nmeiji 1 12 2\npre-meiji"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n    var arr = line.split(' ').map(function(n){return +n;});\n    var year = arr[0];\n    var month = arr[1];\n    var day = arr[2];\n    var era = '';\n\n    var today = new Date(year, month - 1, day);\n    if (today < new Date(1868, 8, 8)) {\n        era = 'pre-meiji';\n    } else if (today < new Date(1912, 6, 30)) {\n        era = 'meiji';\n        year -= 1867;\n    } else if (today < new Date(1926, 11, 25)) {\n        era = 'taisho';\n        year -= 1911;\n    } else if (today < new Date(1989, 0, 8)) {\n        era = 'showa';\n        year -= 1925;\n    } else {\n        era = 'heisei';\n        year -= 1988;\n    }\n\n    if (era == 'pre-meiji') {\n        console.log('pre-meiji');\n        continue;\n    }\n    console.log(era, year, month, day);\n}", "language": "JavaScript"}
{"filename": "p00085_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (Arr[i] == '0\\x200')\n        break;\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    var N = arr[0x0];\n    var m = arr[0x1];\n    var n = {};\n    for (var j = 0x0; j < N; j++)\n        n[j] = null;\n    var x = 0x0;\n    for (var k = 0x0; k < N; k++) {\n        var y = 0x0;\n        do {\n            x++;\n            if (x == N)\n                x = 0x0;\n            if (n[x] === null)\n                y++;\n        } while (y != m);\n        n[x] = k;\n    }\n    console['log'](x);\n}", "test_cases": [["41 3\n30 9\n0 0", "31\n21"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==\"0 0\")break;\n   var arr=Arr[i].split(\" \").map(Number);\n   var N=arr[0];\n   var m=arr[1];\n   var n={};\n   for(var j=0;j<N;j++)n[j]=null;\n   var x=0;\n   for(var k=0;k<N;k++){\n      var y=0;\n      do{\n         x++;\n         if(x==N)x=0;\n         if(n[x]===null)y++;\n      }while(y!=m);\n      n[x]=k;\n   }\n   console.log(x);\n}", "language": "JavaScript"}
{"filename": "p00106_1", "type": "JavaScript", "obfuscated": "var obj = {};\nfor (var i = 0x0; i <= 0x19; i++) {\n    for (var j = 0x0; j <= 0x10; j++) {\n        for (var k = 0x0; k <= 0xa; k++) {\n            var weight = 0xc8 * i + 0x12c * j + 0x1f4 * k;\n            if (weight > 0x1388)\n                continue;\n            var money = 0x0;\n            money += 0x17c * 0x5 * 0.8 * Math['floor'](i / 0x5);\n            money += 0x226 * 0x4 * 0.85 * Math['floor'](j / 0x4);\n            money += 0x352 * 0x3 * 0.88 * Math['floor'](k / 0x3);\n            money += 0x17c * (i % 0x5);\n            money += 0x226 * (j % 0x4);\n            money += 0x352 * (k % 0x3);\n            if (obj['hasOwnProperty'](weight))\n                obj[weight] = Math['min'](obj[weight], money);\n            else\n                obj[weight] = money;\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    console['log'](obj[n]);\n}", "test_cases": [["500\n2200\n0", "850\n3390"]], "original": "var obj={};\nfor(var i=0;i<=25;i++){\n   for(var j=0;j<=16;j++){\n      for(var k=0;k<=10;k++){\n         var weight=200*i+300*j+500*k;\n         if(weight>5000)continue;\n         var money=0;\n         money+=380*5*0.8*Math.floor(i/5);\n         money+=550*4*0.85*Math.floor(j/4);\n         money+=850*3*0.88*Math.floor(k/3);\n         money+=380*(i%5);\n         money+=550*(j%4);\n         money+=850*(k%3);\n         if(obj.hasOwnProperty(weight))obj[weight]=Math.min(obj[weight],money);\n         else obj[weight]=money;\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   console.log(obj[n]);\n}", "language": "JavaScript"}
{"filename": "p00135_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < n; I++) {\n    var arr = Arr[I]['split'](':');\n    var h = parseInt(arr[0x0], 0xa);\n    var m = parseInt(arr[0x1], 0xa);\n    var H = h * (0x168 / 0xc) + m * (0x168 / 0xc / 0x3c);\n    var M = m * (0x168 / 0x3c);\n    var hm = Math['abs'](H - M);\n    var ans;\n    if (hm >= 0x0 && hm < 0x1e)\n        ans = 'alert';\n    else if (hm >= 0x5a && hm <= 0xb4)\n        ans = 'safe';\n    else\n        ans = 'warning';\n    console['log'](ans);\n}", "test_cases": [["4\n02:15\n06:01\n11:55\n10:40", "alert\nsafe\nalert\nwarning"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=Arr[I].split(\":\");\n   var h=parseInt(arr[0],10);\n   var m=parseInt(arr[1],10);\n   var H=h*(360/12)+m*((360/12)/60);\n   var M=m*(360/60);\n   var hm=Math.abs(H-M);\n   var ans;\n   if(hm>=0 && hm<30)ans=\"alert\";\n   else if(hm>=90 && hm<=180)ans=\"safe\";\n   else ans=\"warning\"\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00206_1", "type": "JavaScript", "obfuscated": "function main() {\n    var _0x55a3d0 = 0x0, _0x44cf15, _0x51c0a2, _0x57a659, _0x42e997;\n    for (;;) {\n        _0x57a659 = Number(input[_0x55a3d0++]);\n        if (_0x57a659 === 0x0)\n            break;\n        _0x51c0a2 = !![];\n        for (_0x44cf15 = 0x0; _0x44cf15 < 0xc; _0x44cf15++) {\n            _0x42e997 = input[_0x55a3d0++]['split']('\\x20')['map'](Number);\n            _0x57a659 -= _0x42e997[0x0] - _0x42e997[0x1];\n            if (_0x51c0a2 && _0x57a659 <= 0x0) {\n                console['log'](_0x44cf15 + 0x1);\n                _0x51c0a2 = ![];\n            }\n        }\n        if (_0x51c0a2)\n            console['log']('NA');\n    }\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0xfa1631) {\n    input += _0xfa1631;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main();\n});", "test_cases": [["10000\n5000 3150\n5000 5000\n0 0\n5000 1050\n5000 3980\n5000 210\n5000 5000\n5000 5000\n0 0\n5000 2100\n5000 2100\n5000 2100\n29170\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 100000\n100000 70831\n0", "6\nNA"]], "original": "function main() {\n  var\n  i = 0, j, flag,\n  L, MN;\n  for (;;) {\n    L = Number(input[i++]);\n    if (L === 0) break;\n    \n    flag = true;\n    for (j = 0; j < 12; j++) {\n      MN = input[i++].split(' ').map(Number);\n      L -= MN[0] - MN[1];\n      if (flag && L <= 0) {\n        console.log(j + 1);\n        flag = false;\n      }\n    }\n    \n    if (flag) console.log('NA');\n  }\n}\n\nvar\ninput = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main();\n});", "language": "JavaScript"}
{"filename": "p00211_1", "type": "JavaScript", "obfuscated": "function GCD(_0x3adfbf, _0x200cc4) {\n    var _0x5f4cd4 = Math['max'](_0x3adfbf, _0x200cc4);\n    var _0x14abb0 = Math['min'](_0x3adfbf, _0x200cc4);\n    while (_0x14abb0 != 0x0) {\n        var _0x9cf57e = _0x14abb0;\n        _0x14abb0 = _0x5f4cd4 % _0x14abb0;\n        _0x5f4cd4 = _0x9cf57e;\n    }\n    return _0x5f4cd4;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = [];\n    for (var I = 0x0; I < n; I++) {\n        var v = Arr['shift']()['split']('\\x20')['map'](Number);\n        var gcd = GCD(v[0x0], v[0x1]);\n        arr['push']([\n            v[0x0] / gcd,\n            v[0x1] / gcd\n        ]);\n    }\n    var lcm = 0x1;\n    arr['forEach'](function (_0x21a123) {\n        var _0x10fcb3 = GCD(_0x21a123[0x1], lcm);\n        lcm = _0x21a123[0x1] * lcm / _0x10fcb3;\n    });\n    arr = arr['map'](function (_0x43b58d, _0x287ea3) {\n        return _0x43b58d[0x0] * (lcm / _0x43b58d[0x1]);\n    });\n    var lcm = 0x1;\n    arr['forEach'](function (_0x41e601) {\n        var _0x56fe5d = GCD(_0x41e601, lcm);\n        lcm = _0x41e601 * lcm / _0x56fe5d;\n    });\n    arr['forEach'](function (_0x4769de) {\n        console['log'](lcm / _0x4769de);\n    });\n}", "test_cases": [["2\n4 3\n5 4\n5\n789 289\n166 46\n9 4\n617 252\n972 303\n2\n8 5\n32 20\n0", "15\n16\n1598397732\n1209243492\n1939462992\n1782294192\n1360317793\n1\n1"]], "original": "function GCD(a,b){\n   var m=Math.max(a,b);\n   var n=Math.min(a,b);\n   while(n!=0){\n      var N=n;\n      n=m%n;\n      m=N;\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var I=0;I<n;I++){\n      var v=Arr.shift().split(\" \").map(Number);\n      var gcd=GCD(v[0],v[1]);\n      arr.push([v[0]/gcd,v[1]/gcd]);\n   }\n   var lcm=1;\n   arr.forEach(function(v){\n      var gcd=GCD(v[1],lcm);\n      lcm=(v[1]*lcm)/gcd;\n   });\n   arr=arr.map(function(v,i){return v[0]*(lcm/v[1]);});\n   var lcm=1;\n   arr.forEach(function(v){\n      var gcd=GCD(v,lcm);\n      lcm=(v*lcm)/gcd;\n   });\n   arr.forEach(function(v){console.log(lcm/v);});\n}", "language": "JavaScript"}
{"filename": "p00638_1", "type": "JavaScript", "obfuscated": "var n;\nvar x = [];\nfunction main() {\n    while (n = scan()) {\n        rep(n, function (_0x2d8158) {\n            x[_0x2d8158] = [\n                scan(),\n                scan()\n            ];\n        });\n        x['sort'](function (_0x4af5aa, _0x1fb5bb) {\n            return _0x4af5aa[0x1] - _0x1fb5bb[0x1];\n        });\n        var _0xffe0b6 = !![];\n        var _0x3939fa = 0x0;\n        rep(n, function (_0x126c21) {\n            _0x3939fa += x[_0x126c21][0x0];\n            _0xffe0b6 = _0x3939fa <= x[_0x126c21][0x1] && _0xffe0b6;\n        });\n        print(_0xffe0b6 ? 'Yes' : 'No');\n    }\n}\nfunction rep(_0xb49b1c, _0x3cda1b, _0x214588) {\n    if (_0x214588 === undefined) {\n        _0x214588 = _0x3cda1b;\n        _0x3cda1b = _0xb49b1c;\n        _0xb49b1c = 0x0;\n    }\n    for (var _0x3c8180 = _0xb49b1c; _0x3c8180 < _0x3cda1b; ++_0x3c8180) {\n        if (_0x214588(_0x3c8180) === ![]) {\n            break;\n        }\n    }\n}\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar input = '';\nvar input_index = 0x0;\nfunction scan(_0xc85832) {\n    if (_0xc85832 === 'string') {\n        return input[input_index++];\n    } else {\n        return +input[input_index++];\n    }\n}\nfunction print(_0x268caa) {\n    console['log'](_0x268caa);\n}\nprocess['stdin']['on']('data', function (_0x1d9d2c) {\n    input += _0x1d9d2c;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['trim']()['split'](/\\s+/);\n    main();\n});", "test_cases": [["3\n2 3\n3 6\n1 2\n3\n2 3\n3 5\n1 2\n0", "Yes\nNo"]], "original": "var n;\nvar x = [];\n\nfunction main(){\n\twhile(n = scan()){\n\t\trep(n, function(i){\n\t\t\tx[i] = [scan(), scan()];\n\t\t});\n\t\tx.sort(function(a, b){\n\t\t\treturn a[1] - b[1];\n\t\t});\n\t\t//print(x);\n\t\tvar ans = true;\n\t\tvar w = 0;\n\t\trep(n, function(i){\n\t\t\tw += x[i][0];\n\t\t\tans = w <= x[i][1] && ans;\n\t\t});\n\t\tprint(ans ? \"Yes\" : \"No\");\n\t}\n}\n \nfunction rep(a, b, c){\n\tif(c === undefined){\n\t\tc = b;\n\t\tb = a;\n\t\ta = 0;\n\t}\n\tfor(var i = a; i < b; ++i){\n\t\tif(c(i) === false){\n\t\t\tbreak;\n\t\t}\n\t}\n}\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\n \nvar input = '';\nvar input_index = 0;\n \nfunction scan(type){\n\tif(type === 'string'){\n\t\treturn input[input_index++];\n\t}\n\telse{\n\t\treturn +input[input_index++];\n\t}\n}\n \nfunction print(val){\n\tconsole.log(val);\n}\n \nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.trim().split(/\\s+/);\n\tmain();\n});", "language": "JavaScript"}
{"filename": "p00691_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var z = arr['shift']() - 0x0;\n    if (z == 0x0)\n        break;\n    var zzz = z * z * z;\n    var ary = [];\n    for (var i = z - 0x1; i > 0x0; i--) {\n        for (var j = i; j > 0x0; j--) {\n            var x = zzz - i * i * i - j * j * j;\n            if (x > 0x0)\n                ary['push'](x);\n        }\n    }\n    console['log'](Math['min']['apply'](null, ary));\n}", "test_cases": [["6\n4\n2\n0", "27\n10\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var z=arr.shift()-0;\n   if(z==0)break;\n   var zzz=z*z*z;\n   var ary=[];\n   for(var i=z-1;i>0;i--){\n      for(var j=i;j>0;j--){\n         var x=zzz-i*i*i-j*j*j\n         if(x>0)ary.push(x);\n      }\n   }\n   console.log(Math.min.apply(null, ary));\n}", "language": "JavaScript"}
{"filename": "p00710_1", "type": "JavaScript", "obfuscated": "(function (_0x1a5e09) {\n    var _0x3ca8a2 = _0x1a5e09['replace'](/\\r/g, '')['split']('\\x0a');\n    while (!![]) {\n        var _0x285d0d = [], _0x325af2 = _0x3ca8a2['shift']()['split']('\\x20'), _0x104c8e = parseInt(_0x325af2[0x0]), _0x49c32f = parseInt(_0x325af2[0x1]);\n        if (_0x104c8e === 0x0 && _0x49c32f === 0x0)\n            break;\n        for (var _0x28f5b1 = _0x104c8e; _0x28f5b1 > 0x0; _0x28f5b1--) {\n            _0x285d0d['push'](_0x28f5b1);\n        }\n        while (_0x49c32f--) {\n            var _0x325af2 = _0x3ca8a2['shift']()['split']('\\x20'), _0x3bc392 = parseInt(_0x325af2[0x0]) - 0x1, _0x3be197 = parseInt(_0x325af2[0x1]), _0x213f5f;\n            _0x213f5f = _0x285d0d['splice'](_0x3bc392, _0x3be197);\n            _0x285d0d = _0x213f5f['concat'](_0x285d0d);\n        }\n        console['log'](_0x285d0d['shift']());\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["5 2\n3 1\n3 1\n10 3\n1 10\n10 1\n8 3\n0 0", "4\n4"]], "original": "(function (input) {\n    var inputs = input.replace(/\\r/g, '').split(\"\\n\");\n\n    while(true) {\n        var cards = [],\n            line = inputs.shift().split(\" \"),\n            n = parseInt(line[0]),\n            r = parseInt(line[1]);\n\n        if ( n === 0 && r === 0 ) break;\n\n        for ( var i = n; i > 0; i-- ) {\n            cards.push(i);\n        }\n\n        // シャッフルする回数分だけ\n        while(r--) {\n            var line = inputs.shift().split(\" \"),\n                p = parseInt(line[0]) - 1,  // 添字なので\n                c = parseInt(line[1]),\n                tmp;\n\n            tmp = cards.splice(p, c);\n            cards = tmp.concat(cards);\n        }\n\n        console.log(cards.shift());\n    }\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00854_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = arr['shift']();\n    if (nm == '0\\x200\\x200')\n        break;\n    nm = nm['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    var start = nm[0x2];\n    var ary = [];\n    for (var i = 0x0; i <= n; i++)\n        ary[i] = !![];\n    var i = start;\n    var j = 0x0;\n    ary[start] = ![];\n    var cnt = 0x1;\n    while (!![]) {\n        if (cnt == ary['length'] - 0x2)\n            break;\n        if (ary[i]) {\n            j++;\n            if (j == m) {\n                ary[i] = ![];\n                j = 0x0;\n                cnt++;\n            }\n        }\n        i++;\n        if (ary['length'] - 0x1 < i)\n            i = 0x1;\n    }\n    for (var i = 0x1; i <= n; i++) {\n        if (ary[i])\n            console['log'](i);\n    }\n}", "test_cases": [["8 5 3\n100 9999 98\n10000 10000 10000\n0 0 0", "1\n93\n2019"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=arr.shift();\n   if(nm==\"0 0 0\")break;\n   nm=nm.split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   var start=nm[2];\n   var ary=[];\n   for(var i=0;i<=n;i++)ary[i]=true;\n   var i=start;\n   var j=0;\n   ary[start]=false;\n   var cnt=1;\n   while(true){\n      if(cnt==ary.length-2)break;\n      if(ary[i]){\n         j++;\n         if(j==m){\n            ary[i]=false;\n            j=0;\n            cnt++;\n         }\n      }\n      i++;\n      if(ary.length-1<i)i=1;\n   }\n   for(var i=1;i<=n;i++){\n      if(ary[i])console.log(i);\n   }\n}", "language": "JavaScript"}
{"filename": "p00999_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var abc = arr['shift']();\n    if (abc == '0\\x200\\x200\\x200\\x200')\n        break;\n    var ary = (abc + '\\x20' + arr['shift']())['split']('\\x20')['map'](Number);\n    (function (_0x361773, _0x36dc0a, _0x3d75ee, _0x1594e8, _0x21e626, _0x1d7055, _0x450e91, _0x5ed05b) {\n        var _0x2efc58 = Math['floor'](_0x5ed05b / _0x1594e8) * _0x1594e8 * _0x21e626;\n        var _0x3e4b54 = _0x5ed05b % _0x1594e8;\n        var _0x4b8bcb = function (_0x2c4a38) {\n            _0x2c4a38 += _0x3e4b54 * _0x3d75ee;\n            _0x2c4a38 += _0x1d7055 * _0x361773 + _0x450e91 * _0x36dc0a;\n            return _0x2c4a38;\n        }(_0x2efc58);\n        var _0x4b2e07 = function (_0x483364, _0x32be10, _0x29cfea) {\n            if (_0x483364 == 0x0) {\n                var _0x2f9beb = _0x3e4b54 == 0x0 ? 0x0 : _0x1594e8 - _0x3e4b54;\n                if (_0x2f9beb > 0x0)\n                    _0x483364 += _0x21e626 * _0x1594e8;\n                while (_0x2f9beb--) {\n                    if (_0x29cfea > 0x0)\n                        _0x29cfea--;\n                    else if (_0x32be10 > 0x0)\n                        _0x32be10--;\n                }\n                _0x483364 += _0x32be10 * _0x361773 + _0x29cfea * _0x36dc0a;\n                return _0x483364;\n            }\n            if (_0x483364 != 0x0) {\n                return _0x32be10 * _0x361773 + _0x29cfea * _0x36dc0a + _0x5ed05b * _0x21e626;\n            }\n        }(_0x2efc58, _0x1d7055, _0x450e91);\n        console['log'](Math['min'](_0x4b8bcb, _0x4b2e07));\n    }['apply'](null, ary));\n}", "test_cases": [["70 100 340 4 200\n1 1 4\n70 100 340 4 200\n0 1 3\n70 100 340 4 200\n1 1 2\n0 0 0 0 0", "970\n800\n800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var abc=arr.shift();\n   if(abc==\"0 0 0 0 0\")break;\n   var ary=(abc+\" \"+arr.shift()).split(\" \").map(Number);\n   (function(a,b,c,d,e,na,nb,nc){\n      var ans=Math.floor(nc/d)*d*e;\n      var nokori=nc%d;\n      var A=(function(ans){\n         ans+=nokori*c;\n         ans+=na*a+nb*b;\n         return ans;\n      })(ans);\n      var B=(function(ans,na,nb){\n         if(ans==0){\n            var yobun=(nokori==0)?0:d-nokori;\n            if(yobun>0)ans+=e*d;\n            while(yobun--){\n               if(nb>0)nb--;\n               else if(na>0)na--;\n            }\n            ans+=na*a+nb*b;\n            return ans;\n         }\n         if(ans!=0){\n            return na*a+nb*b+nc*e;\n         }\n      })(ans,na,nb);\n      console.log(Math.min(A,B));\n   }).apply(null,ary);\n}", "language": "JavaScript"}
{"filename": "p01131_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar AL = Arr['shift']();\nvar abc = [\n    '',\n    '.,!?\\x20',\n    'abc',\n    'def',\n    'ghi',\n    'jkl',\n    'mno',\n    'pqrs',\n    'tuv',\n    'wxyz'\n];\nabc = abc['map'](function (_0x878745) {\n    return _0x878745['split']('');\n});\nfor (var i = 0x0; i < AL; i++) {\n    var arr = Arr[i]['split']('')['map'](Number);\n    var str = '';\n    var a = '';\n    var n = -0x1;\n    arr['forEach'](function (_0x597f60) {\n        if (_0x597f60 > 0x0) {\n            n++;\n            a = abc[_0x597f60][n % abc[_0x597f60]['length']];\n        } else {\n            str += a;\n            n = -0x1;\n            a = '';\n        }\n    });\n    console['log'](str);\n}", "test_cases": [["5\n20\n220\n222220\n44033055505550666011011111090666077705550301110\n000555555550000330000444000080000200004440000", "a\nb\nb\nhello, world!\nkeitai"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nvar abc=[\"\",\".,!? \",\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"];\nabc=abc.map(function(v){return v.split(\"\");});\nfor(var i=0;i<AL;i++){\n   var arr=Arr[i].split(\"\").map(Number);\n   var str=\"\";\n   var a=\"\";\n   var n=-1;\n   arr.forEach(function(v){\n      if(v>0){\n         n++;\n         a=abc[v][n%abc[v].length];\n      }else{\n         str+=a;\n         n=-1;\n         a=\"\";\n      }\n   });\nconsole.log(str);\n}", "language": "JavaScript"}
{"filename": "p01132_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar j = 0x0;\nwhile (!![]) {\n    var v = Arr['shift']() - 0x0;\n    if (v == 0x0)\n        break;\n    var m = Arr['shift']()['split']('\\x20')['map'](Number);\n    var money = 0xa * m[0x0] + 0x32 * m[0x1] + 0x64 * m[0x2] + 0x1f4 * m[0x3] - v;\n    var M = [\n        0x0,\n        0x0,\n        0x0,\n        0x0\n    ];\n    while (0x1f4 <= money) {\n        M[0x3]++;\n        money -= 0x1f4;\n    }\n    while (0x64 <= money) {\n        M[0x2]++;\n        money -= 0x64;\n    }\n    while (0x32 <= money) {\n        M[0x1]++;\n        money -= 0x32;\n    }\n    while (0xa <= money) {\n        M[0x0]++;\n        money -= 0xa;\n    }\n    var coin = [\n        0xa,\n        0x32,\n        0x64,\n        0x1f4\n    ];\n    var str = '';\n    m['forEach'](function (_0x4833f4, _0x571173) {\n        if (_0x4833f4 > M[_0x571173])\n            str += coin[_0x571173] + '\\x20' + (_0x4833f4 - M[_0x571173]) + '\\x0a';\n    });\n    console['log'](str);\n}", "test_cases": [["160\n1 1 2 0\n160\n1 0 2 10\n0", "10 1\n50 1\n100 1\n\n10 1\n100 2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar j=0;\nwhile(true){\n   var v=Arr.shift()-0;\n   if(v==0)break;\n   var m=(Arr.shift()).split(\" \").map(Number);\n   var money=(10*m[0]+50*m[1]+100*m[2]+500*m[3])-v;\n   var M=[0,0,0,0];\n   while(500<=money){M[3]++;money-=500;}\n   while(100<=money){M[2]++;money-=100;}\n   while(50<=money){M[1]++;money-=50;}\n   while(10<=money){M[0]++;money-=10;}\n   var coin=[10,50,100,500];\n   var str=\"\";\n   m.forEach(function(v,i){\n      if(v>M[i])str+=coin[i]+\" \"+(v-M[i])+\"\\n\";\n   });\n   console.log(str);\n}", "language": "JavaScript"}
{"filename": "p01140_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var str = arr['shift']();\n    if (str == '0\\x200')\n        break;\n    var ary = str['split']('\\x20')['map'](Number);\n    var h = [];\n    var w = [];\n    for (var i = 0x0; i < ary[0x0]; i++)\n        h['push'](arr['shift']() - 0x0);\n    for (var i = 0x0; i < ary[0x1]; i++)\n        w['push'](arr['shift']() - 0x0);\n    var H = {};\n    for (var i = 0x0; i < h['length']; i++) {\n        var sum = 0x0;\n        for (var j = i; j < h['length']; j++) {\n            if (j != i)\n                sum += h[j];\n            H['hasOwnProperty'](h[i] + sum) ? H[h[i] + sum]++ : H[h[i] + sum] = 0x1;\n        }\n    }\n    var W = {};\n    for (var i = 0x0; i < w['length']; i++) {\n        var sum = 0x0;\n        for (var j = i; j < w['length']; j++) {\n            if (j != i)\n                sum += w[j];\n            W['hasOwnProperty'](w[i] + sum) ? W[w[i] + sum]++ : W[w[i] + sum] = 0x1;\n        }\n    }\n    var cnt = 0x0;\n    for (var k in H) {\n        if (W['hasOwnProperty'](k))\n            cnt += H[k] * W[k];\n    }\n    console['log'](cnt);\n}", "test_cases": [["3 3\n1\n1\n4\n2\n3\n1\n1 2\n10\n10\n10\n0 0", "6\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var str=arr.shift();\n   if(str==\"0 0\")break;\n   var ary=str.split(\" \").map(Number);\n   var h=[];\n   var w=[];\n   for(var i=0;i<ary[0];i++)h.push(arr.shift()-0);\n   for(var i=0;i<ary[1];i++)w.push(arr.shift()-0);\n   var H={};\n   for(var i=0;i<h.length;i++){\n      var sum=0;\n      for(var j=i;j<h.length;j++){\n         if(j!=i)sum+=h[j];\n         (H.hasOwnProperty(h[i]+sum))?H[h[i]+sum]++:H[h[i]+sum]=1;\n      }\n   }\n   var W={};\n   for(var i=0;i<w.length;i++){\n      var sum=0;\n      for(var j=i;j<w.length;j++){\n         if(j!=i)sum+=w[j];\n         (W.hasOwnProperty(w[i]+sum))?W[w[i]+sum]++:W[w[i]+sum]=1;\n      }\n   }\n   var cnt=0;\n   for(var k in H){\n      if(W.hasOwnProperty(k))cnt+=H[k]*W[k];\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p01803_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var Arr = arr['splice'](0x0, n);\n    var obj = {};\n    var max = 0x0;\n    Arr['forEach'](function (_0x2b7d45) {\n        var _0x14cc70 = _0x2b7d45;\n        var _0x55e2bd = _0x14cc70[0x0];\n        var _0x21d354 = ![];\n        for (var _0x5a171c = 0x0; _0x5a171c < _0x14cc70['length']; _0x5a171c++) {\n            if (_0x21d354)\n                _0x55e2bd += _0x14cc70[_0x5a171c];\n            _0x21d354 = /[aiueo]/['test'](_0x14cc70[_0x5a171c]) ? !![] : ![];\n        }\n        obj[_0x55e2bd] = !![];\n        max = Math['max'](max, _0x55e2bd['length']);\n    });\n    for (var i = 0x1; i <= max; i++) {\n        var Obj = {};\n        for (var key in obj) {\n            Obj[key['slice'](0x0, i)] = !![];\n        }\n        if (Object['keys'](Obj)['length'] == n) {\n            console['log'](i);\n            break;\n        }\n        if (i == max)\n            console['log'](-0x1);\n    }\n}", "test_cases": [["3\nhaneda\noookayama\ntsu\n2\nazusa\nazishirabe\n2\nsnuke\nsnake\n4\nhaneda\nhonda\nhanamaki\nhawaii\n0", "1\n4\n-1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var Arr = arr.splice(0,n);\n   var obj = {};\n   var max = 0;\n   Arr.forEach(function(v){\n      var str = v;\n      var s = str[0];\n      var flag = false;\n      for (var i = 0; i < str.length; i++) {\n         if (flag) s += str[i];\n         flag = (/[aiueo]/.test(str[i])) ? true : false;\n      }\n      obj[s] = true;\n      max = Math.max(max, s.length);\n   });\n   for (var i = 1; i <= max; i++) {\n      var Obj = {};\n      for (var key in obj) {\n         Obj[key.slice(0, i)] = true;\n      }\n      if (Object.keys(Obj).length == n) {\n         console.log(i);\n         break;\n      }\n      if (i == max) console.log(-1);\n   }\n}", "language": "JavaScript"}
{"filename": "p02318_1", "type": "JavaScript", "obfuscated": "function LD(_0x32edc0, _0x4f5b0d) {\n    var _0x3be4eb = new Array();\n    for (var _0x2903a7 = 0x0; _0x2903a7 < _0x32edc0['length'] + 0x1; _0x2903a7++) {\n        var _0x19c084 = new Array();\n        for (var _0x329f8f = 0x0; _0x329f8f < _0x4f5b0d['length'] + 0x1; _0x329f8f++) {\n            _0x19c084['push'](0x0);\n        }\n        _0x3be4eb['push'](_0x19c084);\n    }\n    for (var _0x2903a7 = 0x0; _0x2903a7 < _0x32edc0['length'] + 0x1; _0x2903a7++) {\n        _0x3be4eb[_0x2903a7][0x0] = _0x2903a7;\n    }\n    for (var _0x2903a7 = 0x0; _0x2903a7 < _0x4f5b0d['length'] + 0x1; _0x2903a7++) {\n        _0x3be4eb[0x0][_0x2903a7] = _0x2903a7;\n    }\n    for (var _0x2903a7 = 0x1; _0x2903a7 < _0x32edc0['length'] + 0x1; _0x2903a7++) {\n        for (var _0x329f8f = 0x1; _0x329f8f < _0x4f5b0d['length'] + 0x1; _0x329f8f++) {\n            if (_0x32edc0['charAt'](_0x2903a7 - 0x1) == _0x4f5b0d['charAt'](_0x329f8f - 0x1)) {\n                _0x3be4eb[_0x2903a7][_0x329f8f] = Math['min'](_0x3be4eb[_0x2903a7 - 0x1][_0x329f8f] + 0x1, _0x3be4eb[_0x2903a7][_0x329f8f - 0x1] + 0x1, _0x3be4eb[_0x2903a7 - 0x1][_0x329f8f - 0x1]);\n            } else {\n                _0x3be4eb[_0x2903a7][_0x329f8f] = Math['min'](_0x3be4eb[_0x2903a7 - 0x1][_0x329f8f] + 0x1, _0x3be4eb[_0x2903a7][_0x329f8f - 0x1] + 0x1, _0x3be4eb[_0x2903a7 - 0x1][_0x329f8f - 0x1] + 0x1);\n            }\n        }\n    }\n    return _0x3be4eb[_0x32edc0['length']][_0x4f5b0d['length']];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar strings = input['split']('\\x0a');\nconsole['log'](LD(strings[0x0], strings[0x1]));", "test_cases": [["acac\nacm", "2"], ["icpc\nicpc", "0"]], "original": "function LD(a, b){\n    var ar = new Array();\n    for(var i = 0; i < a.length + 1; i++){\n        var subar = new Array();\n        for(var j = 0; j < b.length + 1; j++){\n            subar.push(0);\n        }\n        ar.push(subar);\n    }\n\n    for(var i = 0; i < a.length + 1; i++){\n        ar[i][0] = i;\n    }\n\n    for(var i = 0; i < b.length + 1; i++){\n        ar[0][i] = i;\n    }\n\n    for(var i = 1; i < a.length + 1; i++){\n        for(var j = 1; j < b.length + 1; j++){\n            if(a.charAt(i - 1) == b.charAt(j - 1)){\n                ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1]);\n            }else{\n                ar[i][j] = Math.min(ar[i - 1][j] + 1, ar[i][j - 1] + 1, ar[i - 1][j - 1] + 1);\n            }\n        }\n    }\n    return ar[a.length][b.length];\n} \n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar strings = input.split('\\n');\n\nconsole.log(LD(strings[0], strings[1]));", "language": "JavaScript"}
{"filename": "p02379_1", "type": "JavaScript", "obfuscated": "var reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x36375b) {\n    var _0x13ca20 = _0x36375b['split']('\\x20');\n    var _0x3d9555 = parseInt(_0x13ca20[0x0], 0xa);\n    var _0x4405d7 = parseInt(_0x13ca20[0x1], 0xa);\n    var _0x4b8154 = parseInt(_0x13ca20[0x2], 0xa);\n    var _0xf8bac2 = parseInt(_0x13ca20[0x3], 0xa);\n    _0x3d9555 = Math['sqrt']((_0x3d9555 - _0x4b8154) * (_0x3d9555 - _0x4b8154) + (_0x4405d7 - _0xf8bac2) * (_0x4405d7 - _0xf8bac2));\n    console['log'](_0x3d9555['toFixed'](0x8));\n    process['exit']();\n});\nprocess['stdin']['on']('end', function () {\n});", "test_cases": [["0 0 1 1", "1.41421356"]], "original": "var reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var a = line.split(' ');\n  var b = parseInt(a[0],10);\n  var c = parseInt(a[1],10);\n  var d = parseInt(a[2],10);\n  var e = parseInt(a[3],10);\n  b = Math.sqrt((b-d)*(b-d)+(c-e)*(c-e));\n  console.log(b.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript"}
{"filename": "p02538_1", "type": "JavaScript", "obfuscated": "function Main(_0x4b09df) {\n    _0x4b09df = _0x4b09df['split']('\\x0a')['map'](_0x21f70b => _0x21f70b['split']('\\x20'));\n    const [_0xcf5d51, _0x1538fc] = _0x4b09df[0x0]['map'](_0x5939b4 => +_0x5939b4);\n    _0x4b09df['shift']();\n    const _0x17c890 = 0x3b800001;\n    const _0x3a9d47 = new Array(_0xcf5d51)['fill'](0x1);\n    _0x4b09df['map'](_0xa6a7a0 => {\n        const [_0x21fb41, _0x5879ce, _0x53d6e4] = [\n            _0xa6a7a0[0x0] - 0x1,\n            _0xa6a7a0[0x1] - 0x1,\n            +_0xa6a7a0[0x2]\n        ];\n        for (let _0x511223 = _0x21fb41; _0x511223 <= _0x5879ce; _0x511223++) {\n            _0x3a9d47[_0x511223] = _0x53d6e4;\n        }\n        let _0x58e59d = 0x0;\n        for (let _0x24325b = 0x0; _0x24325b < _0xcf5d51; _0x24325b++) {\n            _0x58e59d = (_0x58e59d * 0xa + _0x3a9d47[_0x24325b]) % _0x17c890;\n        }\n        console['log'](_0x58e59d);\n    });\n}\nfunction toInt(_0x3424e2) {\n    return parseInt(_0x3424e2, 0xa);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8 5\n3 6 2\n1 4 7\n3 8 3\n2 2 2\n4 5 1", "11222211\n77772211\n77333333\n72333333\n72311333"], ["200000 1\n123 456 7", "641437905"]], "original": "function Main(input) {\n  input = input.split(\"\\n\").map(v => v.split(\" \"));\n  const [n, q] = input[0].map(v => +v);\n  input.shift();\n  \n  \n  const mod = 998244353;\n  const str = (new Array(n)).fill(1);\n  \n  input.map(value => {\n    const [l, r, d] = [(value[0] - 1), (value[1] - 1), +value[2]];\n    for (let i = l; i <= r; i++) {\n      str[i] = d;\n    }\n\n    let num = 0;\n    for (let s = 0; s < n; s++) {\n      num = (num * 10 + str[s]) % mod;\n    }\n    console.log(num);\n  });  \n}\n\nfunction toInt(v) {\n    //return BigInt(v);\n    return parseInt(v, 10);\n}\n// 魔法\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p02722_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction arrayOfDivisors(_0x44dc0a) {\n    const _0x20f57d = new Array();\n    _0x20f57d[0x0] = 0x1;\n    for (let _0x4f2cec = 0x2; _0x4f2cec <= Math['sqrt'](_0x44dc0a); _0x4f2cec++) {\n        if (_0x44dc0a % _0x4f2cec === 0x0) {\n            _0x20f57d['push'](_0x4f2cec);\n        }\n    }\n    const _0x30b7d8 = _0x20f57d['length'];\n    if (Math['sqrt'](_0x44dc0a) !== _0x20f57d[_0x30b7d8 - 0x1]) {\n        _0x20f57d['push'](_0x44dc0a / _0x20f57d[_0x30b7d8 - 0x1]);\n    }\n    for (let _0x129b62 = _0x30b7d8 - 0x2; 0x0 <= _0x129b62; _0x129b62--) {\n        _0x20f57d['push'](_0x44dc0a / _0x20f57d[_0x129b62]);\n    }\n    return _0x20f57d;\n}\n(function main(_0x544035) {\n    const _0x1fafb9 = Number(_0x544035['trim']());\n    const _0x5c9786 = arrayOfDivisors(_0x1fafb9 - 0x1)['length'] - 0x1;\n    let _0x20a9d3 = 0x0;\n    const _0x2a4912 = arrayOfDivisors(_0x1fafb9);\n    _0x2a4912['shift']();\n    for (let _0xa7639f of _0x2a4912) {\n        let _0x439517 = _0x1fafb9;\n        do {\n            _0x439517 /= _0xa7639f;\n        } while (_0x439517 % _0xa7639f === 0x0);\n        if (_0x439517 === 0x1) {\n            _0x20a9d3++;\n        } else if (arrayOfDivisors(_0x439517 - 0x1)['indexOf'](_0xa7639f) > -0x1) {\n            _0x20a9d3++;\n        }\n    }\n    console['log'](_0x5c9786 + _0x20a9d3);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["6", "3"], ["3141", "13"], ["314159265358", "9"]], "original": "\"use strict\";\n\nfunction arrayOfDivisors(n){\n  const divisor = new Array();\n  divisor[0] = 1;\n  \n  for(let i = 2; i <= Math.sqrt(n); i++){\n    if(n % i === 0){\n      divisor.push(i);\n    }\n  }\n  \n  const p = divisor.length;\n  \n  if(Math.sqrt(n) !== divisor[p - 1]){\n    divisor.push(n / divisor[p - 1]);\n  }\n  \n  for(let i = p - 2; 0 <= i; i--){\n    divisor.push(n / divisor[i]);\n  }\n  \n  return divisor;\n}\n\n(function main(input){\n  const n = Number(input.trim());\n  \n  const subOnly = arrayOfDivisors(n - 1).length - 1;\n  \n  let divIncluded = 0;\n  \n  const divOfN = arrayOfDivisors(n);\n  divOfN.shift();\n  for (let d of divOfN){\n    let n1 = n;\n    do{\n      n1 /= d;\n    } while (n1 % d === 0);\n    \n    if (n1 === 1){\n      divIncluded++;\n    } else if (arrayOfDivisors(n1 - 1).indexOf(d) > -1){\n      divIncluded++;\n    }\n  }\n  \n  console.log(subOnly + divIncluded);\n  \n})(require('fs').readFileSync('/dev/stdin', 'utf8'));\n\n", "language": "JavaScript"}
{"filename": "p02780_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst fact = _0x3e3624 => {\n    if (_0x3e3624 === 0x1)\n        0x1;\n    return _0x3e3624 + fact(_0x3e3624 - 0x1);\n};\nfunction Main(_0x2fa948) {\n    _0x2fa948 = _0x2fa948['trim']()['split']('\\x0a');\n    const _0x5ca2f7 = _0x2fa948[0x0]['split']('\\x20')['map'](_0x39bbe4 => parseInt(_0x39bbe4));\n    const _0x4a1219 = _0x5ca2f7[0x0];\n    const _0x26d733 = _0x5ca2f7[0x1];\n    let _0x2b2bb5 = _0x2fa948[0x1]['split']('\\x20')['map'](_0x45c487 => parseInt(_0x45c487));\n    let _0x5cc650 = {};\n    for (let _0x2c4aad = 0x0; _0x2c4aad < _0x4a1219; ++_0x2c4aad) {\n        const _0x481898 = _0x2b2bb5[_0x2c4aad];\n        if (_0x5cc650[_0x481898])\n            continue;\n        let _0x28569a = 0x0;\n        for (let _0x2aa458 = _0x481898; _0x2aa458 > 0x0; --_0x2aa458) {\n            _0x28569a += _0x2aa458;\n        }\n        _0x5cc650[_0x481898] = _0x28569a;\n    }\n    let _0x711f7b = 0x0;\n    for (let _0x30c987 = 0x0; _0x30c987 < _0x4a1219 - (_0x26d733 - 0x1); ++_0x30c987) {\n        let _0x4271fd = 0x0;\n        for (let _0x251ec6 = _0x30c987; _0x251ec6 < _0x30c987 + _0x26d733; ++_0x251ec6) {\n            _0x4271fd += _0x5cc650[_0x2b2bb5[_0x251ec6]] * 0x1 / _0x2b2bb5[_0x251ec6];\n        }\n        _0x711f7b = Math['max'](_0x4271fd, _0x711f7b);\n    }\n    console['log'](_0x711f7b['toFixed'](0xc));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n1 2 2 4 5", "7.000000000000"], ["4 1\n6 6 6 6", "3.500000000000"], ["10 4\n17 13 13 12 15 20 10 13 17 11", "32.000000000000"]], "original": "'use strict'\n\nconst fact = (n) => {\n  if (n === 1) 1\n  return n + fact(n - 1)\n}\n\nfunction Main(input) {\n  input = input.trim().split('\\n')\n  const array = input[0].split(' ').map(s => parseInt(s))\n  const N = array[0]\n  const K = array[1]\n\n  let A = input[1].split(' ').map(s => parseInt(s))\n\n  let dp = {}\n  // 各値の期待値を計算する\n  for(let i = 0; i < N; ++i) {\n    const a = A[i]\n    if (dp[a]) continue\n\n    let tmp = 0\n    for(let j = a; j > 0; --j) {\n      tmp += j\n    }\n    dp[a] = tmp\n  }\n\n  let result = 0\n\n  // 前から順番に組み合わせる\n  for (let i = 0; i < N - (K - 1); ++i) {\n\n    let total = 0\n    for(let j = i; j < i + K; ++j) {\n      total += dp[A[j]] * 1/A[j]\n    }\n\n    result = Math.max(total, result)\n  }\n\n  console.log(result.toFixed(12))\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02890_1", "type": "JavaScript", "obfuscated": "function Main(_0xf740c7) {\n    var _0x2b00ed = _0xf740c7['split']('\\x0a')[0x0] - 0x0;\n    var _0x5abd21 = _0xf740c7['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x55fa05 => _0x55fa05 - 0x0);\n    var _0x485ed0 = new Set(_0x5abd21);\n    var _0x4edc80 = [];\n    _0x4edc80['push'](_0x2b00ed);\n    for (var _0x4b605b = 0x2; _0x4b605b <= _0x2b00ed; _0x4b605b++) {\n        if (_0x485ed0['size'] < _0x4b605b) {\n            _0x4edc80['push'](0x0);\n        } else {\n            _0x4edc80['push'](Math['floor'](_0x485ed0['size'] / _0x4b605b));\n        }\n    }\n    console['log'](_0x4edc80['join']('\\x0a')['toString']());\n    return;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n2 1 2", "3\n1\n0"], ["5\n1 2 3 4 5", "5\n2\n1\n1\n1"], ["4\n1 3 3 3", "4\n1\n0\n0"]], "original": "function Main(arg) {\n \n    var N = arg.split(\"\\n\")[0]-0;\n    var A = arg.split(\"\\n\")[1].split(\" \").map(v=>v-0);\n \n    var tmp = new Set(A);\n    var ans = [];\n\n    ans.push(N);\n\n    for (var K = 2; K <= N; K++){\n        if (tmp.size < K) {\n            ans.push(0);\n        }\n        else {\n            ans.push(Math.floor(tmp.size / K));\n        }\n    }\n\n    console.log(ans.join(\"\\n\").toString());\n\n    return;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02941_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst arg_str = require('fs')['readFileSync']('/dev/stdin', 'UTF-8');\nconst args_lines = arg_str['split']('\\x0a');\nconst n = args_lines[0x0];\nconst a = args_lines[0x1]['split']('\\x20')['map'](_0x55551b => parseInt(_0x55551b));\nconst b = args_lines[0x2]['split']('\\x20')['map'](_0x433704 => parseInt(_0x433704));\nlet cnt = 0x0;\nlet current_b = b;\nwhile (!![]) {\n    const max_index = current_b['indexOf'](Math['max'](...current_b));\n    if (max_index == 0x0) {\n        current_b[max_index] = current_b[max_index] - current_b[0x1] - current_b[n - 0x1];\n    } else if (max_index == n - 0x1) {\n        current_b[max_index] = current_b[max_index] - current_b[n - 0x2] - current_b[0x0];\n    } else {\n        current_b[max_index] = current_b[max_index] - current_b[max_index - 0x1] - current_b[max_index + 0x1];\n    }\n    cnt++;\n    if (JSON['stringify'](current_b) == JSON['stringify'](a)) {\n        console['log'](cnt);\n        break;\n    }\n    if (current_b['find'](_0x48268b => _0x48268b < 0x1)) {\n        console['log'](-0x1);\n        break;\n    }\n}", "test_cases": [["3\n1 1 1\n13 5 7", "4"], ["4\n1 2 3 4\n2 3 4 5", "-1"], ["5\n5 6 5 2 1\n9817 1108 6890 4343 8704", "25"]], "original": "\"use strict\"\n\nconst arg_str = require('fs').readFileSync('/dev/stdin', 'UTF-8')\nconst args_lines = arg_str.split('\\n')\nconst n = args_lines[0]\nconst a = args_lines[1].split(' ').map(x=>parseInt(x))\nconst b = args_lines[2].split(' ').map(x=>parseInt(x))\n\nlet cnt = 0\n\nlet current_b = b\n\nwhile (true){\n    const max_index = current_b.indexOf(Math.max(...current_b))\n\n    if(max_index == 0){\n        current_b[max_index] = current_b[max_index] - current_b[1] - current_b[n - 1]\n    }else if(max_index == (n - 1)){\n        current_b[max_index] = current_b[max_index] - current_b[n - 2] - current_b[0]\n    }else{\n        current_b[max_index] = current_b[max_index] - current_b[max_index - 1] - current_b[max_index + 1]\n    }\n    cnt++\n    if(JSON.stringify(current_b) == JSON.stringify(a)){\n        console.log(cnt)\n        break\n    }\n    if(current_b.find(x=>x<1)){\n        console.log(-1)\n        break\n    }\n}\n", "language": "JavaScript"}
{"filename": "p03171_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction solve(_0x235ff4, _0x47e806) {\n    var _0x5ba347 = new Array(_0x235ff4 + 0x1)['fill'](0x0)['map'](_0x1b27cc => new Array(_0x235ff4 + 0x1)['fill'](0x0));\n    var _0x1bc1e3 = 0x1;\n    var _0x43e539 = 0x1;\n    while (_0x43e539 <= _0x235ff4) {\n        var _0x40479c = _0x43e539;\n        for (var _0x57015b = _0x1bc1e3; _0x57015b <= _0x235ff4; _0x57015b++) {\n            if (_0x40479c > _0x235ff4) {\n                break;\n            }\n            if (_0x40479c === _0x57015b) {\n                _0x5ba347[_0x57015b][_0x40479c] = _0x47e806[_0x57015b - 0x1];\n            } else if (_0x40479c === _0x57015b + 0x1) {\n                _0x5ba347[_0x57015b][_0x40479c] = Math['max'](_0x47e806[_0x57015b - 0x1], _0x47e806[_0x40479c - 0x1]);\n            } else {\n                _0x5ba347[_0x57015b][_0x40479c] = Math['max'](_0x47e806[_0x57015b - 0x1] + Math['min'](_0x5ba347[_0x57015b + 0x1][_0x40479c - 0x1], _0x5ba347[_0x57015b + 0x2][_0x40479c]), _0x47e806[_0x40479c - 0x1] + Math['min'](_0x5ba347[_0x57015b + 0x1][_0x40479c - 0x1], _0x5ba347[_0x57015b][_0x40479c - 0x2]));\n            }\n            _0x40479c++;\n        }\n        _0x43e539++;\n    }\n    var _0x73eda6 = _0x5ba347[0x1][_0x235ff4];\n    var _0x3ce7fb = _0x47e806['reduce']((_0x18a7a3, _0x119063) => _0x18a7a3 + _0x119063);\n    return _0x73eda6 - (_0x3ce7fb - _0x73eda6);\n}\nfunction main(_0x336b5b) {\n    var _0x4e8a0f = _0x336b5b['split']('\\x0a');\n    var _0x4b2787 = parseInt(_0x4e8a0f[0x0]);\n    var _0x51280d = _0x4e8a0f[0x1]['split']('\\x20')['map'](_0x5aed81 => parseInt(_0x5aed81));\n    var _0xeff4cd = solve(_0x4b2787, _0x51280d);\n    console['log'](_0xeff4cd);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n10 80 90 30", "10"], ["3\n10 100 10", "-80"], ["1\n10", "10"], ["10\n1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1", "4999999995"], ["6\n4 2 9 7 1 5", "2"]], "original": "'use strict'\n\nfunction solve(N, A) {\n  var dp = new Array(N+1).fill(0).map(e => new Array(N+1).fill(0))\n  var row = 1\n  var col = 1\n  while (col <= N) {\n    var c = col\n    for (var r = row; r <= N; r++) {\n      if (c > N) {\n        break\n      }\n      if (c === r) {\n        dp[r][c] = A[r-1]\n      } else if (c === (r+1)) {\n        dp[r][c] = Math.max(A[r-1], A[c-1])\n      } else {\n        dp[r][c] = Math.max(A[r-1] + Math.min(dp[r+1][c-1], dp[r+2][c]), A[c-1] + Math.min(dp[r+1][c-1], dp[r][c-2]))\n      }\n      c++\n    }\n    col++\n  }\n  var taro = dp[1][N]\n  var sum = A.reduce((acc, current) => acc + current)\n  return taro - (sum - taro)\n}\n\nfunction main(input) {\n  var lines = input.split(\"\\n\")\n  var N = parseInt(lines[0])\n  var A = lines[1].split(' ').map(l => parseInt(l))\n  var ans = solve(N, A)\n  console.log(ans)\n}\n\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03222_1", "type": "JavaScript", "obfuscated": "function Main(_0x105baa) {\n    _0x105baa = _0x105baa['split']('\\x20')['map'](_0x38d51a => ~~_0x38d51a);\n    var _0x26b0dd = _0x105baa[0x0];\n    var _0x5eb86e = _0x105baa[0x1];\n    var _0x4b83cc = _0x105baa[0x2];\n    var _0x1391dd = 0xa ** 0x9 + 0x7;\n    if (_0x5eb86e == 0x1)\n        return 0x1;\n    var _0x2087b2 = Array(0x2 ** (_0x5eb86e - 0x1))['fill'](0x0)['map']((_0xf3c1fe, _0x4c0f2a) => _0x4c0f2a)['map'](_0x2383ff => _0x2383ff['toString'](0x2))['filter'](_0x3d59b1 => !/11/['test'](_0x3d59b1))['map'](_0x29ddf9 => '000000' + _0x29ddf9)['map'](_0x331b1c => _0x331b1c['slice'](0x1 - _0x5eb86e))['map'](_0x2edf8c => '0' + _0x2edf8c + '0');\n    var _0x69d998 = Array(_0x26b0dd + 0x1);\n    for (var _0x519302 = 0x0; _0x519302 <= _0x26b0dd; _0x519302++) {\n        _0x69d998[_0x519302] = Array(_0x5eb86e)['fill'](0x0);\n    }\n    _0x69d998[0x0][0x0] = 0x1;\n    for (var _0x519302 = 0x1; _0x519302 <= _0x26b0dd; _0x519302++) {\n        _0x2087b2['forEach'](function (_0x834225) {\n            for (var _0x56e792 = 0x0; _0x56e792 < _0x5eb86e; _0x56e792++) {\n                ({\n                    '10': _0x23fcf8 => _0x69d998[_0x519302][_0x56e792] += _0x69d998[_0x519302 - 0x1][_0x56e792 - 0x1],\n                    '01': _0x48590d => _0x69d998[_0x519302][_0x56e792] += _0x69d998[_0x519302 - 0x1][_0x56e792 + 0x1],\n                    '00': _0x33fd83 => _0x69d998[_0x519302][_0x56e792] += _0x69d998[_0x519302 - 0x1][_0x56e792]\n                }[_0x834225[_0x56e792] + _0x834225[_0x56e792 + 0x1]]());\n                _0x69d998[_0x519302][_0x56e792] %= _0x1391dd;\n            }\n        });\n    }\n    return _0x69d998[_0x26b0dd][_0x4b83cc - 0x1];\n}\nif (typeof require !== 'undefined')\n    console['log'](Main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["1 3 2", "1"], ["1 3 1", "2"], ["2 3 3", "1"], ["2 3 1", "5"], ["7 1 1", "1"], ["15 8 5", "437760187"]], "original": "function Main(input){\n  input = input.split(\" \").map(a=>~~a)\n\tvar H = input[0];\n  var W = input[1];\n  var K = input[2];\n  var mod = 10**9+7;\n  \n  if(W == 1)return 1;\n  \n  var validAmidaList = Array(2**(W-1))\n  \t.fill(0)\n    .map((a,b)=>b)\n    .map(a=>a.toString(2))\n    .filter(a=>!/11/.test(a))\n    .map(a=>\"000000\"+a)\n    .map(a=>a.slice(1-W))\n    .map(a=>\"0\"+a+\"0\")\n  \n  var dp = Array(H+1);\n  for(var i = 0; i <= H;i++){\n  \tdp[i] = Array(W).fill(0);\n  }\n  dp[0][0] = 1;\n  \n  for(var i = 1; i <= H;i++){\n  \tvalidAmidaList.forEach(function(elem){\n    \tfor(var j = 0; j < W; j++){\n      \t({\n        \t\"10\":a=>dp[i][j] += dp[i-1][j-1],\n          \"01\":a=>dp[i][j] += dp[i-1][j+1],\n          \"00\":a=>dp[i][j] += dp[i-1][j]\n        })[elem[j]+elem[j+1]]();\n        dp[i][j] %= mod;\n      }\n    })\n  }\n  \n  return dp[H][K-1];\n}\n\nif(typeof require !== 'undefined')console.log(Main(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")));", "language": "JavaScript"}
{"filename": "p03223_1", "type": "JavaScript", "obfuscated": "console['log'](main(require('fs')['readFileSync']('/dev/stdin', 'utf8')));\nfunction main(_0x8f1708) {\n    _0x8f1708 = _0x8f1708['split']('\\x0a')['map'](_0x5855c2 => +_0x5855c2);\n    var _0x3cb55f = _0x8f1708[0x0];\n    _0x8f1708[0x0] = _0x8f1708[_0x3cb55f];\n    _0x8f1708['pop']();\n    _0x8f1708['sort']((_0x123290, _0x1dcdda) => _0x123290 - _0x1dcdda);\n    var _0x1508d6 = 0x0;\n    var _0x511b14 = _0x3cb55f + 0x1 >> 0x1;\n    for (var _0xb74e6d = 0x0; _0xb74e6d < _0x511b14; _0xb74e6d++) {\n        _0x1508d6 -= _0x8f1708[_0xb74e6d] * 0x2;\n    }\n    for (; _0xb74e6d < _0x3cb55f; _0xb74e6d++) {\n        _0x1508d6 += _0x8f1708[_0xb74e6d] * 0x2;\n    }\n    if (_0x3cb55f % 0x2 === 0x0)\n        return _0x1508d6 - _0x8f1708[_0x511b14] + _0x8f1708[_0x511b14 - 0x1];\n    if (_0x8f1708[_0x511b14 - 0x1] + _0x8f1708[_0x511b14 - 0x2] > _0x8f1708[_0x511b14 - 0x1] * 0x3 - _0x8f1708[_0x511b14])\n        return _0x1508d6 + _0x8f1708[_0x511b14 - 0x1] + _0x8f1708[_0x511b14 - 0x2];\n    else\n        return _0x1508d6 + _0x8f1708[_0x511b14 - 0x1] * 0x3 - _0x8f1708[_0x511b14];\n}", "test_cases": [["5\n6\n8\n1\n2\n3", "21"], ["6\n3\n1\n4\n1\n5\n9", "25"], ["3\n5\n5\n1", "8"]], "original": "console.log(main(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\")));\nfunction main(s){\n  s = s.split(\"\\n\").map(a=>+a);\n  var n = s[0];\n  s[0] = s[n];\n  s.pop();\n  s.sort((a,b)=>a-b);\n  var ans = 0;\n  var m = n + 1 >> 1;\n  for(var i = 0; i < m; i++){\n    ans -= s[i] * 2;\n  }\n  for(; i < n; i++){\n    ans += s[i] * 2;\n  }\n  if(n % 2 === 0)return ans - s[m] + s[m-1];\n  if(s[m-1]+s[m-2] > s[m-1]*3-s[m])return ans + s[m-1] + s[m-2];\n  else return ans + s[m-1]*3 - s[m];\n}", "language": "JavaScript"}
{"filename": "p03320_1", "type": "JavaScript", "obfuscated": "function Main(_0xfd7387) {\n    k = +_0xfd7387;\n    var _0x286ad7 = [];\n    var _0x5e667d = 0x1;\n    var _0x1f23c5 = '';\n    for (var _0x1a13ce = 0x0; _0x1a13ce < k; _0x1a13ce++) {\n        _0x286ad7[_0x1a13ce] = _0x5e667d + _0x1f23c5;\n        if (_0x5e667d === 0x9) {\n            _0x5e667d = 0x1;\n            _0x1f23c5 += '9';\n        } else\n            _0x5e667d++;\n    }\n    console['log'](_0x286ad7['join']('\\x0a'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10", "1\n2\n3\n4\n5\n6\n7\n8\n9\n19"]], "original": "function Main(s){\n  k = +s;\n  var ans = [];\n  var x = 1;\n  var y = \"\";\n  for(var i = 0; i < k; i++){\n    ans[i] = x + y;\n    if(x === 9){\n      x = 1; y += \"9\";\n    }else x++;\n  }\n  console.log(ans.join(\"\\n\"));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03321_1", "type": "JavaScript", "obfuscated": "function Main(_0x1ebd71) {\n    _0x1ebd71 = _0x1ebd71['split']('\\x0a');\n    var _0x10effc = _0x1ebd71[0x0]['split']('\\x20')['map'](_0x464963 => +_0x464963);\n    var _0x47a2ea = _0x10effc[0x1];\n    _0x10effc = _0x10effc[0x0];\n    var _0x2affce = Array(_0x10effc)['fill'](0x0)['map'](_0x449b28 => Array(_0x10effc)['fill'](0x0));\n    for (var _0x3f26d5 = 0x0; _0x3f26d5 < _0x47a2ea; _0x3f26d5++) {\n        var _0x443a5f = _0x1ebd71[_0x3f26d5 + 0x1]['split']('\\x20')['map'](_0xe4037f => _0xe4037f - 0x1);\n        _0x2affce[_0x443a5f[0x0]][_0x443a5f[0x1]] = _0x2affce[_0x443a5f[0x1]][_0x443a5f[0x0]] = 0x1;\n    }\n    var _0xe043b2 = 0x218711a00;\n    var _0x532234;\n    for (_0x3f26d5 = 0x0; _0x3f26d5 < _0x10effc; _0x3f26d5++) {\n        var _0x540415 = _0x2affce[_0x3f26d5]['reduce']((_0x53ff0e, _0x171a34) => _0x53ff0e + _0x171a34);\n        if (_0xe043b2 > _0x540415) {\n            _0xe043b2 = _0x540415;\n            _0x532234 = _0x3f26d5;\n        }\n    }\n    var _0x5e780b = [], _0x3b8ce5 = [];\n    for (_0x3f26d5 = 0x0; _0x3f26d5 < _0x10effc; _0x3f26d5++) {\n        if (_0x3f26d5 === _0x532234)\n            continue;\n        if (_0x2affce[_0x532234][_0x3f26d5])\n            _0x5e780b['push'](_0x3f26d5);\n        else\n            _0x3b8ce5['push'](_0x3f26d5);\n    }\n    for (_0x3f26d5 = 0x0; _0x3f26d5 < _0x5e780b['length']; _0x3f26d5++)\n        for (var _0x5eac9b = _0x3f26d5 + 0x1; _0x5eac9b < _0x5e780b['length']; _0x5eac9b++) {\n            if (!_0x2affce[_0x5e780b[_0x3f26d5]][_0x5e780b[_0x5eac9b]]) {\n                console['log'](-0x1);\n                return;\n            }\n        }\n    for (_0x3f26d5 = 0x0; _0x3f26d5 < _0x3b8ce5['length']; _0x3f26d5++)\n        for (_0x5eac9b = _0x3f26d5 + 0x1; _0x5eac9b < _0x3b8ce5['length']; _0x5eac9b++) {\n            if (!_0x2affce[_0x3b8ce5[_0x3f26d5]][_0x3b8ce5[_0x5eac9b]]) {\n                console['log'](-0x1);\n                return;\n            }\n        }\n    console['log'](_0xe043b2 * (_0xe043b2 + 0x1) / 0x2 + (_0x10effc - _0xe043b2 - 0x1) * (_0x10effc - _0xe043b2 - 0x2) / 0x2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 5\n1 2\n1 3\n3 4\n3 5\n4 5", "4"], ["5 1\n1 2", "-1"], ["4 3\n1 2\n1 3\n2 3", "3"], ["10 39\n7 2\n7 1\n5 6\n5 8\n9 10\n2 8\n8 7\n3 10\n10 1\n8 10\n2 3\n7 4\n3 9\n4 10\n3 4\n6 1\n6 7\n9 5\n9 7\n6 9\n9 4\n4 6\n7 5\n8 3\n2 5\n9 2\n10 7\n8 6\n8 9\n7 3\n5 3\n4 5\n6 3\n2 10\n5 10\n4 2\n6 2\n8 4\n10 6", "21"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = s[0].split(\" \").map(a=>+a);\n  var m = n[1];\n  n = n[0];\n  var b = Array(n).fill(0).map(a=>Array(n).fill(0));\n  for(var i = 0; i < m; i++){\n    var a = s[i+1].split(\" \").map(a=>a-1);\n    b[a[0]][a[1]] = b[a[1]][a[0]] = 1;\n  }\n  var k = 9e9;\n  var x;\n  for(i = 0; i < n; i++){\n    var t = b[i].reduce((a,b)=>a+b);\n    if(k > t){k = t; x = i;}\n  }\n  var y=[], z=[];\n  for(i = 0; i < n; i++){\n    if(i === x)continue;\n    if(b[x][i])y.push(i); else z.push(i);\n  }\n  for(i = 0; i < y.length; i++)\n  for(var j = i + 1; j < y.length; j++){\n    if(!b[y[i]][y[j]]){console.log(-1);return;}\n  }\n  for(i = 0; i < z.length; i++)\n  for(j = i + 1; j < z.length; j++){\n    if(!b[z[i]][z[j]]){console.log(-1);return;}\n  }\n  console.log(k*(k+1)/2+(n-k-1)*(n-k-2)/2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03391_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction myin() {\n    return require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\n}\nfunction myout(_0x55039f) {\n    console['log'](_0x55039f);\n}\nfunction myconv(_0xcd9811, _0x16328a) {\n    switch (_0x16328a) {\n    case 0x0:\n        return _0xcd9811;\n    case 0x1:\n        return parseInt(_0xcd9811);\n    case 0x2:\n        return _0xcd9811['split']('\\x20');\n    case 0x3:\n        return _0xcd9811['split']('\\x0a');\n    case 0x4:\n        return _0xcd9811['split']('\\x20')['map'](_0x5b5a4f => Number(_0x5b5a4f));\n    case 0x5:\n        return _0xcd9811['split']('\\x0a')['map'](_0x26dd25 => Number(_0x26dd25));\n    case 0x6:\n        return _0xcd9811['split']('');\n    case 0x7:\n        return _0xcd9811['split']('')['map'](_0x1abbd8 => Number(_0x1abbd8));\n    }\n}\nfunction Main(_0x5c0e6a) {\n    _0x5c0e6a = myconv(_0x5c0e6a, 0x3);\n    _0x5c0e6a['shift']();\n    var _0x45ecef = 0x0;\n    for (var _0xe2246a = 0x0; _0xe2246a < _0x5c0e6a['length']; _0xe2246a++) {\n        var _0x7b65cc = parseInt(_0x5c0e6a[_0xe2246a]['split']('\\x20')[0x0]);\n        var _0x377bf7 = parseInt(_0x5c0e6a[_0xe2246a]['split']('\\x20')[0x1]);\n        if (_0x7b65cc < _0x377bf7) {\n            _0x45ecef += _0x377bf7;\n        }\n    }\n    myout(_0x45ecef);\n}\nMain(myin());", "test_cases": [["2\n1 2\n3 2", "2"], ["3\n8 3\n0 1\n4 8", "9"], ["1\n1 1", "0"]], "original": "'use strict'\nfunction myin(){return require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim();}\nfunction myout(t){console.log(t);}//standard output\n//[no]param\n//0:何もしない  1:数値へ変換  2:半角SPで分割  3:改行で分割  4:半角SPで分割し、数値配列へ\n//5:改行で分割し、数値配列へ  6:1文字に分割  7:1文字に分割し、数値配列へ\nfunction myconv(i,no){switch(no){case 0:return i;case 1:return parseInt(i);case 2:return i.split(\" \");case 3:return i.split(\"\\n\");case 4:return i.split(\" \").map((a)=>Number(a));case 5:return i.split(\"\\n\").map((a)=>Number(a));case 6:return i.split(\"\");case 7:return i.split(\"\").map((a)=>Number(a));}}\n\nfunction Main(input) {\n  input = myconv(input,3);\n  input.shift();\n  var output = 0;\n  for(var i = 0; i < input.length; i++){\n    var A = parseInt(input[i].split(\" \")[0]);\n\tvar B = parseInt(input[i].split(\" \")[1]);\n    if(A < B){\n       output += B;\n    }\n  }\n  myout(output);\n}\n  \nMain(myin());\n", "language": "JavaScript"}
{"filename": "p03403_1", "type": "JavaScript", "obfuscated": "console['log']((_0x39741a => {\n    const [[_0x37eae5], _0x34cfe1] = _0x39741a['trim']()['split']('\\x0a')['map'](_0x1d4c42 => _0x1d4c42['split']('\\x20')['map'](_0x4bf1b6 => _0x4bf1b6 | 0x0));\n    let _0x191777 = Math['abs'](_0x34cfe1[0x0]) + Math['abs'](_0x34cfe1[_0x37eae5 - 0x1]);\n    for (let _0x4553df = 0x1; _0x4553df < _0x37eae5; _0x4553df++) {\n        _0x191777 += Math['abs'](_0x34cfe1[_0x4553df] - _0x34cfe1[_0x4553df - 0x1]);\n    }\n    const _0x2d0835 = [_0x191777 - Math['abs'](_0x34cfe1[0x0]) - Math['abs'](_0x34cfe1[0x1] - _0x34cfe1[0x0]) + Math['abs'](_0x34cfe1[0x1])];\n    for (let _0x5e0756 = 0x1; _0x5e0756 < _0x37eae5 - 0x1; _0x5e0756++) {\n        _0x2d0835['push'](_0x191777 - Math['abs'](_0x34cfe1[_0x5e0756 + 0x1] - _0x34cfe1[_0x5e0756]) - Math['abs'](_0x34cfe1[_0x5e0756] - _0x34cfe1[_0x5e0756 - 0x1]) + Math['abs'](_0x34cfe1[_0x5e0756 + 0x1] - _0x34cfe1[_0x5e0756 - 0x1]));\n    }\n    _0x2d0835['push'](_0x191777 - Math['abs'](_0x34cfe1[_0x37eae5 - 0x1]) - Math['abs'](_0x34cfe1[_0x37eae5 - 0x2] - _0x34cfe1[_0x37eae5 - 0x1]) + Math['abs'](_0x34cfe1[_0x37eae5 - 0x2]));\n    return _0x2d0835['join']`\\n`;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n3 5 -1", "12\n8\n10"], ["5\n1 1 1 2 0", "4\n4\n4\n2\n4"], ["6\n-679 -2409 -3258 3095 -3291 -4462", "21630\n21630\n19932\n8924\n21630\n19288"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  let C = Math.abs(A[0]) + Math.abs(A[N-1]);\n  for ( let i = 1; i < N; i++ ) {\n    C += Math.abs( A[i] - A[i-1] );\n  }\n  const c = [C - Math.abs(A[0]) - Math.abs(A[1]-A[0]) + Math.abs(A[1])];\n  for ( let i = 1; i < N-1; i++ ) {\n    c.push( C - Math.abs(A[i+1]-A[i]) - Math.abs(A[i]-A[i-1]) + Math.abs(A[i+1]-A[i-1]) );\n  }\n  c.push( C - Math.abs(A[N-1]) - Math.abs(A[N-2]-A[N-1]) + Math.abs(A[N-2]));\n  return c.join`\\n`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03480_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0x50b4f5(_0x399c91) {\n        return new _0x4099f8(_0x399c91);\n    }\n    function _0x4099f8(_0x43a317) {\n        this['_s'] = _0x43a317['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0x4099f8['prototype']['a'] = function (_0x26ccca) {\n        var _0x3e8604 = this['_s'], _0x1bb8f7 = this['_y'], _0x367961;\n        if (typeof _0x3e8604[_0x1bb8f7] === 'string')\n            _0x3e8604[_0x1bb8f7] = _0x3e8604[_0x1bb8f7]['split']('\\x20')['reverse']();\n        _0x367961 = _0x3e8604[_0x1bb8f7]['pop']();\n        if (!_0x3e8604[_0x1bb8f7]['length'])\n            this['_y']++;\n        return _0x26ccca ? _0x367961 : +_0x367961;\n    };\n    _0x4099f8['prototype']['l'] = function (_0x506c9b) {\n        var _0x3da4fb = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x506c9b ? _0x3da4fb : _0x3da4fb['map'](_0xa4f499 => +_0xa4f499);\n    };\n    _0x4099f8['prototype']['m'] = function (_0x331eee, _0x354fe8) {\n        var _0x30403f = this['_s']['slice'](this['_y'], this['_y'] += _0x331eee)['map'](_0x542a25 => _0x542a25['split']('\\x20'));\n        return _0x354fe8 ? _0x30403f : _0x30403f['map'](_0x2b0c81 => _0x2b0c81['map'](_0x10ce78 => +_0x10ce78));\n    };\n    _0x4099f8['prototype']['r'] = function (_0x14b76b, _0x2e0331) {\n        var _0x3e3b29 = this['_s']['slice'](this['_y'], this['_y'] += _0x14b76b);\n        return _0x2e0331 ? _0x3e3b29 : _0x3e3b29['map'](_0x527d2c => +_0x527d2c);\n    };\n    return _0x50b4f5;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](main());\nfunction main() {\n    var _0xf53478 = o['a'](0x1);\n    var _0x143f9e = _0xf53478['length'];\n    var _0x4372be = _0x143f9e + 0x1 >> 0x1, _0xbe9954, _0x4d2db4 = _0x4372be;\n    var _0x45545a = _0xf53478[_0x4372be - 0x1];\n    if (_0x143f9e & 0x1)\n        _0xbe9954 = _0x4372be - 0x2;\n    else\n        _0xbe9954 = _0x4372be - 0x1;\n    for (; _0xbe9954 >= 0x0; _0xbe9954--, _0x4d2db4++) {\n        if (_0xf53478[_0xbe9954] !== _0x45545a || _0xf53478[_0x4d2db4] !== _0x45545a)\n            break;\n        _0x4372be++;\n    }\n    return _0x4372be;\n}", "test_cases": [["010", "2"], ["100000000", "8"], ["00001111", "4"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var s = o.a(1);\n  var n = s.length;\n  var l = n + 1 >> 1, u, v = l;\n  var f = s[l-1];\n  if(n & 1)u = l-2;\n  else u = l-1;\n  for(; u >= 0; u--, v++){\n    if(s[u] !== f || s[v] !== f)break;\n    l++;\n  }\n  return l;\n}", "language": "JavaScript"}
{"filename": "p03553_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x2ec018, _0x4cadc7) {\n    return _0x4cadc7 ? cin['slice'](cid, cid += _0x2ec018) : cin['slice'](cid, cid += _0x2ec018)['map'](_0x256e74 => +_0x256e74);\n}\nfunction nextm(_0x1695f7, _0x7af9f6, _0xbbcec) {\n    var _0x322791 = [], _0x5d76f4 = 0x0;\n    if (_0xbbcec)\n        for (; _0x5d76f4 < _0x1695f7; _0x5d76f4++)\n            _0x322791['push'](cin['slice'](cid, cid += _0x7af9f6));\n    else\n        for (; _0x5d76f4 < _0x1695f7; _0x5d76f4++)\n            _0x322791['push'](cin['slice'](cid, cid += _0x7af9f6)['map'](_0x30dfa4 => +_0x30dfa4));\n    return _0x322791;\n}\nfunction xArray(_0x171200) {\n    var _0x60ce64 = arguments, _0x278e0c = _0x60ce64['length'], _0x1e4519 = 'Array(a[' + --_0x278e0c + ']).fill().map(x=>{return\\x20' + _0x171200 + ';})';\n    while (--_0x278e0c)\n        _0x1e4519 = 'Array(a[' + _0x278e0c + ']).fill().map(x=>' + _0x1e4519 + ')';\n    return eval(_0x1e4519);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x546525 = next();\n    var _0x459e8c = [0x0]['concat'](nexts(_0x546525));\n    for (var _0x340741 = _0x546525; _0x340741 >= 0x1; _0x340741--) {\n        var _0x3058da = 0x0;\n        for (var _0x3d4769 = _0x340741; _0x3d4769 <= _0x546525; _0x3d4769 += _0x340741)\n            _0x3058da += _0x459e8c[_0x3d4769];\n        if (_0x3058da < 0x0)\n            for (var _0x3d4769 = _0x340741; _0x3d4769 <= _0x546525; _0x3d4769 += _0x340741)\n                _0x459e8c[_0x3d4769] = 0x0;\n    }\n    return _0x459e8c['reduce']((_0xd3e03d, _0x45d32d) => _0xd3e03d + _0x45d32d);\n}", "test_cases": [["6\n1 2 -6 4 5 3", "12"], ["6\n100 -100 -100 -100 100 -100", "200"], ["5\n-1 -2 -3 -4 -5", "0"], ["2\n-1000 100000", "99000"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var a = [0].concat(nexts(n));\n  for(var i = n; i >= 1; i--){\n    var sum = 0;\n    for(var j = i; j <= n; j+=i)sum += a[j];\n    if(sum < 0)for(var j = i; j <= n; j+=i)a[j] = 0;\n  }\n  return a.reduce((a,b)=>a+b);\n}", "language": "JavaScript"}
{"filename": "p03569_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5ba805 => {\n    const _0x541fed = _0x5ba805['trim']();\n    const _0x1ab482 = _0x541fed['length'] - 0x1;\n    let _0x5afa4c = 0x0;\n    for (let _0x2f6a31 = 0x0, _0x375ddc = _0x1ab482; _0x2f6a31 < _0x375ddc; _0x2f6a31++, _0x375ddc--) {\n        while (_0x541fed[_0x2f6a31] !== _0x541fed[_0x375ddc]) {\n            if (_0x541fed[_0x2f6a31] === 'x')\n                _0x5afa4c++, _0x2f6a31++;\n            else if (_0x541fed[_0x375ddc] === 'x')\n                _0x5afa4c++, _0x375ddc--;\n            else\n                return '-1';\n        }\n    }\n    return '' + _0x5afa4c;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["xabxa", "2"], ["ab", "-1"], ["a", "0"], ["oxxx", "3"]], "original": "console.log((args=>{\n  const s = args.trim();\n  const N = s.length-1;\n  let x = 0;\n  for ( let i = 0, j = N; i < j; i++, j-- ) {\n    while ( s[i] !== s[j] ) {\n      if ( s[i] === 'x' ) x++,i++;\n      else if ( s[j] === 'x' ) x++,j--;\n      else return '-1';\n    }\n  }\n  return `${x}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03639_1", "type": "JavaScript", "obfuscated": "console['log']((_0x5d156b => {\n    const [[_0x3956f6], _0xae29b0] = _0x5d156b['trim']()['split']`\\n`['map'](_0x1e5a95 => _0x1e5a95['split']` `['map'](_0x397965 => _0x397965 | 0x0));\n    let _0x2d461f = 0x0, _0x59920b = 0x0;\n    for (let _0x34aee7 = 0x0; _0x34aee7 < _0x3956f6; _0x34aee7++) {\n        _0x2d461f += _0xae29b0[_0x34aee7] & 0x1;\n        _0x59920b += !(_0xae29b0[_0x34aee7] % 0x4);\n    }\n    return _0x2d461f - (_0x2d461f + _0x59920b === _0x3956f6) <= _0x59920b ? 'Yes' : 'No';\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n1 10 100", "Yes"], ["4\n1 2 3 4", "No"], ["3\n1 4 1", "Yes"], ["2\n1 1", "No"], ["6\n2 7 1 8 2 8", "Yes"]], "original": "console.log((args=>{\n  const [[N],a] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let odd = 0, p4 = 0;\n  for ( let i = 0; i < N; i++ ) {\n    odd += a[i]&1;\n    p4 += !(a[i]%4);\n  }\n  return (odd-(odd+p4===N)<=p4)?'Yes':'No';\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03799_1", "type": "JavaScript", "obfuscated": "function Main(_0x10d095) {\n    var _0x2b2f34 = _0x10d095['split']('\\x20');\n    var _0x72d4fa = Number(_0x2b2f34[0x0]);\n    var _0x4c74a8 = Number(_0x2b2f34[0x1]);\n    var _0x166387 = 0x0;\n    if (_0x72d4fa > _0x4c74a8 / 0x2) {\n        _0x166387 += Math['floor'](_0x4c74a8 / 0x2);\n    } else {\n        _0x166387 += _0x72d4fa;\n        _0x4c74a8 -= _0x166387 * 0x2;\n        _0x166387 += Math['floor'](_0x4c74a8 / 0x4);\n    }\n    console['log'](_0x166387);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1 6", "2"], ["12345 678901", "175897"]], "original": "function Main (input) {\n\tvar inputArr = input.split(' ');\n\tvar sNum = Number(inputArr[0]);\n\tvar cNum = Number(inputArr[1]);\n\tvar result = 0;\n\t// Sを使う組み合わせ\n\tif (sNum > (cNum/2)) {\n\t\tresult += Math.floor(cNum/2);\n\t} else {\n\t\tresult += sNum;\n\t\tcNum -= result * 2;\n\t\tresult += Math.floor(cNum/4)\n\t}\n\tconsole.log(result);\n}\n// Main(\"12345 678901\");\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03828_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst pf = (_0x329478, _0x18c098) => {\n    for (let _0x3170ed = 0x2; _0x3170ed <= _0x329478; _0x3170ed++) {\n        while (_0x329478 % _0x3170ed === 0x0) {\n            _0x329478 /= _0x3170ed;\n            if (!(_0x3170ed in _0x18c098))\n                _0x18c098[_0x3170ed] = 0x0;\n            _0x18c098[_0x3170ed]++;\n        }\n    }\n    return _0x18c098;\n};\nfunction main(_0x250c07) {\n    _0x250c07 = Number(_0x250c07['trim']());\n    const _0x29ab1f = 0x3b9aca00 + 0x7;\n    let _0x375fef = {};\n    let _0x204c15 = 0x1;\n    for (let _0x4147c = 0x1; _0x4147c <= _0x250c07; _0x4147c++) {\n        _0x375fef = pf(_0x4147c, _0x375fef);\n    }\n    Object['keys'](_0x375fef)['forEach'](_0xb4a4c5 => {\n        _0x204c15 = _0x204c15 * (_0x375fef[_0xb4a4c5] + 0x1) % _0x29ab1f;\n    });\n    console['log'](_0x204c15);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "4"], ["6", "30"], ["1000", "972926972"]], "original": "'use strict'\n\nconst pf = (n, res) => {\n  for (let i = 2; i <= n; i++) {\n    while(n % i === 0) {\n      n /= i;\n      if (!(i in res)) res[i] = 0\n      res[i]++\n    }\n  }\n  return res\n}\n\nfunction main(input) {\n  input = Number(input.trim())\n  const mod = 1e9 + 7\n  let obj = {}\n  let ans = 1\n\n  for (let i = 1; i <= input; i++) {\n    obj = pf(i, obj)\n  }\n\n  Object.keys(obj).forEach(n => {\n    ans = ans * (obj[n] + 1) % mod\n  })\n  console.log(ans)\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03830_1", "type": "JavaScript", "obfuscated": "function main(_0x12f61f) {\n    var _0x4c3a4e = parseInt(_0x12f61f);\n    var _0x1eb28f = {};\n    for (var _0xefe60c = 0x2; _0xefe60c <= _0x4c3a4e; _0xefe60c++) {\n        var _0x3b6e81 = _0xefe60c;\n        for (var _0x2c6720 = 0x2; _0x2c6720 * _0x2c6720 <= _0x3b6e81; _0x2c6720++) {\n            if (_0x3b6e81 % _0x2c6720 == 0x0) {\n                var _0x1750ce = 0x0;\n                while (_0x3b6e81 % _0x2c6720 == 0x0) {\n                    _0x1750ce++;\n                    _0x3b6e81 /= _0x2c6720;\n                }\n                if (_0x1eb28f[_0x2c6720]) {\n                    _0x1eb28f[_0x2c6720] = _0x1eb28f[_0x2c6720] + _0x1750ce;\n                } else {\n                    _0x1eb28f[_0x2c6720] = _0x1750ce;\n                }\n            }\n        }\n        if (_0x3b6e81 != 0x1) {\n            if (_0x1eb28f[_0x3b6e81]) {\n                _0x1eb28f[_0x3b6e81]++;\n            } else {\n                _0x1eb28f[_0x3b6e81] = 0x1;\n            }\n        }\n    }\n    var _0x1d8215 = 0x1;\n    var _0x1be8a4 = 0x3b9aca07;\n    for (var _0x818c3e in _0x1eb28f) {\n        _0x1d8215 = _0x1d8215 * (_0x1eb28f[_0x818c3e] + 0x1) % _0x1be8a4;\n    }\n    console['log'](_0x1d8215);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3", "4"], ["6", "30"], ["1000", "972926972"]], "original": "function main(input) {\n    var n = parseInt(input);\n\n    var map = {};\n    for (var i = 2; i <= n; i++) {\n        var t = i;\n        for (var j = 2; j * j <= t; j++) {\n            if (t % j == 0) {\n                var cnt = 0;\n                while (t % j == 0) {\n                    cnt++;\n                    t /= j;\n                }\n                if (map[j]) {\n                    map[j] = map[j] + cnt;\n                } else {\n                    map[j] = cnt;\n                }\n            }\n        }\n        if (t != 1) {\n            if (map[t]) {\n                map[t]++;\n            } else {\n                map[t] = 1;\n            }\n        }\n    }\n\n    var ans = 1;\n    var mod = 1000000007;\n    for (var x in map) {\n        ans = (ans * (map[x] + 1)) % mod;\n    }\n\n    console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03948_1", "type": "JavaScript", "obfuscated": "function Main(_0x3cc5fe) {\n    var _0x5e324f = function (_0x43a6fa) {\n        var _0x33f657 = _0x43a6fa['replace'](/(^\\s+)|(\\s+$)/g, '')['split']('\\x20');\n        for (var _0x286053 = 0x0; _0x286053 < _0x33f657['length']; ++_0x286053) {\n            _0x33f657[_0x286053] = _0x33f657[_0x286053];\n        }\n        return _0x33f657;\n    };\n    var _0xe065c1 = function (_0x3bb4d7) {\n        var _0x4393b4 = _0x3bb4d7['replace'](/(^\\s+)|(\\s+$)/g, '')['split']('\\x20');\n        for (var _0x4413a4 = 0x0; _0x4413a4 < _0x4393b4['length']; ++_0x4413a4) {\n            _0x4393b4[_0x4413a4] = +_0x4393b4[_0x4413a4];\n        }\n        return _0x4393b4;\n    };\n    var _0x4be85a = function (_0xf5db5c, _0x111759) {\n        return _0xf5db5c > _0x111759 ? _0x111759 : _0xf5db5c;\n    };\n    lines = _0x3cc5fe['split']('\\x0a');\n    var _0x1a210b = _0xe065c1(lines[0x0]);\n    var _0x4a0e2e = _0x1a210b[0x0];\n    var _0x11fa2c = _0x1a210b[0x1];\n    var _0x429d1b = _0xe065c1(lines[0x1]);\n    var _0x421b27 = 0x0;\n    var _0x12ac6d = 0x0;\n    var _0x5ca318 = _0x429d1b[0x0];\n    var _0x55f30d = _0x429d1b[0x0];\n    for (var _0x14ff5f = 0x0; _0x14ff5f < _0x4a0e2e; ++_0x14ff5f) {\n        var _0x21ebe3 = _0x429d1b[_0x14ff5f];\n        if (_0x21ebe3 - _0x5ca318 > _0x421b27) {\n            _0x421b27 = _0x21ebe3 - _0x5ca318;\n            _0x12ac6d = 0x1;\n        } else if (_0x21ebe3 - _0x5ca318 == _0x421b27) {\n            _0x12ac6d++;\n        }\n        _0x5ca318 = _0x21ebe3 < _0x5ca318 ? _0x21ebe3 : _0x5ca318;\n    }\n    console['log'](_0x4be85a(_0x12ac6d, Math['floor'](_0x11fa2c / 0x2)));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 2\n100 50 200", "1"], ["5 8\n50 30 40 10 20", "2"], ["10 100\n7 10 4 5 9 3 6 8 2 1", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\nvar space_strinput = function(line){\n\tvar arr= line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n\tfor(var i=0;i<arr.length;++i){\n\t\tarr[i]=arr[i];\n\t}\n\treturn arr;\n};\nvar space_numinput = function(line){\n\tvar arr= line.replace(/(^\\s+)|(\\s+$)/g, \"\").split(\" \");\n\tfor(var i=0;i<arr.length;++i){\n\t\tarr[i]=+arr[i];\n\t}\n\treturn arr;\n};\n\nvar getmin = function(a,b){return a>b?b:a;};\n\tlines = input.split(\"\\n\"); // 1行目がinput[0], 2行目がinput[1], …に入る\n\tvar l0 = space_numinput(lines[0]);\n\tvar n = l0[0];\n\tvar t = l0[1];\n\tvar a = space_numinput(lines[1]);\n\tvar rieki = 0;\n\tvar rieki_place_count = 0;\n\tvar min = a[0];\n\tvar max = a[0];\n\tfor(var i=0;i<n;++i){\n\t\tvar val = a[i];\n\t\tif(val-min>rieki){\n\t\t\trieki=val-min;\n\t\t\trieki_place_count = 1;\n\t\t}else if(val-min==rieki){\n\t\t\trieki_place_count++;\n\t\t}\n\t\t\n\t\tmin = val < min? val:min;\n\t}\n\tconsole.log(getmin(rieki_place_count,Math.floor(t/2)));\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03958_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst main = _0x4d03b0 => {\n    _0x4d03b0 = _0x4d03b0['trim']()['split']('\\x0a');\n    const _0x468476 = parseInt(_0x4d03b0[0x0]['split']('\\x20')[0x0]);\n    const _0x3ef01e = parseInt(_0x4d03b0[0x0]['split']('\\x20')[0x1]);\n    let _0x162bcc = _0x4d03b0[0x1]['split']('\\x20')['map'](_0x2d7466 => {\n        return parseInt(_0x2d7466);\n    });\n    let _0x197f5d = _0x162bcc['reduce'](function (_0x131ada, _0x309fe6) {\n        return _0x131ada > _0x309fe6 ? _0x131ada : _0x309fe6;\n    });\n    if (_0x197f5d - 0x1 - (_0x468476 - _0x197f5d) > 0x0) {\n        console['log'](_0x197f5d - 0x1 - (_0x468476 - _0x197f5d));\n    } else {\n        console['log'](0x0);\n    }\n};\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 3\n3 2 2", "0"], ["6 3\n1 4 1", "1"], ["100 1\n100", "99"]], "original": "\"use strict\";\n\nconst main = input => {\n  input = input.trim().split(\"\\n\");\n  const K = parseInt(input[0].split(\" \")[0]);\n  const T = parseInt(input[0].split(\" \")[1]);\n  let a = input[1].split(\" \").map((el)=>{\n    return parseInt(el);\n  });\n  let max = a.reduce( function (previous, current) {\n  \treturn previous > current ? previous:current;\n  });\n  if(max-1-(K-max) > 0){\n    console.log(max-1-(K-max));\n  }else{\n    console.log(0);\n  }\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03965_1", "type": "JavaScript", "obfuscated": "function Main(_0xf1eba4) {\n    const _0xdea382 = _0xf1eba4['length'];\n    const _0x42d6e0 = _0xf1eba4['match'](/p/g)['length'];\n    console['log'](Math['floor'](_0xdea382 / 0x2 - _0x42d6e0));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["gpg", "0"], ["ggppgggpgg", "2"]], "original": "function Main(s){\n  const n = s.length;\n  const p = s.match(/p/g).length;\n  console.log(Math.floor(n / 2 - p));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
{"filename": "p04019_1", "type": "JavaScript", "obfuscated": "function Main(_0x505a59) {\n    _0x505a59 = _0x505a59['split']('');\n    let _0x7d0e4f = _0x505a59['includes']('N');\n    let _0x48c293 = _0x505a59['includes']('S');\n    let _0x40dbb6 = _0x505a59['includes']('E');\n    let _0x3dec43 = _0x505a59['includes']('W');\n    let _0x3c1a79 = _0x7d0e4f && _0x48c293 || !_0x7d0e4f && !_0x48c293;\n    let _0x67547f = _0x40dbb6 && _0x3dec43 || !_0x40dbb6 && !_0x3dec43;\n    if (_0x3c1a79 && _0x67547f) {\n        console['log']('Yes');\n    } else {\n        console['log']('No');\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["SENW", "Yes"], ["NSNNSNSN", "Yes"], ["NNEW", "No"], ["W", "No"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\");\n\tlet N = input.includes(\"N\");\n  \tlet S = input.includes(\"S\");\n  \tlet E = input.includes(\"E\");\n  \tlet W = input.includes(\"W\");\n\t\n  \tlet NS = N&&S || !N&&!S;\n  \tlet EW = E&&W || !E&&!W;\n\t  \n\tif(NS&&EW){\n      console.log(\"Yes\");\n    }else{\n      console.log(\"No\");\n    }\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00035_1", "type": "JavaScript", "obfuscated": "function heron(_0x4e0c7c, _0x538710, _0x346f7f) {\n    var _0x101ade = (_0x4e0c7c + _0x538710 + _0x346f7f) / 0x2;\n    var _0x4e8670 = Math['sqrt'](_0x101ade * (_0x101ade - _0x4e0c7c) * (_0x101ade - _0x538710) * (_0x101ade - _0x346f7f));\n    return _0x4e8670;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split'](',')['map'](Number);\n    (function (_0x4ade24, _0x16b035, _0x29614e, _0x52c774, _0x183d6f, _0x4d5abf, _0x49a9d0, _0x526931) {\n        var _0x2b6c9c = Math['sqrt'](Math['pow'](_0x4ade24 - _0x29614e, 0x2) + Math['pow'](_0x16b035 - _0x52c774, 0x2));\n        var _0x3a97fa = Math['sqrt'](Math['pow'](_0x29614e - _0x183d6f, 0x2) + Math['pow'](_0x52c774 - _0x4d5abf, 0x2));\n        var _0x52467e = Math['sqrt'](Math['pow'](_0x183d6f - _0x49a9d0, 0x2) + Math['pow'](_0x4d5abf - _0x526931, 0x2));\n        var _0x1f8764 = Math['sqrt'](Math['pow'](_0x49a9d0 - _0x4ade24, 0x2) + Math['pow'](_0x526931 - _0x16b035, 0x2));\n        var _0x5dd678 = Math['sqrt'](Math['pow'](_0x4ade24 - _0x183d6f, 0x2) + Math['pow'](_0x16b035 - _0x4d5abf, 0x2));\n        var _0x1332a8 = Math['sqrt'](Math['pow'](_0x29614e - _0x49a9d0, 0x2) + Math['pow'](_0x52c774 - _0x526931, 0x2));\n        var _0x7f5a9 = heron(_0x2b6c9c, _0x1332a8, _0x1f8764) + heron(_0x3a97fa, _0x52467e, _0x1332a8);\n        var _0x2082e2 = heron(_0x2b6c9c, _0x3a97fa, _0x5dd678) + heron(_0x5dd678, _0x52467e, _0x1f8764);\n        var _0x2a89ee = Math['abs'](_0x7f5a9 - _0x2082e2) < 0.00001 ? 'YES' : 'NO';\n        console['log'](_0x2a89ee);\n    }['apply'](null, arr));\n}", "test_cases": [["0.0,0.0,1.0,0.0,1.0,1.0,0.0,1.0\n0.0,0.0,3.0,0.0,1.0,1.0,1.0,3.0", "YES\nNO"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\",\").map(Number);\n   (function(x1,y1,x2,y2,x3,y3,x4,y4){\n      var d12=Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));\n      var d23=Math.sqrt(Math.pow(x2-x3,2)+Math.pow(y2-y3,2));\n      var d34=Math.sqrt(Math.pow(x3-x4,2)+Math.pow(y3-y4,2));\n      var d41=Math.sqrt(Math.pow(x4-x1,2)+Math.pow(y4-y1,2));\n      var d13=Math.sqrt(Math.pow(x1-x3,2)+Math.pow(y1-y3,2));\n      var d24=Math.sqrt(Math.pow(x2-x4,2)+Math.pow(y2-y4,2));\n      var A=heron(d12,d24,d41)+heron(d23,d34,d24);\n      var B=heron(d12,d23,d13)+heron(d13,d34,d41);\n      var ans=(Math.abs(A-B)<1.0e-5)?\"YES\":\"NO\";\n      console.log(ans);\n   }).apply(null,arr);\n}", "language": "JavaScript"}
{"filename": "p00053_1", "type": "JavaScript", "obfuscated": "var m = [\n    -0x1,\n    0x2,\n    0x3,\n    0x5,\n    0x7,\n    0xb,\n    0xd\n];\nfunction p(_0x3ace81) {\n    if (m[_0x3ace81])\n        return m[_0x3ace81];\n    var _0x318e16 = m['length'] - 0x1;\n    var _0x28293d = m[_0x318e16];\n    for (var _0x333246 = _0x28293d + 0x2;; _0x333246 += 0x2) {\n        if (isPrime(_0x333246)) {\n            _0x318e16++;\n            m[_0x318e16] = _0x333246;\n            if (_0x318e16 == _0x3ace81)\n                return _0x333246;\n        }\n    }\n}\nfunction isPrime(_0x2e8c1a) {\n    if (_0x2e8c1a % 0x3 == 0x0)\n        return ![];\n    var _0x5debbf = Math['round'](Math['sqrt'](_0x2e8c1a));\n    var _0x41fb14 = 0x1;\n    while (_0x41fb14 * 0x6 - 0x1 <= _0x5debbf) {\n        if (_0x2e8c1a % (_0x41fb14 * 0x6 - 0x1) == 0x0 || _0x2e8c1a % (_0x41fb14 * 0x6 + 0x1) == 0x0)\n            return ![];\n        _0x41fb14++;\n    }\n    return !![];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var num = +line;\n    if (num == 0x0)\n        break;\n    var s = 0x0;\n    for (var i = num; i > 0x0; i--) {\n        s += p(i);\n    }\n    console['log'](s);\n}", "test_cases": [["2\n9\n0", "5\n100"]], "original": "var m = [-1, 2, 3, 5, 7, 11, 13];\nfunction p(n) {\n    if (m[n])\n        return m[n];\n\n    var found = m.length - 1;\n    var foundP = m[found];\n    for (var i = foundP + 2;; i += 2) {\n        if (isPrime(i)) {\n            found++;\n            m[found] = i;\n            if (found == n)\n                return i;\n        }\n    }\n}\n\nfunction isPrime(num) {\n    if (num % 3 == 0) return false;\n    var limit = Math.round(Math.sqrt(num));\n    var i = 1;\n    while(i * 6 - 1 <= limit) {\n        if (num % (i * 6 - 1) == 0 || num % (i * 6 + 1) == 0) return false;\n        i++;\n    }\n    return true;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var num = +line;\n    if (num == 0)\n        break;\n\n    var s = 0;\n    for (var i = num; i > 0; i--) {\n        s += p(i);\n    }\n    console.log(s);\n}", "language": "JavaScript"}
{"filename": "p00059_1", "type": "JavaScript", "obfuscated": "for (j = 0x0, i = require('fs')['readFileSync']('/dev/stdin', 'utf8')['split'](/\\s/); a = +i[j++], b = +i[j++], c = +i[j++], d = +i[j++], e = +i[j++], f = +i[j++], g = +i[j++], h = +i[j++];)\n    console['log'](+a <= g & e <= c & b <= h & f <= d ? 'YES' : 'NO');", "test_cases": [["0.0 0.0 5.0 5.0 1.0 1.0 4.0 4.0\n0.0 0.0 4.0 5.0 1.0 1.0 5.0 5.0\n0.0 0.0 4.0 4.0 -3.0 -5.0 2.0 -1.0", "YES\nYES\nNO"]], "original": "for(j=0,i=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\").split(/\\s/);a=+i[j++],b=+i[j++],c=+i[j++],d=+i[j++],e=+i[j++],f=+i[j++],g=+i[j++],h=+i[j++];)console.log(+a<=g&e<=c&b<=h&f<=d?'YES':'NO')", "language": "JavaScript"}
{"filename": "p00062_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var nums = line['split']('')['map'](function (_0x595734) {\n        return +_0x595734;\n    });\n    var n = nums['length'];\n    while (n > 0x1) {\n        var a = [];\n        for (var i = 0x0; i < n - 0x1; i++) {\n            a['push']((nums[i] + nums[i + 0x1]) % 0xa);\n        }\n        n--;\n        nums = a;\n    }\n    console['log'](nums[0x0]);\n}", "test_cases": [["4823108376\n1234567890\n0123456789", "5\n6\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.split('\\n');\n \nvar line;\nwhile (line = lines.shift()) {\n    var nums = line.split('').map(function(n){return +n;});\n    var n = nums.length;\n    while (n > 1) {\n        var a = [];\n        for (var i = 0; i < n - 1; i++) {\n            a.push((nums[i] + nums[i+1]) % 10);\n        }\n        n--;\n        nums = a;\n    }\n    console.log(nums[0]);\n}", "language": "JavaScript"}
{"filename": "p00063_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar cnt = 0x0;\nArr['forEach'](function (_0x4e5e39) {\n    var _0x33aa53 = _0x4e5e39['split']('')['reverse']()['join']('');\n    if (_0x33aa53 == _0x4e5e39)\n        cnt++;\n});\nconsole['log'](cnt);", "test_cases": [["abcba\nsx\nabcddcba\nrttrd", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar cnt=0;\nArr.forEach(function(v){\nvar str=v.split(\"\").reverse().join(\"\");\nif(str==v)cnt++;\n});\nconsole.log(cnt);", "language": "JavaScript"}
{"filename": "p00089_1", "type": "JavaScript", "obfuscated": "function bomb(_0x38ebeb, _0x138cf3, _0x1648c3) {\n    YX[_0x38ebeb][_0x138cf3] = _0x1648c3;\n    if (_0x38ebeb == yx['length'] - 0x1) {\n        max = Math['max'](max, _0x1648c3);\n    } else if ((yx['length'] - 0x1) / 0x2 > _0x38ebeb) {\n        if (YX[_0x38ebeb + 0x1][_0x138cf3] < _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3])\n            bomb(_0x38ebeb + 0x1, _0x138cf3, _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3]);\n        if (YX[_0x38ebeb + 0x1][_0x138cf3 + 0x1] < _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3 + 0x1])\n            bomb(_0x38ebeb + 0x1, _0x138cf3 + 0x1, _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3 + 0x1]);\n    } else if ((yx['length'] - 0x1) / 0x2 <= _0x38ebeb) {\n        if (_0x138cf3 - 0x1 >= 0x0) {\n            if (YX[_0x38ebeb + 0x1][_0x138cf3 - 0x1] < _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3 - 0x1])\n                bomb(_0x38ebeb + 0x1, _0x138cf3 - 0x1, _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3 - 0x1]);\n        }\n        if (_0x138cf3 < yx[_0x38ebeb]['length'] - 0x1) {\n            if (YX[_0x38ebeb + 0x1][_0x138cf3] < _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3])\n                bomb(_0x38ebeb + 0x1, _0x138cf3, _0x1648c3 + yx[_0x38ebeb + 0x1][_0x138cf3]);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar yx = [];\nvar YX = [];\nArr['forEach'](function (_0x3700f7) {\n    var _0x58e86f = _0x3700f7['split'](',')['map'](Number);\n    var _0x44b62a = _0x58e86f['map'](function (_0x4eec20) {\n        return 0x0;\n    });\n    yx['push'](_0x58e86f);\n    YX['push'](_0x44b62a);\n});\nvar max = 0x0;\nbomb(0x0, 0x0, yx[0x0][0x0]);\nconsole['log'](max);", "test_cases": [["7\n3,8\n8,1,0\n2,7,4,4\n4,5,2,6,5\n2,7,4,4\n8,1,0\n3,8\n7", "55"]], "original": "function bomb(y,x,sum){\n   YX[y][x]=sum;\n   if(y==yx.length-1){\n      max=Math.max(max,sum);\n   }else if((yx.length-1)/2>y){\n      if(YX[y+1][x]<sum+yx[y+1][x])bomb(y+1,x,sum+yx[y+1][x]);\n      if(YX[y+1][x+1]<sum+yx[y+1][x+1])bomb(y+1,x+1,sum+yx[y+1][x+1]);      \n   }else if((yx.length-1)/2<=y){\n      if(x-1>=0){\n         if(YX[y+1][x-1]<sum+yx[y+1][x-1])bomb(y+1,x-1,sum+yx[y+1][x-1]);\n      }\n      if(x<yx[y].length-1){\n         if(YX[y+1][x]<sum+yx[y+1][x])bomb(y+1,x,sum+yx[y+1][x]);\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar yx=[];\nvar YX=[];\nArr.forEach(function(v){\n   var x=v.split(\",\").map(Number);\n   var X=x.map(function(v){return 0;});\n   yx.push(x);\n   YX.push(X);\n});\nvar max=0;\nbomb(0,0,yx[0][0]);\nconsole.log(max);", "language": "JavaScript"}
{"filename": "p00095_1", "type": "JavaScript", "obfuscated": "(function (_0x19839e) {\n    var _0x50dc1a = _0x19839e['replace'](/\\r/g, '')['split']('\\x0a'), _0x310d02 = [], _0x287ecc, _0x3ae3ce, _0xbf9d2c, _0x151c5d, _0x2d8c7e;\n    _0x287ecc = parseInt(_0x50dc1a['shift']());\n    _0xbf9d2c = 0x65;\n    max_value = -0x1;\n    while (_0x287ecc--) {\n        _0x3ae3ce = _0x50dc1a['shift']()['split']('\\x20');\n        _0x151c5d = parseInt(_0x3ae3ce[0x0]);\n        _0x2d8c7e = parseInt(_0x3ae3ce[0x1]);\n        if (_0x2d8c7e > max_value || _0x2d8c7e === max_value && _0x151c5d < _0xbf9d2c) {\n            _0xbf9d2c = _0x151c5d;\n            max_value = _0x2d8c7e;\n        }\n    }\n    console['log'](_0xbf9d2c + '\\x20' + max_value);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["6\n1 14\n2 25\n3 42\n4 11\n5 40\n6 37", "3 42"]], "original": "(function (input) {\n    var inputs = input.replace(/\\r/g, '').split(\"\\n\"),\n        data = [],\n        n, line, max_index, a, b;\n\n    n = parseInt(inputs.shift());\n\n    max_index = 101;\n    max_value = -1;\n    while ( n-- ) {\n        line = inputs.shift().split(' ');\n        a = parseInt(line[0]);\n        b = parseInt(line[1]);\n\n        if ( b > max_value || b === max_value && a < max_index ) {\n            max_index = a;\n            max_value = b;\n        }\n    }\n    console.log(max_index+\" \"+max_value);\n\n})(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00096_1", "type": "JavaScript", "obfuscated": "var ab = [];\nfor (var i = 0x0; i <= 0x3e8; i++) {\n    for (var j = 0x0; j <= 0x3e8; j++) {\n        ab['push'](i + j);\n    }\n}\nab['sort'](function (_0x28e6f1, _0x39a54e) {\n    return _0x28e6f1 - _0x39a54e;\n});\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (Arr['length'] == 0x0)\n        break;\n    var n = Arr['shift']() - 0x0;\n    var cnt = 0x0;\n    var k = ab['length'] - 0x1;\n    for (var i = 0x0; i < ab['length']; i++) {\n        while (ab[i] + ab[k] > n)\n            k--;\n        var memo = k;\n        while (ab[i] + ab[memo] == n) {\n            cnt++;\n            memo--;\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["2\n3\n35", "10\n20\n8436"]], "original": "var ab=[];\nfor(var i=0;i<=1000;i++){\n   for(var j=0;j<=1000;j++){\n      ab.push(i+j);\n   }\n}\nab.sort(function(a,b){return a-b;});\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var n=Arr.shift()-0;\n   var cnt=0;\n   var k=ab.length-1;\n   for(var i=0;i<ab.length;i++){\n      while(ab[i]+ab[k]>n)k--;\n      var memo=k;\n      while(ab[i]+ab[memo]==n){\n         cnt++;\n         memo--;\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00099_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar nq = arr['shift']()['split']('\\x20')['map'](Number);\nvar player = [];\nvar maxValue = 0x0;\nvar maxId = 0x0;\nfor (var i = 0x0; i < nq[0x0]; i++)\n    player[i] = 0x0;\narr['forEach'](function (_0x320439) {\n    var _0x2bc130 = _0x320439['split']('\\x20')['map'](Number);\n    var _0x2bbaba = _0x2bc130[0x0] - 0x1;\n    var _0x2448d2 = _0x2bc130[0x1];\n    player[_0x2bbaba] += _0x2448d2;\n    if (_0x2bbaba == maxId && _0x2448d2 >= 0x0)\n        maxValue += _0x2448d2;\n    else if (maxValue == player[_0x2bbaba] && maxId > _0x2bbaba)\n        maxId = _0x2bbaba;\n    else if (maxValue < player[_0x2bbaba]) {\n        maxValue = player[_0x2bbaba];\n        maxId = _0x2bbaba;\n    } else if (_0x2bbaba == maxId && _0x2448d2 < 0x0) {\n        var _0x52d94a = -0x1 * Infinity;\n        player['forEach'](function (_0xa5a4bd, _0xc49981) {\n            if (_0x52d94a < _0xa5a4bd) {\n                _0x52d94a = _0xa5a4bd;\n                maxValue = _0xa5a4bd;\n                maxId = _0xc49981;\n            }\n        });\n    }\n    console['log'](maxId + 0x1 + '\\x20' + maxValue);\n});", "test_cases": [["3 5\n1 4 \n2 5 \n1 3\n3 6\n2 7", "1 4\n2 5\n1 7\n1 7\n2 12"], ["3 5\n1 4 \n2 5 \n2 -3\n3 4\n1 -1", "1 4\n2 5\n1 4\n1 4\n3 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar nq=arr.shift().split(\" \").map(Number);\nvar player=[];\nvar maxValue=0;\nvar maxId=0;\nfor(var i=0;i<nq[0];i++)player[i]=0;\narr.forEach(function(V){\n   var av=V.split(\" \").map(Number);\n   var a=av[0]-1;\n   var v=av[1];\n   player[a]+=v;\n   if(a==maxId && v>=0)maxValue+=v;\n   else if(maxValue==player[a] && maxId>a)maxId=a;\n   else if(maxValue<player[a]){maxValue=player[a];maxId=a;}\n   else if(a==maxId && v<0){\n      var max=(-1*Infinity);\n      player.forEach(function(value,index){\n         if(max<value){max=value;maxValue=value;maxId=index;}\n      });\n   }\n   console.log((maxId+1)+\" \"+maxValue);\n});", "language": "JavaScript"}
{"filename": "p00139_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nvar n = Arr['shift']();\nfor (var i = 0x0; i < n; i++) {\n    if (/^>'(=+)#\\1~$/['test'](Arr[i]))\n        console['log']('A');\n    else if (/^>\\^(Q=)+~~$/['test'](Arr[i]))\n        console['log']('B');\n    else\n        console['log']('NA');\n}", "test_cases": [["3\n>'======#======~\n>^Q=Q=Q=Q=Q=Q=Q=Q=Q=~~\n>'===#====~", "A\nB\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar n=Arr.shift();\nfor(var i=0;i<n;i++){\n   if(/^>'(=+)#\\1~$/.test(Arr[i]))console.log(\"A\");\n   else if(/^>\\^(Q=)+~~$/.test(Arr[i]))console.log(\"B\");\n   else console.log(\"NA\");\n}", "language": "JavaScript"}
{"filename": "p00151_1", "type": "JavaScript", "obfuscated": "function count(_0x422609, _0x16182c) {\n    var _0x1ede89 = [\n        0x0,\n        0x1,\n        0x1,\n        0x1\n    ];\n    var _0x3504ce = [\n        0x1,\n        -0x1,\n        0x0,\n        0x1\n    ];\n    var _0x140c4a = 0x1;\n    for (var _0x1e8892 = 0x0; _0x1e8892 < 0x4; _0x1e8892++) {\n        var _0x3e9176 = 0x1;\n        for (var _0xbf52d8 = 0x1; _0xbf52d8 <= n; _0xbf52d8++) {\n            var _0x14ac94 = _0x422609 + _0x1ede89[_0x1e8892] * _0xbf52d8;\n            var _0xbfc2e3 = _0x16182c + _0x3504ce[_0x1e8892] * _0xbf52d8;\n            if (_0x14ac94 < 0x0 || _0xbfc2e3 < 0x0 || _0x14ac94 >= n || _0xbfc2e3 >= n)\n                break;\n            if (yx[_0x14ac94][_0xbfc2e3] != 0x1)\n                break;\n            _0x3e9176++;\n        }\n        _0x140c4a = Math['max'](_0x140c4a, _0x3e9176);\n        _0x3e9176 = 0x1;\n    }\n    return _0x140c4a;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < n; i++) {\n        yx[i] = Arr['shift']()['split']('')['map'](Number);\n    }\n    var max = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        for (var j = 0x0; j < n; j++) {\n            if (yx[i][j] == 0x1)\n                max = Math['max'](max, count(i, j));\n        }\n    }\n    console['log'](max);\n}", "test_cases": [["5\n00011\n00101\n01000\n10101\n00010\n8\n11000001\n10110111\n01100111\n01111010\n11111111\n01011010\n10100010\n10000001\n2\n01\n00\n3\n000\n000\n000\n0", "4\n8\n1\n0"]], "original": "function count(y,x){\n   var dy=[0,1,1,1];\n   var dx=[1,-1,0,1];\n   var max=1;\n   for(var i=0;i<4;i++){\n      var cnt=1;\n      for(var j=1;j<=n;j++){\n         var yy=y+(dy[i]*j);\n         var xx=x+(dx[i]*j);\n         if(yy<0 || xx<0 || yy>=n || xx>=n)break;\n         if(yx[yy][xx]!=1)break;\n         cnt++;\n      }\n      max=Math.max(max,cnt);\n      cnt=1;\n   }\n   return max;\n}\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      yx[i]=(Arr.shift()).split(\"\").map(Number);\n   }\n   var max=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         if(yx[i][j]==1)max=Math.max(max,count(i,j));\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00176_1", "type": "JavaScript", "obfuscated": "(function (_0x267ba6) {\n    var _0x235f99 = _0x267ba6['split']('\\x0a');\n    var _0x4103f = [\n        [\n            'black',\n            0x0,\n            0x0,\n            0x0\n        ],\n        [\n            'blue',\n            0x0,\n            0x0,\n            0xff\n        ],\n        [\n            'lime',\n            0x0,\n            0xff,\n            0x0\n        ],\n        [\n            'aqua',\n            0x0,\n            0xff,\n            0x0\n        ],\n        [\n            'red',\n            0xff,\n            0x0,\n            0x0\n        ],\n        [\n            'fuchsia',\n            0xff,\n            0x0,\n            0xff\n        ],\n        [\n            'yellow',\n            0xff,\n            0xff,\n            0x0\n        ],\n        [\n            'white',\n            0xff,\n            0xff,\n            0xff\n        ]\n    ];\n    for (var _0x3db253 = 0x0; _0x3db253 < _0x235f99['length']; ++_0x3db253) {\n        if (_0x235f99[_0x3db253][0x0] === '#') {\n            var _0x304add;\n            var _0xad2378 = 0x3 * 0x100 * 0x100 + 0x1;\n            var _0x232e54 = parseInt(_0x235f99[_0x3db253]['substr'](0x1, 0x2), 0x10);\n            var _0x4f1a57 = parseInt(_0x235f99[_0x3db253]['substr'](0x3, 0x2), 0x10);\n            var _0x43905 = parseInt(_0x235f99[_0x3db253]['substr'](0x5, 0x2), 0x10);\n            for (var _0x57c1e5 = 0x0; _0x57c1e5 < _0x4103f['length']; ++_0x57c1e5) {\n                var _0x490802 = Math['pow'](_0x232e54 - _0x4103f[_0x57c1e5][0x1], 0x2) + Math['pow'](_0x4f1a57 - _0x4103f[_0x57c1e5][0x2], 0x2) + Math['pow'](_0x43905 - _0x4103f[_0x57c1e5][0x3], 0x2);\n                if (_0x490802 < _0xad2378) {\n                    _0xad2378 = _0x490802;\n                    _0x304add = _0x4103f[_0x57c1e5][0x0];\n                }\n            }\n            console['log'](_0x304add);\n        }\n    }\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()));", "test_cases": [["#ffe085\n#787878\n#decade\n#ff55ff\n0", "white\nblack\nwhite\nfuchsia"]], "original": "(function(input) {\n  var lines = input.split(\"\\n\");\n  var colors = [\n    ['black', 0x00, 0x00, 0x00],\n    ['blue', 0x00, 0x00, 0xff],\n    ['lime', 0x00, 0xff, 0x00],\n    ['aqua', 0x00, 0xff, 0x00],\n    ['red', 0xff, 0x00, 0x00],\n    ['fuchsia', 0xff, 0x00, 0xff],\n    ['yellow', 0xff, 0xff, 0x00],\n    ['white', 0xff, 0xff, 0xff],\n  ];\n  for (var i = 0; i < lines.length; ++i) {\n    if (lines[i][0] === '#') {\n      var best_color;\n      var min_d = 3 * 256 * 256 + 1;\n      var r = parseInt(lines[i].substr(1, 2), 16);\n      var g = parseInt(lines[i].substr(3, 2), 16);\n      var b = parseInt(lines[i].substr(5, 2), 16);\n      for (var j = 0; j < colors.length; ++j) {\n        var d = Math.pow(r - colors[j][1], 2) + Math.pow(g - colors[j][2], 2) + Math.pow(b - colors[j][3], 2);\n        if (d < min_d) {\n          min_d = d;\n          best_color = colors[j][0];\n        }\n      }\n      console.log(best_color);\n    }\n  }\n})(require('fs').readFileSync('/dev/stdin', 'utf8').trim());", "language": "JavaScript"}
{"filename": "p00208_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var str = n['toString'](0x8) + '';\n    str = str['replace'](/7/g, '9');\n    str = str['replace'](/6/g, '8');\n    str = str['replace'](/5/g, '7');\n    str = str['replace'](/4/g, '5');\n    console['log'](str);\n}", "test_cases": [["15\n100\n1000000000\n3\n0", "19\n155\n9358757000\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var str=n.toString(8)+\"\";\n   str=str.replace(/7/g,\"9\");\n   str=str.replace(/6/g,\"8\");\n   str=str.replace(/5/g,\"7\");\n   str=str.replace(/4/g,\"5\");\n   console.log(str);\n}", "language": "JavaScript"}
{"filename": "p00217_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var AL = Arr['shift']();\n    if (AL == 0x0)\n        break;\n    var pd = [];\n    for (var i = 0x0; i < AL; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        var p = arr[0x0];\n        var d = arr[0x1] + arr[0x2];\n        pd['push']([\n            p,\n            d\n        ]);\n    }\n    pd['sort'](function (_0x4b9a9d, _0x15111e) {\n        if (_0x4b9a9d[0x1] <= _0x15111e[0x1])\n            return 0x1;\n        else\n            return -0x1;\n    });\n    console['log'](pd[0x0]['join']('\\x20'));\n}", "test_cases": [["5\n263 2345 2504\n1 3210 1985\n5000 1501 4132\n10000 503 3107\n51 1758 2690\n3\n345 5000 2396\n7 3910 1590\n6789 2525 3616\n0", "5000 5633\n345 7396"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n    var AL=Arr.shift();\n    if(AL==0)break;\n    var pd=[];\n    for(var i=0;i<AL;i++){\n        var arr=(Arr.shift()).split(\" \").map(Number);\n        var p=arr[0];\n        var d=arr[1]+arr[2];\n        pd.push([p,d]);\n    }\n    pd.sort(function(a,b){\n        if(a[1]<=b[1])return 1;\n        else return -1;\n    });\n    console.log(pd[0].join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00253_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n === 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    for (var i = 0x0; i < n + 0x1; i++) {\n        var a = arr['filter'](function (_0x538c1b, _0x236cc2) {\n            return i != _0x236cc2;\n        });\n        var h = a[0x1] - a[0x0];\n        var flag = !![];\n        for (var j = 0x1; j < n; j++) {\n            if (h != a[j] - a[j - 0x1])\n                flag = ![];\n        }\n        if (flag == !![])\n            break;\n    }\n    console['log'](arr[i]);\n}", "test_cases": [["5\n1 2 3 6 4 5\n6\n1 3 6 9 12 15 18\n4\n5 7 9 11 12\n0", "6\n1\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n===0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   for(var i=0;i<n+1;i++){\n      var a=arr.filter(function(v,index){return i!=index;});\n      var h=a[1]-a[0];\n      var flag=true;\n      for(var j=1;j<n;j++){\n         if(h!=a[j]-a[j-1])flag=false;\n      }\n      if(flag==true)break;\n   }\n   console.log(arr[i]);\n}", "language": "JavaScript"}
{"filename": "p00255_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var p = Arr['shift']()['split']('\\x20')['map'](Number);\n    var j = Arr['shift']()['split']('\\x20')['map'](Number);\n    var sum = p['reduce'](function (_0x53f949, _0x42ea08) {\n        return _0x53f949 + _0x42ea08;\n    });\n    j['sort'](function (_0x338e01, _0x336218) {\n        return _0x336218 - _0x338e01;\n    });\n    var max = sum * n;\n    while (!![]) {\n        if (j['length'] == 0x0)\n            break;\n        n--;\n        max = Math['max'](max, (sum + j['shift']()) * n);\n    }\n    console['log'](max);\n}", "test_cases": [["3\n1 1 1\n3 3\n4\n3 3 3 3\n1 1 1\n5\n1 2 3 4 5\n4 3 2 1\n0", "12\n48\n76"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var p=Arr.shift().split(\" \").map(Number);\n   var j=Arr.shift().split(\" \").map(Number);\n   var sum=p.reduce(function(a,b){return a+b;});\n   j.sort(function(a,b){return b-a;});\n   var max=sum*n;\n   while(true){\n      if(j.length==0)break;\n      n--;\n      max=Math.max(max,(sum+j.shift())*n);\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00429_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i = i + 0x2) {\n    var n = Arr[i] - 0x0;\n    var str = Arr[i + 0x1];\n    for (var j = 0x0; j < n; j++) {\n        str = str['replace'](/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g, function (_0x389b79) {\n            return _0x389b79['length'] + _0x389b79[0x0];\n        });\n    }\n    console['log'](str);\n    if (Arr[i + 0x2] == '0')\n        break;\n}", "test_cases": [["5\n11\n5\n11\n0", "13112221\n13112221"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n   var Arr=(input.trim()).split(\"\\n\");\n   for(var i=0;i<Arr.length;i=i+2){\n      var n=Arr[i]-0;\n      var str=Arr[i+1];\n      for(var j=0;j<n;j++){\n      str=str.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(s){\n      return s.length+s[0];\n      });\n      }\n      console.log(str);\n      if(Arr[i+2]==\"0\")break;\n}", "language": "JavaScript"}
{"filename": "p00430_1", "type": "JavaScript", "obfuscated": "function bomb(_0x459e2e) {\n    console['log'](_0x459e2e['join']('\\x20'));\n    if (_0x459e2e[0x0] === 0x1)\n        return;\n    var _0x595a7c = _0x459e2e['length'] - 0x1;\n    while (!![]) {\n        if (_0x459e2e[_0x595a7c] !== 0x1) {\n            if (_0x459e2e[_0x595a7c] === 0x2 || _0x595a7c === _0x459e2e['length'] - 0x1) {\n                _0x459e2e[_0x595a7c]--;\n                _0x459e2e['push'](0x1);\n            } else {\n                _0x459e2e[_0x595a7c]--;\n                _0x459e2e[_0x595a7c + 0x1]++;\n            }\n            break;\n        }\n        _0x595a7c--;\n    }\n    bomb(_0x459e2e);\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    bomb([n]);\n}", "test_cases": [["5\n5\n0", "5\n4 1\n3 2\n3 1 1\n2 2 1\n2 1 1 1\n1 1 1 1 1\n5\n4 1\n3 2\n3 1 1\n2 2 1\n2 1 1 1\n1 1 1 1 1"]], "original": "function bomb(arr){\n   console.log(arr.join(\" \"));\n   if(arr[0]===1)return;\n   var i=arr.length-1;\n   while(true){\n      if(arr[i]!==1){\n         if(arr[i]===2 || i===arr.length-1){arr[i]--;arr.push(1);}\n         else{arr[i]--;arr[i+1]++;}\n         break;\n      }\n      i--;\n   }\n   bomb(arr);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   bomb([n]);\n}", "language": "JavaScript"}
{"filename": "p00594_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n === 0x0)\n        break;\n    var ary = arr['shift']()['split']('\\x20');\n    var obj = {};\n    ary['forEach'](function (_0x544825) {\n        obj[_0x544825] = 0x0;\n    });\n    ary['forEach'](function (_0x1ca44f) {\n        obj[_0x1ca44f]++;\n    });\n    var ans = 'NO\\x20COLOR';\n    var half = n / 0x2;\n    for (var k in obj) {\n        if (obj[k] > half) {\n            ans = k;\n            break;\n        }\n    }\n    console['log'](ans);\n}", "test_cases": [["8\n3 1 2 3 3 1 5 3\n7\n5 2 5 3 4 5 5\n0", "NO COLOR\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n===0)break;\n   var ary=arr.shift().split(\" \");\n   var obj={};\n   ary.forEach(function(v){obj[v]=0;});\n   ary.forEach(function(v){obj[v]++;});\n   var ans=\"NO COLOR\";\n   var half=n/2;\n   for(var k in obj){\n      if(obj[k]>half){ans=k;break;}\n   }\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00616_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nh = arr['shift']();\n    if (nh == '0\\x200')\n        break;\n    nh = nh['split']('\\x20')['map'](Number);\n    var n = nh[0x0];\n    var h = nh[0x1];\n    var xyz = [];\n    for (var i = 0x0; i < n; i++) {\n        xyz[i] = [];\n        for (var j = 0x0; j < n; j++) {\n            xyz[i][j] = [];\n            for (var k = 0x0; k < n; k++) {\n                xyz[i][j][k] = 0x0;\n            }\n        }\n    }\n    for (var I = 0x0; I < h; I++) {\n        var ary = arr['shift']()['split']('\\x20');\n        var c = ary['shift']();\n        ary = ary['map'](function (_0x4e3998) {\n            return _0x4e3998 - 0x1;\n        });\n        if (c == 'xy') {\n            for (var i = 0x0; i < n; i++)\n                xyz[ary[0x0]][ary[0x1]][i] = 0x1;\n        } else if (c == 'xz') {\n            for (var i = 0x0; i < n; i++)\n                xyz[ary[0x0]][i][ary[0x1]] = 0x1;\n        } else if (c == 'yz') {\n            for (var i = 0x0; i < n; i++)\n                xyz[i][ary[0x0]][ary[0x1]] = 0x1;\n        }\n    }\n    var cnt = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        for (var j = 0x0; j < n; j++) {\n            for (var k = 0x0; k < n; k++) {\n                if (xyz[i][j][k] == 0x0)\n                    cnt++;\n                ;\n            }\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["4 3\nxy 4 4\nxz 1 2\nyz 2 3\n4 5\nxy 1 1\nxy 3 3\nxz 3 3\nyz 2 1\nyz 3 3\n0 0", "52\n46"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nh=arr.shift();\n   if(nh==\"0 0\")break;\n   nh=nh.split(\" \").map(Number);\n   var n=nh[0];\n   var h=nh[1];\n   var xyz=[];\n   for(var i=0;i<n;i++){\n      xyz[i]=[];\n      for(var j=0;j<n;j++){\n         xyz[i][j]=[];\n         for(var k=0;k<n;k++){\n            xyz[i][j][k]=0;\n         }\n      }\n   }\n   for(var I=0;I<h;I++){\n      var ary=arr.shift().split(\" \");\n      var c=ary.shift();\n      ary=ary.map(function(v){return v-1;});\n      if(c==\"xy\"){for(var i=0;i<n;i++)xyz[ary[0]][ary[1]][i]=1;}\n      else if(c==\"xz\"){for(var i=0;i<n;i++)xyz[ary[0]][i][ary[1]]=1;}\n      else if(c==\"yz\"){for(var i=0;i<n;i++)xyz[i][ary[0]][ary[1]]=1;}\n   }\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         for(var k=0;k<n;k++){\n            if(xyz[i][j][k]==0)cnt++;;\n         }\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00716_1", "type": "JavaScript", "obfuscated": "function F1(_0x5c8c6f, _0xa12010, _0x5c04b9) {\n    var _0x4b7dc4 = 0x0;\n    for (var _0x2e5cac = 0x0; _0x2e5cac < Y; _0x2e5cac++) {\n        _0x4b7dc4 += Math['floor'](_0x5c8c6f * _0xa12010);\n        _0x5c8c6f -= _0x5c04b9;\n    }\n    return _0x5c8c6f + _0x4b7dc4;\n}\nfunction F2(_0x689a32, _0x768d14, _0x326506) {\n    for (var _0x343148 = 0x0; _0x343148 < Y; _0x343148++) {\n        _0x689a32 += Math['floor'](_0x689a32 * _0x768d14) - _0x326506;\n    }\n    return _0x689a32;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar M = Arr['shift']() - 0x0;\nfor (var i = 0x0; i < M; i++) {\n    var money = Arr['shift']() - 0x0;\n    var Y = Arr['shift']() - 0x0;\n    var N = Arr['shift']() - 0x0;\n    var arr = [];\n    for (var j = 0x0; j < N; j++) {\n        var D = Arr['shift']()['split']('\\x20')['map'](Number);\n        if (D[0x0] == 0x0)\n            arr['push'](F1(money, D[0x1], D[0x2]));\n        if (D[0x0] == 0x1)\n            arr['push'](F2(money, D[0x1], D[0x2]));\n    }\n    console['log'](Math['max']['apply'](null, arr));\n}", "test_cases": [["4\n1000000\n5\n2\n0 0.03125 3000\n1 0.03125 3000\n6620000\n7\n2\n0 0.0732421875 42307\n1 0.0740966796875 40942\n39677000\n4\n4\n0 0.0709228515625 30754\n1 0.00634765625 26165\n0 0.03662109375 79468\n0 0.0679931640625 10932\n10585000\n6\n4\n1 0.0054931640625 59759\n1 0.12353515625 56464\n0 0.0496826171875 98193\n0 0.0887451171875 78966", "1150357\n10559683\n50796918\n20829397"]], "original": "function F1(m,b,c){\n   var sum=0;\n   for(var i=0;i<Y;i++){\n      sum+=Math.floor(m*b);\n      m-=c;\n   }\n   return m+sum;\n}\nfunction F2(m,b,c){\n   for(var i=0;i<Y;i++){\n      m+=Math.floor(m*b)-c;\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar M=Arr.shift()-0;\nfor(var i=0;i<M;i++){\n   var money=Arr.shift()-0;\n   var Y=Arr.shift()-0;\n   var N=Arr.shift()-0;\n   var arr=[];\n   for(var j=0;j<N;j++){\n      var D=(Arr.shift()).split(\" \").map(Number);\n      if(D[0]==0)arr.push(F1(money,D[1],D[2]));\n      if(D[0]==1)arr.push(F2(money,D[1],D[2]));\n   }\n   console.log(Math.max.apply(null,arr));\n}", "language": "JavaScript"}
{"filename": "p00723_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < n; I++) {\n    var str = Arr['shift']();\n    var arr = [];\n    for (var i = 0x1; i < str['length']; i++) {\n        arr['push']([\n            str['slice'](0x0, i),\n            str['slice'](i, str['length'])\n        ]);\n    }\n    var obj = {};\n    for (var i = 0x0; i < arr['length']; i++) {\n        var A = arr[i][0x0];\n        var B = arr[i][0x1];\n        var a = A['split']('')['reverse']()['join']('');\n        var b = B['split']('')['reverse']()['join']('');\n        obj[A + B] = !![];\n        obj[A + b] = !![];\n        obj[a + B] = !![];\n        obj[a + b] = !![];\n        obj[B + A] = !![];\n        obj[B + a] = !![];\n        obj[b + A] = !![];\n        obj[b + a] = !![];\n    }\n    console['log'](Object['keys'](obj)['length']);\n}", "test_cases": [["4\naa\nabba\nabcd\nabcde", "1\n6\n12\n18"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var str=Arr.shift();\n   var arr=[];\n   for(var i=1;i<str.length;i++){\n      arr.push([str.slice(0,i),str.slice(i,str.length)]);\n   }\n   var obj={};\n   for(var i=0;i<arr.length;i++){\n      var A=arr[i][0];\n      var B=arr[i][1];\n      var a=A.split(\"\").reverse().join(\"\");\n      var b=B.split(\"\").reverse().join(\"\");\n      obj[A+B]=true;\n      obj[A+b]=true;\n      obj[a+B]=true;\n      obj[a+b]=true;\n      obj[B+A]=true;\n      obj[B+a]=true;\n      obj[b+A]=true;\n      obj[b+a]=true;\n   }\n   console.log(Object.keys(obj).length);\n}", "language": "JavaScript"}
{"filename": "p00774_1", "type": "JavaScript", "obfuscated": "function stoneRemove() {\n    yx['forEach'](function (_0x5b2243, _0x285220) {\n        var _0x1c34a3 = _0x5b2243['join']('')['replace'](/([1-9])\\1{2,}/, function (_0x89b868) {\n            point += (_0x89b868[0x0] - 0x0) * _0x89b868['length'];\n            return _0x89b868['replace'](/./g, '0');\n        });\n        yx[_0x285220] = _0x1c34a3['split']('')['map'](Number);\n    });\n    var _0x423646 = !![];\n    while (_0x423646) {\n        _0x423646 = ![];\n        for (var _0x3ae7ca = 0x0; _0x3ae7ca < H - 0x1; _0x3ae7ca++) {\n            for (var _0x25ed5d = 0x0; _0x25ed5d < 0x5; _0x25ed5d++) {\n                if (yx[_0x3ae7ca][_0x25ed5d] != 0x0 && yx[_0x3ae7ca + 0x1][_0x25ed5d] == 0x0) {\n                    yx[_0x3ae7ca + 0x1][_0x25ed5d] = yx[_0x3ae7ca][_0x25ed5d];\n                    yx[_0x3ae7ca][_0x25ed5d] = 0x0;\n                    _0x423646 = !![];\n                }\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var h = arr['shift']() - 0x0;\n    if (h == 0x0)\n        break;\n    var H = h;\n    var yx = [];\n    while (h--)\n        yx['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var point = 0x0;\n    var p = point;\n    while (!![]) {\n        stoneRemove();\n        if (p == point)\n            break;\n        p = point;\n    }\n    console['log'](point);\n}", "test_cases": [["1\n6 9 9 9 9\n5\n5 9 5 5 9\n5 5 6 9 9\n4 6 3 6 9\n3 3 2 9 9\n2 2 1 1 1\n10\n3 5 6 5 6\n2 2 2 8 3\n6 2 5 9 2\n7 7 7 6 1\n4 6 6 4 9\n8 9 1 1 8\n5 6 1 8 1\n6 8 2 1 2\n9 6 3 3 5\n5 3 8 8 8\n5\n1 2 3 4 5\n6 7 8 9 1\n2 3 4 5 6\n7 8 9 1 2\n3 4 5 6 7\n3\n2 2 8 7 4\n6 5 7 7 7\n8 8 9 9 9\n0", "36\n38\n99\n0\n72"]], "original": "function stoneRemove(){\n   yx.forEach(function(v,i){\n      var str=v.join(\"\").replace(/([1-9])\\1{2,}/,function(x){\n         point+=(x[0]-0)*x.length;\n         return x.replace(/./g,\"0\");\n      });\n      yx[i]=str.split(\"\").map(Number);\n   });\n   var flag=true;\n   while(flag){\n      flag=false;\n      for(var i=0;i<H-1;i++){\n         for(var j=0;j<5;j++){\n            if(yx[i][j]!=0 && yx[i+1][j]==0){\n               yx[i+1][j]=yx[i][j];\n               yx[i][j]=0;\n               flag=true;\n            }\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var h=arr.shift()-0;\n   if(h==0)break;\n   var H=h;\n   var yx=[];\n   while(h--)yx.push(arr.shift().split(\" \").map(Number));\n   var point=0;\n   var p=point;\n   while(true){\n      stoneRemove();\n      if(p==point)break;\n      p=point;\n   }\n   console.log(point);\n}", "language": "JavaScript"}
{"filename": "p00946_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']()['split']('\\x20')[0x0] - 0x0;\nvar x = [];\nfor (var i = 0x1; i <= n; i++)\n    x['push']([\n        i,\n        -0x1 * i\n    ]);\narr['forEach'](function (_0x167326, _0x2bce27) {\n    x[_0x167326 - 0x0 - 0x1][0x1] = _0x2bce27;\n});\nx['sort'](function (_0x2f0c80, _0x1df7b6) {\n    return _0x1df7b6[0x1] - _0x2f0c80[0x1];\n});\nx = x['map'](function (_0x42ff5b) {\n    return _0x42ff5b[0x0];\n});\nconsole['log'](x['join']('\\x0a'));", "test_cases": [["5 3\n4\n2\n5", "5\n2\n4\n1\n3"], ["10 8\n1\n4\n7\n3\n4\n10\n1\n3", "3\n1\n10\n4\n7\n2\n5\n6\n8\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n = arr.shift().split(\" \")[0] - 0;\nvar x = [];\nfor (var i = 1; i <= n; i++) x.push([i,-1*i]);\narr.forEach(function(v,i) {\n   x[v-0-1][1]=i;\n});\nx.sort(function(a,b){\n   return b[1]-a[1];\n});\nx=x.map(function(v){\n   return v[0];\n});\nconsole.log(x.join(\"\\n\"));", "language": "JavaScript"}
{"filename": "p01109_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var a = arr['shift']()['split']('\\x20')['map'](Number);\n    var sum = a['reduce']((_0x4da76a, _0x557b8f) => _0x4da76a + _0x557b8f);\n    console['log'](a['filter'](_0x3ce691 => _0x3ce691 <= sum / n)['length']);\n}", "test_cases": [["7\n15 15 15 15 15 15 15\n4\n10 20 30 60\n10\n1 1 1 1 1 1 1 1 1 100\n7\n90 90 90 90 90 90 10\n7\n2 7 1 8 2 8 4\n0", "7\n3\n9\n1\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var a = arr.shift().split(\" \").map(Number);\n   var sum = a.reduce((a,b)=>a+b);\n   console.log(a.filter(v => v<=sum/n).length);\n}\n", "language": "JavaScript"}
{"filename": "p01138_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var ary = [];\n    while (n--) {\n        var hms = arr['shift']()['split']('\\x20');\n        var start = hms[0x0]['split'](':')['map'](Number);\n        var end = hms[0x1]['split'](':')['map'](Number);\n        start = start[0x0] * 0x3c * 0x3c + start[0x1] * 0x3c + start[0x2];\n        end = end[0x0] * 0x3c * 0x3c + end[0x1] * 0x3c + end[0x2];\n        ary['push']([\n            start,\n            end\n        ]);\n    }\n    ary['sort'](function (_0x1b72d3, _0x39b4a1) {\n        return _0x1b72d3[0x0] - _0x39b4a1[0x0];\n    });\n    var train = [];\n    var cnt = 0x0;\n    ary['forEach'](function (_0x440f0b) {\n        if (train['length'] == 0x0) {\n            cnt++;\n            train['push'](_0x440f0b[0x1]);\n        } else {\n            train['sort'](function (_0x244331, _0x305cc1) {\n                return _0x244331 - _0x305cc1;\n            });\n            if (train[0x0] <= _0x440f0b[0x0]) {\n                train['shift']();\n                train['push'](_0x440f0b[0x1]);\n            } else {\n                cnt++;\n                train['push'](_0x440f0b[0x1]);\n            }\n        }\n    });\n    console['log'](cnt);\n}", "test_cases": [["3\n05:47:15 09:54:40\n12:12:59 12:13:00\n16:30:20 21:18:53\n6\n00:00:00 03:00:00\n01:00:00 03:00:00\n02:00:00 03:00:00\n03:00:00 04:00:00\n03:00:00 05:00:00\n03:00:00 06:00:00\n0", "1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=[];\n   while(n--){\n      var hms=arr.shift().split(\" \");\n      var start=hms[0].split(\":\").map(Number);\n      var end=hms[1].split(\":\").map(Number);\n      start=start[0]*60*60+start[1]*60+start[2];\n      end=end[0]*60*60+end[1]*60+end[2];\n      ary.push([start,end]);\n   }\n   ary.sort(function(a,b){return a[0]-b[0];});\n   var train=[];\n   var cnt=0;\n   ary.forEach(function(v){\n      if(train.length==0){\n         cnt++;\n         train.push(v[1]);\n      }else{\n         train.sort(function(a,b){return a-b;});\n         if(train[0]<=v[0]){\n            train.shift();\n            train.push(v[1]);\n         }else{\n            cnt++;\n            train.push(v[1]);\n         }\n      }\n   });\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p01143_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nmp = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (nmp[0x0] == 0x0 && nmp[0x1] == 0x0 && nmp[0x2] == 0x0)\n        break;\n    var n = nmp[0x0];\n    var m = nmp[0x1] - 0x1;\n    var p = nmp[0x2];\n    var arr = [];\n    var sum = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var v = Arr['shift']() - 0x0;\n        arr['push'](v);\n        sum += v * 0x64;\n    }\n    sum = sum * (0x64 - p) / 0x64;\n    var ans = 0x0;\n    if (arr[m] != 0x0)\n        ans = Math['floor'](sum / arr[m]);\n    console['log'](ans);\n}", "test_cases": [["3 2 50\n1\n2\n3\n4 4 75\n1\n2\n3\n0\n3 1 10\n8\n1\n1\n0 0 0", "150\n0\n112"]], "original": "\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nmp=(Arr.shift()).split(\" \").map(Number);\n   if(nmp[0]==0 && nmp[1]==0 && nmp[2]==0)break;\n   var n=nmp[0];\n   var m=nmp[1]-1;\n   var p=nmp[2];\n   var arr=[];\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr.push(v);\n      sum+=(v*100);\n   }\n   sum=sum*(100-p)/100;\n   var ans=0;\n   if(arr[m]!=0)ans=Math.floor(sum/arr[m]);\n   console.log(ans);\n}\n", "language": "JavaScript"}
{"filename": "p01313_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar n = -0x1, i = function (_0x40f54f) {\n        return Math['pow'](0xa, ~~_0x40f54f);\n    }, l, p, c, r, o, a, b, am, bm, d;\nprocess['stdin']['on']('data', function (_0x41ac6f) {\n    p = _0x41ac6f['split']('\\x0a');\n    l = ~~p[0x0];\n    for (c = 0x0; c < l; ++c) {\n        r = [], o = p[c + 0x1]['split']('\\x20'), d = 0x0;\n        for (a = i(o[0x0] - 0x1), am = i(o[0x0]) - 0x1; a < am; ++a)\n            for (b = i(o[0x1] - 0x1), bm = i(o[0x1]) - 0x1; b < bm; ++b)\n                (b * b + b - a * a + a) / 0x2 == '' + a + b && (console['log'](a + '\\x20' + b), ++d);\n        d || console['log']('No\\x20cats.');\n    }\n});", "test_cases": [["4\n1 1\n1 3\n1 4\n2 2", "1 5\n2 7\n7 119\nNo cats.\n13 53\n18 63\n33 88\n35 91"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar n = -1, i = function(d){return Math.pow(10, ~~d)}, l, p, c, r, o, a, b, am, bm, d;\nprocess.stdin.on('data', function(ip){\n\tp = ip.split('\\n'); l = ~~p[0];\n\tfor(c = 0; c < l; ++c) {\n\t\tr = [], o = p[c+1].split(' '), d = 0;\n\t\tfor(a = i(o[0] - 1), am = i(o[0]) - 1; a < am; ++a)\n\t\tfor(b = i(o[1] - 1), bm = i(o[1]) - 1; b < bm; ++b)\n\t\t\t(b * b + b - a * a + a) / 2 == ('' + a + b) && (console.log(a + ' ' + b), ++d);\n\t\td || console.log('No cats.');\n\t}\n});", "language": "JavaScript"}
{"filename": "p01359_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var [n, q] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (n == 0x0 && q == 0x0)\n        break;\n    var g = [];\n    for (var i = 0x0; i < n; i++) {\n        var [e, ey, wy] = arr['shift']()['split']('\\x20');\n        [ey, wy] = [\n            ey - 0x0,\n            wy - 0x0\n        ];\n        g['push']([\n            e,\n            wy - ey,\n            wy\n        ]);\n    }\n    for (var i = 0x0; i < q; i++) {\n        var n = arr['shift']() - 0x0;\n        var ans = 'Unknown';\n        for (var j = 0x0; j < g['length']; j++) {\n            var a = g[j][0x1];\n            var b = g[j][0x2];\n            if (a < n && n <= b) {\n                ans = [\n                    g[j][0x0],\n                    n - a\n                ]['join']('\\x20');\n            }\n        }\n        console['log'](ans);\n    }\n}", "test_cases": [["4 3\nmeiji 10 1877\ntaisho 6 1917\nshowa 62 1987\nheisei 22 2010\n1868\n1917\n1988\n1 1\nuniversalcentury 123 2168\n2010\n0 0", "meiji 1\ntaisho 6\nUnknown\nUnknown"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\n\nvar arr = input.trim().split(\"\\n\");\nwhile(true){\n   var [n,q]=arr.shift().split(\" \").map(Number);\n   if(n==0 && q==0)break;\n   var g=[];\n   for(var i=0;i<n;i++){\n      var [e,ey,wy]=arr.shift().split(\" \");\n      [ey,wy]=[ey-0,wy-0];\n      g.push([e,wy-ey,wy]);\n   }\n   for(var i=0;i<q;i++){\n      var n = arr.shift() - 0;\n      var ans=\"Unknown\";\n      for(var j=0;j<g.length;j++){\n         var a = g[j][1];\n         var b = g[j][2];\n         if(a<n && n<=b){\n            ans=[g[j][0],n-a].join(\" \");\n         }\n      }\n      console.log(ans);\n   }\n}\n\n", "language": "JavaScript"}
{"filename": "p01447_1", "type": "JavaScript", "obfuscated": "console['log'](Math['ceil'](Math['log'](+require('fs')['readFileSync']('/dev/stdin', 'utf-8')) / Math['log'](0x3)));", "test_cases": [["8", "2"], ["30", "4"], ["2000000000", "20"]], "original": "console.log(Math.ceil(Math.log(+require(\"fs\").readFileSync(\"/dev/stdin\",\"utf-8\"))/Math.log(3)))", "language": "JavaScript"}
{"filename": "p01687_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar s = input['trim']();\nfor (var i = 0x0; i < s['length'] - 0x7; i++) {\n    var arr = [\n        s[i],\n        s[i + 0x1],\n        s[i + 0x2],\n        s[i + 0x3],\n        s[i + 0x4],\n        s[i + 0x5],\n        s[i + 0x6],\n        s[i + 0x7]\n    ];\n    if (arr['join']('') == 'AIZUNYAN') {\n        i += 0x7;\n        continue;\n    }\n    var str = arr['sort']()['join']('');\n    if (str == 'AADINNUY') {\n        s = s['slice'](0x0, i) + 'AIZUNYAN' + s['slice'](i + 0x8, s['length']);\n        i += 0x7;\n    }\n}\nconsole['log'](s);", "test_cases": [["AIDUNYAN", "AIZUNYAN"], ["ZDD", "ZDD"], ["AADINNUYHAMAJIDETENSHIDAKARANYANAIDUPEROPEROSHITAI", "AIZUNYANHAMAJIDETENSHIDAKARAAIZUNYANPEROPEROSHITAI"], ["NYANAIDUAIDU", "AIZUNYANAIDU"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim();\nfor(var i=0;i<s.length-7;i++){\n   var arr=[s[i],s[i+1],s[i+2],s[i+3],s[i+4],s[i+5],s[i+6],s[i+7]]; \n   if(arr.join(\"\")==\"AIZUNYAN\"){\n      i+=7;\n      continue;\n   }  \n   var str=arr.sort().join(\"\");\n   if(str==\"AADINNUY\"){\n      s=s.slice(0,i)+\"AIZUNYAN\"+s.slice(i+8,s.length);\n      i+=7;\n   }\n}\nconsole.log(s);", "language": "JavaScript"}
{"filename": "p01924_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var tdl = arr[0x0];\n    if (tdl == '0\\x200\\x200')\n        break;\n    var [t, d, l] = tdl['split']('\\x20')['map'](Number);\n    var cnt = 0x0;\n    var time = 0x0;\n    for (var i = 0x0; i < t; i++) {\n        if (time != 0x0)\n            cnt++;\n        if (time > 0x0)\n            time--;\n        var x = arr[i + 0x1] - 0x0;\n        if (x >= l)\n            time = d;\n    }\n    console['log'](cnt);\n    arr = arr['slice'](t + 0x1);\n}", "test_cases": [["5 2 3\n3\n5\n1\n2\n3\n3 100 100\n3\n3\n4\n20 3 8\n3\n2\n6\n1\n9\n1\n8\n4\n2\n2\n8\n1\n8\n8\n2\n5\n3\n4\n3\n8\n7 2 2\n0\n2\n5\n2\n5\n2\n1\n0 0 0", "3\n0\n11\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var tdl = arr[0];\n   if (tdl == \"0 0 0\") break;\n   var [t,d,l]=tdl.split(\" \").map(Number);\n   var cnt=0;\n   var time=0;\n   for(var i=0;i<t;i++){\n      if(time!=0)cnt++;\n      if(time>0)time--;\n      var x=arr[i+1]-0;\n      if(x>=l)time=d;\n   }\n   console.log(cnt);\n   arr=arr.slice(t+1);\n}\n", "language": "JavaScript"}
{"filename": "p02247_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar a = arr[0x0];\nvar b = arr[0x1];\nvar len = b['length'] - 0x1;\nvar reg = new RegExp(b, 'g');\nvar ans = [];\nwhile (reg['test'](a)) {\n    reg['lastIndex'] -= len;\n    ans['push'](reg['lastIndex'] - 0x1);\n}\nif (ans['length'] != 0x0)\n    console['log'](ans['join']('\\x0a'));", "test_cases": [["aabaaa\naa", "0\n3\n4"], ["xyzz\nyz", "1"], ["abc\nxyz", ""]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar a=arr[0];\nvar b=arr[1];\nvar len=b.length-1;\nvar reg = new RegExp(b,\"g\");\nvar ans=[];\nwhile (reg.test(a)) {\n   reg.lastIndex -= len;\n   ans.push(reg.lastIndex-1);\n}\nif(ans.length!=0)console.log(ans.join(\"\\n\"));", "language": "JavaScript"}
{"filename": "p02381_1", "type": "JavaScript", "obfuscated": "'use strict';\n(function (_0x14b32c) {\n    var _0x5606e2 = _0x14b32c['toString']();\n    var _0xe1035b = /\\w+\\n[\\w\\s]*?\\n/g;\n    var _0x184d25 = function (_0x55f0a0) {\n        return _0x55f0a0['map'](_0x19d2f5)['join']('\\x0a');\n        function _0x19d2f5(_0x56ee75) {\n            var _0x467f7b = _0x56ee75['length'];\n            var _0x2f3ae3 = _0x56ee75['reduce'](_0x55cac7) / _0x467f7b;\n            return Math['sqrt'](_0x56ee75['map'](function (_0x22a00d) {\n                return Math['pow'](_0x22a00d - _0x2f3ae3, 0x2);\n            })['reduce'](_0x55cac7) / _0x467f7b)['toFixed'](0x8);\n        }\n        function _0x55cac7(_0x46e59e, _0x45ab39) {\n            return _0x46e59e + _0x45ab39;\n        }\n    }(_0x5606e2['match'](_0xe1035b)['map'](function (_0x19ad74) {\n        return _0x19ad74['split']('\\x0a')[0x1]['split']('\\x20')['slice'](0x0, _0x19ad74['split']('\\x0a')[0x0])['map'](Number);\n    }));\n    console['log'](_0x184d25);\n}(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["5\n70 80 100 90 20\n3\n80 80 80\n0", "27.85677655\n0.00000000"]], "original": "'use strict';\n(function(stdin) {\n  var lines  = stdin.toString();\n  var re = /\\w+\\n[\\w\\s]*?\\n/g;\n  var result = (function(data) {\n\n    return data.map(stdev).join('\\n');\n\n    function stdev(scores) {\n      var count = scores.length;\n      var mean  = scores.reduce(sum) / count;\n\n      return Math.sqrt(scores.map(function(v) {\n          return Math.pow(v - mean,2);\n        })\n        .reduce(sum) / count).toFixed(8);\n    }\n\n    function sum(a,b) {\n      return a + b;\n    }\n  }(lines.match(re).map(function(v) {\n      return v.split('\\n')[1].split(' ')\n        .slice(0,v.split('\\n')[0]).map(Number);\n   })\n  ));\n  console.log(result);\n}(require('fs').readFileSync('/dev/stdin', 'utf8')));", "language": "JavaScript"}
{"filename": "p02431_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar Q = arr[0x0] - 0x0;\nvar a = [];\nvar s = '';\nfor (var i = 0x1; i <= Q; i++) {\n    var q = arr[i]['split']('\\x20');\n    if (q[0x0] == '0')\n        a['push'](q[0x1] - 0x0);\n    else if (q[0x0] == '1')\n        s += a[q[0x1]] - 0x0 + '\\x0a';\n    else\n        a['pop']();\n}\nconsole['log'](s['trim']());", "test_cases": [["8\n0 1\n0 2\n0 3\n2\n0 4\n1 0\n1 1\n1 2", "1\n2\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar Q=arr[0]-0;\nvar a=[];\nvar s=\"\";\nfor(var i=1;i<=Q;i++){\n   var q=arr[i].split(\" \");\n   if(q[0]==\"0\")a.push(q[1]-0);\n   else if(q[0]==\"1\")s+=(a[q[1]]-0)+\"\\n\";\n   else a.pop();\n}\nconsole.log(s.trim());\n", "language": "JavaScript"}
{"filename": "p02470_1", "type": "JavaScript", "obfuscated": "function Main(_0x5e0506) {\n    var _0x300631 = parseInt(_0x5e0506, 0xa);\n    var _0xbb0977 = 0x0;\n    for (i = 0x1; i < _0x300631; i++) {\n        if (gcd(_0x300631, i) == 0x1)\n            _0xbb0977++;\n    }\n    console['log'](_0xbb0977);\n}\nfunction gcd(_0xe44ecf, _0x181820) {\n    var _0x337705, _0x3bc406, _0x5278e8;\n    _0x337705 = Math['max'](_0xe44ecf, _0x181820);\n    _0x3bc406 = Math['min'](_0xe44ecf, _0x181820);\n    _0x5278e8 = _0x337705 % _0x3bc406;\n    if (_0x5278e8 == 0x0) {\n        return _0x3bc406;\n    } else {\n        return gcd(_0x3bc406, _0x5278e8);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6", "2"], ["1000000", "400000"]], "original": "function Main(input) {\n    var n = parseInt(input, 10);\n    var count = 0;\n    for (i = 1; i < n; i++) {\n        if (gcd(n, i) == 1) count++;\n    }\n    console.log(count);\n}\n\nfunction gcd(n, m) {\n    var a, b, c;\n    a = Math.max(n, m);\n    b = Math.min(n, m);\n    c = a % b; \n    if (c == 0) {\n        return b;\n    } else {\n        return gcd(b, c);\n    }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02551_1", "type": "JavaScript", "obfuscated": "function Main(_0x1b48b6) {\n    _0x1b48b6 = _0x1b48b6['split']('\\x0a');\n    tmp = _0x1b48b6[0x0]['split']('\\x20');\n    var _0x2493ed = parseInt(tmp[0x0]);\n    var _0x50b5ea = parseInt(tmp[0x1]);\n    var _0x5ce08d = Array(_0x2493ed - 0x2);\n    var _0x4556af = Array(_0x2493ed - 0x2);\n    _0x5ce08d['fill'](_0x2493ed - 0x2);\n    _0x4556af['fill'](_0x2493ed - 0x2);\n    var _0x410190 = BigInt((_0x2493ed - 0x2) * (_0x2493ed - 0x2));\n    for (var _0x591c5d = 0x0; _0x591c5d < _0x50b5ea; _0x591c5d++) {\n        var _0x380b4d = _0x1b48b6[_0x591c5d + 0x1]['split']('\\x20');\n        var _0x5548cf = parseInt(_0x380b4d[0x0]);\n        var _0x5b372e = parseInt(_0x380b4d[0x1]);\n        var _0x36ff74 = _0x5ce08d;\n        var _0x36475a = _0x4556af;\n        var _0x12b8f5 = _0x5b372e - 0x2;\n        var _0x5dad20 = _0x4556af[_0x12b8f5];\n        if (_0x5548cf == 0x1) {\n            _0x36ff74 = _0x4556af;\n            _0x36475a = _0x5ce08d;\n            _0x5dad20 = _0x5ce08d[_0x12b8f5];\n        }\n        _0x410190 -= BigInt(_0x5dad20);\n        for (var _0x30a104 = 0x0; _0x30a104 < _0x5dad20; _0x30a104++) {\n            if (_0x36ff74[_0x30a104] > _0x12b8f5)\n                _0x36ff74[_0x30a104] = _0x12b8f5;\n        }\n        _0x36475a[_0x12b8f5] = 0x0;\n    }\n    console['log']('%d', Number(_0x410190));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 5\n1 3\n2 3\n1 4\n2 2\n1 2", "1"], ["200000 0", "39999200004"], ["176527 15\n1 81279\n2 22308\n2 133061\n1 80744\n2 44603\n1 170938\n2 139754\n2 15220\n1 172794\n1 159290\n2 156968\n1 56426\n2 77429\n1 97459\n2 71282", "31159505795"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n  // 1行目がinput[0], 2行目がinput[1], …に入る\n  input = input.split(\"\\n\");\n  tmp = input[0].split(\" \");\n  var N = parseInt(tmp[0]);\n  var Q = parseInt(tmp[1]);\n  var minRows = Array(N-2);\n  var minCols = Array(N-2);\n  minRows.fill(N-2);\n  minCols.fill(N-2);\n  var result = BigInt((N-2)*(N-2));\n  for(var i=0; i<Q; i++) {\n    var query = input[i+1].split(\" \");\n    var q_1 = parseInt(query[0]);\n    var q_2 = parseInt(query[1]);\n    var myArray = minRows;\n    var myArray2 = minCols;\n    \n    var index = q_2-2;\n    var closest = minCols[index];\n    if(q_1 == 1) {\n      myArray = minCols;\n      myArray2 = minRows;\n      closest = minRows[index];\n    }\n    result -= BigInt(closest);\n    for(var j=0; j<closest; j++) {\n      if(myArray[j] > index) myArray[j] = index;\n    }\n    myArray2[index] = 0;\n  }\n  //出力\n  console.log(\"%d\", Number(result));\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02618_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x12155f) {\n    const _0x22bf7e = _0x12155f['split']('\\x0a');\n    const _0x2b33ad = parseInt(_0x22bf7e[0x0]);\n    let _0xb785e4 = _0x22bf7e[0x1]['split']('\\x20');\n    const _0x1981bc = _0xb785e4['map'](_0x485077 => parseInt(_0x485077));\n    let _0x208f63 = [];\n    for (let _0x45cc8a = 0x2; _0x45cc8a < _0x22bf7e['length']; _0x45cc8a++) {\n        _0x208f63['push']([]);\n        const _0x23092d = _0x22bf7e[_0x45cc8a]['split']('\\x20');\n        for (let _0x32b157 = 0x0; _0x32b157 < _0x23092d['length']; _0x32b157++) {\n            _0x208f63[_0x45cc8a - 0x2]['push'](parseInt(_0x23092d[_0x32b157]));\n        }\n    }\n    let _0x114373 = [];\n    for (let _0x47e36f = 0x0; _0x47e36f < _0x208f63['length']; _0x47e36f++) {\n        let _0x2d5344 = _0x208f63[_0x47e36f][0x0];\n        let _0x5343db = 0x0;\n        for (let _0x177b7e = 0x1; _0x177b7e < _0x208f63[_0x47e36f]['length']; _0x177b7e++) {\n            if (_0x208f63[_0x47e36f][_0x177b7e] > _0x2d5344) {\n                _0x5343db = _0x177b7e;\n                _0x2d5344 = _0x208f63[_0x47e36f][_0x177b7e];\n            }\n        }\n        _0x114373['push'](_0x5343db + 0x1);\n    }\n    for (let _0x13f03a = 0x0; _0x13f03a < _0x114373['length']; _0x13f03a++) {\n        console['log'](_0x114373[_0x13f03a]);\n    }\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nmain(input);", "test_cases": [["5\n86 90 69 51 2 96 71 47 88 34 45 46 89 34 31 38 97 84 41 80 14 4 50 83 7 82\n19771 12979 18912 10432 10544 12928 13403 3047 10527 9740 8100 92 2856 14730 1396 15905 6534 4650 11469 3628 8433 2994 10899 16396 18355 11424\n6674 17707 13855 16407 12232 2886 11908 1705 5000 1537 10440 10711 4917 10770 17272 15364 19277 18094 3929 3705 7169 6159 18683 15410 9092 4570\n6878 4239 19925 1799 375 9563 3445 5658 19857 11401 6997 6498 19933 3848 2426 2146 19745 16880 17773 18359 3921 14172 16730 11157 5439 256\n8633 15862 15303 10749 18499 7792 10317 5901 9395 11433 3514 3959 5202 19850 19469 9790 5653 784 18500 10552 17975 16615 7852 197 8471 7452\n19855 17918 7990 10572 4333 438 9140 9104 12622 4985 12319 4028 19922 12132 16259 17476 2976 547 19195 19830 16285 4806 4471 9457 2864 2192", "1\n17\n13\n14\n13"]], "original": "'use strict'\n\nfunction main(input) {\n  const inputRows = input.split('\\n');\n  const d = parseInt(inputRows[0])\n  let cStrArray = inputRows[1].split(' ')\n  const c = cStrArray.map(str => parseInt(str))\n  let s = []\n  for (let i = 2; i < inputRows.length; i++) {\n    s.push([])\n    const tmpRow = inputRows[i].split(' ')\n    for (let j = 0; j < tmpRow.length; j++) {\n      s[i - 2].push(parseInt(tmpRow[j]))\n    }\n  }\n\n  let t = []\n\n  for (let i = 0; i < s.length; i++) {\n    let tmpMax = s[i][0]\n    let index = 0\n    for (let j = 1; j < s[i].length; j++) {\n      if (s[i][j] > tmpMax) {\n        index = j\n        tmpMax = s[i][j]\n      }\n    }\n    t.push(index + 1)\n  }\n\n\n  // output\n  for (let i = 0; i < t.length; i++) {\n    console.log(t[i])\n  }\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nmain(input)", "language": "JavaScript"}
{"filename": "p02652_1", "type": "JavaScript", "obfuscated": "function Main(_0x1d8187) {\n    let _0x22f884 = 0x0;\n    let _0x51efe0 = 0x0;\n    for (let _0x5d5e84 = 0x0; _0x5d5e84 < _0x1d8187['length']; _0x5d5e84++) {\n        if (_0x1d8187[_0x5d5e84] === '1') {\n            _0x51efe0++;\n        } else if (_0x1d8187[_0x5d5e84] === '0') {\n            _0x22f884++;\n        }\n    }\n    console['log'](Math['abs'](_0x51efe0 - _0x22f884));\n}\nlet input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nMain(input);", "test_cases": [["0??", "1"], ["0??0", "2"], ["??00????0??0????0?0??00??1???11?1?1???1?11?111???1", "4"]], "original": "function Main(str) {\n  \tlet zero = 0;\n  \tlet one = 0;\n  \tfor(let i=0;i<str.length;i++) {\n    \tif(str[i] === '1') {\n        \tone++;\n        } else if(str[i] === '0') {\n        \tzero++;\n        }\n    }\n  \n  \tconsole.log(Math.abs(one - zero));\n}\n\nlet input = require('fs').readFileSync('/dev/stdin', 'utf8');\nMain(input);\n", "language": "JavaScript"}
{"filename": "p02856_1", "type": "JavaScript", "obfuscated": "function Main(_0x53cd56) {\n    _0x53cd56 = _0x53cd56['trim']()['split']('\\x0a')['map'](function (_0x2a77fe) {\n        return _0x2a77fe['split']('\\x20');\n    });\n    let _0x4b11a7 = parseInt(_0x53cd56[0x0][0x0], 0xa);\n    let _0x2b0575 = -0x1;\n    let _0x44d725 = 0x0;\n    for (let _0x3e4123 = 0x0; _0x3e4123 < _0x4b11a7; _0x3e4123++) {\n        _0x2b0575 += parseInt(_0x53cd56[_0x3e4123 + 0x1][0x1], 0xa);\n        _0x44d725 += parseInt(_0x53cd56[_0x3e4123 + 0x1][0x0], 0xa) * parseInt(_0x53cd56[_0x3e4123 + 0x1][0x1], 0xa);\n    }\n    _0x2b0575 += Math['floor']((_0x44d725 - 0x1) / 0x9);\n    console['log'](_0x2b0575);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n2 2\n9 1", "3"], ["3\n1 1\n0 8\n7 1", "9"]], "original": "function Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tlet M = parseInt(input[0][0], 10);\n\tlet ans = -1;\n\tlet tmp = 0;\n\tfor (let i = 0; i < M; i++){\n\t\tans += parseInt(input[i + 1][1],10);\n\t\ttmp += parseInt(input[i + 1][0],10) * parseInt(input[i + 1][1],10);\n\t}\n\tans += Math.floor((tmp - 1) / 9);\n\tconsole.log(ans);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\n\n", "language": "JavaScript"}
{"filename": "p02897_1", "type": "JavaScript", "obfuscated": "function main(_0x44913f) {\n    var _0x512a4b = 0x0;\n    var _0x1d5ce7 = 0x0;\n    var _0x2964b3 = 0x0;\n    if (_0x44913f > 0x0) {\n        if (_0x44913f % 0x2 == 0x0) {\n            _0x512a4b = _0x44913f / 0x2;\n            _0x1d5ce7 = _0x512a4b;\n            _0x2964b3 = _0x1d5ce7 / _0x44913f;\n        } else if (_0x44913f % 0x2 == 0x1) {\n            _0x512a4b = parseInt(_0x44913f / 0x2);\n            _0x1d5ce7 = _0x512a4b + 0x1;\n            _0x2964b3 = _0x1d5ce7 / _0x44913f;\n        }\n    }\n    console['log'](_0x2964b3['toFixed'](0xa));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4", "0.5000000000"], ["5", "0.6000000000"], ["1", "1.0000000000"]], "original": "function main(input){\n  var Gusu = 0;//偶数の個数\n  var Kisu = 0;//奇数の個数\n  var Out = 0;//出力\n  if(input > 0){\n  \tif(input % 2 == 0){\n      Gusu = input / 2;\n      Kisu = Gusu;\n      Out = Kisu/input;\n  \t}\n    else if(input % 2 == 1){\n      Gusu = parseInt(input / 2);\n      Kisu = Gusu+1;\n      Out = Kisu/input;\n  \t}\n  }\n  console.log(Out.toFixed(10));\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03001_1", "type": "JavaScript", "obfuscated": "function Main(_0x213bea) {\n    var _0x213bea = _0x213bea['split']('\\x0a');\n    var _0x3f4c3c = _0x213bea[0x0]['split']('\\x20')['map'](_0xcfa97b => parseInt(_0xcfa97b, 0xa))['slice'](0x0, 0x4);\n    var _0x57791d = _0x3f4c3c[0x0];\n    var _0xca1f65 = _0x3f4c3c[0x1];\n    var _0x35a7d0 = _0x3f4c3c[0x2];\n    var _0x26ecf2 = _0x3f4c3c[0x3];\n    if (_0x35a7d0 == 0x0 & _0x26ecf2 == 0x0 || _0x35a7d0 == _0x57791d && _0x26ecf2 == _0xca1f65) {\n        console['log']((_0x57791d * _0xca1f65 / 0x2)['toFixed'](0x6) + '\\x200');\n        return !![];\n    }\n    var _0x523365 = _0x35a7d0 * _0xca1f65;\n    var _0xe212f5 = (_0x57791d - _0x35a7d0) * _0xca1f65;\n    var _0x376d81 = _0x26ecf2 * _0x57791d;\n    var _0x2c8a2e = (_0xca1f65 - _0x26ecf2) * _0x57791d;\n    var _0x5561d0 = _0x523365;\n    var _0x48465d = _0x376d81;\n    var _0x1582b0 = 0x0;\n    if (_0x523365 > _0xe212f5) {\n        _0x5561d0 = _0xe212f5;\n    }\n    if (_0x376d81 > _0x2c8a2e) {\n        _0x48465d = _0x2c8a2e;\n    }\n    var _0x49fb9b = _0x5561d0;\n    if (_0x5561d0 < _0x48465d) {\n        _0x49fb9b = _0x48465d;\n    }\n    if (_0x5561d0 == _0x48465d) {\n        var _0x1582b0 = 0x1;\n    }\n    console['log'](_0x49fb9b['toFixed'](0x6) + '\\x20' + _0x1582b0);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 1 2", "3.000000 0"], ["2 2 1 1", "2.000000 1"]], "original": "function Main(input) {\n\n  var input = input.split(\"\\n\");\n  var arya = input[0].split(\" \").map(val => parseInt(val, 10)).slice(0, 4);\n  var w = arya[0];\n  var h = arya[1];\n  var x = arya[2];\n  var y = arya[3];\n\n  if(x == 0 & y == 0 || x == w && y == h){\n    console.log((w*h/2).toFixed(6) + \" 0\");\n    return true;\n  }\n\n\n\n  var a1 = x*h;\n  var a2 = (w - x)*h;\n  var b1 = y*w;\n  var b2 = (h - y)*w;\n  var a = a1;\n  var b = b1;\n  var counter = 0;\n\n  if(a1 > a2){\n    a = a2;\n  }\n\n  if(b1 > b2){\n    b = b2;\n  }\n\n  var reault = a;\n  if(a < b) {\n    reault = b;\n  }\n\n  if(a == b) {\n    var counter = 1;\n  }\n\n\n  console.log(reault.toFixed(6) + \" \" + counter);\n\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03174_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x4b4afc) {\n    _0x4b4afc = _0x4b4afc['trim']()['split'](/\\n/);\n    const _0x5276b7 = _0x4b4afc['shift']() - 0x0;\n    const _0x580236 = Math['pow'](0x2, _0x5276b7);\n    const _0x39fc38 = Math['pow'](0xa, 0x9) + 0x7;\n    _0x4b4afc = _0x4b4afc['map'](_0x2b281e => _0x2b281e['split'](/\\s+/)['map'](_0x47e3ab => _0x47e3ab === '1'));\n    const _0x79611a = _0x4b4afc;\n    const _0x2599aa = new Array(_0x5276b7)['fill'](0x0)['map']((_0x3169fa, _0x26f7e5) => new Object());\n    _0x2599aa[-0x1] = { 0x0: 0x1 };\n    const _0x401eaf = new Array(_0x5276b7)['fill'](0x0)['map']((_0x54bdc9, _0x2e9685) => 0x1 << _0x2e9685);\n    for (let _0x570a3c = -0x1; _0x570a3c < _0x5276b7 - 0x1; _0x570a3c++) {\n        Object['keys'](_0x2599aa[_0x570a3c])['forEach'](function (_0x5deb42) {\n            _0x5deb42 = _0x5deb42 - 0x0;\n            _0x2599aa[_0x570a3c][_0x5deb42] %= _0x39fc38;\n            for (let _0x47d9ad = 0x0; _0x47d9ad < _0x5276b7; _0x47d9ad++) {\n                if ((_0x5deb42 & _0x401eaf[_0x47d9ad]) > 0x0)\n                    continue;\n                if (_0x79611a[_0x570a3c + 0x1][_0x47d9ad])\n                    _0x2599aa[_0x570a3c + 0x1][_0x5deb42 + _0x401eaf[_0x47d9ad]] = (_0x2599aa[_0x570a3c + 0x1][_0x5deb42 + _0x401eaf[_0x47d9ad]] || 0x0) + _0x2599aa[_0x570a3c][_0x5deb42];\n            }\n        });\n    }\n    console['log']((_0x2599aa[_0x5276b7 - 0x1][_0x580236 - 0x1] || 0x0) % _0x39fc38);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\n0 1 1\n1 0 1\n1 1 1", "3"], ["4\n0 1 0 0\n0 0 0 1\n1 0 0 0\n0 0 1 0", "1"], ["1\n0", "0"], ["21\n0 0 0 0 0 0 0 1 1 0 1 1 1 1 0 0 0 1 0 0 1\n1 1 1 0 0 1 0 0 0 1 0 0 0 0 1 1 1 0 1 1 0\n0 0 1 1 1 1 0 1 1 0 0 1 0 0 1 1 0 0 0 1 1\n0 1 1 0 1 1 0 1 0 1 0 0 1 0 0 0 0 0 1 1 0\n1 1 0 0 1 0 1 0 0 1 1 1 1 0 0 0 0 0 0 0 0\n0 1 1 0 1 1 1 0 1 1 1 0 0 0 1 1 1 1 0 0 1\n0 1 0 0 0 1 0 1 0 0 0 1 1 1 0 0 1 1 0 1 0\n0 0 0 0 1 1 0 0 1 1 0 0 0 0 0 1 1 1 1 1 1\n0 0 1 0 0 1 0 0 1 0 1 1 0 0 1 0 1 0 1 1 1\n0 0 0 0 1 1 0 0 1 1 1 0 0 0 0 1 1 0 0 0 1\n0 1 1 0 1 1 0 0 1 1 0 0 0 1 1 1 1 0 1 1 0\n0 0 1 0 0 1 1 1 1 0 1 1 0 1 1 1 0 0 0 0 1\n0 1 1 0 0 1 1 1 1 0 0 0 1 0 1 1 0 1 0 1 1\n1 1 1 1 1 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1\n0 0 0 1 1 0 1 1 1 1 0 0 0 0 0 0 1 1 1 1 1\n1 0 1 1 0 1 0 1 0 0 1 0 0 1 1 0 1 0 1 1 0\n0 0 1 1 0 0 1 1 0 0 1 1 0 0 1 1 1 1 0 0 1\n0 0 0 1 0 0 1 1 0 1 0 1 0 1 1 0 0 1 1 0 1\n0 0 0 0 1 1 1 0 1 0 1 1 1 0 1 1 0 0 1 1 0\n1 1 0 1 1 0 0 1 1 0 1 1 0 1 1 1 1 1 0 1 0\n1 0 0 1 1 0 1 1 1 1 1 0 1 0 1 1 0 0 0 0 0", "102515160"]], "original": "'use strict';\nfunction Main(input){\n  input=input.trim().split(/\\n/);\n  const N=input.shift()-0;\n  const M=Math.pow(2,N);\n  const K=Math.pow(10,9)+7;\n  input=input.map(str=>str.split(/\\s+/).map(x=>x==='1'));\n  const Match=input;\n  \n  const dp=new Array(N).fill(0).map((x,j)=>new Object);\n  dp[-1]={0:1,};\n  \n  const p=new Array(N).fill(0).map((x,i)=>(1<<i));\n  \n  /*\n    男N-1から降順に売れてゆく場合を考える。\n    dp[i][j]で男0~iと「女i+1人の組み合わせのうちj番目」が残っているとき、\n    残りのマッチングの場合の数。\n  */\n  \n  for(let i=-1;i<N-1;i++){\n    Object.keys(dp[i]).forEach(function(J){\n      J=J-0;\n      dp[i][J]%=K;\n      for(let j=0;j<N;j++){\n        if((J&p[j])>0)continue;\n        if(Match[i+1][j])\n          dp[i+1][J+p[j]]=(dp[i+1][J+p[j]]||0)+dp[i][J];\n      }\n    });\n  }\n  console.log((dp[N-1][M-1]||0)%K);\n}\n\nMain(require('fs').readFileSync('/dev/stdin','utf8'));\n", "language": "JavaScript"}
{"filename": "p03336_1", "type": "JavaScript", "obfuscated": "function Main(_0x228404) {\n    _0x228404 = _0x228404['split']('\\x0a');\n    const _0x514d53 = _0x228404[0x0]['split']('\\x20');\n    const _0x29fe5c = parseInt(_0x514d53[0x0]);\n    const _0x358702 = parseInt(_0x514d53[0x1]);\n    const _0x34b206 = parseInt(_0x514d53[0x2]);\n    var _0x46993b = parseInt(_0x228404[0x1], 0x2);\n    var _0x3e9713 = parseInt(_0x228404[0x2], 0x2);\n    for (var _0x333683 = 0x0; _0x333683 < _0x34b206; _0x333683++) {\n        var _0x4b04b0 = _0x46993b & _0x3e9713;\n        _0x46993b = _0x46993b + _0x4b04b0;\n        _0x3e9713 = _0x3e9713 + _0x4b04b0;\n    }\n    const _0x3cd892 = toBinary(_0x46993b);\n    const _0x49d22e = toBinary(_0x3e9713);\n    console['log'](_0x3cd892);\n    console['log'](_0x49d22e);\n}\nfunction toBinary(_0x21cb4e) {\n    var _0x17c777 = _0x21cb4e, _0x564e10 = '';\n    while (_0x17c777 > 0x0) {\n        _0x564e10 = _0x17c777 % 0x2 + _0x564e10;\n        _0x17c777 = Math['floor'](_0x17c777 / 0x2);\n    }\n    return _0x564e10;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3 3\n11\n101", "10000\n10010"], ["5 8 3\n10101\n10101001", "100000\n10110100"], ["10 10 10\n1100110011\n1011001101", "10000100000010001000\n10000100000000100010"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\tinput = input.split(\"\\n\");\n  \tconst row1 = input[0].split(\" \");\n  \tconst N = parseInt(row1[0]);\n  const M = parseInt(row1[1]);\n  const K = parseInt(row1[2]);\n  var S = parseInt(input[1],2);\n  var T = parseInt(input[2],2);\n  for(var i=0; i < K; i++){\n    var sANDt = S & T;\n    S = S + sANDt;\n    T = T + sANDt;\n  }\n  const sBinary = toBinary(S);\n  const tBinary = toBinary(T);\n  console.log(sBinary);\n  console.log(tBinary);\n  \n }\n\nfunction toBinary( a ){ \n  var num = a, binary = ''; \n  while ( num > 0 ) { \n    binary = ( num % 2 ) + binary; \n    num = Math.floor( num / 2 ); \n  } \n  return binary; \n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03481_1", "type": "JavaScript", "obfuscated": "'use strict';\nconst input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x20')['map'](_0x55411d => _0x55411d * 0x1);\nlet ans = 0x0;\nlet max = input[0x1];\nlet div = input[0x0];\nlet tmpNum = div;\nwhile (tmpNum < max + 0x1) {\n    tmpNum *= 0x2;\n    ans++;\n}\nconsole['log'](ans);", "test_cases": [["3 20", "3"], ["25 100", "3"], ["314159265 358979323846264338", "31"]], "original": "'use strict';\n\nconst input = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split(' ').map(x => x*1);\nlet ans = 0;\nlet max = input[1];\nlet div = input[0];\nlet tmpNum = div;\nwhile(tmpNum < max+1){\n  tmpNum *= 2;\n  ans++;\t\n}\n\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p03551_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x24f4d3, _0x954ca5) {\n    return _0x954ca5 ? cin['slice'](cid, cid += _0x24f4d3) : cin['slice'](cid, cid += _0x24f4d3)['map'](_0x11c896 => +_0x11c896);\n}\nfunction nextm(_0x543b1a, _0x13cd32, _0x36dd75) {\n    var _0x2f357a = [], _0x3c3f34 = 0x0;\n    if (_0x36dd75)\n        for (; _0x3c3f34 < _0x543b1a; _0x3c3f34++)\n            _0x2f357a['push'](cin['slice'](cid, cid += _0x13cd32));\n    else\n        for (; _0x3c3f34 < _0x543b1a; _0x3c3f34++)\n            _0x2f357a['push'](cin['slice'](cid, cid += _0x13cd32)['map'](_0x44f493 => +_0x44f493));\n    return _0x2f357a;\n}\nfunction xArray(_0x2bee58) {\n    var _0x4d6c5b = arguments, _0x5e42ad = _0x4d6c5b['length'], _0x1acab6 = 'Array(a[' + --_0x5e42ad + ']).fill().map(x=>{return\\x20' + _0x2bee58 + ';})';\n    while (--_0x5e42ad)\n        _0x1acab6 = 'Array(a[' + _0x5e42ad + ']).fill().map(x=>' + _0x1acab6 + ')';\n    return eval(_0x1acab6);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x5039c1 = next();\n    var _0x259556 = next();\n    var _0x3336a8 = _0x259556 * 0x708 + _0x5039c1 * 0x64;\n    return _0x3336a8 << _0x259556;\n}", "test_cases": [["1 1", "3800"], ["10 2", "18400"], ["100 5", "608000"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var m = next();\n  var ans = m*1800 + n*100;\n  return ans << m;\n}", "language": "JavaScript"}
{"filename": "p03618_1", "type": "JavaScript", "obfuscated": "main();\nfunction main() {\n    var _0x33bad8 = require('readline');\n    var _0x7f4d5a = _0x33bad8['createInterface']({\n        'input': process['stdin'],\n        'output': process['stdout']\n    });\n    var _0x5e11c4 = [];\n    _0x7f4d5a['on']('line', function (_0x17249a) {\n        _0x5e11c4['push'](_0x17249a);\n    });\n    _0x7f4d5a['on']('close', function () {\n        console['log'](countSequencePattern(_0x5e11c4[0x0]));\n    });\n}\nfunction countSequencePattern(_0xdd0ca9) {\n    var _0x28242c = 0x1;\n    var _0x59d687 = _0xdd0ca9['split']('');\n    for (var _0x2c1439 = 0x0; _0x2c1439 < _0x59d687['length']; _0x2c1439++) {\n        for (var _0x295260 = _0x2c1439; _0x295260 < _0x59d687['length']; _0x295260++) {\n            if (_0x59d687[_0x2c1439] != _0x59d687[_0x295260])\n                _0x28242c++;\n        }\n    }\n    return _0x28242c;\n}", "test_cases": [["aatt", "5"], ["xxxxxxxxxx", "1"], ["abracadabra", "44"]], "original": "main();\n\nfunction main() {\n  var readline = require('readline');\n  var reader = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout\n  });\n  var lines = [];\n  reader.on('line', function (line) {\n    lines.push(line);\n  });\n  reader.on('close', function () {\n    console.log(countSequencePattern(lines[0]));\n  });\n\n}\n\nfunction countSequencePattern(str) {\n  var numberOfPattern = 1;\n  var characters = str.split(\"\");\n  for (var i = 0; i < characters.length; i++) {\n    for (var j = i; j < characters.length; j++) {\n      if (characters[i] != characters[j]) numberOfPattern++;\n    }\n  }\n  return numberOfPattern;\n}\n", "language": "JavaScript"}
{"filename": "p03786_1", "type": "JavaScript", "obfuscated": "console['log']((_0x2df54e => {\n    const [[_0x38892f], _0x3ee085] = _0x2df54e['trim']()['split']('\\x0a')['map'](_0x5325fe => _0x5325fe['split']('\\x20')['map'](_0x305bed => _0x305bed | 0x0));\n    _0x3ee085['sort']((_0x4e4ddb, _0x549f64) => _0x4e4ddb - _0x549f64);\n    let _0x11d8f8 = _0x3ee085[0x0], _0xfa1465 = 0x0;\n    for (let _0x146f72 = 0x1; _0x146f72 < _0x38892f; _0x146f72++) {\n        if (_0x11d8f8 * 0x2 >= _0x3ee085[_0x146f72])\n            _0xfa1465++;\n        else\n            _0xfa1465 = 0x0;\n        if (_0x11d8f8 + _0x3ee085[_0x146f72] >= 0x3b9aca00)\n            return '' + (_0xfa1465 + _0x38892f - _0x146f72);\n        _0x11d8f8 = _0x11d8f8 + _0x3ee085[_0x146f72];\n    }\n    return '' + (_0xfa1465 + 0x1);\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n3 1 4", "2"], ["5\n1 1 1 1 1", "5"], ["6\n40 1 30 2 7 20", "4"]], "original": "console.log((args=>{\n  const [[N],A] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0) );\n  A.sort((a,b)=>a-b);\n  let sum = A[0], n = 0;\n  for ( let i = 1; i < N; i++ ) {\n    if ( sum * 2 >= A[i] ) n++;\n    else n = 0;\n    if ( sum + A[i] >= 1e9 ) return `${n+N-i}`;\n    sum = sum + A[i];\n  }\n  return `${n+1}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03831_1", "type": "JavaScript", "obfuscated": "function main(_0x5c1753) {\n    var _0x57245a = _0x5c1753['split']('\\x0a');\n    var _0x434df8 = _0x57245a[0x0]['split']('\\x20');\n    var _0x30b0fe = parseInt(_0x434df8[0x0]);\n    var _0x3293bc = parseInt(_0x434df8[0x1]);\n    var _0x1b458f = parseInt(_0x434df8[0x2]);\n    var _0x2e5915 = _0x57245a[0x1]['split']('\\x20')['map'](_0x563aca => parseInt(_0x563aca));\n    var _0x4bef43 = 0x0;\n    for (var _0x3b711c = 0x0; _0x3b711c < _0x30b0fe - 0x1; _0x3b711c++) {\n        _0x4bef43 += Math['min'](_0x3293bc * (_0x2e5915[_0x3b711c + 0x1] - _0x2e5915[_0x3b711c]), _0x1b458f);\n    }\n    console['log'](_0x4bef43);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 2 5\n1 2 5 7", "11"], ["7 1 100\n40 43 45 105 108 115 124", "84"], ["7 1 2\n24 35 40 68 72 99 103", "12"]], "original": "function main(input) {\n    var lines = input.split('\\n');\n    var line0 = lines[0].split(' ');\n    var n = parseInt(line0[0]);\n    var a = parseInt(line0[1]);\n    var b = parseInt(line0[2]);\n    var x = lines[1].split(' ').map(t => parseInt(t));\n\n    var ans = 0;\n    for (var i = 0; i < n - 1; i++) {\n        ans += Math.min(a * (x[i + 1] - x[i]), b);\n    }\n    console.log(ans);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04021_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x2ab122, _0x6f4783) {\n    return _0x6f4783 ? cin['slice'](cid, cid += _0x2ab122) : cin['slice'](cid, cid += _0x2ab122)['map'](_0x4ce028 => +_0x4ce028);\n}\nfunction nextm(_0x283d6b, _0x2ed650, _0x4ed13f) {\n    var _0x3708d5 = [], _0x115b2d = 0x0;\n    if (_0x4ed13f)\n        for (; _0x115b2d < _0x283d6b; _0x115b2d++)\n            _0x3708d5['push'](cin['slice'](cid, cid += _0x2ed650));\n    else\n        for (; _0x115b2d < _0x283d6b; _0x115b2d++)\n            _0x3708d5['push'](cin['slice'](cid, cid += _0x2ed650)['map'](_0x5d93f6 => +_0x5d93f6));\n    return _0x3708d5;\n}\nfunction xArray(_0x5894e1) {\n    var _0x1e9e89 = arguments, _0x40ef5f = _0x1e9e89['length'], _0x5238b6 = 'Array(a[' + --_0x40ef5f + ']).fill().map(x=>{return\\x20' + _0x5894e1 + ';})';\n    while (--_0x40ef5f)\n        _0x5238b6 = 'Array(a[' + _0x40ef5f + ']).fill().map(x=>' + _0x5238b6 + ')';\n    return eval(_0x5238b6);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x1a0276 = next();\n    var _0x1406ff = [];\n    for (var _0x565f23 = 0x0; _0x565f23 < _0x1a0276; _0x565f23++) {\n        _0x1406ff['push']([\n            next(),\n            _0x565f23 & 0x1\n        ]);\n    }\n    _0x1406ff['sort']((_0x318dea, _0x554bdc) => _0x318dea[0x0] - _0x554bdc[0x0]);\n    var _0x5e8223 = 0x0;\n    for (var _0x565f23 = 0x0; _0x565f23 < _0x1a0276; _0x565f23 += 0x2)\n        if (_0x1406ff[_0x565f23][0x1] === 0x1)\n            _0x5e8223++;\n    return _0x5e8223;\n}", "test_cases": [["4\n2\n4\n3\n1", "1"], ["5\n10\n8\n5\n3\n2", "0"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var a = [];\n  for(var i = 0; i < n; i++){\n    a.push([next(),i&1]);\n  }\n  a.sort((a,b)=>a[0]-b[0]);\n  var ans = 0;\n  for(var i = 0; i < n; i+=2)if(a[i][1] === 1)ans++;\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p00061_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a0,0\\x0a');\nvar inputA = Arr[0x0]['split']('\\x0a');\nvar inputB = Arr[0x1]['split']('\\x0a')['map'](Number);\nvar obj = {};\nvar s = [];\ninputA['forEach'](function (_0x227f08) {\n    var _0x542b04 = _0x227f08['split'](',')['map'](Number);\n    obj[_0x542b04[0x0]] = _0x542b04[0x1];\n    s['push'](_0x542b04[0x1]);\n});\ns['sort'](function (_0x2b8bfe, _0x4b672b) {\n    return _0x4b672b - _0x2b8bfe;\n});\nvar s0 = s[0x0];\nvar t = [s0];\nfor (var i = 0x1; i < s['length']; i++) {\n    if (s0 == s[i])\n        continue;\n    s0 = s[i];\n    t['push'](s[i]);\n}\ninputB['forEach'](function (_0x39445f) {\n    console['log'](t['indexOf'](obj[_0x39445f]) + 0x1);\n});", "test_cases": [["1,20\n2,20\n3,30\n4,10\n5,10\n6,20\n0,0\n1\n2\n4\n5", "2\n2\n3\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n0,0\\n\");\nvar inputA=Arr[0].split(\"\\n\");\nvar inputB=Arr[1].split(\"\\n\").map(Number);\n\nvar obj={};\nvar s=[];\n\ninputA.forEach(function(v){\nvar arr=v.split(\",\").map(Number);\nobj[arr[0]]=arr[1];\ns.push(arr[1]);\n});\n\ns.sort(function(a,b){return b-a;});\n\nvar s0=s[0];\nvar t=[s0];\nfor(var i=1;i<s.length;i++){\nif(s0==s[i])continue;\ns0=s[i];\nt.push(s[i]);\n}\n\ninputB.forEach(function(v){\nconsole.log(t.indexOf(obj[v])+1);\n});", "language": "JavaScript"}
{"filename": "p00071_1", "type": "JavaScript", "obfuscated": "function bomb(_0x448196, _0x3bb846) {\n    var _0x3696a6 = [\n        -0x1,\n        0x1,\n        0x0,\n        0x0\n    ];\n    var _0x20b5eb = [\n        0x0,\n        0x0,\n        -0x1,\n        0x1\n    ];\n    for (var _0x80ecb9 = 0x0; _0x80ecb9 < 0x4; _0x80ecb9++) {\n        for (var _0x4d663b = 0x1; _0x4d663b <= 0x3; _0x4d663b++) {\n            var _0x461d80 = _0x448196 + _0x20b5eb[_0x80ecb9] * _0x4d663b;\n            var _0x35d776 = _0x3bb846 + _0x3696a6[_0x80ecb9] * _0x4d663b;\n            if (_0x461d80 < 0x0 || _0x461d80 >= 0x8 || _0x35d776 < 0x0 || _0x35d776 >= 0x8)\n                continue;\n            if (yx[_0x461d80][_0x35d776] == 0x1) {\n                yx[_0x461d80][_0x35d776] = 0x0;\n                bomb(_0x461d80, _0x35d776);\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar AL = Arr['shift']();\nfor (var i = 0x0; i < AL; i++) {\n    Arr['shift']();\n    var yx = [];\n    for (var j = 0x0; j < 0x8; j++) {\n        var line = Arr['shift']()['split']('')['map'](Number);\n        yx['push'](line);\n    }\n    var X = Arr['shift']() - 0x0 - 0x1;\n    var Y = Arr['shift']() - 0x0 - 0x1;\n    if (yx[Y][X] == 0x1) {\n        yx[Y][X] = 0x0;\n        bomb(Y, X);\n    }\n    console['log']('Data\\x20' + (i + 0x1) + ':');\n    for (var j = 0x0; j < 0x8; j++)\n        console['log'](yx[j]['join'](''));\n}", "test_cases": [["2\n\n00010010\n00000100\n10001001\n00100010\n01000000\n00001000\n10100010\n01010010\n2\n5\n\n00010010\n00000100\n10001001\n00100010\n01000000\n00001000\n10100010\n01010010\n2\n5", "Data 1:\n00000000\n00000100\n10001001\n00100000\n00000000\n00001000\n10100000\n00000000\nData 2:\n00000000\n00000100\n10001001\n00100000\n00000000\n00001000\n10100000\n00000000"]], "original": "function bomb(y,x){\n   var dx=[-1,1,0,0];\n   var dy=[0,0,-1,1];\n   for(var i=0;i<4;i++){\n      for(var j=1;j<=3;j++){\n         var yy=y+(dy[i]*j);\n         var xx=x+(dx[i]*j);\n         if(yy<0 || yy>=8 || xx<0 || xx>=8)continue;\n         if(yx[yy][xx]==1){yx[yy][xx]=0;bomb(yy,xx);}\n      }\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar AL=Arr.shift();\nfor(var i=0;i<AL;i++){\n   Arr.shift();\n   var yx=[];\n   for(var j=0;j<8;j++){\n      var line=Arr.shift().split(\"\").map(Number);\n      yx.push(line);\n   }\n   var X=(Arr.shift()-0)-1;\n   var Y=(Arr.shift()-0)-1;\n   if(yx[Y][X]==1){yx[Y][X]=0;bomb(Y,X);}\n   console.log(\"Data \"+(i+1)+\":\");\n   for(var j=0;j<8;j++)console.log(yx[j].join(\"\"));\n}", "language": "JavaScript"}
{"filename": "p00072_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var m = Arr['shift']() - 0x0;\n    var N = [];\n    for (var i = 0x0; i < n; i++) {\n        N[i] = [];\n        for (var j = 0x0; j < n; j++) {\n            N[i][j] = Infinity;\n            if (i == j)\n                N[i][j] = 0x0;\n        }\n    }\n    var arr = [];\n    for (var i = 0x0; i < m; i++) {\n        var abc = Arr['shift']()['split'](',')['map'](Number);\n        var a = abc[0x0];\n        var b = abc[0x1];\n        var c = abc[0x2] / 0x64;\n        N[a][b] = c;\n        N[b][a] = c;\n    }\n    var city = [0x0];\n    var cost = 0x0;\n    while (!![]) {\n        if (city['length'] == n)\n            break;\n        var min = Infinity;\n        var select = -0x1;\n        for (var i = 0x0; i < city['length']; i++) {\n            for (var j = 0x0; j < n; j++) {\n                if (city['indexOf'](j) != -0x1)\n                    continue;\n                if (N[city[i]][j] < min) {\n                    select = j;\n                    min = N[city[i]][j] - 0x1;\n                }\n            }\n        }\n        if (select != -0x1) {\n            cost += min;\n            city['push'](select);\n        }\n    }\n    console['log'](cost);\n}", "test_cases": [["4\n4\n0,1,1500\n0,2,2000\n1,2,600\n1,3,500\n0", "23"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\nvar n=Arr.shift()-0;\nif(n==0)break;\nvar m=Arr.shift()-0;\nvar N=[];\nfor(var i=0;i<n;i++){\n   N[i]=[];\n   for(var j=0;j<n;j++){\n      N[i][j]=Infinity;\n      if(i==j)N[i][j]=0;\n   }\n}\nvar arr=[];\nfor(var i=0;i<m;i++){\n   var abc=Arr.shift().split(\",\").map(Number);\n   var a=abc[0];\n   var b=abc[1];\n   var c=abc[2]/100;\n   N[a][b]=c;\n   N[b][a]=c;\n}\nvar city=[0];\nvar cost=0;\nwhile(true){\n   if(city.length==n)break;\n   var min=Infinity;\n   var select=-1;\n   for(var i=0;i<city.length;i++){\n      for(var j=0;j<n;j++){\n         if(city.indexOf(j)!=-1)continue;\n         if(N[city[i]][j]<min){\n            select=j;\n            min=N[city[i]][j]-1;\n         }\n      }\n   }\n   if(select!=-1){\n      cost+=min;\n      city.push(select);\n   }\n}\nconsole.log(cost);\n}", "language": "JavaScript"}
{"filename": "p00074_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nvar line;\nwhile (line = lines['shift']()) {\n    var time = line['split']('\\x20')['map'](function (_0x39d45d) {\n        return +_0x39d45d;\n    });\n    if (time[0x0] == -0x1 && time[0x1] == -0x1 && time[0x2] == -0x1)\n        break;\n    var hour = time[0x0];\n    var min = time[0x1] + hour * 0x3c;\n    var sec = time[0x2] + min * 0x3c;\n    var rem = 0x78 * 0x3c - sec;\n    var rem3 = rem * 0x3;\n    var remSec = rem % 0x3c;\n    var remSec3 = rem3 % 0x3c;\n    rem = Math['floor'](rem / 0x3c);\n    rem3 = Math['floor'](rem3 / 0x3c);\n    var remMin = rem % 0x3c;\n    var remMin3 = rem3 % 0x3c;\n    var remHour = Math['floor'](rem / 0x3c);\n    var remHour3 = Math['floor'](rem3 / 0x3c);\n    console['log'](('0' + remHour)['slice'](-0x2) + ':' + ('0' + remMin)['slice'](-0x2) + ':' + ('0' + remSec)['slice'](-0x2));\n    console['log'](('0' + remHour3)['slice'](-0x2) + ':' + ('0' + remMin3)['slice'](-0x2) + ':' + ('0' + remSec3)['slice'](-0x2));\n}", "test_cases": [["1 30 0\n-1 -1 -1", "00:30:00\n01:30:00"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar line;\nwhile (line = lines.shift()) {\n    var time = line.split(' ').map(function(n){return +n;});\n    if (time[0] == -1 && time[1] == -1 && time[2] == -1)\n        break;\n\n    var hour = time[0];\n    var min = time[1] + hour * 60;\n    var sec = time[2] + min * 60;\n\n    var rem = 120 * 60 - sec;\n    var rem3 = rem * 3;\n    var remSec = rem % 60;\n    var remSec3 = rem3 % 60;\n    rem = Math.floor(rem / 60);\n    rem3 = Math.floor(rem3 / 60);\n    var remMin = rem % 60;\n    var remMin3 = rem3 % 60;\n    var remHour = Math.floor(rem / 60);\n    var remHour3 = Math.floor(rem3 / 60);\n\n    console.log(('0' + remHour).slice(-2) + ':' + ('0' + remMin).slice(-2) + ':' + ('0' + remSec).slice(-2));\n    console.log(('0' + remHour3).slice(-2) + ':' + ('0' + remMin3).slice(-2) + ':' + ('0' + remSec3).slice(-2));\n}", "language": "JavaScript"}
{"filename": "p00075_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar lines = input['trim']()['split']('\\x0a');\nvar ret = lines['filter'](function (_0x630c32) {\n    var _0x2351bf = _0x630c32['split'](',');\n    var _0x192c52 = +_0x2351bf[0x1];\n    var _0xf4349d = +_0x2351bf[0x2];\n    return _0x192c52 / (_0xf4349d * _0xf4349d) >= 0x19;\n});\nret['forEach'](function (_0x5226b1) {\n    console['log'](_0x5226b1['split'](',')[0x0]);\n});", "test_cases": [["1001,50.0,1.60 \n1002,60.0,1.70 \n1003,70.0,1.80 \n1004,80.0,1.70 \n1005,90.0,1.60", "1004\n1005"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar lines = input.trim().split('\\n');\n \nvar ret = lines.filter(function(line) {\n    var items = line.split(',');\n    var w = +items[1];\n    var h = +items[2];\n\n    return w / (h * h) >= 25;\n});\n\nret.forEach(function(line) {\n    console.log(line.split(',')[0]);\n});", "language": "JavaScript"}
{"filename": "p00078_1", "type": "JavaScript", "obfuscated": "function bomb(_0x5b7cfc, _0x5c33e7) {\n    if (N == max)\n        return;\n    if (_0x5c33e7 < 0x0)\n        _0x5c33e7 = n - 0x1;\n    if (_0x5b7cfc < 0x0)\n        _0x5b7cfc = n - 0x1;\n    if (_0x5c33e7 >= n)\n        _0x5c33e7 = 0x0;\n    if (_0x5b7cfc >= n)\n        _0x5b7cfc = 0x0;\n    if (yx[_0x5b7cfc][_0x5c33e7] != -0x1) {\n        bomb(_0x5b7cfc + 0x1, _0x5c33e7 - 0x1);\n    } else {\n        yx[_0x5b7cfc][_0x5c33e7] = ('\\x20\\x20\\x20' + N)['slice'](-0x4);\n        N++;\n        bomb(_0x5b7cfc + 0x1, _0x5c33e7 + 0x1);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var n = Arr[i];\n    var max = n * n + 0x1;\n    if (n == 0x0)\n        break;\n    var yx = [];\n    for (var j = 0x0; j < n; j++) {\n        yx[j] = [];\n        for (var k = 0x0; k < n; k++) {\n            yx[j][k] = -0x1;\n        }\n    }\n    var N = 0x1;\n    bomb(Math['floor'](n / 0x2) + 0x1, Math['floor'](n / 0x2));\n    console['log'](yx['join']('\\x0a')['replace'](/\\,/g, ''));\n}", "test_cases": [["3\n5\n0", "4   9   2\n   3   5   7\n   8   1   6\n  11  24   7  20   3\n   4  12  25   8  16\n  17   5  13  21   9\n  10  18   1  14  22\n  23   6  19   2  15"]], "original": "function bomb(y,x){\n   if(N==max)return;\n   if(x<0)x=n-1;\n   if(y<0)y=n-1;\n   if(x>=n)x=0;\n   if(y>=n)y=0;\n   if(yx[y][x]!=-1){bomb(y+1,x-1);}\n   else{yx[y][x]=(\"   \"+N).slice(-4);N++;bomb(y+1,x+1);}\n}\n \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var n=Arr[i];\n   var max=n*n+1;\n   if(n==0)break;\n   var yx=[];\n   for(var j=0;j<n;j++){\n      yx[j]=[];\n      for(var k=0;k<n;k++){\n         yx[j][k]=-1;\n      }\n   }\n   var N=1;\n   bomb(Math.floor(n/2)+1,Math.floor(n/2));\n   console.log(yx.join(\"\\n\").replace(/\\,/g,\"\"));\n}", "language": "JavaScript"}
{"filename": "p00121_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar dy = [\n    -0x1,\n    0x0,\n    0x0,\n    0x1\n];\nvar dx = [\n    0x0,\n    -0x1,\n    0x1,\n    0x0\n];\nArr['forEach'](function (_0x5e610c, _0x55eb8c) {\n    var _0x154c5a = _0x5e610c['split']('\\x20')['map'](Number);\n    var _0x3e511f = {};\n    var _0x49c860 = [[\n            _0x154c5a,\n            0x0\n        ]];\n    while (_0x49c860['length'] > 0x0) {\n        var _0x4478f3 = _0x49c860['shift']();\n        var _0x1d9c48 = _0x4478f3[0x0];\n        var _0x140104 = _0x4478f3[0x1];\n        if (_0x1d9c48['join']('') == '01234567') {\n            console['log'](_0x140104);\n            break;\n        }\n        var _0x359675 = _0x1d9c48['indexOf'](0x0);\n        var _0x58038f = Math['floor'](_0x359675 / 0x4);\n        var _0x2c9080 = _0x359675 % 0x4;\n        var _0x5cb6f2 = [\n            _0x1d9c48['slice'](0x0, 0x4),\n            _0x1d9c48['slice'](0x4, 0x8)\n        ];\n        for (var _0x32efc4 = 0x0; _0x32efc4 < 0x4; _0x32efc4++) {\n            var _0x1b787b = _0x58038f + dy[_0x32efc4];\n            var _0x1d0c57 = _0x2c9080 + dx[_0x32efc4];\n            if (_0x1b787b < 0x0 || _0x1d0c57 < 0x0 || _0x1b787b >= 0x2 || _0x1d0c57 >= 0x4)\n                continue;\n            _0x5cb6f2[_0x58038f][_0x2c9080] = _0x5cb6f2[_0x1b787b][_0x1d0c57];\n            var _0x5a9f95 = _0x5cb6f2[_0x1b787b][_0x1d0c57];\n            _0x5cb6f2[_0x1b787b][_0x1d0c57] = 0x0;\n            var _0xa8a0ed = _0x5cb6f2[0x0]['concat'](_0x5cb6f2[0x1]);\n            var _0x13486c = _0xa8a0ed['join']('');\n            if (_0x3e511f['hasOwnProperty'](_0x13486c) == ![]) {\n                _0x3e511f[_0x13486c] = !![];\n                _0x49c860['push']([\n                    _0xa8a0ed,\n                    _0x140104 + 0x1\n                ]);\n            }\n            _0x5cb6f2[_0x1b787b][_0x1d0c57] = _0x5a9f95;\n            _0x5cb6f2[_0x58038f][_0x2c9080] = 0x0;\n        }\n    }\n});", "test_cases": [["0 1 2 3 4 5 6 7\n1 0 2 3 4 5 6 7\n7 6 5 4 3 2 1 0", "0\n1\n28"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dy=[-1,0,0,1];\nvar dx=[0,-1,1,0];\nArr.forEach(function(v,I){\n   var V=v.split(\" \").map(Number);\n   var obj={};\n   var P=[[V,0]];\n   while(P.length>0){\n      var A=P.shift();\n      var arr=A[0];\n      var cnt=A[1];\n      if(arr.join(\"\")==\"01234567\"){console.log(cnt);break;}\n      var index=arr.indexOf(0);\n      var y=Math.floor(index/4);\n      var x=index%4;\n      var yx=[arr.slice(0,4),arr.slice(4,8)];\n      for(var i=0;i<4;i++){\n         var yy=y+dy[i];\n         var xx=x+dx[i];\n         if(yy<0 || xx<0 || yy>=2 || xx>=4)continue;\n         yx[y][x]=yx[yy][xx];\n         var card=yx[yy][xx];\n         yx[yy][xx]=0;\n         var YX=yx[0].concat(yx[1]);\n         var str=YX.join(\"\");\n         if(obj.hasOwnProperty(str)==false){\n               obj[str]=true;\n               P.push([YX,cnt+1]);\n         }\n         yx[yy][xx]=card;\n         yx[y][x]=0;\n      }\n   }\n});", "language": "JavaScript"}
{"filename": "p00130_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar L = Arr['shift']();\nfor (var i = 0x0; i < L; i++) {\n    var str = Arr[i];\n    str = str['replace'](/\\-\\>/g, 'A');\n    str = str['replace'](/\\<\\-/g, 'Z');\n    var m = str['split']('');\n    var arr = [m[0x0]];\n    var n = 0x1;\n    m['forEach'](function (_0x57034e) {\n        if (_0x57034e == 'A')\n            n++;\n        else if (_0x57034e == 'Z')\n            n--;\n        else {\n            if (n == 0x0) {\n                arr['unshift'](_0x57034e);\n                n = 0x1;\n            }\n            if (n > arr['length'])\n                arr['push'](_0x57034e);\n        }\n    });\n    console['log'](arr['join'](''));\n}", "test_cases": [["4\na->e->c->b->d\nb<-c<-a<-d<-e\nb->a->c<-a->c->d<-c<-a<-b->a->c->d->e<-d\na->e<-a<-d->a->e<-a<-d<-c->d->a<-d<-c<-b->c->d<-c", "aecbd\nedacb\nbacde\nbcdae"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar L=Arr.shift();\nfor(var i=0;i<L;i++){\n   var str=Arr[i];\n   str=str.replace(/\\-\\>/g,\"A\");\n   str=str.replace(/\\<\\-/g,\"Z\");\n   var m=str.split(\"\");\n   var arr=[m[0]];\n   var n=1;\n   m.forEach(function(v){\n      if(v==\"A\")n++;\n      else if(v==\"Z\")n--;\n      else {\n         if(n==0){arr.unshift(v);n=1;}\n         if(n>arr.length)arr.push(v);\n      }\n   });\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript"}
{"filename": "p00148_1", "type": "JavaScript", "obfuscated": "let input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlet Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; ++i) {\n    let n = Arr[i];\n    var ans = n % 0x27;\n    if (ans == 0x0)\n        ans = 0x27;\n    if (ans < 0xa) {\n        ans = '0' + ans;\n    }\n    console['log']('3C' + ans);\n}", "test_cases": [["50\n5576\n5577\n5578", "3C11\n3C38\n3C39\n3C01"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'utf8');\nlet Arr = (input.trim()).split(\"\\n\");\n\nfor(var i = 0;i < Arr.length;++i){\n    let n = Arr[i];\n    var ans = n % 39;\n    if(ans == 0) ans = 39\n    if(ans < 10){\n        ans = \"0\" + ans\n    }\n    console.log(\"3C\"+ ans);\n}\n\n", "language": "JavaScript"}
{"filename": "p00149_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar a = [\n    0x0,\n    0x0\n];\nvar b = [\n    0x0,\n    0x0\n];\nvar c = [\n    0x0,\n    0x0\n];\nvar d = [\n    0x0,\n    0x0\n];\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    for (var j = 0x0; j < 0x2; j++) {\n        if (arr[j] >= 1.1)\n            a[j]++;\n        else if (arr[j] >= 0.6)\n            b[j]++;\n        else if (arr[j] >= 0.2)\n            c[j]++;\n        else\n            d[j]++;\n    }\n}\nconsole['log'](a[0x0] + '\\x20' + a[0x1]);\nconsole['log'](b[0x0] + '\\x20' + b[0x1]);\nconsole['log'](c[0x0] + '\\x20' + c[0x1]);\nconsole['log'](d[0x0] + '\\x20' + d[0x1]);", "test_cases": [["1.0 1.2\n0.8 1.5\n1.2 0.7\n2.0 2.0", "2 3\n2 1\n0 0\n0 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar a=[0,0];\nvar b=[0,0];\nvar c=[0,0];\nvar d=[0,0];\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   for(var j=0;j<2;j++){\n      if(arr[j]>=1.1)a[j]++;\n      else if(arr[j]>=0.6)b[j]++;\n      else if(arr[j]>=0.2)c[j]++;\n      else d[j]++;\n   }\n}\nconsole.log(a[0]+\" \"+a[1]);\nconsole.log(b[0]+\" \"+b[1]);\nconsole.log(c[0]+\" \"+c[1]);\nconsole.log(d[0]+\" \"+d[1]);", "language": "JavaScript"}
{"filename": "p00159_1", "type": "JavaScript", "obfuscated": "let input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nlet Arr = input['trim']()['split']('\\x0a');\nlet bmis = new Map();\nwhile (0x1) {\n    let n = Arr[0x0];\n    if (n == 0x0)\n        break;\n    Arr['shift']();\n    for (var i = 0x0; i < n; ++i) {\n        var nums = Arr[0x0]['split']('\\x20')['map'](Number);\n        var m = nums[0x1] / 0x64;\n        var bmi = nums[0x2] / (m * m);\n        var dif = Math['abs'](0x16 - bmi);\n        bmis['set'](nums[0x0]['toString'](), dif);\n        Arr['shift']();\n    }\n    let sorted = new Map([...bmis['entries']()]['sort']((_0x374a86, _0x1cb985) => _0x374a86[0x1] - _0x1cb985[0x1]));\n    console['log'](sorted['keys']()['next']()['value']);\n}", "test_cases": [["6\n1 165 66\n2 178 60\n3 180 72\n4 160 65\n5 185 62\n6 182 62\n3\n3 160 65\n2 180 70\n1 170 75\n0", "3\n2"]], "original": "let input = require('fs').readFileSync('/dev/stdin', 'utf8');\nlet Arr = (input.trim()).split(\"\\n\");\nlet bmis = new Map()\n\nwhile(1){\n    let n = Arr[0];\n    if(n == 0) break;\n    Arr.shift();\n    \n    for(var i = 0;i < n;++i){\n        var nums = Arr[0].split(\" \").map(Number);\n        var m = nums[1] / 100\n        var bmi = nums[2] / (m * m);\n        var dif = Math.abs(22 - bmi)\n        bmis.set(nums[0].toString(),dif);\n        Arr.shift();\n    }\n    let sorted = new Map([...bmis.entries()].sort((a, b) => a[1] - b[1]));\n    console.log(sorted.keys().next().value);\n}\n", "language": "JavaScript"}
{"filename": "p00160_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var sum = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        var L = arr[0x0] + arr[0x1] + arr[0x2];\n        var W = arr[0x3];\n        var x;\n        if (L > 0xa0)\n            x = 0x0;\n        if (L <= 0xa0)\n            x = 0x640;\n        if (L <= 0x8c)\n            x = 0x578;\n        if (L <= 0x78)\n            x = 0x4b0;\n        if (L <= 0x64)\n            x = 0x3e8;\n        if (L <= 0x50)\n            x = 0x320;\n        if (L <= 0x3c)\n            x = 0x258;\n        var y;\n        if (W > 0x19)\n            y = 0x0;\n        if (W <= 0x19)\n            y = 0x640;\n        if (W <= 0x14)\n            y = 0x578;\n        if (W <= 0xf)\n            y = 0x4b0;\n        if (W <= 0xa)\n            y = 0x3e8;\n        if (W <= 0x5)\n            y = 0x320;\n        if (W <= 0x2)\n            y = 0x258;\n        if (x != 0x0 && y != 0x0)\n            sum += Math['max'](x, y);\n    }\n    console['log'](sum);\n}", "test_cases": [["2\n50 25 5 5\n80 60 10 30\n3\n10 15 25 24\n5 8 12 5\n30 30 30 18\n0", "800\n3800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var L=arr[0]+arr[1]+arr[2];\n      var W=arr[3];\n      var x;\n      if(L>160)x=0;\n      if(L<=160)x=1600;\n      if(L<=140)x=1400;\n      if(L<=120)x=1200;\n      if(L<=100)x=1000;\n      if(L<=80)x=800;\n      if(L<=60)x=600;\n      var y;\n      if(W>25)y=0;\n      if(W<=25)y=1600;\n      if(W<=20)y=1400;\n      if(W<=15)y=1200;\n      if(W<=10)y=1000;\n      if(W<=5)y=800;\n      if(W<=2)y=600;\n      if(x!=0 && y!=0)sum+=Math.max(x,y);\n   }\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00169_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (arr[0x0] == 0x0)\n        break;\n    var sum = 0x0;\n    arr = arr['filter'](function (_0x458e85) {\n        if (_0x458e85 > 0xa)\n            _0x458e85 = 0xa;\n        sum += _0x458e85;\n        return _0x458e85 == 0x1;\n    });\n    var i = arr['length'];\n    while (i != 0x0) {\n        if (sum + 0xa <= 0x15)\n            sum += 0xa;\n        i--;\n    }\n    console['log'](sum > 0x15 ? 0x0 : sum);\n}", "test_cases": [["1\n7 7 7\n7 7 8\n12 1\n10 1 1\n0", "11\n21\n0\n21\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0)break;\n   var sum=0;\n   arr=arr.filter(function(v){\n      if(v>10)v=10;\n      sum+=v;\n      return v==1;\n   });\n   var i=arr.length;\n   while(i!=0){\n      if(sum+10<=21)sum+=10;\n      i--;\n   }\n   console.log((sum>21)?0:sum);\n}", "language": "JavaScript"}
{"filename": "p00183_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var x = Arr['shift']()['split']('');\n    if (x[0x0] == '0')\n        break;\n    var y = Arr['shift']()['split']('');\n    var z = Arr['shift']()['split']('');\n    var ans = 'NA';\n    for (var i = 0x0; i < 0x2; i++) {\n        var s = [\n            'b',\n            'w'\n        ][i];\n        if (x[0x0] + x[0x1] + x[0x2] == s + s + s)\n            ans = s;\n        if (y[0x0] + y[0x1] + y[0x2] == s + s + s)\n            ans = s;\n        if (z[0x0] + z[0x1] + z[0x2] == s + s + s)\n            ans = s;\n        if (x[0x0] + y[0x0] + z[0x0] == s + s + s)\n            ans = s;\n        if (x[0x1] + y[0x1] + z[0x1] == s + s + s)\n            ans = s;\n        if (x[0x2] + y[0x2] + z[0x2] == s + s + s)\n            ans = s;\n        if (x[0x0] + y[0x1] + z[0x2] == s + s + s)\n            ans = s;\n        if (x[0x2] + y[0x1] + z[0x0] == s + s + s)\n            ans = s;\n    }\n    console['log'](ans);\n}", "test_cases": [["bbw\nwbw\n+b+\nbwb\nwbw\nwbw\n0", "b\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var x=Arr.shift().split(\"\");\n   if(x[0]==\"0\")break;\n   var y=Arr.shift().split(\"\");\n   var z=Arr.shift().split(\"\");\n   var ans=\"NA\";\n   for(var i=0;i<2;i++){\n      var s=([\"b\",\"w\"])[i];\n      if(x[0]+x[1]+x[2]==s+s+s)ans=s;\n      if(y[0]+y[1]+y[2]==s+s+s)ans=s;\n      if(z[0]+z[1]+z[2]==s+s+s)ans=s;\n      if(x[0]+y[0]+z[0]==s+s+s)ans=s;\n      if(x[1]+y[1]+z[1]==s+s+s)ans=s;\n      if(x[2]+y[2]+z[2]==s+s+s)ans=s;\n      if(x[0]+y[1]+z[2]==s+s+s)ans=s;\n      if(x[2]+y[1]+z[0]==s+s+s)ans=s;\n   }\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00195_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar abc = [];\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (abc['length'] == 0x0 && Arr[i] == '0\\x200')\n        break;\n    if (abc['length'] == 0x4) {\n        var max = abc['reduce'](function (_0x14b8b7, _0x530a03) {\n            return Math['max'](_0x14b8b7, _0x530a03);\n        });\n        var ABC = 'ABCD'['split']('');\n        var str = ABC[abc['indexOf'](max)];\n        console['log'](str + '\\x20' + max);\n        abc = [];\n    } else {\n        var arr = Arr[i]['split']('\\x20')['map'](Number);\n        abc['push'](arr[0x0] + arr[0x1]);\n    }\n}", "test_cases": [["1593 4311\n4321 2155\n1256 6421\n5310 1455\n2152 5421\n1549 3386\n4528 3719\n1234 4321\n3330 3109\n2739 2199\n0 0", "C 7677\nB 8247"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar abc=[];\nfor(var i=0;i<Arr.length;i++){\nif(abc.length==0 && Arr[i]==\"0 0\")break;\nif(abc.length==4){\n   var max=abc.reduce(function(a,b){return Math.max(a,b);});\n   var ABC=\"ABCD\".split(\"\");\n   var str=ABC[abc.indexOf(max)];\n   console.log(str+\" \"+max);\n   abc=[];\n}else{\n   var arr=Arr[i].split(\" \").map(Number);\n   abc.push(arr[0]+arr[1]);\n}\n}", "language": "JavaScript"}
{"filename": "p00197_1", "type": "JavaScript", "obfuscated": "(function () {\n    var _0x28ef79 = '', _0xa84046 = 0x0;\n    function _0x479124() {\n        var _0xe6ca95, _0x50b90b, _0x455b74, _0x3a44ee, _0x48d38f, _0x5ed71e;\n        _0xe6ca95 = _0x28ef79['length'];\n        for (i = 0x0; i < _0xe6ca95; i += 0x1) {\n            _0x50b90b = _0x28ef79[i]['split']('\\x20');\n            _0x455b74 = parseInt(_0x50b90b[0x0], 0xa);\n            _0x3a44ee = parseInt(_0x50b90b[0x1], 0xa);\n            if (_0x455b74 === 0x0 && _0x3a44ee === 0x0) {\n                break;\n            } else if (_0x455b74 < _0x3a44ee) {\n                _0x48d38f = _0x455b74;\n                _0x455b74 = _0x3a44ee;\n                _0x3a44ee = _0x48d38f;\n            }\n            _0x5ed71e = _0x310a19(_0x455b74, _0x3a44ee);\n            _0x40bfc6(_0x5ed71e, _0xa84046);\n            _0xa84046 = 0x0;\n        }\n    }\n    function _0x310a19(_0x5dd243, _0x9bd4ac) {\n        _0xa84046 += 0x1;\n        return _0x5dd243 % _0x9bd4ac === 0x0 ? _0x9bd4ac : _0x310a19(_0x9bd4ac, _0x5dd243 % _0x9bd4ac);\n    }\n    function _0x40bfc6(_0x2fe0c7, _0x12e76a) {\n        console['log'](_0x2fe0c7 + '\\x20' + _0x12e76a);\n    }\n    process['stdin']['resume']();\n    process['stdin']['setEncoding']('utf8');\n    process['stdin']['on']('data', function (_0x178792) {\n        _0x28ef79 += _0x178792;\n    });\n    process['stdin']['on']('end', function () {\n        _0x28ef79 = _0x28ef79['split']('\\x0a');\n        _0x479124();\n    });\n}());", "test_cases": [["1071 1029\n5 5\n0 0", "21 3\n5 1"]], "original": "(function () {\n  var input = '',\n      cnt = 0;\n\n  function main () {\n    var inputLen, nums, x, y, temp, ans;\n\n    inputLen = input.length;\n    \n    for (i = 0; i < inputLen; i += 1) {\n      nums = input[i].split(' ');\n      x = parseInt(nums[0], 10);\n      y = parseInt(nums[1], 10);\n\n      if (x === 0 && y === 0) {\n        break;\n      } else if (x < y) {\n        temp = x;\n        x = y;\n        y = temp;\n      }\n\n      ans = gcd(x, y);\n\n      showResult(ans, cnt);\n      cnt = 0;\n    }\n  }\n\n  function gcd (x, y) {\n    cnt += 1;\n    return x % y === 0 ? y : gcd(y, x % y);\n  }\n\n  function showResult(result, cnt) {\n    console.log(result + ' ' + cnt);\n  }\n\n  process.stdin.resume();\n  process.stdin.setEncoding('utf8');\n  process.stdin.on('data', function (chunk) {\n    input += chunk;\n  });\n\n  process.stdin.on('end', function () {\n    input = input.split('\\n');\n    main();\n  });\n}());", "language": "JavaScript"}
{"filename": "p00216_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (Arr[i] == -0x1)\n        break;\n    var a = Arr[i];\n    var sum = 0x47e;\n    if (a > 0xa && a <= 0x14)\n        sum = 0x47e + 0x7d * (a - 0xa);\n    else if (a > 0x14 && a <= 0x1e)\n        sum = 0x47e + 0x7d * 0xa + 0x8c * (a - 0x14);\n    else if (a > 0x1e)\n        sum = 0x47e + 0x7d * 0xa + 0x8c * 0xa + 0xa0 * (a - 0x1e);\n    console['log'](0x10b8 - sum);\n}", "test_cases": [["29\n40\n0\n-1", "620\n-1120\n3130"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==-1)break;\n   var a=Arr[i];\n   var sum=1150;\n   if(a>10 && a<=20)sum=1150+125*(a-10);\n   else if(a>20 && a<=30)sum=1150+125*10+140*(a-20);\n   else if(a>30)sum=1150+125*10+140*10+160*(a-30);\n   console.log(4280-sum);\n}", "language": "JavaScript"}
{"filename": "p00218_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar input = '';\nprocess['stdin']['on']('data', function (_0x30fefc) {\n    input += _0x30fefc;\n});\nprocess['stdin']['on']('end', function () {\n    var _0x305d64 = input['split']('\\x0a');\n    var _0xa2c91e = 0x0;\n    while (!![]) {\n        var _0x29c911 = Number(_0x305d64[_0xa2c91e++]);\n        if (_0x29c911 === 0x0) {\n            break;\n        }\n        for (var _0x187ccd = 0x0; _0x187ccd < _0x29c911; _0x187ccd++) {\n            var _0x34438c = _0x305d64[_0xa2c91e++]['split']('\\x20')['map'](Number);\n            var _0x273b80 = _0x34438c[0x0];\n            var _0x21578c = _0x34438c[0x1];\n            var _0x41805c = _0x34438c[0x2];\n            var _0x2ef32f = 'C';\n            if (_0x273b80 === 0x64 || _0x21578c === 0x64 || _0x41805c === 0x64) {\n                _0x2ef32f = 'A';\n            } else if ((_0x273b80 + _0x21578c) / 0x2 >= 0x5a) {\n                _0x2ef32f = 'A';\n            } else {\n                var _0x4a1093 = (_0x273b80 + _0x21578c + _0x41805c) / 0x3;\n                if (_0x4a1093 >= 0x50) {\n                    _0x2ef32f = 'A';\n                } else if (_0x4a1093 >= 0x46) {\n                    _0x2ef32f = 'B';\n                } else if (_0x4a1093 >= 0x32 && (_0x273b80 >= 0x50 || _0x21578c >= 0x50)) {\n                    _0x2ef32f = 'B';\n                }\n            }\n            console['log'](_0x2ef32f);\n        }\n    }\n});", "test_cases": [["4\n100 70 20\n98 86 55\n80 34 36\n65 79 65\n2\n99 81 20\n66 72 90\n0", "A\nA\nB\nC\nA\nB"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar input = '';\nprocess.stdin.on('data', function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function () {\n  var lines = input.split('\\n');\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    for (var i = 0; i < n; i++) {\n      var values = lines[l++].split(' ').map(Number);\n      var pm = values[0];\n      var pe = values[1];\n      var pj = values[2];\n      var ans = 'C';\n      if (pm === 100 || pe === 100 || pj === 100) {\n        ans = 'A';\n      } else if ((pm + pe) / 2 >= 90) {\n        ans = 'A';\n      } else {\n        var average = (pm + pe + pj) / 3;\n        if (average >= 80) {\n          ans = 'A';\n        } else if (average >= 70) {\n          ans = 'B';\n        } else if (average >= 50 && (pm >= 80 || pe >= 80)) {\n          ans = 'B';\n        }\n      }\n      console.log(ans);\n    }\n  }\n});", "language": "JavaScript"}
{"filename": "p00219_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nvar input = '';\nprocess['stdin']['on']('data', function (_0x2a0f2b) {\n    input += _0x2a0f2b;\n});\nprocess['stdin']['on']('end', function () {\n    var _0x45133c = input['split']('\\x0a');\n    var _0x2fadb0 = 0x0;\n    while (!![]) {\n        var _0x2af221 = Number(_0x45133c[_0x2fadb0++]);\n        if (_0x2af221 === 0x0) {\n            break;\n        }\n        var _0x52d128 = [\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0\n        ];\n        for (var _0x2dc77e = 0x0; _0x2dc77e < _0x2af221; _0x2dc77e++) {\n            _0x52d128[Number(_0x45133c[_0x2fadb0++])]++;\n        }\n        for (var _0x2dc77e = 0x0; _0x2dc77e < _0x52d128['length']; _0x2dc77e++) {\n            var _0x277e4e = _0x52d128[_0x2dc77e] === 0x0 ? '-' : '';\n            for (var _0x282b09 = 0x0; _0x282b09 < _0x52d128[_0x2dc77e]; _0x282b09++) {\n                _0x277e4e += '*';\n            }\n            console['log'](_0x277e4e);\n        }\n    }\n});", "test_cases": [["15\n2\n6\n7\n0\n1\n9\n8\n7\n3\n8\n9\n4\n8\n2\n2\n3\n9\n1\n5\n0", "*\n*\n***\n*\n*\n-\n*\n**\n***\n**\n-\n*\n-\n-\n-\n*\n-\n-\n-\n*"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nvar input = '';\nprocess.stdin.on('data', function (chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function () {\n  var lines = input.split('\\n');\n  var l = 0;\n  while (true) {\n    var n = Number(lines[l++]);\n    if (n === 0) {\n      break;\n    }\n    var sales = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (var i = 0; i < n; i++) {\n      sales[Number(lines[l++])]++;\n    }\n    for (var i = 0; i < sales.length; i++) {\n      var bar = (sales[i] === 0) ? '-' : '';\n      for (var j = 0; j < sales[i]; j++) {\n        bar += '*';\n      }\n      console.log(bar);\n    }\n  }\n});", "language": "JavaScript"}
{"filename": "p00222_1", "type": "JavaScript", "obfuscated": "function prime(_0x44c91d) {\n    var _0x576887 = [];\n    for (var _0x52418c = 0x0; _0x52418c <= _0x44c91d; _0x52418c++)\n        _0x576887[_0x52418c] = _0x52418c;\n    _0x576887[0x0] = ![];\n    _0x576887[0x1] = ![];\n    var _0x4fe6b5 = Math['floor'](Math['sqrt'](_0x44c91d));\n    for (var _0x52418c = 0x2; _0x52418c <= _0x4fe6b5; _0x52418c++) {\n        if (_0x576887[_0x52418c] == ![])\n            continue;\n        for (var _0x45d3ac = _0x52418c + _0x52418c; _0x45d3ac <= _0x44c91d; _0x45d3ac += _0x52418c) {\n            _0x576887[_0x45d3ac] = ![];\n        }\n    }\n    var _0x4e1bf8 = [];\n    for (var _0x52418c = 0x0; _0x52418c <= _0x44c91d; _0x52418c++) {\n        if (_0x576887[_0x52418c] !== ![])\n            _0x4e1bf8['push'](_0x576887[_0x52418c]);\n    }\n    return _0x4e1bf8;\n}\nvar p = prime(0x98967f);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var a = Arr[i];\n    if (a == 0x0)\n        break;\n    var quad = '';\n    for (var j = 0x5; j < p['length']; j++) {\n        if (p[j] > a)\n            break;\n        var x = p[j] - 0x8;\n        if (x == p[j - 0x3] && x + 0x2 == p[j - 0x2] && x + 0x6 == p[j - 0x1])\n            quad = p[j];\n    }\n    console['log'](quad);\n}", "test_cases": [["13\n14\n15\n16\n17\n18\n19\n20\n10000\n0", "13\n13\n13\n13\n13\n13\n19\n19\n9439"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(9999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   var quad=\"\";\n   for(var j=5;j<p.length;j++){\n   if(p[j]>a)break;\n   var x=p[j]-8;\n   if(x==p[j-3] && x+2==p[j-2] && x+6==p[j-1])quad=p[j];\n   }\n   console.log(quad);\n}", "language": "JavaScript"}
{"filename": "p00238_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var t = Arr['shift']() - 0x0;\n    if (t == 0x0)\n        break;\n    var n = Arr['shift']() - 0x0;\n    var sum = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        sum += arr[0x1] - arr[0x0];\n    }\n    console['log'](t <= sum ? 'OK' : t - sum);\n}", "test_cases": [["10\n3\n6 11\n12 15\n18 22\n14\n2\n6 11\n13 20\n0", "OK\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var t=Arr.shift()-0;\n   if(t==0)break;\n   var n=Arr.shift()-0;\n   var sum=0;\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      sum+=arr[1]-arr[0];\n   }\n   console.log((t<=sum)?\"OK\":t-sum);\n}", "language": "JavaScript"}
{"filename": "p00239_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    var arr = [];\n    for (var i = 0x0; i < N; i++) {\n        var ipqr = Arr['shift']()['split']('\\x20')['map'](Number);\n        arr['push'](ipqr);\n    }\n    var PQRC = Arr['shift']()['split']('\\x20')['map'](Number);\n    var result = [];\n    arr['forEach'](function (_0x17814a) {\n        var _0x5d7ffb = 0x0;\n        if (PQRC[0x0] < _0x17814a[0x1])\n            _0x5d7ffb++;\n        if (PQRC[0x1] < _0x17814a[0x2])\n            _0x5d7ffb++;\n        if (PQRC[0x2] < _0x17814a[0x3])\n            _0x5d7ffb++;\n        if (PQRC[0x3] < 0x4 * (_0x17814a[0x1] + _0x17814a[0x3]) + 0x9 * _0x17814a[0x2])\n            _0x5d7ffb++;\n        if (_0x5d7ffb == 0x0)\n            result['push'](_0x17814a[0x0]);\n    });\n    console['log'](result['length'] == 0x0 ? 'NA' : result['join']('\\x0a'));\n}", "test_cases": [["4\n1 7 14 47\n2 5 35 55\n3 6 3 59\n4 6 5 15\n10 15 50 400\n2\n1 8 10 78\n2 4 18 33\n10 10 50 300\n0", "1\n4\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var arr=[];\n   for(var i=0;i<N;i++){\n      var ipqr=(Arr.shift()).split(\" \").map(Number);\n      arr.push(ipqr);\n   }\n   var PQRC=(Arr.shift()).split(\" \").map(Number);\n   var result=[];\n   arr.forEach(function(v){\n      var bad=0;\n      if(PQRC[0]<v[1])bad++;\n      if(PQRC[1]<v[2])bad++;\n      if(PQRC[2]<v[3])bad++;\n      if(PQRC[3]<4*(v[1]+v[3])+(9*v[2]))bad++;\n      if(bad==0)result.push(v[0]);\n   });\n   console.log((result.length==0)?\"NA\":result.join(\"\\n\"));\n}", "language": "JavaScript"}
{"filename": "p00242_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var str = '';\n    for (var i = 0x0; i < n; i++)\n        str += Arr['shift']() + '\\x20';\n    var arr = str['trim']()['split']('\\x20');\n    var s = Arr['shift']();\n    var f = arr['filter'](function (_0x27a2d9) {\n        return _0x27a2d9[0x0] == s;\n    });\n    f['sort']();\n    var F = [];\n    var memo = '';\n    for (var i = 0x0; i < f['length']; i++) {\n        if (memo == f[i]) {\n            F[F['length'] - 0x1] = [\n                f[i],\n                F[F['length'] - 0x1][0x1] + 0x1\n            ];\n        } else {\n            F['push']([\n                f[i],\n                0x1\n            ]);\n            memo = f[i];\n        }\n    }\n    F['sort'](function (_0x401e54, _0x2fe0f0) {\n        if (_0x401e54[0x1] == _0x2fe0f0[0x1])\n            return _0x401e54[0x0] > _0x2fe0f0[0x0];\n        else\n            return _0x2fe0f0[0x1] - _0x401e54[0x1];\n    });\n    var ans = [];\n    for (var i = 0x0; i < 0x5; i++) {\n        if (F['length'] > i)\n            ans['push'](F[i][0x0]);\n    }\n    console['log'](ans['length'] > 0x0 ? ans['join']('\\x20') : 'NA');\n}", "test_cases": [["1\nben likes bananas the best among many fruits because bananas are sweet and cheap\nb\n1\nwinners get to visit aizu and the university of aizu and make many friends as well\na\n3\nask alex about\nthe answer for the\nassignment on android apps\na\n2\nprogramming is both\na sport and an intellectual puzzle\nc\n0", "bananas because ben best\naizu and as\nabout alex android answer apps\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var str=\"\";\n   for(var i=0;i<n;i++)str+=Arr.shift()+\" \";\n   var arr=(str.trim()).split(\" \");\n   var s=Arr.shift();\n   var f=arr.filter(function(v){return v[0]==s;});\n   f.sort();\n   var F=[];\n   var memo=\"\";\n   for(var i=0;i<f.length;i++){\n      if(memo==f[i]){\n         F[F.length-1]=[f[i],F[F.length-1][1]+1];\n      }\n      else {\n         F.push([f[i],1]);\n         memo=f[i];\n      }\n   }\n   F.sort(function(a,b){\n      if(a[1]==b[1])return a[0]>b[0];\n      else return b[1]-a[1];\n   });\n   var ans=[];\n   for(var i=0;i<5;i++){\n      if(F.length>i)ans.push(F[i][0]);\n   }\n   console.log((ans.length>0)?ans.join(\" \"):\"NA\");\n}", "language": "JavaScript"}
{"filename": "p00252_1", "type": "JavaScript", "obfuscated": "function Main(_0x19b3f9) {\n    a = _0x19b3f9['split']('\\x0a')[0x0]['split']('\\x20')['join']('');\n    console['log'](a == '110' || a == '001' ? 'Open' : 'Close');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["0 0 1", "Open"], ["0 1 0", "Close"]], "original": "function Main(input){\n  a=input.split('\\n')[0].split(' ').join('');\n  console.log(((a=='110'||a=='001')?'Open':'Close'));\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p00261_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var str = Arr['shift']();\n    if (str == '#')\n        break;\n    var p = 'A';\n    for (var i = 0x0; i < str['length']; i++) {\n        var s = str[i] - 0x0;\n        if (p == 'A' && s === 0x0)\n            p = 'X';\n        else if (p == 'A' && s === 0x1)\n            p = 'Y';\n        else if (p == 'B' && s === 0x0)\n            p = 'Y';\n        else if (p == 'B' && s === 0x1)\n            p = 'X';\n        else if (p == 'W' && s === 0x0)\n            p = 'B';\n        else if (p == 'W' && s === 0x1)\n            p = 'Y';\n        else if (p == 'X' && s === 0x0)\n            p = '';\n        else if (p == 'X' && s === 0x1)\n            p = 'Z';\n        else if (p == 'Y' && s === 0x0)\n            p = 'X';\n        else if (p == 'Y' && s === 0x1)\n            p = '';\n        else if (p == 'Z' && s === 0x0)\n            p = 'W';\n        else if (p == 'Z' && s === 0x1)\n            p = 'B';\n    }\n    console['log'](p == 'B' ? 'Yes' : 'No');\n}", "test_cases": [["0100\n0101\n10100\n01000\n0101011\n0011\n011111\n#", "Yes\nNo\nYes\nNo\nYes\nNo\nYes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"#\")break;\n   var p=\"A\";\n   for(var i=0;i<str.length;i++){\n      var s=str[i]-0;\n      if(p==\"A\" && s===0)p=\"X\";\n      else if(p==\"A\" && s===1)p=\"Y\";\n      else if(p==\"B\" && s===0)p=\"Y\";\n      else if(p==\"B\" && s===1)p=\"X\";\n      else if(p==\"W\" && s===0)p=\"B\";\n      else if(p==\"W\" && s===1)p=\"Y\";\n      else if(p==\"X\" && s===0)p=\"\";\n      else if(p==\"X\" && s===1)p=\"Z\";\n      else if(p==\"Y\" && s===0)p=\"X\";\n      else if(p==\"Y\" && s===1)p=\"\";\n      else if(p==\"Z\" && s===0)p=\"W\";\n      else if(p==\"Z\" && s===1)p=\"B\";\n   }\n   console.log((p==\"B\")?\"Yes\":\"No\");\n}", "language": "JavaScript"}
{"filename": "p00262_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var cnt = 0x0;\n    while (!![]) {\n        var flag = arr['every'](function (_0x5486b3, _0x12e8d0) {\n            return _0x12e8d0 + 0x1 == _0x5486b3;\n        });\n        if (flag)\n            break;\n        var L = arr['length'];\n        arr = arr['map'](function (_0x39df2e) {\n            return _0x39df2e - 0x1;\n        });\n        arr = arr['filter'](function (_0x53adf5) {\n            return _0x53adf5 != 0x0;\n        });\n        arr['push'](L);\n        cnt++;\n        if (cnt == 0x2710) {\n            cnt = -0x1;\n            break;\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["6\n1 4 1 3 2 4\n5\n1 2 3 4 5\n10\n1 1 1 1 1 1 1 1 1 1\n9\n1 1 1 1 1 1 1 1 1\n12\n1 4 1 3 2 4 3 3 2 1 2 2\n1\n5050\n3\n10000 10000 100\n0", "24\n0\n10\n-1\n48\n5049\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var cnt=0;\n   while(true){\n      var flag=arr.every(function(v,i){return (i+1==v);});\n      if(flag)break;\n      var L=arr.length;\n      arr=arr.map(function(v){return v-1;});\n      arr=arr.filter(function(v){return (v!=0);});\n      arr.push(L);\n      cnt++;\n      if(cnt==10000){cnt=-1;break;}\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00276_1", "type": "JavaScript", "obfuscated": "Main(function (_0x2ea6c7) {\n    _0x2ea6c7 = _0x2ea6c7['trim']()['split']('\\x0a');\n    _0x2ea6c7['shift']();\n    _0x2ea6c7['forEach'](function (_0x2d7838) {\n        var _0x184584 = _0x2d7838['split']('\\x20');\n        var _0x5e57dd = +_0x184584[0x0];\n        var _0x92ec8d = +_0x184584[0x1];\n        var _0x58a228 = +_0x184584[0x2];\n        var _0x505ad4 = 0x0;\n        var _0xc3a75d;\n        _0xc3a75d = Math['min'](_0x5e57dd, _0x92ec8d, _0x58a228);\n        _0x5e57dd -= _0xc3a75d;\n        _0x92ec8d -= _0xc3a75d;\n        _0x58a228 -= _0xc3a75d;\n        _0x505ad4 += _0xc3a75d;\n        _0xc3a75d = Math['min'](Math['floor'](_0x5e57dd / 0x2), _0x92ec8d);\n        _0x5e57dd -= _0xc3a75d * 0x2;\n        _0x92ec8d -= _0xc3a75d;\n        _0x505ad4 += _0xc3a75d;\n        _0x505ad4 += Math['floor'](_0x5e57dd / 0x3);\n        console['log'](_0x505ad4);\n    });\n});\nfunction Main(_0xa1165f) {\n    var _0x28d624 = '';\n    process['stdin']['resume']();\n    process['stdin']['setEncoding']('utf8');\n    process['stdin']['on']('data', function (_0x5a1a46) {\n        _0x28d624 += _0x5a1a46;\n    });\n    process['stdin']['on']('end', function () {\n        _0xa1165f(_0x28d624);\n    });\n}\n;", "test_cases": [["4\n3 0 0\n1 1 1\n9 4 1\n0 1 2", "1\n1\n4\n0"]], "original": "Main(function(input) {\n\tinput = input.trim().split('\\n');\n\tinput.shift();\n\tinput.forEach(function(line) {\n\t\tvar tmp = line.split(' ');\n\t\tvar c = +tmp[0];\n\t\tvar a = +tmp[1];\n\t\tvar n = +tmp[2];\n\t\tvar ans = 0;\n\t\tvar min;\n\n\t\t/**\n\t\t * CAN pattern\n\t\t */\n\t\tmin = Math.min(c, a, n);\n\t\tc -= min;\n\t\ta -= min;\n\t\tn -= min;\n\t\tans += min;\n\n\t\t/**\n\t\t * CCA pattern\n\t\t */\n\t\tmin = Math.min(Math.floor(c / 2), a);\n\t\tc -= min * 2;\n\t\ta -= min;\n\t\tans += min;\n\n\t\t/**\n\t\t * CCC pattern\n\t\t */\n\t\tans += Math.floor(c / 3);\n\n\t\tconsole.log(ans);\n\t});\n});\n\nfunction Main(main) {\n\tvar input = '';\n\n\tprocess.stdin.resume();\n\tprocess.stdin.setEncoding('utf8');\n\tprocess.stdin.on('data', function(chunk) {\n\t\tinput += chunk;\n\t});\n\tprocess.stdin.on('end', function() {\n\t\tmain(input);\n\t});\n};", "language": "JavaScript"}
{"filename": "p00310_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [p, m, c] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](p + m + c);", "test_cases": [["10 10 20", "40"], ["100 0 0", "100"], ["1000 1000 1000", "3000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [p,m,c]=input.trim().split(\" \").map(Number);\nconsole.log(p+m+c);\n", "language": "JavaScript"}
{"filename": "p00352_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction Main(_0x41da45) {\n    const _0x4421ff = _0x41da45['split']('\\x20');\n    console['log']((parseFloat(_0x4421ff[0x0]) + parseFloat(_0x4421ff[0x1])) / 0x2);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1000 3000", "2000"], ["5000 5000", "5000"], ["1000 2000", "1500"]], "original": "\"use strict\";\n\nfunction Main(input) {\n  const ab = input.split(\" \");\n  console.log((parseFloat(ab[0])+parseFloat(ab[1]))/2);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p00355_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [a, b] = arr['shift']()['split']('\\x20')['map'](Number);\nvar n = arr['shift']() - 0x0;\nvar flag = 0x0;\nwhile (n--) {\n    var [s, f] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (f <= a || b <= s)\n        continue;\n    else\n        flag = 0x1;\n}\nconsole['log'](flag);", "test_cases": [["5 7\n3\n1 4\n4 5\n7 10", "0"], ["3 7\n3\n7 10\n1 4\n4 5", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr =input.trim().split(\"\\n\");\nvar [a,b] = arr.shift().split(\" \").map(Number);\nvar n = arr.shift() - 0;\nvar flag = 0;\nwhile(n--){\n   var [s,f] = arr.shift().split(\" \").map(Number);\n   if(f<=a || b<=s)continue;\n   else flag = 1;\n}\nconsole.log(flag);\n", "language": "JavaScript"}
{"filename": "p00356_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [x, y] = input['trim']()['split']('\\x20')['map'](Number);\nvar cnt = 0x0;\nfor (var i = 0x0; i <= x; i++) {\n    if (y * i * 0x2 / (x * 0x2) % 0x1 === 0x0)\n        cnt++;\n}\nconsole['log'](x + 0x1 + y + 0x1 - cnt);", "test_cases": [["4 4", "5"], ["4 6", "9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [x,y]=input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor(var i=0;i<=x;i++){\n   if(y*i*2/(x*2)%1===0)cnt++;\n}\nconsole.log(x+1+y+1-cnt);\n", "language": "JavaScript"}
{"filename": "p00424_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (Arr['length'] > 0x1) {\n    var AL = Arr['shift']();\n    var hash = {};\n    for (var i = 0x0; i < AL; i++) {\n        var arr = Arr[i]['trim']()['split']('\\x20');\n        hash[arr[0x0]] = arr[0x1];\n    }\n    Arr = Arr['slice'](AL, Arr['length'] + 0x1);\n    var AL = Arr['shift']();\n    var str = '';\n    for (var i = 0x0; i < AL; i++) {\n        var k = Arr[i]['trim']();\n        str += hash['hasOwnProperty'](k) ? hash[k] : k;\n    }\n    Arr = Arr['slice'](AL, Arr['length'] + 0x1);\n    console['log'](str);\n    if (Arr[0x0] == '0')\n        break;\n}", "test_cases": [["3\t\nA a\t\n0 5\t\n5 4\t\n10\t\nA\t\nB\t\nC\t\n0\t\n1\t\n4\t\n5\t\na\t\nb\t\nA\n3\t\nA a\t\n0 5\t\n5 4\t\n10\t\nA\t\nB\t\nC\t\n0\t\n1\t\n4\t\n5\t\na\t\nb\t\nA\n0", "aBC5144aba\naBC5144aba"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(Arr.length>1){\n   var AL=Arr.shift();\n   var hash={};\n   for(var i=0;i<AL;i++){\n      var arr=(Arr[i].trim()).split(\" \");\n      hash[arr[0]]=arr[1];\n   }\n   Arr=Arr.slice(AL,Arr.length+1);\n   var AL=Arr.shift();\n   var str=\"\";\n   for(var i=0;i<AL;i++){\n      var k=Arr[i].trim();\n      str+=(hash.hasOwnProperty(k))?hash[k]:k;\n   }\n   Arr=Arr.slice(AL,Arr.length+1);\n   console.log(str);\n   if(Arr[0]==\"0\")break;\n}", "language": "JavaScript"}
{"filename": "p00425_1", "type": "JavaScript", "obfuscated": "function move(_0x418457, _0x435cd1) {\n    var _0x4b5cdd = _0x435cd1[0x0];\n    var _0x56185f = _0x435cd1[0x1];\n    var _0x2e1e71 = _0x435cd1[0x2];\n    var _0x53bd58 = _0x435cd1[0x3];\n    var _0x5de240 = _0x435cd1[0x4];\n    var _0x595a82 = _0x435cd1[0x5];\n    var _0x3c5348 = [];\n    if (_0x418457 == 'N')\n        _0x3c5348 = [\n            _0x56185f,\n            _0x595a82,\n            _0x2e1e71,\n            _0x53bd58,\n            _0x4b5cdd,\n            _0x5de240\n        ];\n    if (_0x418457 == 'S')\n        _0x3c5348 = [\n            _0x5de240,\n            _0x4b5cdd,\n            _0x2e1e71,\n            _0x53bd58,\n            _0x595a82,\n            _0x56185f\n        ];\n    if (_0x418457 == 'E')\n        _0x3c5348 = [\n            _0x53bd58,\n            _0x56185f,\n            _0x4b5cdd,\n            _0x595a82,\n            _0x5de240,\n            _0x2e1e71\n        ];\n    if (_0x418457 == 'W')\n        _0x3c5348 = [\n            _0x2e1e71,\n            _0x56185f,\n            _0x595a82,\n            _0x4b5cdd,\n            _0x5de240,\n            _0x53bd58\n        ];\n    if (_0x418457 == 'R')\n        _0x3c5348 = [\n            _0x4b5cdd,\n            _0x2e1e71,\n            _0x5de240,\n            _0x56185f,\n            _0x53bd58,\n            _0x595a82\n        ];\n    if (_0x418457 == 'L')\n        _0x3c5348 = [\n            _0x4b5cdd,\n            _0x53bd58,\n            _0x56185f,\n            _0x5de240,\n            _0x2e1e71,\n            _0x595a82\n        ];\n    return _0x3c5348;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar dice;\nvar sum;\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var v = Arr[i]['charAt'](0x0);\n    if (v['match'](/[NSEWRL]/)) {\n        dice = move(v, dice);\n        sum += dice[0x0];\n    } else {\n        if (i != 0x0)\n            console['log'](sum);\n        dice = [\n            0x1,\n            0x2,\n            0x3,\n            0x4,\n            0x5,\n            0x6\n        ];\n        sum = 0x1;\n    }\n    if (Arr[i] == '0')\n        break;\n}", "test_cases": [["5\nNorth\nNorth\nEast\nSouth\nWest\n8\nWest\nNorth\nLeft\nSouth\nRight\nNorth\nLeft\nEast\n0", "21\n34"]], "original": "function move(x,arr){\nvar d1=arr[0];\nvar d2=arr[1];\nvar d3=arr[2];\nvar d4=arr[3];\nvar d5=arr[4];\nvar d6=arr[5];\nvar after=[];\nif(x==\"N\")after=[d2,d6,d3,d4,d1,d5];\nif(x==\"S\")after=[d5,d1,d3,d4,d6,d2];\nif(x==\"E\")after=[d4,d2,d1,d6,d5,d3];\nif(x==\"W\")after=[d3,d2,d6,d1,d5,d4];\nif(x==\"R\")after=[d1,d3,d5,d2,d4,d6];\nif(x==\"L\")after=[d1,d4,d2,d5,d3,d6];\nreturn after;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar dice;\nvar sum;\nfor(var i=0;i<Arr.length;i++){\n   var v=Arr[i].charAt(0);\n   if(v.match(/[NSEWRL]/)){\n      dice=move(v,dice);\n      sum+=dice[0];\n   }else{\n      if(i!=0)console.log(sum);\n      dice=[1,2,3,4,5,6];\n      sum=1;\n   }\n   if(Arr[i]==\"0\")break;\n}", "language": "JavaScript"}
{"filename": "p00484_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar nk = arr['shift']()['split']('\\x20')['map'](Number);\nvar n = nk[0x0];\nvar k = nk[0x1];\nvar N = [];\nfor (var i = 0x0; i < n; i++)\n    N['push'](arr['shift']()['split']('\\x20')['map'](Number));\nvar dp = [];\nfor (var i = 0x0; i <= 0xa; i++)\n    dp[i] = [];\nvar DP = [];\nfor (var i = 0x0; i <= 0xa; i++)\n    DP[i] = [];\nN['forEach'](function (_0x14fd30) {\n    var _0x5f1d86 = _0x14fd30[0x0];\n    var _0x591a88 = _0x14fd30[0x1];\n    dp[_0x591a88]['push'](_0x5f1d86);\n});\ndp['forEach'](function (_0x4e3943, _0x93c415) {\n    _0x4e3943['sort'](function (_0x1de05f, _0x57692e) {\n        return _0x57692e - _0x1de05f;\n    });\n    _0x4e3943['forEach'](function (_0x2c7b23, _0x4cec8a) {\n        if (_0x4cec8a == 0x0)\n            DP[_0x93c415][_0x4cec8a] = dp[_0x93c415][_0x4cec8a];\n        if (_0x4cec8a > 0x0) {\n            dp[_0x93c415][_0x4cec8a] += dp[_0x93c415][_0x4cec8a - 0x1];\n            DP[_0x93c415][_0x4cec8a] = dp[_0x93c415][_0x4cec8a] + (_0x4cec8a + 0x1) * _0x4cec8a;\n        }\n    });\n});\nvar dp = [];\nfor (var i = 0x0; i <= n; i++)\n    dp[i] = 0x0;\nvar bomb = function (_0x22282f, _0x4f3b5e, _0x5c150e) {\n    dp[_0x22282f] = Math['max'](dp[_0x22282f], _0x5c150e);\n    if (_0x5c150e == k)\n        return;\n    for (var _0x23bff5 = _0x4f3b5e; _0x23bff5 < DP['length']; _0x23bff5++) {\n        DP[_0x23bff5]['forEach'](function (_0x4f2eae, _0x455d69) {\n            bomb(_0x22282f + (_0x455d69 + 0x1), _0x23bff5 + 0x1, _0x5c150e + _0x4f2eae);\n        });\n    }\n};\nbomb(0x0, 0x0, 0x0);\nconsole['log'](dp[k]);", "test_cases": [["7 4\n14 1\n13 2\n12 3\n14 2\n8 2\n16 3\n11 2", "60"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar nk=arr.shift().split(\" \").map(Number);\nvar n=nk[0];\nvar k=nk[1];\nvar N=[];\nfor(var i=0;i<n;i++)N.push(arr.shift().split(\" \").map(Number));\n\nvar dp=[];\nfor(var i=0;i<=10;i++)dp[i]=[];\nvar DP=[];\nfor(var i=0;i<=10;i++)DP[i]=[];\n\nN.forEach(function(v){\n   var c=v[0];\n   var g=v[1];\n   dp[g].push(c);\n});\n\ndp.forEach(function(v,i){\n   v.sort(function(a,b){return b-a;});\n   v.forEach(function(value,j){\n      if(j==0)DP[i][j]=dp[i][j];\n      if(j>0){\n         dp[i][j]+=dp[i][j-1];\n         DP[i][j]=dp[i][j]+(j+1)*j;\n      }\n   });\n});\n\n\nvar dp=[];\nfor(var i=0;i<=n;i++)dp[i]=0;\n\nvar bomb=function(cnt,start,sum){\n   dp[cnt]=Math.max(dp[cnt],sum);\n   if(sum==k)return;\n   for(var i=start;i<DP.length;i++){\n      DP[i].forEach(function(v,index){\n         bomb(cnt+(index+1),i+1,sum+v);\n      });\n   }\n};\n\nbomb(0,0,0);\n\nconsole.log(dp[k]);", "language": "JavaScript"}
{"filename": "p00590_1", "type": "JavaScript", "obfuscated": "function prime(_0x96dfb0) {\n    var _0x454842 = [];\n    for (var _0x33a4e8 = 0x0; _0x33a4e8 <= _0x96dfb0; _0x33a4e8++)\n        _0x454842[_0x33a4e8] = _0x33a4e8;\n    _0x454842[0x0] = ![];\n    _0x454842[0x1] = ![];\n    var _0x51ba0e = Math['floor'](Math['sqrt'](_0x96dfb0));\n    for (var _0x33a4e8 = 0x2; _0x33a4e8 <= _0x51ba0e; _0x33a4e8++) {\n        if (_0x454842[_0x33a4e8] == ![])\n            continue;\n        for (var _0x18438b = _0x33a4e8 + _0x33a4e8; _0x18438b <= _0x96dfb0; _0x18438b += _0x33a4e8) {\n            _0x454842[_0x18438b] = ![];\n        }\n    }\n    var _0x215e9e = {};\n    for (var _0x33a4e8 = 0x0; _0x33a4e8 <= _0x96dfb0; _0x33a4e8++) {\n        if (_0x454842[_0x33a4e8] !== ![])\n            _0x215e9e[_0x454842[_0x33a4e8]] = !![];\n    }\n    return _0x215e9e;\n}\nvar p = prime(0x2710);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var a = Arr[i];\n    var A = [];\n    var B = [];\n    for (var j = 0x1; j <= a; j++)\n        A['push'](j);\n    for (var j = a; j >= 0x1; j--)\n        B['push'](j);\n    var pair = 0x0;\n    for (var j = 0x0; j < a; j++) {\n        if (p['hasOwnProperty'](A[j]) && p['hasOwnProperty'](B[j]))\n            pair++;\n    }\n    console['log'](pair);\n}", "test_cases": [["1\n4\n7\n51", "0\n2\n2\n6"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(10000);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   var A=[];\n   var B=[];\n   for(var j=1;j<=a;j++)A.push(j);\n   for(var j=a;j>=1;j--)B.push(j);\n   var pair=0;\n   for(var j=0;j<a;j++){\n      if(p.hasOwnProperty(A[j]) && p.hasOwnProperty(B[j]))pair++;\n   }\n   console.log(pair);\n}", "language": "JavaScript"}
{"filename": "p00591_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < n; i++)\n        yx['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var xy = [];\n    var hand = [];\n    for (var i = 0x0; i < n; i++) {\n        xy[i] = [];\n        hand[i] = [];\n        for (var j = 0x0; j < n; j++) {\n            xy[i][j] = yx[j][i];\n            hand[i][j] = [\n                0x0,\n                0x0\n            ];\n        }\n    }\n    yx['forEach'](function (_0x1b08dd, _0x4ddd7d) {\n        var _0x8c4774 = _0x1b08dd['reduce'](function (_0x46d9ab, _0x6753b3) {\n            return Math['min'](_0x46d9ab, _0x6753b3);\n        });\n        hand[_0x4ddd7d][_0x1b08dd['indexOf'](_0x8c4774)][0x0] = 0x1;\n    });\n    xy['forEach'](function (_0x2b5440, _0x4e6532) {\n        var _0x1da235 = _0x2b5440['reduce'](function (_0xceb445, _0x5a0f2e) {\n            return Math['max'](_0xceb445, _0x5a0f2e);\n        });\n        hand[_0x2b5440['indexOf'](_0x1da235)][_0x4e6532][0x1] = 0x1;\n    });\n    var ans = (function () {\n        for (var _0x4c1a22 = 0x0; _0x4c1a22 < n; _0x4c1a22++) {\n            for (var _0x5a4e83 = 0x0; _0x5a4e83 < n; _0x5a4e83++) {\n                if (hand[_0x4c1a22][_0x5a4e83][0x0] == 0x1 && hand[_0x4c1a22][_0x5a4e83][0x1] == 0x1)\n                    return yx[_0x4c1a22][_0x5a4e83];\n            }\n        }\n        return 0x0;\n    }());\n    console['log'](ans);\n}", "test_cases": [["3\n1 2 3\n4 5 6\n7 8 9\n3\n1 2 3\n7 8 9\n4 5 6\n0", "7\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++)yx.push(arr.shift().split(\" \").map(Number));\n   var xy=[];\n   var hand=[];\n   for(var i=0;i<n;i++){\n      xy[i]=[];\n      hand[i]=[];\n      for(var j=0;j<n;j++){\n         xy[i][j]=yx[j][i];\n         hand[i][j]=[0,0];\n      }\n   }\n   yx.forEach(function(v,i){\n      var min=v.reduce(function(a,b){return Math.min(a,b);});\n      hand[i][v.indexOf(min)][0]=1;\n   });\n   xy.forEach(function(v,i){\n      var max=v.reduce(function(a,b){return Math.max(a,b);});\n      hand[v.indexOf(max)][i][1]=1;\n   });\n   var ans=(function(){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            if(hand[i][j][0]==1 && hand[i][j][1]==1)return yx[i][j];\n         }\n      }\n      return 0;\n   })();\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00593_1", "type": "JavaScript", "obfuscated": "function bomb(_0x438fa1, _0x2e9d4b, _0x1c6da6, _0x3f8c99) {\n    yx[_0x438fa1][_0x2e9d4b] = ('\\x20\\x20\\x20' + _0x1c6da6)['slice'](-0x3);\n    if (_0x438fa1 == n - 0x1 && _0x2e9d4b == n - 0x1)\n        return;\n    else if (_0x438fa1 == n - 0x1 && _0x3f8c99 == -0x1)\n        bomb(_0x438fa1, _0x2e9d4b + 0x1, _0x1c6da6 + 0x1, 0x1);\n    else if (_0x438fa1 == n - 0x1 && _0x3f8c99 == 0x1)\n        bomb(_0x438fa1 - 0x1, _0x2e9d4b + 0x1, _0x1c6da6 + 0x1, 0x1);\n    else if (_0x2e9d4b == n - 0x1 && _0x3f8c99 == 0x1)\n        bomb(_0x438fa1 + 0x1, _0x2e9d4b, _0x1c6da6 + 0x1, -0x1);\n    else if (_0x2e9d4b == n - 0x1 && _0x3f8c99 == -0x1)\n        bomb(_0x438fa1 + 0x1, _0x2e9d4b - 0x1, _0x1c6da6 + 0x1, -0x1);\n    else if (_0x438fa1 == 0x0 && _0x3f8c99 == 0x1)\n        bomb(_0x438fa1, _0x2e9d4b + 0x1, _0x1c6da6 + 0x1, -0x1);\n    else if (_0x438fa1 == 0x0 && _0x3f8c99 == -0x1)\n        bomb(_0x438fa1 + 0x1, _0x2e9d4b - 0x1, _0x1c6da6 + 0x1, -0x1);\n    else if (_0x2e9d4b == 0x0 && _0x3f8c99 == -0x1)\n        bomb(_0x438fa1 + 0x1, _0x2e9d4b, _0x1c6da6 + 0x1, 0x1);\n    else if (_0x2e9d4b == 0x0 && _0x3f8c99 == 0x1)\n        bomb(_0x438fa1 - 0x1, _0x2e9d4b + 0x1, _0x1c6da6 + 0x1, 0x1);\n    else if (_0x3f8c99 == 0x1)\n        bomb(_0x438fa1 - 0x1, _0x2e9d4b + 0x1, _0x1c6da6 + 0x1, 0x1);\n    else if (_0x3f8c99 == -0x1)\n        bomb(_0x438fa1 + 0x1, _0x2e9d4b - 0x1, _0x1c6da6 + 0x1, -0x1);\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar I = 0x1;\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < n; i++) {\n        yx[i] = [];\n        for (var j = 0x0; j < n; j++) {\n            yx[i][j] = 0x0;\n        }\n    }\n    bomb(0x0, 0x0, 0x1, 0x1);\n    console['log']('Case\\x20' + I + ':');\n    I++;\n    console['log'](yx['join']('\\x0a')['replace'](/\\,/g, ''));\n}", "test_cases": [["3\n4\n0", "Case 1:\n  1  2  6\n  3  5  7\n  4  8  9\nCase 2:\n  1  2  6  7\n  3  5  8 13\n  4  9 12 14\n 10 11 15 16"]], "original": "function bomb(y,x,cnt,f){\n   yx[y][x]=(\"   \"+cnt).slice(-3);\n   if(y==n-1 && x==n-1)return;\n   else if(y==n-1 && f==-1)bomb(y,x+1,cnt+1,1);\n   else if(y==n-1 && f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(x==n-1 && f==1)bomb(y+1,x,cnt+1,-1);\n   else if(x==n-1 && f==-1)bomb(y+1,x-1,cnt+1,-1);\n   else if(y==0 && f==1)bomb(y,x+1,cnt+1,-1);\n   else if(y==0 && f==-1)bomb(y+1,x-1,cnt+1,-1);\n   else if(x==0 && f==-1)bomb(y+1,x,cnt+1,1);\n   else if(x==0 && f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(f==1)bomb(y-1,x+1,cnt+1,1);\n   else if(f==-1)bomb(y+1,x-1,cnt+1,-1);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=1;\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      yx[i]=[];\n      for(var j=0;j<n;j++){\n         yx[i][j]=0;\n      }\n   }\n   bomb(0,0,1,1);\n   console.log(\"Case \"+I+\":\");\n   I++;\n   console.log(yx.join(\"\\n\").replace(/\\,/g,\"\"));\n}", "language": "JavaScript"}
{"filename": "p00629_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n === 0x0)\n        break;\n    var ary = [];\n    for (var i = 0x0; i < n; i++)\n        ary['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    ary['sort'](function (_0xfc0feb, _0x3cd627) {\n        if (_0xfc0feb[0x2] == _0x3cd627[0x2] && _0xfc0feb[0x3] == _0x3cd627[0x3])\n            return _0xfc0feb[0x0] - _0x3cd627[0x0];\n        else if (_0xfc0feb[0x2] == _0x3cd627[0x2])\n            return _0xfc0feb[0x3] - _0x3cd627[0x3];\n        else\n            return _0x3cd627[0x2] - _0xfc0feb[0x2];\n    });\n    var ans = [];\n    var U = [];\n    for (var i = 0x0; i <= 0x3e8; i++)\n        U[i] = 0x0;\n    ary['forEach'](function (_0x3649b0, _0x390e3c) {\n        var _0xe45b = _0x3649b0[0x0];\n        var _0x1e2732 = _0x3649b0[0x1];\n        if (_0x390e3c < 0xa) {\n            if (U[_0x1e2732] < 0x3) {\n                ans['push'](_0xe45b);\n                U[_0x1e2732]++;\n            }\n        } else if (_0x390e3c < 0x14) {\n            if (U[_0x1e2732] < 0x2) {\n                ans['push'](_0xe45b);\n                U[_0x1e2732]++;\n            }\n        } else if (_0x390e3c < 0x1a) {\n            if (U[_0x1e2732] == 0x0) {\n                ans['push'](_0xe45b);\n                U[_0x1e2732]++;\n            }\n        }\n    });\n    console['log'](ans['join']('\\x0a'));\n}", "test_cases": [["6\n1 1 6 200\n2 1 6 300\n3 1 6 400\n4 2 5 1200\n5 1 5 1400\n6 3 4 800\n3\n777 1 5 300\n808 2 4 20\n123 3 6 500\n2\n2 1 3 100\n1 1 3 100\n0", "1\n2\n3\n4\n6\n123\n777\n808\n1\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n===0)break;\n   var ary=[];\n   for(var i=0;i<n;i++)ary.push(arr.shift().split(\" \").map(Number));\n   ary.sort(function(a,b){\n      if(a[2]==b[2] && a[3]==b[3])return a[0]-b[0];\n      else if(a[2]==b[2])return a[3]-b[3];\n      else return b[2]-a[2];\n   });\n   var ans=[];\n   var U=[];\n   for(var i=0;i<=1000;i++)U[i]=0;\n   ary.forEach(function(v,i){\n      var id=v[0];\n      var u=v[1];\n      if(i<10){\n         if(U[u]<3){ans.push(id);U[u]++;}\n      }else if(i<20){\n         if(U[u]<2){ans.push(id);U[u]++;}\n      }else if(i<26){\n         if(U[u]==0){ans.push(id);U[u]++;}\n      }\n   });\n   console.log(ans.join(\"\\n\"));\n}", "language": "JavaScript"}
{"filename": "p00648_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    var obj = {};\n    var ary = [];\n    for (var i = 0x0; i < N; i++) {\n        var nws = arr['shift']()['split']('\\x20');\n        var name = nws[0x0];\n        var w = nws[0x1] - 0x0;\n        var s = nws[0x2]['split']('')['map'](Number);\n        s = s['length'] == 0x3 ? s[0x0] * 0x3c + s[0x1] * 0xa + s[0x2] : s[0x0] * 0x258 + s[0x1] * 0x3c + 0xa * s[0x2] + s[0x3];\n        obj[name] = w * 0x5a0 + s;\n        ary['push'](w * 0x5a0 + s);\n    }\n    var P = arr['shift']() - 0x0;\n    for (var i = 0x0; i < P; i++) {\n        var f = arr['shift']();\n        ary['push'](obj[f] - 29.5);\n    }\n    ary['sort'](function (_0x2bdf4e, _0x18ce37) {\n        return _0x2bdf4e - _0x18ce37;\n    });\n    var cnt = 0x0;\n    var i = 0x0;\n    var p = 0x0;\n    ary['forEach'](function (_0x2f3d07) {\n        if (_0x2f3d07 % 0x1 == 0.5) {\n            cnt++;\n            p++;\n            i = _0x2f3d07 + 29.5 + 0x1e;\n        } else if (i <= _0x2f3d07) {\n            cnt++;\n            i = _0x2f3d07 + 0x1e;\n        }\n    });\n    if (p != P)\n        cnt = -0x1;\n    console['log'](cnt);\n}", "test_cases": [["1\ngalaxy_angel 0 600\n1\ngalaxy_angel\n11\nA 0 600\nB 0 610\nC 0 610\nD 0 610\nE 0 640\nEE 0 700\nF 0 710\nG 0 710\nH 0 710\nI 0 740\nJ 0 750\n2\nB\nH\n42\nnchj 6 2620\nanhnnnmewbktthsrn 4 2515\ngntmdsh 1 1800\nachnnl 4 2540\nhnskirh 0 2200\naonexrcst 0 1700\ndgdys 6 2330\nhdnnara 4 2525\ndnpaonntssotk 4 2555\nddmnwndrlnd 6 2500\nC 4 2445\nastrttnomch 0 2330\nseknnqasr 1 2630\nsftnt 4 2630\nstnsgt 2 2605\ndrrnenmknmrmr 4 2610\nhnzm 6 2713\nyndmsoazzlsn 6 2658\nmrahlcalv 4 2615\nhshzrhkkrhs 1 900\nortchntsbshni 0 2430\nkmnmzshrski 1 2530\nsktdnc 4 1800\ngykkybrkjhkirkhn 2 2459\ntrk 0 900\n30zzsinhkntiik 3 2700\nsngkotmmmirprdx 1 2600\nyran 2 2529\ntntissygntinybu 1 2614\nskiichhtki 5 2505\ntgrbnny 6 2558\ndnbrsnki 3 1927\nyugozxl 1 1930\nfrbllchrmn 1 1928\nfjrg 1 1955\nshwmngtr 0 2200\nxmn 5 2200\nrngnkkrskitikihn 0 2100\nszysz 0 1254\nprttyrythmaulrdrm 6 1000\nsckiesfrntrqst 5 1820\nmshdr 1 2255\n1\nmrahlcalv\n0", "1\n4\n31"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var N=arr.shift()-0;\n   if(N==0)break;\n   var obj={};\n   var ary=[];\n   for(var i=0;i<N;i++){\n      var nws=(arr.shift()).split(\" \");\n      var name=nws[0];\n      var w=nws[1]-0;\n      var s=nws[2].split(\"\").map(Number);\n      s=(s.length==3)?s[0]*60+s[1]*10+s[2]:s[0]*600+s[1]*60+10*s[2]+s[3];\n      obj[name]=(w*1440)+s;\n      ary.push((w*1440)+s);\n   }\n   var P=arr.shift()-0;\n   for(var i=0;i<P;i++){\n      var f=arr.shift();\n      ary.push(obj[f]-29.5);\n   }\n   ary.sort(function(a,b){return a-b;});\n   var cnt=0;\n   var i=0;\n   var p=0;\n   ary.forEach(function(v){\n      if(v%1==0.5){cnt++;p++;i=v+29.5+30;}\n      else if(i<=v){cnt++;i=v+30;}\n   });\n   if(p!=P)cnt=-1;\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00682_1", "type": "JavaScript", "obfuscated": "process['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x3b36ca) {\n    var _0x3ebcfa = _0x3b36ca['trim']()['split']('\\x0a');\n    var _0x5dd6cb = 0x1;\n    while (!![]) {\n        var _0xfebdc0 = _0x3ebcfa['shift']();\n        if (_0xfebdc0 == 0x0)\n            break;\n        var _0x470bc1 = [];\n        while (_0xfebdc0--)\n            _0x470bc1['push'](_0x3ebcfa['shift']()['split']('\\x20')['map'](Number));\n        _0x470bc1['push'](_0x470bc1[0x0]);\n        var _0x29d16e = 0x0;\n        for (var _0xac7e7 = 0x0; _0xac7e7 < _0x470bc1['length'] - 0x1; _0xac7e7++) {\n            _0x29d16e += _0x470bc1[_0xac7e7][0x0] * _0x470bc1[_0xac7e7 + 0x1][0x1] - _0x470bc1[_0xac7e7][0x1] * _0x470bc1[_0xac7e7 + 0x1][0x0];\n        }\n        console['log'](_0x5dd6cb + '\\x20' + Math['abs'](_0x29d16e / 0x2)['toFixed'](0x1));\n        _0x3ebcfa['shift']();\n        _0x5dd6cb++;\n    }\n});", "test_cases": [["3\n1 1\n3 4\n6 0\n\n7\n0 0\n10 10\n0 20\n10 30\n0 40\n100 40\n100 0\n\n0", "1 8.5\n2 3800.0"]], "original": "process.stdin.resume();\nprocess.stdin.setEncoding(\"utf8\");\nprocess.stdin.on(\"data\", function (chunk) {\n    var input = chunk.trim().split(\"\\n\");\n    var order = 1;\n    while (true) {\n        var n = input.shift();\n        if (n == 0)\n            break;\n        var coordinate = [];\n        while (n--)\n            coordinate.push(input.shift().split(\" \").map(Number));\n        coordinate.push(coordinate[0]);\n        var area = 0;\n        for (var i = 0; i < coordinate.length - 1; i++) {\n            area += (coordinate[i][0] * coordinate[i + 1][1]) - (coordinate[i][1] * coordinate[i + 1][0]);\n        }\n        console.log(order + \" \" + Math.abs(area / 2).toFixed(1));\n        input.shift();\n        order++;\n    }\n});", "language": "JavaScript"}
{"filename": "p00687_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nab = arr['shift']();\n    if (nab == '0\\x200\\x200')\n        break;\n    nab = nab['split']('\\x20')['map'](Number);\n    var n = nab[0x0];\n    var ab = [\n        nab[0x1],\n        nab[0x2]\n    ];\n    var dp = [];\n    for (var i = 0x0; i <= n; i++)\n        dp[i] = ![];\n    dp[0x0] = !![];\n    for (var i = 0x0; i < ab['length']; i++) {\n        for (var j = 0x0; j <= n; j++) {\n            if (dp[j])\n                dp[j + ab[i]] = !![];\n        }\n    }\n    var cnt = 0x0;\n    dp['forEach'](function (_0x536915) {\n        if (_0x536915 == ![])\n            cnt++;\n    });\n    console['log'](cnt);\n}", "test_cases": [["10 2 3\n10 2 5\n100 5 25\n0 0 0", "1\n2\n80"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\nvar nab=arr.shift();\n   if(nab==\"0 0 0\")break;\n   nab=nab.split(\" \").map(Number);\n   var n=nab[0];\n   var ab=[nab[1],nab[2]];\n   var dp=[];\n   for(var i=0;i<=n;i++)dp[i]=false;\n   dp[0]=true;\n   for(var i=0;i<ab.length;i++){\n      for(var j=0;j<=n;j++){\n         if(dp[j])dp[j+ab[i]]=true;\n      }\n   }\n   var cnt=0;\n   dp.forEach(function(v){\n      if(v==false)cnt++;\n   });\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00693_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['replace'](/\\?/g, '.');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = arr['shift']()['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    if (n == 0x0 && m == 0x0)\n        break;\n    var rule = [];\n    while (n--) {\n        var ary = arr['shift']()['split']('\\x20');\n        var flag = ary[0x0] == 'permit' ? !![] : ![];\n        rule['push']([\n            flag,\n            new RegExp(ary[0x1] + ary[0x2])\n        ]);\n    }\n    var ans = [];\n    while (m--) {\n        var packet = arr['shift']()['split']('\\x20');\n        var str = packet[0x0] + packet[0x1];\n        var flag = ![];\n        rule['forEach'](function (_0x2bce2d) {\n            if (_0x2bce2d[0x0] == !![] && _0x2bce2d[0x1]['test'](str))\n                flag = !![];\n            else if (_0x2bce2d[0x0] == ![] && _0x2bce2d[0x1]['test'](str))\n                flag = ![];\n        });\n        if (flag)\n            ans['push'](packet['join']('\\x20'));\n    }\n    console['log'](ans['length']);\n    ans['forEach'](function (_0x112009) {\n        console['log'](_0x112009);\n    });\n}", "test_cases": [["2 5\npermit 192168?? ?12??34?\ndeny 19216899 012343?5\n19216711 11233340 HiIamACracker\n19216891 01234345 Hello\n19216899 01234345 HiIamAlsoACracker\n19216809 11200340 World\n00000000 99999999 TheEndOfTheWorld\n1 2\npermit 12345678 23456789\n19216891 01234345 Hello\n12345678 23456789 Hello\n0 0", "2\n19216891 01234345 Hello\n19216809 11200340 World\n1\n12345678 23456789 Hello"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.replace(/\\?/g,\".\");\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nm=arr.shift().split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   if(n==0 && m==0)break;\n   var rule=[];\n   while(n--){\n      var ary=arr.shift().split(\" \");\n      var flag=(ary[0]==\"permit\")?true:false;\n      rule.push([flag,new RegExp(ary[1]+ary[2])]);\n   }\n   var ans=[];\n   while(m--){\n      var packet=arr.shift().split(\" \");\n      var str=packet[0]+packet[1];\n      var flag=false;\n      rule.forEach(function(v){\n         if(v[0]==true && v[1].test(str))flag=true;\n         else if(v[0]==false && v[1].test(str))flag=false;  \n      });\n      if(flag)ans.push(packet.join(\" \"));\n   }\n   console.log(ans.length);\n   ans.forEach(function(v){console.log(v);});\n}", "language": "JavaScript"}
{"filename": "p00700_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nwhile (n--) {\n    var xy = [\n        0x0,\n        0x0\n    ];\n    var max = [\n        0x0,\n        0x0,\n        0x0\n    ];\n    while (!![]) {\n        var str = arr['shift']();\n        if (str == '0\\x200')\n            break;\n        var ary = str['split']('\\x20')['map'](Number);\n        xy[0x0] += ary[0x0];\n        xy[0x1] += ary[0x1];\n        var d = Math['sqrt'](xy[0x0] * xy[0x0] + xy[0x1] * xy[0x1]);\n        if (max[0x0] < d)\n            max = [\n                d,\n                xy[0x0],\n                xy[0x1]\n            ];\n        else if (max[0x0] == d && max[0x1] < xy[0x0])\n            max = [\n                d,\n                xy[0x0],\n                xy[0x1]\n            ];\n    }\n    max['shift']();\n    console['log'](max['join']('\\x20'));\n}", "test_cases": [["3\n1 0\n0 1\n-1 0\n1 0\n0 5\n-1 0\n0 -1\n5 0\n0 1\n0 -1\n1 0\n0 -4\n-3 0\n0 3\n2 0\n0 -2\n-1 0\n0 1\n0 -1\n1 0\n0 2\n-2 0\n0 -3\n3 0\n0 4\n-4 0\n0 -5\n-2 0\n0 0\n1 0\n-1 0\n0 0\n2 0\n0 1\n-1 0\n0 1\n-1 0\n0 -2\n0 0", "6 5\n1 0\n2 1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var xy=[0,0];\n   var max=[0,0,0];\n   while(true){\n      var str=arr.shift();\n      if(str==\"0 0\")break;\n      var ary=str.split(\" \").map(Number);\n      xy[0]+=ary[0];\n      xy[1]+=ary[1];\n      var d=Math.sqrt(xy[0]*xy[0]+xy[1]*xy[1]);\n      if(max[0]<d)max=[d,xy[0],xy[1]];\n      else if(max[0]==d && max[1]<xy[0])max=[d,xy[0],xy[1]];\n      }\n   max.shift();\n   console.log(max.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00705_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var v = Arr['shift']();\n    if (v == '0\\x200')\n        break;\n    var NQ = v['split']('\\x20')['map'](Number);\n    var arr = [];\n    for (var i = 0x0; i < 0x32; i++)\n        arr[i] = 0x0;\n    for (var i = 0x0; i < NQ[0x0]; i++) {\n        var day = Arr['shift']()['split']('\\x20')['map'](Number);\n        var L = day['shift']();\n        for (var j = 0x0; j < L; j++) {\n            arr[day[j]]++;\n        }\n    }\n    var result = 0x0;\n    var max = Math['max']['apply'](null, arr);\n    if (max >= NQ[0x1])\n        NQ[0x1] = max;\n    for (var i = 0x0; i < arr['length']; i++) {\n        if (arr[i] >= NQ[0x1]) {\n            result = i;\n            break;\n        }\n    }\n    console['log'](result);\n}", "test_cases": [["3 2\n2 1 4\n0\n3 3 4 8\n3 2\n4 1 5 8 9\n3 2 5 9\n5 2 4 5 7 9\n3 3\n2 1 4\n3 2 5 9\n2 2 4\n3 3\n2 1 2\n3 1 2 9\n2 2 4\n0 0", "4\n5\n0\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var v=Arr.shift();\n   if(v==\"0 0\")break;\n   var NQ=v.split(\" \").map(Number);\n   var arr=[];\n   for(var i=0;i<50;i++)arr[i]=0;\n   for(var i=0;i<NQ[0];i++){\n      var day=(Arr.shift()).split(\" \").map(Number);\n      var L=day.shift();\n      for(var j=0;j<L;j++){\n         arr[day[j]]++;\n      }\n   }\n   var result=0;\n   var max=Math.max.apply(null,arr);\n   if(max>=NQ[1])NQ[1]=max;\n   for(var i=0;i<arr.length;i++){\n      if(arr[i]>=NQ[1]){\n         result=i;\n         break;\n      }\n   }\n   console.log(result);\n}", "language": "JavaScript"}
{"filename": "p00718_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < n; I++) {\n    var arr = Arr['shift']()['split']('\\x20');\n    var sum = 0x0;\n    arr['forEach'](function (_0x188b8b) {\n        _0x188b8b = _0x188b8b['replace'](/(\\d?)([mcxi])/g, function (_0x27b5aa, _0x1bee45, _0x347b9e) {\n            _0x1bee45 = _0x1bee45 ? _0x1bee45 - 0x0 : 0x1;\n            if (_0x347b9e == 'm')\n                _0x347b9e = 0x3e8;\n            if (_0x347b9e == 'c')\n                _0x347b9e = 0x64;\n            if (_0x347b9e == 'x')\n                _0x347b9e = 0xa;\n            if (_0x347b9e == 'i')\n                _0x347b9e = 0x1;\n            sum += _0x1bee45 * _0x347b9e;\n            return _0x27b5aa;\n        });\n    });\n    var str = ('000' + sum)['slice'](-0x4);\n    var S = str['split']('')['map'](Number);\n    var result = '';\n    S['forEach'](function (_0x328017, _0x6cbea2) {\n        if (_0x328017 == 0x1)\n            _0x328017 = '';\n        if (_0x328017 !== 0x0) {\n            if (_0x6cbea2 == 0x0)\n                result += _0x328017 + 'm';\n            if (_0x6cbea2 == 0x1)\n                result += _0x328017 + 'c';\n            if (_0x6cbea2 == 0x2)\n                result += _0x328017 + 'x';\n            if (_0x6cbea2 == 0x3)\n                result += _0x328017 + 'i';\n        }\n    });\n    console['log'](result);\n}", "test_cases": [["10\nxi x9i\ni 9i\nc2x2i 4c8x8i\nm2ci 4m7c9x8i\n9c9x9i i\ni 9m9c9x8i\nm i\ni m\nm9i i\n9m8c7xi c2x8i", "3x\nx\n6cx\n5m9c9x9i\nm\n9m9c9x9i\nmi\nmi\nmx\n9m9c9x9i"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=(Arr.shift()).split(\" \");\n   var sum=0;\n   arr.forEach(function(v){\n      v=v.replace(/(\\d?)([mcxi])/g,function(s,s1,s2){\n         s1=(s1)?s1-0:1;\n         if(s2==\"m\")s2=1000;\n         if(s2==\"c\")s2=100;\n         if(s2==\"x\")s2=10;\n         if(s2==\"i\")s2=1;\n         sum+=(s1*s2);\n         return s;\n      });\n   });\n   var str=(\"000\"+sum).slice(-4);\n   var S=str.split(\"\").map(Number);\n   var result=\"\";\n   S.forEach(function(v,i){\n      if(v==1)v=\"\";\n      if(v!==0){\n         if(i==0)result+=v+\"m\";\n         if(i==1)result+=v+\"c\";\n         if(i==2)result+=v+\"x\";\n         if(i==3)result+=v+\"i\";\n      }\n   });\n   console.log(result);\n}", "language": "JavaScript"}
{"filename": "p00722_1", "type": "JavaScript", "obfuscated": "function prime(_0x4fedc6) {\n    var _0x3ef4ce = [];\n    for (var _0x17dfc2 = 0x0; _0x17dfc2 <= _0x4fedc6; _0x17dfc2++)\n        _0x3ef4ce[_0x17dfc2] = _0x17dfc2;\n    _0x3ef4ce[0x0] = ![];\n    _0x3ef4ce[0x1] = ![];\n    var _0x13825f = Math['floor'](Math['sqrt'](_0x4fedc6));\n    for (var _0x17dfc2 = 0x2; _0x17dfc2 <= _0x13825f; _0x17dfc2++) {\n        if (_0x3ef4ce[_0x17dfc2] == ![])\n            continue;\n        for (var _0x440e1c = _0x17dfc2 + _0x17dfc2; _0x440e1c <= _0x4fedc6; _0x440e1c += _0x17dfc2) {\n            _0x3ef4ce[_0x440e1c] = ![];\n        }\n    }\n    var _0xa3ed1a = {};\n    for (var _0x17dfc2 = 0x0; _0x17dfc2 <= _0x4fedc6; _0x17dfc2++) {\n        if (_0x3ef4ce[_0x17dfc2] !== ![])\n            _0xa3ed1a[_0x3ef4ce[_0x17dfc2]] = !![];\n    }\n    return _0xa3ed1a;\n}\nvar p = prime(0xf423f);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var v = Arr['shift']();\n    if (v == '0\\x200\\x200')\n        break;\n    var adn = v['split']('\\x20')['map'](Number);\n    var cnt = 0x0;\n    var sum = adn[0x0] - adn[0x1];\n    while (cnt != adn[0x2]) {\n        sum += adn[0x1];\n        if (p['hasOwnProperty'](sum))\n            cnt++;\n    }\n    console['log'](sum);\n}", "test_cases": [["367 186 151\n179 10 203\n271 37 39\n103 230 1\n27 104 185\n253 50 85\n1 1 1\n9075 337 210\n307 24 79\n331 221 177\n259 170 40\n269 58 102\n0 0 0", "92809\n6709\n12037\n103\n93523\n14503\n2\n899429\n5107\n412717\n22699\n25673"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var v=Arr.shift();\n   if(v==\"0 0 0\")break;\n   var adn=v.split(\" \").map(Number);\n   var cnt=0;\n   var sum=adn[0]-adn[1];\n   while(cnt!=adn[2]){\n      sum+=adn[1];\n      if(p.hasOwnProperty(sum))cnt++;\n   }\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00735_1", "type": "JavaScript", "obfuscated": "var ms = [];\nvar flag = [];\nfor (var i = 0x0; i < 0x493e0; i++)\n    flag[i] = !![];\nvar i = 0x1;\nwhile (!![]) {\n    var m = 0x7 * i - 0x1;\n    var s = 0x7 * i + 0x1;\n    if (m > 0x493e0)\n        break;\n    i++;\n    if (flag[m])\n        ms['push'](m);\n    if (flag[s])\n        ms['push'](s);\n    var j = 0x2;\n    while (!![]) {\n        if (m * j > 0x493e0)\n            break;\n        flag[m * j] = ![];\n        flag[s * j] = ![];\n        j++;\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x1)\n        break;\n    var ans = [];\n    var i = 0x0;\n    ms['some'](function (_0xe8d7aa) {\n        if (n % _0xe8d7aa == 0x0)\n            ans['push'](_0xe8d7aa);\n        return n < _0xe8d7aa;\n    });\n    console['log'](n + ':\\x20' + ans['join']('\\x20'));\n}", "test_cases": [["205920\n262144\n262200\n279936\n299998\n1", "205920: 6 8 13 15 20 22 55 99\n262144: 8\n262200: 6 8 15 20 50 57 69 76 92 190 230 475 575 874 2185\n279936: 6 8 27\n299998: 299998"]], "original": "var ms=[];\nvar flag=[];\nfor(var i=0;i<300000;i++)flag[i]=true;\nvar i=1;\nwhile(true){\n   var m=(7*i)-1;\n   var s=(7*i)+1;\n   if(m>300000)break;\n   i++;\n   if(flag[m])ms.push(m);\n   if(flag[s])ms.push(s);\n   var j=2;\n   while(true){\n      if(m*j>300000)break;\n      flag[m*j]=false;\n      flag[s*j]=false;\n      j++;\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==1)break;\n   var ans=[];\n   var i=0;\n   ms.some(function(v){\n      if(n%v==0)ans.push(v);\n      return (n<v);\n   });\n   console.log(n+\": \"+ans.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00767_1", "type": "JavaScript", "obfuscated": "function HW() {\n    var _0x3dd0eb = [];\n    for (var _0x588efe = 0x1; _0x588efe < 0x96; _0x588efe++) {\n        for (var _0x55fa23 = _0x588efe + 0x1; _0x55fa23 <= 0x96; _0x55fa23++) {\n            _0x3dd0eb['push']([\n                _0x588efe,\n                _0x55fa23,\n                _0x588efe * _0x588efe + _0x55fa23 * _0x55fa23\n            ]);\n        }\n    }\n    _0x3dd0eb['sort'](function (_0x34fd1d, _0x6560f6) {\n        if (_0x34fd1d[0x2] == _0x6560f6[0x2])\n            return _0x34fd1d[0x0] - _0x6560f6[0x0];\n        else\n            return _0x34fd1d[0x2] - _0x6560f6[0x2];\n    });\n    return _0x3dd0eb;\n}\nvar Rectangles = HW();\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var hw = Arr['shift']()['split']('\\x20')['map'](Number);\n    var h = hw[0x0];\n    var w = hw[0x1];\n    if (h == 0x0 && w == 0x0)\n        break;\n    var num = h * h + w * w;\n    for (var i = 0x0; i < Rectangles['length']; i++) {\n        if (Rectangles[i][0x0] == h && Rectangles[i][0x1] == w)\n            break;\n    }\n    console['log'](Rectangles[i + 0x1][0x0] + '\\x20' + Rectangles[i + 0x1][0x1]);\n}", "test_cases": [["1 2\n1 3\n2 3\n1 4\n2 4\n5 6\n1 8\n4 7\n98 100\n99 100\n0 0", "1 3\n2 3\n1 4\n2 4\n3 4\n1 8\n4 7\n2 8\n3 140\n89 109"]], "original": "function HW(){\n   var arr=[];\n   for(var i=1;i<150;i++){\n      for(var j=i+1;j<=150;j++){\n         arr.push([i,j,i*i+j*j]);\n      }\n   }\n   arr.sort(function(a,b){\n      if(a[2]==b[2])return a[0]-b[0];\n      else return a[2]-b[2];\n   });\n   return arr;\n}\nvar Rectangles=HW();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var hw=Arr.shift().split(\" \").map(Number);\n   var h=hw[0];\n   var w=hw[1];\n   if(h==0 && w==0)break;\n   var num=h*h+w*w;\n   for(var i=0;i<Rectangles.length;i++){\n      if(Rectangles[i][0]==h &&Rectangles[i][1]==w)break;\n   }\n   console.log(Rectangles[i+1][0]+\" \"+Rectangles[i+1][1]);\n}", "language": "JavaScript"}
{"filename": "p00773_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var xys = Arr['shift']()['split']('\\x20')['map'](Number);\n    var x = xys[0x0];\n    var y = xys[0x1];\n    var s = xys[0x2];\n    if (x == 0x0 && y == 0x0 && s == 0x0)\n        break;\n    var max = 0x0;\n    for (var i = 0x1; i <= s - 0x1; i++) {\n        for (var j = 0x1; j <= s - 0x1; j++) {\n            var a = Math['floor'](i * (0x64 + x) / 0x64) + Math['floor'](j * (0x64 + x) / 0x64);\n            if (a > s)\n                break;\n            if (a == s) {\n                var b = Math['floor'](i * (0x64 + y) / 0x64) + Math['floor'](j * (0x64 + y) / 0x64);\n                max = Math['max'](max, b);\n                break;\n            }\n        }\n    }\n    console['log'](max);\n}", "test_cases": [["5 8 105\n8 5 105\n1 2 24\n99 98 24\n12 13 26\n1 22 23\n1 13 201\n13 16 112\n2 24 50\n1 82 61\n1 84 125\n1 99 999\n99 1 999\n98 99 999\n1 99 11\n99 1 12\n0 0 0", "109\n103\n24\n24\n26\n27\n225\n116\n62\n111\n230\n1972\n508\n1004\n20\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var xys=Arr.shift().split(\" \").map(Number);\n   var x=xys[0];\n   var y=xys[1];\n   var s=xys[2];\n   if(x==0 && y==0 && s==0)break;\n   var max=0;\n   for(var i=1;i<=s-1;i++){\n      for(var j=1;j<=s-1;j++){\n         var a=Math.floor(i*(100+x)/100)+Math.floor(j*(100+x)/100);\n         if(a>s)break;\n         if(a==s){\n            var b=Math.floor(i*(100+y)/100)+Math.floor(j*(100+y)/100);\n            max=Math.max(max,b);\n            break;\n         }\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00788_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var pn = arr['shift']()['split']('\\x20')['map'](Number);\n    if (pn['join']('\\x20') == '0\\x200')\n        break;\n    var p = Math['sqrt'](pn[0x0]);\n    var n = pn[0x1];\n    var max = 0x0;\n    var min = Infinity;\n    var ans = [];\n    for (var i = 0x1; i <= n; i++) {\n        for (var j = 0x1; j <= n; j++) {\n            var v = i / j;\n            if (p > v && max < v) {\n                max = v;\n                ans[0x1] = i + '/' + j;\n            } else if (p < v && min > v) {\n                min = v;\n                ans[0x0] = i + '/' + j;\n            }\n        }\n    }\n    console['log'](ans['join']('\\x20'));\n}", "test_cases": [["2 5\n3 10\n5 100\n0 0", "3/2 4/3\n7/4 5/3\n85/38 38/17"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\nvar pn=arr.shift().split(\" \").map(Number);\nif(pn.join(\" \")==\"0 0\")break;\nvar p=Math.sqrt(pn[0]);\nvar n=pn[1];\nvar max=0;\nvar min=Infinity;\nvar ans=[];\nfor(var i=1;i<=n;i++){\nfor(var j=1;j<=n;j++){\nvar v=i/j;\nif(p>v && max<v){\nmax=v;\nans[1]=i+\"/\"+j;\n}else if(p<v && min>v){\nmin=v;\nans[0]=i+\"/\"+j;\n}\n}\n}\nconsole.log(ans.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00790_1", "type": "JavaScript", "obfuscated": "function move(_0x48a01e, _0x11ef35, _0x17ebe5, _0x2a54cd, _0x4c24f7, _0x59ab24) {\n    var _0x141b00 = this['toString']();\n    if (_0x141b00 == 's')\n        return [\n            _0x11ef35,\n            _0x59ab24,\n            _0x17ebe5,\n            _0x2a54cd,\n            _0x48a01e,\n            _0x4c24f7\n        ];\n    else if (_0x141b00 == 'n')\n        return [\n            _0x4c24f7,\n            _0x48a01e,\n            _0x17ebe5,\n            _0x2a54cd,\n            _0x59ab24,\n            _0x11ef35\n        ];\n    else if (_0x141b00 == 'w')\n        return [\n            _0x2a54cd,\n            _0x11ef35,\n            _0x48a01e,\n            _0x59ab24,\n            _0x4c24f7,\n            _0x17ebe5\n        ];\n    else if (_0x141b00 == 'e')\n        return [\n            _0x17ebe5,\n            _0x11ef35,\n            _0x59ab24,\n            _0x48a01e,\n            _0x4c24f7,\n            _0x2a54cd\n        ];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var dice = [\n        0x1,\n        0x2,\n        0x3,\n        0x4,\n        0x5,\n        0x6\n    ];\n    while (n--) {\n        var str = arr['shift']();\n        dice = move['apply'](str[0x0], dice);\n    }\n    console['log'](dice[0x0]);\n}", "test_cases": [["1\nnorth\n3\nnorth\neast\nsouth\n0", "5\n1"]], "original": "function move(d1,d2,d3,d4,d5,d6){\n   var x=this.toString();\n   if(x==\"s\")return [d2,d6,d3,d4,d1,d5];\n   else if(x==\"n\")return [d5,d1,d3,d4,d6,d2];\n   else if(x==\"w\")return [d4,d2,d1,d6,d5,d3];\n   else if(x==\"e\")return [d3,d2,d6,d1,d5,d4];\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var dice=[1,2,3,4,5,6];\n   while(n--){\n      var str=arr.shift();\n      dice=move.apply(str[0],dice);\n   }\n   console.log(dice[0]);\n}", "language": "JavaScript"}
{"filename": "p01085_1", "type": "JavaScript", "obfuscated": "function Main(_0x5eea5a) {\n    _0x5eea5a = _0x5eea5a['split']('\\x0a');\n    var _0x76fb6d = 0x0;\n    while (0x1) {\n        _0x5eea5a[_0x76fb6d] = _0x5eea5a[_0x76fb6d]['split']('\\x20');\n        var _0x4400dc = parseInt(_0x5eea5a[_0x76fb6d][0x0], 0xa);\n        var _0x197f8c = parseInt(_0x5eea5a[_0x76fb6d][0x1], 0xa);\n        var _0x32f2f9 = parseInt(_0x5eea5a[_0x76fb6d++][0x2], 0xa);\n        if (_0x4400dc == 0x0 && _0x197f8c == 0x0 && _0x32f2f9 == 0x0)\n            break;\n        var _0x1a44b5 = 0x0, _0x470bc2 = 0x0;\n        var _0x3431c0 = [];\n        for (var _0x3881e9 = 0x0; _0x3881e9 < _0x4400dc; _0x3881e9++)\n            _0x3431c0[_0x3881e9] = parseInt(_0x5eea5a[_0x76fb6d++], 0xa);\n        for (var _0x3881e9 = _0x197f8c - 0x1; _0x3881e9 < _0x32f2f9; _0x3881e9++) {\n            if (_0x3431c0[_0x3881e9] - _0x3431c0[_0x3881e9 + 0x1] >= _0x1a44b5) {\n                _0x1a44b5 = _0x3431c0[_0x3881e9] - _0x3431c0[_0x3881e9 + 0x1];\n                _0x470bc2 = _0x3881e9;\n            }\n        }\n        console['log'](_0x470bc2 + 0x1);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 2 4\n100\n90\n82\n70\n65\n5 2 4\n100\n90\n80\n75\n65\n3 1 2\n5000\n4000\n3000\n4 2 3\n10000\n10000\n8000\n8000\n4 2 3\n10000\n10000\n10000\n8000\n5 2 3\n100\n80\n68\n60\n45\n0 0 0", "3\n4\n2\n2\n3\n2"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    var k = 0;\n    while(1){\n        input[k] = input[k].split(\" \");\n        var m = parseInt(input[k][0],10);\n        var nmin = parseInt(input[k][1],10);\n        var nmax = parseInt(input[k++][2],10);\n        if(m == 0 && nmin == 0 && nmax == 0)\n            break;\n\n        var maxg = 0,maxn = 0;\n\n        var p = [];\n        for(var i = 0;i < m;i++)\n            p[i] = parseInt(input[k++],10);\n\n        for(var i = nmin - 1;i < nmax;i++){\n            if(p[i] - p[i + 1] >= maxg){\n                maxg = p[i] - p[i + 1];\n                maxn = i;\n            }\n        }\n        console.log(maxn + 1);\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p01102_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var a = arr['shift']();\n    if (a == '.')\n        break;\n    var b = arr['shift']();\n    var memo = [];\n    var aa = a['replace'](/\".*?\"/g, function (_0x4145c0) {\n        memo['push'](_0x4145c0);\n        return '\\x22';\n    });\n    var cnt = 0x0;\n    var bb = b['replace'](/\".*?\"/g, function (_0x39f6c9) {\n        if (_0x39f6c9 != memo['shift']())\n            cnt++;\n        return '\\x22';\n    });\n    if (aa == bb && cnt == 0x0)\n        console['log']('IDENTICAL');\n    else if (aa == bb && cnt == 0x1)\n        console['log']('CLOSE');\n    else if (aa != bb || aa == bb && cnt > 0x1)\n        console['log']('DIFFERENT');\n}", "test_cases": [["print\"hello\";print123\nprint\"hello\";print123\nread\"B1input\";solve;output;\nread\"B2\";solve;output;\nread\"C1\";solve;output\"C1ans\";\nread\"C2\";solve;output\"C2ans\";\n\"\"\"\"\"\"\"\"\n\"\"\"42\"\"\"\"\"\nslow\"program\"\nfast\"code\"\n\"super\"fast\"program\"\n\"super\"faster\"program\"\nX\"\"\nX\nI\"S\"\"CREAM\"\nI\"CE\"\"CREAM\"\n11\"22\"11\n1\"33\"111\n.", "IDENTICAL\nCLOSE\nDIFFERENT\nCLOSE\nDIFFERENT\nDIFFERENT\nDIFFERENT\nCLOSE\nDIFFERENT"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var a = arr.shift();\n   if(a==\".\")break;\n   var b = arr.shift();\n   var memo=[];\n   var aa = a.replace(/\".*?\"/g,function(s){\n      memo.push(s);\n      return \"\\\"\";\n   });\n   var cnt =0;\n   var bb = b.replace(/\".*?\"/g,function(s){\n      if(s != memo.shift())cnt++;\n      return \"\\\"\";\n   });\n   if(aa==bb && cnt==0) console.log(\"IDENTICAL\");\n   else if( aa==bb && cnt==1) console.log(\"CLOSE\");\n   else if(aa != bb || (aa==bb && cnt>1))console.log(\"DIFFERENT\");\n}\n", "language": "JavaScript"}
{"filename": "p01126_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var A = Arr['shift']();\n    if (A == '0\\x200\\x200')\n        break;\n    var arr = A['split']('\\x20')['map'](Number);\n    var m = arr[0x1];\n    var start = arr[0x2];\n    var hpq = [];\n    for (var i = 0x0; i < m; i++)\n        hpq['push'](Arr['shift']());\n    hpq['sort'](function (_0x20ad51, _0x5b8366) {\n        _0x20ad51 = _0x20ad51['split']('\\x20')[0x0] - 0x0;\n        _0x5b8366 = _0x5b8366['split']('\\x20')[0x0] - 0x0;\n        if (_0x20ad51 >= _0x5b8366)\n            return -0x1;\n        else\n            return 0x1;\n    });\n    var H = 0x3e9;\n    for (var i = 0x0; i < hpq['length']; i++) {\n        var HPQ = hpq[i]['split']('\\x20')['map'](Number);\n        var h = HPQ[0x0];\n        var p = HPQ[0x1];\n        var q = HPQ[0x2];\n        if (H == h)\n            continue;\n        if (start == p || start == q) {\n            H = h;\n            start = start == p ? q : p;\n        }\n    }\n    console['log'](start);\n}", "test_cases": [["4 4 1\n3 1 2\n2 2 3\n3 3 4\n1 3 4\n0 0 0", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var A=Arr.shift();\n   if(A==\"0 0 0\")break;\n   var arr=A.split(\" \").map(Number);\n   var m=arr[1];\n   var start=arr[2];\n   var hpq=[];\n   for(var i=0;i<m;i++)hpq.push(Arr.shift());\n   hpq.sort(function(a,b){\n      a=(a.split(\" \"))[0]-0;\n      b=(b.split(\" \"))[0]-0;\n      if(a>=b)return -1;\n      else return 1;\n   });\n  var H=1001;\n   for(var i=0;i<hpq.length;i++){\n      var HPQ=hpq[i].split(\" \").map(Number);\n      var h=HPQ[0];\n      var p=HPQ[1];\n      var q=HPQ[2];\n      if(H==h)continue;\n      if(start==p || start==q){\n         H=h;\n         start=(start==p)?q:p;\n      }\n   }\n   console.log(start);\n}", "language": "JavaScript"}
{"filename": "p01137_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var e = Arr['shift']() - 0x0;\n    if (e == 0x0)\n        break;\n    var min = Infinity;\n    for (var z = 0x0; z <= 0x64; z++) {\n        for (var y = 0x0; y <= 0x3e8; y++) {\n            var x = e - (Math['pow'](z, 0x3) + Math['pow'](y, 0x2));\n            if (x < 0x0)\n                break;\n            min = Math['min'](min, z + y + x);\n        }\n    }\n    console['log'](min);\n}", "test_cases": [["1\n2\n4\n27\n300\n1250\n0", "1\n2\n2\n3\n18\n44"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var e=Arr.shift()-0;\n   if(e==0)break;\n   var min=Infinity;\n   for(var z=0;z<=100;z++){\n      for(var y=0;y<=1000;y++){\n         var x=e-(Math.pow(z,3)+Math.pow(y,2));\n         if(x<0)break;\n         min=Math.min(min,z+y+x)\n      }\n   }\n   console.log(min);\n}", "language": "JavaScript"}
{"filename": "p01202_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nwhile (n--) {\n    var ary = arr['shift']()['split']('');\n    var ans = 'Yes';\n    var s = '';\n    ary['forEach'](function (_0x1871ef) {\n        if (_0x1871ef == s)\n            ans = 'No';\n        s = _0x1871ef;\n    });\n    console['log'](ans);\n}", "test_cases": [["3\nUU\nRDUL\nULDURDULDURDULDURDULDURD", "No\nYes\nYes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var ary=arr.shift().split(\"\");\n   var ans=\"Yes\";\n   var s=\"\";\n   ary.forEach(function(v){\n      if(v==s)ans=\"No\";\n      s=v;\n   });\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p01227_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar t = arr['shift']() - 0x0;\nwhile (t--) {\n    var [n, k] = arr['shift']()['split']('\\x20')['map'](Number);\n    var x = arr['shift']()['split']('\\x20')['map'](Number);\n    var d = x[x['length'] - 0x1] - x[0x0];\n    var a = [];\n    for (var i = 0x0; i < x['length'] - 0x1; i++)\n        a['push'](x[i + 0x1] - x[i]);\n    a['sort']((_0x53aeb2, _0x32e264) => _0x32e264 - _0x53aeb2);\n    var sum = 0x0;\n    for (var i = 0x0; i < k - 0x1; i++) {\n        if (i > a['length'] - 0x1)\n            break;\n        sum += a[i];\n    }\n    console['log'](d - sum);\n}", "test_cases": [["6\n5 2\n10 30 40 70 100\n7 3\n3 6 10 17 21 26 28\n1 1\n100\n2 1\n0 1000000\n3 5\n30 70 150\n6 4\n0 10 20 30 40 50", "60\n13\n0\n1000000\n0\n20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar t=arr.shift()-0;\nwhile(t--){\n   var [n,k]=arr.shift().split(\" \").map(Number);\n   var x=arr.shift().split(\" \").map(Number);\n   var d=x[x.length-1]-x[0];\n   var a=[];\n   for(var i=0;i<x.length-1;i++)a.push(x[i+1]-x[i]);\n   a.sort((a,b)=>b-a);\n   var sum=0;\n   for(var i=0;i<k-1;i++){\n      if(i>a.length-1)break;\n      sum+=a[i];\n   }\n   console.log(d-sum);\n}\n", "language": "JavaScript"}
{"filename": "p01267_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (arr['join']('') == '00000')\n        break;\n    var y = Arr['shift']()['split']('\\x20')['map'](Number);\n    (function (_0x347604, _0x3713bd, _0x2e2672, _0x4bd16a, _0x30478d) {\n        var _0x3142cb = 0x0;\n        while (!![]) {\n            if (y[0x0] == _0x30478d)\n                y['shift']();\n            if (y['length'] == 0x0) {\n                console['log'](_0x3142cb);\n                break;\n            }\n            _0x30478d = (_0x3713bd * _0x30478d + _0x2e2672) % _0x4bd16a;\n            _0x3142cb++;\n            if (_0x3142cb == 0x2711) {\n                console['log'](-0x1);\n                break;\n            }\n        }\n    }['apply'](null, arr));\n}", "test_cases": [["1 5 7 11 10\n10\n2 5 7 11 10\n2 4\n2 1 1 256 0\n128 255\n2 0 0 1 0\n1234 5678\n2 1 1 100 0\n99 98\n2 1 1 100 0\n99 99\n2 1 1 10000 0\n1 0\n2 1 1 10000 0\n2 1\n0 0 0 0 0", "0\n3\n255\n-1\n198\n199\n10000\n-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr.join(\"\")==\"00000\")break;\n   var y=(Arr.shift()).split(\" \").map(Number);\n   (function(N, A, B, C, X){\n      var i=0;\n      while(true){\n         if(y[0]==X)y.shift();\n         if(y.length==0){console.log(i);break;}\n         X=((A*X)+B)%C;\n         i++;\n         if(i==10001){console.log(-1);break;}\n      }\n   }).apply(null,arr);\n}", "language": "JavaScript"}
{"filename": "p01398_1", "type": "JavaScript", "obfuscated": "var objStr = {};\nvar objNum = {};\nvar abc = 'abcdefghijklmnopqrstuvwxyz'['split']('');\nabc['forEach'](function (_0x5c7e65, _0x26c6e6) {\n    objStr[_0x5c7e65] = _0x26c6e6;\n    objNum[_0x26c6e6] = _0x5c7e65;\n});\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    var str = Arr['shift']();\n    var AB = [];\n    for (var i = 0x0; i < N; i++) {\n        var ab = Arr['shift']()['split']('\\x20')['map'](Number);\n        AB['push'](ab);\n    }\n    AB['reverse']();\n    var s = str['split']('');\n    for (var i = 0x0; i < N; i++) {\n        var ab = AB[i];\n        var plus = ab[0x1] - ab[0x0];\n        var m1 = s[ab[0x0] - 0x1];\n        var m2 = s[ab[0x1] - 0x1];\n        var n1 = objStr[m1] + plus;\n        var n2 = objStr[m2] + plus;\n        s[ab[0x0] - 0x1] = objNum[n2 % abc['length']];\n        s[ab[0x1] - 0x1] = objNum[n1 % abc['length']];\n    }\n    console['log'](s['join'](''));\n}", "test_cases": [["1\ntojxo\n1 4\n5\nuhcqmlmkv\n4 5\n6 9\n3 6\n1 7\n3 6\n5\nshzxadexonr\n8 9\n3 9\n5 8\n4 9\n10 11\n0", "aojwo\nshinryaku\nshitadegeso"]], "original": "var objStr={};\nvar objNum={};\nvar abc=\"abcdefghijklmnopqrstuvwxyz\".split(\"\");\nabc.forEach(function(v,i){\n   objStr[v]=i;\n   objNum[i]=v;\n});\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var str=Arr.shift();\n   var AB=[];\n   for(var i=0;i<N;i++){\n      var ab=(Arr.shift()).split(\" \").map(Number);\n      AB.push(ab);\n   }\n   AB.reverse();\n   var s=str.split(\"\");\n   for(var i=0;i<N;i++){\n      var ab=AB[i];\n      var plus=ab[1]-ab[0];\n      var m1=s[ab[0]-1];\n      var m2=s[ab[1]-1];\n      var n1=objStr[m1]+plus;\n      var n2=objStr[m2]+plus;\n      s[ab[0]-1]=objNum[n2%abc.length];\n      s[ab[1]-1]=objNum[n1%abc.length];\n   }\n   console.log(s.join(\"\"));\n}", "language": "JavaScript"}
{"filename": "p01694_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var ary = arr['shift']()['split']('\\x20');\n    var L = 0x0;\n    var R = 0x0;\n    var UD = 0x2;\n    var cnt = 0x0;\n    ary['forEach'](function (_0x19daa1) {\n        if (_0x19daa1 == 'lu')\n            L = 0x1;\n        else if (_0x19daa1 == 'ru')\n            R = 0x1;\n        else if (_0x19daa1 == 'ld')\n            L = 0x0;\n        else if (_0x19daa1 == 'rd')\n            R = 0x0;\n        if (UD == L + R) {\n            cnt++;\n            UD = UD == 0x2 ? 0x0 : 0x2;\n        }\n    });\n    console['log'](cnt);\n}", "test_cases": [["4\nlu ru ld rd\n4\nlu ld lu ru\n1\nlu\n10\nru lu ld rd ru rd ru lu rd ld\n0", "2\n1\n0\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=arr.shift().split(\" \");\n   var L=0;\n   var R=0;\n   var UD=2;\n   var cnt=0;\n   ary.forEach(function(v){\n      if(v==\"lu\")L=1;\n      else if(v==\"ru\")R=1;\n      else if(v==\"ld\")L=0;\n      else if(v==\"rd\")R=0;\n      if(UD==L+R){\n         cnt++;\n         UD=(UD==2)?0:2;\n      }\n   });\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p01845_1", "type": "JavaScript", "obfuscated": "function Main(_0xf1c770) {\n    _0xf1c770 = _0xf1c770['split']('\\x0a');\n    for (var _0x56f335 = 0x0; 0x1; _0x56f335++) {\n        _0xf1c770[_0x56f335] = _0xf1c770[_0x56f335]['split']('\\x20');\n        var _0x1aa141 = parseInt(_0xf1c770[_0x56f335][0x0], 0xa);\n        var _0xff7138 = parseInt(_0xf1c770[_0x56f335][0x1], 0xa);\n        var _0x58c6d3 = parseInt(_0xf1c770[_0x56f335][0x2], 0xa);\n        var _0x1abafb = parseInt(_0xf1c770[_0x56f335][0x3], 0xa);\n        if (_0x1aa141 == 0x0 && _0xff7138 == 0x0 && _0x58c6d3 == 0x0 && _0x1abafb == 0x0)\n            break;\n        var _0x17170c = _0x58c6d3 * _0xff7138;\n        if (_0x17170c <= _0x1aa141)\n            console['log']('0');\n        else {\n            console['log'](Math['floor']((_0x17170c - _0x1aa141 + _0x1abafb - 0x1) / _0x1abafb));\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 5 3 4\n2 5 2 3\n91 13 7 62\n10 1 3 5\n20 100 2 20\n2 14 7 1\n0 0 0 0", "2\n3\n0\n0\n9\n96"]], "original": "function Main(input){\n    input = input.split(\"\\n\");\n    for(var i = 0;1;i++){\n        input[i] = input[i].split(\" \");\n        var r0 = parseInt(input[i][0],10);\n        var w0 = parseInt(input[i][1],10);\n        var c = parseInt(input[i][2],10);\n        var r = parseInt(input[i][3],10);\n        if(r0 == 0 && w0 == 0 && c == 0 && r == 0)\n            break;\n\n        var a = c * w0;\n        if(a <= r0)\n            console.log(\"0\");\n        else{\n            console.log(Math.floor((a - r0 + r - 1) / r));\n        }\n    }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p02016_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nif (input == 'ani')\n    console['log']('square1001');\nelse\n    console['log']('e869120');", "test_cases": [["ani", "square1001"], ["otouto", "e869120"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nif(input==\"ani\")console.log(\"square1001\");\nelse console.log(\"e869120\");\n", "language": "JavaScript"}
{"filename": "p02125_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar max = 0x0;\nfor (var i = 0x1; i <= n; i++) {\n    var s = (i['toString'](0x2) + '')['split']('')['map'](Number);\n    var sum = s['reduce']((_0x5c77eb, _0x8b0f36) => _0x5c77eb + _0x8b0f36);\n    max = Math['max'](max, sum);\n}\nconsole['log'](max);", "test_cases": [["2", "1"], ["9", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n = arr.shift()-0;\nvar max=0;\nfor(var i=1;i<=n;i++){\n   var s = (i.toString(2) + \"\").split(\"\").map(Number);\n   var sum = s.reduce((a,b)=>a+b);\n   max=Math.max(max,sum);\n}\nconsole.log(max);\n", "language": "JavaScript"}
{"filename": "p02326_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [h, w] = arr['shift']()['split']('\\x20')['map'](Number);\nvar yx = [];\nfor (var i = 0x0; i < h; i++) {\n    yx[i] = arr['shift']()['split']('\\x20')['map'](_0x5d628e => 0x1 - (_0x5d628e - 0x0));\n}\nfor (var y = 0x1; y < h; y++) {\n    for (var x = 0x1; x < w; x++) {\n        if (yx[y][x] == 0x1)\n            yx[y][x] = Math['min'](yx[y - 0x1][x], yx[y][x - 0x1], yx[y - 0x1][x - 0x1]) + 0x1;\n    }\n}\nvar max = 0x0;\nfor (var y = 0x0; y < h; y++) {\n    for (var x = 0x0; x < w; x++) {\n        max = Math['max'](max, yx[y][x]);\n    }\n}\nconsole['log'](max * max);", "test_cases": [["4 5\n0 0 1 0 0\n1 0 0 0 0\n0 0 0 1 0\n0 0 0 1 0", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar yx=[];\nfor(var i=0;i<h;i++){\n   yx[i]=arr.shift().split(\" \").map(v=>1-(v-0));\n}\nfor(var y=1;y<h;y++){\n   for(var x=1;x<w;x++){\n      if(yx[y][x]==1)yx[y][x]=Math.min(yx[y-1][x],yx[y][x-1],yx[y-1][x-1])+1;\n   }\n}\nvar max=0;\nfor(var y=0;y<h;y++){\n   for(var x=0;x<w;x++){\n      max=Math.max(max,yx[y][x]);\n   }\n}\nconsole.log(max*max);\n", "language": "JavaScript"}
{"filename": "p02380_1", "type": "JavaScript", "obfuscated": "var reader = require('readline')['createInterface']({\n    'input': process['stdin'],\n    'output': process['stdout']\n});\nreader['on']('line', function (_0x5bc15f) {\n    var _0xc7613c, _0x507157, _0x1639bc, _0x27de36, _0x2a6ef;\n    var _0x2bd269 = _0x5bc15f['split']('\\x20');\n    var _0x5652b4 = Number(_0x2bd269[0x0]);\n    var _0x4346a5 = Number(_0x2bd269[0x1]);\n    var _0x1eaded = Number(_0x2bd269[0x2]);\n    _0xc7613c = _0x1eaded / 0xb4 * Math['PI'];\n    _0x507157 = Math['sqrt'](_0x5652b4 * _0x5652b4 + _0x4346a5 * _0x4346a5 - 0x2 * _0x5652b4 * _0x4346a5 * Math['cos'](_0xc7613c));\n    _0x1639bc = _0x5652b4 * _0x4346a5 * Math['sin'](_0xc7613c) / 0x2;\n    _0x27de36 = _0x507157 + _0x5652b4 + _0x4346a5;\n    _0x2a6ef = _0x5652b4 * _0x4346a5 * Math['sin'](_0xc7613c) / _0x5652b4;\n    console['log'](_0x1639bc['toFixed'](0x8));\n    console['log'](_0x27de36['toFixed'](0x8));\n    console['log'](_0x2a6ef['toFixed'](0x8));\n    process['exit']();\n});\nprocess['stdin']['on']('end', function () {\n});", "test_cases": [["4 3 90", "6.00000000\n12.00000000\n3.00000000"]], "original": "var reader = require('readline').createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\nreader.on('line', function (line) {\n  var rad,a,S,L,h;\n  var e = line.split(' ');\n  var b = Number(e[0]);\n  var c = Number(e[1]);\n  var d = Number(e[2]);\n  rad = d / 180 * Math.PI;\n  a = Math.sqrt(b*b+c*c-2*b*c*Math.cos(rad));\n  S = (b*c*Math.sin(rad))/2;\n  L = a+b+c;\n  h = (b*c*Math.sin(rad))/b;\n  console.log(S.toFixed(8));\n  console.log(L.toFixed(8));\n  console.log(h.toFixed(8));\n  process.exit();\n});\nprocess.stdin.on('end', function () {\n});", "language": "JavaScript"}
{"filename": "p02382_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr[0x0] - 0x0;\nvar x = Arr[0x1]['split']('\\x20')['map'](Number);\nvar y = Arr[0x2]['split']('\\x20')['map'](Number);\nvar sum1 = 0x0;\nvar sum2 = 0x0;\nvar sum3 = 0x0;\nvar max = 0x0;\nfor (var i = 0x0; i < n; i++) {\n    var a = Math['abs'](x[i] - y[i]);\n    sum1 += a;\n    sum2 += Math['pow'](a, 0x2);\n    sum3 += Math['pow'](a, 0x3);\n    max = Math['max'](max, a);\n}\nconsole['log'](sum1['toFixed'](0x6));\nconsole['log'](Math['sqrt'](sum2)['toFixed'](0x6));\nconsole['log'](Math['pow'](sum3, 0x1 / 0x3)['toFixed'](0x6));\nconsole['log'](max['toFixed'](0x6));", "test_cases": [["3\n1 2 3\n2 0 4", "4.000000\n2.449490\n2.154435\n2.000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr[0]-0;\nvar x=Arr[1].split(\" \").map(Number);\nvar y=Arr[2].split(\" \").map(Number);\nvar sum1=0;\nvar sum2=0;\nvar sum3=0;\nvar max=0;\nfor(var i=0;i<n;i++){\n   var a=Math.abs(x[i]-y[i]);\n   sum1+=a;\n   sum2+=Math.pow(a,2);\n   sum3+=Math.pow(a,3);\n   max=Math.max(max,a);\n}\nconsole.log(sum1.toFixed(6));\nconsole.log(Math.sqrt(sum2).toFixed(6));\nconsole.log(Math.pow(sum3,1/3).toFixed(6));\nconsole.log(max.toFixed(6));", "language": "JavaScript"}
{"filename": "p02440_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar q = arr['shift']() - 0x0;\nvar s = '';\nfor (var i = 0x0; i < q; i++) {\n    var [c, b, e] = arr[i]['split']('\\x20')['map'](Number);\n    var m = a[b];\n    if (c == 0x0) {\n        for (var j = b; j < e; j++)\n            m = Math['min'](m, a[j]);\n    } else {\n        for (var j = b; j < e; j++)\n            m = Math['max'](m, a[j]);\n    }\n    s += m + '\\x0a';\n}\nconsole['log'](s['trim']());", "test_cases": [["7\n8 3 7 1 9 1 4\n3\n0 0 3\n0 1 5\n1 0 7", "3\n1\n9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [c,b,e]=arr[i].split(\" \").map(Number);\n   var m = a[b];\n   if(c==0){\n      for(var j=b;j<e;j++) m=Math.min(m,a[j]);\n   }else{\n      for(var j=b;j<e;j++) m=Math.max(m,a[j]);\n   }\n   s+=m+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript"}
{"filename": "p02469_1", "type": "JavaScript", "obfuscated": "function gcd(_0xd8e2e3, _0x2a565c) {\n    if (_0x2a565c > _0xd8e2e3)\n        return gcd(_0x2a565c, _0xd8e2e3);\n    if (_0x2a565c == 0x0)\n        return _0xd8e2e3;\n    return gcd(_0x2a565c, _0xd8e2e3 % _0x2a565c);\n}\nfunction lcm(_0x3dcc14, _0xecc24c) {\n    var _0x372261 = gcd(_0x3dcc14, _0xecc24c);\n    return _0x3dcc14 * _0xecc24c / _0x372261;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nvar n = +lines['shift']();\nvar nums = lines['shift']()['split']('\\x20')['map'](function (_0x2180cb) {\n    return +_0x2180cb;\n});\nvar p = 0x1;\nfor (var i = 0x0; i < n; i++) {\n    p = lcm(p, nums[i]);\n}\nconsole['log'](p);", "test_cases": [["3\n3 4 6", "12"], ["4\n1 2 3 5", "30"]], "original": "function gcd(a, b) {\n    if (b > a)\n        return gcd(b, a);\n    if (b == 0)\n        return a;\n\n    return gcd(b, a % b);\n}\nfunction lcm(a, b) {\n    var d = gcd(a, b);\n    return a * b / d;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nvar n = +lines.shift();\n\nvar nums = lines.shift().split(' ').map(function(num){return +num;});\nvar p = 1;\nfor (var i = 0; i < n; i++) {\n    p = lcm(p, nums[i]);\n}\n\nconsole.log(p);", "language": "JavaScript"}
{"filename": "p02540_1", "type": "JavaScript", "obfuscated": "function Main(_0x1b993a) {\n    _0x1b993a = _0x1b993a['split']('\\x0a');\n    const _0x4724dd = parseInt(_0x1b993a[0x0], 0xa);\n    var _0x20b8be = [];\n    var _0x2add9c = [];\n    for (var _0x4b59bb = 0x1; _0x4b59bb <= _0x4724dd; _0x4b59bb++) {\n        tmp = _0x1b993a[_0x4b59bb]['split']('\\x20')['map'](_0x42a7c2 => parseInt(_0x42a7c2, 0xa));\n        _0x20b8be['push'](tmp[0x0]);\n        _0x2add9c['push'](tmp[0x1]);\n    }\n    var _0x565e4f = [];\n    for (var _0x2d6b76 = 0x0; _0x2d6b76 < _0x4724dd; _0x2d6b76++) {\n        var _0x4130a8 = 0x0;\n        for (var _0xdd1414 = 0x0; _0xdd1414 < _0x4724dd; _0xdd1414++) {\n            if (_0x20b8be[_0x2d6b76] > _0x20b8be[_0xdd1414] && _0x2add9c[_0x2d6b76] > _0x2add9c[_0xdd1414] || _0x20b8be[_0x2d6b76] < _0x20b8be[_0xdd1414] && _0x2add9c[_0x2d6b76] < _0x2add9c[_0xdd1414]) {\n                _0x4130a8++;\n            }\n        }\n        _0x565e4f['push'](parseInt(_0x4130a8, 0xa));\n    }\n    for (var _0x2d6b76 = 0x0; _0x2d6b76 < _0x4724dd; _0x2d6b76++) {\n        var _0x4130a8 = 0x1;\n        for (var _0xdd1414 = 0x0; _0xdd1414 < _0x4724dd; _0xdd1414++) {\n            if (_0x20b8be[_0x2d6b76] > _0x20b8be[_0xdd1414] && _0x2add9c[_0x2d6b76] > _0x2add9c[_0xdd1414] || _0x20b8be[_0x2d6b76] < _0x20b8be[_0xdd1414] && _0x2add9c[_0x2d6b76] < _0x2add9c[_0xdd1414]) {\n                _0x4130a8 = _0x4130a8 + _0x565e4f[_0xdd1414];\n            }\n        }\n        console['log'](_0x4130a8);\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 4\n2 3\n3 1\n4 2", "1\n1\n2\n2"], ["7\n6 4\n4 3\n3 5\n7 1\n2 7\n5 2\n1 6", "3\n3\n1\n1\n2\n3\n2"]], "original": "function Main(input) {\n  input = input.split(\"\\n\");\n  \n  const N = parseInt(input[0], 10);\n\n  var x = [];\n  var y = [];\n\n  for (var i = 1; i <= N; i++) {\n    tmp = input[i].split(\" \").map(n => parseInt(n, 10));\n    x.push(tmp[0]);\n    y.push(tmp[1]);\n  }\n\n  var counts = [];\n\n  for(var j = 0; j < N; j++){\n    var count = 0;\n    for(var k = 0; k < N; k++){\n      if((x[j] > x[k] && y[j] > y[k])||(x[j] < x[k] && y[j] < y[k])){\n        count++;\n      }\n    }\n    counts.push(parseInt(count, 10))\n  }\n\n  for(var j = 0; j < N; j++){\n    var count = 1;\n    for(var k = 0; k < N; k++){\n      if((x[j] > x[k] && y[j] > y[k])||(x[j] < x[k] && y[j] < y[k])){\n        count = count + counts[k];\n      }\n    }\n    console.log(count);\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p02904_1", "type": "JavaScript", "obfuscated": "function Main(_0x4944d5) {\n    var _0x23f639 = _0x4944d5['split']('\\x0a')[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x837226 = _0x4944d5['split']('\\x0a')[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x41da82 = _0x4944d5['split']('\\x0a')[0x1]['split']('\\x20')['map'](_0x5e9844 => _0x5e9844 - 0x0);\n    var _0x2a37cc = [];\n    for (var _0xdeea0a = 0x0; _0xdeea0a < _0x23f639 - _0x837226 + 0x1; _0xdeea0a++) {\n        var _0x1bcecc = _0x41da82['slice'](_0xdeea0a, _0xdeea0a + _0x837226);\n        _0x1bcecc['sort'](compareNumbers);\n        _0x2a37cc[_0xdeea0a] = _0x41da82['slice'](0x0, _0xdeea0a)['concat'](_0x1bcecc)['concat'](_0x41da82['slice'](_0xdeea0a + _0x837226))['toString']();\n    }\n    var _0x5046c3 = new Set(_0x2a37cc);\n    console['log'](_0x5046c3['size']);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nfunction compareNumbers(_0x34304a, _0x196d1f) {\n    return _0x34304a - _0x196d1f;\n}", "test_cases": [["5 3\n0 2 1 4 3", "2"], ["4 4\n0 1 2 3", "1"], ["10 4\n2 0 1 3 7 5 4 6 8 9", "6"]], "original": "function Main(arg) {\n \n    var N = arg.split(\"\\n\")[0].split(\" \")[0]-0;\n    var K = arg.split(\"\\n\")[0].split(\" \")[1]-0;\n    var P = arg.split(\"\\n\")[1].split(\" \").map(v => v-0);\n\n    var ans = [];\n    for (var i = 0; i < N - K + 1; i++){\n        var tmp = P.slice(i, i + K);\n        tmp.sort(compareNumbers);\n        ans[i] = P.slice(0, i).concat(tmp).concat(P.slice(i + K)).toString();\n    }\n\n    var aa = new Set(ans);\n\n    console.log(aa.size);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n\nfunction compareNumbers(a, b) { //for sort\n    return a - b;\n}\n", "language": "JavaScript"}
{"filename": "p02978_1", "type": "JavaScript", "obfuscated": "function Main(_0x3ab6dd) {\n    _0x3ab6dd = _0x3ab6dd['split']('\\x0a');\n    const _0x262a56 = parseInt(_0x3ab6dd[0x0]);\n    const _0x2d0042 = _0x3ab6dd[0x1]['split']('\\x20')['map'](_0x2f08fe => parseInt(_0x2f08fe));\n    var _0x1b5780 = _0x2d0042;\n    while (!![]) {\n        var _0x2f087f = -0x1;\n        var _0x94d25e = [];\n        for (i = 0x1; i < _0x1b5780['length'] - 0x1; i++) {\n            if (_0x2f087f == -0x1 || _0x1b5780[_0x2f087f] > _0x1b5780[i])\n                _0x2f087f = i;\n            if (_0x2f087f == _0x1b5780[i] && _0x1b5780[i - 0x1] + _0x1b5780[i + 0x1] < _0x1b5780[_0x2f087f - 0x1] + _0x1b5780[_0x2f087f + 0x1])\n                _0x2f087f = i;\n        }\n        if (_0x1b5780[_0x2f087f] * 0x2 > _0x1b5780[_0x1b5780['length'] - 0x2])\n            _0x2f087f = _0x1b5780['length'] - 0x2;\n        for (i = 0x0; i < _0x1b5780['length']; i++) {\n            if (i == _0x2f087f - 0x1) {\n                _0x94d25e['push'](_0x1b5780[_0x2f087f - 0x1] + _0x1b5780[_0x2f087f]);\n            } else if (i == _0x2f087f) {\n            } else if (i == _0x2f087f + 0x1) {\n                _0x94d25e['push'](_0x1b5780[_0x2f087f + 0x1] + _0x1b5780[_0x2f087f]);\n            } else {\n                _0x94d25e['push'](_0x1b5780[i]);\n            }\n        }\n        _0x1b5780 = _0x94d25e;\n        if (_0x1b5780['length'] == 0x2)\n            break;\n    }\n    console['log'](_0x1b5780[0x0] + _0x1b5780[0x1]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n3 1 4 2", "16"], ["6\n5 2 4 1 6 9", "51"], ["10\n3 1 4 1 5 9 2 6 5 3", "115"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\tconst N = parseInt(input[0])\n\tconst As = input[1].split(\" \").map(x => parseInt(x))\n\tvar now = As\n\twhile(true){\n\t\tvar min = -1\n\t\tvar next = []\n\t\tfor(i=1; i<now.length-1; i++){\n\t\t\tif(min == -1 || now[min] > now[i]) min = i\n\t\t\tif(min == now[i] && now[i-1] + now[i+1] < now[min-1] + now[min+1]) min = i\n\t\t}\n\t\tif(now[min]*2 > now[now.length-2]) min = now.length-2\n\t\tfor(i=0; i<now.length; i++){\n\t\t\tif(i == min-1){\n\t\t\t\tnext.push(now[min-1]+now[min])\n\t\t\t}else if(i == min){\n\n\t\t\t}else if(i == min+1){\n\t\t\t\tnext.push(now[min+1]+now[min])\n\t\t\t}else{\n\t\t\t\tnext.push(now[i])\n\t\t\t}\n\t\t}\n\t\tnow = next\n\t\tif(now.length == 2) break\n\t}\n\tconsole.log(now[0] + now[1])\n}\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03135_1", "type": "JavaScript", "obfuscated": "function main(_0x6e1df2) {\n    const _0x2498a1 = _0x6e1df2['trim']()['split'](/\\s/)['map'](_0x1295d4 => {\n        return Number(_0x1295d4);\n    });\n    console['log']((_0x2498a1[0x0] / _0x2498a1[0x1])['toFixed'](0xa));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8 3", "2.6666666667"], ["99 1", "99.0000000000"], ["1 100", "0.0100000000"]], "original": "function main(input) {\n    const nums = input.trim().split(/\\s/).map(str=>{return Number(str)});\n    console.log((nums[0] / nums[1]).toFixed(10));\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));", "language": "JavaScript"}
{"filename": "p03187_1", "type": "JavaScript", "obfuscated": "function main(_0x32a223) {\n    'use strict';\n    const _0x3b5c01 = _0x32a223['split']('\\x0a');\n    const _0x561ba2 = _0x3b5c01[0x0]['split']('\\x20')['map'](_0x5a3481 => +_0x5a3481);\n    const _0x484735 = _0x561ba2[0x0];\n    const _0x25a120 = _0x561ba2[0x1];\n    let _0x324de5 = _0x3b5c01['slice'](0x1)['filter'](_0x31a981 => _0x31a981)['map'](_0x3b082e => +_0x3b082e);\n    let _0xf34e5b = [];\n    const _0x1d8755 = (_0x2de598, _0x2c270f, _0x43c793) => {\n        if (_0x2c270f['length'] === 0x0) {\n            _0xf34e5b['push'](_0x43c793);\n            return;\n        }\n        const _0x4cb6f2 = _0x2c270f[0x0] >= _0x2de598 ? _0x2c270f[0x0] - _0x2de598 : _0x484735 - _0x2de598 + _0x2c270f[0x0];\n        const _0xb9f6e5 = _0x2c270f[_0x2c270f['length'] - 0x1] <= _0x2de598 ? _0x2de598 - _0x2c270f[_0x2c270f['length'] - 0x1] : _0x2de598 + (_0x484735 - _0x2c270f[_0x2c270f['length'] - 0x1]);\n        const _0x17411b = _0x2c270f['concat']();\n        const _0x24e503 = _0x17411b['shift']();\n        const _0x173386 = _0x2c270f['concat']();\n        const _0x532e2e = _0x173386['pop']();\n        _0x1d8755(_0x24e503, _0x17411b, _0x43c793 + _0x4cb6f2);\n        _0x1d8755(_0x532e2e, _0x173386, _0x43c793 + _0xb9f6e5);\n    };\n    _0x1d8755(0x0, _0x324de5, 0x0);\n    console['log'](Math['max']['apply'](null, _0xf34e5b));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["10 3\n2\n7\n9", "15"], ["10 6\n1\n2\n3\n6\n7\n9", "27"], ["314159265 7\n21662711\n77271666\n89022761\n156626166\n160332356\n166902656\n298992265", "1204124749"]], "original": "function main(input) {\n    \"use strict\";\n    const lines = input.split(\"\\n\");\n    const firstLine = lines[0].split(\" \").map((value) => +value);\n    const L = firstLine[0];\n    const N = firstLine[1];\n    let xn = lines.slice(1).filter((value) => value).map((value) => +value);\n\n    let costs = [];\n    const search = (x, xn, sum) => {\n        if (xn.length === 0) {\n            costs.push(sum);\n            return;\n        }\n        const leftDistance = xn[0] >= x ? xn[0] - x : (L - x) + xn[0];\n        const rightDistance = xn[xn.length - 1] <= x ? x - xn[xn.length - 1] : x + (L - xn[xn.length - 1]);\n        const left = xn.concat();\n        const leftX = left.shift();\n        const right = xn.concat();\n        const rightX = right.pop();\n        search(leftX, left, sum + leftDistance);\n        search(rightX, right, sum + rightDistance);\n    }\n\n    search(0, xn, 0);\n    console.log(Math.max.apply(null, costs));\n}\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03195_1", "type": "JavaScript", "obfuscated": "function main(_0x3cd1a5) {\n    var _0x4bc6bd = parseInt(_0x3cd1a5[0x0]);\n    var _0x51a13d = ![];\n    for (var _0x4fd698 = 0x1; _0x4fd698 < _0x3cd1a5['length']; _0x4fd698++) {\n        var _0x245ad1 = parseInt(_0x3cd1a5[_0x4fd698]);\n        if (_0x245ad1 % 0x2 === 0x1)\n            _0x51a13d = !![];\n        ;\n    }\n    console['log'](_0x51a13d ? 'first' : 'second');\n}\nfunction parse(_0x3c0998) {\n    var _0x5ab163 = [];\n    var _0x104ba6 = _0x3c0998['split']('\\x20');\n    for (var _0x4caa73 = 0x0; _0x4caa73 < _0x104ba6['length']; _0x4caa73++) {\n        _0x5ab163['push'](parseInt(_0x104ba6[_0x4caa73]));\n    }\n    return _0x5ab163;\n}\nvar input = '';\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x2d9094) {\n    input += _0x2d9094;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['split']('\\x0a');\n    main(input);\n});", "test_cases": [["2\n1\n2", "first"], ["3\n100000\n30000\n20000", "second"]], "original": "function main(input){\n  var line1 = parseInt(input[0]);\n \n  var ans = false;\n  for (var i=1; i<input.length; i++){\n    var n = parseInt(input[i]);\n    \n    if (n%2 ===1)\n      ans = true;;\n  }\n\n  console.log(ans ? 'first' : 'second');\n}\n\n\nfunction parse(line){\n  var ret = [];\n  var arr = line.split(' ');\n  for (var i = 0; i < arr.length; i++) {\n    ret.push(parseInt(arr[i]));\n  }\n  return ret;\n}\n\nvar input = '';\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk) {\n  input += chunk;\n});\nprocess.stdin.on('end', function() {\n  input = input.split('\\n');\n  main(input);\n});\n", "language": "JavaScript"}
{"filename": "p03276_1", "type": "JavaScript", "obfuscated": "function Main(_0x396d24) {\n    _0x396d24 = _0x396d24['split']('\\x0a');\n    if (_0x396d24[_0x396d24['length'] - 0x1] === '') {\n        _0x396d24['pop']();\n    }\n    const _0x341a74 = _0x396d24[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x45f3e5 = _0x396d24[0x0]['split']('\\x20')[0x1] - 0x0;\n    const _0xb0e75c = _0x396d24[0x1]['split']('\\x20')['map'](_0x13e8a6 => {\n        return _0x13e8a6 - 0x0;\n    });\n    var _0x3d27a5 = _0xb0e75c['findIndex'](_0x5a7ec7 => {\n        return _0x34b0e5 => 0x0;\n    }) - _0x45f3e5;\n    if (_0x3d27a5 < 0x0) {\n        _0x3d27a5 = 0x0;\n    }\n    var _0x46d134;\n    var _0xed1ba3 = Infinity;\n    for (var _0x2756ce = 0x0; _0x2756ce < _0x45f3e5; _0x2756ce++) {\n        if (_0x3d27a5 + _0x2756ce + _0x45f3e5 - 0x1 >= _0xb0e75c['length']) {\n            break;\n        }\n        if (_0xb0e75c[_0x3d27a5 + _0x2756ce] * _0xb0e75c[_0x3d27a5 + _0x2756ce + _0x45f3e5 - 0x1] < 0x0) {\n            _0x46d134 = Math['min'](-_0xb0e75c[_0x3d27a5 + _0x2756ce], _0xb0e75c[_0x3d27a5 + _0x2756ce + _0x45f3e5 - 0x1]) - _0xb0e75c[_0x3d27a5 + _0x2756ce] + _0xb0e75c[_0x3d27a5 + _0x2756ce + _0x45f3e5 - 0x1];\n        } else {\n            _0x46d134 = Math['max'](Math['abs'](_0xb0e75c[_0x3d27a5 + _0x2756ce]), Math['abs'](_0xb0e75c[_0x3d27a5 + _0x2756ce + _0x45f3e5 - 0x1]));\n        }\n        _0xed1ba3 = Math['min'](_0xed1ba3, _0x46d134);\n    }\n    console['log'](_0xed1ba3);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5 3\n-30 -10 10 20 50", "40"], ["3 2\n10 20 30", "20"], ["1 1\n0", "0"], ["8 5\n-9 -7 -4 -3 1 2 3 4", "10"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const K=input[0].split(' ')[1]-0;\n  const x=input[1].split(' ').map(e=>{\n    return e-0;\n  });\n  var pointer=x.findIndex(e=>{\n    return e=>0;\n  })-K;\n  if(pointer<0){\n    pointer=0;\n  }\n  var temp;\n  var ret=Infinity;\n  for(var i=0;i<K;i++){\n    if(pointer+i+K-1>=x.length){\n      break;\n    }\n    if(x[pointer+i]*x[pointer+i+K-1]<0){\n      temp=Math.min(-x[pointer+i],x[pointer+i+K-1])-x[pointer+i]+x[pointer+i+K-1];\n    }else{\n      temp=Math.max(Math.abs(x[pointer+i]),Math.abs(x[pointer+i+K-1]));\n    }\n    ret=Math.min(ret,temp);\n  }\n  console.log(ret);\n      \n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03313_1", "type": "JavaScript", "obfuscated": "function Main(_0x261bb1) {\n    _0x261bb1 = _0x261bb1['split']('\\x0a');\n    var _0x3eaa04 = +_0x261bb1[0x0];\n    var _0x287ed3 = 0x1 << _0x3eaa04;\n    var _0x45238d = _0x261bb1[0x1]['split']('\\x20')['map'](_0x2c7418 => +_0x2c7418);\n    var _0x8ce5a2 = [_0x45238d[0x0]], _0x2cfd26 = [[\n                _0x45238d[0x0],\n                0x0\n            ]], _0x5b568e = [[\n                -0x1,\n                -0x1\n            ]];\n    for (var _0x3f75ed = 0x1; _0x3f75ed < _0x287ed3; _0x3f75ed++) {\n        _0x4d9ba5(_0x3f75ed);\n    }\n    console['log'](_0x8ce5a2['slice'](0x1)['join']('\\x0a'));\n    function _0x4d9ba5(_0x2f7504) {\n        var _0x12f548 = {}, _0x107725 = _0x2f7504, _0x48bad4 = 0x0;\n        while (_0x107725) {\n            _0x48bad4++;\n            _0x107725 >>= 0x1;\n        }\n        for (var _0x5036ce = 0x0; _0x5036ce < _0x48bad4; _0x5036ce++) {\n            var _0x351730 = _0x2f7504 & (0x1 << _0x5036ce ^ 0xfffff);\n            if (_0x351730 === _0x2f7504)\n                continue;\n            _0x12f548[_0x2cfd26[_0x351730][0x1]] = _0x2cfd26[_0x351730][0x0];\n            _0x12f548[_0x5b568e[_0x351730][0x1]] = _0x5b568e[_0x351730][0x0];\n        }\n        _0x107725 = [\n            _0x45238d[_0x2f7504],\n            _0x2f7504\n        ], _0x48bad4 = [\n            -0x1,\n            -0x1\n        ];\n        for (_0x5036ce in _0x12f548) {\n            if (_0x48bad4[0x0] > _0x12f548[_0x5036ce])\n                continue;\n            if (_0x107725[0x0] > _0x12f548[_0x5036ce])\n                _0x48bad4 = [\n                    _0x12f548[_0x5036ce],\n                    _0x5036ce\n                ];\n            else {\n                _0x48bad4 = _0x107725;\n                _0x107725 = [\n                    _0x12f548[_0x5036ce],\n                    _0x5036ce\n                ];\n            }\n        }\n        _0x8ce5a2[_0x2f7504] = Math['max'](_0x8ce5a2[_0x2f7504 - 0x1], _0x48bad4[0x0] + _0x107725[0x0]);\n        _0x2cfd26[_0x2f7504] = _0x48bad4;\n        _0x5b568e[_0x2f7504] = _0x107725;\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2\n1 2 3 1", "3\n4\n5"], ["3\n10 71 84 33 6 47 23 25", "81\n94\n155\n155\n155\n155\n155"], ["4\n75 26 45 72 81 47 97 97 2 2 25 82 84 17 56 32", "101\n120\n147\n156\n156\n178\n194\n194\n194\n194\n194\n194\n194\n194\n194"]], "original": "function Main(s){\n  s = s.split(\"\\n\");\n  var n = +s[0];\n  var m = 1 << n;\n  var a = s[1].split(\" \").map(a=>+a);\n  var b = [a[0]], c = [[a[0],0]], d = [[-1,-1]];\n  for(var i = 1; i < m; i++){\n    f(i);\n  }\n  console.log(b.slice(1).join(\"\\n\"));\n  \n  function f(n){\n    var q = {}, s = n, t = 0;\n    while(s){\n      t++;\n      s >>= 1;\n    }\n    for(var i = 0; i < t; i++){\n      var u = n & ((1 << i) ^ 0xFFFFF);\n      if(u === n)continue;\n      q[c[u][1]] = c[u][0];\n      q[d[u][1]] = d[u][0];\n    }\n    s = [a[n],n], t = [-1,-1];\n    for(i in q){\n      if(t[0] > q[i])continue;\n      if(s[0] > q[i])t = [q[i],i];\n      else{t = s; s = [q[i],i];}\n    }\n    b[n] = Math.max(b[n-1], t[0] + s[0]);\n    c[n] = t;\n    d[n] = s;\n  }\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03334_1", "type": "JavaScript", "obfuscated": "function Main(_0x164a44) {\n    _0x164a44 = _0x164a44['split']('\\x20')['map'](_0x379946 => +_0x379946);\n    var _0x2bb878 = _0x164a44[0x0];\n    var _0xbf2838 = calc(_0x164a44[0x1]);\n    var _0x551826 = calc(_0x164a44[0x2]);\n    var _0x14a3c1 = [];\n    var _0x5cb4f5 = 0x0;\n    for (var _0x1d0f1a = 0x0; _0x1d0f1a < 0x2 * _0x2bb878; _0x1d0f1a++)\n        for (var _0x663df5 = 0x0; _0x663df5 < 0x2 * _0x2bb878; _0x663df5++) {\n            if (f(_0xbf2838, _0x1d0f1a, _0x663df5) && f(_0x551826, _0x1d0f1a, _0x663df5))\n                _0x14a3c1[_0x5cb4f5++] = _0x1d0f1a + '\\x20' + _0x663df5;\n            if (_0x5cb4f5 === _0x2bb878 * _0x2bb878) {\n                console['log'](_0x14a3c1['join']('\\x0a'));\n                return;\n            }\n        }\n}\nfunction calc(_0x2ac6a) {\n    var _0x493ac7 = 0x1;\n    while ((_0x2ac6a & 0x3) === 0x0) {\n        _0x493ac7++;\n        _0x2ac6a >>>= 0x2;\n    }\n    return [\n        _0x493ac7,\n        _0x2ac6a & 0x1\n    ];\n}\nfunction f(_0x115eb5, _0x5d36f, _0xf7bcb4) {\n    _0x5d36f = Math['floor'](_0x5d36f / _0x115eb5[0x0]);\n    if (!_0x115eb5[0x1])\n        return !(_0x5d36f & 0x1);\n    _0xf7bcb4 = Math['floor'](_0xf7bcb4 / _0x115eb5[0x0]);\n    return !(_0xf7bcb4 + _0x5d36f & 0x1);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 1 2", "0 0\n0 2\n2 0\n2 2"], ["3 1 5", "0 0\n0 2\n0 4\n1 1\n1 3\n1 5\n2 0\n2 2\n2 4"]], "original": "function Main(s){\n  s = s.split(\" \").map(a=>+a);\n  var n = s[0];\n  var a = calc(s[1]);\n  var b = calc(s[2]);\n  var ans = [];\n  var k = 0;\n  for(var i = 0; i < 2 * n; i++)\n  for(var j = 0; j < 2 * n; j++){\n    if(f(a,i,j) && f(b,i,j))ans[k++] = i + \" \" + j;\n    if(k === n * n){console.log(ans.join(\"\\n\"));return;}\n  }\n}\nfunction calc(n){\n  var s = 1;\n  while((n & 3) === 0){\n    s++;\n    n >>>= 2;\n  }\n  return [s, n & 1];\n}\nfunction f(s,y,x){\n  y = Math.floor(y / s[0]);\n  if(!s[1])return !(y&1);\n  x = Math.floor(x / s[0]);\n  return !(x+y&1);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03451_1", "type": "JavaScript", "obfuscated": "function Main(_0x222025) {\n    _0x222025 = _0x222025['split']('\\x0a');\n    var _0x5878b0 = _0x222025[0x1]['split']('\\x20')['map'](_0x397e42 => {\n        return parseInt(_0x397e42);\n    });\n    var _0x4c203e = _0x222025[0x2]['split']('\\x20')['map'](_0x3b8f15 => {\n        return parseInt(_0x3b8f15);\n    });\n    var _0x3d7810 = _0x5878b0['length'] - 0x1;\n    var _0x12a9b8 = 0x0, _0x489871 = _0x5878b0['length'] - 0x2;\n    var _0x362314 = 0x0;\n    var _0x4f1959;\n    for (var _0xc32dd1 = _0x3d7810; _0xc32dd1 >= _0x12a9b8; _0xc32dd1--) {\n        _0x4f1959 = _0x5afaf9(_0x5878b0['slice'](_0x12a9b8, _0xc32dd1 + 0x1)) + _0x5afaf9(_0x4c203e['slice'](_0xc32dd1));\n        if (_0x362314 < _0x4f1959)\n            _0x362314 = _0x4f1959;\n    }\n    function _0x5afaf9(_0x11d9d4) {\n        var _0x147124 = 0x0;\n        for (var _0x2d80cc = 0x0; _0x2d80cc < _0x11d9d4['length']; _0x2d80cc++) {\n            _0x147124 += _0x11d9d4[_0x2d80cc];\n        }\n        return _0x147124;\n    }\n    console['log'](_0x362314);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n3 2 2 4 1\n1 2 2 2 1", "14"], ["4\n1 1 1 1\n1 1 1 1", "5"], ["7\n3 3 4 5 4 5 3\n5 3 4 4 2 3 2", "29"], ["1\n2\n3", "5"]], "original": "function Main(input) {\ninput = input.split(\"\\n\");\n    var a1 = input[1].split(' ').map(e => { return parseInt(e) })\n    var a2 = input[2].split(' ').map(e => { return parseInt(e) })\n    var j = a1.length - 1\n    var m = 0, n = a1.length - 2\n    var r = 0;\n    var temp;\n\n    for (var i = j; i >= m; i--) {\n        temp = sum(a1.slice(m, i+1)) + sum(a2.slice(i))\n        if (r < temp) r = temp\n    }\n\n    function sum(arr) {\n        var r = 0\n        for (var i = 0; i < arr.length; i++) {\n            r += arr[i]\n        }\n        return r\n    }\n\n    console.log(r)\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03525_1", "type": "JavaScript", "obfuscated": "console['log']((_0x212def => {\n    const [[_0x54aa09], _0x3e5efe] = _0x212def['trim']()['split']('\\x0a')['map'](_0x47c32f => _0x47c32f['split']('\\x20')['map'](_0x5a9ee0 => _0x5a9ee0 | 0x0));\n    if (_0x54aa09 === 0x1)\n        return '' + _0x3e5efe[0x0];\n    const _0x166d61 = Array(0xd)['fill'](0x0);\n    let _0x1bbb0f = 0xc, _0x16e142 = 0x1;\n    for (let _0x2b00fd = 0x0; _0x2b00fd < _0x54aa09; _0x2b00fd++) {\n        if (++_0x166d61[_0x3e5efe[_0x2b00fd]] > 0x2)\n            return '0';\n        if (_0x3e5efe[_0x2b00fd] < _0x1bbb0f)\n            _0x1bbb0f = _0x3e5efe[_0x2b00fd];\n        if (_0x166d61[_0x3e5efe[_0x2b00fd]] === 0x2)\n            _0x1bbb0f = Math['min'](_0x1bbb0f, 0x18 - 0x2 * _0x3e5efe[_0x2b00fd]);\n    }\n    if (_0x166d61[0xc] > 0x1 || _0x166d61[0x0] > 0x0)\n        return '0';\n    const _0x30fa14 = _0x166d61['reduce']((_0x38880a, _0x40aff4, _0x2c6a47) => _0x38880a | (_0x40aff4 === 0x1 ? 0x0 : 0x1 << _0x2c6a47), 0x1);\n    for (let _0x51fb0b = 0x0; _0x51fb0b < 0x1 << 0xd; _0x51fb0b = _0x51fb0b + 0x1 | _0x30fa14) {\n        let _0xfffc75 = _0x1bbb0f;\n        for (let _0x44927b = 0x1; _0x44927b <= 0xc; _0x44927b++) {\n            if (!_0x166d61[_0x44927b])\n                continue;\n            for (let _0x281015 = _0x44927b + 0x1; _0x281015 <= 0xc; _0x281015++) {\n                if (!_0x166d61[_0x281015])\n                    continue;\n                let _0x416f63 = _0x281015 - _0x44927b;\n                if (_0x166d61[_0x44927b] === 0x1 && _0x166d61[_0x281015] === 0x1)\n                    _0x416f63 = _0x51fb0b >> _0x44927b & 0x1 ^ _0x51fb0b >> _0x281015 & 0x1 ? 0x18 - _0x44927b - _0x281015 : _0x416f63;\n                _0xfffc75 = Math['min'](_0xfffc75, _0x416f63);\n            }\n        }\n        if (_0x16e142 < _0xfffc75)\n            _0x16e142 = _0xfffc75;\n    }\n    return '' + _0x16e142;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["3\n7 12 8", "4"], ["2\n11 11", "2"], ["1\n0", "0"]], "original": "console.log((args=>{\n  const [[N],D] = args.trim().split('\\n').map( r=>r.split(' ').map(v=>v|0));\n  if ( N === 1 ) return `${D[0]}`;\n  const q = Array(13).fill(0);\n  let _s = 12, s = 1;\n  for ( let i = 0; i < N; i++ ) {\n    if ( ++q[D[i]] > 2 ) return '0';\n    if ( D[i] < _s ) _s = D[i];\n    if ( q[D[i]] === 2 ) _s = Math.min(_s,24-2*D[i]);\n  }\n  if ( q[12] > 1 || q[0] > 0 ) return '0';\n  const mask = q.reduce((a,b,i)=>a|(b===1?0:1<<i),1);\n  for ( let m = 0; m < 1<<13; m = m+1|mask ) {\n    let min = _s;\n    for ( let a = 1; a <= 12; a++ ) {\n      if ( !q[a] ) continue;\n      for ( let b = a+1; b <= 12; b++ ) {\n        if ( !q[b] ) continue;\n        let t = b - a;\n        if ( q[a]===1 && q[b] === 1 ) t = (m>>a&1^m>>b&1)?24-a-b:t;\n        min = Math.min( min, t );\n      }\n    }\n    if ( s < min ) s = min;\n  }\n  return `${s}`;\n})(require('fs').readFileSync('/dev/stdin', 'utf8')));\n", "language": "JavaScript"}
{"filename": "p03534_1", "type": "JavaScript", "obfuscated": "function Main(_0x5ba877) {\n    _0x5ba877 = _0x5ba877['trim']();\n    var _0x40bc9e = 0x0, _0x244162 = 0x0, _0x36671f = 0x0;\n    var _0x50fef6 = 'YES';\n    for (var _0x574584 = 0x0; _0x574584 < _0x5ba877['length']; _0x574584++) {\n        if (_0x5ba877[_0x574584] === 'a')\n            _0x40bc9e++;\n        else if (_0x5ba877[_0x574584] === 'b')\n            _0x244162++;\n        else\n            _0x36671f++;\n    }\n    if (Math['max'](_0x40bc9e, _0x244162, _0x36671f) - Math['min'](_0x40bc9e, _0x244162, _0x36671f) > 0x1)\n        _0x50fef6 = 'NO';\n    console['log'](_0x50fef6);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["abac", "YES"], ["aba", "NO"], ["babacccabab", "YES"]], "original": "function Main(s) {\n  s = s.trim();\n  var a = 0, b = 0, c = 0;\n  var ans = \"YES\";\n  for(var i = 0; i < s.length; i++){\n    if(s[i] === \"a\")a++;\n    else if(s[i] === \"b\")b++;\n    else c++;\n  }\n  if(Math.max(a, b, c) - Math.min(a, b, c) > 1)ans = \"NO\";\n  console.log(ans);\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));", "language": "JavaScript"}
{"filename": "p03700_1", "type": "JavaScript", "obfuscated": "console['log']((_0x4ed9f2 => {\n    const [[_0x3561ac, _0x23a09b, _0x339294], ..._0x2ca92e] = _0x4ed9f2['trim']()['split']`\\n`['map'](_0x309886 => _0x309886['split']` `['map'](_0x2138d4 => _0x2138d4 | 0x0));\n    let _0x5c3b7e = Math['ceil'](0x3b9aca00 / _0x339294), _0x4a0ae9 = 0x0;\n    _0x3593dd:\n        while (_0x5c3b7e > _0x4a0ae9 + 0x1) {\n            let _0x3f5918 = _0x5c3b7e + _0x4a0ae9 >> 0x1, _0x3ed3fb = _0x3f5918;\n            for (let _0xd100e2 = 0x0; _0xd100e2 < _0x3561ac; _0xd100e2++) {\n                let _0x18b658 = _0x2ca92e[_0xd100e2] - _0x3f5918 * _0x339294;\n                if (_0x18b658 <= 0x0)\n                    continue;\n                _0x3ed3fb -= Math['ceil'](_0x18b658 / (_0x23a09b - _0x339294));\n            }\n            if (_0x3ed3fb >= 0x0)\n                _0x5c3b7e = _0x3f5918;\n            else\n                _0x4a0ae9 = _0x3f5918;\n        }\n    return '' + _0x5c3b7e;\n})(require('fs')['readFileSync']('/dev/stdin', 'utf8')));", "test_cases": [["4 5 3\n8\n7\n4\n2", "2"], ["2 10 4\n20\n20", "4"], ["5 2 1\n900000000\n900000000\n1000000000\n1000000000\n1000000000", "800000000"]], "original": "console.log((args=>{\n  const [[N,A,B],...h] = args.trim().split`\\n`.map(r=>r.split` `.map(v=>v|0));\n  let ok = Math.ceil(1e9/B), ng = 0;\n  bisect: while ( ok > ng+1 ) {\n    let m = (ok+ng) >> 1, k = m;\n    for ( let i = 0; i < N; i++ ) {\n      let r = h[i] - m*B;\n      if ( r <= 0 ) continue;\n      k -= Math.ceil(r/(A-B));\n    }\n    if ( k >= 0 ) ok = m;\n    else ng = m;\n  }\n  return `${ok}`;\n})(require('fs').readFileSync('/dev/stdin','utf8')));\n", "language": "JavaScript"}
{"filename": "p03763_1", "type": "JavaScript", "obfuscated": "function Main(_0x5453f4) {\n    _0x5453f4 = _0x5453f4['split']('\\x0a');\n    var _0x3f1ef7 = 'abcdefghijklmnopqrstuvwxyz'['split']('');\n    var _0x1fa7c0 = new Array(0x1a);\n    _0x1fa7c0['fill'](0x0);\n    var _0x2f953f;\n    for (var _0x160ac4 = 0x1; _0x160ac4 < _0x5453f4['length']; _0x160ac4++) {\n        _0x2f953f = new Array(0x1a);\n        _0x2f953f['fill'](0x0);\n        for (var _0x47f21e = 0x0; _0x47f21e < _0x5453f4[_0x160ac4]['length']; _0x47f21e++) {\n            _0x2f953f[_0x3f1ef7['findIndex'](_0x54091e => {\n                return _0x54091e === _0x5453f4[_0x160ac4][_0x47f21e];\n            })]++;\n        }\n        for (var _0x47f21e = 0x0; _0x47f21e < 0x1a; _0x47f21e++) {\n            if (_0x1fa7c0[_0x47f21e] > _0x2f953f[_0x47f21e] || _0x160ac4 === 0x1) {\n                _0x1fa7c0[_0x47f21e] = _0x2f953f[_0x47f21e];\n            }\n        }\n    }\n    var _0x26d863 = '';\n    _0x1fa7c0['forEach']((_0x2cccb6, _0x359af5) => {\n        _0x26d863 += _0x3f1ef7[_0x359af5]['repeat'](_0x2cccb6);\n    });\n    console['log'](_0x26d863);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\ncbaa\ndaacc\nacacac", "aac"], ["3\na\naa\nb", ""]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var S=\"abcdefghijklmnopqrstuvwxyz\".split('');\n  var array=new Array(26);\n  array.fill(0);\n  var temp;\n  for(var i=1;i<input.length;i++){\n    temp=new Array(26);\n    temp.fill(0);\n    for(var j=0;j<input[i].length;j++){\n      temp[S.findIndex(e=>{return e===input[i][j];})]++;\n    }\n    \n    for(var j=0;j<26;j++){\n      if(array[j]>temp[j]||i===1){\n        array[j]=temp[j];\n      }\n    }\n  }\n  var ret='';\n  array.forEach((e,i)=>{\n    ret+=S[i].repeat(e);\n  });\n  console.log(ret);\n\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript"}
{"filename": "p03816_1", "type": "JavaScript", "obfuscated": "'use strict';\nfunction main(_0x5cd686, _0x94e398) {\n    let _0x403f17 = {};\n    for (let _0x78f94d of _0x94e398) {\n        _0x403f17[_0x78f94d] = _0x403f17[_0x78f94d] || 0x0;\n        _0x403f17[_0x78f94d]++;\n    }\n    let _0x321f04 = Object['keys'](_0x403f17);\n    let _0x21cebf = _0x321f04['reduce']((_0x5beb65, _0x2c08b2) => {\n        if (_0x403f17[_0x2c08b2] % 0x2 === 0x0) {\n            return _0x5beb65 + 0x1;\n        } else {\n            return _0x5beb65;\n        }\n    }, 0x0);\n    let _0x1e2c15;\n    if (_0x21cebf % 0x2 === 0x0) {\n        _0x1e2c15 = _0x321f04['length'];\n    } else {\n        _0x1e2c15 = _0x321f04['length'] - 0x1;\n    }\n    console['log'](_0x1e2c15);\n}\nfunction doMain() {\n    let _0x3cbe21 = '';\n    process['stdin']['resume']();\n    process['stdin']['setEncoding']('utf8');\n    process['stdin']['on']('data', _0x1e4431 => {\n        _0x3cbe21 += _0x1e4431;\n    });\n    process['stdin']['on']('end', () => {\n        _0x3cbe21 = _0x3cbe21['trim']()['split']('\\x0a');\n        let _0x3c4f20 = Number(_0x3cbe21[0x0]);\n        let _0x4963d9 = _0x3cbe21[0x1]['split']('\\x20')['map'](_0x6f7a40 => Number(_0x6f7a40));\n        main(_0x3c4f20, _0x4963d9);\n    });\n}\ndoMain();", "test_cases": [["5\n1 2 1 3 7", "3"], ["15\n1 3 5 2 1 3 2 8 8 6 2 6 11 1 1", "7"]], "original": "'use strict'\n\nfunction main (n, array) {\n  let counter = {}\n  for (let a of array) {\n    counter[a] = counter[a] || 0\n    counter[a]++\n  }\n  let nums = Object.keys(counter)\n  let evenCount = nums.reduce((count, num) => {\n    if (counter[num] % 2 === 0) {\n      return count + 1\n    } else {\n      return count\n    }\n  }, 0)\n  let answer\n  if (evenCount % 2 === 0) {\n    answer = nums.length\n  } else {\n    answer = nums.length - 1\n  }\n  console.log(answer)\n}\n\nfunction doMain () {\n  let input = ''\n  process.stdin.resume()\n  process.stdin.setEncoding('utf8')\n  process.stdin.on('data', (chunk) => {\n    input += chunk\n  })\n  process.stdin.on('end', () => {\n    input = input.trim().split('\\n')\n    let n = Number(input[0])\n    let array = input[1].split(' ').map(a => Number(a))\n    main(n, array)\n  })\n}\n\ndoMain()\n", "language": "JavaScript"}
{"filename": "p03856_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar fs = require('fs');\nvar input = Buffer['alloc'](0x10000);\nvar length = fs['readSync'](0x0, input, 0x0, 0x10000);\nvar text = input['toString']()['slice'](0x0, length)['trim']();\nvar dp = Array(text['length'] + 0x1)['fill'](![]);\ndp[0x0] = !![];\nfor (var index = 0x5; index <= text['length']; index++) {\n    if (dp[index - 0x5] === !![] && text['slice'](index - 0x5, index) === 'dream') {\n        dp[index] = !![];\n        continue;\n    }\n    if (dp[index - 0x7] === !![] && text['slice'](index - 0x7, index) === 'dreamer') {\n        dp[index] = !![];\n        continue;\n    }\n    if (dp[index - 0x5] === !![] && text['slice'](index - 0x5, index) === 'erase') {\n        dp[index] = !![];\n        continue;\n    }\n    if (dp[index - 0x6] === !![] && text['slice'](index - 0x6, index) === 'eraser') {\n        dp[index] = !![];\n        continue;\n    }\n}\nconsole['log'](dp[text['length']] ? 'YES' : 'NO');", "test_cases": [["erasedream", "YES"], ["dreameraser", "YES"], ["dreamerer", "NO"]], "original": "'use strict';\n\nvar fs = require('fs');\n\nvar input = Buffer.alloc(0x10000);\nvar length = fs.readSync(0, input, 0, 0x10000);\n\nvar text = input.toString().slice(0, length).trim();\nvar dp = Array(text.length + 1).fill(false);\ndp[0] = true;\n\nfor (var index = 5; index <= text.length; index++) {\n    if (dp[index - 5] === true && text.slice(index - 5, index) === 'dream') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 7] === true && text.slice(index - 7, index) === 'dreamer') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 5] === true && text.slice(index - 5, index) === 'erase') {\n        dp[index] = true;\n        continue;\n    }\n\n    if (dp[index - 6] === true && text.slice(index - 6, index) === 'eraser') {\n        dp[index] = true;\n        continue;\n    }\n}\n\nconsole.log(dp[text.length] ? 'YES' : 'NO');", "language": "JavaScript"}
{"filename": "p03864_1", "type": "JavaScript", "obfuscated": "function Main(_0x373410) {\n    _0x373410 = _0x373410['trim']()['split']('\\x0a')['map'](function (_0x1ce0cb) {\n        return _0x1ce0cb['split']('\\x20');\n    });\n    var _0x45d02f = parseInt(_0x373410[0x0][0x0], 0xa);\n    var _0x532da5 = parseInt(_0x373410[0x0][0x1], 0xa);\n    var _0x17fe62 = _0x373410[0x1]['map'](_0x358fc2 => parseInt(_0x358fc2, 0xa));\n    var _0x50f4a5 = function (_0x1027d4) {\n        var _0x4d93b4 = 0x0;\n        _0x1027d4['forEach'](function (_0x47e2c9) {\n            _0x4d93b4 += _0x47e2c9;\n        });\n        return _0x4d93b4;\n    };\n    var _0x2fb392 = [];\n    var _0x540bae = 0x0;\n    for (var _0x5cca2b = 0x0; _0x5cca2b < _0x45d02f; _0x5cca2b++) {\n        if (_0x17fe62[_0x5cca2b] >= _0x532da5 - _0x540bae)\n            _0x2fb392['push'](_0x532da5 - _0x540bae);\n        else\n            _0x2fb392['push'](_0x17fe62[_0x5cca2b]);\n        _0x540bae = _0x2fb392[_0x5cca2b];\n    }\n    console['log'](_0x50f4a5(_0x17fe62) - _0x50f4a5(_0x2fb392));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n2 2 2", "1"], ["6 1\n1 6 1 2 0 4", "11"], ["5 9\n3 1 4 1 5", "0"], ["2 0\n5 5", "10"]], "original": "\nfunction Main(input) {\n\tinput = input.trim().split(\"\\n\").map(function(x) { return x.split(\" \")});\n\tvar N = parseInt(input[0][0], 10);\n\tvar x = parseInt(input[0][1], 10);\n\tvar vec_a = input[1].map(e => parseInt(e, 10));\n\tvar sum  = function(arr) {\n\t\tvar sum = 0;\n\t\tarr.forEach(function(elm) {\n\t\t\tsum += elm;\n\t\t});\n\t\treturn sum;\n\t};\n\tvar vec_b = [];\n\tvar tmp = 0;\n\tfor (var i = 0; i < N; i++){\n\t\tif (vec_a[i] >= (x - tmp)) vec_b.push(x - tmp);\n\t\telse vec_b.push(vec_a[i]);\n\t\ttmp = vec_b[i];\n\t}\n\tconsole.log(sum(vec_a) - sum(vec_b));\n}\n\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\")); ", "language": "JavaScript"}
{"filename": "p03891_1", "type": "JavaScript", "obfuscated": "function Main(_0x2d8d11) {\n    var _0x48e037 = _0x2d8d11['split'](/\\a\\n|\\a|\\n/)['map'](function (_0x401c62) {\n        return parseInt(_0x401c62);\n    });\n    var _0x135cfa = [\n        [\n            _0x48e037[0x0],\n            _0x48e037[0x1],\n            0x0\n        ],\n        [\n            0x0,\n            _0x48e037[0x2],\n            0x0\n        ],\n        [\n            0x0,\n            0x0,\n            0x0\n        ]\n    ];\n    var _0x61eb1e = 0x3 * _0x135cfa[0x1][0x1];\n    _0x135cfa[0x0][0x2] = _0x61eb1e - _0x135cfa[0x0][0x0] - _0x135cfa[0x0][0x1];\n    _0x135cfa[0x2][0x1] = _0x61eb1e - _0x135cfa[0x0][0x1] - _0x135cfa[0x1][0x1];\n    _0x135cfa[0x2][0x2] = _0x61eb1e - _0x135cfa[0x0][0x0] - _0x135cfa[0x1][0x1];\n    _0x135cfa[0x2][0x0] = _0x61eb1e - _0x135cfa[0x2][0x1] - _0x135cfa[0x2][0x2];\n    _0x135cfa[0x1][0x0] = _0x61eb1e - _0x135cfa[0x0][0x0] - _0x135cfa[0x2][0x0];\n    _0x135cfa[0x1][0x2] = _0x61eb1e - _0x135cfa[0x0][0x2] - _0x135cfa[0x2][0x2];\n    console['log'](_0x135cfa[0x0][0x0] + '\\x20' + _0x135cfa[0x0][0x1] + '\\x20' + _0x135cfa[0x0][0x2]);\n    console['log'](_0x135cfa[0x1][0x0] + '\\x20' + _0x135cfa[0x1][0x1] + '\\x20' + _0x135cfa[0x1][0x2]);\n    console['log'](_0x135cfa[0x2][0x0] + '\\x20' + _0x135cfa[0x2][0x1] + '\\x20' + _0x135cfa[0x2][0x2]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["8\n3\n5", "8 3 4\n1 5 9\n6 7 2"], ["1\n1\n1", "1 1 1\n1 1 1\n1 1 1"]], "original": "function Main(input) {\n\tvar data = input.split(/\\a\\n|\\a|\\n/).map(function(s) { return parseInt(s); });\n\tvar x = [ [data[0], data[1], 0],\n\t\t\t\t[0, data[2], 0],\n\t\t\t\t[0, 0, 0] ]\n\tvar sum = 3 * x[1][1]\n\tx[0][2] = sum - x[0][0] - x[0][1]\n\tx[2][1] = sum - x[0][1] - x[1][1]\n\tx[2][2] = sum - x[0][0] - x[1][1]\n\tx[2][0] = sum - x[2][1] - x[2][2]\n\tx[1][0] = sum - x[0][0] - x[2][0]\n\tx[1][2] = sum - x[0][2] - x[2][2]\n\t\n\tconsole.log(x[0][0] + \" \" + x[0][1] + \" \" + x[0][2])\n\tconsole.log(x[1][0] + \" \" + x[1][1] + \" \" + x[1][2])\n\tconsole.log(x[2][0] + \" \" + x[2][1] + \" \" + x[2][2])\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03910_1", "type": "JavaScript", "obfuscated": "function myout(_0x58f1ea) {\n    console['log'](_0x58f1ea);\n}\nfunction Main(_0xe0feec) {\n    _0xe0feec = parseInt(_0xe0feec);\n    var _0x40c4b = [];\n    var _0x2bff95 = 0x0;\n    for (var _0x1f0826 = 0x1; _0x1f0826 <= _0xe0feec; _0x1f0826++) {\n        _0x2bff95 += _0x1f0826;\n        _0x40c4b['push'](_0x1f0826);\n        if (_0x2bff95 == _0xe0feec) {\n            myout(_0x40c4b['join']('\\x0a'));\n            return;\n        } else if (_0x2bff95 > _0xe0feec) {\n            var _0x549bc3 = _0x2bff95 - _0xe0feec;\n            _0x40c4b['splice'](_0x40c4b['indexOf'](_0x549bc3), 0x1);\n            myout(_0x40c4b['join']('\\x0a'));\n            return;\n        }\n    }\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["4", "1\n3"], ["7", "1\n2\n4"], ["1", "1"]], "original": "function myout(text){console.log(text);}//standard output\nfunction Main(input) {\n\tinput = parseInt(input);\n\t//input = input.split(\" \");\n\t//input = input.split(\"\\n\");\n\t//input = input.split(\" \").map((a)=>Number(a));\n\t//input = input.split(\"\\n\").map((a)=>Number(a));\n  var list = [];\n  var output = 0;\n  for(var i = 1; i <= input; i++){\n    output += i;\n    list.push(i);\n    if(output == input){\n       myout(list.join(\"\\n\"));\n      return;\n    }else if(output > input){\n      var diff = output - input;\n      list.splice(list.indexOf(diff),1);\n      myout(list.join(\"\\n\"));\n      return;\n    }\n  }\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());\n", "language": "JavaScript"}
{"filename": "p03929_1", "type": "JavaScript", "obfuscated": "function Main(_0x56d7bf) {\n    _0x56d7bf = _0x56d7bf['split']('\\x20');\n    var _0xfc009d = _0x56d7bf[0x0];\n    var _0x4efdfc = _0x56d7bf[0x1];\n    if (_0xfc009d < 0x3) {\n        console['log']('0');\n        return;\n    }\n    var _0x6f7d21 = 0x0;\n    for (var _0x392a68 = 0x0; _0x392a68 + 0x2 < _0xfc009d; _0x392a68++) {\n        for (var _0x4eb2f8 = 0x0; _0x4eb2f8 < 0x5; _0x4eb2f8++) {\n            if ((_0x392a68 * 0x3f + _0x4eb2f8 * 0x9 + 0x51) % 0xb == _0x4efdfc) {\n                _0x6f7d21++;\n            }\n        }\n    }\n    console['log'](_0x6f7d21);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["7 7", "2"], ["6 0", "2"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\t// 1行目がinput[0], 2行目がinput[1], …に入る\n\tinput = input.split(\" \");\n\t//カレンダーの段数 n\n\tvar valN = input[0];\n\t//正方形を置く時の条件となる数 k\n\tvar valK = input[1];\n\t\n\t//値のチェック\n\tif(valN < 3){\n\t\tconsole.log(\"0\");\n\t\treturn;\n\t}\n\t\n\tvar count = 0;\n\t//段数の数だけ繰り返す\n\tfor(var i = 0;i+2<valN;i++){\n\t\t//行数の数だけ繰り返す\n\t\tfor(var j = 0;j<5;j++){\n\t\t\t//条件チェック\n\t\t\tif((i*63 + j*9 + 81)%11 == valK){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tconsole.log(count);\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p04028_1", "type": "JavaScript", "obfuscated": "var mod = 0x3b9aca00 + 0x7;\nfunction Main(_0x6113d0) {\n    var _0x46c73c = parseInt(_0x6113d0[0x0]);\n    var _0x18e432 = _0x6113d0[0x1]['length'];\n    var _0x48bfb2 = Array(_0x46c73c + 0x1)['fill'](0x0)['map'](_0x442558 => Array(_0x46c73c + 0x2)['fill'](0x0));\n    _0x48bfb2[0x0][0x0] = 0x1;\n    for (var _0x1b398a = 0x1; _0x1b398a <= _0x46c73c; _0x1b398a++) {\n        _0x48bfb2[_0x1b398a][0x0] = _0x48bfb2[_0x1b398a - 0x1][0x0] + _0x48bfb2[_0x1b398a - 0x1][0x1];\n        _0x48bfb2[_0x1b398a][0x0] %= mod;\n        for (var _0x5bd48f = 0x1; _0x5bd48f <= _0x1b398a; _0x5bd48f++) {\n            _0x48bfb2[_0x1b398a][_0x5bd48f] = _0x48bfb2[_0x1b398a - 0x1][_0x5bd48f - 0x1] * 0x2 + _0x48bfb2[_0x1b398a - 0x1][_0x5bd48f + 0x1];\n            _0x48bfb2[_0x1b398a][_0x5bd48f] %= mod;\n        }\n    }\n    console['log'](permod(_0x48bfb2[_0x46c73c][_0x18e432], powmod(0x2, _0x18e432)));\n}\nfunction abmod() {\n    var _0x23441a = arguments[0x0];\n    for (var _0x36259a = 0x1; _0x36259a < arguments['length']; _0x36259a++) {\n        _0x23441a = (_0x23441a >>> 0x10) * arguments[_0x36259a] % mod * 0x10000 + (_0x23441a & 0xffff) * arguments[_0x36259a];\n        _0x23441a %= mod;\n    }\n    return _0x23441a;\n}\nfunction powmod(_0x260079, _0x1b57f7) {\n    var _0x33e71d = 0x1;\n    while (_0x1b57f7) {\n        if (_0x1b57f7 & 0x1)\n            _0x33e71d = abmod(_0x260079, _0x33e71d);\n        _0x260079 = abmod(_0x260079, _0x260079);\n        _0x1b57f7 >>>= 0x1;\n    }\n    return _0x33e71d;\n}\nfunction permod(_0x17d671, _0x4dc82a) {\n    var _0x57b6b9 = powmod(_0x4dc82a, mod - 0x2);\n    _0x57b6b9 = abmod(_0x57b6b9, _0x17d671);\n    return _0x57b6b9;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['split']('\\x0a'));", "test_cases": [["3\n0", "5"], ["300\n1100100", "519054663"], ["5000\n01000001011101000100001101101111011001000110010101110010000", "500886057"]], "original": "var mod = 1e9+7;\nfunction Main(s) {\n  var n = parseInt(s[0]);\n  var sl = s[1].length;\n  var a = Array(n+1).fill(0).map(a => Array(n+2).fill(0));\n  a[0][0] = 1;\n  for(var i = 1; i <= n; i++){\n    a[i][0] = a[i-1][0] + a[i-1][1];\n    a[i][0] %= mod;\n    for(var j = 1; j <= i; j++){\n      a[i][j] = a[i-1][j-1] * 2 + a[i-1][j+1];\n      a[i][j] %= mod;\n    }\n  }\n  console.log(permod(a[n][sl], powmod(2, sl)));\n}\nfunction abmod(){\n\tvar rt = arguments[0];\n\tfor(var i = 1; i < arguments.length; i++){\n\t\trt = (rt >>> 16) * arguments[i] % mod * 0x10000 + (rt & 0xFFFF) * arguments[i];\n\t\trt %= mod;\n\t}\n\treturn rt;\n}\nfunction powmod(a,n){//a^n%mod\n\tvar rt = 1;\n\twhile(n){\n\t\tif(n & 1) rt = abmod(a, rt);\n\t\ta = abmod(a, a);\n\t\tn >>>= 1;\n\t}\n\treturn rt;\n}\nfunction permod(a,n){\n\tvar rt = powmod(n, mod-2);\n\trt = abmod(rt, a);\n\treturn rt;\n}\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").split(\"\\n\"));", "language": "JavaScript"}
{"filename": "p00055_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nArr['forEach'](function (_0x3fb4dc) {\n    var _0x31efe6 = [\n        0x0,\n        _0x3fb4dc\n    ];\n    for (var _0x42b564 = 0x2; _0x42b564 <= 0xa; _0x42b564++) {\n        _0x31efe6[_0x42b564] = _0x42b564 % 0x2 == 0x0 ? _0x31efe6[_0x42b564 - 0x1] * 0x2 : _0x31efe6[_0x42b564 - 0x1] / 0x3;\n    }\n    var _0x36d1ff = _0x31efe6['reduce'](function (_0x127076, _0x5c6e41) {\n        return _0x127076 + _0x5c6e41;\n    });\n    console['log'](_0x36d1ff['toFixed'](0x8));\n});", "test_cases": [["1.0\n2.0\n3.0", "7.81481481\n15.62962963\n23.44444444"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nArr.forEach(function(v){\n   var arr=[0,v];\n   for(var i=2;i<=10;i++){\n         arr[i]=(i%2==0)?arr[i-1]*2 : arr[i-1]/3;\n   }\n   var sum=arr.reduce(function(a,b){return a+b;});\n   console.log(sum.toFixed(8));\n});", "language": "JavaScript"}
{"filename": "p00057_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var n = Arr[i] - 0x0 + 0x1;\n    var x = 0x1 / 0x2 * n * (n - 0x1);\n    console['log'](x + 0x1);\n}", "test_cases": [["1\n3", "2\n7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var n=(Arr[i]-0)+1;\n   var x=1/2*n*(n-1);\n   console.log(x+1);\n}", "language": "JavaScript"}
{"filename": "p00066_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('');\n    var a1 = arr[0x0];\n    var a2 = arr[0x1];\n    var a3 = arr[0x2];\n    var a4 = arr[0x3];\n    var a5 = arr[0x4];\n    var a6 = arr[0x5];\n    var a7 = arr[0x6];\n    var a8 = arr[0x7];\n    var a9 = arr[0x8];\n    var d = 0x0;\n    for (var j = 0x0; j < 0x2; j++) {\n        var s = j == 0x0 ? 'o' : 'x';\n        var S = s + s + s;\n        if (a1 + a2 + a3 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a4 + a5 + a6 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a7 + a8 + a9 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a1 + a4 + a7 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a2 + a5 + a8 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a3 + a6 + a9 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a1 + a5 + a9 == S) {\n            console['log'](s);\n            break;\n        }\n        if (a3 + a5 + a7 == S) {\n            console['log'](s);\n            break;\n        }\n        d++;\n    }\n    if (d == 0x2)\n        console['log']('d');\n}", "test_cases": [["ooosxssxs\nxoosxsosx\nooxxxooxo", "o\nx\nd"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\nvar arr=Arr[i].split(\"\");\nvar a1=arr[0];\nvar a2=arr[1];\nvar a3=arr[2];\nvar a4=arr[3];\nvar a5=arr[4];\nvar a6=arr[5];\nvar a7=arr[6];\nvar a8=arr[7];\nvar a9=arr[8];\nvar d=0;\nfor(var j=0;j<2;j++){\n   var s=(j==0)?\"o\":\"x\";\n   var S=s+s+s;\n   if(a1+a2+a3==S){console.log(s);break;}\n   if(a4+a5+a6==S){console.log(s);break;}\n   if(a7+a8+a9==S){console.log(s);break;}\n   if(a1+a4+a7==S){console.log(s);break;}\n   if(a2+a5+a8==S){console.log(s);break;}\n   if(a3+a6+a9==S){console.log(s);break;}\n   if(a1+a5+a9==S){console.log(s);break;}\n   if(a3+a5+a7==S){console.log(s);break;}\n   d++;\n}\nif(d==2)console.log(\"d\");\n}", "language": "JavaScript"}
{"filename": "p00067_1", "type": "JavaScript", "obfuscated": "function bomb(_0x4c6d88, _0x2e94e6) {\n    var _0x12da9d = [\n        0x0,\n        0x0,\n        -0x1,\n        0x1\n    ];\n    var _0x57886c = [\n        -0x1,\n        0x1,\n        0x0,\n        0x0\n    ];\n    for (var _0x58c4a9 = 0x0; _0x58c4a9 < 0x4; _0x58c4a9++) {\n        var _0x1bed6a = _0x4c6d88 + _0x12da9d[_0x58c4a9];\n        var _0x4f2950 = _0x2e94e6 + _0x57886c[_0x58c4a9];\n        if (_0x1bed6a < 0x0 || _0x1bed6a >= 0xc || _0x4f2950 < 0x0 || _0x4f2950 >= 0xc)\n            continue;\n        if (yx[_0x1bed6a][_0x4f2950] == 'a') {\n            yx[_0x1bed6a][_0x4f2950] = cnt;\n            bomb(_0x1bed6a, _0x4f2950);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = 0x0;\nvar cnt = 0x0;\nvar yx = [];\nfor (var I = 0x0; I < Arr['length']; I++) {\n    n++;\n    var v = Arr[I]['replace'](/1/g, 'a');\n    var arr = v['split']('');\n    yx['push'](arr);\n    if (n != 0xc)\n        continue;\n    cnt = 0x0;\n    for (var i = 0x0; i < 0xc; i++) {\n        for (var j = 0x0; j < 0xc; j++) {\n            if (yx[i][j] == 'a') {\n                cnt++;\n                yx[i][j] = cnt;\n                bomb(i, j);\n            }\n        }\n    }\n    console['log'](cnt);\n    n = 0x0;\n    yx = [];\n    I++;\n}", "test_cases": [["111100001111\n111000001111\n110000001111\n100000001111\n000100010000\n000000111000\n000001111100\n100011111110\n110001111100\n111000111000\n111100010000\n000000000000\n\n010001111100\n110010000010\n010010000001\n010000000001\n010000000110\n010000111000\n010000000100\n010000000010\n010000000001\n010010000001\n010010000010\n111001111100\n\n000000000000\n111111111111\n100010100001\n100010100001\n100010100001\n100010100001\n100100100101\n101000011101\n100000000001\n100000000001\n111111111111\n100000000001", "5\n13\n4"]], "original": "function bomb(y,x){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=12 || xx<0 || xx>=12)continue;\n      if(yx[yy][xx]==\"a\"){yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=0;\nvar cnt=0;\nvar yx=[];\nfor(var I=0;I<Arr.length;I++){\n   n++;\n   var v=Arr[I].replace(/1/g,\"a\");\n   var arr=v.split(\"\");\n   yx.push(arr);\n   if(n!=12)continue;\n   cnt=0;\n   for(var i=0;i<12;i++){\n      for(var j=0;j<12;j++){\n         if(yx[i][j]==\"a\"){cnt++;yx[i][j]=cnt;bomb(i,j);}\n      }\n   }\n   console.log(cnt);\n   n=0;\n   yx=[];\n   I++;\n}", "language": "JavaScript"}
{"filename": "p00073_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar lines = input['split']('\\x0a');\nwhile (!![]) {\n    var x = +lines['shift']();\n    var h = +lines['shift']();\n    if (x + h == 0x0)\n        break;\n    console['log']((x * x + x * Math['sqrt'](0x4 * h * h + x * x))['toFixed'](0x6));\n}", "test_cases": [["6\n4\n7\n9\n0\n0", "96.000000\n184.192455"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar lines = input.split('\\n');\n\nwhile (true) {\n    var x = +lines.shift();\n    var h = +lines.shift();\n    if (x + h == 0)\n        break;\n\n    console.log(((x * x) + (x * Math.sqrt(4 * h * h + x * x))).toFixed(6));\n}", "language": "JavaScript"}
{"filename": "p00077_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['forEach'](function (_0x50a842) {\n    _0x50a842 = _0x50a842['replace'](/@(\\d)(.)/g, function (_0x1d98cf, _0x52096c, _0x353985) {\n        return Array(_0x52096c - 0x0 + 0x1)['join'](_0x353985);\n    });\n    console['log'](_0x50a842);\n});", "test_cases": [["ab@5C1@8050\n@99+1=1@90", "abCCCCC10000000050\n999999999+1=1000000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   v=v.replace(/@(\\d)(.)/g,function(s,s1,s2){\n      return Array((s1-0)+1).join(s2);\n   });\n   console.log(v);\n});", "language": "JavaScript"}
{"filename": "p00079_1", "type": "JavaScript", "obfuscated": "function heron(_0x1fb0de, _0x42c846, _0x37de95) {\n    var _0x5401b8 = (_0x1fb0de + _0x42c846 + _0x37de95) / 0x2;\n    var _0x4f828e = Math['sqrt'](_0x5401b8 * (_0x5401b8 - _0x1fb0de) * (_0x5401b8 - _0x42c846) * (_0x5401b8 - _0x37de95));\n    return _0x4f828e;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar xy1 = Arr['shift']()['split'](',')['map'](Number);\nvar xy2 = Arr['shift']()['split'](',')['map'](Number);\nvar x1 = xy1[0x0];\nvar y1 = xy1[0x1];\nvar x2 = xy2[0x0];\nvar y2 = xy2[0x1];\nvar sum = 0x0;\nfor (var I = 0x0; I < Arr['length']; I++) {\n    var xy3 = Arr[I]['split'](',')['map'](Number);\n    var x3 = xy3[0x0];\n    var y3 = xy3[0x1];\n    var d12 = Math['sqrt'](Math['pow'](x1 - x2, 0x2) + Math['pow'](y1 - y2, 0x2));\n    var d13 = Math['sqrt'](Math['pow'](x1 - x3, 0x2) + Math['pow'](y1 - y3, 0x2));\n    var d23 = Math['sqrt'](Math['pow'](x2 - x3, 0x2) + Math['pow'](y2 - y3, 0x2));\n    sum += heron(d12, d13, d23);\n    x2 = xy3[0x0];\n    y2 = xy3[0x1];\n}\nconsole['log'](sum['toFixed'](0x6));", "test_cases": [["0.0,0.0\n0.0,1.0 \n1.0,1.0 \n2.0,0.0 \n1.0,-1.0", "2.500000"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar xy1=(Arr.shift()).split(\",\").map(Number);\nvar xy2=(Arr.shift()).split(\",\").map(Number);\nvar x1=xy1[0];var y1=xy1[1];\nvar x2=xy2[0];var y2=xy2[1];\nvar sum=0;\nfor(var I=0;I<Arr.length;I++){\n   var xy3=Arr[I].split(\",\").map(Number);\n   var x3=xy3[0];var y3=xy3[1];\n   var d12=Math.sqrt(Math.pow(x1-x2,2)+Math.pow(y1-y2,2));\n   var d13=Math.sqrt(Math.pow(x1-x3,2)+Math.pow(y1-y3,2));\n   var d23=Math.sqrt(Math.pow(x2-x3,2)+Math.pow(y2-y3,2));\n   sum+=heron(d12,d13,d23);\n   x2=xy3[0];\n   y2=xy3[1];\n}\nconsole.log(sum.toFixed(6));", "language": "JavaScript"}
{"filename": "p00080_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var Q = Arr['shift']() - 0x0;\n    if (Q == -0x1)\n        break;\n    var x = Q / 0x2;\n    while (Math['abs'](Math['pow'](x, 0x3) - Q) >= 0.00001 * Q) {\n        x = x - (Math['pow'](x, 0x3) - Q) / (0x3 * Math['pow'](x, 0x2));\n    }\n    console['log'](x['toFixed'](0x6));\n}", "test_cases": [["15\n15\n-1", "2.466212\n2.466212"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var Q=Arr.shift()-0;\n   if(Q==-1)break;\n   var x=Q/2;\n   while(Math.abs(Math.pow(x,3)-Q)>=0.00001*Q){\n      x=x-(Math.pow(x,3)-Q)/(3*Math.pow(x,2));\n   }\n   console.log(x.toFixed(6));\n}", "language": "JavaScript"}
{"filename": "p00081_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split'](',')['map'](Number);\n    (function (_0x31e047, _0xc85a08, _0x21d1aa, _0xca2a08, _0x4e2968, _0x5f4019) {\n        var _0xfdd576 = _0x21d1aa - _0x31e047 == 0x0 ? Infinity : (_0xca2a08 - _0xc85a08) / (_0x21d1aa - _0x31e047);\n        var _0x1938d6;\n        if (_0xfdd576 == 0x0)\n            _0x1938d6 = [\n                _0x4e2968,\n                _0xc85a08 - (_0x5f4019 - _0xc85a08)\n            ];\n        else if (_0xfdd576 == Infinity)\n            _0x1938d6 = [\n                _0x31e047 - (_0x4e2968 - _0x31e047),\n                _0x5f4019\n            ];\n        else {\n            var _0x4551f3 = (_0xca2a08 - _0xc85a08) / (_0x21d1aa - _0x31e047);\n            var _0x3c9f24 = -0x1 / _0x4551f3;\n            var _0x2086be = _0xc85a08 - _0x4551f3 * _0x31e047;\n            var _0x2fe534 = _0x5f4019 - _0x3c9f24 * _0x4e2968;\n            var _0x186d0a = (_0x2fe534 - _0x2086be) / (_0x4551f3 - _0x3c9f24);\n            var _0x2eaa18 = 0x2 * _0x186d0a - _0x4e2968;\n            var _0x2a7eb7 = _0x3c9f24 * _0x2eaa18 + _0x2fe534;\n            _0x1938d6 = [\n                _0x2eaa18,\n                _0x2a7eb7\n            ];\n        }\n        console['log'](_0x1938d6[0x0]['toFixed'](0x6) + '\\x20' + _0x1938d6[0x1]['toFixed'](0x6));\n    }['apply'](null, arr));\n}", "test_cases": [["1.0,0.0,-1.0,0.0,1.0,1.0 \n1.0,0.0,0.0,-1.0,3.0,0.0 \n0.0,1.0,0.0,-1.0,1.0,1.0", "1.000000 -1.000000\n1.000000 2.000000\n-1.000000 1.000000"]], "original": "/*h  t t p : / / t a k u -k . h a t e n a blog . c o m / entry /2013/ 03 / 2 6 / 174239 */\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\",\").map(Number);\n   (function(x1,y1,x2,y2,xq,yq){\n      var k=(x2-x1==0)?Infinity:(y2-y1)/(x2-x1);\n      var ans;\n      if(k==0)ans=[xq,y1-(yq-y1)];\n      else if(k==Infinity)ans=[x1-(xq-x1),yq];\n      else{\n         var  a1=(y2-y1)/(x2-x1);\n         var  a2=(-1)/a1;\n         var  b1=y1-a1*x1;\n         var  b2=yq-a2*xq;\n         var  xm=(b2-b1)/(a1-a2);\n         var  x=2*xm-xq;\n         var  y=a2*x+b2;\n         ans=[x,y];\n      }\n      console.log(ans[0].toFixed(6)+\" \"+ans[1].toFixed(6));\n   }).apply(null,arr);\n}", "language": "JavaScript"}
{"filename": "p00107_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (arr[0x0] == 0x0 && arr[0x1] == 0x0 && arr[0x2] == 0x0)\n        break;\n    arr['sort'](function (_0xd1bfc, _0x3eaf09) {\n        return _0xd1bfc - _0x3eaf09;\n    });\n    var R = Math['sqrt'](arr[0x0] * arr[0x0] + arr[0x1] * arr[0x1]);\n    var n = Arr['shift']() - 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var r = Arr['shift']() - 0x0;\n        console['log'](r * 0x2 > R ? 'OK' : 'NA');\n    }\n}", "test_cases": [["10 6 8\n5\n4\n8\n6\n2\n5\n0 0 0", "NA\nOK\nOK\nNA\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0 && arr[1]==0 && arr[2]==0)break;\n   arr.sort(function(a,b){return a-b;});\n   var R=Math.sqrt(arr[0]*arr[0]+arr[1]*arr[1]);\n   var n=Arr.shift()-0;\n   for(var i=0;i<n;i++){\n      var r=Arr.shift()-0;\n      console.log((r*2>R)?\"OK\":\"NA\");\n   }\n}", "language": "JavaScript"}
{"filename": "p00108_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']();\n    if (n == '0')\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var k = 0x0;\n    var S = [];\n    while (!![]) {\n        for (var i = 0x0; i < arr['length']; i++) {\n            var cnt = 0x0;\n            for (var j = 0x0; j < arr['length']; j++) {\n                if (arr[i] == arr[j])\n                    cnt++;\n            }\n            S['push'](cnt);\n        }\n        if (S['join']('\\x20') == arr['join']('\\x20'))\n            break;\n        arr = S['slice']();\n        S = [];\n        k++;\n    }\n    console['log'](k);\n    console['log'](S['join']('\\x20'));\n}", "test_cases": [["10\n4 5 1 1 4 5 12 3 5 4\n0", "3\n6 6 4 4 6 6 4 4 6 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift();\n   if(n==\"0\")break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var k=0;\n   var S=[];\n   while(true){\n      for(var i=0;i<arr.length;i++){\n         var cnt=0;\n         for(var j=0;j<arr.length;j++){\n            if(arr[i]==arr[j])cnt++;\n         }\n         S.push(cnt);\n      }\n      if(S.join(\" \")==arr.join(\" \"))break;\n      arr=S.slice();\n      S=[];\n      k++;\n   }\n   console.log(k);\n   console.log(S.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00112_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = [];\n    for (var i = 0x0; i < n; i++) {\n        var v = Arr['shift']() - 0x0;\n        arr['push'](v);\n    }\n    arr['sort'](function (_0x1813b3, _0x3c8f25) {\n        return _0x1813b3 - _0x3c8f25;\n    });\n    var wait = [];\n    var time = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        wait['push'](time);\n        time += arr[i];\n    }\n    var sum = wait['reduce'](function (_0x33cd18, _0x193bb5) {\n        return _0x33cd18 + _0x193bb5;\n    });\n    console['log'](sum);\n}", "test_cases": [["5\n2\n6\n4\n3\n9\n0", "31"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++){\n      var v=Arr.shift()-0;\n      arr.push(v);\n   }\n   arr.sort(function(a,b){return a-b;});\n   var wait=[];\n   var time=0;\n   for(var i=0;i<n;i++){\n      wait.push(time);\n      time+=arr[i];\n   }\n   var sum=wait.reduce(function(a,b){return a+b;});\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00117_1", "type": "JavaScript", "obfuscated": "function warshall() {\n    for (var _0x1a838f = 0x0; _0x1a838f < n; _0x1a838f++) {\n        for (var _0x55a0f1 = 0x0; _0x55a0f1 < n; _0x55a0f1++) {\n            for (var _0xec139b = 0x0; _0xec139b < n; _0xec139b++) {\n                C[_0x55a0f1][_0xec139b] = Math['min'](C[_0x55a0f1][_0xec139b], C[_0x55a0f1][_0x1a838f] + C[_0x1a838f][_0xec139b]);\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nvar m = Arr['shift']() - 0x0;\nvar C = [];\nfor (var i = 0x0; i < n; i++) {\n    C[i] = [];\n    for (var j = 0x0; j < n; j++) {\n        C[i][j] = i === j ? 0x0 : Infinity;\n    }\n}\nfor (var i = 0x0; i < m; i++) {\n    var A = Arr['shift']()['split'](',')['map'](Number);\n    C[A[0x0] - 0x1][A[0x1] - 0x1] = A[0x2];\n    C[A[0x1] - 0x1][A[0x0] - 0x1] = A[0x3];\n}\nwarshall();\nvar last = Arr['shift']()['split'](',')['map'](Number);\nvar cost = C[last[0x0] - 0x1][last[0x1] - 0x1] + C[last[0x1] - 0x1][last[0x0] - 0x1] + last[0x3];\nconsole['log'](last[0x2] - cost);", "test_cases": [["6\n8\n1,2,2,2 \n1,3,4,3 \n1,4,4,2 \n2,5,3,2 \n3,4,4,2 \n3,6,1,2 \n4,6,1,1 \n5,6,1,2 \n2,4,50,30", "11"]], "original": "function warshall(){\n   for(var k=0;k<n;k++){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            C[i][j]=Math.min(C[i][j], C[i][k]+C[k][j]);\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nvar m=Arr.shift()-0;\nvar C=[];\nfor(var i=0;i<n;i++){\n   C[i]=[];\n   for(var j=0;j<n;j++){\n      C[i][j]=(i===j)?0:Infinity;\n   }\n}\nfor(var i=0;i<m;i++){\n   var A=(Arr.shift()).split(\",\").map(Number);\n   C[A[0]-1][A[1]-1]=A[2];\n   C[A[1]-1][A[0]-1]=A[3];\n}\nwarshall();\nvar last=(Arr.shift()).split(\",\").map(Number);\nvar cost=C[last[0]-1][last[1]-1]+C[last[1]-1][last[0]-1]+last[3];\nconsole.log(last[2]-cost);", "language": "JavaScript"}
{"filename": "p00119_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar m = Arr['shift']() - 0x0;\nvar n = Arr['shift']() - 0x0;\nvar M = [];\nvar check = [];\nfor (var i = 0x0; i < m; i++)\n    M[i] = [];\nfor (var i = 0x0; i < m; i++)\n    check[i] = ![];\nfor (var i = 0x0; i < n; i++) {\n    var v = Arr['shift']()['split']('\\x20')['map'](Number);\n    M[v[0x0] - 0x1]['push'](v[0x1] - 0x1);\n}\nvar L = [];\nfor (var i = 0x0; i < m; i++) {\n    visit(i);\n}\nfunction visit(_0x4698a2) {\n    if (check[_0x4698a2] == !![])\n        return;\n    else\n        check[_0x4698a2] = !![];\n    M[_0x4698a2]['forEach'](function (_0x216d17) {\n        visit(_0x216d17);\n    });\n    L['push'](_0x4698a2);\n}\nL['reverse']();\nL['forEach'](function (_0x2882b1) {\n    console['log'](_0x2882b1 + 0x1);\n});", "test_cases": [["6\n7\n5 2\n1 4\n3 5\n4 2\n1 6\n6 4\n3 4", "3\n5\n1\n6\n4\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar m=Arr.shift()-0;\nvar n=Arr.shift()-0;\nvar M=[];\nvar check=[];\nfor(var i=0;i<m;i++)M[i]=[];\nfor(var i=0;i<m;i++)check[i]=false;\nfor(var i=0;i<n;i++){\n   var v=Arr.shift().split(\" \").map(Number);\n   M[v[0]-1].push(v[1]-1);\n}\nvar L=[]; \nfor(var i=0;i<m;i++){\n   visit(i);\n}\nfunction visit(x){\n   if(check[x]==true)return;\n   else check[x]=true;\n   M[x].forEach(function(v){\n      visit(v);\n   });\n   L.push(x);\n}\nL.reverse();\nL.forEach(function(v){\n   console.log(v+1);\n});", "language": "JavaScript"}
{"filename": "p00123_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['forEach'](function (_0x134920) {\n    var _0x64de16 = _0x134920['split']('\\x20')['map'](Number);\n    var _0x29bd49 = _0x64de16[0x0];\n    var _0x4d5aea = _0x64de16[0x1];\n    var _0x56def1;\n    if (35.5 > _0x29bd49 && 0x47 > _0x4d5aea)\n        _0x56def1 = 'AAA';\n    else if (37.5 > _0x29bd49 && 0x4d > _0x4d5aea)\n        _0x56def1 = 'AA';\n    else if (0x28 > _0x29bd49 && 0x53 > _0x4d5aea)\n        _0x56def1 = 'A';\n    else if (0x2b > _0x29bd49 && 0x59 > _0x4d5aea)\n        _0x56def1 = 'B';\n    else if (0x32 > _0x29bd49 && 0x69 > _0x4d5aea)\n        _0x56def1 = 'C';\n    else if (0x37 > _0x29bd49 && 0x74 > _0x4d5aea)\n        _0x56def1 = 'D';\n    else if (0x46 > _0x29bd49 && 0x94 > _0x4d5aea)\n        _0x56def1 = 'E';\n    else\n        _0x56def1 = 'NA';\n    console['log'](_0x56def1);\n});", "test_cases": [["40.0 70.0\n72.5 140.51", "B\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var a=arr[0];\n   var b=arr[1];\n   var ans;\n   if(35.5>a && 71>b)ans=\"AAA\";\n   else if(37.5>a && 77>b)ans=\"AA\";\n   else if(40>a && 83>b)ans=\"A\";\n   else if(43>a && 89>b)ans=\"B\";\n   else if(50>a && 105>b)ans=\"C\";\n   else if(55>a && 116>b)ans=\"D\";\n   else if(70>a && 148>b)ans=\"E\";\n   else ans=\"NA\";\n   console.log(ans);\n});", "language": "JavaScript"}
{"filename": "p00124_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar I = 0x0;\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    if (I != 0x0)\n        console['log']('');\n    I++;\n    var rank = [];\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20');\n        var score = 0x3 * (arr[0x1] - 0x0) + (arr[0x3] - 0x0) + (0xa - i) * 0.01;\n        rank['push']([\n            arr[0x0],\n            score\n        ]);\n    }\n    rank['sort'](function (_0x48f09a, _0x51bdab) {\n        _0x48f09a = _0x48f09a[0x1];\n        _0x51bdab = _0x51bdab[0x1];\n        return _0x51bdab - _0x48f09a;\n    });\n    rank['forEach'](function (_0x498839) {\n        console['log'](_0x498839[0x0] + ',' + Math['floor'](_0x498839[0x1]));\n    });\n}", "test_cases": [["4\nJapan 1 0 2\nEgypt 1 2 0\nCanada 0 2 1\nSpain 2 0 1\n3\nIndia 0 2 0\nPoland 1 0 1\nItaly 1 0 1\n0", "Spain,7\nJapan,5\nEgypt,3\nCanada,1\n\nPoland,4\nItaly,4\nIndia,0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar I=0;\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   if(I!=0)console.log(\"\");\n   I++;\n   var rank=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var score=(3*(arr[1]-0))+(arr[3]-0)+((10-i)*0.01);\n      rank.push([arr[0],score]);\n   }\n   rank.sort(function(a,b){\n      a=a[1];\n      b=b[1];\n      return b-a;\n   });\n   rank.forEach(function(v){\n      console.log(v[0]+\",\"+Math.floor(v[1]));\n   });\n}", "language": "JavaScript"}
{"filename": "p00125_1", "type": "JavaScript", "obfuscated": "function year(_0x5287a5) {\n    var _0x4278c3 = [\n        0x16d,\n        0x1f,\n        0x1c,\n        0x1f,\n        0x1e,\n        0x1f,\n        0x1e,\n        0x1f,\n        0x1f,\n        0x1e,\n        0x1f,\n        0x1e,\n        0x1f\n    ];\n    if (_0x5287a5 % 0x4 == 0x0) {\n        _0x4278c3[0x2] = 0x1d;\n        _0x4278c3[0x0] = 0x16e;\n        if (_0x5287a5 % 0x64 == 0x0) {\n            _0x4278c3[0x2] = 0x1c;\n            _0x4278c3[0x0] = 0x16d;\n        }\n        if (_0x5287a5 % 0x190 == 0x0) {\n            _0x4278c3[0x2] = 0x1d;\n            _0x4278c3[0x0] = 0x16e;\n        }\n    }\n    return _0x4278c3;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var str = Arr['shift']();\n    if (str == '-1\\x20-1\\x20-1\\x20-1\\x20-1\\x20-1')\n        break;\n    var arr = str['split']('\\x20')['map'](Number);\n    (function (_0x6bbf2a, _0x5c74b4, _0x14d44a, _0x3b9002, _0x47475b, _0x14f608) {\n        var _0x1edb9a = 0x0;\n        var _0xa01ae8 = 0x0;\n        var _0x4298cf = year(_0x6bbf2a);\n        var _0x3dd97e = year(_0x3b9002);\n        _0x1edb9a += _0x4298cf[_0x5c74b4] - _0x14d44a;\n        _0xa01ae8 += _0x3dd97e[_0x47475b] - _0x14f608;\n        while (_0x5c74b4 < 0xc) {\n            _0x5c74b4++;\n            _0x1edb9a += _0x4298cf[_0x5c74b4];\n        }\n        while (_0x47475b < 0xc) {\n            _0x47475b++;\n            _0xa01ae8 += _0x3dd97e[_0x47475b];\n        }\n        var _0x206b04 = _0x1edb9a - _0xa01ae8;\n        while (_0x6bbf2a != _0x3b9002) {\n            _0x6bbf2a++;\n            _0x206b04 += year(_0x6bbf2a)[0x0];\n        }\n        console['log'](_0x206b04);\n    }['apply'](null, arr));\n}", "test_cases": [["2006 9 2 2006 9 3\n2006 9 2 2006 11 11\n2004 1 1 2005 1 1\n2000 1 1 2006 1 1\n2000 1 1 2101 1 1\n-1 -1 -1 -1 -1 -1", "1\n70\n366\n2192\n36890"]], "original": "function year(x){\n   var m=[365,31,28,31,30,31,30,31,31,30,31,30,31];\n   if(x%4==0){\n      m[2]=29;\n      m[0]=366;\n      if(x%100==0){m[2]=28;m[0]=365;}\n      if(x%400==0){m[2]=29;m[0]=366;}\n   }\n   return m;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"-1 -1 -1 -1 -1 -1\")break;\n   var arr=str.split(\" \").map(Number);\n   (function(y1, m1, d1, y2, m2, d2){\n      var sum1=0;\n      var sum2=0;\n      var Y1=year(y1);\n      var Y2=year(y2);\n      sum1+=Y1[m1]-d1;\n      sum2+=Y2[m2]-d2;\n      while(m1<12){m1++;sum1+=Y1[m1];}\n      while(m2<12){m2++;sum2+=Y2[m2];}\n      var days=sum1-sum2;\n      while(y1!=y2){\n         y1++;\n         days+=(year(y1))[0];\n      }\n      console.log(days);\n   }).apply(null,arr);\n}", "language": "JavaScript"}
{"filename": "p00127_1", "type": "JavaScript", "obfuscated": "var table = {};\ntable[0xb] = 'a';\ntable[0xc] = 'b';\ntable[0xd] = 'c';\ntable[0xe] = 'd';\ntable[0xf] = 'e';\ntable[0x15] = 'f';\ntable[0x16] = 'g';\ntable[0x17] = 'h';\ntable[0x18] = 'i';\ntable[0x19] = 'j';\ntable[0x1f] = 'k';\ntable[0x20] = 'l';\ntable[0x21] = 'm';\ntable[0x22] = 'n';\ntable[0x23] = 'o';\ntable[0x29] = 'p';\ntable[0x2a] = 'q';\ntable[0x2b] = 'r';\ntable[0x2c] = 's';\ntable[0x2d] = 't';\ntable[0x33] = 'u';\ntable[0x34] = 'v';\ntable[0x35] = 'w';\ntable[0x36] = 'x';\ntable[0x37] = 'y';\ntable[0x3d] = 'z';\ntable[0x3e] = '.';\ntable[0x3f] = '?';\ntable[0x40] = '!';\ntable[0x41] = '\\x20';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nArr['forEach'](function (_0x4ffdee) {\n    _0x4ffdee = _0x4ffdee['replace'](/\\d\\d/g, function (_0x23b5ad) {\n        if (table['hasOwnProperty'](_0x23b5ad))\n            _0x23b5ad = table[_0x23b5ad];\n        return _0x23b5ad;\n    });\n    if (_0x4ffdee['match'](/\\d/))\n        _0x4ffdee = 'NA';\n    console['log'](_0x4ffdee);\n});", "test_cases": [["341143514535\n314\n143565553551655311343411652235654535651124615163\n551544654451431564\n4\n3411\n6363636363\n153414", "naruto\nNA\ndo you wanna go to aizu?\nyes sure!\nNA\nna\n?????\nend"]], "original": "var table={};\n    table[11] = \"a\";\n    table[12] = \"b\";\n    table[13] = \"c\";\n    table[14] = \"d\";\n    table[15] = \"e\";\n \n    table[21] = \"f\";\n    table[22] = \"g\";\n    table[23] = \"h\";\n    table[24] = \"i\";\n    table[25] = \"j\";\n \n    table[31] = \"k\";\n    table[32] = \"l\";\n    table[33] = \"m\";\n    table[34] = \"n\";\n    table[35] = \"o\";\n \n    table[41] = \"p\";\n    table[42] = \"q\";\n    table[43] = \"r\";\n    table[44] = \"s\";\n    table[45] = \"t\";\n \n    table[51] = \"u\";\n    table[52] = \"v\";\n    table[53] = \"w\";\n    table[54] = \"x\";\n    table[55] = \"y\";\n \n    table[61] = \"z\";\n    table[62] = \".\";\n    table[63] = \"?\";\n    table[64] = \"!\";\n    table[65] = \" \";\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nArr.forEach(function(str){\n   str=str.replace(/\\d\\d/g,function(s){\n      if(table.hasOwnProperty(s))s=table[s];\n      return s;\n   });\n   if(str.match(/\\d/))str=\"NA\";\n   console.log(str);\n});", "language": "JavaScript"}
{"filename": "p00133_1", "type": "JavaScript", "obfuscated": "function move(_0x51f386) {\n    var _0x14b413 = [];\n    for (var _0x29b9d0 = 0x0; _0x29b9d0 < 0x8; _0x29b9d0++)\n        _0x14b413[_0x29b9d0] = [];\n    for (var _0x29b9d0 = 0x0; _0x29b9d0 < 0x8; _0x29b9d0++) {\n        for (var _0x294be1 = 0x0; _0x294be1 < 0x8; _0x294be1++) {\n            _0x14b413[_0x29b9d0][_0x294be1] = _0x51f386[0x7 - _0x294be1][_0x29b9d0];\n        }\n    }\n    return _0x14b413;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar yx = [];\nfor (var i = 0x0; i < 0x8; i++)\n    yx['push'](Arr[i]['split'](''));\nyx = move(yx);\nconsole['log']('90\\x0a' + yx['join']('\\x0a')['replace'](/\\,/g, ''));\nyx = move(yx);\nconsole['log']('180\\x0a' + yx['join']('\\x0a')['replace'](/\\,/g, ''));\nyx = move(yx);\nconsole['log']('270\\x0a' + yx['join']('\\x0a')['replace'](/\\,/g, ''));", "test_cases": [["#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n########", "90\n########\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n#*******\n180\n########\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n270\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n*******#\n########"]], "original": "function move(yx){\n   var arr=[];\n   for(var y=0;y<8;y++)arr[y]=[];\n   for(var y=0;y<8;y++){\n      for(var x=0;x<8;x++){\n         arr[y][x]=yx[7-x][y];\n      }\n   }\n   return arr;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar yx=[];\nfor(var i=0;i<8;i++)yx.push(Arr[i].split(\"\"));\nyx=move(yx);\nconsole.log(\"90\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));\nyx=move(yx);\nconsole.log(\"180\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));\nyx=move(yx);\nconsole.log(\"270\\n\"+yx.join(\"\\n\").replace(/\\,/g,\"\"));", "language": "JavaScript"}
{"filename": "p00134_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar n = Arr['shift']();\nvar sum = 0x0;\nfor (var i = 0x0; i < n; i++) {\n    sum += Arr[i];\n}\nconsole['log'](Math['floor'](sum / n));", "test_cases": [["6\n12300\n5600\n33800\n0\n26495\n52000", "21699"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar n=Arr.shift();\nvar sum=0;\nfor(var i=0;i<n;i++){\nsum+=Arr[i];\n}\nconsole.log(Math.floor(sum/n));", "language": "JavaScript"}
{"filename": "p00137_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar L = Arr['shift']();\nfor (var i = 0x0; i < L; i++) {\n    console['log']('Case\\x20' + (i + 0x1) + ':');\n    var v = Arr[i];\n    for (var j = 0x0; j < 0xa; j++) {\n        v = '000000' + v * v;\n        v = v['slice'](-0x6);\n        v = v['slice'](0x0, 0x4);\n        v = parseInt(v, 0xa);\n        console['log'](v);\n    }\n}", "test_cases": [["2\n123\n567", "Case 1:\n151\n228\n519\n2693\n2522\n3604\n9888\n7725\n6756\n6435\nCase 2:\n3214\n3297\n8702\n7248\n5335\n4622\n3628\n1623\n6341\n2082"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar L=Arr.shift();\nfor(var i=0;i<L;i++){\n   console.log(\"Case \"+(i+1)+\":\");\n   var v=Arr[i];\n   for(var j=0;j<10;j++){\n      v=\"000000\"+(v*v);\n      v=v.slice(-6);\n      v=v.slice(0,4);\n      v=parseInt(v,10);\n      console.log(v);\n   }\n}", "language": "JavaScript"}
{"filename": "p00138_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar abc = [\n    [],\n    [],\n    []\n];\nvar obj = {};\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    abc[Math['floor'](i / 0x8)]['push'](arr[0x1]);\n    obj[arr[0x1]] = arr[0x0];\n}\nfor (var i = 0x0; i < 0x3; i++)\n    abc[i]['sort'](function (_0xa455, _0x146920) {\n        return _0xa455 - _0x146920;\n    });\nconsole['log'](obj[abc[0x0][0x0]] + '\\x20' + abc[0x0][0x0]['toFixed'](0x2));\nconsole['log'](obj[abc[0x0][0x1]] + '\\x20' + abc[0x0][0x1]['toFixed'](0x2));\nconsole['log'](obj[abc[0x1][0x0]] + '\\x20' + abc[0x1][0x0]['toFixed'](0x2));\nconsole['log'](obj[abc[0x1][0x1]] + '\\x20' + abc[0x1][0x1]['toFixed'](0x2));\nconsole['log'](obj[abc[0x2][0x0]] + '\\x20' + abc[0x2][0x0]['toFixed'](0x2));\nconsole['log'](obj[abc[0x2][0x1]] + '\\x20' + abc[0x2][0x1]['toFixed'](0x2));\nvar d = [];\nfor (var i = 0x0; i < 0x3; i++)\n    d['push'](abc[i][0x2]);\nd['sort'](function (_0xb55a79, _0xa8ed8c) {\n    return _0xb55a79 - _0xa8ed8c;\n});\nconsole['log'](obj[d[0x0]] + '\\x20' + d[0x0]['toFixed'](0x2));\nconsole['log'](obj[d[0x1]] + '\\x20' + d[0x1]['toFixed'](0x2));", "test_cases": [["18 25.46\n16 26.23\n3 23.00\n10 24.79\n5 22.88\n11 23.87\n19 23.90\n1 25.11\n23 23.88\n4 23.46\n7 24.12\n12 22.91\n13 21.99\n14 22.86\n21 23.12\n9 24.09\n17 22.51\n22 23.49\n6 23.02\n20 22.23\n24 21.89\n15 24.14\n8 23.77\n2 23.42", "5 22.88\n3 23.00\n13 21.99\n14 22.86\n24 21.89\n20 22.23\n17 22.51\n12 22.91"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar abc=[[],[],[]];\nvar obj={};\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \").map(Number);\n   abc[Math.floor(i/8)].push(arr[1]);\n   obj[arr[1]]=arr[0];\n}\nfor(var i=0;i<3;i++)abc[i].sort(function(a,b){return a-b;});\nconsole.log(obj[abc[0][0]]+\" \"+(abc[0][0].toFixed(2)));\nconsole.log(obj[abc[0][1]]+\" \"+(abc[0][1].toFixed(2)));\nconsole.log(obj[abc[1][0]]+\" \"+(abc[1][0].toFixed(2)));\nconsole.log(obj[abc[1][1]]+\" \"+(abc[1][1].toFixed(2)));\nconsole.log(obj[abc[2][0]]+\" \"+(abc[2][0].toFixed(2)));\nconsole.log(obj[abc[2][1]]+\" \"+(abc[2][1].toFixed(2)));\nvar d=[];\nfor(var i=0;i<3;i++)d.push(abc[i][2]);\nd.sort(function(a,b){return a-b;});\nconsole.log(obj[d[0]]+\" \"+(d[0].toFixed(2)));\nconsole.log(obj[d[1]]+\" \"+(d[1].toFixed(2)));", "language": "JavaScript"}
{"filename": "p00150_1", "type": "JavaScript", "obfuscated": "function prime(_0xbedb4a) {\n    var _0x28768a = [];\n    for (var _0x5dad47 = 0x0; _0x5dad47 <= _0xbedb4a; _0x5dad47++)\n        _0x28768a[_0x5dad47] = _0x5dad47;\n    _0x28768a[0x0] = ![];\n    _0x28768a[0x1] = ![];\n    var _0x320a60 = Math['floor'](Math['sqrt'](_0xbedb4a));\n    for (var _0x5dad47 = 0x2; _0x5dad47 <= _0x320a60; _0x5dad47++) {\n        if (_0x28768a[_0x5dad47] == ![])\n            continue;\n        for (var _0x423662 = _0x5dad47 + _0x5dad47; _0x423662 <= _0xbedb4a; _0x423662 += _0x5dad47) {\n            _0x28768a[_0x423662] = ![];\n        }\n    }\n    var _0x44b55d = [];\n    for (var _0x5dad47 = 0x0; _0x5dad47 <= _0xbedb4a; _0x5dad47++) {\n        if (_0x28768a[_0x5dad47] !== ![])\n            _0x44b55d['push'](_0x28768a[_0x5dad47]);\n    }\n    return _0x44b55d;\n}\nvar p = prime(0xf423f);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var a = Arr[i];\n    if (a == 0x0)\n        break;\n    var twin = '';\n    for (var j = 0x1; j < p['length']; j++) {\n        if (p[j] > a)\n            break;\n        if (p[j] - p[j - 0x1] == 0x2)\n            twin = p[j - 0x1] + '\\x20' + p[j];\n    }\n    console['log'](twin);\n}", "test_cases": [["12\n100\n200\n300\n0", "5 7\n71 73\n197 199\n281 283"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(999999);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   var twin=\"\";\n   for(var j=1;j<p.length;j++){\n   if(p[j]>a)break;\n   if(p[j]-p[j-1]==2)twin=p[j-1]+\" \"+p[j];\n   }\n   console.log(twin);\n}", "language": "JavaScript"}
{"filename": "p00154_1", "type": "JavaScript", "obfuscated": "function bomb(_0xb1870c, _0x36244e) {\n    dp[_0xb1870c][_0x36244e]++;\n    if (_0xb1870c == card['length'])\n        return;\n    var _0x146842 = card[_0xb1870c][0x0];\n    var _0x5ed748 = card[_0xb1870c][0x1];\n    for (var _0xd372ca = 0x0; _0xd372ca <= _0x5ed748; _0xd372ca++) {\n        bomb(_0xb1870c + 0x1, _0x36244e + _0x146842 * _0xd372ca);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var m = arr['shift']() - 0x0;\n    if (m == 0x0)\n        break;\n    var card = [];\n    while (m--)\n        card['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var g = arr['shift']() - 0x0;\n    var dp = [];\n    for (var i = 0x0; i <= card['length']; i++) {\n        dp[i] = [];\n        for (var j = 0x0; j <= 0x3e8; j++) {\n            dp[i][j] = 0x0;\n        }\n    }\n    bomb(0x0, 0x0);\n    while (g--)\n        console['log'](dp[card['length']][arr['shift']() - 0x0]);\n}", "test_cases": [["5\n1 10\n5 3\n10 3\n25 2\n50 2\n4\n120\n500\n100\n168\n7\n1 10\n3 10\n5 10\n10 10\n25 10\n50 10\n100 10\n3\n452\n574\n787\n0", "16\n0\n12\n7\n9789\n13658\n17466"]], "original": "function bomb(start,sum){\n   dp[start][sum]++;\n   if(start==card.length)return;\n   var v=card[start][0];\n   var k=card[start][1];\n   for(var i=0;i<=k;i++){\n      bomb(start+1,sum+v*i);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var m=arr.shift()-0;\n   if(m==0)break;\n   var card=[];\n   while(m--)card.push(arr.shift().split(\" \").map(Number));\n   var g=arr.shift()-0;\n   var dp=[];\n   for(var i=0;i<=card.length;i++){\n      dp[i]=[];\n      for(var j=0;j<=1000;j++){\n         dp[i][j]=0;\n      }\n   }\n   bomb(0,0);\n   while(g--)console.log(dp[card.length][arr.shift()-0]);\n}", "language": "JavaScript"}
{"filename": "p00157_1", "type": "JavaScript", "obfuscated": "function Longest() {\n    ary['sort'](function (_0x2ed5d2, _0xd2f4bf) {\n        if (_0x2ed5d2[0x0] == _0xd2f4bf[0x0])\n            return _0x2ed5d2[0x1] - _0xd2f4bf[0x1];\n        else\n            return _0x2ed5d2[0x0] - _0xd2f4bf[0x0];\n    });\n    var _0x49ec11 = ary['filter'](function (_0x298c97, _0x4b4242) {\n        if (_0x4b4242 == 0x0)\n            return !![];\n        else if (ary[_0x4b4242 - 0x1][0x0] != _0x298c97[0x0])\n            return !![];\n    });\n    _0x49ec11 = _0x49ec11['map'](function (_0x3c452a) {\n        return _0x3c452a[0x1];\n    });\n    var _0x407e9c = [];\n    _0x407e9c[0x0] = _0x49ec11[0x0];\n    var _0x44d5ac = 0x1;\n    for (var _0x2dbeb4 = 0x1; _0x2dbeb4 < _0x49ec11['length']; _0x2dbeb4++) {\n        if (_0x407e9c[_0x44d5ac - 0x1] < _0x49ec11[_0x2dbeb4])\n            _0x407e9c[_0x44d5ac++] = _0x49ec11[_0x2dbeb4];\n        else {\n            for (var _0x4b1099 = 0x0; _0x4b1099 < _0x44d5ac; _0x4b1099++) {\n                if (_0x407e9c[_0x4b1099] >= _0x49ec11[_0x2dbeb4]) {\n                    _0x407e9c[_0x4b1099] = _0x49ec11[_0x2dbeb4];\n                    break;\n                }\n            }\n        }\n    }\n    return _0x44d5ac;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var ary = [];\n    for (var i = 0x0; i < n; i++)\n        ary['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var m = arr['shift']() - 0x0;\n    for (var i = 0x0; i < m; i++)\n        ary['push'](arr['shift']()['split']('\\x20')['map'](Number));\n    var R = Longest();\n    ary = ary['map'](function (_0x59c583) {\n        return [\n            _0x59c583[0x1],\n            _0x59c583[0x0]\n        ];\n    });\n    var H = Longest();\n    console['log'](Math['max'](R, H));\n}", "test_cases": [["6\n1 1\n4 3\n6 5\n8 6\n10 10\n14 14\n5\n2 2\n5 4\n6 6\n9 8\n15 10\n4\n1 1\n4 3\n6 5\n8 6\n3\n2 2\n5 4\n6 6\n4\n1 1\n4 3\n6 5\n8 6\n4\n10 10\n12 11\n18 15\n24 20\n0", "9\n6\n8"]], "original": "function Longest(){\n   ary.sort(function(a,b){\n      if(a[0]==b[0])return a[1]-b[1];\n      else return a[0]-b[0]\n   });\n   var A=ary.filter(function(v,i){\n      if(i==0)return true;\n      else if(ary[i-1][0]!=v[0])return true;\n   });\n   A=A.map(function(v){return v[1];});\n   var L=[];\n   L[0] = A[0];\n   var length = 1;\n   for(var i=1;i<A.length;i++){\n      if (L[length-1] < A[i])L[length++] = A[i];\n      else {\n         for(var j=0;j<length;j++){\n            if(L[j]>=A[i]){L[j]=A[i];break;}\n         }\n      }\n   }\n   return length;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=[];\n   for(var i=0;i<n;i++)ary.push(arr.shift().split(\" \").map(Number));\n   var m=arr.shift()-0;\n   for(var i=0;i<m;i++)ary.push(arr.shift().split(\" \").map(Number));\n   var R=Longest();\n   ary=ary.map(function(v){return [v[1],v[0]];});\n   var H=Longest();\n   console.log(Math.max(R,H));\n}", "language": "JavaScript"}
{"filename": "p00158_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var cnt = 0x0;\n    while (n != 0x1) {\n        cnt++;\n        if (n % 0x2 == 0x0)\n            n = n / 0x2;\n        else\n            n = 0x3 * n + 0x1;\n    }\n    console['log'](cnt);\n}", "test_cases": [["3\n10\n0", "7\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var cnt=0;\n   while(n!=1){\n      cnt++;\n      if(n%2==0)n=n/2;\n      else n=(3*n)+1;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00161_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var team = [];\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        var a = arr[0x1] * 0x3c + arr[0x2];\n        var b = arr[0x3] * 0x3c + arr[0x4];\n        var c = arr[0x5] * 0x3c + arr[0x6];\n        var d = arr[0x7] * 0x3c + arr[0x8];\n        team['push']([\n            arr[0x0],\n            a + b + c + d\n        ]);\n    }\n    team['sort'](function (_0x3f9056, _0x8aa7f8) {\n        _0x3f9056 = _0x3f9056[0x1];\n        _0x8aa7f8 = _0x8aa7f8[0x1];\n        return _0x3f9056 - _0x8aa7f8;\n    });\n    console['log'](team[0x0][0x0]);\n    console['log'](team[0x1][0x0]);\n    console['log'](team[team['length'] - 0x2][0x0]);\n}", "test_cases": [["8\n34001 3 20 3 8 6 27 2 25\n20941 3 5 2 41 7 19 2 42\n90585 4 8 3 12 6 46 2 34\n92201 3 28 2 47 6 37 2 58\n10001 3 50 2 42 7 12 2 54\n63812 4 11 3 11 6 53 2 22\n54092 3 33 2 54 6 18 2 19\n25012 3 44 2 58 6 45 2 46\n4\n1 3 23 1 23 1 34 4 44\n2 5 12 2 12 3 41 2 29\n3 5 24 1 24 2 0 3 35\n4 4 49 2 22 4 41 4 23\n0", "54092\n34001\n10001\n1\n3\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var team=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \").map(Number);\n      var a=(arr[1]*60)+arr[2];\n      var b=(arr[3]*60)+arr[4];\n      var c=(arr[5]*60)+arr[6];\n      var d=(arr[7]*60)+arr[8];\n      team.push([arr[0],a+b+c+d]);\n   }\n   team.sort(function(a,b){\n      a=a[1];\n      b=b[1];\n      return a-b;\n   });\n   console.log(team[0][0]);\n   console.log(team[1][0]);\n   console.log(team[team.length-2][0]);\n}", "language": "JavaScript"}
{"filename": "p00162_1", "type": "JavaScript", "obfuscated": "function hamming() {\n    var _0x47fb18 = {};\n    for (var _0x1a600d = 0x1; _0x1a600d <= 0xf4240; _0x1a600d++) {\n        var _0x2c8415 = _0x1a600d;\n        while (_0x2c8415 % 0x2 == 0x0)\n            _0x2c8415 /= 0x2;\n        while (_0x2c8415 % 0x3 == 0x0)\n            _0x2c8415 /= 0x3;\n        while (_0x2c8415 % 0x5 == 0x0)\n            _0x2c8415 /= 0x5;\n        if (_0x2c8415 == 0x1)\n            _0x47fb18[_0x1a600d] = !![];\n    }\n    return _0x47fb18;\n}\nvar Numbers = hamming();\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var mn = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (mn[0x0] == 0x0)\n        break;\n    var cnt = 0x0;\n    for (var i = mn[0x0]; i <= mn[0x1]; i++) {\n        if (Numbers[i])\n            cnt++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["3 8\n1 27\n1 86\n0", "5\n17\n31"]], "original": "function hamming(){\n   var obj={};\n   for(var i=1;i<=1000000;i++){\n      var h=i;\n      while(h%2==0)h/=2;\n      while(h%3==0)h/=3;\n      while(h%5==0)h/=5;\n      if(h==1)obj[i]=true\n   }\n   return obj;\n}\nvar Numbers=hamming();\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var mn=(Arr.shift()).split(\" \").map(Number);\n   if(mn[0]==0)break;\n   var cnt=0;\n   for(var i=mn[0];i<=mn[1];i++){\n      if(Numbers[i])cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00164_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var ball = 0x20;\n    var i = 0x0;\n    while (!![]) {\n        ball -= (ball - 0x1) % 0x5;\n        console['log'](ball);\n        if (ball == 0x1) {\n            console['log'](0x0);\n            break;\n        }\n        ball -= arr[i % n];\n        i++;\n        console['log'](ball);\n    }\n}", "test_cases": [["4\n3 1 4 2\n3\n4 3 2\n0", "31\n28\n26\n25\n21\n17\n16\n14\n11\n8\n6\n5\n1\n0\n31\n27\n26\n23\n21\n19\n16\n12\n11\n8\n6\n4\n1\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var ball=32;\n   var i=0;\n   while(true){\n      ball-=(ball-1)%5;\n      console.log(ball);\n      if(ball==1){console.log(0);break;}\n      ball-=arr[i%n];\n      i++;\n      console.log(ball);\n   }\n}", "language": "JavaScript"}
{"filename": "p00167_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = [];\n    for (var i = 0x0; i < n; i++) {\n        var x = Arr['shift']() - 0x0;\n        arr['push'](x);\n    }\n    var L = 0x1;\n    var cnt = 0x0;\n    while (!![]) {\n        if (arr['length'] == L)\n            break;\n        for (var i = 0x0; i < arr['length'] - L; i++) {\n            var memo = arr[i];\n            if (arr[i] > arr[i + 0x1]) {\n                cnt++;\n                arr[i] = arr[i + 0x1];\n                arr[i + 0x1] = memo;\n            }\n        }\n        L++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["5\n5\n3\n2\n1\n4\n6\n1\n2\n3\n4\n5\n6\n3\n3\n2\n1\n0", "7\n0\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=[];\n   for(var i=0;i<n;i++){\n      var x=Arr.shift()-0;\n      arr.push(x);\n   }\n   var L=1;\n   var cnt=0;\n   while(true){\n      if(arr.length==L)break;\n      for(var i=0;i<arr.length-L;i++){\n         var memo=arr[i];\n         if(arr[i]>arr[i+1]){\n            cnt++;\n            arr[i]=arr[i+1];\n            arr[i+1]=memo;\n         }\n      }\n   L++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00173_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var arr = Arr[i]['split']('\\x20');\n    var a = arr[0x1] - 0x0 + (arr[0x2] - 0x0);\n    var b = (arr[0x1] - 0x0) * 0xc8 + (arr[0x2] - 0x0) * 0x12c;\n    console['log'](arr[0x0] + '\\x20' + a + '\\x20' + b);\n}", "test_cases": [["1a 132 243\n1c 324 183\n1f 93 199\n2b 372 163\n2c 229 293\n2e 391 206\n3a 118 168\n3b 263 293\n3d 281 102", "1a 375 99300\n1c 507 119700\n1f 292 78300\n2b 535 123300\n2c 522 133700\n2e 597 140000\n3a 286 74000\n3b 556 140500\n3d 383 86800"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var arr=Arr[i].split(\" \");\n   var a=(arr[1]-0)+(arr[2]-0);\n   var b=(arr[1]-0)*200+(arr[2]-0)*300;\n   console.log(arr[0]+\" \"+a+\" \"+b);\n}", "language": "JavaScript"}
{"filename": "p00174_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var str = Arr['shift']();\n    if (str == '0')\n        break;\n    var arr = str['split']('');\n    var a = 0x0;\n    var b = 0x0;\n    arr['shift']();\n    arr['forEach'](function (_0x460c2d) {\n        if (_0x460c2d == 'A')\n            a++;\n        if (_0x460c2d == 'B')\n            b++;\n    });\n    a > b ? a++ : b++;\n    console['log'](a + '\\x20' + b);\n}", "test_cases": [["ABAABBBAABABAAABBAA\nAABBBABBABBAAABABABAAB\nBABAABAABABABBAAAB\nAABABAAABBAABBBABAA\nAAAAAAAAAAA\nABBBBBBBBBB\n0", "11 8\n10 12\n11 7\n11 8\n11 0\n0 11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"0\")break;\n   var arr=str.split(\"\");\n   var a=0;\n   var b=0;\n   arr.shift();\n   arr.forEach(function(v){\n      if(v==\"A\")a++;\n      if(v==\"B\")b++;\n   });\n   (a>b)?a++:b++;\n   console.log(a+\" \"+b);\n}", "language": "JavaScript"}
{"filename": "p00175_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (Arr[i] == -0x1)\n        break;\n    console['log'](Arr[i]['toString'](0x4));\n}", "test_cases": [["7\n4\n0\n12\n10\n10000\n-1", "13\n10\n0\n30\n22\n2130100"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   if(Arr[i]==-1)break;\n   console.log(Arr[i].toString(4));\n}", "language": "JavaScript"}
{"filename": "p00178_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var base = [\n        '',\n        '',\n        '',\n        '',\n        ''\n    ];\n    for (var i = 0x0; i < n; i++) {\n        var [d, p, q] = arr['shift']()['split']('\\x20')['map'](Number);\n        q--;\n        if (d == 0x1) {\n            var max = 0x0;\n            for (var j = 0x0; j < p; j++)\n                max = Math['max'](max, base[q + j]['length']);\n            for (var j = 0x0; j < p; j++) {\n                while (base[q + j]['length'] < max)\n                    base[q + j] += '0';\n                base[q + j] += '1';\n            }\n        } else if (d == 0x2) {\n            for (var j = 0x0; j < p; j++)\n                base[q] += '1';\n        }\n    }\n    var max = 0x0;\n    for (var i = 0x0; i < 0x5; i++)\n        max = Math['max'](max, base[i]['length']);\n    for (var i = 0x0; i < 0x5; i++) {\n        while (base[i]['length'] < max)\n            base[i] += '0';\n    }\n    var cnt = 0x0;\n    for (var i = 0x0; i < max; i++) {\n        var str = base['map'](_0x3f7442 => _0x3f7442[i])['join']('');\n        str = str['replace']('11111', '')['replace'](/0/g, '');\n        cnt += str['length'];\n    }\n    console['log'](cnt);\n}", "test_cases": [["4\n1 4 1\n1 3 1\n2 2 4\n2 3 5\n1\n1 5 1\n7\n2 2 2\n1 4 1\n2 1 3\n1 4 1\n1 1 1\n2 5 5\n1 4 2\n0", "2\n0\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var base=[\"\",\"\",\"\",\"\",\"\"];\n   for(var i=0;i<n;i++){\n      var [d,p,q]=arr.shift().split(\" \").map(Number);\n      q--;\n      if(d==1){\n         var max=0;\n         for(var j=0;j<p;j++)max=Math.max(max,base[q+j].length);\n         for(var j=0;j<p;j++){\n            while(base[q+j].length<max)base[q+j]+=\"0\";\n            base[q+j]+=\"1\";\n         }\n      }else if(d==2){\n         for(var j=0;j<p;j++)base[q]+=\"1\";\n      }\n   }\n   var max=0;\n   for(var i=0;i<5;i++)max=Math.max(max,base[i].length);\n   for(var i=0;i<5;i++){\n      while(base[i].length<max)base[i]+=\"0\";\n   }\n   var cnt=0;\n   for(var i=0;i<max;i++){\n      var str=base.map(v=> v[i]).join(\"\");\n      str=str.replace(\"11111\",\"\").replace(/0/g,\"\");\n      cnt+=str.length;\n   }\n   console.log(cnt);\n}\n\n", "language": "JavaScript"}
{"filename": "p00184_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar n = 0x0;\nvar arr = [\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0\n];\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (n == 0x0) {\n        if (i != 0x0)\n            arr['forEach'](function (_0x22dc3b) {\n                console['log'](_0x22dc3b);\n            });\n        if (Arr[i] == 0x0)\n            break;\n        n = Arr[i];\n        arr = [\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0\n        ];\n    } else {\n        n--;\n        if (Arr[i] >= 0x3c)\n            arr[0x6]++;\n        else if (Arr[i] >= 0x32)\n            arr[0x5]++;\n        else if (Arr[i] >= 0x28)\n            arr[0x4]++;\n        else if (Arr[i] >= 0x1e)\n            arr[0x3]++;\n        else if (Arr[i] >= 0x14)\n            arr[0x2]++;\n        else if (Arr[i] >= 0xa)\n            arr[0x1]++;\n        else\n            arr[0x0]++;\n    }\n}", "test_cases": [["8\n71\n34\n65\n11\n41\n39\n6\n5\n4\n67\n81\n78\n65\n0", "2\n1\n0\n2\n1\n0\n2\n0\n0\n0\n0\n0\n0\n4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar n=0;\nvar arr=[0,0,0,0,0,0,0];\nfor(var i=0;i<Arr.length;i++){\n   if(n==0){\n      if(i!=0)arr.forEach(function(v){console.log(v);});\n      if(Arr[i]==0)break;\n      n=Arr[i];\n      arr=[0,0,0,0,0,0,0];\n    }else{\n      n--;\n      if(Arr[i]>=60)arr[6]++;\n      else if(Arr[i]>=50)arr[5]++;\n      else if(Arr[i]>=40)arr[4]++;\n      else if(Arr[i]>=30)arr[3]++;\n      else if(Arr[i]>=20)arr[2]++;\n      else if(Arr[i]>=10)arr[1]++;\n      else arr[0]++;\n   }\n}", "language": "JavaScript"}
{"filename": "p00185_1", "type": "JavaScript", "obfuscated": "function prime(_0x54a56e) {\n    var _0x5e6048 = [];\n    for (var _0xe76752 = 0x0; _0xe76752 <= _0x54a56e; _0xe76752++)\n        _0x5e6048[_0xe76752] = _0xe76752;\n    _0x5e6048[0x0] = ![];\n    _0x5e6048[0x1] = ![];\n    var _0x433b43 = Math['floor'](Math['sqrt'](_0x54a56e));\n    for (var _0xe76752 = 0x2; _0xe76752 <= _0x433b43; _0xe76752++) {\n        if (_0x5e6048[_0xe76752] == ![])\n            continue;\n        for (var _0x1382f4 = _0xe76752 + _0xe76752; _0x1382f4 <= _0x54a56e; _0x1382f4 += _0xe76752) {\n            _0x5e6048[_0x1382f4] = ![];\n        }\n    }\n    var _0x121b75 = {};\n    for (var _0xe76752 = 0x0; _0xe76752 <= _0x54a56e; _0xe76752++) {\n        if (_0x5e6048[_0xe76752] !== ![])\n            _0x121b75[_0x5e6048[_0xe76752]] = !![];\n    }\n    return _0x121b75;\n}\nvar p = prime(0xf4240);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var I = 0x0; I < Arr['length']; I++) {\n    var v = Arr[I];\n    if (v == 0x0)\n        break;\n    var cnt = 0x0;\n    var obj = {};\n    for (var k in p) {\n        if (k >= v)\n            break;\n        if (obj['hasOwnProperty'](k))\n            continue;\n        obj[v - k] = !![];\n        if (p['hasOwnProperty'](v - k))\n            cnt++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["134\n4330\n34808\n98792\n0", "6\n72\n274\n607"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result={};\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result[arr[i]]=true;\n   }\n   return result;\n}\nvar p=prime(1000000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var I=0;I<Arr.length;I++){\n   var v=Arr[I];\n   if(v==0)break;\n   var cnt=0;\n   var obj={};\n   for(var k in p){\n      if(k>=v)break;\n      if(obj.hasOwnProperty(k))continue;\n      obj[v-k]=true;\n      if(p.hasOwnProperty(v-k))cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00186_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (arr[0x0] == 0x0)\n        break;\n    var q1 = arr[0x0];\n    var b = arr[0x1];\n    var c1 = arr[0x2];\n    var c2 = arr[0x3];\n    var q2 = arr[0x4];\n    var x = 0x0;\n    var y = 0x0;\n    var flag = !![];\n    while (!![]) {\n        if (b >= c1 * (x + 0x1) && x + 0x1 <= q2)\n            x++;\n        else\n            break;\n    }\n    while (!![]) {\n        if (b >= c1 * x + c2 * (y + 0x1))\n            y++;\n        else\n            break;\n    }\n    while (!![]) {\n        if (x == 0x0) {\n            flag = ![];\n            break;\n        }\n        if (c1 * x + c2 * y > b) {\n            flag = ![];\n            break;\n        }\n        if (q1 > x + y) {\n            x--;\n            while (!![]) {\n                if (b >= c1 * x + c2 * (y + 0x1))\n                    y++;\n                else\n                    break;\n            }\n        } else {\n            break;\n        }\n    }\n    console['log'](flag ? x + '\\x20' + y : 'NA');\n}", "test_cases": [["48 9297 240 126 32\n20 3010 157 141 7\n30 117002 5680 962 15\n8 1673 1712 190 22\n64 8478 87 54 307\n23 5477 117 92 12\n50 7558 1396 187 17\n279 88677 4522 514 14\n0", "28 20\n7 13\n15 33\nNA\n97 0\n12 44\nNA\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   if(arr[0]==0)break;\n   var q1=arr[0];\n   var b=arr[1];\n   var c1=arr[2];\n   var c2=arr[3];\n   var q2=arr[4];\n   var x=0;\n   var y=0;\n   var flag=true;\n   while(true){\n      if(b>=c1*(x+1) &&  (x+1)<=q2)x++;\n      else break;\n   }\n   while(true){\n      if(b>=c1*x+c2*(y+1))y++;\n      else break;\n   }   \n   while(true){\n      if(x==0){flag=false;break;}\n      if(c1*x+c2*y>b){flag=false;break;}\n      if(q1>x+y){\n         x--;\n         while(true){\n            if(b>=c1*x+c2*(y+1))y++;\n            else break;         \n         }    \n      }else{\n         break;\n      }\n   }\n   console.log((flag)?x+\" \"+y:\"NA\");\n}", "language": "JavaScript"}
{"filename": "p00189_1", "type": "JavaScript", "obfuscated": "function warshall() {\n    for (var _0xa78527 = 0x0; _0xa78527 < n; _0xa78527++) {\n        for (var _0x13b34f = 0x0; _0x13b34f < n; _0x13b34f++) {\n            for (var _0x527454 = 0x0; _0x527454 < n; _0x527454++) {\n                C[_0x13b34f][_0x527454] = Math['min'](C[_0x13b34f][_0x527454], C[_0x13b34f][_0xa78527] + C[_0xa78527][_0x527454]);\n            }\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = 0xa;\n    var m = Arr['shift']() - 0x0;\n    if (m == 0x0)\n        break;\n    var C = [];\n    for (var i = 0x0; i < n; i++) {\n        C[i] = [];\n        for (var j = 0x0; j < n; j++) {\n            C[i][j] = i === j ? 0x0 : Infinity;\n        }\n    }\n    var max = 0x0;\n    for (var i = 0x0; i < m; i++) {\n        var A = Arr['shift']()['split']('\\x20')['map'](Number);\n        max = Math['max'](max, A[0x0], A[0x1]);\n        C[A[0x0]][A[0x1]] = A[0x2];\n        C[A[0x1]][A[0x0]] = A[0x2];\n    }\n    warshall();\n    var min = [\n        '',\n        Infinity\n    ];\n    for (var i = max; i >= 0x0; i--) {\n        var arr = C[i]['slice'](0x0, max + 0x1);\n        var sum = arr['reduce'](function (_0x5ea9cb, _0x5797df) {\n            return _0x5ea9cb + _0x5797df;\n        });\n        min[0x1] = Math['min'](min[0x1], sum);\n        if (min[0x1] == sum)\n            min = [\n                i,\n                sum\n            ];\n    }\n    console['log'](min['join']('\\x20'));\n}", "test_cases": [["6     \n0 1 80\n1 2 20\n0 2 60\n2 3 50\n3 4 60\n1 4 90\n2\n0 1 1\n1 2 1\n0", "2 240\n1 2"]], "original": "function warshall(){\n   for(var k=0;k<n;k++){\n      for(var i=0;i<n;i++){\n         for(var j=0;j<n;j++){\n            C[i][j]=Math.min(C[i][j], C[i][k]+C[k][j]);\n         }\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=10;\n   var m=Arr.shift()-0;\n   if(m==0)break;\n   var C=[];\n   for(var i=0;i<n;i++){\n      C[i]=[];\n      for(var j=0;j<n;j++){\n         C[i][j]=(i===j)?0:Infinity;\n      }\n   }\n   var max=0;\n   for(var i=0;i<m;i++){\n      var A=(Arr.shift()).split(\" \").map(Number);\n      max=Math.max(max,A[0],A[1]);\n      C[A[0]][A[1]]=A[2];\n      C[A[1]][A[0]]=A[2];\n   }\n   warshall();\n   var min=[\"\",Infinity];\n   for(var i=max;i>=0;i--){\n      var arr=C[i].slice(0,max+1);\n      var sum=arr.reduce(function(a,b){return a+b;});\n      min[1]=Math.min(min[1],sum);\n      if(min[1]==sum)min=[i,sum];\n   }\n   console.log(min.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00196_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var team = [];\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20');\n        var name = arr['shift']();\n        var scoreA = 0x0;\n        var scoreB = 0x0;\n        for (var j = 0x0; j < n - 0x1; j++) {\n            if (arr[j] - 0x0 === 0x0)\n                scoreA++;\n            if (arr[j] - 0x0 === 0x1)\n                scoreB++;\n        }\n        team['push']([\n            name,\n            scoreA * 0x64 + (0xa - scoreB) + (0xa - j) * 0.01\n        ]);\n    }\n    team['sort'](function (_0x577d9e, _0xe070e2) {\n        return _0xe070e2[0x1] - _0x577d9e[0x1];\n    });\n    team['forEach'](function (_0x18bfd0) {\n        console['log'](_0x18bfd0[0x0]);\n    });\n}", "test_cases": [["6\nA 1 0 0 2 0\nB 0 0 1 1 0\nC 1 1 1 1 1\nD 1 0 0 1 2\nE 2 0 0 0 0\nF 1 1 0 2 1\n4\ng 1 1 1\nh 0 1 2\nw 0 0 0\nb 0 2 1\n0", "E\nA\nB\nD\nF\nC\nw\nh\nb\ng"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var team=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var name=arr.shift();\n      var scoreA=0;\n      var scoreB=0;\n      for(var j=0;j<n-1;j++){\n         if(arr[j]-0===0)scoreA++;\n         if(arr[j]-0===1)scoreB++;\n      }\n      team.push([name,scoreA*100+(10-scoreB)+((10-j)*0.01)]);\n   }\n   team.sort(function(a,b){return b[1]-a[1];});\n   team.forEach(function(v){console.log(v[0]);});\n}", "language": "JavaScript"}
{"filename": "p00220_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nvar nums = [];\nfor (var i = 0x7; i >= -0x4; i--) {\n    nums['push'](Math['pow'](0x2, i));\n}\nwhile (!![]) {\n    var x = Arr['shift']() - 0x0;\n    if (x == -0x1)\n        break;\n    var str = '';\n    for (var i = 0x0; i < nums['length']; i++) {\n        if (x >= nums[i]) {\n            x -= nums[i];\n            str += '1';\n        } else {\n            str += '0';\n        }\n        if (i == 0x7)\n            str += '.';\n    }\n    if (x !== 0x0)\n        str = 'NA';\n    console['log'](str);\n}", "test_cases": [["23.5\n158.1\n-1.0", "00010111.1000\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar nums=[];\nfor(var i=7;i>=-4;i--){\n   nums.push(Math.pow(2,i));\n}\nwhile(true){\n   var x=Arr.shift()-0;\n   if(x==-1)break;\n   var str=\"\";\n   for(var i=0;i<nums.length;i++){\n       if(x>=nums[i]){\n          x-=nums[i];\n          str+=\"1\";\n       }else{\n          str+=\"0\";\n       }\n       if(i==7)str+=\".\";\n   }\n   if(x!==0)str=\"NA\";\n   console.log(str);\n}", "language": "JavaScript"}
{"filename": "p00226_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    if (Arr[i] == '0\\x200')\n        break;\n    var arr = Arr[i]['split']('\\x20');\n    var x = arr[0x0]['split']('');\n    var y = arr[0x1]['split']('');\n    var h = 0x0;\n    var b = 0x0;\n    for (var j = 0x0; j < 0x4; j++) {\n        if (x[j] == y[j]) {\n            h++;\n        } else if (y['indexOf'](x[j]) != -0x1) {\n            b++;\n        }\n    }\n    console['log'](h + '\\x20' + b);\n}", "test_cases": [["1234 5678\n1234 1354\n1234 1234\n1230 1023\n0123 1234\n0 0", "0 0\n2 1\n4 0\n1 3\n0 3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\nif(Arr[i]==\"0 0\")break;\nvar arr=Arr[i].split(\" \");\nvar x=(arr[0]).split(\"\");\nvar y=(arr[1]).split(\"\");\nvar h=0;\nvar b=0;\nfor(var j=0;j<4;j++){\n   if(x[j]==y[j]){h++;}\n   else if(y.indexOf(x[j])!=-1){b++;}\n}\nconsole.log(h+\" \"+b);\n}", "language": "JavaScript"}
{"filename": "p00227_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var NM = Arr['shift']();\n    if (NM == '0\\x200')\n        break;\n    var nm = NM['split']('\\x20')['map'](Number);\n    var m = nm[0x1];\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    arr['sort'](function (_0x21643a, _0x3de0a0) {\n        return _0x3de0a0 - _0x21643a;\n    });\n    var sum = 0x0;\n    for (var i = 0x0; i < arr['length']; i++) {\n        if ((i + 0x1) % m != 0x0)\n            sum += arr[i];\n    }\n    console['log'](sum);\n}", "test_cases": [["4 2\n50 40 100 80\n7 3\n400 300 100 700 200 600 500\n0 0", "150\n2100"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var NM=Arr.shift();\n   if(NM==\"0 0\")break;\n   var nm=NM.split(\" \").map(Number);\n   var m=nm[1];\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   arr.sort(function(a,b){return b-a;});\n   var sum=0;\n   for(var i=0;i<arr.length;i++){\n      if((i+1)%m!=0)sum+=arr[i];\n   }\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00228_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar SEG = [\n    [\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x0\n    ]['reverse'](),\n    [\n        0x0,\n        0x1,\n        0x1,\n        0x0,\n        0x0,\n        0x0,\n        0x0\n    ]['reverse'](),\n    [\n        0x1,\n        0x1,\n        0x0,\n        0x1,\n        0x1,\n        0x0,\n        0x1\n    ]['reverse'](),\n    [\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x0,\n        0x0,\n        0x1\n    ]['reverse'](),\n    [\n        0x0,\n        0x1,\n        0x1,\n        0x0,\n        0x0,\n        0x1,\n        0x1\n    ]['reverse'](),\n    [\n        0x1,\n        0x0,\n        0x1,\n        0x1,\n        0x0,\n        0x1,\n        0x1\n    ]['reverse'](),\n    [\n        0x1,\n        0x0,\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1\n    ]['reverse'](),\n    [\n        0x1,\n        0x1,\n        0x1,\n        0x0,\n        0x0,\n        0x1,\n        0x0\n    ]['reverse'](),\n    [\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x1\n    ]['reverse'](),\n    [\n        0x1,\n        0x1,\n        0x1,\n        0x1,\n        0x0,\n        0x1,\n        0x1\n    ]['reverse']()\n];\nvar n = Arr[0x0];\nvar seg = [];\nfor (var i = 0x1; i < Arr['length']; i++) {\n    if (n == 0x0) {\n        if (i == 0x0)\n            continue;\n        var arr = [\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0,\n            0x0\n        ];\n        seg['forEach'](function (_0x519ad7) {\n            var _0x4ff8e1 = SEG[_0x519ad7];\n            var _0x390d33 = '';\n            for (var _0x1a6017 = 0x0; _0x1a6017 < 0x7; _0x1a6017++) {\n                _0x390d33 += _0x4ff8e1[_0x1a6017] == arr[_0x1a6017] ? '0' : '1';\n            }\n            console['log'](_0x390d33);\n            arr = _0x4ff8e1['slice']();\n        });\n        if (Arr[i] == -0x1)\n            break;\n        seg = [];\n        n = Arr[i];\n    } else {\n        n--;\n        seg['push'](Arr[i]);\n    }\n}", "test_cases": [["3\n0\n5\n1\n1\n0\n-1", "0111111\n1010010\n1101011\n0111111"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nvar SEG=[\n[1,1,1,1,1,1,0].reverse(),\n[0,1,1,0,0,0,0].reverse(),\n[1,1,0,1,1,0,1].reverse(),\n[1,1,1,1,0,0,1].reverse(),\n[0,1,1,0,0,1,1].reverse(),\n[1,0,1,1,0,1,1].reverse(),\n[1,0,1,1,1,1,1].reverse(),\n[1,1,1,0,0,1,0].reverse(),\n[1,1,1,1,1,1,1].reverse(),\n[1,1,1,1,0,1,1].reverse()\n];\nvar n=Arr[0];\nvar seg=[];\nfor(var i=1;i<Arr.length;i++){\n   if(n==0){\n      if(i==0)continue;\n      var arr=[0,0,0,0,0,0,0];\n      seg.forEach(function(v){\n         var V=SEG[v];\n         var str=\"\";\n         for(var i=0;i<7;i++){\n            str+=(V[i]==arr[i])?\"0\":\"1\";\n         }\n         console.log(str);\n         arr=V.slice();\n      });\n      if(Arr[i]==-1)break;\n      seg=[];\n      n=Arr[i];\n   }else{\n      n--;\n      seg.push(Arr[i]);\n   }\n}", "language": "JavaScript"}
{"filename": "p00229_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var BR = Arr['shift']();\n    if (BR == '0\\x200\\x200\\x200\\x200\\x200')\n        break;\n    var br = BR['split']('\\x20')['map'](Number);\n    var b = br[0x0];\n    var r = br[0x1];\n    var g = br[0x2];\n    var c = br[0x3];\n    var s = br[0x4];\n    var t = br[0x5];\n    var sum = 0x64;\n    sum += b * 0xf;\n    sum += r * 0xf;\n    sum += (b * 0x5 + r * 0x3) * 0xf;\n    sum += g * 0x7;\n    sum += c * 0x2;\n    sum -= (b * 0x5 + r * 0x3) * 0x2;\n    sum -= (t - s - (b * 0x5 + r * 0x3)) * 0x3;\n    console['log'](sum);\n}", "test_cases": [["3 2 30 3 26 226\n9 0 18 3 20 118\n5 5 12 2 15 203\n7 4 19 2 22 197\n7 4 24 4 17 209\n0 0 0 0 0 0", "127\n793\n414\n629\n617"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var BR=Arr.shift();\n   if(BR==\"0 0 0 0 0 0\")break;\n   var br=BR.split(\" \").map(Number);\n   var b=br[0];\n   var r=br[1];\n   var g=br[2];\n   var c=br[3];\n   var s=br[4];\n   var t=br[5];\n   var sum=100;\n   sum+=b*15;\n   sum+=r*15;\n   sum+=(b*5+r*3)*15;\n   sum+=g*7;\n   sum+=c*2;\n   sum-=(b*5+r*3)*2;\n   sum-=(t-s-(b*5+r*3))*3;\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00240_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var y = Arr['shift']() - 0x0;\n    var S = [];\n    var s = [];\n    for (var i = 0x0; i < n; i++) {\n        var brt = Arr['shift']()['split']('\\x20')['map'](Number);\n        var r = brt[0x1];\n        var t = brt[0x2];\n        var result;\n        if (t == 0x1)\n            result = 0x2710 * (0x1 + y * (r / 0x64));\n        if (t == 0x2)\n            result = 0x2710 * Math['pow'](0x1 + r / 0x64, y);\n        S['push'](brt[0x0]);\n        s['push'](result);\n    }\n    var max = Math['max']['apply'](null, s);\n    console['log'](S[s['indexOf'](max)]);\n}", "test_cases": [["2\n8\n1 5 2\n2 6 1\n2\n9\n1 5 2\n2 6 1\n0", "2\n1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var y=Arr.shift()-0;\n   var S=[];\n   var s=[];\n   for(var i=0;i<n;i++){\n      var brt=(Arr.shift()).split(\" \").map(Number);\n      var r=brt[1];\n      var t=brt[2];\n      var result;\n      if(t==1)result=10000*(1+(y*(r/100)));\n      if(t==2)result=10000*Math.pow((1+(r/100)),y);\n      S.push(brt[0]);\n      s.push(result);\n   }\n   var max=Math.max.apply(null,s);\n   console.log(S[s.indexOf(max)]);\n}", "language": "JavaScript"}
{"filename": "p00254_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']();\n    if (n == '0000')\n        break;\n    if (n == '1111' || n == '2222' || n == '3333' || n == '4444' || n == '5555') {\n        console['log']('NA');\n        continue;\n    }\n    if (n == '6666' || n == '7777' || n == '8888' || n == '9999') {\n        console['log']('NA');\n        continue;\n    }\n    var i = 0x0;\n    while (!![]) {\n        if (n == '6174')\n            break;\n        i++;\n        var arr = n['split']('')['map'](Number);\n        arr['sort'](function (_0x59b69f, _0x3ecf8c) {\n            return _0x3ecf8c - _0x59b69f;\n        });\n        var L = parseInt('' + arr[0x0] + arr[0x1] + arr[0x2] + arr[0x3], 0xa);\n        var S = parseInt('' + arr[0x3] + arr[0x2] + arr[0x1] + arr[0x0], 0xa);\n        n = ('0000' + (L - S))['slice'](-0x4);\n    }\n    console['log'](i);\n}", "test_cases": [["6174\n2012\n3333\n0000", "0\n3\nNA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift();\n   if(n==\"0000\")break;\n   if(n==\"1111\" || n==\"2222\" || n==\"3333\" || n==\"4444\" || n==\"5555\"){console.log(\"NA\");continue;}\n   if(n==\"6666\" || n==\"7777\" || n==\"8888\" || n==\"9999\"){console.log(\"NA\");continue;}\n   var i=0;\n   while(true){\n      if(n==\"6174\")break;\n      i++;\n      var arr=n.split(\"\").map(Number);\n      arr.sort(function(a,b){return b-a;});\n      var L=parseInt(\"\"+arr[0]+arr[1]+arr[2]+arr[3],10);\n      var S=parseInt(\"\"+arr[3]+arr[2]+arr[1]+arr[0],10);\n      n=(\"0000\"+(L-S)).slice(-4);\n   }\n   console.log(i);\n}", "language": "JavaScript"}
{"filename": "p00271_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < 0x7; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    console['log'](arr[0x0] - arr[0x1]);\n}", "test_cases": [["30 19\n39 20\n19 18\n25 20\n22 21\n23 10\n10 -10", "11\n19\n1\n5\n1\n13\n20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<7;i++){\nvar arr=Arr[i].split(\" \").map(Number);\nconsole.log(arr[0]-arr[1]);\n}", "language": "JavaScript"}
{"filename": "p00272_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < 0x4; i++) {\n    var arr = Arr[i]['split']('\\x20')['map'](Number);\n    if (arr[0x0] == 0x1)\n        console['log'](arr[0x1] * 0x1770);\n    if (arr[0x0] == 0x2)\n        console['log'](arr[0x1] * 0xfa0);\n    if (arr[0x0] == 0x3)\n        console['log'](arr[0x1] * 0xbb8);\n    if (arr[0x0] == 0x4)\n        console['log'](arr[0x1] * 0x7d0);\n}", "test_cases": [["3 10\n1 4\n4 1\n2 5", "30000\n24000\n2000\n20000"], ["1 1\n2 0\n3 1\n4 1", "6000\n0\n3000\n2000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<4;i++){\nvar arr=Arr[i].split(\" \").map(Number);\nif(arr[0]==1)console.log(arr[1]*6000);\nif(arr[0]==2)console.log(arr[1]*4000);\nif(arr[0]==3)console.log(arr[1]*3000);\nif(arr[0]==4)console.log(arr[1]*2000);\n}", "language": "JavaScript"}
{"filename": "p00273_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar N = Arr['shift']() - 0x0;\nfor (var i = 0x0; i < N; i++) {\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var x = arr[0x0];\n    var y = arr[0x1];\n    var b = arr[0x2];\n    var p = arr[0x3];\n    var A = x * b + y * p;\n    while (b < 0x5)\n        b++;\n    while (p < 0x2)\n        p++;\n    var B = (x * b + y * p) * 0.8;\n    console['log'](Math['min'](A, B));\n}", "test_cases": [["2\n100 100 1 1\n1000 500 5 2", "200\n4800"], ["5\n500 500 1 1\n500 500 5 2\n1000 100 0 6\n1000 100 6 0\n100 1000 0 0", "1000\n2800\n600\n4960\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar N=Arr.shift()-0;\nfor(var i=0;i<N;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var x=arr[0];\n   var y=arr[1];\n   var b=arr[2];\n   var p=arr[3];\n   var A=(x*b)+(y*p);\n   while(b<5)b++;\n   while(p<2)p++;\n   var B=((x*b)+(y*p))*0.8;\n   console.log(Math.min(A,B));\n}", "language": "JavaScript"}
{"filename": "p00274_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var sum = 0x0;\n    var flag = ![];\n    arr['forEach'](function (_0x2d2f1c) {\n        if (_0x2d2f1c != 0x0)\n            sum += 0x1;\n        if (_0x2d2f1c >= 0x2)\n            flag = !![];\n    });\n    console['log'](flag ? sum + 0x1 : 'NA');\n}", "test_cases": [["2\n3 2\n3\n0 1 1\n1\n1000\n0", "3\nNA\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var sum=0;\n   var flag=false;\n   arr.forEach(function(v){\n      if(v!=0)sum+=1;\n      if(v>=2)flag=true;\n   });\n   console.log(flag?sum+1:\"NA\");\n}", "language": "JavaScript"}
{"filename": "p00275_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    var n = [];\n    var p = 0x0;\n    for (var i = 0x0; i < N; i++)\n        n[i] = 0x0;\n    var str = Arr['shift']();\n    for (var i = 0x0; i < str['length']; i++) {\n        var v = str[i];\n        var j = i % N;\n        if (v == 'M')\n            n[j]++;\n        if (v == 'S') {\n            p += n[j] + 0x1;\n            n[j] = 0x0;\n        }\n        if (v == 'L') {\n            n[j] += p + 0x1;\n            p = 0x0;\n        }\n    }\n    n['sort'](function (_0x46b608, _0x1d242e) {\n        return _0x46b608 - _0x1d242e;\n    });\n    console['log'](n['join']('\\x20') + '\\x20' + p);\n}", "test_cases": [["2\nSSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n2\nSSSSSSSSSSSSSSLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMSL\n5\nMMMMMMSLSLLMMMSMMSLMMMLMMMMLSLLLLMLSMMLMMLLMSSSLMMMMLMLSMLMSMMMMMMMSMMMMMMLMMMMMSMMMLMMLMMMMMMMMMSSM\n0", "42 58 0\n0 100 0\n0 0 3 10 59 28"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   var n=[];\n   var p=0;\n   for(var i=0;i<N;i++)n[i]=0;\n   var str=Arr.shift();\n   for(var i=0;i<str.length;i++){\n      var v=str[i];\n      var j=i%N;\n      if(v==\"M\")n[j]++;\n      if(v==\"S\"){p+=(n[j]+1);n[j]=0;}\n      if(v==\"L\"){n[j]+=(p+1);p=0;}\n   }\n   n.sort(function(a,b){return a-b;});\n   console.log(n.join(\" \")+\" \"+p);\n}", "language": "JavaScript"}
{"filename": "p00311_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [h1, h2] = arr['shift']()['split']('\\x20')['map'](Number);\nvar [k1, k2] = arr['shift']()['split']('\\x20')['map'](Number);\nvar [a, b, c, d] = arr['shift']()['split']('\\x20')['map'](Number);\nvar h = h1 * a + h2 * b + Math['floor'](h1 / 0xa) * c + Math['floor'](h2 / 0x14) * d;\nvar k = k1 * a + k2 * b + Math['floor'](k1 / 0xa) * c + Math['floor'](k2 / 0x14) * d;\nif (h == k)\n    console['log']('even');\nelse if (h > k)\n    console['log']('hiroshi');\nelse\n    console['log']('kenjiro');", "test_cases": [["5 1\n3 1\n1 2 5 5", "hiroshi"], ["5 1\n4 2\n1 2 5 5", "kenjiro"], ["0 20\n10 0\n1 1 10 0", "even"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar [h1,h2] = arr.shift().split(\" \").map(Number);\nvar [k1,k2] = arr.shift().split(\" \").map(Number);\nvar [a,b,c,d] = arr.shift().split(\" \").map(Number);\nvar h = h1*a + h2*b+Math.floor(h1/10)*c+Math.floor(h2/20)*d;\nvar k = k1*a + k2*b+Math.floor(k1/10)*c+Math.floor(k2/20)*d;\nif(h==k)console.log(\"even\");\nelse if(h>k)console.log(\"hiroshi\");\nelse console.log(\"kenjiro\");\n", "language": "JavaScript"}
{"filename": "p00312_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [D, L] = input['trim']()['split']('\\x20')['map'](Number);\nvar amari = D % L;\nvar yakusuu = (D - amari) / L;\nconsole['log'](yakusuu + amari);", "test_cases": [["10 5", "2"], ["7 4", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [D,L] = input.trim().split(\" \").map(Number);\nvar amari = D%L;\nvar yakusuu = (D - amari)/L;\nconsole.log(yakusuu + amari);\n", "language": "JavaScript"}
{"filename": "p00313_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar xyz = [];\nfor (var i = 0x0; i <= n; i++)\n    xyz[i] = [\n        0x0,\n        0x0,\n        0x0\n    ];\nvar x = arr['shift']()['split']('\\x20')['map'](Number);\nvar y = arr['shift']()['split']('\\x20')['map'](Number);\nvar z = arr['shift']()['split']('\\x20')['map'](Number);\nx['shift']();\ny['shift']();\nz['shift']();\nx['forEach'](_0x5cc652 => {\n    xyz[_0x5cc652][0x0] = 0x1;\n});\ny['forEach'](_0x15d498 => {\n    xyz[_0x15d498][0x1] = 0x1;\n});\nz['forEach'](_0x66334e => {\n    xyz[_0x66334e][0x2] = 0x1;\n});\nxyz['shift']();\nvar cnt = 0x0;\nxyz['forEach'](_0x16eaf3 => {\n    if (_0x16eaf3[0x0] == 0x0 && _0x16eaf3[0x2] == 0x1)\n        cnt++;\n    else if (_0x16eaf3[0x1] == 0x1 && _0x16eaf3[0x2] == 0x1)\n        cnt++;\n});\nconsole['log'](cnt);", "test_cases": [["5\n3 1 2 3\n2 4 5\n2 3 4", "1"], ["100\n3 1 100 4\n0\n2 2 3", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n= arr.shift()-0;\nvar xyz = [];\nfor(var i=0;i<=n;i++)xyz[i]=[0,0,0];\nvar x = arr.shift().split(\" \").map(Number);\nvar y = arr.shift().split(\" \").map(Number);\nvar z = arr.shift().split(\" \").map(Number);\nx.shift();\ny.shift();\nz.shift();\nx.forEach(v=>{\n   xyz[v][0]=1;\n});\ny.forEach(v=>{\n   xyz[v][1]=1;\n});\nz.forEach(v=>{\n   xyz[v][2]=1;\n});\nxyz.shift();\nvar cnt = 0;\nxyz.forEach(v=>{\n   if(v[0]==0 && v[2]==1)cnt++;\n   else if(v[1]==1 && v[2]==1)cnt++;\n});\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p00314_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar p = arr['shift']()['split']('\\x20')['map'](Number);\nvar ans = 0x0;\nfor (var i = 0x1; i <= 0x64; i++) {\n    var cnt = 0x0;\n    p['forEach'](_0xd0103d => {\n        if (_0xd0103d >= i)\n            cnt++;\n    });\n    if (cnt >= i)\n        ans = i;\n}\nconsole['log'](ans);", "test_cases": [["7\n5 4 3 10 2 4 1", "4"], ["3\n1 1 100", "1"], ["4\n11 15 58 1", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n= arr.shift()-0;\nvar p = arr.shift().split(\" \").map(Number);\nvar ans = 0;\nfor(var i=1;i<=100;i++){\n   var cnt = 0;\n   p.forEach(v=>{\n      if(v>=i)cnt++;\n   });\n   if(cnt>=i)ans=i;\n}\nconsole.log(ans);\n", "language": "JavaScript"}
{"filename": "p00321_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar nf = arr['shift']()['split']('\\x20')['map'](Number);\nvar f = nf[0x1];\nvar obj = {};\narr = arr['map'](function (_0x4d54a1) {\n    _0x4d54a1 = _0x4d54a1['split']('\\x20');\n    _0x4d54a1['shift']();\n    _0x4d54a1['forEach'](function (_0x16a448) {\n        obj[_0x16a448] = {};\n    });\n    return _0x4d54a1;\n});\nfor (var k in obj) {\n    for (var K in obj) {\n        obj[k][K] = 0x0;\n    }\n}\narr['forEach'](function (_0x11a6f3) {\n    for (var _0x429896 = 0x0; _0x429896 < _0x11a6f3['length']; _0x429896++) {\n        for (var _0x55d07c = 0x0; _0x55d07c < _0x11a6f3['length']; _0x55d07c++) {\n            obj[_0x11a6f3[_0x429896]][_0x11a6f3[_0x55d07c]]++;\n        }\n    }\n});\nvar ans = [];\nfor (var k in obj) {\n    for (var K in obj) {\n        obj[K][k] = 0x0;\n        if (obj[k][K] >= f) {\n            ans['push']([\n                k,\n                K\n            ]['sort']()['join']('\\x20'));\n        }\n    }\n}\nans['sort']();\nconsole['log'](ans['length']);\nif (ans['length'] != 0x0)\n    console['log'](ans['join']('\\x0a'));", "test_cases": [["5 2\n3 bread milk banana\n2 milk cornflakes\n3 potato bread milk\n4 cornflakes bread milk butter\n2 potato bread", "3\nbread milk\nbread potato\ncornflakes milk"], ["5 5\n3 bread milk banana\n2 milk cornflakes\n3 potato bread milk\n4 cornflakes bread milk butter\n2 potato bread", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar nf = arr.shift().split(\" \").map(Number);\nvar f = nf[1];\nvar obj = {};\narr = arr.map(function(v) {\n   v = v.split(\" \");\n   v.shift();\n   v.forEach(function(V) {\n      obj[V] = {};\n   });\n   return v;\n});\nfor (var k in obj) {\n   for (var K in obj) {\n      obj[k][K] = 0;\n   }\n}\narr.forEach(function(v) {\n   for (var i = 0; i < v.length; i++) {\n      for (var j = 0; j < v.length; j++) {\n         obj[v[i]][v[j]]++;\n      }\n   }\n});\nvar ans = [];\nfor (var k in obj) {\n   for (var K in obj) {\n      obj[K][k] = 0;\n      if (obj[k][K] >= f) {\n         ans.push([k, K].sort().join(\" \"));\n      }\n   }\n}\nans.sort();\nconsole.log(ans.length);\nif (ans.length != 0) console.log(ans.join(\"\\n\"));", "language": "JavaScript"}
{"filename": "p00322_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar x = input['trim']()['split']('\\x20')['map'](Number);\nvar cnt = 0x0;\nfor (var a = 0x1; a <= 0x9; a++) {\n    for (var b = 0x1; b <= 0x9; b++) {\n        for (var c = 0x1; c <= 0x9; c++) {\n            for (var d = 0x1; d <= 0x8; d++) {\n                for (var e = 0x1; e <= 0x9; e++) {\n                    for (var f = 0x1; f <= 0x9; f++) {\n                        var z = (a + c + f + (b + e) * 0xa + d * 0x64 + '')['split']('')['map'](Number);\n                        if (z['length'] != 0x3)\n                            continue;\n                        z = [\n                            a,\n                            b,\n                            c,\n                            d,\n                            e,\n                            f\n                        ]['concat'](z);\n                        var flag = z['every'](function (_0xd3ba75, _0x5de8c2) {\n                            return (x[_0x5de8c2] == _0xd3ba75 || x[_0x5de8c2] == -0x1) && z['indexOf'](_0x5de8c2 + 0x1) >= 0x0;\n                        });\n                        if (flag)\n                            cnt++;\n                    }\n                }\n            }\n        }\n    }\n}\nconsole['log'](cnt);", "test_cases": [["7 6 -1 1 -1 9 2 3 4", "1"], ["7 6 5 1 8 9 2 3 4", "0"], ["-1 -1 -1 -1 -1 -1 8 4 6", "12"], ["-1 -1 -1 -1 -1 -1 -1 -1 -1", "168"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim().split(\" \").map(Number);\nvar cnt=0;\nfor(var a=1;a<=9;a++){\nfor(var b=1;b<=9;b++){\nfor(var c=1;c<=9;c++){\nfor(var d=1;d<=8;d++){\nfor(var e=1;e<=9;e++){\nfor(var f=1;f<=9;f++){\nvar z=((a+c+f+(b+e)*10+d*100)+\"\").split(\"\").map(Number);\nif(z.length!=3)continue;\nz=[a,b,c,d,e,f].concat(z);\nvar flag = z.every(function(v,i){\n   return  (x[i] == v || x[i] == -1) && (z.indexOf(i+1)>=0) ;\n});\nif(flag)cnt++;\n}}}}}}\nconsole.log(cnt);", "language": "JavaScript"}
{"filename": "p00330_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar x = input['trim']() - 0x0;\nconsole['log'](x * 0x20);", "test_cases": [["4", "128"], ["3", "96"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim() -0;\nconsole.log(x*32);\n", "language": "JavaScript"}
{"filename": "p00331_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [h, r] = input['trim']()['split']('\\x20')['map'](Number);\nif (r + h == 0x0)\n    console['log'](0x0);\nelse if (r + h > 0x0)\n    console['log'](0x1);\nelse\n    console['log'](-0x1);", "test_cases": [["-3 3", "0"], ["3 3", "1"], ["-4 3", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [h,r]=input.trim().split(\" \").map(Number);\nif(r+h==0)console.log(0);\nelse if(r+h>0)console.log(1);\nelse console.log(-1);\n", "language": "JavaScript"}
{"filename": "p00332_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [e, y] = input['trim']()['split']('\\x20')['map'](Number);\nvar mtsh = 'MTSH'['split']('');\nif (e == 0x0) {\n    if (y >= 0x74c && y <= 0x777) {\n        e = 0x1;\n        y -= 0x74c;\n    } else if (y >= 0x778 && y <= 0x785) {\n        e = 0x2;\n        y -= 0x778;\n    } else if (y >= 0x786 && y <= 0x7c4) {\n        e = 0x3;\n        y -= 0x786;\n    } else if (y >= 0x7c5 && y <= 0x7e0) {\n        e = 0x4;\n        y -= 0x7c5;\n    }\n    console['log'](mtsh[e - 0x1] + (y + 0x1));\n} else if (e == 0x1)\n    console['log'](0x74c + y - 0x1);\nelse if (e == 0x2)\n    console['log'](0x778 + y - 0x1);\nelse if (e == 0x3)\n    console['log'](0x786 + y - 0x1);\nelse if (e == 0x4)\n    console['log'](0x7c5 + y - 0x1);", "test_cases": [["0 2015", "H27"], ["0 1912", "T1"], ["2 1", "1912"], ["4 28", "2016"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [e,y] = input.trim().split(\" \").map(Number);\nvar mtsh = \"MTSH\".split(\"\");\nif(e==0){\n   if(y>=1868 && y<=1911){e=1;y-=1868}\n   else if(y>=1912 && y<=1925){e=2;y-=1912}\n   else if(y>=1926 && y<=1988){e=3;y-=1926}\n   else if(y>=1989 && y<=2016){e=4;y-=1989}\n   console.log(mtsh[e-1] + (y+1));\n}\nelse if(e==1)console.log(1868 + y - 1);\nelse if(e==2)console.log(1912 + y - 1);\nelse if(e==3)console.log(1926 + y - 1);\nelse if(e==4)console.log(1989 + y - 1);\n", "language": "JavaScript"}
{"filename": "p00333_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [w, h, c] = input['trim']()['split']('\\x20')['map'](Number);\nvar max = 0x1;\nfor (var i = 0x1; i <= 0x3e8; i++) {\n    if (w % i == 0x0 && h % i == 0x0)\n        max = i;\n}\nconsole['log'](w * h / (max * max) * c);", "test_cases": [["10 20 5", "10"], ["27 6 1", "18"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [w,h,c]= input.trim().split(\" \").map(Number);\nvar max=1;\nfor(var i=1;i<=1000;i++){\n   if(w%i==0 && h%i==0)max=i;\n}\nconsole.log(((w*h)/(max*max))*c);\n", "language": "JavaScript"}
{"filename": "p00340_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x20')['map'](Number);\nvar a = arr[0x0];\nvar b = arr[0x1];\nvar c = arr[0x2];\nvar d = arr[0x3];\nif (a == b && c == d)\n    console['log']('yes');\nelse if (a == c && b == d)\n    console['log']('yes');\nelse if (a == d && b == c)\n    console['log']('yes');\nelse\n    console['log']('no');", "test_cases": [["1 1 3 4", "no"], ["1 1 2 2", "yes"], ["2 1 1 2", "yes"], ["4 4 4 10", "no"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\" \").map(Number);\nvar a = arr[0];\nvar b = arr[1];\nvar c = arr[2];\nvar d = arr[3];\nif (a == b && c == d) console.log(\"yes\");\nelse if (a == c && b == d) console.log(\"yes\");\nelse if (a == d && b == c) console.log(\"yes\");\nelse console.log(\"no\");", "language": "JavaScript"}
{"filename": "p00341_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x20')['map'](Number);\narr['sort'](function (_0x12cc88, _0x5eee89) {\n    return _0x12cc88 - _0x5eee89;\n});\nvar sum = 0x0;\nif (arr[0x0] == arr[0x1] && arr[0x1] == arr[0x2] && arr[0x2] == arr[0x3])\n    sum++;\nif (arr[0x0 + 0x4] == arr[0x1 + 0x4] && arr[0x1 + 0x4] == arr[0x2 + 0x4] && arr[0x2 + 0x4] == arr[0x3 + 0x4])\n    sum++;\nif (arr[0x0 + 0x8] == arr[0x1 + 0x8] && arr[0x1 + 0x8] == arr[0x2 + 0x8] && arr[0x2 + 0x8] == arr[0x3 + 0x8])\n    sum++;\nconsole['log'](sum == 0x3 ? 'yes' : 'no');", "test_cases": [["1 1 3 4 8 9 7 3 4 5 5 5", "no"], ["1 1 2 2 3 1 2 3 3 3 1 2", "yes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\" \").map(Number);\narr.sort(function(a,b){\n   return a - b;\n});\nvar sum=0;\nif(arr[0] == arr[1] && arr[1] == arr[2] && arr[2] == arr[3])sum++;\nif(arr[0+4] == arr[1+4] && arr[1+4] == arr[2+4] && arr[2+4] == arr[3+4])sum++;\nif(arr[0+8] == arr[1+8] && arr[1+8] == arr[2+8] && arr[2+8] == arr[3+8])sum++;\nconsole.log((sum==3)?\"yes\":\"no\");", "language": "JavaScript"}
{"filename": "p00353_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [m, f, b] = input['trim']()['split']('\\x20')['map'](Number);\nif (m >= b)\n    console['log'](0x0);\nelse if (m + f < b)\n    console['log']('NA');\nelse\n    console['log'](b - m);", "test_cases": [["1000 3000 3000", "2000"], ["5000 3000 4500", "0"], ["500 1000 2000", "NA"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [m,f,b] =input.trim().split(\" \").map(Number);\nif(m>=b)console.log(0);\nelse if(m+f<b)console.log(\"NA\");\nelse console.log(b-m);\n", "language": "JavaScript"}
{"filename": "p00354_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar x = input['trim']() - 0x0;\nvar w = [\n    'thu',\n    'fri',\n    'sat',\n    'sun',\n    'mon',\n    'tue',\n    'wed'\n];\nconsole['log'](w[x % 0x7]);", "test_cases": [["1", "fri"], ["9", "sat"], ["30", "sat"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x =input.trim() - 0;\nvar w = [\"thu\",\"fri\",\"sat\",\"sun\",\"mon\",\"tue\",\"wed\"];\nconsole.log(w[x%7]);\n", "language": "JavaScript"}
{"filename": "p00357_1", "type": "JavaScript", "obfuscated": "function tobu(_0x36fc6b) {\n    var _0x5eb097 = 0x0;\n    for (var _0x2eabc9 = 0x0; _0x2eabc9 < _0x36fc6b['length'] - 0x1; _0x2eabc9++) {\n        if (_0x2eabc9 > _0x5eb097)\n            break;\n        var _0x402b61 = Math['floor'](_0x36fc6b[_0x2eabc9] / 0xa);\n        _0x5eb097 = Math['max'](_0x5eb097, _0x2eabc9 + _0x402b61);\n    }\n    return _0x5eb097 >= _0x36fc6b['length'] - 0x1;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar n = arr['shift']();\nif (tobu(arr) && tobu(arr['reverse']()))\n    console['log']('yes');\nelse\n    console['log']('no');", "test_cases": [["4\n20\n5\n10\n1", "no"], ["3\n10\n5\n10", "no"], ["4\n20\n30\n1\n20", "yes"]], "original": "function tobu(arr){\n   var max=0;\n   for(var i=0;i<arr.length-1;i++){\n      if(i>max)break;\n      var d = Math.floor(arr[i]/10);\n      max=Math.max(max,i+d);\n   }\n   return (max>=arr.length-1);\n}\n \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\").map(Number);\nvar n=arr.shift();\nif(tobu(arr) && tobu(arr.reverse()))console.log(\"yes\");\nelse console.log(\"no\");\n", "language": "JavaScript"}
{"filename": "p00363_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [w, h, c] = input['trim']()['split']('\\x20');\nw = w - 0x0;\nh = h - 0x0;\nvar ans = [];\nans['push']('+' + '-'['repeat'](w - 0x2) + '+');\nfor (var i = 0x0; i < h - 0x2; i++)\n    ans['push']('|' + '.'['repeat'](w - 0x2) + '|');\nans['push']('+' + '-'['repeat'](w - 0x2) + '+');\nans[Math['floor'](h / 0x2)] = '|' + '.'['repeat']((w - 0x3) / 0x2) + c + '.'['repeat']((w - 0x3) / 0x2) + '|';\nconsole['log'](ans['join']('\\x0a')['trim']());", "test_cases": [["3 3 B", "+-+\n|B|\n+-+"], ["11 7 Z", "+---------+\n|.........|\n|.........|\n|....Z....|\n|.........|\n|.........|\n+---------+"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [w,h,c] = input.trim().split(\" \");\nw=w-0;\nh=h-0;\nvar ans=[];\nans.push(\"+\" + \"-\".repeat(w-2) + \"+\");\nfor(var i=0;i<h - 2;i++)ans.push(\"|\" + \".\".repeat(w-2) + \"|\");\nans.push(\"+\" + \"-\".repeat(w-2) + \"+\");\nans[Math.floor(h/2)]=\"|\" + \".\".repeat((w-3)/2)  + c + \".\".repeat((w-3)/2)+ \"|\"\nconsole.log(ans.join(\"\\n\").trim());\n", "language": "JavaScript"}
{"filename": "p00364_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr = arr['map'](_0x1a4641 => _0x1a4641['split']('\\x20')['map'](Number));\nvar [n, t] = arr['shift']();\nvar max = 0x0;\narr['forEach'](_0x5bdd97 => {\n    max = Math['max'](max, _0x5bdd97[0x1] / _0x5bdd97[0x0]);\n});\nconsole['log']((max * t)['toFixed'](0x6));", "test_cases": [["3 10\n6 4\n4 2\n3 2", "6.666667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\narr=arr.map(v=>v.split(\" \").map(Number));\nvar [n,t]=arr.shift();\nvar max=0;\narr.forEach(v=>{\n   max=Math.max(max,v[1]/v[0]);\n});\nconsole.log((max*t).toFixed(6));\n", "language": "JavaScript"}
{"filename": "p00375_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar a = input - 0x0;\nconsole['log']((a - 0x1e) / 0x2);", "test_cases": [["68", "19"], ["50", "10"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar a=input-0;\nconsole.log((a-30)/2);\n", "language": "JavaScript"}
{"filename": "p00376_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](Math['abs'](b - a));", "test_cases": [["20 30", "10"], ["50 25", "25"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]=input.trim().split(\" \").map(Number);\nconsole.log(Math.abs(b-a));\n", "language": "JavaScript"}
{"filename": "p00377_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [n, c] = arr[0x0]['split']('\\x20')['map'](Number);\nvar p = arr[0x1]['split']('\\x20')['map'](Number);\nvar sum = p['reduce']((_0xbf0324, _0x351151) => _0xbf0324 + _0x351151);\nvar x = sum % (n + 0x1) == 0x0 ? 0x0 : 0x1;\nconsole['log'](Math['floor'](sum / (n + 0x1)) + x);", "test_cases": [["5 4\n5 5 6 5", "4"], ["7 5\n8 8 8 8 8", "5"], ["100 3\n3 3 3", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,c]=arr[0].split(\" \").map(Number);\nvar p=arr[1].split(\" \").map(Number);\nvar sum=p.reduce((a,b)=> a+b);\nvar x=(sum%(n+1)==0)?0:1;\nconsole.log(Math.floor(sum/(n+1))+x);\n", "language": "JavaScript"}
{"filename": "p00378_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b, x] = input['trim']()['split']('\\x20')['map'](Number);\nvar min = Infinity;\nfor (var i = 0x0; i <= 0x14; i++) {\n    for (var j = 0x0; j <= 0x28; j++) {\n        if (i * 0x3e8 + j * 0x1f4 >= x)\n            min = Math['min'](min, i * a + j * b);\n    }\n}\nconsole['log'](min);", "test_cases": [["180 100 2400", "460"], ["200 90 2018", "450"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,x]=input.trim().split(\" \").map(Number);\nvar min=Infinity;\nfor(var i=0;i<=20;i++){\n   for(var j=0;j<=40;j++){\n      if(i*1000+j*500>=x)min=Math.min(min,i*a+j*b);\n   }\n}\nconsole.log(min);\n", "language": "JavaScript"}
{"filename": "p00387_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](Math['ceil'](b / a));", "test_cases": [["3 5", "2"], ["25 10", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]= input.trim().split(\" \").map(Number);\nconsole.log(Math.ceil(b/a));\n", "language": "JavaScript"}
{"filename": "p00388_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [h, a, b] = input['trim']()['split']('\\x20')['map'](Number);\nvar cnt = 0x0;\nfor (var i = a; i <= b; i++) {\n    if (h % i == 0x0)\n        cnt++;\n}\nconsole['log'](cnt);", "test_cases": [["100 2 4", "2"], ["101 3 5", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [h,a,b]= input.trim().split(\" \").map(Number);\nvar cnt = 0;\nfor(var i=a;i<=b;i++){\n   if(h%i==0)cnt++;\n}\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p00389_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [n, k] = input['trim']()['split']('\\x20')['map'](Number);\nvar takasa = 0x0;\nvar w = 0x0;\nvar cnt = 0x0;\nwhile (!![]) {\n    if (n == 0x0)\n        break;\n    n--;\n    cnt++;\n    if (w <= k * cnt) {\n        takasa++;\n        w += cnt;\n        cnt = 0x0;\n    }\n}\nconsole['log'](takasa);", "test_cases": [["4 2", "3"], ["5 2", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,k]= input.trim().split(\" \").map(Number);\nvar takasa=0;\nvar w=0;\nvar cnt=0;\nwhile(true){\n   if(n==0)break;\n   n--;\n   cnt++;\n   if(w<=k*cnt){\n      takasa++;\n      w+=cnt;\n      cnt=0;\n   }\n}\nconsole.log(takasa);\n", "language": "JavaScript"}
{"filename": "p00589_1", "type": "JavaScript", "obfuscated": "var a = [''];\na[0x1] = '\\x27,.,!?'['split']('');\na[0x2] = 'abcABC'['split']('');\na[0x3] = 'defDEF'['split']('');\na[0x4] = 'ghiGHI'['split']('');\na[0x5] = 'jklJKL'['split']('');\na[0x6] = 'mnoMNO'['split']('');\na[0x7] = 'pqrsPQRS'['split']('');\na[0x8] = 'tuvTUV'['split']('');\na[0x9] = 'wxyzWXYZ'['split']('');\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr['forEach'](function (_0x3205dd) {\n    _0x3205dd = _0x3205dd['replace'](/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g, function (_0x1d3717) {\n        if (_0x1d3717[0x0] == '0')\n            return _0x1d3717['slice'](0x1)['replace'](/0/g, '\\x20');\n        else\n            return a[_0x1d3717[0x0] - 0x0][_0x1d3717['length'] - 0x1];\n    });\n    console['log'](_0x3205dd);\n});", "test_cases": [["666660666\n44444416003334446633111\n20202202000333003330333", "No\nI'm fine.\naaba  f ff"]], "original": "var a=[\"\"];\na[1]=\"',.,!?\".split(\"\");\na[2]=\"abcABC\".split(\"\");\na[3]=\"defDEF\".split(\"\");\na[4]=\"ghiGHI\".split(\"\");\na[5]=\"jklJKL\".split(\"\");\na[6]=\"mnoMNO\".split(\"\");\na[7]=\"pqrsPQRS\".split(\"\");\na[8]=\"tuvTUV\".split(\"\");\na[9]=\"wxyzWXYZ\".split(\"\");\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.forEach(function(v){\n   v=v.replace(/0+|1+|2+|3+|4+|5+|6+|7+|8+|9+/g,function(x){\n      if(x[0]==\"0\")return x.slice(1).replace(/0/g,\" \");\n      else return a[x[0]-0][x.length-1];\n   });\n   console.log(v);\n});", "language": "JavaScript"}
{"filename": "p00592_1", "type": "JavaScript", "obfuscated": "function time(_0x3accf9) {\n    _0x3accf9 = _0x3accf9['split']('')['map'](Number);\n    return _0x3accf9[0x0] * 0xa * 0x3c + _0x3accf9[0x1] * 0x3c + _0x3accf9[0x2] * 0xa + _0x3accf9[0x3];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var npq = arr['shift']();\n    if (npq == '0\\x200\\x200')\n        break;\n    npq = npq['split']('\\x20');\n    var n = npq[0x0] - 0x0;\n    var p = time(npq[0x1]);\n    var q = time(npq[0x2]);\n    var tv = [];\n    for (var i = p; i < q; i++)\n        tv[i] = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var cm = arr['shift']();\n        var ary = arr['shift']()['split']('\\x20');\n        for (var j = 0x0; j < cm; j++) {\n            var start = time(ary['shift']());\n            var stop = time(ary['shift']());\n            for (var k = start; k < stop; k++)\n                tv[k]++;\n        }\n    }\n    var max = 0x0;\n    var cnt = 0x0;\n    for (var i = p; i < q; i++) {\n        if (tv[i] != n) {\n            cnt++;\n        } else {\n            max = Math['max'](max, cnt);\n            cnt = 0x0;\n        }\n    }\n    max = Math['max'](max, cnt);\n    console['log'](max);\n}", "test_cases": [["1 2100 2400\n1\n2130 2200\n3 2100 2400\n3\n2100 2130 2200 2230 2300 2330\n2\n2130 2200 2330 2400\n2\n2100 2130 2330 2400\n0 0 0", "120\n180"]], "original": "function time(x){\n   x=x.split(\"\").map(Number);\n   return x[0]*10*60+x[1]*60+x[2]*10+x[3];\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var npq=arr.shift();\n   if(npq==\"0 0 0\")break;\n   npq=npq.split(\" \");\n   var n=npq[0]-0;\n   var p=time(npq[1]);\n   var q=time(npq[2]);\n   var tv=[];\n   for(var i=p;i<q;i++)tv[i]=0;\n   for(var i=0;i<n;i++){\n      var cm=arr.shift();\n      var ary=arr.shift().split(\" \");\n      for(var j=0;j<cm;j++){\n         var start=time(ary.shift());\n         var stop=time(ary.shift());\n         for(var k=start;k<stop;k++)tv[k]++;\n      }\n   }\n   var max=0;\n   var cnt=0;\n   for(var i=p;i<q;i++){\n      if(tv[i]!=n){cnt++;}\n      else {max=Math.max(max,cnt);cnt=0;}\n   }\n   max=Math.max(max,cnt);\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00595_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['forEach'](function (_0x5bd00d) {\n    var _0x14d821 = _0x5bd00d['split']('\\x20')['map'](Number);\n    var _0x526290 = Math['max'](_0x14d821[0x0], _0x14d821[0x1]);\n    var _0x445907 = Math['min'](_0x14d821[0x0], _0x14d821[0x1]);\n    while (_0x445907 != 0x0) {\n        var _0x29b097 = _0x445907;\n        _0x445907 = _0x526290 % _0x445907;\n        _0x526290 = _0x29b097;\n    }\n    console['log'](_0x526290);\n});", "test_cases": [["57 38\n60 84", "19\n12"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.forEach(function(v){\n   var arr=v.split(\" \").map(Number);\n   var m=Math.max(arr[0],arr[1]);\n   var n=Math.min(arr[0],arr[1]);\n   while(n!=0){\n      var N=n;\n      n=m%n;\n      m=N;\n   }\n   console.log(m);\n});", "language": "JavaScript"}
{"filename": "p00602_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr['forEach'](function (_0x578c59) {\n    var _0x53d13f = _0x578c59['split']('\\x20')['map'](Number);\n    var _0x3600b9 = _0x53d13f[0x0];\n    var _0x4ecbb0 = _0x53d13f[0x1];\n    var _0x6c6c77 = [];\n    _0x6c6c77[0x0] = 0x1;\n    _0x6c6c77[0x1] = 0x2;\n    for (var _0x286a1b = 0x2; _0x286a1b <= _0x3600b9; _0x286a1b++) {\n        _0x6c6c77[_0x286a1b] = (_0x6c6c77[_0x286a1b - 0x1] + _0x6c6c77[_0x286a1b - 0x2]) % 0x3e9;\n    }\n    _0x6c6c77['shift']();\n    _0x6c6c77['sort'](function (_0x561656, _0x2a5640) {\n        return _0x561656 - _0x2a5640;\n    });\n    var _0x1792df = 0x0;\n    for (var _0x286a1b = 0x1; _0x286a1b < _0x6c6c77['length']; _0x286a1b++) {\n        if (_0x6c6c77[_0x286a1b] - _0x6c6c77[_0x286a1b - 0x1] < _0x4ecbb0)\n            _0x1792df++;\n    }\n    console['log'](_0x6c6c77['length'] - _0x1792df);\n});", "test_cases": [["5 5\n50 1\n13 13", "2\n50\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.forEach(function(value){\n   var vd=value.split(\" \").map(Number);\n   var v=vd[0];\n   var d=vd[1];\n   var f=[];\n   f[0]=1;\n   f[1]=2;\n   for(var i=2;i<=v;i++){\n      f[i]=(f[i - 1] + f[i - 2])%1001;\n   }\n   f.shift();\n   f.sort(function(a,b){return a-b});\n   var cnt=0;\n   for(var i=1;i<f.length;i++){\n         if(f[i]-f[i-1]<d)cnt++;\n   }\n   console.log(f.length-cnt);\n});", "language": "JavaScript"}
{"filename": "p00603_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (Arr['length'] == 0x0)\n        break;\n    var nr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var n = nr[0x0];\n    var r = nr[0x1];\n    var card = [];\n    for (var i = 0x0; i < n; i++)\n        card[i] = i;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    for (var i = 0x0; i < r; i++) {\n        var v = arr[i];\n        var a = [];\n        var b = [];\n        for (var j = 0x0; j < n; j++)\n            Math['floor'](n / 0x2) > j ? b['push'](card[j]) : a['push'](card[j]);\n        card = [];\n        while (!![]) {\n            if (a['length'] == 0x0 && b['length'] == 0x0)\n                break;\n            card = card['concat'](a['splice'](0x0, v));\n            card = card['concat'](b['splice'](0x0, v));\n        }\n    }\n    console['log'](card[card['length'] - 0x1]);\n}", "test_cases": [["9 1\n3\n9 4\n1 2 3 4", "3\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var nr=Arr.shift().split(\" \").map(Number);\n   var n=nr[0];\n   var r=nr[1];\n   var card=[];\n   for(var i=0;i<n;i++)card[i]=i;\n   var arr=Arr.shift().split(\" \").map(Number);\n   for(var i=0;i<r;i++){\n      var v=arr[i];\n      var a=[];\n      var b=[];\n      for(var j=0;j<n;j++)(Math.floor(n/2)>j)?b.push(card[j]): a.push(card[j]);\n      card=[];\n      while(true){\n         if(a.length==0 && b.length==0)break;\n         card=card.concat(a.splice(0,v));\n         card=card.concat(b.splice(0,v));\n      }\n   }\n   console.log(card[card.length-1]);\n}", "language": "JavaScript"}
{"filename": "p00604_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (Arr['length'] == 0x0)\n        break;\n    var n = Arr['shift']();\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    arr['sort'](function (_0x1c12ea, _0x354ea7) {\n        return _0x1c12ea - _0x354ea7;\n    });\n    var sum = 0x0;\n    var time = 0x0;\n    arr['forEach'](function (_0x46a2fc) {\n        sum += _0x46a2fc + time;\n        time += _0x46a2fc;\n    });\n    console['log'](sum);\n}", "test_cases": [["3\n10 20 30\n7\n56 26 62 43 25 80 7", "100\n873"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   if(Arr.length==0)break;\n   var n=Arr.shift();\n   var arr=Arr.shift().split(\" \").map(Number);\n   arr.sort(function(a,b){return a-b;});\n   var sum=0;\n   var time=0;\n   arr.forEach(function(v){\n      sum+=v+time;\n      time+=v;\n   });\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00605_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var NK = Arr['shift']();\n    if (NK == '0\\x200')\n        break;\n    var nk = NK['split']('\\x20')['map'](Number);\n    var S = Arr['shift']()['split']('\\x20')['map'](Number);\n    for (var i = 0x0; i < nk[0x0]; i++) {\n        var B = Arr['shift']()['split']('\\x20')['map'](Number);\n        B['forEach'](function (_0x53c7b4, _0xb62e0a) {\n            S[_0xb62e0a] -= _0x53c7b4;\n        });\n    }\n    var flag = S['every'](function (_0x4b3164) {\n        return _0x4b3164 >= 0x0;\n    });\n    console['log'](flag ? 'Yes' : 'No');\n}", "test_cases": [["2 3\n5 4 5\n1 2 3\n3 2 1\n3 5\n1 2 3 4 5\n0 1 0 1 2\n0 1 1 2 2\n1 0 3 1 1\n0 0", "Yes\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var NK=Arr.shift();\n   if(NK==\"0 0\")break;\n   var nk=NK.split(\" \").map(Number);\n   var S=(Arr.shift()).split(\" \").map(Number);\n   for(var i=0;i<nk[0];i++){\n      var B=(Arr.shift()).split(\" \").map(Number);\n      B.forEach(function(v,index){S[index]-=v;});\n   }\n   var flag=S.every(function(v){return (v>=0);});\n   console.log(flag?\"Yes\":\"No\");\n}", "language": "JavaScript"}
{"filename": "p00613_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var K = Arr['shift']() - 0x0;\n    if (K == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var sum = arr['reduce'](function (_0x2faa7c, _0x8d4aa5) {\n        return _0x2faa7c + _0x8d4aa5;\n    });\n    console['log'](sum / (K - 0x1));\n}", "test_cases": [["2\n2\n3\n5 4 3\n0", "2\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var K=Arr.shift()-0;\n   if(K==0)break;\n   var arr=Arr.shift().split(\" \").map(Number);\n   var sum=arr.reduce(function(a,b){return a+b;});\n   console.log(sum/(K-1));\n}", "language": "JavaScript"}
{"filename": "p00615_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var str = Arr['shift']();\n    if (str == '0\\x200')\n        break;\n    var arr = str['split']('\\x20');\n    var data = [0x0];\n    if (arr[0x0] > 0x0)\n        data = data['concat'](Arr['shift']()['split']('\\x20')['map'](Number));\n    if (arr[0x1] > 0x0)\n        data = data['concat'](Arr['shift']()['split']('\\x20')['map'](Number));\n    data['sort'](function (_0x3e7944, _0x1b8645) {\n        return _0x3e7944 - _0x1b8645;\n    });\n    var max = 0x0;\n    data['reduce'](function (_0xede2a0, _0x24b484) {\n        max = Math['max'](max, Math['abs'](_0xede2a0 - _0x24b484));\n        return _0x24b484;\n    });\n    console['log'](max);\n}", "test_cases": [["4 5\n20 35 60 70\n15 30 40 80 90\n3 2\n10 20 30\n42 60\n0 1\n100\n1 1\n10\n50\n0 0", "20\n18\n100\n40"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"0 0\")break;\n   var arr=str.split(\" \");\n   var data=[0];\n   if(arr[0]>0)data=data.concat((Arr.shift()).split(\" \").map(Number));\n   if(arr[1]>0)data=data.concat((Arr.shift()).split(\" \").map(Number));\n   data.sort(function(a,b){return a-b;});\n   var max=0;\n   data.reduce(function(a,b){\n      max=Math.max(max,Math.abs(a-b));\n   return b;\n   });\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00621_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var wq = arr['shift']();\n    if (wq == '0\\x200')\n        break;\n    wq = wq['split']('\\x20')['map'](Number);\n    var w = wq[0x0];\n    var W = [];\n    for (var i = 0x0; i < w; i++)\n        W[i] = !![];\n    var cat = {};\n    while (wq[0x1]--) {\n        var sw = arr['shift']()['split']('\\x20');\n        if (sw[0x0] == 's') {\n            var id = sw[0x1];\n            var width = sw[0x2] - 0x0;\n            var cnt = 0x0;\n            var ans = 'impossible';\n            for (var i = 0x0; i < w; i++) {\n                cnt = W[i] ? cnt + 0x1 : 0x0;\n                if (cnt == width) {\n                    while (cnt--) {\n                        W[i] = ![];\n                        i--;\n                    }\n                    i++;\n                    cat[id] = [\n                        i,\n                        width\n                    ];\n                    ans = i;\n                    break;\n                }\n            }\n            console['log'](ans);\n        }\n        if (sw[0x0] == 'w') {\n            var id = sw[0x1];\n            var width = cat[id][0x1];\n            var i = cat[id][0x0];\n            while (width--) {\n                W[i] = !![];\n                i++;\n            }\n        }\n    }\n    console['log']('END');\n}", "test_cases": [["4 6\ns 0 2\ns 1 3\ns 2 1\nw 0\ns 3 3\ns 4 2\n3 3\ns 0 1\ns 1 1\ns 2 1\n0 0", "0\nimpossible\n2\nimpossible\n0\nEND\n0\n1\n2\nEND"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wq=arr.shift();\n   if(wq==\"0 0\")break;\n   wq=wq.split(\" \").map(Number);\n   var w=wq[0];\n   var W=[];\n   for(var i=0;i<w;i++)W[i]=true;\n   var cat={};\n   while(wq[1]--){\n      var sw=arr.shift().split(\" \");\n      if(sw[0]==\"s\"){\n         var id=sw[1];\n         var width=sw[2]-0;\n         var cnt=0;\n         var ans=\"impossible\";\n         for(var i=0;i<w;i++){\n            cnt=(W[i])?cnt+1:0;\n            if(cnt==width){\n              while(cnt--){W[i]=false;i--;}\n               i++;\n               cat[id]=[i,width];\n               ans=i;\n               break;\n            }\n         }\n         console.log(ans);\n      }\n      if(sw[0]==\"w\"){\n         var id=sw[1];\n         var width=cat[id][1];\n         var i=cat[id][0];\n         while(width--){W[i]=true;i++;}\n      }\n   }\n   console.log(\"END\");\n}", "language": "JavaScript"}
{"filename": "p00622_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var a = arr['shift']()['split']('');\n    if (a['join']('') == '-')\n        break;\n    var b = arr['shift']()['split']('');\n    var c = arr['shift']()['split']('');\n    var obj = {};\n    a['forEach'](function (_0x5c3e5a) {\n        obj[_0x5c3e5a] = !![];\n    });\n    var str = '';\n    var m = '';\n    c['forEach'](function (_0x152fce) {\n        if (obj['hasOwnProperty'](_0x152fce)) {\n            if (m == '') {\n                m = a['shift']();\n                m = a['shift']();\n            } else {\n                m = a['shift']();\n            }\n        } else {\n            while (!![]) {\n                if (m == _0x152fce) {\n                    m = a['shift']();\n                    break;\n                } else {\n                    str += m;\n                    m = b['shift']();\n                }\n            }\n        }\n    });\n    str += m;\n    str += b['join']('');\n    console['log'](str);\n}", "test_cases": [["CBA\ncba\ncCa\nX\nZY\nZ\n-", "BbA\nXY"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var a=arr.shift().split(\"\");\n   if(a.join(\"\")==\"-\")break;\n   var b=arr.shift().split(\"\");\n   var c=arr.shift().split(\"\");\n   var obj={};\n   a.forEach(function(v){\n      obj[v]=true;\n   });\n   var str=\"\";\n   var m=\"\";\n   c.forEach(function(v){\n      if(obj.hasOwnProperty(v)){\n         if(m==\"\"){\n            m=a.shift();\n            m=a.shift();\n         }else{\n            m=a.shift();\n         }\n      }else{\n         while(true){\n            if(m==v){\n               m=a.shift();\n               break;\n            }else{\n               str+=m;\n               m=b.shift();\n            }\n         }\n      }\n   });\n   str+=m;\n   str+=b.join(\"\");\n   console.log(str);\n}", "language": "JavaScript"}
{"filename": "p00627_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nwhile (Arr['length'] != 0x0) {\n    var n = Arr['shift']() / 0x4;\n    if (n == 0x0)\n        break;\n    var sum = 0x0;\n    while (n != 0x0) {\n        sum += Arr['shift']();\n        n--;\n    }\n    console['log'](sum);\n}", "test_cases": [["20\n4\n3\n2\n1\n3\n8\n2\n0\n0", "13\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nwhile(Arr.length!=0){\n   var n=(Arr.shift())/4;\n   if(n==0)break;\n   var sum=0;\n   while(n!=0){sum+=Arr.shift();n--}\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00628_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var str = Arr['shift']();\n    if (str == 'END\\x20OF\\x20INPUT')\n        break;\n    var arr = str['split']('\\x20');\n    arr['forEach'](function (_0x439c98, _0x5d71a6) {\n        arr[_0x5d71a6] = _0x439c98['length'];\n    });\n    console['log'](arr['join'](''));\n}", "test_cases": [["Yes I have a number\nHow I wish I could calculate an unused color for space\nThank you\nEND OF INPUT", "31416\n31415926535\n53"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var str=Arr.shift();\n   if(str==\"END OF INPUT\")break;\n   var arr=str.split(\" \");\n   arr.forEach(function(v,i){arr[i]=v.length;});\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript"}
{"filename": "p00630_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var nt = Arr['shift']()['split']('\\x20');\n    var str = nt[0x0];\n    var type = nt[0x1];\n    if (type == 'X')\n        break;\n    str = str['replace'](/^./, function (_0x634d49) {\n        return _0x634d49['toLowerCase']();\n    });\n    str = str['replace'](/[A-Z]/g, function (_0x36bd13) {\n        return '_' + _0x36bd13;\n    });\n    var arr = str['split']('_');\n    for (var i = 0x1; i < arr['length']; i++) {\n        arr[i] = arr[i]['replace'](/./, function (_0x5dd70d) {\n            return _0x5dd70d['toUpperCase']();\n        });\n    }\n    if (type == 'U') {\n        arr[0x0] = arr[0x0]['replace'](/^./, function (_0x3c37dd) {\n            return _0x3c37dd['toUpperCase']();\n        });\n        console['log'](arr['join'](''));\n    }\n    if (type == 'L')\n        console['log'](arr['join'](''));\n    if (type == 'D')\n        console['log'](arr['join']('_')['toLowerCase']());\n}", "test_cases": [["get_user_name L\ngetUserName U\nGetUserName D\nEndOfInput X", "getUserName\nGetUserName\nget_user_name"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var nt=(Arr.shift()).split(\" \");\n   var str=nt[0];\n   var type=nt[1];\n   if(type==\"X\")break;\n   str=str.replace(/^./,function(s){\n      return s.toLowerCase();\n   });\n   str=str.replace(/[A-Z]/g,function(s){\n      return \"_\"+s;\n   });\n   var arr=str.split(\"_\");\n   for(var i=1;i<arr.length;i++){\n      arr[i]=arr[i].replace(/./,function(s){\n         return s.toUpperCase();\n      });\n   }\n   if(type==\"U\"){\n      arr[0]=arr[0].replace(/^./,function(s){\n         return s.toUpperCase();\n      });\n      console.log(arr.join(\"\"));\n   }\n   if(type==\"L\")console.log(arr.join(\"\"));\n   if(type==\"D\")console.log(arr.join(\"_\").toLowerCase());\n}", "language": "JavaScript"}
{"filename": "p00631_1", "type": "JavaScript", "obfuscated": "function bomb(_0x371b63, _0x2f1c28, _0x2aa73f) {\n    if (_0x2aa73f == n) {\n        min = Math['min'](min, Math['abs'](_0x371b63 - _0x2f1c28));\n        return;\n    }\n    bomb(_0x371b63 + arr[_0x2aa73f], _0x2f1c28, _0x2aa73f + 0x1);\n    bomb(_0x371b63, _0x2f1c28 + arr[_0x2aa73f], _0x2aa73f + 0x1);\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var min = Infinity;\n    bomb(0x0, 0x0, 0x0);\n    console['log'](min);\n}", "test_cases": [["5\n1 2 3 4 5\n4\n2 3 5 7\n0", "1\n1"]], "original": "function bomb(a,b,i){\n   if(i==n){\n      min=Math.min(min,Math.abs(a-b));\n      return;\n   }\n   bomb(a+arr[i],b,i+1);\n   bomb(a,b+arr[i],i+1);\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=Arr.shift().split(\" \").map(Number);\n   var min=Infinity;\n   bomb(0,0,0);\n   console.log(min);\n}", "language": "JavaScript"}
{"filename": "p00637_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var x = arr[0x0];\n    var ans = [[x]];\n    for (var i = 0x1; i < n; i++) {\n        if (x + 0x1 == arr[i])\n            ans[ans['length'] - 0x1]['push'](arr[i]);\n        else\n            ans['push']([arr[i]]);\n        x = arr[i];\n    }\n    ans['forEach'](function (_0x2e03be, _0xee2454) {\n        if (_0x2e03be['length'] !== 0x1)\n            ans[_0xee2454] = _0x2e03be[0x0] + '-' + _0x2e03be[_0x2e03be['length'] - 0x1];\n        else\n            ans[_0xee2454] = _0x2e03be[0x0];\n    });\n    console['log'](ans['join']('\\x20'));\n}", "test_cases": [["5\n1 2 3 5 6\n3\n7 8 9\n0", "1-3 5-6\n7-9"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var x=arr[0];\n   var ans=[[x]];\n   for(var i=1;i<n;i++){\n      if(x+1==arr[i])(ans[ans.length-1]).push(arr[i]);\n      else ans.push([arr[i]]);\n      x=arr[i];\n   }\n   ans.forEach(function(v,i){\n      if(v.length!==1)ans[i]=v[0]+\"-\"+v[v.length-1];\n      else ans[i]=v[0];\n   });\n   console.log(ans.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p00657_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var rc = Arr['shift']()['split']('\\x20')['map'](Number);\n    var r = rc[0x0];\n    var c = rc[0x1];\n    if (r == 0x0 && c == 0x0)\n        break;\n    console['log'](r % 0x2 == 0x1 && c % 0x2 == 0x1 ? 'no' : 'yes');\n}", "test_cases": [["1 1\n2 2\n0 0", "no\nyes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var rc=Arr.shift().split(\" \").map(Number);\n   var r=rc[0];\n   var c=rc[1];\n   if(r==0 && c==0)break;\n   console.log((r%2==1 && c%2==1)?\"no\":\"yes\");\n}", "language": "JavaScript"}
{"filename": "p00676_1", "type": "JavaScript", "obfuscated": "function heron(_0x4f5d29, _0x1698a2, _0x527050) {\n    var _0x30a10d = (_0x4f5d29 + _0x1698a2 + _0x527050) / 0x2;\n    var _0x52225c = Math['sqrt'](_0x30a10d * (_0x30a10d - _0x4f5d29) * (_0x30a10d - _0x1698a2) * (_0x30a10d - _0x527050));\n    return _0x52225c;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var ALX = Arr[i]['split']('\\x20')['map'](Number);\n    var A = ALX[0x0];\n    var L = ALX[0x1];\n    var X = ALX[0x2];\n    var sum = 0x0;\n    sum += heron(A, L, L);\n    sum += heron(L, (L + X) / 0x2, (L + X) / 0x2) * 0x2;\n    console['log'](sum['toFixed'](0xa));\n}", "test_cases": [["2 2 1\n2 3 1\n3 2 3\n2 3 5", "3.9681187851\n6.7970540913\n6.5668891783\n13.9527248554"]], "original": "function heron(a,b,c){\n   var s=(a+b+c)/2;\n   var S=Math.sqrt(s*(s-a)*(s-b)*(s-c));\n   return S;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nfor(var i=0;i<Arr.length;i++){\n   var ALX=Arr[i].split(\" \").map(Number);\n   var A=ALX[0];\n   var L=ALX[1];\n   var X=ALX[2];\n   var sum=0;\n   sum+=heron(A,L,L);\n   sum+=(heron(L,(L+X)/2,(L+X)/2)*2);\n   console.log(sum.toFixed(10));\n}", "language": "JavaScript"}
{"filename": "p00695_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nArr['push']('');\nvar n = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < n; I++) {\n    var yx = [];\n    var dp = [];\n    for (var i = 0x0; i < 0x5; i++) {\n        var v = Arr['shift']()['split']('\\x20')['map'](Number);\n        yx['push'](v);\n        dp['push']([]);\n    }\n    for (var y = 0x0; y < 0x5; y++) {\n        for (var x = 0x0; x < 0x5; x++) {\n            if (y == 0x0)\n                dp[y][x] = yx[y][x] == 0x1 ? 0x1 : 0x0;\n            else\n                dp[y][x] = yx[y][x] == 0x1 ? dp[y - 0x1][x] + 0x1 : 0x0;\n        }\n    }\n    var max = 0x0;\n    for (var y = 0x0; y < 0x5; y++) {\n        for (var i = 0x0; i < 0x5; i++) {\n            for (var j = i; j < 0x5; j++) {\n                var min = Infinity;\n                for (var k = i; k <= j; k++)\n                    min = Math['min'](min, dp[y][k]);\n                max = Math['max'](max, min * (j - i + 0x1));\n            }\n        }\n    }\n    console['log'](max);\n    Arr['shift']();\n}", "test_cases": [["3\n1 1 0 1 0\n0 1 1 1 1\n1 0 1 0 1\n0 1 1 1 0\n0 1 1 0 0\n\n0 1 0 1 1\n0 1 0 1 0\n0 0 1 0 0\n0 0 1 1 0\n1 0 1 0 0\n\n1 1 1 1 0\n0 1 1 1 0\n0 1 1 0 1\n0 1 1 1 0\n0 0 0 0 1", "4\n3\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nArr.push(\"\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var yx=[];\n   var dp=[];\n   for(var i=0;i<5;i++){\n      var v=Arr.shift().split(\" \").map(Number);\n      yx.push(v);\n      dp.push([]);\n   }\n   for(var y=0;y<5;y++){\n      for(var x=0;x<5;x++){\n         if(y==0)dp[y][x]=(yx[y][x]==1)?1:0;\n         else dp[y][x]=(yx[y][x]==1)?dp[y-1][x]+1:0;\n      }\n   }\n   var max=0;\n   for(var y=0;y<5;y++){\n      for(var i=0;i<5;i++){\n         for(var j=i;j<5;j++){\n            var min=Infinity;\n            for(var k=i;k<=j;k++)min=Math.min(min,dp[y][k]);\n            max=Math.max(max,min*(j-i+1));\n         }\n      }\n   }\n   console.log(max);\n   Arr.shift();\n}", "language": "JavaScript"}
{"filename": "p00706_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var wh = arr['shift']()['split']('\\x20')['map'](Number);\n    var w = wh[0x0];\n    var h = wh[0x1];\n    var XY = [];\n    for (var i = 0x0; i < w; i++) {\n        XY[i] = [];\n        for (var j = 0x0; j < h; j++) {\n            XY[i][j] = 0x0;\n        }\n    }\n    while (n--) {\n        var xy = arr['shift']()['split']('\\x20')['map'](Number);\n        XY[xy[0x0] - 0x1][xy[0x1] - 0x1] = 0x1;\n    }\n    var st = arr['shift']()['split']('\\x20')['map'](Number);\n    var s = st[0x0];\n    var t = st[0x1];\n    var max = 0x0;\n    for (var i = 0x0; i <= w - s; i++) {\n        for (var j = 0x0; j <= h - t; j++) {\n            var sum = 0x0;\n            for (var x = 0x0; x < s; x++) {\n                for (var y = 0x0; y < t; y++) {\n                    sum += XY[i + x][j + y];\n                }\n            }\n            max = Math['max'](sum, max);\n        }\n    }\n    console['log'](max);\n}", "test_cases": [["16\n10 8\n2 2\n2 5\n2 7\n3 3\n3 8\n4 2\n4 5\n4 8\n6 4\n6 7\n7 5\n7 8\n8 1\n8 4\n9 6\n10 3\n4 3\n8\n6 4\n1 2\n2 1\n2 4\n3 4\n4 2\n5 3\n6 1\n6 2\n3 2\n0", "4\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var wh=arr.shift().split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   var XY=[];\n   for(var i=0;i<w;i++){\n      XY[i]=[];\n      for(var j=0;j<h;j++){\n         XY[i][j]=0;\n      }\n   }\n   while(n--){\n      var xy=arr.shift().split(\" \").map(Number);\n      XY[xy[0]-1][xy[1]-1]=1;\n   }\n   var st=arr.shift().split(\" \").map(Number);\n   var s=st[0];\n   var t=st[1];\n   var max=0;\n   for(var i=0;i<=w-s;i++){\n      for(var j=0;j<=h-t;j++){\n         var sum=0;\n         for(var x=0;x<s;x++){\n            for(var y=0;y<t;y++){\n               sum+=XY[i+x][j+y];\n            }\n         }\n         max=Math.max(sum,max);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00711_1", "type": "JavaScript", "obfuscated": "function bomb(_0x476f9d, _0x4273d4) {\n    var _0x2b3e7d = [\n        0x0,\n        0x0,\n        -0x1,\n        0x1\n    ];\n    var _0x564920 = [\n        -0x1,\n        0x1,\n        0x0,\n        0x0\n    ];\n    for (var _0x13f301 = 0x0; _0x13f301 < 0x4; _0x13f301++) {\n        var _0x3cab89 = _0x476f9d + _0x2b3e7d[_0x13f301];\n        var _0x11f8c6 = _0x4273d4 + _0x564920[_0x13f301];\n        if (_0x3cab89 < 0x0 || _0x3cab89 >= H || _0x11f8c6 < 0x0 || _0x11f8c6 >= W)\n            continue;\n        if (yx[_0x3cab89][_0x11f8c6] == '.') {\n            cnt++;\n            yx[_0x3cab89][_0x11f8c6] = cnt;\n            bomb(_0x3cab89, _0x11f8c6);\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var WH = Arr['shift']()['split']('\\x20')['map'](Number);\n    var W = WH[0x0];\n    var H = WH[0x1];\n    if (W == 0x0 && H == 0x0)\n        break;\n    var yx = [];\n    var Y, X;\n    for (var i = 0x0; i < H; i++) {\n        var arr = Arr['shift']()['split']('');\n        if (arr['indexOf']('@') != -0x1) {\n            Y = i;\n            X = arr['indexOf']('@');\n        }\n        yx['push'](arr);\n    }\n    var cnt = 0x1;\n    bomb(Y, X);\n    console['log'](cnt);\n}", "test_cases": [["6 9\n....#.\n.....#\n......\n......\n......\n......\n......\n#@...#\n.#..#.\n11 9\n.#.........\n.#.#######.\n.#.#.....#.\n.#.#.###.#.\n.#.#..@#.#.\n.#.#####.#.\n.#.......#.\n.#########.\n...........\n11 6\n..#..#..#..\n..#..#..#..\n..#..#..###\n..#..#..#@.\n..#..#..#..\n..#..#..#..\n7 7\n..#.#..\n..#.#..\n###.###\n...@...\n###.###\n..#.#..\n..#.#..\n0 0", "45\n59\n6\n13"]], "original": "function bomb(y,x){\n   var dy=[0,0,-1,1];\n   var dx=[-1,1,0,0];\n   for(var i=0;i<4;i++){\n      var yy=y+dy[i];\n      var xx=x+dx[i];\n      if(yy<0 || yy>=H || xx<0 || xx>=W)continue;\n      if(yx[yy][xx]==\".\"){cnt++;yx[yy][xx]=cnt;bomb(yy,xx);}\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var WH=(Arr.shift()).split(\" \").map(Number);\n   var W=WH[0];\n   var H=WH[1];\n   if(W==0 && H==0)break;\n      var yx=[];\n      var Y,X;\n      for(var i=0;i<H;i++){\n         var arr=(Arr.shift()).split(\"\");\n         if(arr.indexOf(\"@\")!=-1){Y=i;X=arr.indexOf(\"@\");}\n         yx.push(arr);\n      }\n      var cnt=1;\n      bomb(Y,X);\n      console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00712_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var pqan = arr['shift']()['split']('\\x20')['map'](Number);\n    if (pqan['join']('\\x20') == '0\\x200\\x200\\x200')\n        break;\n    var p = pqan[0x0];\n    var q = pqan[0x1];\n    var a = pqan[0x2];\n    var n = pqan[0x3];\n    var ans = 0x0;\n    var loop = function (_0x4c8339, _0x15570d, _0x2c1730, _0x3997bc, _0xfdbf65) {\n        if (_0xfdbf65 > 0x0) {\n            if (_0xfdbf65 > n)\n                return;\n            if (p * _0x2c1730 == _0x15570d * q) {\n                ans++;\n                return;\n            } else if (p * _0x2c1730 < _0x15570d * q)\n                return;\n        }\n        for (var _0x3bbbb1 = _0x4c8339; _0x3997bc * _0x3bbbb1 <= a; _0x3bbbb1++) {\n            loop(_0x3bbbb1, 0x1 * _0x2c1730 + _0x3bbbb1 * _0x15570d, _0x2c1730 * _0x3bbbb1, _0x3997bc * _0x3bbbb1, _0xfdbf65 + 0x1);\n        }\n    };\n    loop(0x1, 0x0, 0x1, 0x1, 0x0);\n    console['log'](ans);\n}", "test_cases": [["2 3 120 3\n2 3 300 3\n2 3 299 3\n2 3 12 3\n2 3 12000 7\n54 795 12000 7\n2 3 300 1\n2 1 200 5\n2 4 54 2\n0 0 0 0", "4\n7\n6\n2\n42\n1\n0\n9\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var pqan=arr.shift().split(\" \").map(Number);\n   if(pqan.join(\" \")==\"0 0 0 0\")break;\n   var p=pqan[0];\n   var q=pqan[1];\n   var a=pqan[2];\n   var n=pqan[3];\n   var ans=0;\n   var loop=function(start,P,Q,A,cnt){\n      if(cnt>0){\n         if(cnt>n)return;\n         if(p*Q==P*q){\n            ans++;\n            return;\n         }else if(p*Q<P*q)return;\n      }\n      for(var i=start;A*i<=a;i++){\n         loop(i,1*Q+i*P,Q*i,A*i,cnt+1);\n      }\n   };\n   loop(1,0,1,1,0);\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p00746_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var N = Arr['shift']() - 0x0;\n    if (N == 0x0)\n        break;\n    if (N == 0x1) {\n        console['log']('1\\x201');\n        continue;\n    }\n    var arr = [];\n    arr[0x0] = [\n        0x0,\n        0x0\n    ];\n    for (var i = 0x0; i < N - 0x1; i++) {\n        var nm = Arr['shift']()['split']('\\x20')['map'](Number);\n        var n = nm[0x0];\n        var m = nm[0x1];\n        var x = 0x0;\n        var y = 0x0;\n        if (m == 0x0)\n            x = -0x1;\n        if (m == 0x1)\n            y = -0x1;\n        if (m == 0x2)\n            x = 0x1;\n        if (m == 0x3)\n            y = 0x1;\n        arr[i + 0x1] = [\n            arr[n][0x0] + x,\n            arr[n][0x1] + y\n        ];\n    }\n    var xA = 0x0;\n    var xZ = 0x0;\n    var yA = 0x0;\n    var yZ = 0x0;\n    for (var i = 0x0; i < arr['length']; i++) {\n        xA = Math['min'](xA, arr[i][0x0]);\n        xZ = Math['max'](xZ, arr[i][0x0]);\n        yA = Math['min'](yA, arr[i][0x1]);\n        yZ = Math['max'](yZ, arr[i][0x1]);\n    }\n    console['log'](xZ - xA + 0x1 + '\\x20' + (yZ - yA + 0x1));\n}", "test_cases": [["1\n5\n0 0\n0 1\n0 2\n0 3\n12\n0 0\n1 0\n2 0\n3 1\n4 1\n5 1\n6 2\n7 2\n8 2\n9 3\n10 3\n10\n0 2\n1 2\n2 2\n3 2\n2 1\n5 1\n6 1\n7 1\n8 1\n0", "1 1\n3 3\n4 4\n5 6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var N=Arr.shift()-0;\n   if(N==0)break;\n   if(N==1){console.log(\"1 1\");continue;}\n   var arr=[];\n   arr[0]=[0,0];\n   for(var i=0;i<N-1;i++){\n      var nm=(Arr.shift()).split(\" \").map(Number);\n      var n=nm[0];\n      var m=nm[1];\n      var x=0;\n      var y=0;\n      if(m==0)x=-1;\n      if(m==1)y=-1\n      if(m==2)x=1;\n      if(m==3)y=1;\n      arr[i+1]=[arr[n][0]+x,arr[n][1]+y];\n   }\n   var xA=0;\n   var xZ=0;\n   var yA=0;\n   var yZ=0;\n   for(var i=0;i<arr.length;i++){\n      xA=Math.min(xA,arr[i][0]);\n      xZ=Math.max(xZ,arr[i][0]);\n      yA=Math.min(yA,arr[i][1]);\n      yZ=Math.max(yZ,arr[i][1]);\n   }\n   console.log((xZ-xA+1)+\" \"+(yZ-yA+1));\n}", "language": "JavaScript"}
{"filename": "p00761_1", "type": "JavaScript", "obfuscated": "function str1(_0x35c9a4) {\n    _0x35c9a4 = _0x35c9a4 + '';\n    while (_0x35c9a4['length'] != b)\n        _0x35c9a4 = '0' + _0x35c9a4;\n    return _0x35c9a4;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var ab = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (ab[0x0] == 0x0 && ab[0x1] == 0x0)\n        break;\n    var str = ab[0x0] + '';\n    var b = ab[0x1];\n    var arr = [];\n    str = str1(str);\n    arr['push'](str);\n    var i = 0x0;\n    while (!![]) {\n        i++;\n        var s = str['split']('');\n        s['sort'](function (_0x3977d6, _0x68c26a) {\n            return _0x68c26a - _0x3977d6;\n        });\n        var A = parseInt(s['join'](''), 0xa);\n        var B = parseInt(s['reverse']()['join'](''), 0xa);\n        var C = A - B;\n        var Cstr = str1(C);\n        if (arr['indexOf'](Cstr) != -0x1)\n            break;\n        arr['push'](Cstr);\n        str = Cstr;\n    }\n    console['log'](arr['indexOf'](Cstr) + '\\x20' + parseInt(Cstr, 0xa) + '\\x20' + (i - arr['indexOf'](Cstr)));\n}", "test_cases": [["2012 4\n83268 6\n1112 4\n0 1\n99 2\n0 0", "3 6174 1\n1 862632 7\n5 6174 1\n0 0 1\n1 0 1"]], "original": "function str1(x){\n   x=x+\"\";\n   while(x.length!=b)x=\"0\"+x;\n   return x;\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var ab=(Arr.shift()).split(\" \").map(Number);\n   if(ab[0]==0 && ab[1]==0)break;\n   var str=ab[0]+\"\";\n   var b=ab[1];\n   var arr=[];\n   str=str1(str);\n   arr.push(str);\n   var i=0;\n   while(true){\n      i++;\n      var s=str.split(\"\");\n      s.sort(function(a,b){return b-a;});\n      var A=parseInt(s.join(\"\"),10);\n      var B=parseInt(s.reverse().join(\"\"),10); \n      var C=A-B;\n      var Cstr=str1(C);     \n      if(arr.indexOf(Cstr)!=-1)break;\n      arr.push(Cstr);\n      str=Cstr; \n   }\n   console.log(arr.indexOf(Cstr)+\" \"+parseInt(Cstr,10)+\" \"+(i-arr.indexOf(Cstr)));\n}", "language": "JavaScript"}
{"filename": "p00768_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var MTPR = arr['shift']();\n    if (MTPR == '0\\x200\\x200\\x200')\n        break;\n    MTPR = MTPR['split']('\\x20')['map'](Number);\n    var team = [];\n    for (var i = 0x0; i < MTPR[0x1]; i++)\n        team['push']([\n            0x0,\n            0x0,\n            [\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0,\n                0x0\n            ],\n            i\n        ]);\n    for (var i = 0x0; i < MTPR[0x3]; i++) {\n        var mtpj = arr['shift']()['split']('\\x20')['map'](Number);\n        var m = mtpj[0x0];\n        var t = mtpj[0x1] - 0x1;\n        var p = mtpj[0x2] - 0x1;\n        var j = mtpj[0x3];\n        if (j == 0x0) {\n            team[t][0x0]++;\n            team[t][0x1] += m + team[t][0x2][p] * 0x14;\n        }\n        if (j != 0x0)\n            team[t][0x2][p]++;\n    }\n    team['sort'](function (_0x5055f5, _0x4b19e4) {\n        if (_0x5055f5[0x0] == _0x4b19e4[0x0] && _0x5055f5[0x1] == _0x4b19e4[0x1])\n            return _0x4b19e4[0x3] - _0x5055f5[0x3];\n        else if (_0x5055f5[0x0] == _0x4b19e4[0x0])\n            return _0x5055f5[0x1] - _0x4b19e4[0x1];\n        else\n            return _0x4b19e4[0x0] - _0x5055f5[0x0];\n    });\n    var ans = [];\n    var same = [\n        -0x1,\n        -0x1\n    ];\n    team['forEach'](function (_0x134076, _0x40cdcc) {\n        if (same[0x0] == _0x134076[0x0] && same[0x1] == _0x134076[0x1])\n            ans[ans['length'] - 0x1] += '=' + (_0x134076[0x3] + 0x1);\n        else {\n            ans['push'](_0x134076[0x3] + 0x1);\n            same = [\n                _0x134076[0x0],\n                _0x134076[0x1]\n            ];\n        }\n    });\n    console['log'](ans['join'](','));\n}", "test_cases": [["300 10 8 5\n50 5 2 1\n70 5 2 0\n75 1 1 0\n100 3 1 0\n150 3 2 0\n240 5 5 7\n50 1 1 0\n60 2 2 0\n70 2 3 0\n90 1 3 0\n120 3 5 0\n140 4 1 0\n150 2 4 1\n180 3 5 4\n15 2 2 1\n20 2 2 1\n25 2 2 0\n60 1 1 0\n120 5 5 4\n15 5 4 1\n20 5 4 0\n40 1 1 0\n40 2 2 0\n120 2 3 4\n30 1 1 0\n40 2 1 0\n50 2 2 0\n60 1 2 0\n120 3 3 2\n0 1 1 0\n1 2 2 0\n300 5 8 0\n0 0 0 0", "3,1,5,10=9=8=7=6=4=2\n2,1,3,4,5\n1,2,3\n5=2=1,4=3\n2=1\n1,2,3\n5=4=3=2=1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var MTPR=arr.shift();\n   if(MTPR==\"0 0 0 0\")break;\n   MTPR=MTPR.split(\" \").map(Number);\n   var team=[];\n   for(var i=0;i<MTPR[1];i++)team.push([0,0,[0,0,0,0,0,0,0,0,0,0],i]);\n   for(var i=0;i<MTPR[3];i++){\n      var mtpj=arr.shift().split(\" \").map(Number);\n      var m=mtpj[0];\n      var t=mtpj[1]-1;\n      var p=mtpj[2]-1;\n      var j=mtpj[3];\n      if(j==0){\n         team[t][0]++;\n         team[t][1]+=m+team[t][2][p]*20;\n      }\n      if(j!=0)team[t][2][p]++;\n   }\n   team.sort(function(a,b){\n      if(a[0]==b[0] && a[1]==b[1])return b[3]-a[3];\n      else if(a[0]==b[0])return a[1]-b[1];\n      else return b[0]-a[0];\n   });\n   var ans=[];\n   var same=[-1,-1];\n   team.forEach(function(v,i){\n      if(same[0]==v[0] && same[1]==v[1])ans[ans.length-1]+=\"=\"+(v[3]+1);\n      else {ans.push(v[3]+1);same=[v[0],v[1]];}\n   });\n   console.log(ans.join(\",\"));\n}", "language": "JavaScript"}
{"filename": "p00769_1", "type": "JavaScript", "obfuscated": "function saiki(_0x31483b, _0x382a1e) {\n    while (!![]) {\n        if (/\\[{2}\\d.*?\\]{2}/['test'](_0x31483b)) {\n            _0x31483b = _0x31483b['replace'](/\\[{2}\\d.*?\\]{2}/, function (_0x437bf4) {\n                var _0x523e11 = _0x437bf4['slice'](0x2, -0x2)['split']('][')['map'](Number);\n                _0x523e11['sort']((_0x2d3149, _0x65ce95) => _0x2d3149 - _0x65ce95);\n                var _0x43198e = 0x0;\n                for (var _0x51fc32 = 0x0; _0x51fc32 < Math['ceil'](_0x523e11['length'] / 0x2); _0x51fc32++) {\n                    if (_0x382a1e)\n                        _0x43198e += Math['floor'](_0x523e11[_0x51fc32] / 0x2) + 0x1;\n                    else\n                        _0x43198e += Math['floor'](_0x523e11[_0x51fc32]);\n                }\n                return '(' + _0x43198e + ')';\n            });\n        } else\n            break;\n    }\n    _0x31483b = _0x31483b['replace'](/\\(/g, '[');\n    _0x31483b = _0x31483b['replace'](/\\)/g, ']');\n    return _0x31483b;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\narr['forEach'](_0x48aeee => {\n    _0x48aeee = saiki(_0x48aeee, !![]);\n    while (/\\[\\[/['test'](_0x48aeee))\n        _0x48aeee = saiki(_0x48aeee, ![]);\n    console['log'](_0x48aeee['replace'](/\\[|\\]/g, ''));\n});", "test_cases": [["6\n[[123][4567][89]]\n[[5][3][7][3][9]]\n[[[99][59][63][85][51]][[1539][7995][467]][[51][57][79][99][3][91][59]]]\n[[[37][95][31][77][15]][[43][5][5][5][85]][[71][3][51][89][29]][[57][95][5][69][31]][[99][59][65][73][31]]]\n[[[[9][7][3]][[3][5][7]][[7][9][5]]][[[9][9][3]][[5][9][9]][[7][7][3]]][[[5][9][7]][[3][9][3]][[9][5][5]]]]\n[[8231][3721][203][3271][8843]]", "107\n7\n175\n95\n21\n3599"]], "original": "function saiki(str,flag){\n   while(true){\n      if(/\\[{2}\\d.*?\\]{2}/.test(str)){\n         str=str.replace(/\\[{2}\\d.*?\\]{2}/,function(s){\n               var d =s.slice(2,-2).split(\"][\").map(Number);\n               d.sort((a,b)=> a-b);\n               var sum=0;\n               for(var i=0;i<Math.ceil(d.length/2);i++){\n                  if(flag) sum+=Math.floor(d[i]/2)+1;\n                  else sum+=Math.floor(d[i]);\n               }\n               return \"(\"+sum+\")\";\n            });\n      }else break;\n   }\n   str=str.replace(/\\(/g,\"[\");\n   str=str.replace(/\\)/g,\"]\");\n   return str;\n }\n  \nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\n\narr.forEach(str=>{\n   str=saiki(str,true);\n   while(/\\[\\[/.test(str))str=saiki(str,false);\n    console.log(str.replace(/\\[|\\]/g,\"\"));\n});\n", "language": "JavaScript"}
{"filename": "p00780_1", "type": "JavaScript", "obfuscated": "function prime(_0x4e7e69) {\n    var _0xcbc714 = [];\n    for (var _0x3aac9a = 0x0; _0x3aac9a <= _0x4e7e69; _0x3aac9a++)\n        _0xcbc714[_0x3aac9a] = _0x3aac9a;\n    _0xcbc714[0x0] = ![];\n    _0xcbc714[0x1] = ![];\n    var _0x47927b = Math['floor'](Math['sqrt'](_0x4e7e69));\n    for (var _0x3aac9a = 0x2; _0x3aac9a <= _0x47927b; _0x3aac9a++) {\n        if (_0xcbc714[_0x3aac9a] == ![])\n            continue;\n        for (var _0x571937 = _0x3aac9a + _0x3aac9a; _0x571937 <= _0x4e7e69; _0x571937 += _0x3aac9a) {\n            _0xcbc714[_0x571937] = ![];\n        }\n    }\n    var _0xc3af4b = [];\n    for (var _0x3aac9a = 0x0; _0x3aac9a <= _0x4e7e69; _0x3aac9a++) {\n        if (_0xcbc714[_0x3aac9a] !== ![])\n            _0xc3af4b['push'](_0xcbc714[_0x3aac9a]);\n    }\n    return _0xc3af4b;\n}\nvar p = prime(0xc350);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var cnt = 0x0;\n    var k = p['length'] - 0x1;\n    for (var i = 0x0; i < p['length']; i++) {\n        while (p[i] + p[k] > n)\n            k--;\n        if (k < i)\n            break;\n        if (p[i] + p[k] == n)\n            cnt++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["6\n10\n12\n0", "1\n2\n1"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(50000);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var cnt=0;\n   var k=p.length-1;\n   for(var i=0;i<p.length;i++){\n      while(p[i]+p[k]>n)k--;\n      if(k<i)break;\n      if(p[i]+p[k]==n)cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p00789_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nwhile (!![]) {\n    var n = arr['shift']();\n    if (n == 0x0)\n        break;\n    var coin = [''];\n    for (var i = 0x1; i <= 0x11; i++)\n        coin['push'](i * i);\n    var dp = [];\n    for (var i = 0x0; i <= 0x11; i++) {\n        dp[i] = [];\n        for (var j = 0x0; j <= n; j++) {\n            dp[i][j] = 0x0;\n        }\n    }\n    dp[0x0][0x0] = 0x1;\n    for (var i = 0x1; i <= 0x11; i++) {\n        for (var j = 0x0; j <= n; j++) {\n            var k = 0x0;\n            while (coin[i] * k + j <= n) {\n                dp[i][coin[i] * k + j] += dp[i - 0x1][j];\n                k++;\n            }\n        }\n    }\n    console['log'](dp[0x11][n]);\n}", "test_cases": [["2\n10\n30\n0", "1\n4\n27"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   var coin=[\"\"];\n   for(var i=1;i<=17;i++)coin.push(i*i);\n   var dp=[];\n   for(var i=0;i<=17;i++){\n      dp[i]=[];\n      for(var j=0;j<=n;j++){\n         dp[i][j]=0;\n      }\n   }\n   dp[0][0]=1;\n   for(var i=1;i<=17;i++){\n      for(var j=0;j<=n;j++){\n        var k=0;\n         while(coin[i]*k+j<=n){\n            dp[i][coin[i]*k+j]+=dp[i-1][j];\n            k++;\n         }\n      }\n   }\n   console.log(dp[17][n]);\n}", "language": "JavaScript"}
{"filename": "p00803_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nwhile (!![]) {\n    var n = arr['shift']();\n    if (n == 0x0)\n        break;\n    var max = 0x0;\n    for (var i = 0x0; i <= 0x36; i++) {\n        for (var j = 0x0; j <= 0x60; j++) {\n            var sum = i * i * i + j * (j + 0x1) * (j + 0x2) / 0x6;\n            if (n >= sum)\n                max = Math['max'](max, sum);\n        }\n    }\n    console['log'](max);\n}", "test_cases": [["100\n64\n50\n20\n151200\n0", "99\n64\n47\n20\n151200"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nwhile(true){\n   var n=arr.shift();\n   if(n==0)break;\n   var max=0;\n   for(var i=0;i<=54;i++){\n      for(var j=0;j<=96;j++){\n         var sum=i*i*i+(j*(j+1)*(j+2))/6;\n         if(n>=sum)max=Math.max(max,sum);\n      }\n   }\n   console.log(max);\n}", "language": "JavaScript"}
{"filename": "p00811_1", "type": "JavaScript", "obfuscated": "function prime(_0x419f78) {\n    var _0x1530be = [];\n    for (var _0x3831f4 = 0x0; _0x3831f4 <= _0x419f78; _0x3831f4++)\n        _0x1530be[_0x3831f4] = _0x3831f4;\n    _0x1530be[0x0] = ![];\n    _0x1530be[0x1] = ![];\n    var _0x22288d = Math['floor'](Math['sqrt'](_0x419f78));\n    for (var _0x3831f4 = 0x2; _0x3831f4 <= _0x22288d; _0x3831f4++) {\n        if (_0x1530be[_0x3831f4] == ![])\n            continue;\n        for (var _0xa35e7a = _0x3831f4 + _0x3831f4; _0xa35e7a <= _0x419f78; _0xa35e7a += _0x3831f4) {\n            _0x1530be[_0xa35e7a] = ![];\n        }\n    }\n    var _0xda1c7b = [];\n    for (var _0x3831f4 = 0x0; _0x3831f4 <= _0x419f78; _0x3831f4++) {\n        if (_0x1530be[_0x3831f4] !== ![])\n            _0xda1c7b['push'](_0x1530be[_0x3831f4]);\n    }\n    return _0xda1c7b;\n}\nvar PRIME = prime(0x186a0);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr['some'](function (_0x17917a) {\n    if (_0x17917a == '0\\x200\\x200')\n        return !![];\n    var _0x1c56d6 = _0x17917a['split']('\\x20')['map'](Number);\n    var _0x52767f = _0x1c56d6[0x0];\n    var _0x4e6d53 = _0x1c56d6[0x1];\n    var _0x16f22a = _0x1c56d6[0x2];\n    var _0x2a2834 = [\n        0x0,\n        0x0,\n        0x0\n    ];\n    for (var _0x4aebd7 = 0x0; _0x4aebd7 < PRIME['length']; _0x4aebd7++) {\n        for (var _0x54e361 = _0x4aebd7; _0x54e361 < PRIME['length']; _0x54e361++) {\n            var _0x9b195d = PRIME[_0x4aebd7] * PRIME[_0x54e361];\n            if (_0x9b195d > _0x52767f)\n                break;\n            if (PRIME[_0x54e361] * _0x4e6d53 <= PRIME[_0x4aebd7] * _0x16f22a && _0x2a2834[0x2] < _0x9b195d)\n                _0x2a2834 = [\n                    PRIME[_0x4aebd7],\n                    PRIME[_0x54e361],\n                    _0x9b195d\n                ];\n        }\n    }\n    console['log'](_0x2a2834[0x0] + '\\x20' + _0x2a2834[0x1]);\n});", "test_cases": [["5 1 2\n99999 999 999\n1680 5 16\n1970 1 1\n2002 4 11\n0 0 0", "2 2\n313 313\n23 73\n43 43\n37 53"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar PRIME=prime(100000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.some(function(v){\n   if(v==\"0 0 0\")return true;\n   var mab=v.split(\" \").map(Number);\n   var m=mab[0];\n   var a=mab[1];\n   var b=mab[2];\n   var ans=[0,0,0];\n   for(var p=0;p<PRIME.length;p++){\n      for(var q=p;q<PRIME.length;q++){\n         var pq=PRIME[p]*PRIME[q];\n         if(pq>m)break;\n         if(PRIME[q]*a <= PRIME[p]*b && ans[2]<pq)ans=[PRIME[p],PRIME[q],pq]\n      }\n   }\n   console.log(ans[0]+\" \"+ans[1]);\n});", "language": "JavaScript"}
{"filename": "p00819_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar n = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < n; I++) {\n    var arr = Arr['shift']()['split']('')['reverse']();\n    var str = Arr['shift']();\n    var x = str['length'];\n    arr['forEach'](function (_0x107126) {\n        if (_0x107126 == 'J')\n            str = str['slice'](-0x1) + str['slice'](0x0, -0x1);\n        else if (_0x107126 == 'C')\n            str = str['slice'](0x1) + str['slice'](0x0, 0x1);\n        else if (_0x107126 == 'E' && x % 0x2 == 0x0)\n            str = str['slice'](x / 0x2, x) + str['slice'](0x0, x / 0x2);\n        else if (_0x107126 == 'E' && x % 0x2 == 0x1)\n            str = str['slice'](~~(x / 0x2) + 0x1, x) + str[~~(x / 0x2)] + str['slice'](0x0, ~~(x / 0x2));\n        else if (_0x107126 == 'A')\n            str = str['split']('')['reverse']()['join']('');\n        else if (_0x107126 == 'P')\n            str = str['replace'](/\\d/g, function (_0x1f0dae) {\n                return _0x1f0dae == '0' ? '9' : _0x1f0dae - 0x0 - 0x1;\n            });\n        else if (_0x107126 == 'M')\n            str = str['replace'](/\\d/g, function (_0x45734b) {\n                return _0x45734b == '9' ? '0' : _0x45734b - 0x0 + 0x1;\n            });\n    });\n    console['log'](str);\n}", "test_cases": [["5\nAJMP\naB23d\nE\n86AE\nAM\n6\nJPEM\nWaEaETC302Q\nCP\nrTurnAGundam1isdefferentf", "32Bad\nAE86\n7\nEC302QTWaEa\nTurnAGundam0isdefferentfr"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar n=Arr.shift()-0;\nfor(var I=0;I<n;I++){\n   var arr=Arr.shift().split(\"\").reverse();\n   var str=Arr.shift();\n   var x=str.length;\n   arr.forEach(function(v){\n      if(v==\"J\")str=str.slice(-1)+str.slice(0,-1);\n      else if(v==\"C\")str=str.slice(1)+str.slice(0,1);\n      else if(v==\"E\" && x%2==0)str=str.slice(x/2,x)+str.slice(0,x/2);\n      else if(v==\"E\" && x%2==1)str=str.slice(~~(x/2)+1,x)+str[~~(x/2)]+str.slice(0,~~(x/2));\n      else if(v==\"A\")str=str.split(\"\").reverse().join(\"\");\n      else if(v==\"P\")str=str.replace(/\\d/g,function(s){return (s==\"0\")?\"9\":(s-0)-1;});\n      else if(v==\"M\")str=str.replace(/\\d/g,function(s){return (s==\"9\")?\"0\":(s-0)+1;});\n   });\n   console.log(str);\n}", "language": "JavaScript"}
{"filename": "p00820_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\narr['some'](function (_0x27b42f) {\n    if (_0x27b42f == 0x0)\n        return !![];\n    var _0x26f2cf = 0x0;\n    for (var _0x147a2f = 0x1; _0x147a2f <= 0xb5; _0x147a2f++) {\n        var _0x54d89e = _0x147a2f * _0x147a2f;\n        if (_0x27b42f < _0x54d89e)\n            break;\n        if (_0x54d89e == _0x27b42f)\n            _0x26f2cf++;\n        for (var _0x5d10a5 = _0x147a2f; _0x5d10a5 <= 0xb5; _0x5d10a5++) {\n            var _0x340703 = _0x54d89e + _0x5d10a5 * _0x5d10a5;\n            if (_0x27b42f < _0x340703)\n                break;\n            if (_0x340703 == _0x27b42f)\n                _0x26f2cf++;\n            for (var _0x4aeaee = _0x5d10a5; _0x4aeaee <= 0xb5; _0x4aeaee++) {\n                var _0x5b3bc9 = _0x340703 + _0x4aeaee * _0x4aeaee;\n                if (_0x27b42f < _0x5b3bc9)\n                    break;\n                if (_0x5b3bc9 == _0x27b42f)\n                    _0x26f2cf++;\n                for (var _0x187067 = _0x4aeaee; _0x187067 <= 0xb5; _0x187067++) {\n                    var _0x165b1d = _0x5b3bc9 + _0x187067 * _0x187067;\n                    if (_0x27b42f < _0x165b1d)\n                        break;\n                    if (_0x165b1d == _0x27b42f)\n                        _0x26f2cf++;\n                }\n            }\n        }\n    }\n    console['log'](_0x26f2cf);\n});", "test_cases": [["1\n25\n2003\n211\n20007\n0", "1\n3\n48\n7\n738"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\narr.some(function(v){\n   if(v==0)return true;\n   var cnt=0;\n   for(var a=1;a<=181;a++){\n      var A=a*a;\n      if(v<A)break;\n      if(A==v)cnt++;\n      for(var b=a;b<=181;b++){\n         var B=A+b*b;\n         if(v<B)break;\n         if(B==v)cnt++;\n         for(var c=b;c<=181;c++){\n            var C=B+c*c;\n            if(v<C)break;\n            if(C==v)cnt++;\n            for(var d=c;d<=181;d++){\n               var D=C+d*d;\n               if(v<D)break;\n               if(D==v)cnt++;\n   }}}}\n   console.log(cnt);\n});", "language": "JavaScript"}
{"filename": "p00836_1", "type": "JavaScript", "obfuscated": "function prime(_0x5b8b3d) {\n    var _0x269a0f = [];\n    for (var _0x46e435 = 0x0; _0x46e435 <= _0x5b8b3d; _0x46e435++)\n        _0x269a0f[_0x46e435] = _0x46e435;\n    _0x269a0f[0x0] = ![];\n    _0x269a0f[0x1] = ![];\n    var _0x5b8f0b = Math['floor'](Math['sqrt'](_0x5b8b3d));\n    for (var _0x46e435 = 0x2; _0x46e435 <= _0x5b8f0b; _0x46e435++) {\n        if (_0x269a0f[_0x46e435] == ![])\n            continue;\n        for (var _0x37b273 = _0x46e435 + _0x46e435; _0x37b273 <= _0x5b8b3d; _0x37b273 += _0x46e435) {\n            _0x269a0f[_0x37b273] = ![];\n        }\n    }\n    var _0x3d7b83 = [];\n    for (var _0x46e435 = 0x0; _0x46e435 <= _0x5b8b3d; _0x46e435++) {\n        if (_0x269a0f[_0x46e435] !== ![])\n            _0x3d7b83['push'](_0x269a0f[_0x46e435]);\n    }\n    return _0x3d7b83;\n}\nvar p = prime(0x2710);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar cnt = [];\nfor (var i = 0x0; i <= 0x2710; i++)\n    cnt[i] = 0x0;\np['forEach'](function (_0x2f3f9c, _0x4fefd6) {\n    cnt[_0x2f3f9c]++;\n    for (var _0x3ff8d3 = _0x4fefd6 + 0x1; _0x3ff8d3 < p['length']; _0x3ff8d3++) {\n        _0x2f3f9c += p[_0x3ff8d3];\n        if (_0x2f3f9c > 0x2710)\n            break;\n        cnt[_0x2f3f9c]++;\n    }\n});\narr['some'](function (_0x41bdd1) {\n    if (_0x41bdd1 == 0x0)\n        return !![];\n    console['log'](cnt[_0x41bdd1]);\n});", "test_cases": [["2\n3\n17\n41\n20\n666\n12\n53\n0", "1\n1\n2\n3\n0\n0\n1\n2"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n         for(var j=i+i;j<=max;j+=i){\n            arr[j]=false;\n         }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(10000);\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nvar cnt=[];\nfor(var i=0;i<=10000;i++)cnt[i]=0;\np.forEach(function(v,index){\n   cnt[v]++;\n   for(var i=index+1;i<p.length;i++){\n      v+=p[i];\n      if(v>10000)break;\n      cnt[v]++;\n   }\n});\narr.some(function(v){\n   if(v==0)return true;\n   console.log(cnt[v]);\n});", "language": "JavaScript"}
{"filename": "p00855_1", "type": "JavaScript", "obfuscated": "function prime(_0x9c0e05) {\n    var _0x4b6883 = [];\n    for (var _0x269a39 = 0x0; _0x269a39 <= _0x9c0e05; _0x269a39++)\n        _0x4b6883[_0x269a39] = _0x269a39;\n    _0x4b6883[0x0] = ![];\n    _0x4b6883[0x1] = ![];\n    var _0x253227 = Math['floor'](Math['sqrt'](_0x9c0e05));\n    for (var _0x269a39 = 0x2; _0x269a39 <= _0x253227; _0x269a39++) {\n        if (_0x4b6883[_0x269a39] == ![])\n            continue;\n        for (var _0x35a5fb = _0x269a39 + _0x269a39; _0x35a5fb <= _0x9c0e05; _0x35a5fb += _0x269a39) {\n            _0x4b6883[_0x35a5fb] = ![];\n        }\n    }\n    var _0x21cd77 = [];\n    for (var _0x269a39 = 0x0; _0x269a39 <= _0x9c0e05; _0x269a39++) {\n        if (_0x4b6883[_0x269a39] !== ![])\n            _0x21cd77['push'](_0x4b6883[_0x269a39]);\n    }\n    return _0x21cd77;\n}\nvar p = prime(0x13d4fd);\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a')['map'](Number);\nfor (var i = 0x0; i < Arr['length']; i++) {\n    var a = Arr[i];\n    if (a == 0x0)\n        break;\n    for (var j = 0x0; j < p['length']; j++) {\n        if (p[j] == a) {\n            console['log'](0x0);\n            break;\n        }\n        if (p[j] > a) {\n            console['log'](p[j] - p[j - 0x1]);\n            break;\n        }\n    }\n}", "test_cases": [["10\n11\n27\n2\n492170\n0", "4\n0\n6\n0\n114"]], "original": "function prime(max){\n   var arr=[];\n   for(var i=0;i<=max;i++)arr[i]=i;\n   arr[0]=false;\n   arr[1]=false;\n   var sqrt=Math.floor(Math.sqrt(max));\n   for(var i=2;i<=sqrt;i++){\n      if(arr[i]==false)continue;\n      for(var j=i+i;j<=max;j+=i){\n         arr[j]=false;\n      }\n   }\n   var result=[];\n   for(var i=0;i<=max;i++){\n      if(arr[i]!==false)result.push(arr[i]);\n   }\n   return result;\n}\nvar p=prime(1299709);\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\").map(Number);\nfor(var i=0;i<Arr.length;i++){\n   var a=Arr[i];\n   if(a==0)break;\n   for(var j=0;j<p.length;j++){\n      if(p[j]==a){console.log(0);break;}\n      if(p[j]>a){console.log(p[j]-p[j-1]);break;}\n   }\n}", "language": "JavaScript"}
{"filename": "p00874_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var wd = arr['shift']();\n    if (wd == '0\\x200')\n        break;\n    var W = arr['shift']()['split']('\\x20')['map'](Number);\n    var D = arr['shift']()['split']('\\x20')['map'](Number);\n    var sum = W['reduce'](function (_0x3260a6, _0x4ee66a) {\n        return _0x3260a6 + _0x4ee66a;\n    });\n    D['forEach'](function (_0x26b630) {\n        var _0x3cdb0e = W['indexOf'](_0x26b630);\n        if (_0x3cdb0e != -0x1)\n            W[_0x3cdb0e] = '';\n        else\n            sum += _0x26b630;\n    });\n    console['log'](sum);\n}", "test_cases": [["5 5\n1 2 3 4 5\n1 2 3 4 5\n5 5\n2 5 4 1 3\n4 1 5 3 2\n5 5\n1 2 3 4 5\n3 3 3 4 5\n3 3\n7 7 7\n7 7 7\n3 3\n4 4 4\n4 3 4\n4 3\n4 2 2 4\n4 2 1\n4 4\n2 8 8 8\n2 3 8 3\n10 10\n9 9 9 9 9 9 9 9 9 9\n9 9 9 9 9 9 9 9 9 9\n10 9\n20 1 20 20 20 20 20 18 20 20\n20 20 20 20 7 20 20 20 20\n0 0", "15\n15\n21\n21\n15\n13\n32\n90\n186"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wd=arr.shift();\n   if(wd==\"0 0\")break;\n   var W=arr.shift().split(\" \").map(Number);\n   var D=arr.shift().split(\" \").map(Number);\n   var sum=W.reduce(function(a,b){return a+b;});\n   D.forEach(function(v){\n      var index=W.indexOf(v);\n      if(index!=-1)W[index]=\"\";\n      else sum+=v;\n   });\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p00875_1", "type": "JavaScript", "obfuscated": "function BFS() {\n    var _0x52ecf6 = [[\n            s0,\n            0x0\n        ]];\n    while (!![]) {\n        if (_0x52ecf6['length'] == 0x0)\n            break;\n        var [_0x1cf017, _0x8e3e64] = _0x52ecf6['shift']();\n        if (_0x1cf017 == s1) {\n            flag = !![];\n            console['log'](_0x8e3e64);\n            break;\n        }\n        ab['forEach'](_0x1147f4 => {\n            if (_0x1cf017['includes'](_0x1147f4[0x0])) {\n                var _0x47ed1c = new RegExp(_0x1147f4[0x0], 'g');\n                var _0xdd344a = _0x1cf017['replace'](_0x47ed1c, _0x1147f4[0x1]);\n                if (_0xdd344a['length'] <= 0xa)\n                    _0x52ecf6['push']([\n                        _0xdd344a,\n                        _0x8e3e64 + 0x1\n                    ]);\n            }\n        });\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var ab = arr['slice'](0x0, n)['map'](_0x1aa120 => _0x1aa120['split']('\\x20'));\n    ;\n    arr = arr['slice'](n);\n    var s0 = arr['shift']();\n    var s1 = arr['shift']();\n    var flag = ![];\n    BFS();\n    if (!flag)\n        console['log'](-0x1);\n}", "test_cases": [["2\na bb\nb aa\na\nbbbbbbbb\n1\na aa\na\naaaaa\n3\nab aab\nabc aadc\nad dee\nabc\ndeeeeeeeec\n10\na abc\nb bai\nc acf\nd bed\ne abh\nf fag\ng abe\nh bag\ni aaj\nj bbb\na\nabacfaabe\n0", "3\n-1\n7\n4"]], "original": "function BFS(){\n   var bfs=[[s0,0]];\n   while(true){\n      if(bfs.length==0)break;\n      var [leaf,cnt]=bfs.shift();\n      if(leaf==s1){\n         flag=true;\n         console.log(cnt);\n         break;\n      }\n      ab.forEach(v=>{\n         if(leaf.includes(v[0])){\n            var re = new RegExp(v[0], \"g\");\n            var str = leaf.replace(re,v[1]);\n            if(str.length<=10)bfs.push([str,cnt+1]);\n         }\n      });\n   }\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ab=arr.slice(0,n).map(v=> v.split(\" \"));;\n   arr=arr.slice(n);\n   var s0=arr.shift();\n   var s1=arr.shift();\n   var flag=false;\n   BFS();\n   if(!flag)console.log(-1);\n}\n", "language": "JavaScript"}
{"filename": "p00914_1", "type": "JavaScript", "obfuscated": "function kumiawase(_0x279521, _0x1867fb, _0x4a03c1) {\n    var _0x45633a = [];\n    var _0xd476f0 = function (_0x1b6a86, _0x3dda99) {\n        if (_0x3dda99['length'] == _0x4a03c1)\n            _0x45633a['push'](_0x3dda99);\n        else {\n            for (var _0x5752f1 = _0x1b6a86; _0x5752f1 <= _0x1867fb; _0x5752f1++)\n                _0xd476f0(_0x5752f1 + 0x1, _0x3dda99['concat'](_0x5752f1));\n        }\n    };\n    _0xd476f0(_0x279521, []);\n    return _0x45633a;\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr['some'](function (_0x523307, _0x5392fc) {\n    if (_0x523307 == '0\\x200\\x200')\n        return !![];\n    var _0x36dacc = _0x523307['split']('\\x20')['map'](Number);\n    var _0x28c0dc = kumiawase(0x1, _0x36dacc[0x0], _0x36dacc[0x1]);\n    var _0x2b3027 = 0x0;\n    _0x28c0dc['forEach'](function (_0x22d9b5) {\n        var _0x1dd9df = _0x22d9b5['reduce'](function (_0x1ec100, _0x48d323) {\n            return _0x1ec100 + _0x48d323;\n        });\n        if (_0x1dd9df == _0x36dacc[0x2])\n            _0x2b3027++;\n    });\n    console['log'](_0x2b3027);\n});", "test_cases": [["9 3 23\n9 3 22\n10 3 28\n16 10 107\n20 8 102\n20 10 105\n20 10 155\n3 4 3\n4 2 11\n0 0 0", "1\n2\n0\n20\n1542\n5448\n1\n0\n0"]], "original": "function kumiawase(start,end,len){\n   var ans=[];\n   var loop=function(a,arr){\n      if(arr.length==len)ans.push(arr);\n      else{\n         for(var i=a;i<=end;i++)loop(i+1,arr.concat(i));\n      }\n   }\n   loop(start,[]);\n   return ans;\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\narr.some(function(v,i){\n   if(v==\"0 0 0\")return true;\n   var nks=v.split(\" \").map(Number);\n   var ary=kumiawase(1,nks[0],nks[1]);\n   var cnt=0;\n   ary.forEach(function(v){\n      var sum=v.reduce(function(a,b){return a+b;});\n      if(sum==nks[2])cnt++;\n   });\n   console.log(cnt);\n});", "language": "JavaScript"}
{"filename": "p00926_1", "type": "JavaScript", "obfuscated": "var n, m;\nvar x = [];\nfunction main() {\n    n = scan();\n    m = scan();\n    rep(n, function (_0x3f8622) {\n        x[_0x3f8622] = 0x0;\n    });\n    rep(m, function (_0x3c7524) {\n        var _0xed823f = scan();\n        var _0x41c15f = scan();\n        x[_0xed823f] += 0x1;\n        x[_0x41c15f] -= 0x1;\n    });\n    rep(0x1, n, function (_0x4f32e9) {\n        x[_0x4f32e9] += x[_0x4f32e9 - 0x1];\n    });\n    var _0x5cc420 = 0x0;\n    rep(n, function (_0x27d838) {\n        if (x[_0x27d838] > 0x0) {\n            ++_0x5cc420;\n        }\n    });\n    print(_0x5cc420 * 0x2 + n + 0x1);\n}\nfunction rep(_0xc443b4, _0xd3d3f5, _0x49b30e) {\n    if (_0x49b30e === undefined) {\n        _0x49b30e = _0xd3d3f5;\n        _0xd3d3f5 = _0xc443b4;\n        _0xc443b4 = 0x0;\n    }\n    for (var _0x21ab1b = _0xc443b4; _0x21ab1b < _0xd3d3f5; ++_0x21ab1b) {\n        if (_0x49b30e(_0x21ab1b) === ![]) {\n            break;\n        }\n    }\n}\nvar input = '';\nfunction scan() {\n    return +input['pop']();\n}\nfunction scan_string() {\n    return input['pop']();\n}\nfunction print(_0x56377f) {\n    console['log'](_0x56377f);\n}\nprocess['stdin']['resume']();\nprocess['stdin']['setEncoding']('utf8');\nprocess['stdin']['on']('data', function (_0x31ea21) {\n    input += _0x31ea21;\n});\nprocess['stdin']['on']('end', function () {\n    input = input['trim']()['split'](/\\s+/)['reverse']();\n    main();\n});", "test_cases": [["10 3\n3 7\n8 9\n2 5", "23"], ["10 3\n8 9\n6 7\n2 4", "19"], ["10 0", "11"], ["10 6\n6 7\n4 5\n2 5\n6 9\n3 5\n6 8", "23"], ["1000 8\n3 4\n6 1000\n5 1000\n7 1000\n8 1000\n4 1000\n9 1000\n1 2", "2997"]], "original": "var n, m;\nvar x = [];\n\nfunction main(){\n\tn = scan();\n\tm = scan();\n\trep(n, function(i){\n\t\tx[i] = 0;\n\t});\n\trep(m, function(i){\n\t\tvar c = scan();\n\t\tvar d = scan();\n\t\tx[c] += 1;\n\t\tx[d] -= 1;\n\t});\n\trep(1, n, function(i){\n\t\tx[i] += x[i - 1];\n\t});\n\tvar c = 0;\n\trep(n, function(i){\n\t\tif(x[i] > 0){\n\t\t\t++c;\n\t\t}\n\t});\n\tprint(c * 2 + n + 1);\n}\n\nfunction rep(a, b, c){\n\tif(c === undefined){\n\t\tc = b;\n\t\tb = a;\n\t\ta = 0;\n\t}\n\tfor(var i = a; i < b; ++i){\n\t\tif(c(i) === false){\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvar input = '';\n\nfunction scan(){\n\treturn +input.pop();\n}\nfunction scan_string(){\n\treturn input.pop();\n} \nfunction print(val){\n\tconsole.log(val);\n}\n \nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(chunk){\n\tinput += chunk;\n});\nprocess.stdin.on('end', function(){\n\tinput = input.trim().split(/\\s+/).reverse();\n\tmain();\n});", "language": "JavaScript"}
{"filename": "p00935_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['replace'](/\\n/g, '\\x20')['split']('\\x20');\nvar n = arr['shift']() - 0x0;\nvar a = [];\nfor (var i = 0x0; i < 0x2710; i++)\n    a[i] = ![];\nfor (var i = 0x0; i < n; i++) {\n    a[arr[i] - 0x0] = !![];\n    if (i + 0x1 < n)\n        a[arr[i] + arr[i + 0x1] - 0x0] = !![];\n    if (i + 0x2 < n)\n        a[arr[i] + arr[i + 0x1] + arr[i + 0x2] - 0x0] = !![];\n    if (i + 0x3 < n)\n        a[arr[i] + arr[i + 0x1] + arr[i + 0x2] + arr[i + 0x3] - 0x0] = !![];\n}\nfor (var i = 0x0; i < 0x2710; i++) {\n    if (a[i] == ![]) {\n        console['log'](i);\n        break;\n    }\n}", "test_cases": [["3\n3 0 1", "2"], ["11\n9 8 7 6 5 4 3 2 1 1 0", "12"], ["10\n9 0 8 7 6 5 4 3 2 1", "10"], ["100\n3 6 7 5 3 5 6 2 9 1 2 7 0 9 3 6 0 6 2\n6 1 8 7 9 2 0 2 3 7 5 9 2 2 8 9 7 3 6\n1 2 9 3 1 9 4 7 8 4 5 0 3 6 1 0 6 3 2\n0 6 1 5 5 4 7 6 5 6 9 3 7 4 5 2 5 4 7\n4 4 3 0 7 8 6 8 8 4 3 1 4 9 2 0 6 8 9\n2 6 6 4 9", "11"], ["100\n7 2 7 5 4 7 4 4 5 8 1 5 7 7 0 5 6 2 0\n4 3 4 1 1 0 6 1 6 6 2 1 7 9 2 4 6 9 3\n6 2 8 0 5 9 7 6 3 1 4 9 1 9 1 2 6 4 2\n9 7 8 3 9 5 5 2 3 3 8 4 0 6 8 2 5 5 0\n6 7 1 8 5 1 4 8 1 3 7 3 3 5 3 0 6 0 6\n5 3 2 2 2", "86"], ["1\n3", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().replace(/\\n/g, \" \").split(\" \");\nvar n = arr.shift() - 0;\nvar a = [];\nfor (var i = 0; i < 10000; i++) a[i] = false;\nfor (var i = 0; i < n; i++) {\n    a[arr[i] - 0] = true;\n    if (i + 1 < n) a[(arr[i] + arr[i + 1]) - 0] = true;\n    if (i + 2 < n) a[(arr[i] + arr[i + 1] + arr[i + 2]) - 0] = true;\n    if (i + 3 < n) a[(arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3]) - 0] = true;\n}\nfor (var i = 0; i < 10000; i++) {\n    if (a[i] == false) {\n        console.log(i);\n        break;\n    }\n}", "language": "JavaScript"}
{"filename": "p01048_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar n = input['trim']() - 0x0;\nvar ans = [\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0,\n    0x0\n];\nvar i = 0x0;\nwhile (!![]) {\n    i++;\n    var cnt = 0x0;\n    for (var j = i; j >= 0x1; j--) {\n        if (i % j == 0x0)\n            cnt++;\n    }\n    if (ans[cnt - 0x1] == 0x0) {\n        ans[cnt - 0x1] = i;\n        if (!ans['includes'](0x0))\n            break;\n    }\n}\nconsole['log'](ans[n - 0x1]);", "test_cases": [["1", "1"], ["2", "2"], ["3", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar n = input.trim() - 0;\nvar ans = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nvar i = 0;\nwhile (true) {\n   i++;\n   var cnt = 0;\n   for (var j = i; j >= 1; j--) {\n      if (i % j == 0) cnt++;\n   }\n   if (ans[cnt - 1] == 0) {\n      ans[cnt - 1] = i;\n      if (!ans.includes(0)) break;\n   }\n}\nconsole.log(ans[n-1]);\n", "language": "JavaScript"}
{"filename": "p01050_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar s = input['trim']();\nvar len = s['length'];\nvar abc = '0123456789AabcdefghijklmnopqrstuvwxyzA'['split']('');\nvar sum = 0x0;\nwhile (!![]) {\n    if (s == '')\n        break;\n    var cnt = 0x0;\n    var flag = ![];\n    abc['forEach'](_0x18682b => {\n        var _0xe4eb30 = new RegExp(_0x18682b);\n        if (_0xe4eb30['test'](s)) {\n            if (flag)\n                cnt++;\n            flag = !![];\n            s = s['replace'](_0xe4eb30, '');\n        } else {\n            if (cnt >= 0x3)\n                sum += cnt - 0x2;\n            cnt = 0x0;\n            flag = ![];\n        }\n    });\n}\nconsole['log'](len - sum);", "test_cases": [["0ig3he12fz99", "9"], ["1122334455", "6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim();\nvar len=s.length;\nvar abc=\"0123456789AabcdefghijklmnopqrstuvwxyzA\".split(\"\");\nvar sum=0;\nwhile(true){\n   if(s==\"\")break;\n   var cnt=0;\n   var flag=false;\n   abc.forEach(v=>{\n      var re = new RegExp( v );\n      if(re.test(s)){\n         if(flag)cnt++;\n         flag=true;\n         s=s.replace(re,\"\");\n      }else{\n         if(cnt>=3)sum+=cnt-2;\n         cnt=0;\n         flag=false;\n      }\n   });\n}\nconsole.log(len-sum);\n", "language": "JavaScript"}
{"filename": "p01086_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var Arr = arr['splice'](0x0, n);\n    Arr = Arr['map'](function (_0x5ed95b) {\n        return _0x5ed95b['length'];\n    });\n    for (var i = 0x0; i < Arr['length']; i++) {\n        var good = [\n            0x5,\n            0x7,\n            0x5,\n            0x7,\n            0x7\n        ];\n        var sum = 0x0;\n        for (var j = i; j < Arr['length']; j++) {\n            if (good['length'] == 0x0)\n                break;\n            sum += Arr[j];\n            if (good[0x0] > sum)\n                continue;\n            else if (good[0x0] < sum)\n                break;\n            else if (good[0x0] == sum) {\n                good['shift']();\n                sum = 0x0;\n            }\n        }\n        if (good['length'] == 0x0) {\n            console['log'](i + 0x1);\n            break;\n        }\n    }\n}", "test_cases": [["9\ndo\nthe\nbest\nand\nenjoy\ntoday\nat\nacm\nicpc\n14\noh\nyes\nby\nfar\nit\nis\nwow\nso\nbad\nto\nme\nyou\nknow\nhey\n15\nabcde\nfghijkl\nmnopq\nrstuvwx\nyzz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\nabcde\nfghijkl\nmnopq\nrstuvwx\nyz\n0", "1\n2\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   var n = arr.shift() - 0;\n   if (n == 0) break;\n   var Arr = arr.splice(0, n);\n   Arr = Arr.map(function(v) {\n      return v.length;\n   });\n   for (var i = 0; i < Arr.length; i++) {\n      var good = [5, 7, 5, 7, 7];\n      var sum = 0;\n      for (var j = i; j < Arr.length; j++) {\n         if (good.length == 0) break;\n         sum += Arr[j];\n         if (good[0] > sum) continue;\n         else if (good[0] < sum) break;\n         else if (good[0] == sum) {\n            good.shift();\n            sum = 0;\n         }\n      }\n      if (good.length == 0) {\n         console.log(i + 1);\n         break;\n      }\n   }\n}", "language": "JavaScript"}
{"filename": "p01094_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar ans = '';\nwhile (arr['shift']() != 0x0) {\n    var a = arr['shift']()['split']('\\x20');\n    var obj = {};\n    for (var i = 0x0; i < a['length']; i++) {\n        obj[a[i]] = obj[a[i]] + 0x1 || 0x1;\n        var s = [];\n        for (var k in obj)\n            s['push']([\n                obj[k],\n                k\n            ]);\n        s['sort'](function (_0x3a7ae2, _0x3beb1e) {\n            return _0x3beb1e[0x0] - _0x3a7ae2[0x0];\n        });\n        if (s['length'] == 0x1)\n            s[0x1] = [0x0];\n        if (s[0x0][0x0] > s[0x1][0x0] + a['length'] - (i + 0x1)) {\n            ans += s[0x0][0x1] + '\\x20' + (i + 0x1) + '\\x0a';\n            break;\n        }\n    }\n    if (i == a['length'])\n        ans += 'TIE' + '\\x0a';\n}\nconsole['log'](ans['trim']());", "test_cases": [["1\nA\n4\nA A B B\n5\nL M N L N\n6\nK K K K K K\n6\nX X X Y Z X\n10\nA A A B A C A C C B\n10\nU U U U U V V W W W\n0", "A 1\nTIE\nTIE\nK 4\nX 5\nA 7\nU 8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar ans = \"\";\nwhile (arr.shift() != 0) {\n   var a = arr.shift().split(\" \");\n   var obj = {};\n   for (var i = 0; i < a.length; i++) {\n      obj[a[i]] = obj[a[i]] + 1 || 1;\n      var s = [];\n      for (var k in obj) s.push([obj[k], k]);\n      s.sort(function(a, b) {\n         return b[0] - a[0];\n      });\n      if (s.length == 1) s[1] = [0];\n      if (s[0][0] > s[1][0] + a.length - (i + 1)) {\n         ans+=s[0][1]+\" \"+ (i + 1)+\"\\n\";\n         break;\n      }\n   }\n   if (i == a.length) ans+=\"TIE\"+\"\\n\";\n}\nconsole.log(ans.trim());", "language": "JavaScript"}
{"filename": "p01111_1", "type": "JavaScript", "obfuscated": "new Promise(function (_0x119ef2, _0x43e7c8) {\n    let _0x533197 = '';\n    process['stdin']['on']('data', _0x591f3a => {\n        _0x533197 += _0x591f3a;\n    })['on']('end', () => {\n        _0x119ef2([\n            _0x533197,\n            process['stdout']\n        ]);\n    });\n})['then'](function ([_0x2fac86, _0x2e215f]) {\n    for (const _0x2bc473 of _0x2fac86['split'](/[ \\n]/)['map'](_0x1884e4 => parseInt(_0x1884e4))) {\n        if (_0x2bc473 === 0x0) {\n            break;\n        }\n        let _0x3901e3 = '\\x0a';\n        for (let _0x1afd8 = 0x1; _0x1afd8 * (_0x1afd8 - 0x1) < 0x2 * _0x2bc473; ++_0x1afd8) {\n            const _0x3388e0 = 0x2 * _0x2bc473 - _0x1afd8 * (_0x1afd8 - 0x1);\n            if (_0x3388e0 % (0x2 * _0x1afd8) === 0x0) {\n                _0x3901e3 = _0x3388e0 / (0x2 * _0x1afd8) + '\\x20' + _0x1afd8 + '\\x0a';\n            }\n        }\n        _0x2e215f['write'](_0x3901e3);\n    }\n});", "test_cases": [["15\n16\n2\n3\n9699690\n223092870\n847288609\n900660121\n987698769\n999999999\n0", "1 5\n16 1\n2 1\n1 2\n16 4389\n129 20995\n4112949 206\n15006 30011\n46887 17718\n163837 5994"]], "original": "new Promise(function(resolve, reject) {\n    let cin = \"\";\n    process.stdin\n        .on(\"data\", chunk => { cin += chunk; })\n        .on(\"end\", () => { resolve([cin, process.stdout]); });\n}).then(function([cin, cout]) {\n    for (const b of cin.split(/[ \\n]/).map(elt => parseInt(elt))) {\n        if (b === 0) {\n            break ;\n        }\n        let opt = \"\\n\";\n        for (let m = 1; m * (m - 1) < 2 * b; ++m) {\n            const det = 2 * b - m * (m - 1);\n            if (det % (2 * m) === 0) {\n                opt = `${det / (2 * m)} ${m}\\n`;\n            }\n        }\n        cout.write(opt);\n    }\n});\n\n", "language": "JavaScript"}
{"filename": "p01117_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var [n, m] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (n == 0x0 && m == 0x0)\n        break;\n    var h = [];\n    for (var i = 0x0; i < n; i++)\n        h[i] = 0x0;\n    for (var i = 0x0; i < m; i++) {\n        var p = arr['shift']()['split']('\\x20')['map'](Number);\n        h = p['map']((_0x4c976a, _0x38118e) => h[_0x38118e] + _0x4c976a);\n    }\n    console['log'](Math['max'](...h));\n}", "test_cases": [["5 2\n10 20 30 40 50\n15 25 35 45 55\n6 3\n10 20 30 15 25 35\n21 34 11 52 20 18\n31 15 42 10 21 19\n4 2\n0 0 0 0\n0 0 0 0\n0 0", "105\n83\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,m]=arr.shift().split(\" \").map(Number);\n   if(n==0 && m==0)break;\n   var h=[];\n   for(var i=0;i<n;i++)h[i]=0;\n   for(var i=0;i<m;i++){\n      var p=arr.shift().split(\" \").map(Number);\n      h=p.map((v,i)=>h[i]+v);\n   }\n   console.log(Math.max(...h));\n}\n", "language": "JavaScript"}
{"filename": "p01118_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var [h, w] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (h == 0x0 && w == 0x0)\n        break;\n    var k = {};\n    for (var i = 0x0; i < h; i++) {\n        var r = arr['shift']()['split']('');\n        for (var j = 0x0; j < w; j++) {\n            k[r[j]] = [\n                i,\n                j\n            ];\n        }\n    }\n    var [s, sum, y, x] = [\n        arr['shift']()['split'](''),\n        0x0,\n        0x0,\n        0x0\n    ];\n    s['forEach'](_0x5d9242 => {\n        sum += Math['abs'](y - k[_0x5d9242][0x0]) + Math['abs'](x - k[_0x5d9242][0x1]) + 0x1;\n        [y, x] = [\n            k[_0x5d9242][0x0],\n            k[_0x5d9242][0x1]\n        ];\n    });\n    console['log'](sum);\n}", "test_cases": [["3 9\nABCDEFGHI\nJKLMNOPQR\nSTUVWXYZ_\nICPC\n5 11\n___________\n____A______\n________M__\n___________\n_C_________\nACM\n4 21\n1_2_3_4_5_6_7_8_9_0_-\nQqWwEeRrTtYyUuIiOoPp@\nAaSsDdFfGgHhJjKkLl;_:\nZzXxCcVvBbNnMm,_._/__\nICPC2019,AsiaYokohamaRegional,QualificationRound\n0 0", "28\n23\n493"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [h,w]=arr.shift().split(\" \").map(Number);\n   if(h==0 && w==0)break;\n   var k={};\n   for(var i=0;i<h;i++){\n      var r=arr.shift().split(\"\");\n      for(var j=0;j<w;j++){\n         k[r[j]]=[i,j];\n      }\n   }\n   var [s,sum,y,x]=[arr.shift().split(\"\"),0,0,0];\n   s.forEach(v=>{\n      sum+=Math.abs(y-k[v][0])+Math.abs(x- k[v][1])+1;\n      [y,x]=[k[v][0],k[v][1]];\n   });\n   console.log(sum);\n}\n", "language": "JavaScript"}
{"filename": "p01136_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var ary = arr['slice'](0x0, n);\n    ary = ary['map'](_0x45d72b => _0x45d72b['split']('\\x20')['map'](Number)['slice'](0x1));\n    var flag = !![];\n    var h = [];\n    for (var i = 0x0; i < n; i++)\n        h['push']([i]);\n    for (var i = 0x1; i <= 0x1e; i++) {\n        var a = [];\n        ary['forEach']((_0x492c4e, _0x3a49e9) => {\n            if (_0x492c4e['includes'](i))\n                a['push'](_0x3a49e9);\n        });\n        var b = [];\n        a['forEach'](_0x18ad87 => b['push'](...h[_0x18ad87]));\n        b = b['filter']((_0x25bac2, _0x33cdd4, _0xc19bc7) => _0xc19bc7['indexOf'](_0x25bac2) == _0x33cdd4);\n        if (b['length'] == n) {\n            flag = ![];\n            console['log'](i);\n            break;\n        }\n        a['forEach'](_0x14dc75 => h[_0x14dc75] = b);\n    }\n    if (flag)\n        console['log'](-0x1);\n    arr = arr['slice'](n);\n}", "test_cases": [["4\n1 1\n2 2 3\n2 1 2\n3 3 4 5\n0", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var ary=arr.slice(0,n);\n   ary=ary.map(v=> v.split(\" \").map(Number).slice(1));\n   var flag=true;\n   var h=[];\n   for(var i=0;i<n;i++)h.push([i]);\n   for(var i=1;i<=30;i++){\n      var a=[];\n      ary.forEach((v,j)=>{\n         if(v.includes(i))a.push(j);\n      });\n      var b=[];\n      a.forEach(v=>b.push(...h[v]));\n      b= b.filter((x, i, self) => self.indexOf(x) == i);\n      if(b.length==n){\n         flag=false;\n         console.log(i);\n         break;\n      }\n      a.forEach(v=> h[v]=b);\n   }\n   if(flag)console.log(-1);\n   arr=arr.slice(n);\n}\n", "language": "JavaScript"}
{"filename": "p01139_1", "type": "JavaScript", "obfuscated": "function bomb(_0x267c5a, _0x59bb85) {\n    cnt++;\n    var _0x2e5e59 = [\n        0x0,\n        -0x1,\n        0x1,\n        0x0\n    ];\n    var _0xfabd3a = [\n        -0x1,\n        0x0,\n        0x0,\n        0x1\n    ];\n    for (var _0x63d00d = 0x0; _0x63d00d < 0x4; _0x63d00d++) {\n        var _0xe53c64 = _0x59bb85 + _0x2e5e59[_0x63d00d];\n        var _0x247ab0 = _0x267c5a + _0xfabd3a[_0x63d00d];\n        if (_0x247ab0 >= h || _0x247ab0 < 0x0 || _0xe53c64 >= w || _0xe53c64 < 0x0)\n            continue;\n        if (yx[_0x247ab0][_0xe53c64] == 'S')\n            continue;\n        else if (yx[_0x247ab0][_0xe53c64] == '.') {\n            yx[_0x247ab0][_0xe53c64] = 'S';\n            bomb(_0x247ab0, _0xe53c64);\n        } else {\n            if (color == '' || color == yx[_0x247ab0][_0xe53c64])\n                color = yx[_0x247ab0][_0xe53c64];\n            else\n                color = 'bad';\n        }\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var wh = arr['shift']();\n    if (wh == '0\\x200')\n        break;\n    wh = wh['split']('\\x20')['map'](Number);\n    var w = wh[0x0];\n    var h = wh[0x1];\n    var yx = [];\n    for (var i = 0x0; i < h; i++)\n        yx['push'](arr['shift']()['split'](''));\n    var ans = [\n        0x0,\n        0x0\n    ];\n    for (var y = 0x0; y < h; y++) {\n        for (var x = 0x0; x < w; x++) {\n            var color = '';\n            var cnt = 0x0;\n            if (yx[y][x] == '.') {\n                yx[y][x] = 'S';\n                bomb(y, x);\n            }\n            if (color == 'B')\n                ans[0x0] += cnt;\n            else if (color == 'W')\n                ans[0x1] += cnt;\n        }\n    }\n    console['log'](ans[0x0] + '\\x20' + ans[0x1]);\n}", "test_cases": [["10 10\n.....W....\n....W.W...\n...W...W..\n....W...W.\n.....W...W\n......W.W.\nBBB....W..\n..B..BBBBB\n..B..B....\n..B..B..W.\n5 3\n...B.\n...BB\n.....\n1 1\n.\n0 0", "6 21\n12 0\n0 0"]], "original": "function bomb(y,x){\n   cnt++;\n   var dx=[0,-1,1,0];\n   var dy=[-1,0,0,1];\n   for(var i=0;i<4;i++){\n      var X=x+dx[i];\n      var Y=y+dy[i];\n      if(Y>=h || Y<0 || X>=w || X<0)continue;\n      if(yx[Y][X]==\"S\")continue;\n      else if(yx[Y][X]==\".\"){yx[Y][X]=\"S\";bomb(Y,X);}\n      else {\n         if(color==\"\" || color==yx[Y][X])color=yx[Y][X];\n         else color=\"bad\";\n      }\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var wh=arr.shift();\n   if(wh==\"0 0\")break;\n   wh=wh.split(\" \").map(Number);\n   var w=wh[0];\n   var h=wh[1];\n   var yx=[];\n   for(var i=0;i<h;i++)yx.push(arr.shift().split(\"\"));\n   var ans=[0,0];\n   for(var y=0;y<h;y++){\n      for(var x=0;x<w;x++){\n         var color=\"\";\n         var cnt=0;\n         if(yx[y][x]==\".\"){yx[y][x]=\"S\";bomb(y,x);}\n         if(color==\"B\")ans[0]+=cnt;\n         else if(color==\"W\")ans[1]+=cnt;\n      }\n   }\n   console.log(ans[0]+\" \"+ans[1]);\n}", "language": "JavaScript"}
{"filename": "p01144_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = Arr['shift']()['split']('\\x20')['map'](Number);\n    if (nm[0x0] == 0x0 && nm[0x1] == 0x0)\n        break;\n    var M = nm[0x1];\n    var DP = [];\n    for (var i = 0x0; i < nm[0x0]; i++) {\n        var dp = Arr['shift']()['split']('\\x20')['map'](Number);\n        DP['push'](dp);\n    }\n    DP['sort'](function (_0x2c5125, _0x5d7068) {\n        return _0x5d7068[0x1] - _0x2c5125[0x1];\n    });\n    var sum = 0x0;\n    DP['forEach'](function (_0x4954a9) {\n        var _0x47de3f = _0x4954a9[0x0];\n        var _0x5d52bc = _0x4954a9[0x1];\n        while (!![]) {\n            if (M == 0x0 || _0x47de3f == 0x0)\n                break;\n            M--;\n            _0x47de3f--;\n        }\n        sum += _0x47de3f * _0x5d52bc;\n    });\n    console['log'](sum);\n}", "test_cases": [["2 8\n5 6\n4 5\n3 1\n5 10\n5 10\n5 10\n0 0", "5\n140"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=(Arr.shift()).split(\" \").map(Number);\n   if(nm[0]==0 && nm[1]==0)break;\n   var M=nm[1];\n   var DP=[];\n   for(var i=0;i<nm[0];i++){\n      var dp=(Arr.shift()).split(\" \").map(Number);\n      DP.push(dp);\n   }\n   DP.sort(function(a,b){return b[1]-a[1]});\n   var sum=0;\n   DP.forEach(function(v){\n      var d=v[0];\n      var p=v[1];\n      while(true){\n         if(M==0 || d==0)break;\n         M--;\n         d--;\n      }\n      sum+=d*p;\n   });\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p01149_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['replace'](/T|J|Q|K/g, '10');\ninput = input['replace'](/A/g, '11');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nwhile (n--) {\n    var a = arr['shift']()['split']('\\x20')['map'](Number);\n    var b = arr['shift']()['split']('\\x20')['map'](Number);\n    var flag = ![];\n    var sum = a[0x0] + a[0x1];\n    if (a[0x0] == 0xb || a[0x1] == 0xb)\n        flag = !![];\n    if (sum == 0x15) {\n        console['log']('blackjack');\n        continue;\n    }\n    var ans = '';\n    for (var i = 0x0; i < b['length']; i++) {\n        if (sum <= 0x10) {\n            if (b[i] == 0xb)\n                flag = !![];\n            if (b[i] == 0xb && sum + 0xb > 0x15)\n                b[i] = 0x1;\n            sum += b[i];\n        } else if (sum == 0x11 && flag) {\n            if (b[i] == 0xb)\n                flag = !![];\n            if (b[i] == 0xb && sum + 0xb > 0x15)\n                b[i] = 0x1;\n            sum += b[i];\n        } else {\n            break;\n        }\n    }\n    if (sum > 0x15)\n        sum = 'bust';\n    console['log'](sum);\n}", "test_cases": [["4\n5 4\n9 2 8 3 7 4 6 5\nA J\nK Q J T 9 8 7 6\nT 4\n7 J A 6 Q T K 7\n2 2\n2 3 4 K 2 3 4 K", "18\nblackjack\n21\nbust"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput=input.replace(/T|J|Q|K/g,\"10\");\ninput=input.replace(/A/g,\"11\");\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nwhile(n--){\n   var a=arr.shift().split(\" \").map(Number);\n   var b=arr.shift().split(\" \").map(Number);\n   var flag=false;\n   var sum=a[0]+a[1];\n   if(a[0]==11 || a[1]==11)flag=true;\n   if(sum==21){console.log(\"blackjack\");continue;}\n   var ans=\"\";\n   for(var i=0;i<b.length;i++){\n      if(sum<=16){\n         if(b[i]==11)flag=true;\n         if(b[i]==11 && sum+11>21)b[i]=1;\n         sum+=b[i];\n      }else if(sum==17 && flag){\n         if(b[i]==11)flag=true;\n         if(b[i]==11 && sum+11>21)b[i]=1;\n         sum+=b[i];\n      }else {\n         break;\n      }\n   }\n   if(sum>21)sum=\"bust\";\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p01155_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var ab = arr['shift']()['split']('\\x20')['map'](Number);\n    if (ab['join']('\\x20') == '0\\x200')\n        break;\n    var a = ab[0x0];\n    var b = ab[0x1];\n    var A = [];\n    var B = [];\n    for (i = 0x1; i <= Math['sqrt'](a); i++) {\n        if (a % i == 0x0)\n            A['push']([\n                a / i,\n                i\n            ]);\n    }\n    for (i = 0x1; i <= Math['sqrt'](b); i++) {\n        if (b % i == 0x0)\n            B['push']([\n                b / i,\n                i\n            ]);\n    }\n    var min = Infinity;\n    A['forEach'](function (_0xf6c1e8) {\n        B['forEach'](function (_0x5eaaca) {\n            var _0x4cc40f = [\n                _0xf6c1e8[0x0],\n                _0xf6c1e8[0x1],\n                _0x5eaaca[0x0],\n                _0x5eaaca[0x1]\n            ];\n            _0x4cc40f['sort'](function (_0x45584, _0x46b798) {\n                return _0x45584 - _0x46b798;\n            });\n            min = Math['min'](min, Math['pow'](_0x4cc40f[0x0] - _0x4cc40f[0x1], 0x2) + Math['pow'](_0x4cc40f[0x1] - _0x4cc40f[0x2], 0x2) + Math['pow'](_0x4cc40f[0x2] - _0x4cc40f[0x3], 0x2));\n        });\n    });\n    console['log'](min);\n}", "test_cases": [["33 40\n57 144\n0 0", "22\n94"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var ab=arr.shift().split(\" \").map(Number);\n   if(ab.join(\" \")==\"0 0\")break;\n   var a=ab[0];\n   var b=ab[1];\n   var A=[];\n   var B=[];\n   for(i=1;i<=Math.sqrt(a);i++){\n      if(a%i==0)A.push([a/i,i]);\n   }\n   for(i=1;i<=Math.sqrt(b);i++){\n      if(b%i==0)B.push([b/i,i]);\n   }\n   var min=Infinity;\n   A.forEach(function(va){\n      B.forEach(function(vb){\n         var c=[va[0],va[1],vb[0],vb[1]];\n         c.sort(function(a,b){return a-b;});\n         min=Math.min(min,Math.pow(c[0]-c[1],2)+Math.pow(c[1]-c[2],2)+Math.pow(c[2]-c[3],2));\n      });\n   });\n   console.log(min);\n}", "language": "JavaScript"}
{"filename": "p01223_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar t = Arr['shift']() - 0x0;\nfor (var i = 0x0; i < t; i++) {\n    var n = Arr['shift']() - 0x0;\n    var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n    var max = 0x0;\n    var min = 0x0;\n    var m = arr[0x0];\n    for (var j = 0x1; j < n; j++) {\n        max = Math['max'](arr[j] - m, max);\n        min = Math['min'](arr[j] - m, min);\n        m = arr[j];\n    }\n    console['log'](max + '\\x20' + Math['abs'](min));\n}", "test_cases": [["5\n5\n10 70 30 50 90\n2\n20 100\n2\n100 30\n3\n50 50 50\n7\n123 45 678 901 234 567 890", "60 40\n80 0\n0 70\n0 0\n633 667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar t=Arr.shift()-0;\nfor(var i=0;i<t;i++){\n   var n=Arr.shift()-0;\n   var arr=(Arr.shift()).split(\" \").map(Number);\n   var max=0;\n   var min=0;\n   var m=arr[0];\n   for(var j=1;j<n;j++){\n      max=Math.max(arr[j]-m,max);\n      min=Math.min(arr[j]-m,min);\n      m=arr[j];\n   }\n   console.log(max+\" \"+Math.abs(min));\n}", "language": "JavaScript"}
{"filename": "p01224_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var sum = n != 0x1 ? 0x1 : 0x0;\n    var sqrt = Math['sqrt'](n);\n    for (var i = 0x2; i < sqrt; i++) {\n        if (n % i == 0x0)\n            sum += i + n / i;\n    }\n    if (n % sqrt == 0x0 && sqrt != 0x1)\n        sum += sqrt;\n    var ans;\n    if (n == sum)\n        ans = 'perfect\\x20number';\n    else if (n > sum)\n        ans = 'deficient\\x20number';\n    else if (n < sum)\n        ans = 'abundant\\x20number';\n    console['log'](ans);\n}", "test_cases": [["1\n2\n3\n4\n6\n12\n16\n28\n33550336\n99999998\n99999999\n100000000\n0", "deficient number\ndeficient number\ndeficient number\ndeficient number\nperfect number\nabundant number\ndeficient number\nperfect number\nperfect number\ndeficient number\ndeficient number\nabundant number"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var sum=(n!=1)?1:0;\n   var sqrt=Math.sqrt(n);\n   for(var i=2;i<sqrt;i++){\n      if(n%i==0)sum+=i+n/i;\n   }\n   if(n%sqrt==0 && sqrt!=1)sum+=sqrt;\n   var ans;\n   if(n==sum)ans=\"perfect number\";\n   else if(n>sum)ans=\"deficient number\";\n   else if(n<sum)ans=\"abundant number\";\n   console.log(ans);\n}", "language": "JavaScript"}
{"filename": "p01294_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var [n, d] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (n == 0x0 && d == 0x0)\n        break;\n    var S = [];\n    var C = [];\n    for (var i = 0x0; i < n; i++) {\n        var mc = arr[i]['split']('\\x20');\n        mc['shift']();\n        var c = mc['map'](Number)['reverse']();\n        var sum = c['length'] != 0x0 ? c['reduce']((_0x1aa541, _0x200b2f) => _0x1aa541 + _0x200b2f) : 0x0;\n        S[i] = sum;\n        C[i] = c;\n    }\n    while (!![]) {\n        var f = ![];\n        for (var i = 0x0; i < S['length']; i++) {\n            if (S[i] == 0x0)\n                continue;\n            S[i] -= C[i][0x0];\n            if (Math['max'](...S) - Math['min'](...S) <= d) {\n                C[i]['shift']();\n                f = !![];\n                break;\n            } else {\n                S[i] += C[i][0x0];\n            }\n        }\n        if (f == ![])\n            break;\n    }\n    var sum = S['reduce']((_0x109b6e, _0x1adbbb) => _0x109b6e + _0x1adbbb);\n    if (sum == 0x0)\n        console['log']('Yes');\n    else\n        console['log']('No');\n    arr = arr['slice'](n);\n}", "test_cases": [["3 3\n3 4 1 1\n2 1 5\n2 3 3\n3 3\n3 2 3 1\n2 1 5\n2 3 3\n0 0", "Yes\nNo"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,d]=arr.shift().split(\" \").map(Number);\n   if(n==0 && d==0)break;\n   var S=[];\n   var C=[];\n   for(var i=0;i<n;i++){\n      var mc=arr[i].split(\" \");\n      mc.shift();\n      var c=mc.map(Number).reverse();\n      var sum= (c.length!=0)?c.reduce((a,b)=> a+b):0;\n      S[i]=sum;\n      C[i]=c;\n   }\n   while(true){ \n      var f=false;\n      for(var i=0;i<S.length;i++){\n         if(S[i]==0)continue;\n         S[i] -= C[i][0];\n         if(Math.max(...S) - Math.min(...S) <=d){\n            C[i].shift();\n            f=true;\n            break;\n         }else{\n            S[i] +=C[i][0];\n         }\n      }\n      if(f==false)break;\n   }\n   var sum=S.reduce((a,b)=> a+b);\n   if(sum==0)console.log(\"Yes\");\n   else console.log(\"No\");\n   arr=arr.slice(n);\n}\n", "language": "JavaScript"}
{"filename": "p01303_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['replace'](/\\n$/, '')['split']('\\x0a');\nvar N = Arr['shift']() - 0x0;\nfor (var I = 0x0; I < N; I++) {\n    var xywh = Arr['shift']()['split']('\\x20')['map'](Number);\n    var x1 = xywh[0x0];\n    var x2 = xywh[0x0] + xywh[0x2];\n    var y1 = xywh[0x1];\n    var y2 = xywh[0x1] + xywh[0x3];\n    var n = Arr['shift']() - 0x0;\n    var cnt = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var XY = Arr['shift']()['split']('\\x20')['map'](Number);\n        var X = XY[0x0];\n        var Y = XY[0x1];\n        if (x1 <= X && x2 >= X && y1 <= Y && y2 >= Y)\n            cnt++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["2\n1 3 20 10\n4\n21 13\n1 15\n10 10\n25 10\n1 3 20 10\n4\n21 13\n1 15\n10 10\n25 10", "2\n2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.replace(/\\n$/,\"\")).split(\"\\n\");\nvar N=Arr.shift()-0;\nfor(var I=0;I<N;I++){\n   var xywh=(Arr.shift()).split(\" \").map(Number);\n   var x1=xywh[0];\n   var x2=xywh[0]+xywh[2];\n   var y1=xywh[1];\n   var y2=xywh[1]+xywh[3];\n   var n=Arr.shift()-0;\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      var XY=(Arr.shift()).split(\" \").map(Number);\n      var X=XY[0];\n      var Y=XY[1];\n      if(x1<=X && x2>=X && y1<=Y && y2>=Y)cnt++;\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p01315_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n === 0x0)\n        break;\n    var ans = [];\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20');\n        var name = arr['shift']();\n        arr = arr['map'](Number);\n        arr['unshift'](name);\n        (function (_0x146df2, _0x1959e2, _0x2ebaa9, _0x312c48, _0x11540e, _0x2c676f, _0x194dfc, _0x5c5d96, _0x49e57a, _0x43b168) {\n            var _0x5b42d0 = _0x2ebaa9 + _0x312c48 + _0x11540e + (_0x2c676f + _0x194dfc) * _0x43b168;\n            var _0x3b0da0 = _0x5c5d96 * _0x49e57a * _0x43b168 - _0x1959e2;\n            ans['push']([\n                _0x146df2,\n                _0x3b0da0 / _0x5b42d0\n            ]);\n        }['apply'](null, arr));\n    }\n    ans['sort'](function (_0x4ec84b, _0x5e8b4b) {\n        if (_0x4ec84b[0x1] == _0x5e8b4b[0x1])\n            return _0x4ec84b[0x0]['toString']() > _0x5e8b4b[0x0]['toString']() ? 0x1 : -0x1;\n        else\n            return _0x5e8b4b[0x1] - _0x4ec84b[0x1];\n    });\n    ans['forEach'](function (_0x49f128) {\n        console['log'](_0x49f128[0x0]);\n    });\n    console['log']('#');\n}", "test_cases": [["5\napple 1 1 1 1 1 1 1 10 1\nbanana 1 2 2 2 2 2 1 10 1\ncarrot 1 2 2 2 2 2 1 10 2\ndurian 1 3 3 3 3 3 1 10 1\neggplant 1 3 3 3 3 3 1 100 1\n4\nenoki 1 3 3 3 3 3 1 10 1\ntomato 1 3 3 3 3 3 1 10 1\npotato 1 3 3 3 3 3 1 10 1\nonion 1 3 3 3 3 3 1 10 1\n3\na 10 1 1 1 1 1 1 10 1\nb 10 2 2 2 2 2 2 10 1\nc 10 2 2 2 2 2 2 10 1\n0", "eggplant\napple\ncarrot\nbanana\ndurian\n#\nenoki\nonion\npotato\ntomato\n#\nb\nc\na\n#"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n===0)break;\n   var ans=[];\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var name=arr.shift();\n      arr=arr.map(Number);\n      arr.unshift(name);\n      (function(L, P, A, B, C, D, E, F, S, M){\n         var time=A+B+C+((D+E)*M);\n         var money=(F*S*M)-P;\n         ans.push([L,money/time]);\n      }).apply(null,arr);\n   }\n   ans.sort(function(a,b){\n      if(a[1]==b[1])return (a[0].toString()>b[0].toString())?1:-1;\n      else return b[1]-a[1];\n   });\n   ans.forEach(function(v){console.log(v[0]);});\n   console.log(\"#\");\n}", "language": "JavaScript"}
{"filename": "p01321_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var S = [];\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20')['map'](Number);\n        var sum = arr['reduce'](function (_0x3033c9, _0x2adf05) {\n            return _0x3033c9 + _0x2adf05;\n        });\n        S['push'](sum);\n    }\n    S['sort'](function (_0x2c1ab4, _0xdf942d) {\n        return _0xdf942d - _0x2c1ab4;\n    });\n    console['log'](S[0x0] + '\\x20' + S[S['length'] - 0x1]);\n}", "test_cases": [["3\n49 50 87 78 41\n27 61 100 45 84\n28 88 40 95 66\n2\n100 100 100 100 100\n0 0 0 0 0\n1\n89 90 85 93 82\n0", "317 305\n500 0\n439 439"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var S=[];\n   for(var i=0;i<n;i++){\n   var arr=(Arr.shift()).split(\" \").map(Number);\n      var sum=arr.reduce(function(a,b){return a+b;});\n      S.push(sum);\n   }\n   S.sort(function(a,b){return b-a;});\n   console.log(S[0]+\" \"+S[S.length-1]);\n}", "language": "JavaScript"}
{"filename": "p01322_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nm = Arr['shift']()['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    if (n == 0x0)\n        break;\n    var obj = {};\n    for (var i = 0x0; i < n; i++) {\n        var arr = Arr['shift']()['split']('\\x20');\n        var v = arr[0x0]['replace'](/\\*/g, '');\n        obj[v] = arr[0x1] - 0x0;\n    }\n    var sum = 0x0;\n    for (var i = 0x0; i < m; i++) {\n        var v = Arr['shift']();\n        for (var k in obj) {\n            if (k == v['slice'](-0x1 * k['length']))\n                sum += obj[k];\n        }\n    }\n    console['log'](sum);\n}", "test_cases": [["3 3\n*******1 100\n******22 1000\n11111112 1000000\n01203291\n02382022\n11111111\n10 10\n****3228 149416\n****3992 198635\n****4286 77783\n****4843 225244\n***49835 231046\n***59393 379996\n*5763748 437345\n*6726222 58054\n*8117882 16375\n*9244339 537727\n77885716\n96726222\n26971031\n66652868\n89599648\n37772338\n64679621\n65479161\n92959393\n57855682\n0 0", "1200\n438050"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var nm=(Arr.shift()).split(\" \").map(Number);\n   var n=nm[0];\n   var m=nm[1];\n   if(n==0)break;\n   var obj={};\n   for(var i=0;i<n;i++){\n      var arr=(Arr.shift()).split(\" \");\n      var v=arr[0].replace(/\\*/g,\"\");\n      obj[v]=arr[1]-0;\n   }\n   var sum=0;\n   for(var i=0;i<m;i++){\n      var v=Arr.shift();\n      for(var k in obj){\n         if(k==v.slice(-1*k.length))sum+=obj[k];\n      }\n   }\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p01333_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var ab = Arr['shift']()['split']('\\x20');\n    ;\n    if (ab[0x0] == 0x0 && ab[0x1] == 0x0)\n        break;\n    var m = ab[0x1] - ab[0x0];\n    var arr = [\n        0x0,\n        0x0,\n        0x0\n    ];\n    while (m >= 0x3e8) {\n        m -= 0x3e8;\n        arr[0x2]++;\n    }\n    while (m >= 0x1f4) {\n        m -= 0x1f4;\n        arr[0x1]++;\n    }\n    while (m >= 0x64) {\n        m -= 0x64;\n        arr[0x0]++;\n    }\n    console['log'](arr['join']('\\x20'));\n}", "test_cases": [["500 1000\n100 10000\n400 700\n600 5000\n10000 10000\n0 0", "0 1 0\n4 1 9\n3 0 0\n4 0 4\n0 0 0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var ab=(Arr.shift()).split(\" \");;\n   if(ab[0]==0 && ab[1]==0)break;\n   var m=ab[1]-ab[0];\n   var arr=[0,0,0];\n   while(m>=1000){\n      m-=1000;\n      arr[2]++;\n   }\n   while(m>=500){\n      m-=500;\n      arr[1]++;\n   }\n   while(m>=100){\n      m-=100;\n      arr[0]++;\n   }\n   console.log(arr.join(\" \"));\n}", "language": "JavaScript"}
{"filename": "p01334_1", "type": "JavaScript", "obfuscated": "function bomb(_0x302532, _0x130163) {\n    var _0x5cf629 = yx[_0x302532][_0x130163][0x1];\n    var _0x3363f4 = yx[_0x302532][_0x130163][0x0];\n    if (ring['hasOwnProperty'](_0x5cf629 + ',' + _0x3363f4)) {\n        var _0x2d1fb2 = !![];\n        for (var _0x4bb070 in ring) {\n            if (obj['hasOwnProperty'](_0x4bb070))\n                _0x2d1fb2 = ![];\n            obj[_0x4bb070] = !![];\n        }\n        if (_0x2d1fb2)\n            cnt++;\n    } else {\n        ring[_0x5cf629 + ',' + _0x3363f4] = !![];\n        bomb(_0x5cf629, _0x3363f4);\n    }\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var yx = [];\n    for (var i = 0x0; i < n; i++) {\n        var tile = arr['shift']()['split']('\\x20')['map'](Number);\n        var t = [];\n        for (var j = 0x0; j < n; j++)\n            t[j] = [\n                tile['shift'](),\n                tile['shift']()\n            ];\n        yx['push'](t);\n    }\n    var obj = {};\n    var cnt = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        for (var j = 0x0; j < n; j++) {\n            if (obj['hasOwnProperty'](i + ',' + j))\n                continue;\n            var ring = {};\n            ring[i + ',' + j] = !![];\n            bomb(i, j);\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["1\n0 0\n2\n1 1 0 1\n1 0 0 0\n2\n1 1 0 1\n1 1 1 0\n3\n0 1 2 2 2 1\n0 2 1 2 2 1\n0 0 0 1 1 1\n4\n3 2 2 0 3 2 2 1\n1 1 0 3 1 1 3 1\n0 3 2 3 3 0 2 3\n1 1 1 1 3 2 1 3\n0", "1\n2\n1\n2\n3"]], "original": "function bomb(y,x){\n   var Y=yx[y][x][1];\n   var X=yx[y][x][0];\n   if(ring.hasOwnProperty(Y+\",\"+X)){\n      var flag=true;\n      for(var k in ring){\n         if(obj.hasOwnProperty(k))flag=false;\n         obj[k]=true;     \n      } \n      if(flag)cnt++;\n   }else{\n      ring[Y+\",\"+X]=true;\n      bomb(Y,X);\n   }\n}\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var n=arr.shift()-0;\n   if(n==0)break;\n   var yx=[];\n   for(var i=0;i<n;i++){\n      var tile=arr.shift().split(\" \").map(Number);\n      var t=[];\n      for(var j=0;j<n;j++)t[j]=[tile.shift(),tile.shift()];\n      yx.push(t);\n   }\n   var obj={};\n   var cnt=0;\n   for(var i=0;i<n;i++){\n      for(var j=0;j<n;j++){\n         if(obj.hasOwnProperty(i+\",\"+j))continue;\n         var ring={};\n         ring[i+\",\"+j]=true;\n         bomb(i,j);\n      }\n   }\n   console.log(cnt);\n}", "language": "JavaScript"}
{"filename": "p01415_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar NKTUVL = Arr['shift']()['split']('\\x20')['map'](Number);\nvar N = NKTUVL[0x0];\nvar K = NKTUVL[0x1];\nvar T = NKTUVL[0x2];\nvar U = NKTUVL[0x3];\nvar V = NKTUVL[0x4];\nvar L = NKTUVL[0x5];\nvar time = 0x0;\nvar obj = {};\nfor (var i = 0x0; i < N; i++)\n    obj[Arr['shift']() - 0x0] = !![];\nvar fast = 0x0;\nvar stock = 0x0;\nfor (var i = 0x0; i < L; i++) {\n    var now = obj['hasOwnProperty'](i) ? !![] : ![];\n    if (fast == 0x0 && now == !![]) {\n        time += 0x1 / V;\n        fast = T * V - 0x1;\n        continue;\n    }\n    if (fast == 0x0 && now == ![] && stock == 0x0) {\n        time += 0x1 / U;\n        continue;\n    }\n    if (fast == 0x0 && now == ![] && stock > 0x0) {\n        time += 0x1 / V;\n        fast = T * V - 0x1;\n        stock--;\n        continue;\n    }\n    if (fast > 0x0 && now == ![]) {\n        time += 0x1 / V;\n        fast--;\n        continue;\n    }\n    if (fast > 0x0 && now == !![] && stock + 0x1 <= K) {\n        time += 0x1 / V;\n        fast--;\n        stock++;\n        continue;\n    }\n    if (fast > 0x0 && now == !![] && stock + 0x1 > K) {\n        time += 0x1 / V;\n        fast = T * V - 0x1;\n        continue;\n    }\n}\nconsole['log'](time['toFixed'](0x9));", "test_cases": [["1 1 1 2 3 100\n50", "49.500000000"], ["3 1 1 2 3 100\n49\n50\n51", "48.666666667"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar NKTUVL=(Arr.shift()).split(\" \").map(Number);\nvar N=NKTUVL[0];\nvar K=NKTUVL[1];\nvar T=NKTUVL[2];\nvar U=NKTUVL[3];\nvar V=NKTUVL[4];\nvar L=NKTUVL[5];\nvar time=0;\nvar obj={};\nfor(var i=0;i<N;i++)obj[Arr.shift()-0]=true;\nvar fast=0;\nvar stock=0;\nfor(var i=0;i<L;i++){\n   var now=(obj.hasOwnProperty(i))?true:false;\n   if(fast==0 && now==true){time+=1/V;fast=(T*V-1);continue;}\n   if(fast==0 && now==false && stock==0){time+=1/U;continue;}\n   if(fast==0 && now==false && stock>0){time+=1/V;fast=(T*V-1);stock--;continue;}\n   if(fast>0 && now==false){time+=1/V;fast--;continue;}\n   if(fast>0 && now==true && stock+1<=K){time+=1/V;fast--;stock++;continue;}\n   if(fast>0 && now==true && stock+1>K){time+=1/V;fast=(T*V-1);continue;}\n}\nconsole.log(time.toFixed(9));", "language": "JavaScript"}
{"filename": "p01531_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('');\nvar x = '';\narr['forEach'](function (_0x29a415) {\n    if (_0x29a415 == '0')\n        x += 'w';\n    if (_0x29a415 == '1')\n        x += '';\n    if (_0x29a415 == '2')\n        x += 'k';\n    if (_0x29a415 == '3')\n        x += 's';\n    if (_0x29a415 == '4')\n        x += 't';\n    if (_0x29a415 == '5')\n        x += 'n';\n    if (_0x29a415 == '6')\n        x += 'h';\n    if (_0x29a415 == '7')\n        x += 'm';\n    if (_0x29a415 == '8')\n        x += 'y';\n    if (_0x29a415 == '9')\n        x += 'r';\n    if (_0x29a415 == 'T')\n        x += 'a';\n    if (_0x29a415 == 'L')\n        x += 'i';\n    if (_0x29a415 == 'U')\n        x += 'u';\n    if (_0x29a415 == 'R')\n        x += 'e';\n    if (_0x29a415 == 'D')\n        x += 'o';\n});\nx = x['replace'](/wu/g, 'nn');\nconsole['log'](x);", "test_cases": [["5R2D", "neko"], ["8U9U6U0T", "yuruhuwa"], ["9L4U7R1L2D0U4R3U4D", "ritumeikonntesuto"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=(input.trim()).split(\"\");\nvar x=\"\";\narr.forEach(function(v){\nif(v==\"0\")x+=\"w\";\nif(v==\"1\")x+=\"\";\nif(v==\"2\")x+=\"k\";\nif(v==\"3\")x+=\"s\";\nif(v==\"4\")x+=\"t\";\nif(v==\"5\")x+=\"n\";\nif(v==\"6\")x+=\"h\";\nif(v==\"7\")x+=\"m\";\nif(v==\"8\")x+=\"y\";\nif(v==\"9\")x+=\"r\";\nif(v==\"T\")x+=\"a\";\nif(v==\"L\")x+=\"i\";\nif(v==\"U\")x+=\"u\";\nif(v==\"R\")x+=\"e\";\nif(v==\"D\")x+=\"o\";\n});\nx=x.replace(/wu/g,\"nn\");\nconsole.log(x);", "language": "JavaScript"}
{"filename": "p01620_1", "type": "JavaScript", "obfuscated": "var abc = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'['split']('');\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var n = Arr['shift']() - 0x0;\n    if (n == 0x0)\n        break;\n    var k = Arr['shift']()['split']('\\x20')['map'](Number);\n    var arr = Arr['shift']()['split']('');\n    var j = 0x0;\n    for (var i = 0x0; i < arr['length']; i++) {\n        var num = abc['indexOf'](arr[i]) - k[i % k['length']];\n        if (num < 0x0)\n            num += abc['length'];\n        arr[i] = abc[num];\n    }\n    console['log'](arr['join'](''));\n}", "test_cases": [["2\n1 2\nbdd\n3\n3 2 1\nDDDA\n5\n3 1 4 5 3\ndcdkIlkP\n0", "abc\nABCx\nabZfFijL"]], "original": "var abc=\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nwhile(true){\n   var n=Arr.shift()-0;\n   if(n==0)break;\n   var k=(Arr.shift()).split(\" \").map(Number);\n   var arr=(Arr.shift()).split(\"\");\n   var j=0;\n   for(var i=0;i<arr.length;i++){\n      var num=abc.indexOf(arr[i])-k[i%k.length];\n      if(num<0)num+=abc.length;\n      arr[i]=abc[num];\n   }\n   console.log(arr.join(\"\"));\n}", "language": "JavaScript"}
{"filename": "p01688_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar Arr = input['trim']()['split']('\\x0a');\nvar D = Arr['shift']() - 0x0;\nvar x = Arr['shift']() - 0x0;\nvar X = [];\nfor (var i = 0x0; i < x; i++) {\n    var v = Arr['shift']()['split']('\\x20');\n    if (v[0x0] == 'D')\n        X['push'](v[0x1] - 0x0);\n}\nX['sort'](function (_0x1be0e6, _0x300727) {\n    return _0x300727 - _0x1be0e6;\n});\nvar y = Arr['shift']() - 0x0;\nvar Y = [];\nfor (var i = 0x0; i < y; i++) {\n    var v = Arr['shift']()['split']('\\x20');\n    if (v[0x0] == 'DD')\n        Y['push'](v[0x1] - 0x0);\n}\nY['sort'](function (_0x303d19, _0x5c9bbc) {\n    return _0x5c9bbc - _0x303d19;\n});\nvar max = 0x0;\nfor (var x = 0x0; x <= X['length']; x++) {\n    for (var y = 0x0; y <= Y['length']; y++) {\n        if (D < x + y * 0x2)\n            break;\n        var sum = 0x0;\n        for (var i = 0x0; i < x; i++)\n            sum += X[i];\n        for (var i = 0x0; i < y; i++)\n            sum += Y[i];\n        max = Math['max'](max, sum);\n    }\n}\nconsole['log'](max);", "test_cases": [["2\n3\nD 30\nD 50\nD 20\n0", "80"], ["4\n0\n2\nDB 60\nDD 40", "40"], ["13\n2\nC 15\nA 23\n2\nBD 42\nEE 20", "0"], ["3\n3\nD 10\nD 15\nD 45\n1\nDD 30", "75"], ["3\n3\nD 25\nD 20\nD 25\n1\nDD 30", "70"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar Arr=(input.trim()).split(\"\\n\");\nvar D=Arr.shift()-0;\nvar x=Arr.shift()-0;\nvar X=[];\nfor(var i=0;i<x;i++){\n   var v=Arr.shift().split(\" \");\n   if(v[0]==\"D\")X.push(v[1]-0);\n}\nX.sort(function(a,b){return b-a;});\nvar y=Arr.shift()-0;\nvar Y=[];\nfor(var i=0;i<y;i++){\n   var v=Arr.shift().split(\" \");\n   if(v[0]==\"DD\")Y.push(v[1]-0);\n}\nY.sort(function(a,b){return b-a;});\nvar max=0;\nfor(var x=0;x<=X.length;x++){\n   for(var y=0;y<=Y.length;y++){\n      if(D<x+(y*2))break;\n      var sum=0;\n      for(var i=0;i<x;i++)sum+=X[i];\n      for(var i=0;i<y;i++)sum+=Y[i];\n      max=Math.max(max,sum);\n   }\n}\nconsole.log(max);", "language": "JavaScript"}
{"filename": "p01760_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar TD = arr['shift']()['split']('\\x20')['map'](Number);\nvar T = TD[0x0];\nvar D = TD[0x1];\nvar t = arr['shift']()['split']('\\x20')['map'](Number);\nvar tA = t[0x0];\nvar tB = t[0x1];\nvar d = arr['shift']()['split']('\\x20')['map'](Number);\nvar dA = d[0x0];\nvar dB = d[0x1];\nvar min = Infinity;\nvar i = 0x0;\nwhile (!![]) {\n    var vA = i * dA;\n    if (vA > D)\n        break;\n    var j = 0x0;\n    while (!![]) {\n        var vB = j * dB;\n        if (vA + vB > D)\n            break;\n        if (vA + vB != 0x0) {\n            var c = T - (tA * vA + tB * vB) / (vA + vB);\n            min = Math['min'](min, Math['abs'](c));\n        }\n        j++;\n    }\n    i++;\n}\nconsole['log'](min['toFixed'](0xa));", "test_cases": [["40 1000\n80 20\n100 100", "0.0000000000"], ["38 1000\n80 20\n100 95", "0.2222222222"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar TD=arr.shift().split(\" \").map(Number);\nvar T=TD[0];\nvar D=TD[1];\nvar t=arr.shift().split(\" \").map(Number);\nvar tA=t[0];\nvar tB=t[1];\nvar d=arr.shift().split(\" \").map(Number);\nvar dA=d[0];\nvar dB=d[1];\nvar min=Infinity;\nvar i=0;\nwhile(true){\n   var vA=i*dA;\n   if(vA>D)break;\n   var j=0;\n   while(true){\n      var vB=j*dB;\n      if(vA+vB>D)break;\n      if(vA+vB!=0){\n         var c=T-(tA * vA + tB * vB) / (vA + vB);\n         min=Math.min(min,Math.abs(c));\n      }\n      j++;\n   }\n   i++;\n}\nconsole.log(min.toFixed(10));", "language": "JavaScript"}
{"filename": "p01761_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar book = [];\nfor (var i = 0x0; i < n; i++)\n    book[i] = arr['shift']();\nvar q = arr['shift']() - 0x0;\nfor (var i = 0x0; i < q; i++) {\n    if (i != 0x0)\n        console['log']('');\n    var ans = [];\n    var v = arr['shift']()['split']('\\x20');\n    var a = v[0x0];\n    var b = v[0x1];\n    var c = v[0x2] != '*' ? new Date(v[0x2])['getTime']() : '*';\n    var d = v[0x3] != '*' ? new Date(v[0x3])['getTime']() : '*';\n    book['forEach'](function (_0x48c435) {\n        _0x48c435 = _0x48c435['split']('\\x20');\n        var _0x2efd54 = _0x48c435[0x0];\n        var _0x7c0612 = _0x48c435[0x1];\n        var _0x29301c = new Date(_0x48c435[0x2])['getTime']();\n        var _0x388455 = !![];\n        if (a != '*') {\n            var _0x23429a = new RegExp(a);\n            if (_0x23429a['test'](_0x2efd54) == ![])\n                _0x388455 = ![];\n        }\n        if (b != '*') {\n            var _0x23429a = new RegExp(b);\n            if (_0x23429a['test'](_0x7c0612) == ![])\n                _0x388455 = ![];\n        }\n        if (c != '*') {\n            if (c > _0x29301c)\n                _0x388455 = ![];\n        }\n        if (d != '*') {\n            if (d < _0x29301c)\n                _0x388455 = ![];\n        }\n        if (_0x388455)\n            ans['push'](_0x2efd54);\n    });\n    ans['forEach'](function (_0x1cd4ff) {\n        console['log'](_0x1cd4ff);\n    });\n}", "test_cases": [["6\nantbook iwiWataKitamasa 2012/01/28\nhogebook foo 2000/01/01\nhugabook bar 2000/01/01\ncheeterbook chokudai 2012/09/29\naojbook YutakaWatanabe 2014/06/28\npiyobook buz 2000/01/01\n4\na * * *\n* chokudai * *\n* Chokudai * *\n* * 2014/01/01 2014/12/31", "antbook\nhugabook\naojbook\n\ncheeterbook\n\n\naojbook"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar book=[];\nfor(var i=0;i<n;i++)book[i]=arr.shift();\nvar q=arr.shift()-0;\nfor(var i=0;i<q;i++){\n   if(i!=0)console.log(\"\");\n   var ans=[];\n   var v=arr.shift().split(\" \");\n   var a=v[0];\n   var b=v[1];\n   var c=(v[2]!=\"*\")?(new Date(v[2])).getTime():\"*\";\n   var d=(v[3]!=\"*\")?(new Date(v[3])).getTime():\"*\";\n   book.forEach(function(V){\n      V=V.split(\" \");\n      var A=V[0];\n      var B=V[1];\n      var C=(new Date(V[2])).getTime();\n      var flag=true;\n      if(a!=\"*\"){\n         var regex = new RegExp(a);\n         if(regex.test(A)==false)flag=false;\n      }\n      if(b!=\"*\"){\n         var regex = new RegExp(b);\n         if(regex.test(B)==false)flag=false;\n      }\n      if(c!=\"*\"){\n         if(c>C)flag=false;\n      }\n      if(d!=\"*\"){\n         if(d<C)flag=false;\n      }\n      if(flag)ans.push(A);\n   });\n   ans.forEach(function(value){\n       console.log(value);\n   });\n}", "language": "JavaScript"}
{"filename": "p01772_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar str = input['trim']();\nvar a = ![];\nvar ans = '';\nfor (var i = 0x0; i < str['length']; i++) {\n    if (str[i] == 'A')\n        a = !![];\n    if (str[i] == 'Z' && a == !![]) {\n        a = ![];\n        ans += 'AZ';\n    }\n}\nif (ans == '')\n    ans = -0x1;\nconsole['log'](ans);", "test_cases": [["AIZUNYANPEROPERO", "AZ"], ["AZAZ", "AZAZ"], ["ZDDYAZAWABDDZAZPIDDA", "AZAZAZ"], ["ZZZZAAAAAA", "-1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str=input.trim();\nvar a=false;\nvar ans=\"\";\nfor(var i=0;i<str.length;i++){\n   if(str[i]==\"A\")a=true;\n   if(str[i]==\"Z\" && a==true){a=false;ans+=\"AZ\";}\n}\nif(ans==\"\")ans=-1;\nconsole.log(ans);", "language": "JavaScript"}
{"filename": "p01846_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar data = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var str = data['shift']();\n    if (str == '#')\n        break;\n    str = str['replace'](/\\d/g, function (_0xe3be1f) {\n        return 'n'['repeat'](_0xe3be1f - 0x0);\n    });\n    var arr = str['split']('/');\n    arr = arr['map'](_0x10f2bc => _0x10f2bc['split'](''));\n    var [a, b, c, d] = data['shift']()['split']('\\x20')['map'](Number);\n    arr[a - 0x1][b - 0x1] = 'n';\n    arr[c - 0x1][d - 0x1] = 'b';\n    arr = arr['map'](_0x2b5dfe => _0x2b5dfe['join'](''));\n    str = arr['join']('/');\n    str = str['replace'](/n+/g, function (_0x439d9e) {\n        return _0x439d9e['length'];\n    });\n    console['log'](str);\n}", "test_cases": [["b1/1b\n1 1 1 2\nb5/bbbbbb\n2 4 1 4\nb2b2b/7\n1 4 2 4\n#", "1b/1b\nb2b2/bbb1bb\nb5b/3b3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar data = input.trim().split(\"\\n\");\nwhile (true) {\n   var str = data.shift();\n   if(str==\"#\")break;\n   str=str.replace(/\\d/g,function(v){\n      return \"n\".repeat(v-0);\n   });\n   var arr = str.split(\"/\");\n   arr = arr.map(v=> v.split(\"\"));\n   var [a,b,c,d] = data.shift().split(\" \").map(Number);\n   arr[a-1][b-1]=\"n\";\n   arr[c-1][d-1]=\"b\";\n   arr = arr.map(v=> v.join(\"\"));\n   str = arr.join(\"/\");\n   str=str.replace(/n+/g,function(v){\n      return v.length;\n   });\n   console.log(str);\n}\n", "language": "JavaScript"}
{"filename": "p01872_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar str = input['trim']();\nvar ans = '';\nfor (var j = 0x0; j <= 0x9; j++) {\n    var arr = str['replace'](/\\?/, j)['split']('')['map'](Number)['reverse']();\n    var sum = 0x0;\n    for (var i = 0x1; i <= 0x6; i++)\n        sum += arr[i] * (i + 0x1);\n    for (var i = 0x7; i <= 0xb; i++)\n        sum += arr[i] * (i - 0x5);\n    var p = 0xb - sum % 0xb;\n    if (sum % 0xb <= 0x1)\n        p = 0x0;\n    ans += p == arr[0x0] ? j : '';\n}\nif (ans['length'] == 0x1)\n    console['log'](ans[0x0]);\nelse\n    console['log']('MULTIPLE');", "test_cases": [["?12345678901", "4"], ["2016030810?0", "MULTIPLE"], ["20160308100?", "0"], ["0012300?0450", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar str = input.trim();\nvar ans = \"\";\nfor(var j=0;j<=9;j++){\n   var arr = str.replace(/\\?/,j).split(\"\").map(Number).reverse();\n   var sum = 0;\n   for(var i=1;i<=6;i++) sum+=arr[i]*(i+1);\n   for(var i=7;i<=11;i++)sum+=arr[i]*(i-5);\n   var p =11-(sum%11);\n   if(sum%11<=1)p=0;\n   ans += (p==arr[0])? j : \"\";\n}\nif(ans.length==1)console.log(ans[0]);\nelse console.log(\"MULTIPLE\");\n", "language": "JavaScript"}
{"filename": "p01898_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [m, n] = arr['shift']()['split']('\\x20')['map'](Number);\nvar yx = [];\nfor (var i = 0x0; i < m; i++)\n    yx['push'](arr['shift']()['split'](''));\nvar memo = [];\nfor (var i = 0x0; i < m; i++) {\n    for (var j = 0x0; j < n; j++) {\n        if (i == 0x0)\n            memo['push']([\n                i,\n                j\n            ]);\n        if (yx[i][j] == 'o') {\n            [\n                [\n                    0x0,\n                    -0x1\n                ],\n                [\n                    0x0,\n                    0x1\n                ]\n            ]['forEach'](_0x10e8ff => {\n                var _0x18bcb3 = i + _0x10e8ff[0x0];\n                var _0x4263da = j + _0x10e8ff[0x1];\n                if ((_0x18bcb3 < 0x0 || _0x4263da < 0x0 || _0x18bcb3 >= m || _0x4263da >= n) == ![])\n                    memo['push']([\n                        _0x18bcb3,\n                        _0x4263da\n                    ]);\n            });\n        } else if (yx[i][j] == 'x') {\n            for (var ii = -0x1; ii <= 0x1; ii++)\n                for (var jj = -0x1; jj <= 0x1; jj++) {\n                    if (ii == 0x0 && jj == 0x0)\n                        continue;\n                    var y = i + ii;\n                    var x = j + jj;\n                    if (y < 0x0 || x < 0x0 || y >= m || x >= n)\n                        continue;\n                    memo['push']([\n                        y,\n                        x\n                    ]);\n                }\n        }\n    }\n}\nmemo['forEach'](_0x56b715 => {\n    yx[_0x56b715[0x0]][_0x56b715[0x1]] = 'b';\n});\nconsole['log'](yx['join']('')['replace'](/[^-]/g, '')['length']);", "test_cases": [["5 5\n--o--\n--xo-\n--x--\no---x\n--xoo", "3"], ["2 6\n--oooo\nx--o--", "1"], ["3 5\n-----\n-----\n-----", "10"], ["4 6\no-oxoo\noo-ooo\noooxo-\no-ooox", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar [m,n]=arr.shift().split(\" \").map(Number);\nvar yx=[];\nfor(var i=0;i<m;i++)yx.push(arr.shift().split(\"\"));\nvar memo=[];\nfor(var i=0;i<m;i++){\n   for(var j=0;j<n;j++){\n      if(i==0)memo.push([i,j]);\n      if(yx[i][j]==\"o\"){\n         [[0,-1],[0,1]].forEach(v=>{\n            var y=i+v[0];\n            var x=j+v[1];\n            if((y<0 || x<0 || y>=m || x>=n)==false)memo.push([y,x]);\n         });\n      }else if(yx[i][j]==\"x\"){\n         for(var ii=-1;ii<=1;ii++)for(var jj=-1;jj<=1;jj++){\n            if(ii==0 && jj==0)continue;\n            var y=i+ii;\n            var x=j+jj;\n            if(y<0 || x<0 || y>=m || x>=n)continue;\n            memo.push([y,x]);\n         }\n      }\n   }\n}\nmemo.forEach(v=>{\n   yx[v[0]][v[1]]=\"b\";\n});\nconsole.log(yx.join(\"\").replace(/[^-]/g,\"\").length);\n", "language": "JavaScript"}
{"filename": "p01899_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [n, d] = arr['shift']()['split']('\\x20')['map'](Number);\nvar p = arr['shift']()['split']('\\x20')['map'](Number);\nvar sum = 0x0;\np['forEach'](_0x2fcf7f => {\n    sum += Math['max'](0x0, _0x2fcf7f - d);\n});\nconsole['log'](sum == 0x0 ? 'kusoge' : sum);", "test_cases": [["5 130\n130 170 100 120 140", "50"], ["3 100\n100 90 65", "kusoge"], ["6 210\n300 270 400 330 250 370", "660"], ["4 540\n100 460 320 280", "kusoge"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar [n,d]=arr.shift().split(\" \").map(Number);\nvar p=arr.shift().split(\" \").map(Number);\nvar sum=0;\np.forEach(v=>{\n   sum+=Math.max(0,v-d);\n});\nconsole.log((sum==0)?\"kusoge\":sum);\n", "language": "JavaScript"}
{"filename": "p01916_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar s = arr[0x0]['split']('');\nfor (var i = 0x0; i < s['length']; i++) {\n    for (var j = i + 0x1; j < s['length']; j++) {\n        if (s[i] == s[j]) {\n            s[i] = '';\n            s[j] = '';\n            break;\n        }\n    }\n}\nvar n = s['join']('')['length'];\nif (n == 0x0 || n == 0x1)\n    console['log'](0x0);\nelse if (n % 0x2 == 0x0)\n    console['log'](n / 0x2);\nelse\n    console['log']((n - 0x1) / 0x2);", "test_cases": [["hcpc", "1"], ["ritscamp", "4"], ["nakawawakana", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar s=arr[0].split(\"\");\n\nfor(var i=0;i<s.length;i++){\nfor(var j=i+1;j<s.length;j++){\n   if(s[i]==s[j]){\n      s[i]=\"\";\n      s[j]=\"\";\n      break;\n   }\n}\n}\nvar n=s.join(\"\").length;\nif(n==0 || n==1)console.log(0);\nelse if(n%2==0)console.log(n/2);\nelse console.log((n-1)/2);\n", "language": "JavaScript"}
{"filename": "p01923_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (arr[0x0] == '0\\x200')\n        break;\n    var nm = arr['shift']()['split']('\\x20')['map'](Number);\n    var n = nm[0x0];\n    var m = nm[0x1];\n    var max = [];\n    for (var i = 0x0; i < m; i++)\n        max[i] = 0x0;\n    for (var i = 0x0; i < n; i++) {\n        var dv = arr['shift']()['split']('\\x20')['map'](Number);\n        var d = dv[0x0] - 0x1;\n        var v = dv[0x1];\n        if (max[d] < v)\n            max[d] = v;\n    }\n    var sum = 0x0;\n    for (var i = 0x0; i < m; i++)\n        sum += max[i];\n    console['log'](sum);\n}", "test_cases": [["5 3\n1 1\n2 3\n3 2\n3 5\n2 1\n4 2\n1 7\n2 1\n1 3\n1 5\n6 1\n1 3\n1 2\n1 8\n1 2\n1 7\n1 6\n20 9\n4 10\n2 4\n5 3\n6 6\n6 3\n7 4\n8 10\n4 6\n7 5\n1 8\n5 7\n1 5\n6 6\n9 9\n5 8\n6 7\n1 4\n6 4\n7 10\n3 5\n19 6\n4 1\n6 5\n5 10\n1 10\n3 10\n4 6\n2 3\n5 4\n2 10\n1 8\n3 4\n3 1\n5 4\n1 10\n1 3\n5 6\n5 2\n1 10\n2 3\n0 0", "9\n8\n8\n71\n51"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   if (arr[0] == \"0 0\") break;\n   var nm = arr.shift().split(\" \").map(Number);\n   var n = nm[0];\n   var m = nm[1];\n   var max = [];\n   for (var i = 0; i < m; i++) max[i] = 0;\n   for (var i = 0; i < n; i++) {\n      var dv = arr.shift().split(\" \").map(Number);\n      var d = dv[0] - 1;\n      var v = dv[1];\n      if (max[d] < v) max[d] = v;\n   }\n   var sum = 0;\n   for (var i = 0; i < m; i++) sum += max[i];\n   console.log(sum);\n}", "language": "JavaScript"}
{"filename": "p01925_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    if (arr[0x0] == '0\\x200')\n        break;\n    var nm = arr['shift']()['split']('\\x20')['map'](Number);\n    var point = [];\n    for (var i = 0x0; i < nm[0x0]; i++)\n        point[i] = [\n            0x0,\n            0x0\n        ];\n    for (var i = 0x0; i < nm[0x1]; i++) {\n        var c = arr['shift']()['split']('\\x20')['map'](Number);\n        var s = c['shift']();\n        var k = c['shift']();\n        if (k == 0x1)\n            point[c[0x0] - 0x1][0x0] += s;\n        c['forEach'](function (_0x2d08ab, _0x18d1ea) {\n            point[_0x2d08ab - 0x1][0x1] += s;\n        });\n    }\n    var max = 0x0;\n    for (var i = 0x0; i < nm[0x0]; i++) {\n        for (var j = 0x0; j < nm[0x0]; j++) {\n            if (i == j)\n                continue;\n            max = Math['max'](max, point[i][0x1] - point[j][0x0]);\n        }\n    }\n    console['log'](max + 0x1);\n}", "test_cases": [["3 2\n5 2 1 3\n8 2 2 3\n2 3\n8 2 1 2\n3 1 1\n5 1 2\n2 5\n100 1 1\n100 1 1\n100 1 1\n100 1 1\n100 1 1\n3 4\n5 1 1\n5 1 2\n100 2 1 3\n100 2 2 3\n0 0", "14\n11\n501\n196"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nwhile (true) {\n   if (arr[0] == \"0 0\") break;\n   var nm = arr.shift().split(\" \").map(Number);\n   var point = [];\n   for (var i = 0; i < nm[0]; i++) point[i] = [0, 0];\n   for (var i = 0; i < nm[1]; i++) {\n      var c = arr.shift().split(\" \").map(Number);\n      var s = c.shift();\n      var k = c.shift();\n      if (k == 1) point[c[0] - 1][0] += s;\n      c.forEach(function(v, i) {\n         point[v - 1][1] += s;\n      });\n   }\n   var max = 0;\n   for (var i = 0; i < nm[0]; i++) {\n      for (var j = 0; j < nm[0]; j++) {\n         if (i == j) continue;\n         max = Math.max(max, point[i][1] - point[j][0]);\n      }\n   }\n   console.log(max + 1);\n}", "language": "JavaScript"}
{"filename": "p01938_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar s = input['trim']()['split']('');\nvar abc = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'['split']('');\ns = s['map'](_0x496a08 => abc['indexOf'](_0x496a08));\nvar cnt = 0x0;\nvar memo = 0x0;\ns['forEach'](_0x5db882 => {\n    if (memo >= _0x5db882)\n        cnt++;\n    memo = _0x5db882;\n});\nconsole['log'](cnt);", "test_cases": [["AIZU", "2"], ["HOKKAIDO", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar s=input.trim().split(\"\");\nvar abc = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".split(\"\");\ns = s.map(v=> abc.indexOf(v));\nvar cnt = 0;\nvar memo = 0;\ns.forEach(v=>{\n   if(memo >= v)cnt++;\n   memo = v;\n});\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p01967_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\narr = arr['map'](_0x109973 => _0x109973['split']('\\x20')['map'](Number));\nvar n = arr['shift']();\nvar c = arr['shift']();\nvar q = arr['shift']();\nvar apple = [];\nfor (var i = 0x0; i <= n; i++)\n    apple[i] = 0x0;\nvar ans = 0x0;\nfor (var i = 0x0; i < arr['length']; i++) {\n    var [t, x, d] = arr[i];\n    if (t == 0x1) {\n        apple[x] += d;\n        if (c[x - 0x1] < apple[x]) {\n            ans = x;\n            break;\n        }\n    } else {\n        if (apple[x] < d) {\n            ans = x;\n            break;\n        } else {\n            apple[x] -= d;\n        }\n    }\n}\nconsole['log'](ans);", "test_cases": [["2\n3 3\n4\n1 1 2\n1 2 3\n2 1 3\n2 2 3", "1"], ["2\n3 3\n4\n1 1 3\n2 1 2\n1 2 3\n1 1 3", "1"], ["3\n3 4 5\n4\n1 1 3\n1 2 3\n1 3 5\n2 2 2", "0"], ["6\n28 56 99 3 125 37\n10\n1 1 10\n1 1 14\n1 3 90\n1 5 10\n2 3 38\n2 1 5\n1 3 92\n1 6 18\n2 5 9\n2 1 4", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\narr=arr.map(v=>v.split(\" \").map(Number));\nvar n = arr.shift();\nvar c=arr.shift();\nvar q = arr.shift();\nvar apple = [];\nfor(var i=0;i<=n;i++)apple[i]=0;\nvar ans=0;\nfor(var i=0;i<arr.length;i++){\n   var [t,x,d]=arr[i];\n   if(t==1){\n      apple[x]+=d;\n      if(c[x - 1] <apple[x]){\n         ans=x;\n         break;\n      }\n   } else {\n      if(apple[x]<d){\n         ans=x;\n         break;\n      }else{\n         apple[x]-=d;\n      }\n   }\n}\nconsole.log(ans);\n\n", "language": "JavaScript"}
{"filename": "p01981_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var gymd = arr['shift']();\n    if (gymd == '#')\n        break;\n    var [g, y, m, d] = gymd['split']('\\x20');\n    [y, m, d] = [\n        y - 0x0,\n        m - 0x0,\n        d - 0x0\n    ];\n    if (y <= 0x1e || y == 0x1f && m <= 0x4)\n        console['log'](gymd);\n    else {\n        y = y - 0x1e;\n        console['log']('?\\x20' + y + '\\x20' + m + '\\x20' + d);\n    }\n}", "test_cases": [["HEISEI 1 1 8\nHEISEI 31 4 30\nHEISEI 31 5 1\nHEISEI 99 12 31\nHEISEI 38 8 30\nHEISEI 98 2 22\nHEISEI 2 3 26\nHEISEI 28 4 23\n#", "HEISEI 1 1 8\nHEISEI 31 4 30\n? 1 5 1\n? 69 12 31\n? 8 8 30\n? 68 2 22\nHEISEI 2 3 26\nHEISEI 28 4 23"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nwhile(true){\n   var gymd = arr.shift();\n   if(gymd==\"#\")break;\n   var [g, y, m, d]=gymd.split(\" \");\n   [y,m,d]=[y-0,m-0,d-0];\n   if(y<=30 || y==31 && m<=4)console.log(gymd);\n   else {\n      y=y-30;\n      console.log(\"? \"+y+\" \"+m+\" \"+d);\n   }\n}\n", "language": "JavaScript"}
{"filename": "p01982_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var nlr = arr['shift']()['split']('\\x20')['map'](Number);\n    if (nlr['join']('') == '000')\n        break;\n    var [n, l, r] = [\n        nlr[0x0],\n        nlr[0x1],\n        nlr[0x2]\n    ];\n    var A = [];\n    for (var i = 0x0; i < n; i++)\n        A['push'](arr['shift']() - 0x0);\n    var cnt = 0x0;\n    for (var x = l; x <= r; x++) {\n        var flag = !![];\n        for (var i = 0x0; i < A['length']; i++) {\n            if (x % A[i] == 0x0) {\n                flag = ![];\n                if ((i + 0x1) % 0x2 != 0x0)\n                    cnt++;\n                break;\n            }\n        }\n        if (flag && n % 0x2 == 0x0)\n            cnt++;\n    }\n    console['log'](cnt);\n}", "test_cases": [["3 1988 2014\n400\n100\n4\n1 1000 1999\n1\n2 1111 3333\n2\n2\n6 2000 3000\n5\n7\n11\n9\n3\n13\n0 0 0", "7\n1000\n2223\n785"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var nlr=arr.shift().split(\" \").map(Number);\n   if(nlr.join(\"\")==\"000\")break;\n   var [n,l,r]=[nlr[0],nlr[1],nlr[2]];\n   var A = [];\n   for(var i=0;i<n;i++) A.push(arr.shift()-0);\n   var cnt=0;\n   for(var x=l;x<=r;x++){\n      var flag=true;\n      for(var i=0;i<A.length;i++){\n         if(x%A[i]==0){\n            flag=false;\n            if ((i+1)%2!=0)cnt++;\n            break;\n         }\n      }\n      if(flag && n%2==0)cnt++;\n   }  \n   console.log(cnt);\n}\n", "language": "JavaScript"}
{"filename": "p02017_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b, c, d] = input['trim']()['split']('\\x20')['map'](Number);\nif (a * b % 0x2 != 0x0 && (c + d) % 0x2 != 0x0)\n    console['log']('No');\nelse\n    console['log']('Yes');", "test_cases": [["3 5 1 4", "No"], ["3 5 2 4", "Yes"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,c,d] = input.trim().split(\" \").map(Number);\nif((a*b)%2!=0 && (c+d)%2!=0)console.log(\"No\");\nelse console.log(\"Yes\");\n\n", "language": "JavaScript"}
{"filename": "p02018_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\ninput = input['trim']()['split']('\\x0a');\narr = input[0x1]['split']('\\x20')['map'](Number);\narr = arr['filter'](_0x3eaa80 => _0x3eaa80 % 0x2 == 0x0);\nconsole['log'](arr['length']);", "test_cases": [["5\n4 3 5 2 6", "3"], ["3\n2 2 2", "3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\ninput = input.trim().split(\"\\n\")\narr = input[1].split(\" \").map(Number);\narr = arr.filter(v=> v%2==0);\nconsole.log(arr.length);\n", "language": "JavaScript"}
{"filename": "p02019_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [n, a, b, c] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](n - a - b + c);", "test_cases": [["6 3 2 1", "2"], ["10 9 9 9", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,a,b,c]= input.trim().split(\" \").map(Number);\nconsole.log(n-a-b+c);\n", "language": "JavaScript"}
{"filename": "p02020_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [n, arr] = input['trim']()['split']('\\x0a');\narr = arr['split']('\\x20')['map'](Number);\narr['sort'](function (_0x355ffe, _0x44b483) {\n    return _0x355ffe - _0x44b483;\n});\nvar sum = arr['reduce'](function (_0x1d3380, _0x5abdc3) {\n    return _0x1d3380 + _0x5abdc3;\n});\nif (sum % 0x2 == 0x0)\n    console['log'](sum / 0x2);\nelse {\n    for (var i = 0x0; i < arr['length']; i++) {\n        if (arr[i] % 0x2 == 0x1) {\n            console['log']((sum - arr[i]) / 0x2);\n            break;\n        }\n    }\n}", "test_cases": [["5\n2 3 5 6 7", "10"], ["4\n3 5 6 8", "11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,arr]= input.trim().split(\"\\n\");\narr=arr.split(\" \").map(Number);\narr.sort(function(a,b){\n   return a-b;\n});\nvar sum = arr.reduce(function(a,b){\n   return a+b;\n});\nif(sum%2==0)console.log(sum/2);\nelse {\n   for(var i=0;i<arr.length;i++){\n      if(arr[i]%2==1){\n         console.log((sum-arr[i])/2);\n         break;\n      }\n   }\n}\n", "language": "JavaScript"}
{"filename": "p02021_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [n, arr] = input['trim']()['split']('\\x0a');\narr = arr['split']('\\x20')['map'](Number);\nfor (var i = 0x1; i <= 0x64; i++) {\n    var sum = 0x0;\n    var flag = arr['every'](_0x4355b5 => {\n        sum = sum + _0x4355b5 - i;\n        return sum >= 0x0;\n    });\n    if (!flag)\n        break;\n}\nconsole['log'](i - 0x1);", "test_cases": [["5\n4 2 5 3 1", "3"], ["5\n9 9 1 9 9", "6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [n,arr]= input.trim().split(\"\\n\");\narr=arr.split(\" \").map(Number);\nfor(var i=1;i<=100;i++){\n  var sum=0;\n  var flag = arr.every(v=>{\n     sum = sum + v - i;\n     return  (sum >= 0);\n  });\n  if(!flag)break;\n}\nconsole.log(i-1);\n", "language": "JavaScript"}
{"filename": "p02022_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar A = arr[0x1]['split']('\\x20')['map'](Number)['reduce']((_0x5a7d12, _0x542e56) => _0x5a7d12 + _0x542e56);\nvar B = arr[0x2]['split']('\\x20')['map'](Number)['reduce']((_0x47e900, _0x16c044) => _0x47e900 + _0x16c044);\nconsole['log'](A * B);", "test_cases": [["3 2\n3 1 5\n2 4", "54"], ["10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10", "3025"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\"\\n\");\nvar A= arr[1].split(\" \").map(Number).reduce((a,b)=>a+b);\nvar B= arr[2].split(\" \").map(Number).reduce((a,b)=>a+b);\nconsole.log(A*B);\n", "language": "JavaScript"}
{"filename": "p02044_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nwhile (!![]) {\n    var [n, m] = arr['shift']()['split']('\\x20')['map'](Number);\n    if (n == 0x0 && m == 0x0)\n        break;\n    var x = m / n;\n    var sum = 0x0;\n    var a = arr['shift']()['split']('\\x20')['map'](Number);\n    a['forEach'](_0x4edca9 => {\n        if (_0x4edca9 >= x)\n            sum += x;\n        else\n            sum += _0x4edca9;\n    });\n    console['log'](sum);\n}", "test_cases": [["3 300\n120 100 80\n3 30\n10 20 5\n4 1000\n100 200 300 400\n5 5\n2523 8430 3 4199 632\n0 0", "280\n25\n800\n5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nwhile(true){\n   var [n,m]=arr.shift().split(\" \").map(Number);\n   if(n==0 && m==0)break;\n   var x=m/n;\n   var sum=0;\n   var a=arr.shift().split(\" \").map(Number);\n   a.forEach(v=>{\n      if(v>=x)sum+=x;\n      else sum+=v;\n   });\n   console.log(sum);\n}\n", "language": "JavaScript"}
{"filename": "p02052_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [h, w] = arr['shift']()['split']('\\x20')['map'](Number);\nvar b = [];\nfor (var i = 0x0; i < h; i++) {\n    arr['shift']()['split']('')['forEach']((_0x5a0dcc, _0x4390a5) => {\n        if (_0x5a0dcc == 'B')\n            b['push']([\n                i,\n                _0x4390a5\n            ]);\n    });\n}\nvar max = 0x0;\nfor (var i = 0x0; i < b['length']; i++) {\n    for (var j = i + 0x1; j < b['length']; j++) {\n        var d = Math['abs'](b[i][0x0] - b[j][0x0]) + Math['abs'](b[i][0x1] - b[j][0x1]);\n        max = Math['max'](max, d);\n    }\n}\nconsole['log'](max);", "test_cases": [["3 3\nB.B\n..B\n.BB", "4"], ["4 3\nB..\nB..\n...\n...", "1"], ["6 6\n...B..\nB.B.B.\n.B.B.B\n...B.B\n.B..B.\n..B...", "7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar b=[];\nfor(var i=0;i<h;i++){\n   arr.shift().split(\"\").forEach((v,j)=>{\n      if(v==\"B\")b.push([i,j]);\n   });\n}\nvar max=0;\nfor(var i=0;i<b.length;i++){\n   for(var j=i+1;j<b.length;j++){\n      var d=Math.abs(b[i][0]-b[j][0])+Math.abs(b[i][1]-b[j][1]);\n      max=Math.max(max,d);\n   }\n}\nconsole.log(max);\n", "language": "JavaScript"}
{"filename": "p02053_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [h, w] = arr['shift']()['split']('\\x20')['map'](Number);\nvar b = [];\nfor (var i = 0x0; i < h; i++) {\n    var two = [];\n    arr[i]['split']('')['forEach']((_0x5003be, _0x32f43f) => {\n        if (_0x5003be == 'B')\n            two['push']([\n                i,\n                _0x32f43f\n            ]);\n    });\n    if (two['length'] == 0x1)\n        b['push'](two[0x0]);\n    else if (two['length'] >= 0x2)\n        b['push'](two[0x0], two[two['length'] - 0x1]);\n}\nvar max = 0x0;\nfor (var i = 0x0; i < b['length']; i++) {\n    for (var j = i + 0x1; j < b['length']; j++) {\n        var d = Math['abs'](b[i][0x0] - b[j][0x0]) + Math['abs'](b[i][0x1] - b[j][0x1]);\n        max = Math['max'](max, d);\n    }\n}\nconsole['log'](max);", "test_cases": [["3 3\nB.B\n..B\n.BB", "4"], ["4 3\nB..\nB..\n...\n...", "1"], ["6 6\n...B..\nB.B.B.\n.B.B.B\n...B.B\n.B..B.\n..B...", "7"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [h,w]=arr.shift().split(\" \").map(Number);\nvar b=[];\nfor(var i=0;i<h;i++){\n   var two=[];\n   arr[i].split(\"\").forEach((v,j)=>{\n      if(v==\"B\")two.push([i,j]);\n   });\n   if(two.length==1)b.push(two[0]);\n   else if(two.length>=2)b.push(two[0],two[two.length-1]);\n}\nvar max=0;\nfor(var i=0;i<b.length;i++){\n   for(var j=i+1;j<b.length;j++){\n      var d=Math.abs(b[i][0]-b[j][0])+Math.abs(b[i][1]-b[j][1]);\n      max=Math.max(max,d);\n   }\n}\nconsole.log(max);\n\n", "language": "JavaScript"}
{"filename": "p02060_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar p = arr['shift']()['split']('\\x20')['map'](Number);\nvar t = arr['shift']()['split']('\\x20')['map'](Number);\nvar s = [];\nfor (var i = 0x0; i <= 0xc8; i++)\n    s[i] = Infinity;\ns[0x0] = 0x0;\nfor (var i = 0x0; i <= 0x64; i++) {\n    if (s[i] == Infinity)\n        continue;\n    s[i + t[0x0]] = Math['min'](s[i] + p[0x0], s[i + t[0x0]]);\n    s[i + t[0x1]] = Math['min'](s[i] + p[0x1], s[i + t[0x1]]);\n    s[i + t[0x2]] = Math['min'](s[i] + p[0x2], s[i + t[0x2]]);\n    s[i + t[0x3]] = Math['min'](s[i] + p[0x3], s[i + t[0x3]]);\n}\nvar min = Infinity;\nfor (var i = n; i <= 0xc8; i++)\n    min = Math['min'](min, s[i]);\nconsole['log'](min);", "test_cases": [["10\n1 2 3 4\n1 2 4 8", "6"], ["5\n2 9 9 8\n1 4 5 100", "8"], ["24\n2 3 4 7\n7 9 11 20", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar p=arr.shift().split(\" \").map(Number);\nvar t=arr.shift().split(\" \").map(Number);\nvar s=[];\nfor(var i=0;i<=200;i++)s[i]=Infinity;\ns[0]=0;\nfor(var i=0;i<=100;i++){\n   if(s[i]==Infinity)continue; \n   s[i+t[0]]=Math.min(s[i]+p[0],s[i+t[0]]);\n   s[i+t[1]]=Math.min(s[i]+p[1],s[i+t[1]]);\n   s[i+t[2]]=Math.min(s[i]+p[2],s[i+t[2]]);\n   s[i+t[3]]=Math.min(s[i]+p[3],s[i+t[3]]);\n}\nvar min=Infinity;\nfor(var i=n;i<=200;i++)min=Math.min(min,s[i]);\nconsole.log(min);\n", "language": "JavaScript"}
{"filename": "p02099_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\narr = arr['map'](_0x91795e => _0x91795e['replace']('.', ''))['map'](Number);\nvar a = [];\nfor (var i = 0x0; i <= 0xfa0; i++)\n    a[i] = 0x0;\narr['forEach'](_0x39aee4 => a[_0x39aee4]++);\nvar ans = [];\nvar s = [];\ns[0x0] = a[0x0];\nfor (var i = 0x1; i <= 0xfa0; i++)\n    s[i] = s[i - 0x1] + a[i];\narr['forEach'](_0x50f84d => {\n    var _0x24e194 = 0x0;\n    _0x24e194 += a[_0x50f84d] - 0x1;\n    if (_0x50f84d != 0x0)\n        _0x24e194 += s[_0x50f84d - 0x1] * 0x3;\n    ans['push'](_0x24e194);\n});\nconsole['log'](ans['join']('\\x0a'));", "test_cases": [["3\n1.000\n3.000\n3.000", "0\n4\n4"], ["3\n1.000\n2.000\n3.000", "0\n3\n6"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\narr=arr.map(v=> v.replace(\".\",\"\")).map(Number);\nvar a=[];\nfor(var i=0;i<=4000;i++)a[i]=0;\narr.forEach(v=> a[v]++);\nvar ans=[];\nvar s=[];\ns[0]=a[0];\nfor(var i=1;i<=4000;i++)s[i]=s[i-1]+a[i];\narr.forEach(v=>{\n   var point=0;\n   point+=a[v]-1;\n   if(v!=0)point+=s[v-1]*3;\n   ans.push(point);\n});\nconsole.log(ans.join(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p02111_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar x = input['trim']() - 0x0;\nvar time = 0xc * 0x3c / 0x168 * x;\nvar h = (time - time % 0x3c) / 0x3c;\nvar m = time % 0x3c;\nconsole['log'](h + '\\x20' + m);", "test_cases": [["0", "0 0"], ["45", "1 30"], ["100", "3 20"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar x=input.trim()-0;\nvar time = 12*60/360 * x;\nvar h = (time - time%60) / 60;\nvar m = time % 60;\nconsole.log(h +\" \"+ m);\n", "language": "JavaScript"}
{"filename": "p02115_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a')['map'](Number);\nvar n = arr['shift']();\nvar a = arr['shift']();\nvar cnt = 0x1;\nvar max = 0x1;\nvar memo = 0x0;\narr['forEach'](_0x58f2c9 => {\n    if (a > _0x58f2c9) {\n        if (memo == 0x1)\n            cnt = 0x2;\n        else\n            cnt++;\n        memo = -0x1;\n    } else if (a < _0x58f2c9) {\n        if (memo == -0x1)\n            cnt = 0x2;\n        else\n            cnt++;\n        memo = 0x1;\n    }\n    max = Math['max'](max, cnt);\n    a = _0x58f2c9;\n});\nconsole['log'](max);", "test_cases": [["3\n2\n5\n1", "2"], ["5\n4\n5\n2\n1\n3", "3"], ["3\n4\n4\n4", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\").map(Number);\nvar n=arr.shift();\nvar a=arr.shift();\nvar cnt=1;\nvar max=1;\nvar memo=0;\narr.forEach(v=>{\n   if(a>v){\n      if(memo == 1)cnt=2;\n      else cnt++;\n      memo=-1;\n   }else if(a<v){\n      if(memo == -1)cnt=2;\n      else cnt++;      \n      memo=1;\n   }\n   max=Math.max(max,cnt);\n   a=v;\n});\nconsole.log(max);\n", "language": "JavaScript"}
{"filename": "p02124_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar x = arr['shift']() - 0x0;\nconsole['log']('ai1333' + '3'['repeat'](x / 0x64));", "test_cases": [["0", "ai1333"], ["300", "ai1333333"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar x = arr.shift()-0;\nconsole.log(\"ai1333\" + \"3\".repeat(x/100));\n", "language": "JavaScript"}
{"filename": "p02126_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [n, m, c] = arr['shift']()['split']('\\x20')['map'](Number);\nvar L = arr['shift']()['split']('\\x20')['map'](Number);\nvar cw = arr['map'](_0x454581 => _0x454581['split']('\\x20')['map'](Number));\ncw['sort'](function (_0x26eb1b, _0x446755) {\n    return _0x446755[0x1] - _0x26eb1b[0x1];\n});\nvar sum = 0x0;\nfor (var i = 0x0; i < cw['length']; i++) {\n    if (m == 0x0)\n        break;\n    var max = L[cw[i][0x0] - 0x1];\n    if (max > 0x0) {\n        sum += cw[i][0x1];\n        L[cw[i][0x0] - 0x1]--;\n        m--;\n    }\n}\nconsole['log'](sum);", "test_cases": [["3 3 2\n1 1\n1 1\n1 100\n2 10", "110"], ["3 3 3\n1 0 1\n1 1\n2 100\n3 1", "2"], ["22 7 26\n11 14 15 3 11 7 16 17 1 4 2 19 4 14 16 16 3 13 17 12 7 11 2 20 12 22\n6 10\n1 3\n13 1\n16 5\n4 1\n20 7\n18 4\n26 6\n9 1\n12 2\n21 1\n21 7\n18 1\n14 5\n24 5\n6 1\n3 1\n2 5\n21 2\n7 6\n10 9\n15 7", "52"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar [n,m,c]=arr.shift().split(\" \").map(Number);\nvar L=arr.shift().split(\" \").map(Number);\nvar cw = arr.map(v => v.split(\" \").map(Number));\ncw.sort(function(a,b){\n   return b[1] - a[1];\n});\nvar sum=0;\nfor(var i=0;i<cw.length;i++){\n   if(m==0)break;\n   var max = L[cw[i][0]-1];\n   if(max>0){\n      sum+=cw[i][1];\n      L[cw[i][0]-1]--;\n      m--;\n   }\n}\nconsole.log(sum);\n", "language": "JavaScript"}
{"filename": "p02137_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar p = input['trim']() - 0x0;\nconsole['log'](p - p % 0x1f4);", "test_cases": [["5700", "5500"], ["1333", "1000"], ["100000", "100000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar p= input.trim()-0;\nconsole.log(p-(p%500));\n", "language": "JavaScript"}
{"filename": "p02149_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x20')['map'](Number);\nvar max = Math['max'](...arr);\nconsole['log']([\n    'A',\n    'B',\n    'C'\n][arr['indexOf'](max)]);", "test_cases": [["1000 900 850", "A"], ["1000 800 1200", "C"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr= input.trim().split(\" \").map(Number);\nvar max=Math.max(...arr);\nconsole.log([\"A\",\"B\",\"C\"][arr.indexOf(max)]);\n", "language": "JavaScript"}
{"filename": "p02162_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [t, tt, r, rr] = input['trim']()['split']('\\x20')['map'](Number);\nif (r == -0x1 || rr == -0x1) {\n    if (t > tt)\n        console['log']('Bob');\n    else if (t < tt)\n        console['log']('Alice');\n    else if (t == tt)\n        console['log']('Draw');\n} else if (r > rr)\n    console['log']('Alice');\nelse if (r < rr)\n    console['log']('Bob');\nelse if (r == rr)\n    console['log']('Draw');", "test_cases": [["9 8 1000 999", "Alice"], ["9 8 1000 1000", "Draw"], ["9 8 2849 -1", "Bob"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [t,tt,r,rr]=input.trim().split(\" \").map(Number);\nif(r==-1 || rr==-1){\n  if(t>tt)console.log(\"Bob\");\n  else if(t<tt)console.log(\"Alice\");\n  else if(t==tt)console.log(\"Draw\");\n}\nelse if(r>rr)console.log(\"Alice\");\nelse if(r<rr)console.log(\"Bob\");\nelse if(r==rr)console.log(\"Draw\");\n", "language": "JavaScript"}
{"filename": "p02163_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar [a, b] = [\n    0x0,\n    0x1\n];\narr['forEach'](_0x5dfdf4 => {\n    var [_0x15d5b9, _0x379824] = _0x5dfdf4['split']('\\x20')['map'](Number);\n    if (_0x15d5b9 == 0x1) {\n        b *= _0x379824;\n        a *= _0x379824;\n    } else if (_0x15d5b9 == 0x2)\n        a -= _0x379824;\n    else if (_0x15d5b9 == 0x3)\n        a += _0x379824;\n});\nconsole['log'](a + '\\x20' + b);", "test_cases": [["3\n1 2\n2 10\n3 8", "-2 2"], ["10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10", "0 10000000000"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar [a,b]=[0,1];\narr.forEach(v=>{\n   var [q,x]=v.split(\" \").map(Number);\n   if(q==1){\n      b*=x;\n      a*=x;\n   }\n   else if(q==2)a-=x;\n   else if(q==3)a+=x;\n});\nconsole.log(a+\" \"+b);\n", "language": "JavaScript"}
{"filename": "p02182_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [n, m] = arr['shift']()['split']('\\x20')['map'](Number);\nvar cnt = 0x0;\nfor (var i = 0x0; i < n; i++) {\n    var s = arr[i];\n    var t = arr[i + n];\n    for (var j = 0x0; j < m; j++) {\n        if (s[j] != t[j])\n            cnt++;\n    }\n}\nconsole['log'](cnt);", "test_cases": [["2 3\n..#\n##.\n.##\n#..", "2"], ["7 28\n............................\n...#.....###...####....###..\n..#.#...#...#..#...#..#...#.\n.#...#..#......####...#.....\n.#####..#...#..#......#...#.\n.#...#...###...#.......###..\n............................\n............................\n..###....###.....##....###..\n.#...#..#...#...#.#...#...#.\n...##...#...#.....#....####.\n..#.....#...#.....#.......#.\n.#####...###....####...###..\n............................", "40"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,m]=arr.shift().split(\" \").map(Number);\nvar cnt=0;\nfor(var i=0;i<n;i++){\n   var s=arr[i];\n   var t=arr[i+n];\n   for(var j=0;j<m;j++){\n      if(s[j]!=t[j])cnt++;\n   }\n}\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p02189_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar min = Infinity;\nvar ans = -0x1;\nfor (var i = 0x0; i < n; i++) {\n    if (min > a[i]) {\n        ans = i;\n        min = a[i];\n    }\n}\nconsole['log'](ans + 0x1);", "test_cases": [["6\n8 6 9 1 2 1", "4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar min=Infinity;\nvar ans=-1;\nfor(var i=0;i<n;i++){\n   if(min>a[i]){\n      ans=i;\n      min=a[i];\n   }\n}\nconsole.log(ans+1);\n", "language": "JavaScript"}
{"filename": "p02190_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar s = new Set();\na['forEach'](_0x3174ec => s['add'](_0x3174ec));\nconsole['log'](s['size']);", "test_cases": [["6\n8 6 9 1 2 1", "5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar s= new Set();\na.forEach(v=>s.add(v));\nconsole.log(s.size);\n", "language": "JavaScript"}
{"filename": "p02191_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [n, q] = arr['shift']()['split']('\\x20')['map'](Number);\nvar ary = arr['shift']()['split']('\\x20')['map'](Number);\nary['sort']((_0x1d2135, _0x387070) => _0x1d2135 - _0x387070);\nvar tansaku = function (_0x4f90af, _0x5beca5) {\n    var _0x511b7d = -0x1;\n    var _0x5a50f1 = ary['length'];\n    while (_0x5a50f1 - _0x511b7d > 0x1) {\n        var _0x2bbd9f = _0x511b7d + Math['floor']((_0x5a50f1 - _0x511b7d) / 0x2);\n        if (ary[_0x2bbd9f] < _0x4f90af)\n            _0x511b7d = _0x2bbd9f;\n        else if (_0x5beca5 == 'ookii' && ary[_0x2bbd9f] == _0x4f90af)\n            _0x511b7d = _0x2bbd9f;\n        else\n            _0x5a50f1 = _0x2bbd9f;\n    }\n    return _0x5a50f1;\n};\nvar ans = [];\narr['forEach'](_0x5e65f => {\n    var [_0x1aaab2, _0x59253e] = _0x5e65f['split']('\\x20')['map'](Number);\n    ans['push'](tansaku(_0x59253e, 'ookii') - tansaku(_0x1aaab2, 'izyou'));\n});\nconsole['log'](ans['join']('\\x0a'));", "test_cases": [["6 3\n8 6 9 1 2 1\n2 8\n1 7\n3 5", "3\n4\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [n,q]=arr.shift().split(\" \").map(Number);\nvar ary=arr.shift().split(\" \").map(Number);\nary.sort((a,b)=>a-b);\nvar tansaku=function(x,str){\n    var first=-1;\n    var last=ary.length;\n    while (last-first>1){\n        var mid=first+Math.floor((last-first)/2);\n        if(ary[mid]<x)first=mid;\n        else if(str==\"ookii\" && ary[mid]==x)first=mid;\n        else last=mid;\n    }\n    return last;\n};\nvar ans=[];\narr.forEach(v=>{\n   var [l,r]=v.split(\" \").map(Number);\n   ans.push(tansaku(r,\"ookii\")-tansaku(l,\"izyou\"));\n});\nconsole.log(ans.join(\"\\n\"));\n", "language": "JavaScript"}
{"filename": "p02198_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](a * b);", "test_cases": [["3 4", "12"], ["7 7", "49"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b]=input.trim().split(\" \").map(Number);\nconsole.log(a*b);\n", "language": "JavaScript"}
{"filename": "p02199_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [a, b] = arr['shift']()['split']('\\x20')['map'](Number);\nvar [p, q, r] = arr['shift']()['split']('\\x20')['map'](Number);\nvar hanareta = b * p;\nvar tikaduita = (b - a) * q;\nvar d = hanareta - tikaduita;\nconsole['log']((d / (q + r) + b)['toFixed'](0xc));", "test_cases": [["14 86\n9 1 20", "119.428571428571"], ["1 4\n15 9 2", "7.000000000000"], ["67 87 \n7 4 51", "96.618181818182"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [a,b]=arr.shift().split(\" \").map(Number);\nvar [p,q,r]=arr.shift().split(\" \").map(Number);\nvar hanareta=b*p;\nvar tikaduita=(b-a)*q;\nvar d=hanareta-tikaduita;\nconsole.log((d/(q+r)+b).toFixed(12));\n", "language": "JavaScript"}
{"filename": "p02200_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar cnt = 0x0;\nfor (var i = 0x0; i < n - 0x1; i++) {\n    if (a[i] < a[i + 0x1])\n        cnt++;\n}\nconsole['log'](cnt);", "test_cases": [["5\n8 6 9 1 20", "2"], ["6\n3 3 4 3 3 4", "2"], ["10\n10 9 8 7 6 5 4 3 2 1", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar cnt=0;\nfor(var i=0;i<n-1;i++){\n   if(a[i]<a[i+1])cnt++;\n}\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p02201_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar cnt = 0x0;\narr['forEach'](_0x302e9a => {\n    if (_0x302e9a == 'E869120')\n        cnt++;\n});\nconsole['log'](cnt);", "test_cases": [["5\nE869120\nTMJN\nE869120\nTAISA\nYNYMXIAOLONGBAO", "2"], ["3\nSQUARE1001\nMENCOTTON\nB2563125", "0"], ["6\nE8691200\nE869121\nE869122\nE869123\nE869124\nE869125", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar cnt=0;\narr.forEach(v=>{\n   if(v==\"E869120\")cnt++;\n});\nconsole.log(cnt);\n", "language": "JavaScript"}
{"filename": "p02202_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar v = arr['shift']()['split']('\\x20')['map'](Number);\nvar sum = 0x0;\nfor (var i = 0x0; i < n; i++) {\n    sum += v[i] - (i + 0x1);\n}\nconsole['log'](sum);", "test_cases": [["1\n59549", "59548"], ["5\n2 1 8 5 7", "8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar v=arr.shift().split(\" \").map(Number);\nvar sum=0;\nfor(var i=0;i<n;i++){\n   sum+=v[i]-(i+1);\n}\nconsole.log(sum);\n", "language": "JavaScript"}
{"filename": "p02203_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar v = arr['shift']()['split']('\\x20')['map'](Number);\nvar cnt = 0x1;\nfor (var i = 0x0; i < n - 0x1; i++) {\n    if (v[i] >= v[i + 0x1])\n        cnt++;\n}\nconsole['log'](cnt);\nconsole['log'](n);", "test_cases": [["5\n8 6 9 1 20", "3\n5"], ["6\n3 3 4 3 3 4", "4\n6"], ["8\n5 5 4 4 3 3 2 2", "8\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar v=arr.shift().split(\" \").map(Number);\nvar cnt=1;\nfor(var i=0;i<n-1;i++){\n   if(v[i]>=v[i+1])cnt++;\n}\nconsole.log(cnt);\nconsole.log(n);\n", "language": "JavaScript"}
{"filename": "p02204_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar [m, n] = arr['shift']()['split']('\\x20')['map'](Number);\nvar a = arr['shift']()['split']('\\x20');\nif (m == 0x2) {\n    var cnt = [\n        0x0,\n        0x0\n    ];\n    for (var i = 0x0; i < n; i++) {\n        if (a[i] - 0x1 == i % 0x2)\n            cnt[0x0]++;\n        if (a[i] - 0x1 == (i + 0x1) % 0x2)\n            cnt[0x1]++;\n    }\n    console['log'](Math['min'](...cnt));\n} else {\n    var cnt = 0x0;\n    for (var i = 0x1; i < n; i++) {\n        if (a[i - 0x1] == a[i]) {\n            cnt++;\n            i++;\n        }\n    }\n    console['log'](cnt);\n}", "test_cases": [["2 3\n2 2 1", "1"], ["3 6\n1 1 1 2 2 3", "2"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\"\\n\");\nvar [m,n]=arr.shift().split(\" \").map(Number);\nvar a=arr.shift().split(\" \");\nif(m==2){\n   var cnt=[0,0];\n   for(var i=0;i<n;i++){\n      if(a[i]-1==i%2)cnt[0]++;\n      if(a[i]-1==(i+1)%2)cnt[1]++;\n   }\n   console.log(Math.min(...cnt));\n}else{\n   var cnt=0;\n   for(var i=1;i<n;i++){\n      if(a[i-1] == a[i]){\n         cnt++;\n         i++;\n      }\n   }\n   console.log(cnt);\n}\n", "language": "JavaScript"}
{"filename": "p02212_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x20')['map'](Number);\nvar [a, b, c, d] = arr['sort']((_0x199f14, _0x28c2d8) => _0x28c2d8 - _0x199f14);\nconsole['log'](Math['abs'](a + d - (b + c)));", "test_cases": [["2 1 3 4", "0"], ["64 224 239 1024", "625"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr=input.trim().split(\" \").map(Number);\nvar [a,b,c,d]=arr.sort((a,b)=>b-a);\nconsole.log(Math.abs((a+d)-(b+c)));\n", "language": "JavaScript"}
{"filename": "p02439_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar [a, b, c] = input['trim']()['split']('\\x20')['map'](Number);\nconsole['log'](Math['min'](a, b, c) + '\\x20' + Math['max'](a, b, c));", "test_cases": [["4 5 3", "3 5"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar [a,b,c]=input.trim().split(\" \").map(Number);\nconsole.log(Math.min(a,b,c)+\" \"+Math.max(a,b,c));\n", "language": "JavaScript"}
{"filename": "p02441_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar q = arr['shift']() - 0x0;\nvar s = '';\nfor (var i = 0x0; i < q; i++) {\n    var [b, e, k] = arr[i]['split']('\\x20')['map'](Number);\n    var cnt = 0x0;\n    for (var j = b; j < e; j++) {\n        if (a[j] == k)\n            cnt++;\n    }\n    s += cnt + '\\x0a';\n}\nconsole['log'](s['trim']());", "test_cases": [["9\n1 4 1 4 2 1 3 5 6\n3\n0 9 1\n1 6 1\n3 7 5", "3\n2\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [b,e,k]=arr[i].split(\" \").map(Number);\n   var cnt = 0;\n   for(var j=b;j<e;j++){\n      if(a[j]==k)cnt++;\n   }\n   s+=cnt+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript"}
{"filename": "p02442_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar m = arr['shift']() - 0x0;\nvar b = arr['shift']()['split']('\\x20')['map'](Number);\nfor (var i = 0x0; i < m; i++) {\n    if (a['length'] - 0x1 < i || b[i] > a[i]) {\n        console['log'](0x1);\n        break;\n    } else if (b[i] < a[i]) {\n        console['log'](0x0);\n        break;\n    }\n}\nif (i == m)\n    console['log'](0x0);", "test_cases": [["3\n1 2 3\n2\n2 4", "1"], ["4\n5 4 7 0\n5\n1 2 3 4 5", "0"], ["3\n1 1 2\n4\n1 1 2 2", "1"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar m=arr.shift()-0;\nvar b=arr.shift().split(\" \").map(Number);\nfor(var i=0;i<m;i++){\n   if(a.length-1<i || b[i]>a[i]){\n      console.log(1);\n      break;\n   }else if(b[i]<a[i]){\n      console.log(0);\n      break;\n   }\n}\nif(i==m)console.log(0);\n", "language": "JavaScript"}
{"filename": "p02443_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar q = arr['shift']() - 0x0;\nvar s = '';\nfor (var i = 0x0; i < q; i++) {\n    var [b, e] = arr[i]['split']('\\x20')['map'](Number);\n    var x = a['slice'](0x0, b);\n    var y = a['slice'](b, e)['reverse']();\n    var z = a['slice'](e);\n    a = x['concat'](y, z);\n}\nconsole['log'](a['join']('\\x20'));", "test_cases": [["8\n1 2 3 4 5 6 7 8\n2\n1 6\n3 8", "1 6 5 8 7 2 3 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   var [b,e]=arr[i].split(\" \").map(Number);\n   var x=a.slice(0,b);\n   var y=a.slice(b,e).reverse();\n   var z=a.slice(e);\n   a = x.concat(y,z);\n}\nconsole.log(a.join(\" \"));\n", "language": "JavaScript"}
{"filename": "p02445_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar q = arr['shift']() - 0x0;\nfor (var i = 0x0; i < q; i++) {\n    var [b, e, t] = arr[i]['split']('\\x20')['map'](Number);\n    var k = e - b;\n    for (var j = 0x0; j < k; j++) {\n        [a[b + j], a[t + j]] = [\n            a[t + j],\n            a[b + j]\n        ];\n    }\n}\nconsole['log'](a['join']('\\x20'));", "test_cases": [["11\n1 2 3 4 5 6 7 8 9 10 11\n1\n1 4 7", "1 8 9 10 5 6 7 2 3 4 11"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar q=arr.shift()-0;\nfor(var i=0;i<q;i++){\n   var [b,e,t]=arr[i].split(\" \").map(Number);\n   var k=e-b;\n   for(var j=0;j<k;j++){\n      [a[b+j],a[t+j]]= [a[t+j], a[b+j]];\n   }\n}\nconsole.log(a.join(\" \"));\n", "language": "JavaScript"}
{"filename": "p02446_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar b = [];\nvar memo = '';\nfor (var i = 0x0; i < a['length']; i++) {\n    if (a[i] !== memo)\n        b['push'](a[i]);\n    memo = a[i];\n}\nconsole['log'](b['join']('\\x20'));", "test_cases": [["4\n1 2 2 4", "1 2 4"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar b=[];\nvar memo=\"\";\nfor(var i=0;i<a.length;i++){\n   if(a[i]!==memo)b.push(a[i]);\n   memo=a[i];\n}\nconsole.log(b.join(\" \"));\n", "language": "JavaScript"}
{"filename": "p02447_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = [];\nfor (var i = 0x0; i < n; i++)\n    a['push'](arr[i]['split']('\\x20')['map'](Number));\na['sort'](function (_0x26f279, _0x160f19) {\n    if (_0x26f279[0x0] != _0x160f19[0x0])\n        return _0x26f279[0x0] - _0x160f19[0x0];\n    else\n        return _0x26f279[0x1] - _0x160f19[0x1];\n});\nconsole['log'](a['join']('\\x0a')['replace'](/,/g, '\\x20'));", "test_cases": [["5\n4 7\n5 5\n2 3\n6 8\n2 1", "2 1\n2 3\n4 7\n5 5\n6 8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=[];\nfor(var i=0;i<n;i++)a.push(arr[i].split(\" \").map(Number));\na.sort(function(a,b){\n   if(a[0]!=b[0]) return a[0]-b[0];\n   else return a[1]-b[1];\n});\nconsole.log(a.join(\"\\n\").replace(/,/g,\" \"));\n", "language": "JavaScript"}
{"filename": "p02451_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20');\nvar myMap = new Map();\nfor (var i = 0x0; i < n; i++) {\n    myMap['set'](a[i], 0x0);\n}\nvar q = arr['shift']();\nvar s = '';\nfor (var i = 0x0; i < q; i++) {\n    s += (myMap['has'](arr[i]) ? 0x1 : 0x0) + '\\x0a';\n}\nconsole['log'](s['trim']());", "test_cases": [["4\n1 2 2 4\n3\n2\n3\n5", "1\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \");\nvar myMap = new Map();\nfor(var i=0;i<n;i++){\n   myMap.set(a[i], 0);\n}\nvar q=arr.shift();\nvar s=\"\";\nfor(var i=0;i<q;i++){\n   s+=((myMap.has(arr[i]))?1:0)+\"\\n\";\n}\nconsole.log(s.trim());\n", "language": "JavaScript"}
{"filename": "p02452_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar n = arr['shift']() - 0x0;\nvar a = arr['shift']()['split']('\\x20')['map'](Number);\nvar m = arr['shift']() - 0x0;\nvar b = arr['shift']()['split']('\\x20')['map'](Number);\nvar memo = 0x0;\nvar cnt = 0x0;\nfor (var i = 0x0; i < m; i++) {\n    var num = b[i];\n    for (var j = memo; j < n; j++) {\n        memo = j;\n        if (num == a[j]) {\n            cnt++;\n            break;\n        }\n    }\n}\nconsole['log'](cnt == m ? 0x1 : 0x0);", "test_cases": [["4\n1 2 3 4\n2\n2 4", "1"], ["4\n1 2 3 4\n3\n1 2 5", "0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar n=arr.shift()-0;\nvar a=arr.shift().split(\" \").map(Number);\nvar m=arr.shift()-0;\nvar b=arr.shift().split(\" \").map(Number);\nvar memo=0;\nvar cnt = 0;\nfor(var i=0;i<m;i++){\n   var num=b[i];\n   for(var j=memo;j<n;j++){\n      memo=j;\n      if(num==a[j]){\n         cnt++;\n         break;\n      }\n   }\n}\nconsole.log((cnt==m)?1:0);\n", "language": "JavaScript"}
{"filename": "p02455_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar q = arr['shift']() - 0x0;\nvar str = '';\nvar set = new Set();\nfor (var i = 0x0; i < q; i++) {\n    var [a, b] = arr[i]['split']('\\x20');\n    if (a == '0') {\n        set['add'](b);\n        str += set['size'] + '\\x0a';\n    } else {\n        str += (set['has'](b) ? 0x1 : 0x0) + '\\x0a';\n    }\n}\nconsole['log'](str['trim']());", "test_cases": [["7\n0 1\n0 2\n0 3\n0 2\n0 4\n1 3\n1 10", "1\n2\n3\n3\n4\n1\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar  set = new Set();\nfor(var i=0;i<q;i++){\n   var [a,b]=arr[i].split(\" \");\n   if(a==\"0\"){\n      set.add(b);\n      str+=set.size+\"\\n\";\n   }else {\n      str+=((set.has(b))?1:0)+\"\\n\";\n   }\n}\nconsole.log(str.trim());\n", "language": "JavaScript"}
{"filename": "p02456_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar q = arr['shift']() - 0x0;\nvar str = '';\nvar set = new Map();\nfor (var i = 0x0; i < q; i++) {\n    var [a, b] = arr[i]['split']('\\x20');\n    if (a == '0') {\n        set['set'](b, 0x0);\n        str += set['size'] + '\\x0a';\n    } else if (a == '1') {\n        str += (set['has'](b) ? 0x1 : 0x0) + '\\x0a';\n    } else {\n        set['delete'](b);\n    }\n}\nconsole['log'](str['trim']());", "test_cases": [["8\n0 1\n0 2\n0 3\n2 2\n1 1\n1 2\n1 3\n0 2", "1\n2\n3\n1\n0\n1\n3"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar  set = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b]=arr[i].split(\" \");\n   if(a==\"0\"){\n      set.set(b,0);\n      str+=set.size+\"\\n\";\n   }else if(a==\"1\") {\n      str+=((set.has(b))?1:0)+\"\\n\";\n   } else{\n      set.delete(b);\n   }\n}\nconsole.log(str.trim());\n", "language": "JavaScript"}
{"filename": "p02459_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar q = arr['shift']() - 0x0;\nvar str = '';\nvar map = new Map();\nfor (var i = 0x0; i < q; i++) {\n    var [a, b, c] = arr[i]['split']('\\x20');\n    if (a == '0')\n        map['set'](b, c);\n    else\n        str += map['get'](b) + '\\x0a';\n}\nconsole['log'](str['trim']());", "test_cases": [["7\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n0 black 8\n1 black", "1\n4\n8"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar map = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b,c]=arr[i].split(\" \");\n   if(a==\"0\")map.set(b,c);\n   else str+=map.get(b) + \"\\n\";\n}\nconsole.log(str.trim());\n", "language": "JavaScript"}
{"filename": "p02460_1", "type": "JavaScript", "obfuscated": "var input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar arr = input['trim']()['split']('\\x0a');\nvar q = arr['shift']() - 0x0;\nvar str = '';\nvar map = new Map();\nfor (var i = 0x0; i < q; i++) {\n    var [a, b, c] = arr[i]['split']('\\x20');\n    if (a == '0')\n        map['set'](b, c);\n    else if (a == '1')\n        str += (map['has'](b) ? map['get'](b) : '0') + '\\x0a';\n    else\n        map['delete'](b);\n}\nconsole['log'](str['trim']());", "test_cases": [["8\n0 blue 4\n0 red 1\n0 white 5\n1 red\n1 blue\n2 red\n1 black\n1 red", "1\n4\n0\n0"]], "original": "var input = require('fs').readFileSync('/dev/stdin', 'utf8');\nvar arr = input.trim().split(\"\\n\");\nvar q=arr.shift()-0;\nvar str=\"\";\nvar map = new Map();\nfor(var i=0;i<q;i++){\n   var [a,b,c]=arr[i].split(\" \");\n   if(a==\"0\")map.set(b,c);\n   else if(a==\"1\")str+=((map.has(b)) ? map.get(b) : \"0\") + \"\\n\";\n   else map.delete(b);\n}\nconsole.log(str.trim());\n", "language": "JavaScript"}
{"filename": "p02471_1", "type": "JavaScript", "obfuscated": "function euc(_0x5d7f8a, _0x237796) {\n    var _0x13eace = _0x5d7f8a;\n    var _0x37c0de = _0x237796;\n    var _0x55db5d = 0x1;\n    var _0x1ecd1f = 0x0;\n    var _0x9993d0 = 0x0;\n    var _0x556e23 = 0x1;\n    while (_0x37c0de > 0x0) {\n        var _0x1762f8 = Math['floor'](_0x13eace / _0x37c0de);\n        var _0x47ba81 = _0x13eace % _0x37c0de;\n        var _0x7a804c = _0x55db5d - _0x1762f8 * _0x1ecd1f;\n        var _0x2cffe8 = _0x9993d0 - _0x1762f8 * _0x556e23;\n        _0x13eace = _0x37c0de;\n        _0x37c0de = _0x47ba81;\n        _0x55db5d = _0x1ecd1f;\n        _0x1ecd1f = _0x7a804c;\n        _0x9993d0 = _0x556e23;\n        _0x556e23 = _0x2cffe8;\n    }\n    return [\n        _0x55db5d,\n        _0x9993d0\n    ];\n}\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']();\nvar nums = input['split']('\\x20')['map'](function (_0x46aede) {\n    return +_0x46aede;\n});\nvar a = nums[0x0];\nvar b = nums[0x1];\nconsole['log'](euc(a, b)['join']('\\x20'));", "test_cases": [["4 12", "1 0"], ["3 8", "3 -1"]], "original": "function euc(a, b) {\n    var r0 = a;\n    var r1 = b;\n    var x0 = 1;\n    var x1 = 0;\n    var y0 = 0;\n    var y1 = 1;\n\n    while (r1 > 0) {\n        var q = Math.floor(r0 / r1);\n        var r2 = r0 % r1;\n        var x2 = x0 - q * x1;\n        var y2 = y0 - q * y1;\n\n        r0 = r1;\n        r1 = r2;\n        x0 = x1;\n        x1 = x2;\n        y0 = y1;\n        y1 = y2;\n    }\n    return [x0, y0];\n}\n\nvar input = require('fs').readFileSync('/dev/stdin', 'utf8').trim();\nvar nums = input.split(' ').map(function(num){return +num;});\nvar a = nums[0];\nvar b = nums[1];\n\nconsole.log(euc(a, b).join(' '));", "language": "JavaScript"}
{"filename": "p02697_1", "type": "JavaScript", "obfuscated": "const processData = _0x28f850 => {\n    let [_0x2756d0, _0x22e33f] = _0x28f850[0x0]['split']('\\x20')['map'](_0x51e55a => +_0x51e55a);\n    if (_0x2756d0 % 0x2 === 0x1) {\n        let _0xd67cfc = _0x2756d0 - 0x1;\n        let _0x10a45c = 0x1;\n        while (_0x22e33f) {\n            console['log'](_0x10a45c++ + '\\x20' + _0xd67cfc--);\n            _0x22e33f--;\n        }\n    } else {\n        let _0x35cff0 = _0x2756d0 / 0x2 + 0x1;\n        let _0x5168c7 = _0x2756d0 / 0x2;\n        while (_0x22e33f) {\n            console['log'](_0x5168c7-- + '\\x20' + _0x35cff0++);\n            _0x22e33f--;\n        }\n    }\n};\nlet i = '';\nprocess['stdin']['on']('data', _0x580253 => i += _0x580253);\nprocess['stdin']['on']('end', () => {\n    const {EOL: _0x39a2dc} = require('os');\n    const _0x430b23 = i['split'](_0x39a2dc);\n    processData(_0x430b23);\n});", "test_cases": [["4 1", "2 3"], ["7 3", "1 6\n2 5\n3 4"]], "original": "const processData = (lines) => {\n  let [n, m] = lines[0].split(' ').map(x => +x)\n  if (n%2 === 1) {\n    let end = n - 1\n    let start = 1\n    while (m) {\n      console.log(`${start++} ${end--}`)\n      m--\n    }\n  } else {\n    let end = n/2+1\n    let start = n/2\n    while (m) {\n      console.log(`${start--} ${end++}`)\n      m--\n    }\n  }\n}\n\nlet i = ''\nprocess.stdin.on('data', c => i += c)\nprocess.stdin.on('end', () => {\n  const {EOL} = require('os')\n  const lines = i.split(EOL) /*your input text, split by lines*/\n  processData(lines)\n})\n", "language": "JavaScript"}
{"filename": "p02882_1", "type": "JavaScript", "obfuscated": "inp = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\\x0a');\nl = inp['shift']()['split']('\\x20');\na = l['shift']() * 0x1;\nb = l['shift']() * 0x1;\nx = l['shift']() * 0x1;\nl = 0x0;\nr = 0x5a;\nmid = 0x2d;\nc = 0x0;\nS = a * a * b;\nif (S / 0x2 < x) {\n    while (l < r) {\n        s = S - a * a * Math['tan'](mid / 0xb4 * Math['PI']) / 0x2 * a;\n        if (x < s) {\n            l = mid;\n        } else {\n            r = mid;\n        }\n        mid = (l + r) / 0x2;\n        c++;\n        if (c > 0xc8) {\n            break;\n        }\n    }\n    console['log'](mid['toFixed'](0xa));\n} else {\n    while (l < r) {\n        s = b * b * Math['tan'](mid / 0xb4 * Math['PI']) / 0x2 * a;\n        if (x < s) {\n            r = mid;\n        } else {\n            l = mid;\n        }\n        mid = (l + r) / 0x2;\n        c++;\n        if (c > 0xc8) {\n            break;\n        }\n    }\n    console['log']((0x5a - mid)['toFixed'](0xa));\n}", "test_cases": [["2 2 4", "45.0000000000"], ["12 21 10", "89.7834636934"], ["3 1 8", "4.2363947991"]], "original": "inp = require('fs').readFileSync('/dev/stdin', 'utf8').trim().split('\\n')\nl = inp.shift().split(' ')\na = l.shift() * 1\nb = l.shift() * 1 \nx = l.shift() * 1\nl = 0\nr = 90\nmid = 45\nc = 0\nS = a * a * b\nif (S / 2 < x) {\n    while (l<r) {\n        s = S - (a * a * Math.tan(mid / 180 * Math.PI)) / 2 * a\n        if (x < s) {\n            l = mid\n        } else {\n            r = mid\n        }\n        mid = (l + r) / 2\n        c++\n        if (c>200) {\n            break;\n        }\n    }    \n    console.log(mid.toFixed(10))\n} else {\n    while (l<r) {\n        s = (b * b * Math.tan(mid / 180 * Math.PI)) / 2 * a\n        if (x < s) {\n            r = mid\n        } else {\n            l = mid\n        }\n        mid = (l + r) / 2\n        c++\n        if (c>200) {\n            break;\n        }\n    }  \n    console.log((90 - mid).toFixed(10))\n}", "language": "JavaScript"}
{"filename": "p02902_1", "type": "JavaScript", "obfuscated": "function Main(_0x472ebc) {\n    _0x472ebc = _0x472ebc['split']('\\x0a');\n    if (_0x472ebc[_0x472ebc['length'] - 0x1] === '') {\n        _0x472ebc['pop']();\n    }\n    const _0x546998 = _0x472ebc[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x563c45 = _0x472ebc[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0xd21c22 = [];\n    for (var _0x522b23 = 0x0; _0x522b23 <= _0x546998; _0x522b23++) {\n        _0xd21c22['push']([]);\n    }\n    for (var _0x522b23 = 0x1; _0x522b23 < _0x472ebc['length']; _0x522b23++) {\n        _0xd21c22[_0x472ebc[_0x522b23]['split']('\\x20')[0x0] - 0x0]['push'](_0x472ebc[_0x522b23]['split']('\\x20')[0x1] - 0x0);\n    }\n    var _0x5287de = [];\n    for (var _0x522b23 = 0x1; _0x522b23 <= _0x546998; _0x522b23++) {\n        _0x5287de['push']([_0x522b23]);\n    }\n    var _0x3c2e3f;\n    var _0x407e1c;\n    while (_0x5287de['length'] > 0x0) {\n        _0x407e1c = '';\n        _0x3c2e3f = [];\n        _0x5287de['forEach'](_0x193cc2 => {\n            _0xd21c22[_0x193cc2[_0x193cc2['length'] - 0x1]]['forEach'](_0x17f24a => {\n                _0x3c2e3f['push'](_0x193cc2['concat']([_0x17f24a]));\n            });\n        });\n        _0x5287de = _0x3c2e3f['slice']();\n        _0x5287de['forEach'](_0x3923e8 => {\n            if (_0x3923e8[_0x3923e8['length'] - 0x1] === _0x3923e8[0x0]) {\n                _0x3c2e3f = _0x3923e8['slice']();\n                _0x3c2e3f['shift']();\n                _0x407e1c = _0x3c2e3f['length'] + '\\x0a' + _0x3c2e3f['join']('\\x0a');\n            }\n        });\n        if (_0x407e1c !== '') {\n            console['log'](_0x407e1c);\n            return;\n        }\n    }\n    console['log'](-0x1);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4 5\n1 2\n2 3\n2 4\n4 1\n4 3", "3\n1\n2\n4"], ["4 5\n1 2\n2 3\n2 4\n1 4\n4 3", "-1"], ["6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n5 1\n5 2\n6 1\n6 2", "4\n2\n3\n4\n5"]], "original": "\n\nfunction Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const M=input[0].split(' ')[1]-0;\n  var direct=[];\n  for(var i=0;i<=N;i++){\n    direct.push([]);\n  }\n  for(var i=1;i<input.length;i++){\n    direct[input[i].split(' ')[0]-0].push(input[i].split(' ')[1]-0);\n  }\n  var memo=[];\n  for(var i=1;i<=N;i++){\n    memo.push([i]);\n  }\n  var temp;\n  var str;\n  while(memo.length>0){\n    str='';\n    temp=[];\n    memo.forEach(e=>{\n      direct[e[e.length-1]].forEach(f=>{\n        temp.push(e.concat([f]));\n      });\n    });\n    memo=temp.slice();\n    memo.forEach(e=>{\n      if(e[e.length-1]===e[0]){\n        temp=e.slice();\n        temp.shift();\n        str=temp.length+\"\\n\"+temp.join(\"\\n\");\n      }\n    });\n    if(str!==''){\n      console.log(str);\n      return;\n    }\n  }\n  console.log(-1);\n}\n\n\n\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03043_1", "type": "JavaScript", "obfuscated": "function main(_0x277262) {\n    _0x277262 = _0x277262['split']('\\x20')['map'](Number);\n    const _0x44edc8 = _0x277262[0x0];\n    const _0x5cfac3 = _0x277262[0x1];\n    var _0x5a8ce3 = 0x0;\n    for (i = 0x1; i <= _0x44edc8; i++) {\n        var _0x93f642 = 0x1 / _0x44edc8;\n        var _0x37dcb7 = i;\n        while (_0x37dcb7 < _0x5cfac3) {\n            _0x37dcb7 *= 0x2;\n            _0x93f642 /= 0x2;\n        }\n        _0x5a8ce3 += _0x93f642;\n    }\n    console['log'](_0x5a8ce3['toString']()['slice'](0x0, 0xe));\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 10", "0.145833333333"], ["100000 5", "0.999973749998"]], "original": "function main(input){\n  input = input.split(' ').map(Number);\n  const N = input[0];\n  const K = input[1];\n  \n  var result = 0;\n  \n  for(i = 1;i <= N;i++){\n    var tmp = 1/N;\n  \tvar now = i;\n  \twhile(now < K){\n      now *= 2;\n      tmp /= 2;\n    }\n    result += tmp;\n  }\n  \n  console.log(result.toString().slice(0,14));\n}\nmain(require('fs').readFileSync('/dev/stdin','utf8'));\n\n", "language": "JavaScript"}
{"filename": "p03454_1", "type": "JavaScript", "obfuscated": "function Main(_0x22d56e) {\n    const _0x24d475 = parseInt(_0x22d56e);\n    const _0x7b86fd = 0x3b9aca00 + 0x7;\n    var _0x220369 = 0x0, _0x1d900f = 0x1;\n    do {\n        if (_0x24d475 <= Math['pow'](0xa, _0x1d900f - 0x1) * 0x9 * _0x1d900f)\n            _0x220369 = _0x1d900f;\n        _0x1d900f++;\n    } while (!_0x220369);\n    _0x1d900f = Math['floor'](_0x24d475 / _0x220369);\n    var _0x10e2ff = 0x0;\n    var _0x270e72 = Math['pow'](0xa, _0x220369 - 0x1), _0x30f1fd = _0x270e72 + _0x1d900f - 0x1;\n    var _0x42196c = _0x1d900f * f(_0x270e72);\n    do {\n        if (_0x24d475 % _0x1d900f)\n            _0x10e2ff++;\n        else\n            _0x10e2ff += powmod(0xa, _0x24d475 / _0x1d900f - 0x1, _0x7b86fd) * 0x9 - _0x1d900f + 0x1;\n    } while (--_0x1d900f);\n    while (--_0x270e72) {\n        _0x42196c += f(_0x270e72);\n        if (_0x42196c > _0x24d475)\n            _0x42196c -= f(_0x30f1fd--);\n        if (_0x42196c === _0x24d475)\n            _0x10e2ff++;\n    }\n    console['log']((_0x10e2ff + _0x7b86fd) % _0x7b86fd);\n}\nfunction powmod(_0x4d0a04, _0x3597e4, _0x3a7836) {\n    const _0xd6cecd = 0x2710;\n    var _0x5d7a06 = 0x1;\n    while (_0x3597e4) {\n        if (_0x3597e4 & 0x1)\n            _0x5d7a06 = (Math['floor'](_0x4d0a04 / _0xd6cecd) * _0x5d7a06 % _0x3a7836 * _0xd6cecd + _0x4d0a04 % _0xd6cecd * _0x5d7a06) % _0x3a7836;\n        _0x4d0a04 = (Math['floor'](_0x4d0a04 / _0xd6cecd) * _0x4d0a04 % _0x3a7836 * _0xd6cecd + _0x4d0a04 % _0xd6cecd * _0x4d0a04) % _0x3a7836;\n        _0x3597e4 >>>= 0x1;\n    }\n    return _0x5d7a06;\n}\nfunction f(_0xb1bf80) {\n    if (_0xb1bf80 < 0xa)\n        return 0x1;\n    if (_0xb1bf80 < 0x64)\n        return 0x2;\n    if (_0xb1bf80 < 0x3e8)\n        return 0x3;\n    if (_0xb1bf80 < 0x2710)\n        return 0x4;\n    if (_0xb1bf80 < 0x186a0)\n        return 0x5;\n    if (_0xb1bf80 < 0xf4240)\n        return 0x6;\n    if (_0xb1bf80 < 0x989680)\n        return 0x7;\n    return 0x8;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["1", "9"], ["2", "98"], ["123", "460191684"], ["36018", "966522825"], ["1000", "184984484"]], "original": "function Main(input) {\n\tconst S = parseInt(input);\n\tconst MOD = 1e9 + 7;\n\tvar upr = 0, i = 1;\n\tdo{\n\t\tif(S <= Math.pow(10, i - 1) * 9 * i)upr = i;\n\t\ti++;\n\t}while(!upr)\n\t\n\ti = Math.floor(S / upr);\n\tvar ans = 0;\n\tvar l = Math.pow(10, upr - 1), r = l + i - 1;\n\tvar flr = i * f(l);\n\tdo{\n\t\tif(S % i)ans++;\n\t\telse ans += powmod(10, S / i - 1, MOD) * 9 - i + 1;\n\t}while(--i)\n\t\n\twhile(--l){\n\t\tflr += f(l);\n\t\tif(flr > S)flr -= f(r--);\n\t\tif(flr === S)ans++;\n\t}\n\t\n\tconsole.log((ans + MOD) % MOD);\n}\n\nfunction powmod(a, b, c){//a^b%c\n\tconst N = 1e4;//オーバーフロー防止\n\tvar rt = 1;\n\twhile(b){\n\t\tif(b & 1) rt = (Math.floor(a / N) * rt % c * N + a % N * rt) % c;\n\t\ta = (Math.floor(a / N) * a % c * N + a % N * a) % c\n\t\tb >>>= 1;\n\t}\n\treturn rt;\n}\n\nfunction f(n){\n\tif(n < 10)return 1;\n\tif(n < 100)return 2;\n\tif(n < 1000)return 3;\n\tif(n < 10000)return 4;\n\tif(n < 100000)return 5;\n\tif(n < 1000000)return 6;\n\tif(n < 10000000)return 7;\n\treturn 8;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03459_1", "type": "JavaScript", "obfuscated": "var GET = (function () {\n    function _0x267118(_0xd9df34) {\n        return new _0x5a2c24(_0xd9df34);\n    }\n    function _0x5a2c24(_0x59b018) {\n        this['_s'] = _0x59b018['trim']()['split']('\\x0a');\n        this['_y'] = 0x0;\n    }\n    _0x5a2c24['prototype']['a'] = function (_0x453ef9) {\n        var _0x224199 = this['_s'], _0x14faba = this['_y'], _0xe44c;\n        if (typeof _0x224199[_0x14faba] === 'string')\n            _0x224199[_0x14faba] = _0x224199[_0x14faba]['split']('\\x20')['reverse']();\n        _0xe44c = _0x224199[_0x14faba]['pop']();\n        if (!_0x224199[_0x14faba]['length'])\n            this['_y']++;\n        return _0x453ef9 ? _0xe44c : +_0xe44c;\n    };\n    _0x5a2c24['prototype']['l'] = function (_0x48664e) {\n        var _0x2dc905 = this['_s'][this['_y']++]['split']('\\x20');\n        return _0x48664e ? _0x2dc905 : _0x2dc905['map'](_0x737ed7 => +_0x737ed7);\n    };\n    _0x5a2c24['prototype']['m'] = function (_0x38e3b9, _0x7b3a0c) {\n        var _0x62782e = this['_s']['slice'](this['_y'], this['_y'] += _0x38e3b9)['map'](_0x5d20c9 => _0x5d20c9['split']('\\x20'));\n        return _0x7b3a0c ? _0x62782e : _0x62782e['map'](_0x5b62fa => _0x5b62fa['map'](_0x4fe413 => +_0x4fe413));\n    };\n    _0x5a2c24['prototype']['r'] = function (_0x2e892b, _0x4eb603) {\n        var _0x364a52 = this['_s']['slice'](this['_y'], this['_y'] += _0x2e892b);\n        return _0x4eb603 ? _0x364a52 : _0x364a52['map'](_0x1adcf3 => +_0x1adcf3);\n    };\n    return _0x267118;\n}());\nvar o = GET(require('fs')['readFileSync']('/dev/stdin', 'utf8'));\nconsole['log'](main());\nfunction main() {\n    var _0xb8eefa = o['a']();\n    var _0x5f0fe5 = o['m'](_0xb8eefa);\n    var _0x4098e0 = 0x0, _0x438b29 = 0x0, _0x10f9ec = 0x0;\n    for (var _0x27805a = 0x0; _0x27805a < _0xb8eefa; _0x27805a++) {\n        var _0x35d4a0 = Math['abs'](_0x438b29 - _0x5f0fe5[_0x27805a][0x1]);\n        _0x35d4a0 += Math['abs'](_0x10f9ec - _0x5f0fe5[_0x27805a][0x2]);\n        var _0x54c1ac = _0x5f0fe5[_0x27805a][0x0] - _0x4098e0;\n        if (_0x35d4a0 > _0x54c1ac || _0x35d4a0 % 0x2 !== _0x54c1ac % 0x2)\n            return 'No';\n        _0x438b29 = _0x5f0fe5[_0x27805a][0x1];\n        _0x10f9ec = _0x5f0fe5[_0x27805a][0x2];\n        _0x4098e0 = _0x5f0fe5[_0x27805a][0x0];\n    }\n    return 'Yes';\n}", "test_cases": [["2\n3 1 2\n6 1 1", "Yes"], ["1\n2 100 100", "No"], ["2\n5 1 1\n100 1 1", "No"]], "original": "var GET=(function(){function f(s){return new g(s);}function g(s){this._s=s.trim().split(\"\\n\");this._y=0;}g.prototype.a=function(f){var s=this._s, y=this._y, r;if(typeof s[y]===\"string\")s[y]=s[y].split(\" \").reverse();r=s[y].pop();if(!s[y].length)this._y++;return f?r:+r;};g.prototype.l=function(f){var s=this._s[this._y++].split(\" \");return f?s:s.map(a=>+a);};g.prototype.m=function(n,f){var r=this._s.slice(this._y,this._y+=n).map(a=>a.split(\" \"));return f?r:r.map(a=>a.map(a=>+a));};g.prototype.r=function(n,f){var r=this._s.slice(this._y,this._y+=n);return f?r:r.map(a=>+a);};return f;})();\nvar o=GET(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n\nconsole.log(main());\nfunction main(){\n  var n = o.a();\n  var m = o.m(n);\n  var t = 0, x = 0, y = 0;\n  for(var i = 0; i < n; i++){\n    var dxy = Math.abs(x - m[i][1]);\n    dxy += Math.abs(y - m[i][2]);\n    var dt = m[i][0] - t;\n    if(dxy > dt || dxy % 2 !== dt % 2)return \"No\";\n    x = m[i][1]; y = m[i][2]; t = m[i][0];\n  }\n  return \"Yes\";\n}", "language": "JavaScript"}
{"filename": "p03552_1", "type": "JavaScript", "obfuscated": "function Main(_0x331357) {\n    _0x331357 = _0x331357['split']('\\x0a');\n    if (_0x331357[_0x331357['length'] - 0x1] === '') {\n        _0x331357['pop']();\n    }\n    const _0x52be6d = _0x331357[0x0]['split']('\\x20')[0x0] - 0x0;\n    const _0x140c9f = _0x331357[0x0]['split']('\\x20')[0x1] - 0x0;\n    const _0x35921e = _0x331357[0x0]['split']('\\x20')[0x2] - 0x0;\n    const _0x27d241 = _0x331357[0x1]['split']('\\x20')['map'](_0x3023a4 => {\n        return _0x3023a4 - 0x0;\n    });\n    if (_0x27d241['length'] === 0x1) {\n        console['log'](Math['abs'](_0x35921e - _0x27d241[0x0]));\n        return;\n    }\n    var _0x478850, _0x416b87;\n    _0x478850 = new Array(_0x52be6d);\n    _0x416b87 = new Array(_0x52be6d);\n    for (var _0x2a4a36 = _0x52be6d - 0x1; _0x2a4a36 >= 0x0; _0x2a4a36--) {\n        if (_0x2a4a36 === _0x52be6d - 0x1) {\n            _0x416b87[_0x2a4a36] = Math['abs'](_0x27d241[_0x52be6d - 0x1] - _0x27d241[_0x52be6d - 0x2]);\n            _0x478850[_0x2a4a36] = Math['abs'](_0x27d241[_0x52be6d - 0x1] - _0x27d241[_0x52be6d - 0x2]);\n            continue;\n        }\n        _0x416b87[_0x2a4a36] = Math['min'](..._0x478850['slice'](_0x2a4a36 + 0x1), _0x2a4a36 !== 0x0 ? Math['abs'](_0x27d241[_0x2a4a36 - 0x1] - _0x27d241[_0x52be6d - 0x1]) : Math['abs'](_0x140c9f - _0x27d241[_0x52be6d - 0x1]));\n        _0x478850[_0x2a4a36] = Math['max'](..._0x416b87['slice'](_0x2a4a36 + 0x1), _0x2a4a36 !== 0x0 ? Math['abs'](_0x27d241[_0x2a4a36 - 0x1] - _0x27d241[_0x52be6d - 0x1]) : Math['abs'](_0x35921e - _0x27d241[_0x52be6d - 0x1]));\n    }\n    console['log'](Math['max'](..._0x478850));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 100 100\n10 1000 100", "900"], ["3 100 1000\n10 100 100", "900"], ["5 1 1\n1 1 1 1 1", "0"], ["1 1 1\n1000000000", "999999999"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  if(input[input.length-1]===''){\n    input.pop();\n  }\n  const N=input[0].split(' ')[0]-0;\n  const Z=input[0].split(' ')[1]-0;\n  const W=input[0].split(' ')[2]-0;\n  const a=input[1].split(' ').map(e=>{\n    return e-0;\n  });\n  if(a.length===1){\n    console.log(Math.abs(W-a[0]));\n    return;\n  }\n  var x,y;\n  x=new Array(N);\n  y=new Array(N);\n  for(var i=N-1;i>=0;i--){\n    if(i===N-1){\n      y[i]=Math.abs(a[N-1]-a[N-2]);\n      x[i]=Math.abs(a[N-1]-a[N-2]);\n      continue;\n    }\n    y[i]=Math.min(...x.slice(i+1),i!==0?Math.abs(a[i-1]-a[N-1]):Math.abs(Z-a[N-1]));\n    x[i]=Math.max(...y.slice(i+1),i!==0?Math.abs(a[i-1]-a[N-1]):Math.abs(W-a[N-1]));\n  }\n  console.log(Math.max(...x));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03626_1", "type": "JavaScript", "obfuscated": "function main(_0x1b816d) {\n    var _0x4308e3 = _0x1b816d['split'](/\\r\\n|\\r|\\n/);\n    var _0x21c88f = Number(_0x4308e3[0x0]);\n    var _0x3d8b73 = _0x4308e3[0x1]['split']('');\n    var _0x2a558e;\n    var _0x30342f = 0x0;\n    var _0x1d2749;\n    if (_0x3d8b73[_0x30342f] == _0x3d8b73[_0x30342f + 0x1]) {\n        _0x2a558e = 0x6;\n        _0x30342f = _0x30342f + 0x2;\n        _0x1d2749 = !![];\n    } else {\n        _0x2a558e = 0x3;\n        _0x30342f++;\n        _0x1d2749 = ![];\n    }\n    for (; _0x30342f < _0x21c88f - 0x1; _0x30342f++) {\n        if (_0x3d8b73[_0x30342f] == _0x3d8b73[_0x30342f + 0x1]) {\n            if (_0x1d2749) {\n                _0x2a558e = _0x2a558e * 0x3;\n            } else {\n                _0x2a558e = _0x2a558e * 0x2;\n            }\n            _0x30342f++;\n            _0x1d2749 = !![];\n        } else {\n            if (!_0x1d2749) {\n                _0x2a558e = _0x2a558e * 0x2;\n            }\n            _0x1d2749 = ![];\n        }\n    }\n    if (_0x30342f < _0x21c88f) {\n        if (!_0x1d2749) {\n            _0x2a558e = _0x2a558e * 0x2;\n        }\n    }\n    console['log'](_0x2a558e % 0x3b9aca07);\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3\naab\nccb", "6"], ["1\nZ\nZ", "3"], ["52\nRvvttdWIyyPPQFFZZssffEEkkaSSDKqcibbeYrhAljCCGGJppHHn\nRLLwwdWIxxNNQUUXXVVMMooBBaggDKqcimmeYrhAljOOTTJuuzzn", "958681902"]], "original": "function main(input){\n    var tmp = input.split(/\\r\\n|\\r|\\n/);\n    var N = Number(tmp[0]);\n    var S = tmp[1].split('');\n    //console.log(N, S);\n\n    var res;\n    var i = 0;\n    var isYoko;\n    if(S[i]==S[i+1]){\n        res = 6;\n        i = i+2;\n        isYoko = true;\n    }else{\n        res = 3;\n        i++;\n        isYoko = false;\n    }\n\n    for(; i<N-1; i++){\n        if(S[i]==S[i+1]){\n            if(isYoko){\n                res = res * 3;\n            }else{\n                res = res * 2;\n            }\n            i++;\n            isYoko = true;\n        }else{\n            if(!isYoko){\n                res = res * 2;\n            }\n            isYoko = false;\n        }\n    }\n\n    if(i<N){\n        if(!isYoko){\n            res = res * 2;\n        }\n    }\n\n    console.log(res%1000000007);\n}\n\nmain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03740_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x508996, _0xf3f73c) {\n    return _0xf3f73c ? cin['slice'](cid, cid += _0x508996) : cin['slice'](cid, cid += _0x508996)['map'](_0x119453 => +_0x119453);\n}\nfunction nextm(_0x7953f, _0x21dcf7, _0x3fdfe0) {\n    var _0xac686d = [], _0x1423d1 = 0x0;\n    if (_0x3fdfe0)\n        for (; _0x1423d1 < _0x7953f; _0x1423d1++)\n            _0xac686d['push'](cin['slice'](cid, cid += _0x21dcf7));\n    else\n        for (; _0x1423d1 < _0x7953f; _0x1423d1++)\n            _0xac686d['push'](cin['slice'](cid, cid += _0x21dcf7)['map'](_0x510d9a => +_0x510d9a));\n    return _0xac686d;\n}\nfunction xArray(_0xdef19c) {\n    var _0x5d1f1d = arguments, _0x2043d2 = _0x5d1f1d['length'], _0x5b14b8 = 'Array(a[' + --_0x2043d2 + ']).fill().map(x=>{return\\x20' + _0xdef19c + ';})';\n    while (--_0x2043d2)\n        _0x5b14b8 = 'Array(a[' + _0x2043d2 + ']).fill().map(x=>' + _0x5b14b8 + ')';\n    return eval(_0x5b14b8);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x3ccd5d = nextbig(), _0x56d211 = nextbig();\n    if (_0x3ccd5d - _0x56d211 < 0x2 && _0x56d211 - _0x3ccd5d < 0x2)\n        return 'Brown';\n    return 'Alice';\n}", "test_cases": [["2 1", "Brown"], ["5 0", "Alice"], ["0 0", "Brown"], ["4 8", "Alice"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var x = nextbig(), y = nextbig();\n  if(x-y < 2 && y-x < 2)return \"Brown\";\n  return \"Alice\";\n}", "language": "JavaScript"}
{"filename": "p03781_1", "type": "JavaScript", "obfuscated": "function Main(_0xe12128) {\n    _0xe12128 = _0xe12128['split']('\\x0a');\n    var _0x2030d8 = _0xe12128[0x0] - 0x0;\n    console['log'](Math['ceil']((0x2 * Math['abs'](_0x2030d8) + 0x1 / 0x4) ** (0x1 / 0x2) - 0x1 / 0x2));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["6", "3"], ["2", "2"], ["11", "5"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var X=input[0]-0;\n\n  console.log(Math.ceil((2*Math.abs(X)+1/4)**(1/2)-1/2));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript"}
{"filename": "p03791_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next(_0x9a4c0c) {\n    return _0x9a4c0c ? cin[cid++] : +cin[cid++];\n}\nfunction nexts(_0x3d60a1, _0x1f6a90) {\n    return _0x1f6a90 ? cin['slice'](cid, cid += _0x3d60a1) : cin['slice'](cid, cid += _0x3d60a1)['map'](_0x33bd85 => +_0x33bd85);\n}\nfunction nextm(_0x8b473f, _0x4a6317, _0x1188f5) {\n    var _0x329306 = [], _0x553377 = 0x0;\n    if (_0x1188f5)\n        for (; _0x553377 < _0x8b473f; _0x553377++)\n            _0x329306['push'](cin['slice'](cid, cid += _0x4a6317));\n    else\n        for (; _0x553377 < _0x8b473f; _0x553377++)\n            _0x329306['push'](cin['slice'](cid, cid += _0x4a6317)['map'](_0xc3813 => +_0xc3813));\n    return _0x329306;\n}\nfunction xArray(_0x3450c2) {\n    var _0x28cdac = arguments, _0x5649bf = _0x28cdac['length'], _0x1f046b = 'Array(a[' + --_0x5649bf + ']).fill().map(x=>{return\\x20' + _0x3450c2 + ';})';\n    while (--_0x5649bf)\n        _0x1f046b = 'Array(a[' + _0x5649bf + ']).fill().map(x=>' + _0x1f046b + ')';\n    return eval(_0x1f046b);\n}\nvar mod = 0x3b9aca00 + 0x7;\nfunction mul() {\n    for (var _0x4a3dab = arguments, _0x130fdf = _0x4a3dab[0x0], _0x132fa7 = _0x4a3dab['length']; --_0x132fa7;)\n        _0x130fdf = ((_0x130fdf >> 0x10) * _0x4a3dab[_0x132fa7] % mod * 0x10000 + (_0x130fdf & 0xffff) * _0x4a3dab[_0x132fa7]) % mod;\n    return _0x130fdf;\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](myOut);\nfunction main() {\n    var _0x58b203 = next();\n    var _0x103b5a = nexts(_0x58b203);\n    var _0x63276a = 0x1, _0x119b20 = 0x1, _0x515c6c = 0x0;\n    for (var _0x1fc185 = 0x0; _0x1fc185 < _0x58b203; _0x1fc185++) {\n        _0x515c6c++;\n        _0x63276a = mul(_0x63276a, _0x515c6c);\n        if (_0x103b5a[_0x1fc185] < _0x119b20) {\n            _0x515c6c--;\n        } else {\n            _0x119b20 += 0x2;\n        }\n    }\n    return _0x63276a;\n}", "test_cases": [["3\n1 2 3", "4"], ["3\n2 3 4", "6"], ["8\n1 2 3 5 7 11 13 17", "10080"], ["13\n4 6 8 9 10 12 14 15 16 18 20 21 22", "311014372"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(a){return a?cin[cid++]:+cin[cid++];}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar mod = 1e9+7;\nfunction mul(){for(var a=arguments,r=a[0],i=a.length;--i;)r=((r>>16)*a[i]%mod*65536+(r&65535)*a[i])%mod;return r;}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(myOut);\n\nfunction main(){\n  var n = next();\n  var x = nexts(n);\n  var ans = 1, id = 1, rem = 0;\n  for(var i = 0; i < n; i++){\n    rem++;\n    ans = mul(ans,rem);\n    if(x[i] < id){\n      rem--;\n    }else{\n      id += 2;\n    }\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p03819_1", "type": "JavaScript", "obfuscated": "function Main(_0x30c88a) {\n    _0x30c88a = _0x30c88a['split']('\\x0a');\n    var _0x404c71 = _0x30c88a[0x0]['split']('\\x20')[0x0] - 0x0;\n    var _0x2a72a6 = _0x30c88a[0x0]['split']('\\x20')[0x1] - 0x0;\n    var _0x1b5e43 = new Array(_0x2a72a6 + 0x1);\n    _0x1b5e43['fill'](0x0);\n    var _0x4f2d51;\n    for (var _0x3d87b1 = 0x1; _0x3d87b1 < _0x30c88a['length']; _0x3d87b1++) {\n        _0x4f2d51 = _0x30c88a[_0x3d87b1]['split']('\\x20');\n        _0x4f2d51[0x1] -= 0x0;\n        _0x4f2d51[0x0] -= 0x0;\n        for (var _0x947863 = 0x1; _0x947863 <= _0x2a72a6; _0x947863++) {\n            if (!(_0x4f2d51[0x1] - _0x4f2d51[0x0] < _0x947863 - 0x1 && _0x4f2d51[0x1] % _0x947863 >= _0x4f2d51[0x0] % _0x947863 && _0x4f2d51[0x0] % _0x947863 > 0x0)) {\n                _0x1b5e43[_0x947863]++;\n            }\n        }\n    }\n    _0x1b5e43['shift']();\n    console['log'](_0x1b5e43['join']('\\x0a'));\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["3 3\n1 2\n2 3\n3 3", "3\n2\n2"], ["7 9\n1 7\n5 9\n5 7\n5 9\n1 1\n6 8\n3 4", "7\n6\n6\n5\n4\n5\n5\n3\n2"]], "original": "function Main(input) {\n  input=input.split(\"\\n\");\n  var N=input[0].split(\" \")[0]-0;\n  var M=input[0].split(\" \")[1]-0;\n  \n  var answer=new Array(M+1);\n  answer.fill(0);\n  var line;\n  for(var i=1;i<input.length;i++){\n    line=input[i].split(\" \");\n    line[1]-=0;\n    line[0]-=0;\n    for(var j=1;j<=M;j++){\n      if(!(line[1]-line[0]<j-1&&line[1]%j>=line[0]%j&&line[0]%j>0)){\n        answer[j]++;\n      }\n    }\n  }\n  answer.shift();\n  console.log(answer.join(\"\\n\"));\n}\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n  \n  \n", "language": "JavaScript"}
{"filename": "p03822_1", "type": "JavaScript", "obfuscated": "var tmp = {};\nfunction main(_0x11d7e6) {\n    var _0x21e8d1 = _0x11d7e6['split']('\\x0a');\n    var _0x4bde52 = Number(_0x21e8d1[0x0]);\n    var _0xbbaf03 = {};\n    for (var _0x18ead3 = 0x2; _0x18ead3 < _0x4bde52 + 0x1; _0x18ead3++) {\n        var _0x5206ea = Number(_0x21e8d1[_0x18ead3 - 0x1]);\n        if (_0xbbaf03[_0x5206ea]) {\n            _0xbbaf03[_0x5206ea]['t']++;\n            _0xbbaf03[_0x5206ea]['p']['push'](_0x18ead3);\n        } else {\n            _0xbbaf03[_0x5206ea] = {};\n            _0xbbaf03[_0x5206ea]['t'] = 0x1;\n            _0xbbaf03[_0x5206ea]['p'] = [_0x18ead3];\n        }\n    }\n    console['log'](calc(_0xbbaf03, 0x1) + 0x1);\n}\nfunction calc(_0x5095cc, _0x2a4f99) {\n    if (tmp[_0x2a4f99]) {\n        return tmp[_0x2a4f99];\n    }\n    var _0x45fad2 = 0x0;\n    for (var _0x4c476c in _0x5095cc[_0x2a4f99]['p']) {\n        var _0x1d9c63 = _0x5095cc[_0x2a4f99]['p'][_0x4c476c];\n        if (_0x5095cc[_0x1d9c63]) {\n            _0x45fad2 = Math['max'](_0x45fad2, _0x5095cc[_0x1d9c63]['t'] + calc(_0x5095cc, _0x1d9c63));\n        }\n    }\n    tmp[_0x2a4f99] = _0x45fad2;\n    return _0x45fad2;\n}\nmain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["5\n1\n1\n2\n4", "3"], ["7\n1\n2\n1\n3\n1\n4", "3"], ["4\n4\n4\n1", "3"]], "original": "\nvar tmp = {};\nfunction main(chunk){\n    var lines = chunk.split(\"\\n\");\n    var n = Number(lines[0]);\n    \n    var map = {};\n    for(var i=2;i<n+1;i++){\n        var a = Number(lines[i-1]);\n        if(map[a]){\n            map[a].t++;\n            map[a].p.push(i);\n        }else{\n            map[a] = {};\n            map[a].t = 1;\n            map[a].p = [i];\n        }\n    }\n    console.log(calc(map,1)+1);\n}\n\nfunction calc(map,n){\n    if(tmp[n]){\n        return tmp[n];\n    }\n    var ans = 0;\n    for(var i in map[n].p){\n        var p = map[n].p[i];\n        if(map[p]){\n            ans = Math.max(ans,map[p].t + calc(map,p));\n        }\n    }\n    tmp[n] = ans;\n    return ans;\n}\nmain(require('fs').readFileSync('/dev/stdin', 'utf8'));\n", "language": "JavaScript"}
{"filename": "p03863_1", "type": "JavaScript", "obfuscated": "function Main(_0x5aa4b8) {\n    _0x5aa4b8 = _0x5aa4b8['trim']();\n    const _0x4417fc = _0x5aa4b8['length'];\n    if (_0x4417fc & 0x1 ^ _0x5aa4b8[0x0] === _0x5aa4b8[_0x4417fc - 0x1])\n        console['log']('First');\n    else\n        console['log']('Second');\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["aba", "Second"], ["abc", "First"], ["abcab", "First"]], "original": "function Main(s) {\n  s = s.trim();\n  const l = s.length;\n  if((l & 1) ^ (s[0] === s[l-1]))\n    console.log(\"First\");\n  else console.log(\"Second\");\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03888_1", "type": "JavaScript", "obfuscated": "function Main(_0x2bc265) {\n    init(_0x2bc265);\n    var _0x2a89ec = inI();\n    var _0x55580c = inI();\n    outln((_0x2a89ec * _0x55580c / (_0x2a89ec + _0x55580c))['toFixed'](0xa));\n}\nvar input, inputCnt;\nfunction debug() {\n    Main(document['getElementById']('input')['value']);\n}\nfunction init(_0x1a7e56) {\n    input = _0x1a7e56['replace'](/\\n/g, '\\x20');\n    input = input['split']('\\x20');\n    inputCnt = 0x0;\n}\nconst out = _0x1c41c2 => {\n    console['log'](_0x1c41c2);\n};\nconst outln = _0x16d63e => {\n    console['log'](_0x16d63e + '\\x0a');\n};\nconst inS = () => {\n    return input[inputCnt++];\n};\nconst inI = () => {\n    return parseInt(inS(), 0xa);\n};\nconst inF = () => {\n    return parseFloat(inS());\n};\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["2 3", "1.2000000000"], ["100 99", "49.7487437186"]], "original": "\nfunction Main(inputData) {\n\tinit(inputData);\n\t\n\tvar a = inI();\n\tvar b = inI();\n\n\toutln(((a*b)/(a+b)).toFixed(10));\n\t\n}\n\n////////////////////////////////////////////////////////////////////////////////////\nvar input,inputCnt;\n\n// \"実行する\"ボタンを押した時に実行される関数 (デバッグ用)\nfunction debug(){\n\tMain(document.getElementById(\"input\").value);\n}\n\nfunction init(inputData){\n    //配列inputに順番に代入\n\tinput = inputData.replace( /\\n/g , \" \" );\n\tinput = input.split(\" \");\n\tinputCnt = 0;\n}\n//output\nconst out = (output) => { console.log(output) }\nconst outln = (output) => { console.log(output+\"\\n\") }\n\n//input\nconst inS = () => {return input[inputCnt++]};\nconst inI = () => {return parseInt(inS(), 10)};\nconst inF = () => {return parseFloat(inS())};\n\n//*この行以降は編集しないでください（標準入出力から一度に読み込み、Mainを呼び出します）\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03947_1", "type": "JavaScript", "obfuscated": "function Main(_0x29f97d) {\n    var _0x315b3c = function (_0x2aff49, _0x4cbdc0) {\n        return _0x2aff49['split'](_0x4cbdc0)['length'] - 0x1;\n    };\n    lines = _0x29f97d['split']('\\x0a');\n    var _0x89725a = lines[0x0];\n    var _0x17e133 = _0x315b3c(_0x89725a, 'BW');\n    var _0x5ca89a = _0x315b3c(_0x89725a, 'WB');\n    console['log'](_0x17e133 + _0x5ca89a);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["BBBWW", "1"], ["WWWWWW", "0"], ["WBWBWBWBWB", "9"]], "original": "// inputに入力データ全体が入る\nfunction Main(input) {\n\nvar counter = function(str,seq){\n    return str.split(seq).length - 1;\n};\n\tlines = input.split(\"\\n\"); // 1行目がinput[0], 2行目がinput[1], …に入る\n\tvar s = lines[0];\n\tvar bw = counter(s,\"BW\");\n\tvar wb = counter(s,\"WB\");\n\tconsole.log(bw+wb);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));", "language": "JavaScript"}
{"filename": "p03954_1", "type": "JavaScript", "obfuscated": "function Main(_0x559b96) {\n    _0x559b96 = _0x559b96['split']('\\x0a');\n    tmp = _0x559b96[0x1]['split']('\\x20');\n    var _0x35bff7 = parseInt(_0x559b96[0x0], 0xa);\n    var _0x305fc6 = new Array(0x2 * _0x35bff7 - 0x1);\n    for (var _0x4b8e38 = 0x0; _0x4b8e38 < _0x305fc6['length']; _0x4b8e38++) {\n        _0x305fc6[_0x4b8e38] = parseInt(tmp[_0x4b8e38], 0xa);\n    }\n    function _0x4d607b(_0x3f122c) {\n        array_i_next = new Array(_0x3f122c['length'] - 0x2);\n        for (var _0x5cacb3 = 0x0; _0x5cacb3 < array_i_next['length']; _0x5cacb3++) {\n            var _0x29f83c = _0x3f122c['slice'](_0x5cacb3, _0x5cacb3 + 0x3);\n            array_i_next[_0x5cacb3] = _0x29f83c['sort'](function (_0xb3a751, _0x18610d) {\n                return _0xb3a751 < _0x18610d ? -0x1 : 0x1;\n            })[0x1];\n        }\n        return array_i_next;\n    }\n    var _0x2ac00e = _0x305fc6;\n    while (_0x2ac00e['length'] > 0x1) {\n        _0x2ac00e = _0x4d607b(_0x2ac00e);\n    }\n    console['log'](_0x2ac00e[0x0]);\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8'));", "test_cases": [["4\n1 6 3 7 4 5 2", "4"], ["2\n1 2 3", "2"]], "original": "function Main(input) {\n\tinput = input.split(\"\\n\");\n\ttmp = input[1].split(\" \");\n\n\tvar N = parseInt(input[0], 10);\n    var array_N = new Array(2*N-1);\n\n    for(var i=0;i< array_N.length;i++){\n        array_N[i] = parseInt(tmp[i],10);\n    }\n\n    function getArrayNext(array_i){\n        array_i_next = new Array(array_i.length-2);\n        for(var j=0;j<array_i_next.length;j++){\n            var small_array = array_i.slice(j,j+3);\n            array_i_next[j] = small_array.sort(\n              function(a,b){\n                return (a < b ? -1 : 1);\n              }\n            )[1];\n        }\n        return array_i_next;\n    }\n    var array_i = array_N;\n    while(array_i.length > 1){\n\n        array_i = getArrayNext(array_i);\n    }\n\tconsole.log(array_i[0]);\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\"));\n", "language": "JavaScript"}
{"filename": "p03973_1", "type": "JavaScript", "obfuscated": "'use strict';\nvar input = require('fs')['readFileSync']('/dev/stdin', 'utf8');\nvar cin = input['split'](/ |\\n/), cid = 0x0;\nfunction next() {\n    return +cin[cid++];\n}\nfunction nextstr() {\n    return cin[cid++];\n}\nfunction nextbig() {\n    return BigInt(cin[cid++]);\n}\nfunction nexts(_0x54fbbe, _0x28cf09) {\n    return _0x28cf09 ? cin['slice'](cid, cid += _0x54fbbe) : cin['slice'](cid, cid += _0x54fbbe)['map'](_0x3cec79 => +_0x3cec79);\n}\nfunction nextm(_0x4dacef, _0x571136, _0x208891) {\n    var _0x5be1ba = [], _0xfd2fb = 0x0;\n    if (_0x208891)\n        for (; _0xfd2fb < _0x4dacef; _0xfd2fb++)\n            _0x5be1ba['push'](cin['slice'](cid, cid += _0x571136));\n    else\n        for (; _0xfd2fb < _0x4dacef; _0xfd2fb++)\n            _0x5be1ba['push'](cin['slice'](cid, cid += _0x571136)['map'](_0x3ca197 => +_0x3ca197));\n    return _0x5be1ba;\n}\nfunction xArray(_0x51359e) {\n    var _0x10f6d5 = arguments, _0x722c97 = _0x10f6d5['length'], _0x411d68 = 'Array(a[' + --_0x722c97 + ']).fill().map(x=>{return\\x20' + _0x51359e + ';})';\n    while (--_0x722c97)\n        _0x411d68 = 'Array(a[' + _0x722c97 + ']).fill().map(x=>' + _0x411d68 + ')';\n    return eval(_0x411d68);\n}\nvar myOut = main();\nif (myOut !== undefined)\n    console['log'](String(myOut));\nfunction main() {\n    var _0x2a2697 = next();\n    var _0x512749 = 0x0, _0x28c522 = 0x1;\n    for (var _0xeff951 = 0x0; _0xeff951 < _0x2a2697; _0xeff951++) {\n        var _0x335e58 = next() - 0x1;\n        if (_0x335e58 < _0x28c522) {\n            _0x28c522 = Math['max'](_0x28c522, _0x335e58 + 0x2);\n        } else {\n            _0x512749 += _0x335e58 / _0x28c522 | 0x0;\n            _0x28c522 = Math['max'](0x2, _0x28c522);\n        }\n    }\n    return _0x512749;\n}", "test_cases": [["3\n3\n2\n5", "3"], ["15\n3\n1\n4\n1\n5\n9\n2\n6\n5\n3\n5\n8\n9\n7\n9", "18"]], "original": "\"use strict\";\nvar input=require(\"fs\").readFileSync(\"/dev/stdin\",\"utf8\");\nvar cin=input.split(/ |\\n/),cid=0;\nfunction next(){return +cin[cid++];}\nfunction nextstr(){return cin[cid++];}\nfunction nextbig(){return BigInt(cin[cid++]);}\nfunction nexts(n,a){return a?cin.slice(cid,cid+=n):cin.slice(cid,cid+=n).map(a=>+a);}\nfunction nextm(h,w,a){var r=[],i=0;if(a)for(;i<h;i++)r.push(cin.slice(cid,cid+=w));else for(;i<h;i++)r.push(cin.slice(cid,cid+=w).map(a=>+a));return r;}\nfunction xArray(v){var a=arguments,l=a.length,r=\"Array(a[\"+--l+\"]).fill().map(x=>{return \"+v+\";})\";while(--l)r=\"Array(a[\"+l+\"]).fill().map(x=>\"+r+\")\";return eval(r);}\n\nvar myOut = main();\nif(myOut !== undefined)console.log(String(myOut));\n\nfunction main(){\n  var n = next();\n  var ans = 0, mn = 1;\n  for(var i = 0; i < n; i++){\n    var t = next()-1;\n    if(t < mn){\n      mn = Math.max(mn,t+2);\n    }else{\n      ans += t/mn|0;\n      mn = Math.max(2,mn);\n    }\n  }\n  return ans;\n}", "language": "JavaScript"}
{"filename": "p04014_1", "type": "JavaScript", "obfuscated": "function Main(_0x5b6c78) {\n    _0x5b6c78 = _0x5b6c78['split']('\\x0a')['map'](_0x2a386f => parseInt(_0x2a386f));\n    const _0x30b838 = _0x5b6c78[0x0];\n    _0x5b6c78 = _0x5b6c78[0x1];\n    const _0x247418 = Math['ceil'](Math['sqrt'](_0x30b838));\n    if (_0x5b6c78 === _0x30b838) {\n        console['log'](_0x30b838 + 0x1);\n        return;\n    }\n    for (var _0x5ddcf9 = 0x2; _0x5ddcf9 < _0x247418; _0x5ddcf9++) {\n        if (_0x5b6c78 === f(_0x5ddcf9, _0x30b838)) {\n            console['log'](_0x5ddcf9);\n            return;\n        }\n    }\n    var _0x303c46 = Math['floor']((_0x30b838 - _0x5b6c78) / (_0x247418 - 0x1));\n    for (; _0x303c46 > 0x0; _0x303c46--) {\n        _0x5ddcf9 = Math['floor']((_0x30b838 - _0x5b6c78) / _0x303c46 + 0x1);\n        if (_0x5b6c78 === f(_0x5ddcf9, _0x30b838)) {\n            console['log'](_0x5ddcf9);\n            return;\n        }\n    }\n    console['log'](-0x1);\n}\nfunction f(_0x476b41, _0x21858b) {\n    if (_0x21858b < _0x476b41)\n        return _0x21858b;\n    return f(_0x476b41, Math['floor'](_0x21858b / _0x476b41)) + _0x21858b % _0x476b41;\n}\nMain(require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']());", "test_cases": [["87654\n30", "10"], ["87654\n138", "100"], ["87654\n45678", "-1"], ["31415926535\n1", "31415926535"], ["1\n31415926535", "-1"]], "original": "function Main(s) {\n\ts = s.split(\"\\n\").map(a => parseInt(a));\n\tconst n = s[0];\n\ts = s[1];\n\tconst sn = Math.ceil(Math.sqrt(n));\n\tif(s === n){console.log(n+1);return;}\n\tfor(var b = 2; b < sn; b++){\n\t\tif(s === f(b, n)){\n          console.log(b);\n          return;\n        }\n\t}\n\tvar p = Math.floor((n - s) / (sn - 1));\n\tfor(; p > 0; p--){\n\t\tb = Math.floor((n - s) / p + 1);\n\t\tif(s === f(b, n)){\n          console.log(b);\n          return;\n        }\n\t}\n\t\n\tconsole.log(-1);\n}\nfunction f(b, n){\n\tif(n < b) return n;\n\treturn f(b, Math.floor(n / b)) + n % b;\n}\n\nMain(require(\"fs\").readFileSync(\"/dev/stdin\", \"utf8\").trim());", "language": "JavaScript"}
