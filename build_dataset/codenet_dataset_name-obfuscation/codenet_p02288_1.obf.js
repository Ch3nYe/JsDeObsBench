(function main() {
    const _0x4a9553 = require('fs')['readFileSync']('/dev/stdin', 'utf8')['trim']()['split']('\x0a');
    _0x4a9553['shift']();
    const _0x57fda7 = _0x4a9553['shift']()['split']('\x20')['map'](Number);
    buildMaxHeap(_0x57fda7);
    console['log'](_0x57fda7['reduce']((_0x20b661, _0x491860) => _0x20b661 += '\x20' + _0x491860, ''));
}());
function buildMaxHeap(_0x477d64) {
    const _0x37f3bd = _0x477d64['length'];
    const _0x29674a = _0x55ccdb => {
        let _0x4c4b02, _0x3f0106, _0x304386;
        _0x4c4b02 = 0x2 * _0x55ccdb + 0x1;
        _0x3f0106 = 0x2 * _0x55ccdb + 0x2;
        _0x304386 = _0x4c4b02 < _0x37f3bd && _0x477d64[_0x4c4b02] > _0x477d64[_0x55ccdb] ? _0x4c4b02 : _0x55ccdb;
        if (_0x3f0106 < _0x37f3bd && _0x477d64[_0x3f0106] > _0x477d64[_0x304386])
            _0x304386 = _0x3f0106;
        if (_0x304386 != _0x55ccdb) {
            _0x477d64[_0x304386] = [
                _0x477d64[_0x55ccdb],
                _0x477d64[_0x55ccdb] = _0x477d64[_0x304386]
            ][0x0];
            _0x29674a(_0x304386);
        }
    };
    for (let _0x4d0c2d = Math['floor'](_0x477d64['length'] / 0x2); _0x4d0c2d >= 0x0; _0x4d0c2d--)
        _0x29674a(_0x4d0c2d);
}