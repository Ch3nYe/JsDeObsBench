const a0_0xf64584=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0xeb1129=a0_0xf64584(this,function(){return a0_0xeb1129['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0xeb1129)['search']('(((.+)+)+)+$');});a0_0xeb1129();'use strict';const inputs=require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\x0a');inputs['shift']();const heights=inputs['shift']()['split']('\x20')['map'](v=>parseInt(v,0xa));const towers=new Array(heights['length'])['fill']()['map'](_=>new Array());inputs['forEach'](v=>{const splited=v['split']('\x20')['map'](w=>parseInt(w,0xa)-0x1);towers[splited[0x0]]['push'](splited[0x1]);towers[splited[0x1]]['push'](splited[0x0]);});let result=0x0;towers['forEach']((t,i)=>{let good=!![];if(t['length']){t['forEach'](t2=>{if(heights[i]<=heights[t2]){good=![];}});}if(good){++result;}});console['log'](result);