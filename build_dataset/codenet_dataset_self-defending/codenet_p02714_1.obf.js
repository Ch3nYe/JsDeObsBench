const a0_0x161da7=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x3e5db2=a0_0x161da7(this,function(){return a0_0x3e5db2['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x3e5db2)['search']('(((.+)+)+)+$');});a0_0x3e5db2();process['stdin']['resume']();process['stdin']['setEncoding']('utf8');const lines=[];const reader=require('readline')['createInterface']({'input':process['stdin'],'output':process['stdout']});reader['on']('line',line=>{lines['push'](line);});reader['on']('close',()=>{const inputLength=Number(lines[0x0]);const inputString=lines[0x1];const inputArray=inputString['split']('');const rArray=inputArray['filter'](element=>element==='R');const gArray=inputArray['filter'](element=>element==='G');const bArray=inputArray['filter'](element=>element==='B');let sum=0x0;for(let i=0x1;i<Number(inputLength)+0x1;i++){for(let j=i+0x1;j<Number(inputLength)+0x1;j++){const k=j+j-i;if(k<=inputLength&&inputArray[i-0x1]!==inputArray[j-0x1]&&inputArray[j-0x1]!==inputArray[k-0x1]&&inputArray[i-0x1]!==inputArray[k-0x1]){sum=sum+0x1;}}}console['log'](rArray['length']*gArray['length']*bArray['length']-sum);});