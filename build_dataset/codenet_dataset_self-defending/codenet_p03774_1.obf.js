const a0_0x28098c=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x5aae43=a0_0x28098c(this,function(){return a0_0x5aae43['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x5aae43)['search']('(((.+)+)+)+$');});a0_0x5aae43();'use strict';const main=input=>{input=input['split']('\x0a');const N=parseInt(input[0x0]['split']('\x20')[0x0]);const M=parseInt(input[0x0]['split']('\x20')[0x1]);let arr=input['slice'](0x1,N+0x1);let points=input['slice'](N+0x1,M+N+0x1);const parse=v=>{let temp=v['split']('\x20')['map'](vv=>parseInt(vv));return{'x':temp[0x0],'y':temp[0x1]};};arr=arr['map'](parse);points=points['map'](parse);let indexArr=[];arr['forEach']((v,i)=>{let minDist=0x3b9aca00;let index=0x0;points['forEach']((w,j)=>{let dist=Math['abs'](v['x']-w['x'])+Math['abs'](v['y']-w['y']);if(dist<minDist){minDist=dist;index=j;}});indexArr['push'](index);});indexArr['forEach'](v=>console['log'](v+0x1));};main(require('fs')['readFileSync']('/dev/stdin','utf-8'));