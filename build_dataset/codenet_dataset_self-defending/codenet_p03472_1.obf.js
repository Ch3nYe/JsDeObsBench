const a0_0x143599=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x694f0e=a0_0x143599(this,function(){return a0_0x694f0e['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x694f0e)['search']('(((.+)+)+)+$');});a0_0x694f0e();'use strict';const main=arg=>{arg=arg['trim']()['split']('\x0a');const N=parseInt(arg[0x0]['split']('\x20')[0x0]);let H=parseInt(arg[0x0]['split']('\x20')[0x1]);let ab=arg['slice'](0x1,N+0x1)['map'](n=>n['split']('\x20')['map'](l=>parseInt(l)));ab['sort']((a,b)=>b[0x0]-a[0x0]);const aMax=ab[0x0][0x0];ab=ab['sort']((a,b)=>b[0x1]-a[0x1])['filter'](n=>n[0x1]>aMax);let damage=0x0;let throwAttack=0x0;for(let i in ab){H-=ab[i][0x1];throwAttack++;if(H<=0x0){console['log'](throwAttack);return;}}const directAttack=Math['ceil'](H/aMax);console['log'](throwAttack+directAttack);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));