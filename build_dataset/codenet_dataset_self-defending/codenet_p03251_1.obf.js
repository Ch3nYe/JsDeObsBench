const a0_0xa31e54=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x11be9f=a0_0xa31e54(this,function(){return a0_0x11be9f['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x11be9f)['search']('(((.+)+)+)+$');});a0_0x11be9f();'use strict';const main=input=>{const num=input[0x0]['split']('\x20')['map'](val=>parseInt(val)),N=num[0x0],M=num[0x1],X=num[0x2],Y=num[0x3],x=input[0x1]['split']('\x20')['map'](val=>parseInt(val)),y=input[0x2]['split']('\x20')['map'](val=>parseInt(val));const xMax=Math['max'](...x),yMin=Math['min'](...y);let ans=0x0;for(let z=X+0x1;z<=Y;z++){if(xMax<z&&yMin>=z){ans=0x1;break;}}console['log'](ans==0x1?'No\x20War':'War');};main(require('fs')['readFileSync']('/dev/stdin','utf8')['split']('\x0a'));