const a0_0x4bc88b=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x3c9146=a0_0x4bc88b(this,function(){return a0_0x3c9146['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x3c9146)['search']('(((.+)+)+)+$');});a0_0x3c9146();const findSet=p=>{return x=>{if(x!=p[x])p[x]=findSet(p)(p[x]);return p[x];};};const link=(p,r)=>{return(x,y)=>{if(r[x]>r[y])p[y]=x;else{p[x]=y;if(r[x]===r[y])r[y]++;}};};const dsFactory=n=>{this['p']=[];this['r']=[];for(let i=0x0;i<n;i++){this['p'][i]=i;this['r'][i]=0x0;}this['findSet']=findSet(this['p']);this['link']=link(this['p'],this['r']);return{'same':(x,y)=>this['findSet'](x)===this['findSet'](y),'unite':(x,y)=>this['link'](this['findSet'](x),this['findSet'](y))};};const input=require('fs')['readFileSync']('/dev/stdin','utf8');const lines=input['split']('\x0a');const [n,q]=lines['shift']()['split']('\x20')['map'](Number);const ds=dsFactory(n);lines['forEach'](x=>{const [t,a,b]=x['split']('\x20')['map'](Number);switch(t){case 0x0:ds['unite'](a,b);break;case 0x1:const ret=ds['same'](a,b)?0x1:0x0;console['log'](ret);break;}});