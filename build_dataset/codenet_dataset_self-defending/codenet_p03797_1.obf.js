const a0_0x1c26b6=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x6ebea=a0_0x1c26b6(this,function(){return a0_0x6ebea['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x6ebea)['search']('(((.+)+)+)+$');});a0_0x6ebea();'use strict';const create=()=>{const input=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\x0a');const res={'list':input,'index':0x0,'max':input['length'],'hasNext':function(){return this['index']<this['max'];},'next':function(){if(!this['hasNext']()){throw'ArrayIndexOutOfBoundsException';}else{return this['list'][this['index']++];}}};return res;};const o=create();const next=()=>o['next']();const nextInt=()=>parseInt(o['next']());const nextStrArray=()=>o['next']()['split']('\x20');const nextIntArray=()=>o['next']()['split']('\x20')['map'](el=>parseInt(el));const nextCharArray=()=>o['next']()['split']('');const hasNext=()=>o['hasNext']();const myout=(...x)=>console['log'](...x);const Main=()=>{const [n,m]=nextIntArray();let ans=m<=0x2*n?Math['floor'](M/0x2):Math['floor']((0x2*n+m)/0x4);console['log'](ans);};Main();