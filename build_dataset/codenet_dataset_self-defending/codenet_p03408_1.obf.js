'use strict';function Main(input){const _0x10483d=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const _0x38df38=_0x10483d(this,function(){return _0x38df38['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x38df38)['search']('(((.+)+)+)+$');});_0x38df38();const params=input['trim']()['split']('\x0a');const N=Number(params[0x0]['trim']());const M=Number(params[N+0x1]['trim']());const blueCards=params['slice'](0x1,N+0x1);const redCards=params['slice'](N+0x2);let cardCount={};for(const card of blueCards){const c=card['trim']();if(cardCount['hasOwnProperty'](c)){cardCount[c]=cardCount[c]+0x1;}else{cardCount[c]=0x1;}}for(const card of redCards){const c=card['trim']();if(cardCount['hasOwnProperty'](c)){cardCount[c]=cardCount[c]-0x1;}else{cardCount[c]=0x1;}}let maxMoney=0x0;for(const [key,money]of Object['entries'](cardCount)){if(maxMoney<money){maxMoney=money;}}console['log'](maxMoney);}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));