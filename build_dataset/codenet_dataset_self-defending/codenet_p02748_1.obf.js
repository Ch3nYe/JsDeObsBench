const a0_0x15cad3=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x1735aa=a0_0x15cad3(this,function(){return a0_0x1735aa['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x1735aa)['search']('(((.+)+)+)+$');});a0_0x1735aa();'use strict';const main=arg=>{arg=arg['trim']()['split']('\x0a');const A=parseInt(arg[0x0]['split']('\x20')[0x0]);const B=parseInt(arg[0x0]['split']('\x20')[0x0]);const M=parseInt(arg[0x0]['split']('\x20')[0x0]);const freezer=arg[0x1]['split']('\x20')['map'](n=>parseInt(n));const renzi=arg[0x2]['split']('\x20')['map'](n=>parseInt(n));const xyc=arg['slice'](0x3,M+0x4);const minFreeze=Math['min'](...freezer);const minRenzi=Math['min'](...renzi);let temp=minFreeze+minRenzi;for(let i in xyc){let x=parseInt(xyc[i]['split']('\x20')[0x0]);let y=parseInt(xyc[i]['split']('\x20')[0x1]);let c=parseInt(xyc[i]['split']('\x20')[0x2]);let cost=freezer[x-0x1]+renzi[y-0x1]-c;if(cost<=temp){temp=cost;}}console['log'](temp);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));