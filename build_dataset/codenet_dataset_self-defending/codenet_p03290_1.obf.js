'use strict';function main(input){const _0xe58778=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const _0x4c0a45=_0xe58778(this,function(){return _0x4c0a45['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x4c0a45)['search']('(((.+)+)+)+$');});_0x4c0a45();input=input['trim']()['split']('\x0a');const DG=input['shift']()['split']('\x20')['map'](v=>Number(v));input=input['map'](v=>v['split']('\x20')['map'](v=>Number(v)));const calc=(a,r)=>{let count=[Math['pow'](0xa,0x8)];for(let i=0x0;i<DG[0x0];i++){const cur=Math['pow'](0x2,i);if((a&cur)===cur){const points=(i+0x1)*0x64;let max=points*input[i][0x0]+input[i][0x1];let num=Math['ceil'](r/points);if(max<r){count['push'](input[i][0x0]+calc(a-cur,r-max));}else{count['push'](num<input[i][0x0]?num:input[i][0x0]);}}}return Math['min'](...count);};console['log'](calc(Math['pow'](0x2,DG[0x0])-0x1,DG[0x1]));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));