function max(array){var result=-0x1*Infinity;for(num of array){if(result<num){result=num;}}return result;}function main(input){const _0x164924=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const _0x3c3fc8=_0x164924(this,function(){return _0x3c3fc8['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x3c3fc8)['search']('(((.+)+)+)+$');});_0x3c3fc8();const lines=input['split']('\x0a');const nums=lines['map'](line=>line['split']('\x20')['map'](x=>parseInt(x)));var n_c=nums['shift']();const N=n_c[0x0];const C=n_c[0x1];const t=Array(0x30d42);const max_recorders=Array(0x30d42);max_recorders['fill'](0x0);for(var c=0x1;c<=C;c++){t['fill'](0x0);for(var n=0x0;n<N;n++){if(nums[n][0x2]==c){t[nums[n][0x0]*0x2-0x1]++;t[nums[n][0x1]*0x2]--;}}for(var i=0x1;i<0x30d42;i++){t[i]+=t[i-0x1];}for(var i=0x1;i<0x30d42;i++){if(t[i]>0x0){max_recorders[i]++;}}}console['log'](max(max_recorders));}main(require('fs')['readFileSync']('/dev/stdin','utf8'));