'use strict';function Main(input){const _0x27a253=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const _0x23f239=_0x27a253(this,function(){return _0x23f239['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x23f239)['search']('(((.+)+)+)+$');});_0x23f239();let lines=input['split']('\x0a');let NX=lines['shift']()['trim']()['split'](/\s/)['map'](v=>v-0x0);let n=NX[0x0],x=NX[0x1];let S=lines['shift']()['trim']()['split'](/\s/)['map'](v=>v-0x0);const MOD=0x3b9aca00+0x7,MAX_N=0xd2,MAX_VAL=0x186a0+0xa;const add=(a,b)=>(a+b)%MOD;const mul=(a,b)=>a*b%MOD;let dp=new Array(MAX_N)['fill'](0x0)['map'](()=>new Array(MAX_VAL)['fill'](-0x1));const rec=(pos,rem)=>{if(pos==n)return rem;let ret=dp[pos][rem];if(ret!=-0x1)return ret;ret=0x0;dp[pos][rem]=add(ret,rec(pos+0x1,rem%S[pos]));dp[pos][rem]=add(dp[pos][rem],mul(n-pos-0x1,rec(pos+0x1,rem)));return dp[pos][rem];};S['sort']((a,b)=>b-a);console['log'](rec(0x0,x));}Main(require('fs')['readFileSync']('/dev/stdin','utf8'));