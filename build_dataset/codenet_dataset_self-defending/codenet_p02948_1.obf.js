'use strict';function Main(input){const _0x582a54=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const _0x436504=_0x582a54(this,function(){return _0x436504['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](_0x436504)['search']('(((.+)+)+)+$');});_0x436504();const N=Number(input['split']('\x0a')[0x0]['split']('\x20')[0x0]);const M=Number(input['split']('\x0a')[0x0]['split']('\x20')[0x1]);const list=input['split']('\x0a')['slice'](0x1)['map'](x=>x['split']('\x20')['map'](x=>Number(x)))['filter'](x=>x[0x0]<=M)['sort']((a,b)=>{if(a[0x1]===b[0x1]){return b[0x0]-a[0x0];}else{return b[0x1]-a[0x1];}});let ans=0x0;let now=0x0;if(list['length']===0x0){console['log'](0x0);return;}for(let i=0x0;i<N;i++){if(now===M){break;}if(list[i][0x0]>M-now){continue;}ans+=list[i][0x1];now++;}console['log'](ans);}Main(require('fs')['readFileSync']('/dev/stdin','utf8')['trim']());