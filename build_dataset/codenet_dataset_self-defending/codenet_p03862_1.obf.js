const a0_0x2765a5=(function(){let firstCall=!![];return function(context,fn){const rfn=firstCall?function(){if(fn){const res=fn['apply'](context,arguments);fn=null;return res;}}:function(){};firstCall=![];return rfn;};}());const a0_0x35251a=a0_0x2765a5(this,function(){return a0_0x35251a['toString']()['search']('(((.+)+)+)+$')['toString']()['constructor'](a0_0x35251a)['search']('(((.+)+)+)+$');});a0_0x35251a();'use strict';const main=arg=>{const input=arg['trim']()['split']('\x0a');let N=Number(input[0x0]['split']('\x20')[0x0]);let x=Number(input[0x0]['split']('\x20')[0x1]);let As=input[0x1]['split']('\x20')['map'](n=>Number(n));let manip=0x0;for(let i=0x0;i<N;i++){let exceed=As[i]-x;if(exceed>0x0){As[i]=x;manip+=exceed;}}for(let i=0x1;i<N-0x1;i++){let left=As[i-0x1];let current=As[i];let right=As[i+0x1];if(left+current>x&&current+right>x){As[i]=x-left;manip+=current-(x-left);}}for(let i=0x0;i<N-0x1;i++){let current=As[i];let right=As[i+0x1];if(current+right>x){As[i]=x-right;manip+=current-(x-right);}}console['log'](manip);};main(require('fs')['readFileSync']('/dev/stdin','utf8'));