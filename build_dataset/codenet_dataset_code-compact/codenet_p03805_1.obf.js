function main(lines){const [N,M]=na();const nodes=Array(N+0x1)['fill'](0x0)['map'](()=>new Set());for(let i=0x1;i<=M;i++){const [a,b]=na();nodes[a]['add'](b);nodes[b]['add'](a);}let ans=0x0;searchRoute(nodes[0x1],[0x1]);function searchRoute(node,passed){if(passed['length']==N)return++ans;for(let n of node){if(passed['includes'](n))continue;searchRoute(nodes[n],passed['concat'](n));}}return ans;}const lines=require('fs')['readFileSync']('/dev/stdin','utf8')['trim']()['split']('\x0a');let lineCount=0x0;const s=()=>lines[lineCount++];const n=()=>Number(s());const b=()=>BigInt(s());const sa=()=>s()['split']('\x20');const na=()=>sa()['map'](Number);const ba=()=>sa()['map'](BigInt);const ans=main(lines);console['log'](ans);